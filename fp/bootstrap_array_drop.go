// bootstrap_array_drop.go
// DO NOT EDIT THIS FILE WAS GENERATED AUTOMATICALLY BY https://github.com/zx80live/gofp-bootstrap

package fp

func BoolArrayDrop(m []bool, i int) []bool {
	s := len(m)
	if i < 0 || i >= s {
		panic("index out of bound")
	}
	if s > 0 {
		return m[i : s-1]
	} else {
		return make([]bool, 0)
	}
}
func StringArrayDrop(m []string, i int) []string {
	s := len(m)
	if i < 0 || i >= s {
		panic("index out of bound")
	}
	if s > 0 {
		return m[i : s-1]
	} else {
		return make([]string, 0)
	}
}
func IntArrayDrop(m []int, i int) []int {
	s := len(m)
	if i < 0 || i >= s {
		panic("index out of bound")
	}
	if s > 0 {
		return m[i : s-1]
	} else {
		return make([]int, 0)
	}
}
func Int64ArrayDrop(m []int64, i int) []int64 {
	s := len(m)
	if i < 0 || i >= s {
		panic("index out of bound")
	}
	if s > 0 {
		return m[i : s-1]
	} else {
		return make([]int64, 0)
	}
}
func ByteArrayDrop(m []byte, i int) []byte {
	s := len(m)
	if i < 0 || i >= s {
		panic("index out of bound")
	}
	if s > 0 {
		return m[i : s-1]
	} else {
		return make([]byte, 0)
	}
}
func RuneArrayDrop(m []rune, i int) []rune {
	s := len(m)
	if i < 0 || i >= s {
		panic("index out of bound")
	}
	if s > 0 {
		return m[i : s-1]
	} else {
		return make([]rune, 0)
	}
}
func Float32ArrayDrop(m []float32, i int) []float32 {
	s := len(m)
	if i < 0 || i >= s {
		panic("index out of bound")
	}
	if s > 0 {
		return m[i : s-1]
	} else {
		return make([]float32, 0)
	}
}
func Float64ArrayDrop(m []float64, i int) []float64 {
	s := len(m)
	if i < 0 || i >= s {
		panic("index out of bound")
	}
	if s > 0 {
		return m[i : s-1]
	} else {
		return make([]float64, 0)
	}
}
func AnyArrayDrop(m []Any, i int) []Any {
	s := len(m)
	if i < 0 || i >= s {
		panic("index out of bound")
	}
	if s > 0 {
		return m[i : s-1]
	} else {
		return make([]Any, 0)
	}
}
func BoolArrayArrayDrop(m [][]bool, i int) [][]bool {
	s := len(m)
	if i < 0 || i >= s {
		panic("index out of bound")
	}
	if s > 0 {
		return m[i : s-1]
	} else {
		return make([][]bool, 0)
	}
}
func StringArrayArrayDrop(m [][]string, i int) [][]string {
	s := len(m)
	if i < 0 || i >= s {
		panic("index out of bound")
	}
	if s > 0 {
		return m[i : s-1]
	} else {
		return make([][]string, 0)
	}
}
func IntArrayArrayDrop(m [][]int, i int) [][]int {
	s := len(m)
	if i < 0 || i >= s {
		panic("index out of bound")
	}
	if s > 0 {
		return m[i : s-1]
	} else {
		return make([][]int, 0)
	}
}
func Int64ArrayArrayDrop(m [][]int64, i int) [][]int64 {
	s := len(m)
	if i < 0 || i >= s {
		panic("index out of bound")
	}
	if s > 0 {
		return m[i : s-1]
	} else {
		return make([][]int64, 0)
	}
}
func ByteArrayArrayDrop(m [][]byte, i int) [][]byte {
	s := len(m)
	if i < 0 || i >= s {
		panic("index out of bound")
	}
	if s > 0 {
		return m[i : s-1]
	} else {
		return make([][]byte, 0)
	}
}
func RuneArrayArrayDrop(m [][]rune, i int) [][]rune {
	s := len(m)
	if i < 0 || i >= s {
		panic("index out of bound")
	}
	if s > 0 {
		return m[i : s-1]
	} else {
		return make([][]rune, 0)
	}
}
func Float32ArrayArrayDrop(m [][]float32, i int) [][]float32 {
	s := len(m)
	if i < 0 || i >= s {
		panic("index out of bound")
	}
	if s > 0 {
		return m[i : s-1]
	} else {
		return make([][]float32, 0)
	}
}
func Float64ArrayArrayDrop(m [][]float64, i int) [][]float64 {
	s := len(m)
	if i < 0 || i >= s {
		panic("index out of bound")
	}
	if s > 0 {
		return m[i : s-1]
	} else {
		return make([][]float64, 0)
	}
}
func AnyArrayArrayDrop(m [][]Any, i int) [][]Any {
	s := len(m)
	if i < 0 || i >= s {
		panic("index out of bound")
	}
	if s > 0 {
		return m[i : s-1]
	} else {
		return make([][]Any, 0)
	}
}
