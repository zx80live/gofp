// bootstrap_array_filter.go
// DO NOT EDIT THIS FILE WAS GENERATED AUTOMATICALLY BY https://github.com/zx80live/gofp-bootstrap

package fp

func BoolArrayFilter(m []bool, p BoolPredicate) []bool {
	l := len(m)
	acc := make([]bool, l)
	i := 0
	for _, e := range m {
		if p(e) {
			acc[i] = e
			i++
		}
	}
	return acc[0:i]
}
func StringArrayFilter(m []string, p StringPredicate) []string {
	l := len(m)
	acc := make([]string, l)
	i := 0
	for _, e := range m {
		if p(e) {
			acc[i] = e
			i++
		}
	}
	return acc[0:i]
}
func IntArrayFilter(m []int, p IntPredicate) []int {
	l := len(m)
	acc := make([]int, l)
	i := 0
	for _, e := range m {
		if p(e) {
			acc[i] = e
			i++
		}
	}
	return acc[0:i]
}
func Int8ArrayFilter(m []int8, p Int8Predicate) []int8 {
	l := len(m)
	acc := make([]int8, l)
	i := 0
	for _, e := range m {
		if p(e) {
			acc[i] = e
			i++
		}
	}
	return acc[0:i]
}
func Int16ArrayFilter(m []int16, p Int16Predicate) []int16 {
	l := len(m)
	acc := make([]int16, l)
	i := 0
	for _, e := range m {
		if p(e) {
			acc[i] = e
			i++
		}
	}
	return acc[0:i]
}
func Int32ArrayFilter(m []int32, p Int32Predicate) []int32 {
	l := len(m)
	acc := make([]int32, l)
	i := 0
	for _, e := range m {
		if p(e) {
			acc[i] = e
			i++
		}
	}
	return acc[0:i]
}
func Int64ArrayFilter(m []int64, p Int64Predicate) []int64 {
	l := len(m)
	acc := make([]int64, l)
	i := 0
	for _, e := range m {
		if p(e) {
			acc[i] = e
			i++
		}
	}
	return acc[0:i]
}
func UintArrayFilter(m []uint, p UintPredicate) []uint {
	l := len(m)
	acc := make([]uint, l)
	i := 0
	for _, e := range m {
		if p(e) {
			acc[i] = e
			i++
		}
	}
	return acc[0:i]
}
func Uint8ArrayFilter(m []uint8, p Uint8Predicate) []uint8 {
	l := len(m)
	acc := make([]uint8, l)
	i := 0
	for _, e := range m {
		if p(e) {
			acc[i] = e
			i++
		}
	}
	return acc[0:i]
}
func Uint16ArrayFilter(m []uint16, p Uint16Predicate) []uint16 {
	l := len(m)
	acc := make([]uint16, l)
	i := 0
	for _, e := range m {
		if p(e) {
			acc[i] = e
			i++
		}
	}
	return acc[0:i]
}
func Uint32ArrayFilter(m []uint32, p Uint32Predicate) []uint32 {
	l := len(m)
	acc := make([]uint32, l)
	i := 0
	for _, e := range m {
		if p(e) {
			acc[i] = e
			i++
		}
	}
	return acc[0:i]
}
func Uint64ArrayFilter(m []uint64, p Uint64Predicate) []uint64 {
	l := len(m)
	acc := make([]uint64, l)
	i := 0
	for _, e := range m {
		if p(e) {
			acc[i] = e
			i++
		}
	}
	return acc[0:i]
}
func UintptrArrayFilter(m []uintptr, p UintptrPredicate) []uintptr {
	l := len(m)
	acc := make([]uintptr, l)
	i := 0
	for _, e := range m {
		if p(e) {
			acc[i] = e
			i++
		}
	}
	return acc[0:i]
}
func ByteArrayFilter(m []byte, p BytePredicate) []byte {
	l := len(m)
	acc := make([]byte, l)
	i := 0
	for _, e := range m {
		if p(e) {
			acc[i] = e
			i++
		}
	}
	return acc[0:i]
}
func RuneArrayFilter(m []rune, p RunePredicate) []rune {
	l := len(m)
	acc := make([]rune, l)
	i := 0
	for _, e := range m {
		if p(e) {
			acc[i] = e
			i++
		}
	}
	return acc[0:i]
}
func Float32ArrayFilter(m []float32, p Float32Predicate) []float32 {
	l := len(m)
	acc := make([]float32, l)
	i := 0
	for _, e := range m {
		if p(e) {
			acc[i] = e
			i++
		}
	}
	return acc[0:i]
}
func Float64ArrayFilter(m []float64, p Float64Predicate) []float64 {
	l := len(m)
	acc := make([]float64, l)
	i := 0
	for _, e := range m {
		if p(e) {
			acc[i] = e
			i++
		}
	}
	return acc[0:i]
}
func Complex64ArrayFilter(m []complex64, p Complex64Predicate) []complex64 {
	l := len(m)
	acc := make([]complex64, l)
	i := 0
	for _, e := range m {
		if p(e) {
			acc[i] = e
			i++
		}
	}
	return acc[0:i]
}
func Complex128ArrayFilter(m []complex128, p Complex128Predicate) []complex128 {
	l := len(m)
	acc := make([]complex128, l)
	i := 0
	for _, e := range m {
		if p(e) {
			acc[i] = e
			i++
		}
	}
	return acc[0:i]
}
func AnyArrayFilter(m []Any, p AnyPredicate) []Any {
	l := len(m)
	acc := make([]Any, l)
	i := 0
	for _, e := range m {
		if p(e) {
			acc[i] = e
			i++
		}
	}
	return acc[0:i]
}
func BoolArrayArrayFilter(m [][]bool, p BoolArrayPredicate) [][]bool {
	l := len(m)
	acc := make([][]bool, l)
	i := 0
	for _, e := range m {
		if p(e) {
			acc[i] = e
			i++
		}
	}
	return acc[0:i]
}
func StringArrayArrayFilter(m [][]string, p StringArrayPredicate) [][]string {
	l := len(m)
	acc := make([][]string, l)
	i := 0
	for _, e := range m {
		if p(e) {
			acc[i] = e
			i++
		}
	}
	return acc[0:i]
}
func IntArrayArrayFilter(m [][]int, p IntArrayPredicate) [][]int {
	l := len(m)
	acc := make([][]int, l)
	i := 0
	for _, e := range m {
		if p(e) {
			acc[i] = e
			i++
		}
	}
	return acc[0:i]
}
func Int8ArrayArrayFilter(m [][]int8, p Int8ArrayPredicate) [][]int8 {
	l := len(m)
	acc := make([][]int8, l)
	i := 0
	for _, e := range m {
		if p(e) {
			acc[i] = e
			i++
		}
	}
	return acc[0:i]
}
func Int16ArrayArrayFilter(m [][]int16, p Int16ArrayPredicate) [][]int16 {
	l := len(m)
	acc := make([][]int16, l)
	i := 0
	for _, e := range m {
		if p(e) {
			acc[i] = e
			i++
		}
	}
	return acc[0:i]
}
func Int32ArrayArrayFilter(m [][]int32, p Int32ArrayPredicate) [][]int32 {
	l := len(m)
	acc := make([][]int32, l)
	i := 0
	for _, e := range m {
		if p(e) {
			acc[i] = e
			i++
		}
	}
	return acc[0:i]
}
func Int64ArrayArrayFilter(m [][]int64, p Int64ArrayPredicate) [][]int64 {
	l := len(m)
	acc := make([][]int64, l)
	i := 0
	for _, e := range m {
		if p(e) {
			acc[i] = e
			i++
		}
	}
	return acc[0:i]
}
func UintArrayArrayFilter(m [][]uint, p UintArrayPredicate) [][]uint {
	l := len(m)
	acc := make([][]uint, l)
	i := 0
	for _, e := range m {
		if p(e) {
			acc[i] = e
			i++
		}
	}
	return acc[0:i]
}
func Uint8ArrayArrayFilter(m [][]uint8, p Uint8ArrayPredicate) [][]uint8 {
	l := len(m)
	acc := make([][]uint8, l)
	i := 0
	for _, e := range m {
		if p(e) {
			acc[i] = e
			i++
		}
	}
	return acc[0:i]
}
func Uint16ArrayArrayFilter(m [][]uint16, p Uint16ArrayPredicate) [][]uint16 {
	l := len(m)
	acc := make([][]uint16, l)
	i := 0
	for _, e := range m {
		if p(e) {
			acc[i] = e
			i++
		}
	}
	return acc[0:i]
}
func Uint32ArrayArrayFilter(m [][]uint32, p Uint32ArrayPredicate) [][]uint32 {
	l := len(m)
	acc := make([][]uint32, l)
	i := 0
	for _, e := range m {
		if p(e) {
			acc[i] = e
			i++
		}
	}
	return acc[0:i]
}
func Uint64ArrayArrayFilter(m [][]uint64, p Uint64ArrayPredicate) [][]uint64 {
	l := len(m)
	acc := make([][]uint64, l)
	i := 0
	for _, e := range m {
		if p(e) {
			acc[i] = e
			i++
		}
	}
	return acc[0:i]
}
func UintptrArrayArrayFilter(m [][]uintptr, p UintptrArrayPredicate) [][]uintptr {
	l := len(m)
	acc := make([][]uintptr, l)
	i := 0
	for _, e := range m {
		if p(e) {
			acc[i] = e
			i++
		}
	}
	return acc[0:i]
}
func ByteArrayArrayFilter(m [][]byte, p ByteArrayPredicate) [][]byte {
	l := len(m)
	acc := make([][]byte, l)
	i := 0
	for _, e := range m {
		if p(e) {
			acc[i] = e
			i++
		}
	}
	return acc[0:i]
}
func RuneArrayArrayFilter(m [][]rune, p RuneArrayPredicate) [][]rune {
	l := len(m)
	acc := make([][]rune, l)
	i := 0
	for _, e := range m {
		if p(e) {
			acc[i] = e
			i++
		}
	}
	return acc[0:i]
}
func Float32ArrayArrayFilter(m [][]float32, p Float32ArrayPredicate) [][]float32 {
	l := len(m)
	acc := make([][]float32, l)
	i := 0
	for _, e := range m {
		if p(e) {
			acc[i] = e
			i++
		}
	}
	return acc[0:i]
}
func Float64ArrayArrayFilter(m [][]float64, p Float64ArrayPredicate) [][]float64 {
	l := len(m)
	acc := make([][]float64, l)
	i := 0
	for _, e := range m {
		if p(e) {
			acc[i] = e
			i++
		}
	}
	return acc[0:i]
}
func Complex64ArrayArrayFilter(m [][]complex64, p Complex64ArrayPredicate) [][]complex64 {
	l := len(m)
	acc := make([][]complex64, l)
	i := 0
	for _, e := range m {
		if p(e) {
			acc[i] = e
			i++
		}
	}
	return acc[0:i]
}
func Complex128ArrayArrayFilter(m [][]complex128, p Complex128ArrayPredicate) [][]complex128 {
	l := len(m)
	acc := make([][]complex128, l)
	i := 0
	for _, e := range m {
		if p(e) {
			acc[i] = e
			i++
		}
	}
	return acc[0:i]
}
func AnyArrayArrayFilter(m [][]Any, p AnyArrayPredicate) [][]Any {
	l := len(m)
	acc := make([][]Any, l)
	i := 0
	for _, e := range m {
		if p(e) {
			acc[i] = e
			i++
		}
	}
	return acc[0:i]
}
func BoolOptionArrayFilter(m []BoolOption, p BoolOptionPredicate) []BoolOption {
	l := len(m)
	acc := make([]BoolOption, l)
	i := 0
	for _, e := range m {
		if p(e) {
			acc[i] = e
			i++
		}
	}
	return acc[0:i]
}
func StringOptionArrayFilter(m []StringOption, p StringOptionPredicate) []StringOption {
	l := len(m)
	acc := make([]StringOption, l)
	i := 0
	for _, e := range m {
		if p(e) {
			acc[i] = e
			i++
		}
	}
	return acc[0:i]
}
func IntOptionArrayFilter(m []IntOption, p IntOptionPredicate) []IntOption {
	l := len(m)
	acc := make([]IntOption, l)
	i := 0
	for _, e := range m {
		if p(e) {
			acc[i] = e
			i++
		}
	}
	return acc[0:i]
}
func Int8OptionArrayFilter(m []Int8Option, p Int8OptionPredicate) []Int8Option {
	l := len(m)
	acc := make([]Int8Option, l)
	i := 0
	for _, e := range m {
		if p(e) {
			acc[i] = e
			i++
		}
	}
	return acc[0:i]
}
func Int16OptionArrayFilter(m []Int16Option, p Int16OptionPredicate) []Int16Option {
	l := len(m)
	acc := make([]Int16Option, l)
	i := 0
	for _, e := range m {
		if p(e) {
			acc[i] = e
			i++
		}
	}
	return acc[0:i]
}
func Int32OptionArrayFilter(m []Int32Option, p Int32OptionPredicate) []Int32Option {
	l := len(m)
	acc := make([]Int32Option, l)
	i := 0
	for _, e := range m {
		if p(e) {
			acc[i] = e
			i++
		}
	}
	return acc[0:i]
}
func Int64OptionArrayFilter(m []Int64Option, p Int64OptionPredicate) []Int64Option {
	l := len(m)
	acc := make([]Int64Option, l)
	i := 0
	for _, e := range m {
		if p(e) {
			acc[i] = e
			i++
		}
	}
	return acc[0:i]
}
func UintOptionArrayFilter(m []UintOption, p UintOptionPredicate) []UintOption {
	l := len(m)
	acc := make([]UintOption, l)
	i := 0
	for _, e := range m {
		if p(e) {
			acc[i] = e
			i++
		}
	}
	return acc[0:i]
}
func Uint8OptionArrayFilter(m []Uint8Option, p Uint8OptionPredicate) []Uint8Option {
	l := len(m)
	acc := make([]Uint8Option, l)
	i := 0
	for _, e := range m {
		if p(e) {
			acc[i] = e
			i++
		}
	}
	return acc[0:i]
}
func Uint16OptionArrayFilter(m []Uint16Option, p Uint16OptionPredicate) []Uint16Option {
	l := len(m)
	acc := make([]Uint16Option, l)
	i := 0
	for _, e := range m {
		if p(e) {
			acc[i] = e
			i++
		}
	}
	return acc[0:i]
}
func Uint32OptionArrayFilter(m []Uint32Option, p Uint32OptionPredicate) []Uint32Option {
	l := len(m)
	acc := make([]Uint32Option, l)
	i := 0
	for _, e := range m {
		if p(e) {
			acc[i] = e
			i++
		}
	}
	return acc[0:i]
}
func Uint64OptionArrayFilter(m []Uint64Option, p Uint64OptionPredicate) []Uint64Option {
	l := len(m)
	acc := make([]Uint64Option, l)
	i := 0
	for _, e := range m {
		if p(e) {
			acc[i] = e
			i++
		}
	}
	return acc[0:i]
}
func UintptrOptionArrayFilter(m []UintptrOption, p UintptrOptionPredicate) []UintptrOption {
	l := len(m)
	acc := make([]UintptrOption, l)
	i := 0
	for _, e := range m {
		if p(e) {
			acc[i] = e
			i++
		}
	}
	return acc[0:i]
}
func ByteOptionArrayFilter(m []ByteOption, p ByteOptionPredicate) []ByteOption {
	l := len(m)
	acc := make([]ByteOption, l)
	i := 0
	for _, e := range m {
		if p(e) {
			acc[i] = e
			i++
		}
	}
	return acc[0:i]
}
func RuneOptionArrayFilter(m []RuneOption, p RuneOptionPredicate) []RuneOption {
	l := len(m)
	acc := make([]RuneOption, l)
	i := 0
	for _, e := range m {
		if p(e) {
			acc[i] = e
			i++
		}
	}
	return acc[0:i]
}
func Float32OptionArrayFilter(m []Float32Option, p Float32OptionPredicate) []Float32Option {
	l := len(m)
	acc := make([]Float32Option, l)
	i := 0
	for _, e := range m {
		if p(e) {
			acc[i] = e
			i++
		}
	}
	return acc[0:i]
}
func Float64OptionArrayFilter(m []Float64Option, p Float64OptionPredicate) []Float64Option {
	l := len(m)
	acc := make([]Float64Option, l)
	i := 0
	for _, e := range m {
		if p(e) {
			acc[i] = e
			i++
		}
	}
	return acc[0:i]
}
func Complex64OptionArrayFilter(m []Complex64Option, p Complex64OptionPredicate) []Complex64Option {
	l := len(m)
	acc := make([]Complex64Option, l)
	i := 0
	for _, e := range m {
		if p(e) {
			acc[i] = e
			i++
		}
	}
	return acc[0:i]
}
func Complex128OptionArrayFilter(m []Complex128Option, p Complex128OptionPredicate) []Complex128Option {
	l := len(m)
	acc := make([]Complex128Option, l)
	i := 0
	for _, e := range m {
		if p(e) {
			acc[i] = e
			i++
		}
	}
	return acc[0:i]
}
func AnyOptionArrayFilter(m []AnyOption, p AnyOptionPredicate) []AnyOption {
	l := len(m)
	acc := make([]AnyOption, l)
	i := 0
	for _, e := range m {
		if p(e) {
			acc[i] = e
			i++
		}
	}
	return acc[0:i]
}
