// bootstrap_array_filter.go
// DO NOT EDIT THIS FILE WAS GENERATED AUTOMATICALLY BY https://github.com/zx80live/gofp-bootstrap

package fp

func BoolArrayFilter(m []bool, p BoolPredicate) []bool {
	l := len(m)
	acc := make([]bool, l)
	i := 0
	for _, e := range m {
		if p(e) {
			acc[i] = e
			i++
		}
	}
	return acc[0:i]
}
func StringArrayFilter(m []string, p StringPredicate) []string {
	l := len(m)
	acc := make([]string, l)
	i := 0
	for _, e := range m {
		if p(e) {
			acc[i] = e
			i++
		}
	}
	return acc[0:i]
}
func IntArrayFilter(m []int, p IntPredicate) []int {
	l := len(m)
	acc := make([]int, l)
	i := 0
	for _, e := range m {
		if p(e) {
			acc[i] = e
			i++
		}
	}
	return acc[0:i]
}
func Int64ArrayFilter(m []int64, p Int64Predicate) []int64 {
	l := len(m)
	acc := make([]int64, l)
	i := 0
	for _, e := range m {
		if p(e) {
			acc[i] = e
			i++
		}
	}
	return acc[0:i]
}
func ByteArrayFilter(m []byte, p BytePredicate) []byte {
	l := len(m)
	acc := make([]byte, l)
	i := 0
	for _, e := range m {
		if p(e) {
			acc[i] = e
			i++
		}
	}
	return acc[0:i]
}
func RuneArrayFilter(m []rune, p RunePredicate) []rune {
	l := len(m)
	acc := make([]rune, l)
	i := 0
	for _, e := range m {
		if p(e) {
			acc[i] = e
			i++
		}
	}
	return acc[0:i]
}
func Float32ArrayFilter(m []float32, p Float32Predicate) []float32 {
	l := len(m)
	acc := make([]float32, l)
	i := 0
	for _, e := range m {
		if p(e) {
			acc[i] = e
			i++
		}
	}
	return acc[0:i]
}
func Float64ArrayFilter(m []float64, p Float64Predicate) []float64 {
	l := len(m)
	acc := make([]float64, l)
	i := 0
	for _, e := range m {
		if p(e) {
			acc[i] = e
			i++
		}
	}
	return acc[0:i]
}
func AnyArrayFilter(m []Any, p AnyPredicate) []Any {
	l := len(m)
	acc := make([]Any, l)
	i := 0
	for _, e := range m {
		if p(e) {
			acc[i] = e
			i++
		}
	}
	return acc[0:i]
}
func BoolArrayArrayFilter(m [][]bool, p BoolArrayPredicate) [][]bool {
	l := len(m)
	acc := make([][]bool, l)
	i := 0
	for _, e := range m {
		if p(e) {
			acc[i] = e
			i++
		}
	}
	return acc[0:i]
}
func StringArrayArrayFilter(m [][]string, p StringArrayPredicate) [][]string {
	l := len(m)
	acc := make([][]string, l)
	i := 0
	for _, e := range m {
		if p(e) {
			acc[i] = e
			i++
		}
	}
	return acc[0:i]
}
func IntArrayArrayFilter(m [][]int, p IntArrayPredicate) [][]int {
	l := len(m)
	acc := make([][]int, l)
	i := 0
	for _, e := range m {
		if p(e) {
			acc[i] = e
			i++
		}
	}
	return acc[0:i]
}
func Int64ArrayArrayFilter(m [][]int64, p Int64ArrayPredicate) [][]int64 {
	l := len(m)
	acc := make([][]int64, l)
	i := 0
	for _, e := range m {
		if p(e) {
			acc[i] = e
			i++
		}
	}
	return acc[0:i]
}
func ByteArrayArrayFilter(m [][]byte, p ByteArrayPredicate) [][]byte {
	l := len(m)
	acc := make([][]byte, l)
	i := 0
	for _, e := range m {
		if p(e) {
			acc[i] = e
			i++
		}
	}
	return acc[0:i]
}
func RuneArrayArrayFilter(m [][]rune, p RuneArrayPredicate) [][]rune {
	l := len(m)
	acc := make([][]rune, l)
	i := 0
	for _, e := range m {
		if p(e) {
			acc[i] = e
			i++
		}
	}
	return acc[0:i]
}
func Float32ArrayArrayFilter(m [][]float32, p Float32ArrayPredicate) [][]float32 {
	l := len(m)
	acc := make([][]float32, l)
	i := 0
	for _, e := range m {
		if p(e) {
			acc[i] = e
			i++
		}
	}
	return acc[0:i]
}
func Float64ArrayArrayFilter(m [][]float64, p Float64ArrayPredicate) [][]float64 {
	l := len(m)
	acc := make([][]float64, l)
	i := 0
	for _, e := range m {
		if p(e) {
			acc[i] = e
			i++
		}
	}
	return acc[0:i]
}
func AnyArrayArrayFilter(m [][]Any, p AnyArrayPredicate) [][]Any {
	l := len(m)
	acc := make([][]Any, l)
	i := 0
	for _, e := range m {
		if p(e) {
			acc[i] = e
			i++
		}
	}
	return acc[0:i]
}
