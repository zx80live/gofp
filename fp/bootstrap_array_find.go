// bootstrap_array_find.go
// DO NOT EDIT THIS FILE WAS GENERATED AUTOMATICALLY BY https://github.com/zx80live/gofp-bootstrap

package fp

func (a BoolArray) Find(p func(bool) bool) BoolOption {
	for _, e := range a {
		if p(e) {
			return MakeBoolOption(e)
		}
	}
	return NoneBool
}
func (a StringArray) Find(p func(string) bool) StringOption {
	for _, e := range a {
		if p(e) {
			return MakeStringOption(e)
		}
	}
	return NoneString
}
func (a IntArray) Find(p func(int) bool) IntOption {
	for _, e := range a {
		if p(e) {
			return MakeIntOption(e)
		}
	}
	return NoneInt
}
func (a Int64Array) Find(p func(int64) bool) Int64Option {
	for _, e := range a {
		if p(e) {
			return MakeInt64Option(e)
		}
	}
	return NoneInt64
}
func (a ByteArray) Find(p func(byte) bool) ByteOption {
	for _, e := range a {
		if p(e) {
			return MakeByteOption(e)
		}
	}
	return NoneByte
}
func (a RuneArray) Find(p func(rune) bool) RuneOption {
	for _, e := range a {
		if p(e) {
			return MakeRuneOption(e)
		}
	}
	return NoneRune
}
func (a Float32Array) Find(p func(float32) bool) Float32Option {
	for _, e := range a {
		if p(e) {
			return MakeFloat32Option(e)
		}
	}
	return NoneFloat32
}
func (a Float64Array) Find(p func(float64) bool) Float64Option {
	for _, e := range a {
		if p(e) {
			return MakeFloat64Option(e)
		}
	}
	return NoneFloat64
}
func (a AnyArray) Find(p func(Any) bool) AnyOption {
	for _, e := range a {
		if p(e) {
			return MakeAnyOption(e)
		}
	}
	return NoneAny
}
func (a BoolArrayArray) Find(p func([]bool) bool) BoolArrayOption {
	for _, e := range a {
		if p(e) {
			return MakeBoolArrayOption(e)
		}
	}
	return NoneBoolArray
}
func (a StringArrayArray) Find(p func([]string) bool) StringArrayOption {
	for _, e := range a {
		if p(e) {
			return MakeStringArrayOption(e)
		}
	}
	return NoneStringArray
}
func (a IntArrayArray) Find(p func([]int) bool) IntArrayOption {
	for _, e := range a {
		if p(e) {
			return MakeIntArrayOption(e)
		}
	}
	return NoneIntArray
}
func (a Int64ArrayArray) Find(p func([]int64) bool) Int64ArrayOption {
	for _, e := range a {
		if p(e) {
			return MakeInt64ArrayOption(e)
		}
	}
	return NoneInt64Array
}
func (a ByteArrayArray) Find(p func([]byte) bool) ByteArrayOption {
	for _, e := range a {
		if p(e) {
			return MakeByteArrayOption(e)
		}
	}
	return NoneByteArray
}
func (a RuneArrayArray) Find(p func([]rune) bool) RuneArrayOption {
	for _, e := range a {
		if p(e) {
			return MakeRuneArrayOption(e)
		}
	}
	return NoneRuneArray
}
func (a Float32ArrayArray) Find(p func([]float32) bool) Float32ArrayOption {
	for _, e := range a {
		if p(e) {
			return MakeFloat32ArrayOption(e)
		}
	}
	return NoneFloat32Array
}
func (a Float64ArrayArray) Find(p func([]float64) bool) Float64ArrayOption {
	for _, e := range a {
		if p(e) {
			return MakeFloat64ArrayOption(e)
		}
	}
	return NoneFloat64Array
}
func (a AnyArrayArray) Find(p func([]Any) bool) AnyArrayOption {
	for _, e := range a {
		if p(e) {
			return MakeAnyArrayOption(e)
		}
	}
	return NoneAnyArray
}
