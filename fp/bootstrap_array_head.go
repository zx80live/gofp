// bootstrap_array_head.go
// DO NOT EDIT THIS FILE WAS GENERATED AUTOMATICALLY BY https://github.com/zx80live/gofp-bootstrap

package fp

func BoolArrayHead(m []bool) bool {
	if len(m) > 0 {
		return m[0]
	} else {
		panic("can't get head from empty []bool slice")
	}
}
func StringArrayHead(m []string) string {
	if len(m) > 0 {
		return m[0]
	} else {
		panic("can't get head from empty []string slice")
	}
}
func IntArrayHead(m []int) int {
	if len(m) > 0 {
		return m[0]
	} else {
		panic("can't get head from empty []int slice")
	}
}
func Int64ArrayHead(m []int64) int64 {
	if len(m) > 0 {
		return m[0]
	} else {
		panic("can't get head from empty []int64 slice")
	}
}
func ByteArrayHead(m []byte) byte {
	if len(m) > 0 {
		return m[0]
	} else {
		panic("can't get head from empty []byte slice")
	}
}
func RuneArrayHead(m []rune) rune {
	if len(m) > 0 {
		return m[0]
	} else {
		panic("can't get head from empty []rune slice")
	}
}
func Float32ArrayHead(m []float32) float32 {
	if len(m) > 0 {
		return m[0]
	} else {
		panic("can't get head from empty []float32 slice")
	}
}
func Float64ArrayHead(m []float64) float64 {
	if len(m) > 0 {
		return m[0]
	} else {
		panic("can't get head from empty []float64 slice")
	}
}
func AnyArrayHead(m []Any) Any {
	if len(m) > 0 {
		return m[0]
	} else {
		panic("can't get head from empty []Any slice")
	}
}
func BoolArrayArrayHead(m [][]bool) []bool {
	if len(m) > 0 {
		return m[0]
	} else {
		panic("can't get head from empty [][]bool slice")
	}
}
func StringArrayArrayHead(m [][]string) []string {
	if len(m) > 0 {
		return m[0]
	} else {
		panic("can't get head from empty [][]string slice")
	}
}
func IntArrayArrayHead(m [][]int) []int {
	if len(m) > 0 {
		return m[0]
	} else {
		panic("can't get head from empty [][]int slice")
	}
}
func Int64ArrayArrayHead(m [][]int64) []int64 {
	if len(m) > 0 {
		return m[0]
	} else {
		panic("can't get head from empty [][]int64 slice")
	}
}
func ByteArrayArrayHead(m [][]byte) []byte {
	if len(m) > 0 {
		return m[0]
	} else {
		panic("can't get head from empty [][]byte slice")
	}
}
func RuneArrayArrayHead(m [][]rune) []rune {
	if len(m) > 0 {
		return m[0]
	} else {
		panic("can't get head from empty [][]rune slice")
	}
}
func Float32ArrayArrayHead(m [][]float32) []float32 {
	if len(m) > 0 {
		return m[0]
	} else {
		panic("can't get head from empty [][]float32 slice")
	}
}
func Float64ArrayArrayHead(m [][]float64) []float64 {
	if len(m) > 0 {
		return m[0]
	} else {
		panic("can't get head from empty [][]float64 slice")
	}
}
func AnyArrayArrayHead(m [][]Any) []Any {
	if len(m) > 0 {
		return m[0]
	} else {
		panic("can't get head from empty [][]Any slice")
	}
}
