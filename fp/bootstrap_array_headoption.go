// bootstrap_array_headoption.go
// DO NOT EDIT THIS FILE WAS GENERATED AUTOMATICALLY BY https://github.com/zx80live/gofp-bootstrap

package fp

func BoolArrayHeadOption(m []bool) BoolOption {
	if len(m) > 0 {
		return MakeBoolOption(m[0])
	} else {
		return NoneBool
	}
}
func StringArrayHeadOption(m []string) StringOption {
	if len(m) > 0 {
		return MakeStringOption(m[0])
	} else {
		return NoneString
	}
}
func IntArrayHeadOption(m []int) IntOption {
	if len(m) > 0 {
		return MakeIntOption(m[0])
	} else {
		return NoneInt
	}
}
func Int64ArrayHeadOption(m []int64) Int64Option {
	if len(m) > 0 {
		return MakeInt64Option(m[0])
	} else {
		return NoneInt64
	}
}
func ByteArrayHeadOption(m []byte) ByteOption {
	if len(m) > 0 {
		return MakeByteOption(m[0])
	} else {
		return NoneByte
	}
}
func RuneArrayHeadOption(m []rune) RuneOption {
	if len(m) > 0 {
		return MakeRuneOption(m[0])
	} else {
		return NoneRune
	}
}
func Float32ArrayHeadOption(m []float32) Float32Option {
	if len(m) > 0 {
		return MakeFloat32Option(m[0])
	} else {
		return NoneFloat32
	}
}
func Float64ArrayHeadOption(m []float64) Float64Option {
	if len(m) > 0 {
		return MakeFloat64Option(m[0])
	} else {
		return NoneFloat64
	}
}
func AnyArrayHeadOption(m []Any) AnyOption {
	if len(m) > 0 {
		return MakeAnyOption(m[0])
	} else {
		return NoneAny
	}
}
func BoolArrayArrayHeadOption(m [][]bool) BoolArrayOption {
	if len(m) > 0 {
		return MakeBoolArrayOption(m[0])
	} else {
		return NoneBoolArray
	}
}
func StringArrayArrayHeadOption(m [][]string) StringArrayOption {
	if len(m) > 0 {
		return MakeStringArrayOption(m[0])
	} else {
		return NoneStringArray
	}
}
func IntArrayArrayHeadOption(m [][]int) IntArrayOption {
	if len(m) > 0 {
		return MakeIntArrayOption(m[0])
	} else {
		return NoneIntArray
	}
}
func Int64ArrayArrayHeadOption(m [][]int64) Int64ArrayOption {
	if len(m) > 0 {
		return MakeInt64ArrayOption(m[0])
	} else {
		return NoneInt64Array
	}
}
func ByteArrayArrayHeadOption(m [][]byte) ByteArrayOption {
	if len(m) > 0 {
		return MakeByteArrayOption(m[0])
	} else {
		return NoneByteArray
	}
}
func RuneArrayArrayHeadOption(m [][]rune) RuneArrayOption {
	if len(m) > 0 {
		return MakeRuneArrayOption(m[0])
	} else {
		return NoneRuneArray
	}
}
func Float32ArrayArrayHeadOption(m [][]float32) Float32ArrayOption {
	if len(m) > 0 {
		return MakeFloat32ArrayOption(m[0])
	} else {
		return NoneFloat32Array
	}
}
func Float64ArrayArrayHeadOption(m [][]float64) Float64ArrayOption {
	if len(m) > 0 {
		return MakeFloat64ArrayOption(m[0])
	} else {
		return NoneFloat64Array
	}
}
func AnyArrayArrayHeadOption(m [][]Any) AnyArrayOption {
	if len(m) > 0 {
		return MakeAnyArrayOption(m[0])
	} else {
		return NoneAnyArray
	}
}
