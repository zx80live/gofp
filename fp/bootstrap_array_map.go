// bootstrap_array_map.go
// DO NOT EDIT THIS FILE WAS GENERATED AUTOMATICALLY BY https://github.com/zx80live/gofp-bootstrap

package fp

func BoolArrayMapBool(m []bool, f BoolToBoolTransformer) []bool {
	l := len(m)
	acc := make([]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayMapString(m []bool, f BoolToStringTransformer) []string {
	l := len(m)
	acc := make([]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayMapInt(m []bool, f BoolToIntTransformer) []int {
	l := len(m)
	acc := make([]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayMapInt8(m []bool, f BoolToInt8Transformer) []int8 {
	l := len(m)
	acc := make([]int8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayMapInt16(m []bool, f BoolToInt16Transformer) []int16 {
	l := len(m)
	acc := make([]int16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayMapInt32(m []bool, f BoolToInt32Transformer) []int32 {
	l := len(m)
	acc := make([]int32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayMapInt64(m []bool, f BoolToInt64Transformer) []int64 {
	l := len(m)
	acc := make([]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayMapUint(m []bool, f BoolToUintTransformer) []uint {
	l := len(m)
	acc := make([]uint, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayMapUint8(m []bool, f BoolToUint8Transformer) []uint8 {
	l := len(m)
	acc := make([]uint8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayMapUint16(m []bool, f BoolToUint16Transformer) []uint16 {
	l := len(m)
	acc := make([]uint16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayMapUint32(m []bool, f BoolToUint32Transformer) []uint32 {
	l := len(m)
	acc := make([]uint32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayMapUint64(m []bool, f BoolToUint64Transformer) []uint64 {
	l := len(m)
	acc := make([]uint64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayMapUintptr(m []bool, f BoolToUintptrTransformer) []uintptr {
	l := len(m)
	acc := make([]uintptr, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayMapByte(m []bool, f BoolToByteTransformer) []byte {
	l := len(m)
	acc := make([]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayMapRune(m []bool, f BoolToRuneTransformer) []rune {
	l := len(m)
	acc := make([]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayMapFloat32(m []bool, f BoolToFloat32Transformer) []float32 {
	l := len(m)
	acc := make([]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayMapFloat64(m []bool, f BoolToFloat64Transformer) []float64 {
	l := len(m)
	acc := make([]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayMapComplex64(m []bool, f BoolToComplex64Transformer) []complex64 {
	l := len(m)
	acc := make([]complex64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayMapComplex128(m []bool, f BoolToComplex128Transformer) []complex128 {
	l := len(m)
	acc := make([]complex128, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayMapAny(m []bool, f BoolToAnyTransformer) []Any {
	l := len(m)
	acc := make([]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayMapBoolArray(m []bool, f BoolToBoolArrayTransformer) [][]bool {
	l := len(m)
	acc := make([][]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayMapStringArray(m []bool, f BoolToStringArrayTransformer) [][]string {
	l := len(m)
	acc := make([][]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayMapIntArray(m []bool, f BoolToIntArrayTransformer) [][]int {
	l := len(m)
	acc := make([][]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayMapInt8Array(m []bool, f BoolToInt8ArrayTransformer) [][]int8 {
	l := len(m)
	acc := make([][]int8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayMapInt16Array(m []bool, f BoolToInt16ArrayTransformer) [][]int16 {
	l := len(m)
	acc := make([][]int16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayMapInt32Array(m []bool, f BoolToInt32ArrayTransformer) [][]int32 {
	l := len(m)
	acc := make([][]int32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayMapInt64Array(m []bool, f BoolToInt64ArrayTransformer) [][]int64 {
	l := len(m)
	acc := make([][]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayMapUintArray(m []bool, f BoolToUintArrayTransformer) [][]uint {
	l := len(m)
	acc := make([][]uint, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayMapUint8Array(m []bool, f BoolToUint8ArrayTransformer) [][]uint8 {
	l := len(m)
	acc := make([][]uint8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayMapUint16Array(m []bool, f BoolToUint16ArrayTransformer) [][]uint16 {
	l := len(m)
	acc := make([][]uint16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayMapUint32Array(m []bool, f BoolToUint32ArrayTransformer) [][]uint32 {
	l := len(m)
	acc := make([][]uint32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayMapUint64Array(m []bool, f BoolToUint64ArrayTransformer) [][]uint64 {
	l := len(m)
	acc := make([][]uint64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayMapUintptrArray(m []bool, f BoolToUintptrArrayTransformer) [][]uintptr {
	l := len(m)
	acc := make([][]uintptr, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayMapByteArray(m []bool, f BoolToByteArrayTransformer) [][]byte {
	l := len(m)
	acc := make([][]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayMapRuneArray(m []bool, f BoolToRuneArrayTransformer) [][]rune {
	l := len(m)
	acc := make([][]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayMapFloat32Array(m []bool, f BoolToFloat32ArrayTransformer) [][]float32 {
	l := len(m)
	acc := make([][]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayMapFloat64Array(m []bool, f BoolToFloat64ArrayTransformer) [][]float64 {
	l := len(m)
	acc := make([][]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayMapComplex64Array(m []bool, f BoolToComplex64ArrayTransformer) [][]complex64 {
	l := len(m)
	acc := make([][]complex64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayMapComplex128Array(m []bool, f BoolToComplex128ArrayTransformer) [][]complex128 {
	l := len(m)
	acc := make([][]complex128, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayMapAnyArray(m []bool, f BoolToAnyArrayTransformer) [][]Any {
	l := len(m)
	acc := make([][]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayMapBoolOption(m []bool, f BoolToBoolOptionTransformer) []BoolOption {
	l := len(m)
	acc := make([]BoolOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayMapStringOption(m []bool, f BoolToStringOptionTransformer) []StringOption {
	l := len(m)
	acc := make([]StringOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayMapIntOption(m []bool, f BoolToIntOptionTransformer) []IntOption {
	l := len(m)
	acc := make([]IntOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayMapInt8Option(m []bool, f BoolToInt8OptionTransformer) []Int8Option {
	l := len(m)
	acc := make([]Int8Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayMapInt16Option(m []bool, f BoolToInt16OptionTransformer) []Int16Option {
	l := len(m)
	acc := make([]Int16Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayMapInt32Option(m []bool, f BoolToInt32OptionTransformer) []Int32Option {
	l := len(m)
	acc := make([]Int32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayMapInt64Option(m []bool, f BoolToInt64OptionTransformer) []Int64Option {
	l := len(m)
	acc := make([]Int64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayMapUintOption(m []bool, f BoolToUintOptionTransformer) []UintOption {
	l := len(m)
	acc := make([]UintOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayMapUint8Option(m []bool, f BoolToUint8OptionTransformer) []Uint8Option {
	l := len(m)
	acc := make([]Uint8Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayMapUint16Option(m []bool, f BoolToUint16OptionTransformer) []Uint16Option {
	l := len(m)
	acc := make([]Uint16Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayMapUint32Option(m []bool, f BoolToUint32OptionTransformer) []Uint32Option {
	l := len(m)
	acc := make([]Uint32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayMapUint64Option(m []bool, f BoolToUint64OptionTransformer) []Uint64Option {
	l := len(m)
	acc := make([]Uint64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayMapUintptrOption(m []bool, f BoolToUintptrOptionTransformer) []UintptrOption {
	l := len(m)
	acc := make([]UintptrOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayMapByteOption(m []bool, f BoolToByteOptionTransformer) []ByteOption {
	l := len(m)
	acc := make([]ByteOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayMapRuneOption(m []bool, f BoolToRuneOptionTransformer) []RuneOption {
	l := len(m)
	acc := make([]RuneOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayMapFloat32Option(m []bool, f BoolToFloat32OptionTransformer) []Float32Option {
	l := len(m)
	acc := make([]Float32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayMapFloat64Option(m []bool, f BoolToFloat64OptionTransformer) []Float64Option {
	l := len(m)
	acc := make([]Float64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayMapComplex64Option(m []bool, f BoolToComplex64OptionTransformer) []Complex64Option {
	l := len(m)
	acc := make([]Complex64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayMapComplex128Option(m []bool, f BoolToComplex128OptionTransformer) []Complex128Option {
	l := len(m)
	acc := make([]Complex128Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayMapAnyOption(m []bool, f BoolToAnyOptionTransformer) []AnyOption {
	l := len(m)
	acc := make([]AnyOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayMapBool(m []string, f StringToBoolTransformer) []bool {
	l := len(m)
	acc := make([]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayMapString(m []string, f StringToStringTransformer) []string {
	l := len(m)
	acc := make([]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayMapInt(m []string, f StringToIntTransformer) []int {
	l := len(m)
	acc := make([]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayMapInt8(m []string, f StringToInt8Transformer) []int8 {
	l := len(m)
	acc := make([]int8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayMapInt16(m []string, f StringToInt16Transformer) []int16 {
	l := len(m)
	acc := make([]int16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayMapInt32(m []string, f StringToInt32Transformer) []int32 {
	l := len(m)
	acc := make([]int32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayMapInt64(m []string, f StringToInt64Transformer) []int64 {
	l := len(m)
	acc := make([]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayMapUint(m []string, f StringToUintTransformer) []uint {
	l := len(m)
	acc := make([]uint, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayMapUint8(m []string, f StringToUint8Transformer) []uint8 {
	l := len(m)
	acc := make([]uint8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayMapUint16(m []string, f StringToUint16Transformer) []uint16 {
	l := len(m)
	acc := make([]uint16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayMapUint32(m []string, f StringToUint32Transformer) []uint32 {
	l := len(m)
	acc := make([]uint32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayMapUint64(m []string, f StringToUint64Transformer) []uint64 {
	l := len(m)
	acc := make([]uint64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayMapUintptr(m []string, f StringToUintptrTransformer) []uintptr {
	l := len(m)
	acc := make([]uintptr, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayMapByte(m []string, f StringToByteTransformer) []byte {
	l := len(m)
	acc := make([]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayMapRune(m []string, f StringToRuneTransformer) []rune {
	l := len(m)
	acc := make([]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayMapFloat32(m []string, f StringToFloat32Transformer) []float32 {
	l := len(m)
	acc := make([]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayMapFloat64(m []string, f StringToFloat64Transformer) []float64 {
	l := len(m)
	acc := make([]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayMapComplex64(m []string, f StringToComplex64Transformer) []complex64 {
	l := len(m)
	acc := make([]complex64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayMapComplex128(m []string, f StringToComplex128Transformer) []complex128 {
	l := len(m)
	acc := make([]complex128, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayMapAny(m []string, f StringToAnyTransformer) []Any {
	l := len(m)
	acc := make([]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayMapBoolArray(m []string, f StringToBoolArrayTransformer) [][]bool {
	l := len(m)
	acc := make([][]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayMapStringArray(m []string, f StringToStringArrayTransformer) [][]string {
	l := len(m)
	acc := make([][]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayMapIntArray(m []string, f StringToIntArrayTransformer) [][]int {
	l := len(m)
	acc := make([][]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayMapInt8Array(m []string, f StringToInt8ArrayTransformer) [][]int8 {
	l := len(m)
	acc := make([][]int8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayMapInt16Array(m []string, f StringToInt16ArrayTransformer) [][]int16 {
	l := len(m)
	acc := make([][]int16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayMapInt32Array(m []string, f StringToInt32ArrayTransformer) [][]int32 {
	l := len(m)
	acc := make([][]int32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayMapInt64Array(m []string, f StringToInt64ArrayTransformer) [][]int64 {
	l := len(m)
	acc := make([][]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayMapUintArray(m []string, f StringToUintArrayTransformer) [][]uint {
	l := len(m)
	acc := make([][]uint, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayMapUint8Array(m []string, f StringToUint8ArrayTransformer) [][]uint8 {
	l := len(m)
	acc := make([][]uint8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayMapUint16Array(m []string, f StringToUint16ArrayTransformer) [][]uint16 {
	l := len(m)
	acc := make([][]uint16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayMapUint32Array(m []string, f StringToUint32ArrayTransformer) [][]uint32 {
	l := len(m)
	acc := make([][]uint32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayMapUint64Array(m []string, f StringToUint64ArrayTransformer) [][]uint64 {
	l := len(m)
	acc := make([][]uint64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayMapUintptrArray(m []string, f StringToUintptrArrayTransformer) [][]uintptr {
	l := len(m)
	acc := make([][]uintptr, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayMapByteArray(m []string, f StringToByteArrayTransformer) [][]byte {
	l := len(m)
	acc := make([][]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayMapRuneArray(m []string, f StringToRuneArrayTransformer) [][]rune {
	l := len(m)
	acc := make([][]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayMapFloat32Array(m []string, f StringToFloat32ArrayTransformer) [][]float32 {
	l := len(m)
	acc := make([][]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayMapFloat64Array(m []string, f StringToFloat64ArrayTransformer) [][]float64 {
	l := len(m)
	acc := make([][]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayMapComplex64Array(m []string, f StringToComplex64ArrayTransformer) [][]complex64 {
	l := len(m)
	acc := make([][]complex64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayMapComplex128Array(m []string, f StringToComplex128ArrayTransformer) [][]complex128 {
	l := len(m)
	acc := make([][]complex128, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayMapAnyArray(m []string, f StringToAnyArrayTransformer) [][]Any {
	l := len(m)
	acc := make([][]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayMapBoolOption(m []string, f StringToBoolOptionTransformer) []BoolOption {
	l := len(m)
	acc := make([]BoolOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayMapStringOption(m []string, f StringToStringOptionTransformer) []StringOption {
	l := len(m)
	acc := make([]StringOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayMapIntOption(m []string, f StringToIntOptionTransformer) []IntOption {
	l := len(m)
	acc := make([]IntOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayMapInt8Option(m []string, f StringToInt8OptionTransformer) []Int8Option {
	l := len(m)
	acc := make([]Int8Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayMapInt16Option(m []string, f StringToInt16OptionTransformer) []Int16Option {
	l := len(m)
	acc := make([]Int16Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayMapInt32Option(m []string, f StringToInt32OptionTransformer) []Int32Option {
	l := len(m)
	acc := make([]Int32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayMapInt64Option(m []string, f StringToInt64OptionTransformer) []Int64Option {
	l := len(m)
	acc := make([]Int64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayMapUintOption(m []string, f StringToUintOptionTransformer) []UintOption {
	l := len(m)
	acc := make([]UintOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayMapUint8Option(m []string, f StringToUint8OptionTransformer) []Uint8Option {
	l := len(m)
	acc := make([]Uint8Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayMapUint16Option(m []string, f StringToUint16OptionTransformer) []Uint16Option {
	l := len(m)
	acc := make([]Uint16Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayMapUint32Option(m []string, f StringToUint32OptionTransformer) []Uint32Option {
	l := len(m)
	acc := make([]Uint32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayMapUint64Option(m []string, f StringToUint64OptionTransformer) []Uint64Option {
	l := len(m)
	acc := make([]Uint64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayMapUintptrOption(m []string, f StringToUintptrOptionTransformer) []UintptrOption {
	l := len(m)
	acc := make([]UintptrOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayMapByteOption(m []string, f StringToByteOptionTransformer) []ByteOption {
	l := len(m)
	acc := make([]ByteOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayMapRuneOption(m []string, f StringToRuneOptionTransformer) []RuneOption {
	l := len(m)
	acc := make([]RuneOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayMapFloat32Option(m []string, f StringToFloat32OptionTransformer) []Float32Option {
	l := len(m)
	acc := make([]Float32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayMapFloat64Option(m []string, f StringToFloat64OptionTransformer) []Float64Option {
	l := len(m)
	acc := make([]Float64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayMapComplex64Option(m []string, f StringToComplex64OptionTransformer) []Complex64Option {
	l := len(m)
	acc := make([]Complex64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayMapComplex128Option(m []string, f StringToComplex128OptionTransformer) []Complex128Option {
	l := len(m)
	acc := make([]Complex128Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayMapAnyOption(m []string, f StringToAnyOptionTransformer) []AnyOption {
	l := len(m)
	acc := make([]AnyOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayMapBool(m []int, f IntToBoolTransformer) []bool {
	l := len(m)
	acc := make([]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayMapString(m []int, f IntToStringTransformer) []string {
	l := len(m)
	acc := make([]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayMapInt(m []int, f IntToIntTransformer) []int {
	l := len(m)
	acc := make([]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayMapInt8(m []int, f IntToInt8Transformer) []int8 {
	l := len(m)
	acc := make([]int8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayMapInt16(m []int, f IntToInt16Transformer) []int16 {
	l := len(m)
	acc := make([]int16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayMapInt32(m []int, f IntToInt32Transformer) []int32 {
	l := len(m)
	acc := make([]int32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayMapInt64(m []int, f IntToInt64Transformer) []int64 {
	l := len(m)
	acc := make([]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayMapUint(m []int, f IntToUintTransformer) []uint {
	l := len(m)
	acc := make([]uint, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayMapUint8(m []int, f IntToUint8Transformer) []uint8 {
	l := len(m)
	acc := make([]uint8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayMapUint16(m []int, f IntToUint16Transformer) []uint16 {
	l := len(m)
	acc := make([]uint16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayMapUint32(m []int, f IntToUint32Transformer) []uint32 {
	l := len(m)
	acc := make([]uint32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayMapUint64(m []int, f IntToUint64Transformer) []uint64 {
	l := len(m)
	acc := make([]uint64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayMapUintptr(m []int, f IntToUintptrTransformer) []uintptr {
	l := len(m)
	acc := make([]uintptr, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayMapByte(m []int, f IntToByteTransformer) []byte {
	l := len(m)
	acc := make([]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayMapRune(m []int, f IntToRuneTransformer) []rune {
	l := len(m)
	acc := make([]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayMapFloat32(m []int, f IntToFloat32Transformer) []float32 {
	l := len(m)
	acc := make([]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayMapFloat64(m []int, f IntToFloat64Transformer) []float64 {
	l := len(m)
	acc := make([]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayMapComplex64(m []int, f IntToComplex64Transformer) []complex64 {
	l := len(m)
	acc := make([]complex64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayMapComplex128(m []int, f IntToComplex128Transformer) []complex128 {
	l := len(m)
	acc := make([]complex128, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayMapAny(m []int, f IntToAnyTransformer) []Any {
	l := len(m)
	acc := make([]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayMapBoolArray(m []int, f IntToBoolArrayTransformer) [][]bool {
	l := len(m)
	acc := make([][]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayMapStringArray(m []int, f IntToStringArrayTransformer) [][]string {
	l := len(m)
	acc := make([][]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayMapIntArray(m []int, f IntToIntArrayTransformer) [][]int {
	l := len(m)
	acc := make([][]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayMapInt8Array(m []int, f IntToInt8ArrayTransformer) [][]int8 {
	l := len(m)
	acc := make([][]int8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayMapInt16Array(m []int, f IntToInt16ArrayTransformer) [][]int16 {
	l := len(m)
	acc := make([][]int16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayMapInt32Array(m []int, f IntToInt32ArrayTransformer) [][]int32 {
	l := len(m)
	acc := make([][]int32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayMapInt64Array(m []int, f IntToInt64ArrayTransformer) [][]int64 {
	l := len(m)
	acc := make([][]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayMapUintArray(m []int, f IntToUintArrayTransformer) [][]uint {
	l := len(m)
	acc := make([][]uint, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayMapUint8Array(m []int, f IntToUint8ArrayTransformer) [][]uint8 {
	l := len(m)
	acc := make([][]uint8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayMapUint16Array(m []int, f IntToUint16ArrayTransformer) [][]uint16 {
	l := len(m)
	acc := make([][]uint16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayMapUint32Array(m []int, f IntToUint32ArrayTransformer) [][]uint32 {
	l := len(m)
	acc := make([][]uint32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayMapUint64Array(m []int, f IntToUint64ArrayTransformer) [][]uint64 {
	l := len(m)
	acc := make([][]uint64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayMapUintptrArray(m []int, f IntToUintptrArrayTransformer) [][]uintptr {
	l := len(m)
	acc := make([][]uintptr, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayMapByteArray(m []int, f IntToByteArrayTransformer) [][]byte {
	l := len(m)
	acc := make([][]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayMapRuneArray(m []int, f IntToRuneArrayTransformer) [][]rune {
	l := len(m)
	acc := make([][]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayMapFloat32Array(m []int, f IntToFloat32ArrayTransformer) [][]float32 {
	l := len(m)
	acc := make([][]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayMapFloat64Array(m []int, f IntToFloat64ArrayTransformer) [][]float64 {
	l := len(m)
	acc := make([][]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayMapComplex64Array(m []int, f IntToComplex64ArrayTransformer) [][]complex64 {
	l := len(m)
	acc := make([][]complex64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayMapComplex128Array(m []int, f IntToComplex128ArrayTransformer) [][]complex128 {
	l := len(m)
	acc := make([][]complex128, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayMapAnyArray(m []int, f IntToAnyArrayTransformer) [][]Any {
	l := len(m)
	acc := make([][]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayMapBoolOption(m []int, f IntToBoolOptionTransformer) []BoolOption {
	l := len(m)
	acc := make([]BoolOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayMapStringOption(m []int, f IntToStringOptionTransformer) []StringOption {
	l := len(m)
	acc := make([]StringOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayMapIntOption(m []int, f IntToIntOptionTransformer) []IntOption {
	l := len(m)
	acc := make([]IntOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayMapInt8Option(m []int, f IntToInt8OptionTransformer) []Int8Option {
	l := len(m)
	acc := make([]Int8Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayMapInt16Option(m []int, f IntToInt16OptionTransformer) []Int16Option {
	l := len(m)
	acc := make([]Int16Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayMapInt32Option(m []int, f IntToInt32OptionTransformer) []Int32Option {
	l := len(m)
	acc := make([]Int32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayMapInt64Option(m []int, f IntToInt64OptionTransformer) []Int64Option {
	l := len(m)
	acc := make([]Int64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayMapUintOption(m []int, f IntToUintOptionTransformer) []UintOption {
	l := len(m)
	acc := make([]UintOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayMapUint8Option(m []int, f IntToUint8OptionTransformer) []Uint8Option {
	l := len(m)
	acc := make([]Uint8Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayMapUint16Option(m []int, f IntToUint16OptionTransformer) []Uint16Option {
	l := len(m)
	acc := make([]Uint16Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayMapUint32Option(m []int, f IntToUint32OptionTransformer) []Uint32Option {
	l := len(m)
	acc := make([]Uint32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayMapUint64Option(m []int, f IntToUint64OptionTransformer) []Uint64Option {
	l := len(m)
	acc := make([]Uint64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayMapUintptrOption(m []int, f IntToUintptrOptionTransformer) []UintptrOption {
	l := len(m)
	acc := make([]UintptrOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayMapByteOption(m []int, f IntToByteOptionTransformer) []ByteOption {
	l := len(m)
	acc := make([]ByteOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayMapRuneOption(m []int, f IntToRuneOptionTransformer) []RuneOption {
	l := len(m)
	acc := make([]RuneOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayMapFloat32Option(m []int, f IntToFloat32OptionTransformer) []Float32Option {
	l := len(m)
	acc := make([]Float32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayMapFloat64Option(m []int, f IntToFloat64OptionTransformer) []Float64Option {
	l := len(m)
	acc := make([]Float64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayMapComplex64Option(m []int, f IntToComplex64OptionTransformer) []Complex64Option {
	l := len(m)
	acc := make([]Complex64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayMapComplex128Option(m []int, f IntToComplex128OptionTransformer) []Complex128Option {
	l := len(m)
	acc := make([]Complex128Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayMapAnyOption(m []int, f IntToAnyOptionTransformer) []AnyOption {
	l := len(m)
	acc := make([]AnyOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8ArrayMapBool(m []int8, f Int8ToBoolTransformer) []bool {
	l := len(m)
	acc := make([]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8ArrayMapString(m []int8, f Int8ToStringTransformer) []string {
	l := len(m)
	acc := make([]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8ArrayMapInt(m []int8, f Int8ToIntTransformer) []int {
	l := len(m)
	acc := make([]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8ArrayMapInt8(m []int8, f Int8ToInt8Transformer) []int8 {
	l := len(m)
	acc := make([]int8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8ArrayMapInt16(m []int8, f Int8ToInt16Transformer) []int16 {
	l := len(m)
	acc := make([]int16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8ArrayMapInt32(m []int8, f Int8ToInt32Transformer) []int32 {
	l := len(m)
	acc := make([]int32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8ArrayMapInt64(m []int8, f Int8ToInt64Transformer) []int64 {
	l := len(m)
	acc := make([]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8ArrayMapUint(m []int8, f Int8ToUintTransformer) []uint {
	l := len(m)
	acc := make([]uint, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8ArrayMapUint8(m []int8, f Int8ToUint8Transformer) []uint8 {
	l := len(m)
	acc := make([]uint8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8ArrayMapUint16(m []int8, f Int8ToUint16Transformer) []uint16 {
	l := len(m)
	acc := make([]uint16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8ArrayMapUint32(m []int8, f Int8ToUint32Transformer) []uint32 {
	l := len(m)
	acc := make([]uint32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8ArrayMapUint64(m []int8, f Int8ToUint64Transformer) []uint64 {
	l := len(m)
	acc := make([]uint64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8ArrayMapUintptr(m []int8, f Int8ToUintptrTransformer) []uintptr {
	l := len(m)
	acc := make([]uintptr, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8ArrayMapByte(m []int8, f Int8ToByteTransformer) []byte {
	l := len(m)
	acc := make([]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8ArrayMapRune(m []int8, f Int8ToRuneTransformer) []rune {
	l := len(m)
	acc := make([]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8ArrayMapFloat32(m []int8, f Int8ToFloat32Transformer) []float32 {
	l := len(m)
	acc := make([]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8ArrayMapFloat64(m []int8, f Int8ToFloat64Transformer) []float64 {
	l := len(m)
	acc := make([]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8ArrayMapComplex64(m []int8, f Int8ToComplex64Transformer) []complex64 {
	l := len(m)
	acc := make([]complex64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8ArrayMapComplex128(m []int8, f Int8ToComplex128Transformer) []complex128 {
	l := len(m)
	acc := make([]complex128, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8ArrayMapAny(m []int8, f Int8ToAnyTransformer) []Any {
	l := len(m)
	acc := make([]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8ArrayMapBoolArray(m []int8, f Int8ToBoolArrayTransformer) [][]bool {
	l := len(m)
	acc := make([][]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8ArrayMapStringArray(m []int8, f Int8ToStringArrayTransformer) [][]string {
	l := len(m)
	acc := make([][]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8ArrayMapIntArray(m []int8, f Int8ToIntArrayTransformer) [][]int {
	l := len(m)
	acc := make([][]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8ArrayMapInt8Array(m []int8, f Int8ToInt8ArrayTransformer) [][]int8 {
	l := len(m)
	acc := make([][]int8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8ArrayMapInt16Array(m []int8, f Int8ToInt16ArrayTransformer) [][]int16 {
	l := len(m)
	acc := make([][]int16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8ArrayMapInt32Array(m []int8, f Int8ToInt32ArrayTransformer) [][]int32 {
	l := len(m)
	acc := make([][]int32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8ArrayMapInt64Array(m []int8, f Int8ToInt64ArrayTransformer) [][]int64 {
	l := len(m)
	acc := make([][]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8ArrayMapUintArray(m []int8, f Int8ToUintArrayTransformer) [][]uint {
	l := len(m)
	acc := make([][]uint, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8ArrayMapUint8Array(m []int8, f Int8ToUint8ArrayTransformer) [][]uint8 {
	l := len(m)
	acc := make([][]uint8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8ArrayMapUint16Array(m []int8, f Int8ToUint16ArrayTransformer) [][]uint16 {
	l := len(m)
	acc := make([][]uint16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8ArrayMapUint32Array(m []int8, f Int8ToUint32ArrayTransformer) [][]uint32 {
	l := len(m)
	acc := make([][]uint32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8ArrayMapUint64Array(m []int8, f Int8ToUint64ArrayTransformer) [][]uint64 {
	l := len(m)
	acc := make([][]uint64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8ArrayMapUintptrArray(m []int8, f Int8ToUintptrArrayTransformer) [][]uintptr {
	l := len(m)
	acc := make([][]uintptr, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8ArrayMapByteArray(m []int8, f Int8ToByteArrayTransformer) [][]byte {
	l := len(m)
	acc := make([][]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8ArrayMapRuneArray(m []int8, f Int8ToRuneArrayTransformer) [][]rune {
	l := len(m)
	acc := make([][]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8ArrayMapFloat32Array(m []int8, f Int8ToFloat32ArrayTransformer) [][]float32 {
	l := len(m)
	acc := make([][]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8ArrayMapFloat64Array(m []int8, f Int8ToFloat64ArrayTransformer) [][]float64 {
	l := len(m)
	acc := make([][]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8ArrayMapComplex64Array(m []int8, f Int8ToComplex64ArrayTransformer) [][]complex64 {
	l := len(m)
	acc := make([][]complex64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8ArrayMapComplex128Array(m []int8, f Int8ToComplex128ArrayTransformer) [][]complex128 {
	l := len(m)
	acc := make([][]complex128, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8ArrayMapAnyArray(m []int8, f Int8ToAnyArrayTransformer) [][]Any {
	l := len(m)
	acc := make([][]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8ArrayMapBoolOption(m []int8, f Int8ToBoolOptionTransformer) []BoolOption {
	l := len(m)
	acc := make([]BoolOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8ArrayMapStringOption(m []int8, f Int8ToStringOptionTransformer) []StringOption {
	l := len(m)
	acc := make([]StringOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8ArrayMapIntOption(m []int8, f Int8ToIntOptionTransformer) []IntOption {
	l := len(m)
	acc := make([]IntOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8ArrayMapInt8Option(m []int8, f Int8ToInt8OptionTransformer) []Int8Option {
	l := len(m)
	acc := make([]Int8Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8ArrayMapInt16Option(m []int8, f Int8ToInt16OptionTransformer) []Int16Option {
	l := len(m)
	acc := make([]Int16Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8ArrayMapInt32Option(m []int8, f Int8ToInt32OptionTransformer) []Int32Option {
	l := len(m)
	acc := make([]Int32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8ArrayMapInt64Option(m []int8, f Int8ToInt64OptionTransformer) []Int64Option {
	l := len(m)
	acc := make([]Int64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8ArrayMapUintOption(m []int8, f Int8ToUintOptionTransformer) []UintOption {
	l := len(m)
	acc := make([]UintOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8ArrayMapUint8Option(m []int8, f Int8ToUint8OptionTransformer) []Uint8Option {
	l := len(m)
	acc := make([]Uint8Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8ArrayMapUint16Option(m []int8, f Int8ToUint16OptionTransformer) []Uint16Option {
	l := len(m)
	acc := make([]Uint16Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8ArrayMapUint32Option(m []int8, f Int8ToUint32OptionTransformer) []Uint32Option {
	l := len(m)
	acc := make([]Uint32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8ArrayMapUint64Option(m []int8, f Int8ToUint64OptionTransformer) []Uint64Option {
	l := len(m)
	acc := make([]Uint64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8ArrayMapUintptrOption(m []int8, f Int8ToUintptrOptionTransformer) []UintptrOption {
	l := len(m)
	acc := make([]UintptrOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8ArrayMapByteOption(m []int8, f Int8ToByteOptionTransformer) []ByteOption {
	l := len(m)
	acc := make([]ByteOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8ArrayMapRuneOption(m []int8, f Int8ToRuneOptionTransformer) []RuneOption {
	l := len(m)
	acc := make([]RuneOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8ArrayMapFloat32Option(m []int8, f Int8ToFloat32OptionTransformer) []Float32Option {
	l := len(m)
	acc := make([]Float32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8ArrayMapFloat64Option(m []int8, f Int8ToFloat64OptionTransformer) []Float64Option {
	l := len(m)
	acc := make([]Float64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8ArrayMapComplex64Option(m []int8, f Int8ToComplex64OptionTransformer) []Complex64Option {
	l := len(m)
	acc := make([]Complex64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8ArrayMapComplex128Option(m []int8, f Int8ToComplex128OptionTransformer) []Complex128Option {
	l := len(m)
	acc := make([]Complex128Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8ArrayMapAnyOption(m []int8, f Int8ToAnyOptionTransformer) []AnyOption {
	l := len(m)
	acc := make([]AnyOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16ArrayMapBool(m []int16, f Int16ToBoolTransformer) []bool {
	l := len(m)
	acc := make([]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16ArrayMapString(m []int16, f Int16ToStringTransformer) []string {
	l := len(m)
	acc := make([]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16ArrayMapInt(m []int16, f Int16ToIntTransformer) []int {
	l := len(m)
	acc := make([]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16ArrayMapInt8(m []int16, f Int16ToInt8Transformer) []int8 {
	l := len(m)
	acc := make([]int8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16ArrayMapInt16(m []int16, f Int16ToInt16Transformer) []int16 {
	l := len(m)
	acc := make([]int16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16ArrayMapInt32(m []int16, f Int16ToInt32Transformer) []int32 {
	l := len(m)
	acc := make([]int32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16ArrayMapInt64(m []int16, f Int16ToInt64Transformer) []int64 {
	l := len(m)
	acc := make([]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16ArrayMapUint(m []int16, f Int16ToUintTransformer) []uint {
	l := len(m)
	acc := make([]uint, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16ArrayMapUint8(m []int16, f Int16ToUint8Transformer) []uint8 {
	l := len(m)
	acc := make([]uint8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16ArrayMapUint16(m []int16, f Int16ToUint16Transformer) []uint16 {
	l := len(m)
	acc := make([]uint16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16ArrayMapUint32(m []int16, f Int16ToUint32Transformer) []uint32 {
	l := len(m)
	acc := make([]uint32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16ArrayMapUint64(m []int16, f Int16ToUint64Transformer) []uint64 {
	l := len(m)
	acc := make([]uint64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16ArrayMapUintptr(m []int16, f Int16ToUintptrTransformer) []uintptr {
	l := len(m)
	acc := make([]uintptr, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16ArrayMapByte(m []int16, f Int16ToByteTransformer) []byte {
	l := len(m)
	acc := make([]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16ArrayMapRune(m []int16, f Int16ToRuneTransformer) []rune {
	l := len(m)
	acc := make([]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16ArrayMapFloat32(m []int16, f Int16ToFloat32Transformer) []float32 {
	l := len(m)
	acc := make([]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16ArrayMapFloat64(m []int16, f Int16ToFloat64Transformer) []float64 {
	l := len(m)
	acc := make([]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16ArrayMapComplex64(m []int16, f Int16ToComplex64Transformer) []complex64 {
	l := len(m)
	acc := make([]complex64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16ArrayMapComplex128(m []int16, f Int16ToComplex128Transformer) []complex128 {
	l := len(m)
	acc := make([]complex128, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16ArrayMapAny(m []int16, f Int16ToAnyTransformer) []Any {
	l := len(m)
	acc := make([]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16ArrayMapBoolArray(m []int16, f Int16ToBoolArrayTransformer) [][]bool {
	l := len(m)
	acc := make([][]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16ArrayMapStringArray(m []int16, f Int16ToStringArrayTransformer) [][]string {
	l := len(m)
	acc := make([][]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16ArrayMapIntArray(m []int16, f Int16ToIntArrayTransformer) [][]int {
	l := len(m)
	acc := make([][]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16ArrayMapInt8Array(m []int16, f Int16ToInt8ArrayTransformer) [][]int8 {
	l := len(m)
	acc := make([][]int8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16ArrayMapInt16Array(m []int16, f Int16ToInt16ArrayTransformer) [][]int16 {
	l := len(m)
	acc := make([][]int16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16ArrayMapInt32Array(m []int16, f Int16ToInt32ArrayTransformer) [][]int32 {
	l := len(m)
	acc := make([][]int32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16ArrayMapInt64Array(m []int16, f Int16ToInt64ArrayTransformer) [][]int64 {
	l := len(m)
	acc := make([][]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16ArrayMapUintArray(m []int16, f Int16ToUintArrayTransformer) [][]uint {
	l := len(m)
	acc := make([][]uint, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16ArrayMapUint8Array(m []int16, f Int16ToUint8ArrayTransformer) [][]uint8 {
	l := len(m)
	acc := make([][]uint8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16ArrayMapUint16Array(m []int16, f Int16ToUint16ArrayTransformer) [][]uint16 {
	l := len(m)
	acc := make([][]uint16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16ArrayMapUint32Array(m []int16, f Int16ToUint32ArrayTransformer) [][]uint32 {
	l := len(m)
	acc := make([][]uint32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16ArrayMapUint64Array(m []int16, f Int16ToUint64ArrayTransformer) [][]uint64 {
	l := len(m)
	acc := make([][]uint64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16ArrayMapUintptrArray(m []int16, f Int16ToUintptrArrayTransformer) [][]uintptr {
	l := len(m)
	acc := make([][]uintptr, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16ArrayMapByteArray(m []int16, f Int16ToByteArrayTransformer) [][]byte {
	l := len(m)
	acc := make([][]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16ArrayMapRuneArray(m []int16, f Int16ToRuneArrayTransformer) [][]rune {
	l := len(m)
	acc := make([][]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16ArrayMapFloat32Array(m []int16, f Int16ToFloat32ArrayTransformer) [][]float32 {
	l := len(m)
	acc := make([][]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16ArrayMapFloat64Array(m []int16, f Int16ToFloat64ArrayTransformer) [][]float64 {
	l := len(m)
	acc := make([][]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16ArrayMapComplex64Array(m []int16, f Int16ToComplex64ArrayTransformer) [][]complex64 {
	l := len(m)
	acc := make([][]complex64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16ArrayMapComplex128Array(m []int16, f Int16ToComplex128ArrayTransformer) [][]complex128 {
	l := len(m)
	acc := make([][]complex128, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16ArrayMapAnyArray(m []int16, f Int16ToAnyArrayTransformer) [][]Any {
	l := len(m)
	acc := make([][]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16ArrayMapBoolOption(m []int16, f Int16ToBoolOptionTransformer) []BoolOption {
	l := len(m)
	acc := make([]BoolOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16ArrayMapStringOption(m []int16, f Int16ToStringOptionTransformer) []StringOption {
	l := len(m)
	acc := make([]StringOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16ArrayMapIntOption(m []int16, f Int16ToIntOptionTransformer) []IntOption {
	l := len(m)
	acc := make([]IntOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16ArrayMapInt8Option(m []int16, f Int16ToInt8OptionTransformer) []Int8Option {
	l := len(m)
	acc := make([]Int8Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16ArrayMapInt16Option(m []int16, f Int16ToInt16OptionTransformer) []Int16Option {
	l := len(m)
	acc := make([]Int16Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16ArrayMapInt32Option(m []int16, f Int16ToInt32OptionTransformer) []Int32Option {
	l := len(m)
	acc := make([]Int32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16ArrayMapInt64Option(m []int16, f Int16ToInt64OptionTransformer) []Int64Option {
	l := len(m)
	acc := make([]Int64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16ArrayMapUintOption(m []int16, f Int16ToUintOptionTransformer) []UintOption {
	l := len(m)
	acc := make([]UintOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16ArrayMapUint8Option(m []int16, f Int16ToUint8OptionTransformer) []Uint8Option {
	l := len(m)
	acc := make([]Uint8Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16ArrayMapUint16Option(m []int16, f Int16ToUint16OptionTransformer) []Uint16Option {
	l := len(m)
	acc := make([]Uint16Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16ArrayMapUint32Option(m []int16, f Int16ToUint32OptionTransformer) []Uint32Option {
	l := len(m)
	acc := make([]Uint32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16ArrayMapUint64Option(m []int16, f Int16ToUint64OptionTransformer) []Uint64Option {
	l := len(m)
	acc := make([]Uint64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16ArrayMapUintptrOption(m []int16, f Int16ToUintptrOptionTransformer) []UintptrOption {
	l := len(m)
	acc := make([]UintptrOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16ArrayMapByteOption(m []int16, f Int16ToByteOptionTransformer) []ByteOption {
	l := len(m)
	acc := make([]ByteOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16ArrayMapRuneOption(m []int16, f Int16ToRuneOptionTransformer) []RuneOption {
	l := len(m)
	acc := make([]RuneOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16ArrayMapFloat32Option(m []int16, f Int16ToFloat32OptionTransformer) []Float32Option {
	l := len(m)
	acc := make([]Float32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16ArrayMapFloat64Option(m []int16, f Int16ToFloat64OptionTransformer) []Float64Option {
	l := len(m)
	acc := make([]Float64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16ArrayMapComplex64Option(m []int16, f Int16ToComplex64OptionTransformer) []Complex64Option {
	l := len(m)
	acc := make([]Complex64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16ArrayMapComplex128Option(m []int16, f Int16ToComplex128OptionTransformer) []Complex128Option {
	l := len(m)
	acc := make([]Complex128Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16ArrayMapAnyOption(m []int16, f Int16ToAnyOptionTransformer) []AnyOption {
	l := len(m)
	acc := make([]AnyOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32ArrayMapBool(m []int32, f Int32ToBoolTransformer) []bool {
	l := len(m)
	acc := make([]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32ArrayMapString(m []int32, f Int32ToStringTransformer) []string {
	l := len(m)
	acc := make([]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32ArrayMapInt(m []int32, f Int32ToIntTransformer) []int {
	l := len(m)
	acc := make([]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32ArrayMapInt8(m []int32, f Int32ToInt8Transformer) []int8 {
	l := len(m)
	acc := make([]int8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32ArrayMapInt16(m []int32, f Int32ToInt16Transformer) []int16 {
	l := len(m)
	acc := make([]int16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32ArrayMapInt32(m []int32, f Int32ToInt32Transformer) []int32 {
	l := len(m)
	acc := make([]int32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32ArrayMapInt64(m []int32, f Int32ToInt64Transformer) []int64 {
	l := len(m)
	acc := make([]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32ArrayMapUint(m []int32, f Int32ToUintTransformer) []uint {
	l := len(m)
	acc := make([]uint, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32ArrayMapUint8(m []int32, f Int32ToUint8Transformer) []uint8 {
	l := len(m)
	acc := make([]uint8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32ArrayMapUint16(m []int32, f Int32ToUint16Transformer) []uint16 {
	l := len(m)
	acc := make([]uint16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32ArrayMapUint32(m []int32, f Int32ToUint32Transformer) []uint32 {
	l := len(m)
	acc := make([]uint32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32ArrayMapUint64(m []int32, f Int32ToUint64Transformer) []uint64 {
	l := len(m)
	acc := make([]uint64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32ArrayMapUintptr(m []int32, f Int32ToUintptrTransformer) []uintptr {
	l := len(m)
	acc := make([]uintptr, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32ArrayMapByte(m []int32, f Int32ToByteTransformer) []byte {
	l := len(m)
	acc := make([]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32ArrayMapRune(m []int32, f Int32ToRuneTransformer) []rune {
	l := len(m)
	acc := make([]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32ArrayMapFloat32(m []int32, f Int32ToFloat32Transformer) []float32 {
	l := len(m)
	acc := make([]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32ArrayMapFloat64(m []int32, f Int32ToFloat64Transformer) []float64 {
	l := len(m)
	acc := make([]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32ArrayMapComplex64(m []int32, f Int32ToComplex64Transformer) []complex64 {
	l := len(m)
	acc := make([]complex64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32ArrayMapComplex128(m []int32, f Int32ToComplex128Transformer) []complex128 {
	l := len(m)
	acc := make([]complex128, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32ArrayMapAny(m []int32, f Int32ToAnyTransformer) []Any {
	l := len(m)
	acc := make([]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32ArrayMapBoolArray(m []int32, f Int32ToBoolArrayTransformer) [][]bool {
	l := len(m)
	acc := make([][]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32ArrayMapStringArray(m []int32, f Int32ToStringArrayTransformer) [][]string {
	l := len(m)
	acc := make([][]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32ArrayMapIntArray(m []int32, f Int32ToIntArrayTransformer) [][]int {
	l := len(m)
	acc := make([][]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32ArrayMapInt8Array(m []int32, f Int32ToInt8ArrayTransformer) [][]int8 {
	l := len(m)
	acc := make([][]int8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32ArrayMapInt16Array(m []int32, f Int32ToInt16ArrayTransformer) [][]int16 {
	l := len(m)
	acc := make([][]int16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32ArrayMapInt32Array(m []int32, f Int32ToInt32ArrayTransformer) [][]int32 {
	l := len(m)
	acc := make([][]int32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32ArrayMapInt64Array(m []int32, f Int32ToInt64ArrayTransformer) [][]int64 {
	l := len(m)
	acc := make([][]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32ArrayMapUintArray(m []int32, f Int32ToUintArrayTransformer) [][]uint {
	l := len(m)
	acc := make([][]uint, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32ArrayMapUint8Array(m []int32, f Int32ToUint8ArrayTransformer) [][]uint8 {
	l := len(m)
	acc := make([][]uint8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32ArrayMapUint16Array(m []int32, f Int32ToUint16ArrayTransformer) [][]uint16 {
	l := len(m)
	acc := make([][]uint16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32ArrayMapUint32Array(m []int32, f Int32ToUint32ArrayTransformer) [][]uint32 {
	l := len(m)
	acc := make([][]uint32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32ArrayMapUint64Array(m []int32, f Int32ToUint64ArrayTransformer) [][]uint64 {
	l := len(m)
	acc := make([][]uint64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32ArrayMapUintptrArray(m []int32, f Int32ToUintptrArrayTransformer) [][]uintptr {
	l := len(m)
	acc := make([][]uintptr, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32ArrayMapByteArray(m []int32, f Int32ToByteArrayTransformer) [][]byte {
	l := len(m)
	acc := make([][]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32ArrayMapRuneArray(m []int32, f Int32ToRuneArrayTransformer) [][]rune {
	l := len(m)
	acc := make([][]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32ArrayMapFloat32Array(m []int32, f Int32ToFloat32ArrayTransformer) [][]float32 {
	l := len(m)
	acc := make([][]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32ArrayMapFloat64Array(m []int32, f Int32ToFloat64ArrayTransformer) [][]float64 {
	l := len(m)
	acc := make([][]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32ArrayMapComplex64Array(m []int32, f Int32ToComplex64ArrayTransformer) [][]complex64 {
	l := len(m)
	acc := make([][]complex64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32ArrayMapComplex128Array(m []int32, f Int32ToComplex128ArrayTransformer) [][]complex128 {
	l := len(m)
	acc := make([][]complex128, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32ArrayMapAnyArray(m []int32, f Int32ToAnyArrayTransformer) [][]Any {
	l := len(m)
	acc := make([][]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32ArrayMapBoolOption(m []int32, f Int32ToBoolOptionTransformer) []BoolOption {
	l := len(m)
	acc := make([]BoolOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32ArrayMapStringOption(m []int32, f Int32ToStringOptionTransformer) []StringOption {
	l := len(m)
	acc := make([]StringOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32ArrayMapIntOption(m []int32, f Int32ToIntOptionTransformer) []IntOption {
	l := len(m)
	acc := make([]IntOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32ArrayMapInt8Option(m []int32, f Int32ToInt8OptionTransformer) []Int8Option {
	l := len(m)
	acc := make([]Int8Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32ArrayMapInt16Option(m []int32, f Int32ToInt16OptionTransformer) []Int16Option {
	l := len(m)
	acc := make([]Int16Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32ArrayMapInt32Option(m []int32, f Int32ToInt32OptionTransformer) []Int32Option {
	l := len(m)
	acc := make([]Int32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32ArrayMapInt64Option(m []int32, f Int32ToInt64OptionTransformer) []Int64Option {
	l := len(m)
	acc := make([]Int64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32ArrayMapUintOption(m []int32, f Int32ToUintOptionTransformer) []UintOption {
	l := len(m)
	acc := make([]UintOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32ArrayMapUint8Option(m []int32, f Int32ToUint8OptionTransformer) []Uint8Option {
	l := len(m)
	acc := make([]Uint8Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32ArrayMapUint16Option(m []int32, f Int32ToUint16OptionTransformer) []Uint16Option {
	l := len(m)
	acc := make([]Uint16Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32ArrayMapUint32Option(m []int32, f Int32ToUint32OptionTransformer) []Uint32Option {
	l := len(m)
	acc := make([]Uint32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32ArrayMapUint64Option(m []int32, f Int32ToUint64OptionTransformer) []Uint64Option {
	l := len(m)
	acc := make([]Uint64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32ArrayMapUintptrOption(m []int32, f Int32ToUintptrOptionTransformer) []UintptrOption {
	l := len(m)
	acc := make([]UintptrOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32ArrayMapByteOption(m []int32, f Int32ToByteOptionTransformer) []ByteOption {
	l := len(m)
	acc := make([]ByteOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32ArrayMapRuneOption(m []int32, f Int32ToRuneOptionTransformer) []RuneOption {
	l := len(m)
	acc := make([]RuneOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32ArrayMapFloat32Option(m []int32, f Int32ToFloat32OptionTransformer) []Float32Option {
	l := len(m)
	acc := make([]Float32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32ArrayMapFloat64Option(m []int32, f Int32ToFloat64OptionTransformer) []Float64Option {
	l := len(m)
	acc := make([]Float64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32ArrayMapComplex64Option(m []int32, f Int32ToComplex64OptionTransformer) []Complex64Option {
	l := len(m)
	acc := make([]Complex64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32ArrayMapComplex128Option(m []int32, f Int32ToComplex128OptionTransformer) []Complex128Option {
	l := len(m)
	acc := make([]Complex128Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32ArrayMapAnyOption(m []int32, f Int32ToAnyOptionTransformer) []AnyOption {
	l := len(m)
	acc := make([]AnyOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayMapBool(m []int64, f Int64ToBoolTransformer) []bool {
	l := len(m)
	acc := make([]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayMapString(m []int64, f Int64ToStringTransformer) []string {
	l := len(m)
	acc := make([]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayMapInt(m []int64, f Int64ToIntTransformer) []int {
	l := len(m)
	acc := make([]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayMapInt8(m []int64, f Int64ToInt8Transformer) []int8 {
	l := len(m)
	acc := make([]int8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayMapInt16(m []int64, f Int64ToInt16Transformer) []int16 {
	l := len(m)
	acc := make([]int16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayMapInt32(m []int64, f Int64ToInt32Transformer) []int32 {
	l := len(m)
	acc := make([]int32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayMapInt64(m []int64, f Int64ToInt64Transformer) []int64 {
	l := len(m)
	acc := make([]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayMapUint(m []int64, f Int64ToUintTransformer) []uint {
	l := len(m)
	acc := make([]uint, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayMapUint8(m []int64, f Int64ToUint8Transformer) []uint8 {
	l := len(m)
	acc := make([]uint8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayMapUint16(m []int64, f Int64ToUint16Transformer) []uint16 {
	l := len(m)
	acc := make([]uint16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayMapUint32(m []int64, f Int64ToUint32Transformer) []uint32 {
	l := len(m)
	acc := make([]uint32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayMapUint64(m []int64, f Int64ToUint64Transformer) []uint64 {
	l := len(m)
	acc := make([]uint64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayMapUintptr(m []int64, f Int64ToUintptrTransformer) []uintptr {
	l := len(m)
	acc := make([]uintptr, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayMapByte(m []int64, f Int64ToByteTransformer) []byte {
	l := len(m)
	acc := make([]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayMapRune(m []int64, f Int64ToRuneTransformer) []rune {
	l := len(m)
	acc := make([]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayMapFloat32(m []int64, f Int64ToFloat32Transformer) []float32 {
	l := len(m)
	acc := make([]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayMapFloat64(m []int64, f Int64ToFloat64Transformer) []float64 {
	l := len(m)
	acc := make([]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayMapComplex64(m []int64, f Int64ToComplex64Transformer) []complex64 {
	l := len(m)
	acc := make([]complex64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayMapComplex128(m []int64, f Int64ToComplex128Transformer) []complex128 {
	l := len(m)
	acc := make([]complex128, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayMapAny(m []int64, f Int64ToAnyTransformer) []Any {
	l := len(m)
	acc := make([]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayMapBoolArray(m []int64, f Int64ToBoolArrayTransformer) [][]bool {
	l := len(m)
	acc := make([][]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayMapStringArray(m []int64, f Int64ToStringArrayTransformer) [][]string {
	l := len(m)
	acc := make([][]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayMapIntArray(m []int64, f Int64ToIntArrayTransformer) [][]int {
	l := len(m)
	acc := make([][]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayMapInt8Array(m []int64, f Int64ToInt8ArrayTransformer) [][]int8 {
	l := len(m)
	acc := make([][]int8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayMapInt16Array(m []int64, f Int64ToInt16ArrayTransformer) [][]int16 {
	l := len(m)
	acc := make([][]int16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayMapInt32Array(m []int64, f Int64ToInt32ArrayTransformer) [][]int32 {
	l := len(m)
	acc := make([][]int32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayMapInt64Array(m []int64, f Int64ToInt64ArrayTransformer) [][]int64 {
	l := len(m)
	acc := make([][]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayMapUintArray(m []int64, f Int64ToUintArrayTransformer) [][]uint {
	l := len(m)
	acc := make([][]uint, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayMapUint8Array(m []int64, f Int64ToUint8ArrayTransformer) [][]uint8 {
	l := len(m)
	acc := make([][]uint8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayMapUint16Array(m []int64, f Int64ToUint16ArrayTransformer) [][]uint16 {
	l := len(m)
	acc := make([][]uint16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayMapUint32Array(m []int64, f Int64ToUint32ArrayTransformer) [][]uint32 {
	l := len(m)
	acc := make([][]uint32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayMapUint64Array(m []int64, f Int64ToUint64ArrayTransformer) [][]uint64 {
	l := len(m)
	acc := make([][]uint64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayMapUintptrArray(m []int64, f Int64ToUintptrArrayTransformer) [][]uintptr {
	l := len(m)
	acc := make([][]uintptr, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayMapByteArray(m []int64, f Int64ToByteArrayTransformer) [][]byte {
	l := len(m)
	acc := make([][]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayMapRuneArray(m []int64, f Int64ToRuneArrayTransformer) [][]rune {
	l := len(m)
	acc := make([][]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayMapFloat32Array(m []int64, f Int64ToFloat32ArrayTransformer) [][]float32 {
	l := len(m)
	acc := make([][]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayMapFloat64Array(m []int64, f Int64ToFloat64ArrayTransformer) [][]float64 {
	l := len(m)
	acc := make([][]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayMapComplex64Array(m []int64, f Int64ToComplex64ArrayTransformer) [][]complex64 {
	l := len(m)
	acc := make([][]complex64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayMapComplex128Array(m []int64, f Int64ToComplex128ArrayTransformer) [][]complex128 {
	l := len(m)
	acc := make([][]complex128, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayMapAnyArray(m []int64, f Int64ToAnyArrayTransformer) [][]Any {
	l := len(m)
	acc := make([][]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayMapBoolOption(m []int64, f Int64ToBoolOptionTransformer) []BoolOption {
	l := len(m)
	acc := make([]BoolOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayMapStringOption(m []int64, f Int64ToStringOptionTransformer) []StringOption {
	l := len(m)
	acc := make([]StringOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayMapIntOption(m []int64, f Int64ToIntOptionTransformer) []IntOption {
	l := len(m)
	acc := make([]IntOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayMapInt8Option(m []int64, f Int64ToInt8OptionTransformer) []Int8Option {
	l := len(m)
	acc := make([]Int8Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayMapInt16Option(m []int64, f Int64ToInt16OptionTransformer) []Int16Option {
	l := len(m)
	acc := make([]Int16Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayMapInt32Option(m []int64, f Int64ToInt32OptionTransformer) []Int32Option {
	l := len(m)
	acc := make([]Int32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayMapInt64Option(m []int64, f Int64ToInt64OptionTransformer) []Int64Option {
	l := len(m)
	acc := make([]Int64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayMapUintOption(m []int64, f Int64ToUintOptionTransformer) []UintOption {
	l := len(m)
	acc := make([]UintOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayMapUint8Option(m []int64, f Int64ToUint8OptionTransformer) []Uint8Option {
	l := len(m)
	acc := make([]Uint8Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayMapUint16Option(m []int64, f Int64ToUint16OptionTransformer) []Uint16Option {
	l := len(m)
	acc := make([]Uint16Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayMapUint32Option(m []int64, f Int64ToUint32OptionTransformer) []Uint32Option {
	l := len(m)
	acc := make([]Uint32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayMapUint64Option(m []int64, f Int64ToUint64OptionTransformer) []Uint64Option {
	l := len(m)
	acc := make([]Uint64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayMapUintptrOption(m []int64, f Int64ToUintptrOptionTransformer) []UintptrOption {
	l := len(m)
	acc := make([]UintptrOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayMapByteOption(m []int64, f Int64ToByteOptionTransformer) []ByteOption {
	l := len(m)
	acc := make([]ByteOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayMapRuneOption(m []int64, f Int64ToRuneOptionTransformer) []RuneOption {
	l := len(m)
	acc := make([]RuneOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayMapFloat32Option(m []int64, f Int64ToFloat32OptionTransformer) []Float32Option {
	l := len(m)
	acc := make([]Float32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayMapFloat64Option(m []int64, f Int64ToFloat64OptionTransformer) []Float64Option {
	l := len(m)
	acc := make([]Float64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayMapComplex64Option(m []int64, f Int64ToComplex64OptionTransformer) []Complex64Option {
	l := len(m)
	acc := make([]Complex64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayMapComplex128Option(m []int64, f Int64ToComplex128OptionTransformer) []Complex128Option {
	l := len(m)
	acc := make([]Complex128Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayMapAnyOption(m []int64, f Int64ToAnyOptionTransformer) []AnyOption {
	l := len(m)
	acc := make([]AnyOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintArrayMapBool(m []uint, f UintToBoolTransformer) []bool {
	l := len(m)
	acc := make([]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintArrayMapString(m []uint, f UintToStringTransformer) []string {
	l := len(m)
	acc := make([]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintArrayMapInt(m []uint, f UintToIntTransformer) []int {
	l := len(m)
	acc := make([]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintArrayMapInt8(m []uint, f UintToInt8Transformer) []int8 {
	l := len(m)
	acc := make([]int8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintArrayMapInt16(m []uint, f UintToInt16Transformer) []int16 {
	l := len(m)
	acc := make([]int16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintArrayMapInt32(m []uint, f UintToInt32Transformer) []int32 {
	l := len(m)
	acc := make([]int32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintArrayMapInt64(m []uint, f UintToInt64Transformer) []int64 {
	l := len(m)
	acc := make([]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintArrayMapUint(m []uint, f UintToUintTransformer) []uint {
	l := len(m)
	acc := make([]uint, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintArrayMapUint8(m []uint, f UintToUint8Transformer) []uint8 {
	l := len(m)
	acc := make([]uint8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintArrayMapUint16(m []uint, f UintToUint16Transformer) []uint16 {
	l := len(m)
	acc := make([]uint16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintArrayMapUint32(m []uint, f UintToUint32Transformer) []uint32 {
	l := len(m)
	acc := make([]uint32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintArrayMapUint64(m []uint, f UintToUint64Transformer) []uint64 {
	l := len(m)
	acc := make([]uint64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintArrayMapUintptr(m []uint, f UintToUintptrTransformer) []uintptr {
	l := len(m)
	acc := make([]uintptr, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintArrayMapByte(m []uint, f UintToByteTransformer) []byte {
	l := len(m)
	acc := make([]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintArrayMapRune(m []uint, f UintToRuneTransformer) []rune {
	l := len(m)
	acc := make([]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintArrayMapFloat32(m []uint, f UintToFloat32Transformer) []float32 {
	l := len(m)
	acc := make([]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintArrayMapFloat64(m []uint, f UintToFloat64Transformer) []float64 {
	l := len(m)
	acc := make([]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintArrayMapComplex64(m []uint, f UintToComplex64Transformer) []complex64 {
	l := len(m)
	acc := make([]complex64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintArrayMapComplex128(m []uint, f UintToComplex128Transformer) []complex128 {
	l := len(m)
	acc := make([]complex128, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintArrayMapAny(m []uint, f UintToAnyTransformer) []Any {
	l := len(m)
	acc := make([]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintArrayMapBoolArray(m []uint, f UintToBoolArrayTransformer) [][]bool {
	l := len(m)
	acc := make([][]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintArrayMapStringArray(m []uint, f UintToStringArrayTransformer) [][]string {
	l := len(m)
	acc := make([][]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintArrayMapIntArray(m []uint, f UintToIntArrayTransformer) [][]int {
	l := len(m)
	acc := make([][]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintArrayMapInt8Array(m []uint, f UintToInt8ArrayTransformer) [][]int8 {
	l := len(m)
	acc := make([][]int8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintArrayMapInt16Array(m []uint, f UintToInt16ArrayTransformer) [][]int16 {
	l := len(m)
	acc := make([][]int16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintArrayMapInt32Array(m []uint, f UintToInt32ArrayTransformer) [][]int32 {
	l := len(m)
	acc := make([][]int32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintArrayMapInt64Array(m []uint, f UintToInt64ArrayTransformer) [][]int64 {
	l := len(m)
	acc := make([][]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintArrayMapUintArray(m []uint, f UintToUintArrayTransformer) [][]uint {
	l := len(m)
	acc := make([][]uint, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintArrayMapUint8Array(m []uint, f UintToUint8ArrayTransformer) [][]uint8 {
	l := len(m)
	acc := make([][]uint8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintArrayMapUint16Array(m []uint, f UintToUint16ArrayTransformer) [][]uint16 {
	l := len(m)
	acc := make([][]uint16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintArrayMapUint32Array(m []uint, f UintToUint32ArrayTransformer) [][]uint32 {
	l := len(m)
	acc := make([][]uint32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintArrayMapUint64Array(m []uint, f UintToUint64ArrayTransformer) [][]uint64 {
	l := len(m)
	acc := make([][]uint64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintArrayMapUintptrArray(m []uint, f UintToUintptrArrayTransformer) [][]uintptr {
	l := len(m)
	acc := make([][]uintptr, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintArrayMapByteArray(m []uint, f UintToByteArrayTransformer) [][]byte {
	l := len(m)
	acc := make([][]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintArrayMapRuneArray(m []uint, f UintToRuneArrayTransformer) [][]rune {
	l := len(m)
	acc := make([][]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintArrayMapFloat32Array(m []uint, f UintToFloat32ArrayTransformer) [][]float32 {
	l := len(m)
	acc := make([][]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintArrayMapFloat64Array(m []uint, f UintToFloat64ArrayTransformer) [][]float64 {
	l := len(m)
	acc := make([][]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintArrayMapComplex64Array(m []uint, f UintToComplex64ArrayTransformer) [][]complex64 {
	l := len(m)
	acc := make([][]complex64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintArrayMapComplex128Array(m []uint, f UintToComplex128ArrayTransformer) [][]complex128 {
	l := len(m)
	acc := make([][]complex128, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintArrayMapAnyArray(m []uint, f UintToAnyArrayTransformer) [][]Any {
	l := len(m)
	acc := make([][]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintArrayMapBoolOption(m []uint, f UintToBoolOptionTransformer) []BoolOption {
	l := len(m)
	acc := make([]BoolOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintArrayMapStringOption(m []uint, f UintToStringOptionTransformer) []StringOption {
	l := len(m)
	acc := make([]StringOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintArrayMapIntOption(m []uint, f UintToIntOptionTransformer) []IntOption {
	l := len(m)
	acc := make([]IntOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintArrayMapInt8Option(m []uint, f UintToInt8OptionTransformer) []Int8Option {
	l := len(m)
	acc := make([]Int8Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintArrayMapInt16Option(m []uint, f UintToInt16OptionTransformer) []Int16Option {
	l := len(m)
	acc := make([]Int16Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintArrayMapInt32Option(m []uint, f UintToInt32OptionTransformer) []Int32Option {
	l := len(m)
	acc := make([]Int32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintArrayMapInt64Option(m []uint, f UintToInt64OptionTransformer) []Int64Option {
	l := len(m)
	acc := make([]Int64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintArrayMapUintOption(m []uint, f UintToUintOptionTransformer) []UintOption {
	l := len(m)
	acc := make([]UintOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintArrayMapUint8Option(m []uint, f UintToUint8OptionTransformer) []Uint8Option {
	l := len(m)
	acc := make([]Uint8Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintArrayMapUint16Option(m []uint, f UintToUint16OptionTransformer) []Uint16Option {
	l := len(m)
	acc := make([]Uint16Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintArrayMapUint32Option(m []uint, f UintToUint32OptionTransformer) []Uint32Option {
	l := len(m)
	acc := make([]Uint32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintArrayMapUint64Option(m []uint, f UintToUint64OptionTransformer) []Uint64Option {
	l := len(m)
	acc := make([]Uint64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintArrayMapUintptrOption(m []uint, f UintToUintptrOptionTransformer) []UintptrOption {
	l := len(m)
	acc := make([]UintptrOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintArrayMapByteOption(m []uint, f UintToByteOptionTransformer) []ByteOption {
	l := len(m)
	acc := make([]ByteOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintArrayMapRuneOption(m []uint, f UintToRuneOptionTransformer) []RuneOption {
	l := len(m)
	acc := make([]RuneOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintArrayMapFloat32Option(m []uint, f UintToFloat32OptionTransformer) []Float32Option {
	l := len(m)
	acc := make([]Float32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintArrayMapFloat64Option(m []uint, f UintToFloat64OptionTransformer) []Float64Option {
	l := len(m)
	acc := make([]Float64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintArrayMapComplex64Option(m []uint, f UintToComplex64OptionTransformer) []Complex64Option {
	l := len(m)
	acc := make([]Complex64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintArrayMapComplex128Option(m []uint, f UintToComplex128OptionTransformer) []Complex128Option {
	l := len(m)
	acc := make([]Complex128Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintArrayMapAnyOption(m []uint, f UintToAnyOptionTransformer) []AnyOption {
	l := len(m)
	acc := make([]AnyOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8ArrayMapBool(m []uint8, f Uint8ToBoolTransformer) []bool {
	l := len(m)
	acc := make([]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8ArrayMapString(m []uint8, f Uint8ToStringTransformer) []string {
	l := len(m)
	acc := make([]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8ArrayMapInt(m []uint8, f Uint8ToIntTransformer) []int {
	l := len(m)
	acc := make([]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8ArrayMapInt8(m []uint8, f Uint8ToInt8Transformer) []int8 {
	l := len(m)
	acc := make([]int8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8ArrayMapInt16(m []uint8, f Uint8ToInt16Transformer) []int16 {
	l := len(m)
	acc := make([]int16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8ArrayMapInt32(m []uint8, f Uint8ToInt32Transformer) []int32 {
	l := len(m)
	acc := make([]int32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8ArrayMapInt64(m []uint8, f Uint8ToInt64Transformer) []int64 {
	l := len(m)
	acc := make([]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8ArrayMapUint(m []uint8, f Uint8ToUintTransformer) []uint {
	l := len(m)
	acc := make([]uint, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8ArrayMapUint8(m []uint8, f Uint8ToUint8Transformer) []uint8 {
	l := len(m)
	acc := make([]uint8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8ArrayMapUint16(m []uint8, f Uint8ToUint16Transformer) []uint16 {
	l := len(m)
	acc := make([]uint16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8ArrayMapUint32(m []uint8, f Uint8ToUint32Transformer) []uint32 {
	l := len(m)
	acc := make([]uint32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8ArrayMapUint64(m []uint8, f Uint8ToUint64Transformer) []uint64 {
	l := len(m)
	acc := make([]uint64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8ArrayMapUintptr(m []uint8, f Uint8ToUintptrTransformer) []uintptr {
	l := len(m)
	acc := make([]uintptr, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8ArrayMapByte(m []uint8, f Uint8ToByteTransformer) []byte {
	l := len(m)
	acc := make([]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8ArrayMapRune(m []uint8, f Uint8ToRuneTransformer) []rune {
	l := len(m)
	acc := make([]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8ArrayMapFloat32(m []uint8, f Uint8ToFloat32Transformer) []float32 {
	l := len(m)
	acc := make([]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8ArrayMapFloat64(m []uint8, f Uint8ToFloat64Transformer) []float64 {
	l := len(m)
	acc := make([]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8ArrayMapComplex64(m []uint8, f Uint8ToComplex64Transformer) []complex64 {
	l := len(m)
	acc := make([]complex64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8ArrayMapComplex128(m []uint8, f Uint8ToComplex128Transformer) []complex128 {
	l := len(m)
	acc := make([]complex128, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8ArrayMapAny(m []uint8, f Uint8ToAnyTransformer) []Any {
	l := len(m)
	acc := make([]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8ArrayMapBoolArray(m []uint8, f Uint8ToBoolArrayTransformer) [][]bool {
	l := len(m)
	acc := make([][]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8ArrayMapStringArray(m []uint8, f Uint8ToStringArrayTransformer) [][]string {
	l := len(m)
	acc := make([][]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8ArrayMapIntArray(m []uint8, f Uint8ToIntArrayTransformer) [][]int {
	l := len(m)
	acc := make([][]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8ArrayMapInt8Array(m []uint8, f Uint8ToInt8ArrayTransformer) [][]int8 {
	l := len(m)
	acc := make([][]int8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8ArrayMapInt16Array(m []uint8, f Uint8ToInt16ArrayTransformer) [][]int16 {
	l := len(m)
	acc := make([][]int16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8ArrayMapInt32Array(m []uint8, f Uint8ToInt32ArrayTransformer) [][]int32 {
	l := len(m)
	acc := make([][]int32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8ArrayMapInt64Array(m []uint8, f Uint8ToInt64ArrayTransformer) [][]int64 {
	l := len(m)
	acc := make([][]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8ArrayMapUintArray(m []uint8, f Uint8ToUintArrayTransformer) [][]uint {
	l := len(m)
	acc := make([][]uint, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8ArrayMapUint8Array(m []uint8, f Uint8ToUint8ArrayTransformer) [][]uint8 {
	l := len(m)
	acc := make([][]uint8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8ArrayMapUint16Array(m []uint8, f Uint8ToUint16ArrayTransformer) [][]uint16 {
	l := len(m)
	acc := make([][]uint16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8ArrayMapUint32Array(m []uint8, f Uint8ToUint32ArrayTransformer) [][]uint32 {
	l := len(m)
	acc := make([][]uint32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8ArrayMapUint64Array(m []uint8, f Uint8ToUint64ArrayTransformer) [][]uint64 {
	l := len(m)
	acc := make([][]uint64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8ArrayMapUintptrArray(m []uint8, f Uint8ToUintptrArrayTransformer) [][]uintptr {
	l := len(m)
	acc := make([][]uintptr, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8ArrayMapByteArray(m []uint8, f Uint8ToByteArrayTransformer) [][]byte {
	l := len(m)
	acc := make([][]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8ArrayMapRuneArray(m []uint8, f Uint8ToRuneArrayTransformer) [][]rune {
	l := len(m)
	acc := make([][]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8ArrayMapFloat32Array(m []uint8, f Uint8ToFloat32ArrayTransformer) [][]float32 {
	l := len(m)
	acc := make([][]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8ArrayMapFloat64Array(m []uint8, f Uint8ToFloat64ArrayTransformer) [][]float64 {
	l := len(m)
	acc := make([][]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8ArrayMapComplex64Array(m []uint8, f Uint8ToComplex64ArrayTransformer) [][]complex64 {
	l := len(m)
	acc := make([][]complex64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8ArrayMapComplex128Array(m []uint8, f Uint8ToComplex128ArrayTransformer) [][]complex128 {
	l := len(m)
	acc := make([][]complex128, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8ArrayMapAnyArray(m []uint8, f Uint8ToAnyArrayTransformer) [][]Any {
	l := len(m)
	acc := make([][]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8ArrayMapBoolOption(m []uint8, f Uint8ToBoolOptionTransformer) []BoolOption {
	l := len(m)
	acc := make([]BoolOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8ArrayMapStringOption(m []uint8, f Uint8ToStringOptionTransformer) []StringOption {
	l := len(m)
	acc := make([]StringOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8ArrayMapIntOption(m []uint8, f Uint8ToIntOptionTransformer) []IntOption {
	l := len(m)
	acc := make([]IntOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8ArrayMapInt8Option(m []uint8, f Uint8ToInt8OptionTransformer) []Int8Option {
	l := len(m)
	acc := make([]Int8Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8ArrayMapInt16Option(m []uint8, f Uint8ToInt16OptionTransformer) []Int16Option {
	l := len(m)
	acc := make([]Int16Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8ArrayMapInt32Option(m []uint8, f Uint8ToInt32OptionTransformer) []Int32Option {
	l := len(m)
	acc := make([]Int32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8ArrayMapInt64Option(m []uint8, f Uint8ToInt64OptionTransformer) []Int64Option {
	l := len(m)
	acc := make([]Int64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8ArrayMapUintOption(m []uint8, f Uint8ToUintOptionTransformer) []UintOption {
	l := len(m)
	acc := make([]UintOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8ArrayMapUint8Option(m []uint8, f Uint8ToUint8OptionTransformer) []Uint8Option {
	l := len(m)
	acc := make([]Uint8Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8ArrayMapUint16Option(m []uint8, f Uint8ToUint16OptionTransformer) []Uint16Option {
	l := len(m)
	acc := make([]Uint16Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8ArrayMapUint32Option(m []uint8, f Uint8ToUint32OptionTransformer) []Uint32Option {
	l := len(m)
	acc := make([]Uint32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8ArrayMapUint64Option(m []uint8, f Uint8ToUint64OptionTransformer) []Uint64Option {
	l := len(m)
	acc := make([]Uint64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8ArrayMapUintptrOption(m []uint8, f Uint8ToUintptrOptionTransformer) []UintptrOption {
	l := len(m)
	acc := make([]UintptrOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8ArrayMapByteOption(m []uint8, f Uint8ToByteOptionTransformer) []ByteOption {
	l := len(m)
	acc := make([]ByteOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8ArrayMapRuneOption(m []uint8, f Uint8ToRuneOptionTransformer) []RuneOption {
	l := len(m)
	acc := make([]RuneOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8ArrayMapFloat32Option(m []uint8, f Uint8ToFloat32OptionTransformer) []Float32Option {
	l := len(m)
	acc := make([]Float32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8ArrayMapFloat64Option(m []uint8, f Uint8ToFloat64OptionTransformer) []Float64Option {
	l := len(m)
	acc := make([]Float64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8ArrayMapComplex64Option(m []uint8, f Uint8ToComplex64OptionTransformer) []Complex64Option {
	l := len(m)
	acc := make([]Complex64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8ArrayMapComplex128Option(m []uint8, f Uint8ToComplex128OptionTransformer) []Complex128Option {
	l := len(m)
	acc := make([]Complex128Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8ArrayMapAnyOption(m []uint8, f Uint8ToAnyOptionTransformer) []AnyOption {
	l := len(m)
	acc := make([]AnyOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16ArrayMapBool(m []uint16, f Uint16ToBoolTransformer) []bool {
	l := len(m)
	acc := make([]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16ArrayMapString(m []uint16, f Uint16ToStringTransformer) []string {
	l := len(m)
	acc := make([]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16ArrayMapInt(m []uint16, f Uint16ToIntTransformer) []int {
	l := len(m)
	acc := make([]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16ArrayMapInt8(m []uint16, f Uint16ToInt8Transformer) []int8 {
	l := len(m)
	acc := make([]int8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16ArrayMapInt16(m []uint16, f Uint16ToInt16Transformer) []int16 {
	l := len(m)
	acc := make([]int16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16ArrayMapInt32(m []uint16, f Uint16ToInt32Transformer) []int32 {
	l := len(m)
	acc := make([]int32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16ArrayMapInt64(m []uint16, f Uint16ToInt64Transformer) []int64 {
	l := len(m)
	acc := make([]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16ArrayMapUint(m []uint16, f Uint16ToUintTransformer) []uint {
	l := len(m)
	acc := make([]uint, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16ArrayMapUint8(m []uint16, f Uint16ToUint8Transformer) []uint8 {
	l := len(m)
	acc := make([]uint8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16ArrayMapUint16(m []uint16, f Uint16ToUint16Transformer) []uint16 {
	l := len(m)
	acc := make([]uint16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16ArrayMapUint32(m []uint16, f Uint16ToUint32Transformer) []uint32 {
	l := len(m)
	acc := make([]uint32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16ArrayMapUint64(m []uint16, f Uint16ToUint64Transformer) []uint64 {
	l := len(m)
	acc := make([]uint64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16ArrayMapUintptr(m []uint16, f Uint16ToUintptrTransformer) []uintptr {
	l := len(m)
	acc := make([]uintptr, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16ArrayMapByte(m []uint16, f Uint16ToByteTransformer) []byte {
	l := len(m)
	acc := make([]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16ArrayMapRune(m []uint16, f Uint16ToRuneTransformer) []rune {
	l := len(m)
	acc := make([]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16ArrayMapFloat32(m []uint16, f Uint16ToFloat32Transformer) []float32 {
	l := len(m)
	acc := make([]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16ArrayMapFloat64(m []uint16, f Uint16ToFloat64Transformer) []float64 {
	l := len(m)
	acc := make([]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16ArrayMapComplex64(m []uint16, f Uint16ToComplex64Transformer) []complex64 {
	l := len(m)
	acc := make([]complex64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16ArrayMapComplex128(m []uint16, f Uint16ToComplex128Transformer) []complex128 {
	l := len(m)
	acc := make([]complex128, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16ArrayMapAny(m []uint16, f Uint16ToAnyTransformer) []Any {
	l := len(m)
	acc := make([]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16ArrayMapBoolArray(m []uint16, f Uint16ToBoolArrayTransformer) [][]bool {
	l := len(m)
	acc := make([][]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16ArrayMapStringArray(m []uint16, f Uint16ToStringArrayTransformer) [][]string {
	l := len(m)
	acc := make([][]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16ArrayMapIntArray(m []uint16, f Uint16ToIntArrayTransformer) [][]int {
	l := len(m)
	acc := make([][]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16ArrayMapInt8Array(m []uint16, f Uint16ToInt8ArrayTransformer) [][]int8 {
	l := len(m)
	acc := make([][]int8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16ArrayMapInt16Array(m []uint16, f Uint16ToInt16ArrayTransformer) [][]int16 {
	l := len(m)
	acc := make([][]int16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16ArrayMapInt32Array(m []uint16, f Uint16ToInt32ArrayTransformer) [][]int32 {
	l := len(m)
	acc := make([][]int32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16ArrayMapInt64Array(m []uint16, f Uint16ToInt64ArrayTransformer) [][]int64 {
	l := len(m)
	acc := make([][]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16ArrayMapUintArray(m []uint16, f Uint16ToUintArrayTransformer) [][]uint {
	l := len(m)
	acc := make([][]uint, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16ArrayMapUint8Array(m []uint16, f Uint16ToUint8ArrayTransformer) [][]uint8 {
	l := len(m)
	acc := make([][]uint8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16ArrayMapUint16Array(m []uint16, f Uint16ToUint16ArrayTransformer) [][]uint16 {
	l := len(m)
	acc := make([][]uint16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16ArrayMapUint32Array(m []uint16, f Uint16ToUint32ArrayTransformer) [][]uint32 {
	l := len(m)
	acc := make([][]uint32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16ArrayMapUint64Array(m []uint16, f Uint16ToUint64ArrayTransformer) [][]uint64 {
	l := len(m)
	acc := make([][]uint64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16ArrayMapUintptrArray(m []uint16, f Uint16ToUintptrArrayTransformer) [][]uintptr {
	l := len(m)
	acc := make([][]uintptr, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16ArrayMapByteArray(m []uint16, f Uint16ToByteArrayTransformer) [][]byte {
	l := len(m)
	acc := make([][]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16ArrayMapRuneArray(m []uint16, f Uint16ToRuneArrayTransformer) [][]rune {
	l := len(m)
	acc := make([][]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16ArrayMapFloat32Array(m []uint16, f Uint16ToFloat32ArrayTransformer) [][]float32 {
	l := len(m)
	acc := make([][]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16ArrayMapFloat64Array(m []uint16, f Uint16ToFloat64ArrayTransformer) [][]float64 {
	l := len(m)
	acc := make([][]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16ArrayMapComplex64Array(m []uint16, f Uint16ToComplex64ArrayTransformer) [][]complex64 {
	l := len(m)
	acc := make([][]complex64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16ArrayMapComplex128Array(m []uint16, f Uint16ToComplex128ArrayTransformer) [][]complex128 {
	l := len(m)
	acc := make([][]complex128, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16ArrayMapAnyArray(m []uint16, f Uint16ToAnyArrayTransformer) [][]Any {
	l := len(m)
	acc := make([][]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16ArrayMapBoolOption(m []uint16, f Uint16ToBoolOptionTransformer) []BoolOption {
	l := len(m)
	acc := make([]BoolOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16ArrayMapStringOption(m []uint16, f Uint16ToStringOptionTransformer) []StringOption {
	l := len(m)
	acc := make([]StringOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16ArrayMapIntOption(m []uint16, f Uint16ToIntOptionTransformer) []IntOption {
	l := len(m)
	acc := make([]IntOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16ArrayMapInt8Option(m []uint16, f Uint16ToInt8OptionTransformer) []Int8Option {
	l := len(m)
	acc := make([]Int8Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16ArrayMapInt16Option(m []uint16, f Uint16ToInt16OptionTransformer) []Int16Option {
	l := len(m)
	acc := make([]Int16Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16ArrayMapInt32Option(m []uint16, f Uint16ToInt32OptionTransformer) []Int32Option {
	l := len(m)
	acc := make([]Int32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16ArrayMapInt64Option(m []uint16, f Uint16ToInt64OptionTransformer) []Int64Option {
	l := len(m)
	acc := make([]Int64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16ArrayMapUintOption(m []uint16, f Uint16ToUintOptionTransformer) []UintOption {
	l := len(m)
	acc := make([]UintOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16ArrayMapUint8Option(m []uint16, f Uint16ToUint8OptionTransformer) []Uint8Option {
	l := len(m)
	acc := make([]Uint8Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16ArrayMapUint16Option(m []uint16, f Uint16ToUint16OptionTransformer) []Uint16Option {
	l := len(m)
	acc := make([]Uint16Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16ArrayMapUint32Option(m []uint16, f Uint16ToUint32OptionTransformer) []Uint32Option {
	l := len(m)
	acc := make([]Uint32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16ArrayMapUint64Option(m []uint16, f Uint16ToUint64OptionTransformer) []Uint64Option {
	l := len(m)
	acc := make([]Uint64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16ArrayMapUintptrOption(m []uint16, f Uint16ToUintptrOptionTransformer) []UintptrOption {
	l := len(m)
	acc := make([]UintptrOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16ArrayMapByteOption(m []uint16, f Uint16ToByteOptionTransformer) []ByteOption {
	l := len(m)
	acc := make([]ByteOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16ArrayMapRuneOption(m []uint16, f Uint16ToRuneOptionTransformer) []RuneOption {
	l := len(m)
	acc := make([]RuneOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16ArrayMapFloat32Option(m []uint16, f Uint16ToFloat32OptionTransformer) []Float32Option {
	l := len(m)
	acc := make([]Float32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16ArrayMapFloat64Option(m []uint16, f Uint16ToFloat64OptionTransformer) []Float64Option {
	l := len(m)
	acc := make([]Float64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16ArrayMapComplex64Option(m []uint16, f Uint16ToComplex64OptionTransformer) []Complex64Option {
	l := len(m)
	acc := make([]Complex64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16ArrayMapComplex128Option(m []uint16, f Uint16ToComplex128OptionTransformer) []Complex128Option {
	l := len(m)
	acc := make([]Complex128Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16ArrayMapAnyOption(m []uint16, f Uint16ToAnyOptionTransformer) []AnyOption {
	l := len(m)
	acc := make([]AnyOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32ArrayMapBool(m []uint32, f Uint32ToBoolTransformer) []bool {
	l := len(m)
	acc := make([]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32ArrayMapString(m []uint32, f Uint32ToStringTransformer) []string {
	l := len(m)
	acc := make([]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32ArrayMapInt(m []uint32, f Uint32ToIntTransformer) []int {
	l := len(m)
	acc := make([]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32ArrayMapInt8(m []uint32, f Uint32ToInt8Transformer) []int8 {
	l := len(m)
	acc := make([]int8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32ArrayMapInt16(m []uint32, f Uint32ToInt16Transformer) []int16 {
	l := len(m)
	acc := make([]int16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32ArrayMapInt32(m []uint32, f Uint32ToInt32Transformer) []int32 {
	l := len(m)
	acc := make([]int32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32ArrayMapInt64(m []uint32, f Uint32ToInt64Transformer) []int64 {
	l := len(m)
	acc := make([]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32ArrayMapUint(m []uint32, f Uint32ToUintTransformer) []uint {
	l := len(m)
	acc := make([]uint, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32ArrayMapUint8(m []uint32, f Uint32ToUint8Transformer) []uint8 {
	l := len(m)
	acc := make([]uint8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32ArrayMapUint16(m []uint32, f Uint32ToUint16Transformer) []uint16 {
	l := len(m)
	acc := make([]uint16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32ArrayMapUint32(m []uint32, f Uint32ToUint32Transformer) []uint32 {
	l := len(m)
	acc := make([]uint32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32ArrayMapUint64(m []uint32, f Uint32ToUint64Transformer) []uint64 {
	l := len(m)
	acc := make([]uint64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32ArrayMapUintptr(m []uint32, f Uint32ToUintptrTransformer) []uintptr {
	l := len(m)
	acc := make([]uintptr, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32ArrayMapByte(m []uint32, f Uint32ToByteTransformer) []byte {
	l := len(m)
	acc := make([]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32ArrayMapRune(m []uint32, f Uint32ToRuneTransformer) []rune {
	l := len(m)
	acc := make([]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32ArrayMapFloat32(m []uint32, f Uint32ToFloat32Transformer) []float32 {
	l := len(m)
	acc := make([]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32ArrayMapFloat64(m []uint32, f Uint32ToFloat64Transformer) []float64 {
	l := len(m)
	acc := make([]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32ArrayMapComplex64(m []uint32, f Uint32ToComplex64Transformer) []complex64 {
	l := len(m)
	acc := make([]complex64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32ArrayMapComplex128(m []uint32, f Uint32ToComplex128Transformer) []complex128 {
	l := len(m)
	acc := make([]complex128, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32ArrayMapAny(m []uint32, f Uint32ToAnyTransformer) []Any {
	l := len(m)
	acc := make([]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32ArrayMapBoolArray(m []uint32, f Uint32ToBoolArrayTransformer) [][]bool {
	l := len(m)
	acc := make([][]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32ArrayMapStringArray(m []uint32, f Uint32ToStringArrayTransformer) [][]string {
	l := len(m)
	acc := make([][]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32ArrayMapIntArray(m []uint32, f Uint32ToIntArrayTransformer) [][]int {
	l := len(m)
	acc := make([][]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32ArrayMapInt8Array(m []uint32, f Uint32ToInt8ArrayTransformer) [][]int8 {
	l := len(m)
	acc := make([][]int8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32ArrayMapInt16Array(m []uint32, f Uint32ToInt16ArrayTransformer) [][]int16 {
	l := len(m)
	acc := make([][]int16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32ArrayMapInt32Array(m []uint32, f Uint32ToInt32ArrayTransformer) [][]int32 {
	l := len(m)
	acc := make([][]int32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32ArrayMapInt64Array(m []uint32, f Uint32ToInt64ArrayTransformer) [][]int64 {
	l := len(m)
	acc := make([][]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32ArrayMapUintArray(m []uint32, f Uint32ToUintArrayTransformer) [][]uint {
	l := len(m)
	acc := make([][]uint, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32ArrayMapUint8Array(m []uint32, f Uint32ToUint8ArrayTransformer) [][]uint8 {
	l := len(m)
	acc := make([][]uint8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32ArrayMapUint16Array(m []uint32, f Uint32ToUint16ArrayTransformer) [][]uint16 {
	l := len(m)
	acc := make([][]uint16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32ArrayMapUint32Array(m []uint32, f Uint32ToUint32ArrayTransformer) [][]uint32 {
	l := len(m)
	acc := make([][]uint32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32ArrayMapUint64Array(m []uint32, f Uint32ToUint64ArrayTransformer) [][]uint64 {
	l := len(m)
	acc := make([][]uint64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32ArrayMapUintptrArray(m []uint32, f Uint32ToUintptrArrayTransformer) [][]uintptr {
	l := len(m)
	acc := make([][]uintptr, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32ArrayMapByteArray(m []uint32, f Uint32ToByteArrayTransformer) [][]byte {
	l := len(m)
	acc := make([][]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32ArrayMapRuneArray(m []uint32, f Uint32ToRuneArrayTransformer) [][]rune {
	l := len(m)
	acc := make([][]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32ArrayMapFloat32Array(m []uint32, f Uint32ToFloat32ArrayTransformer) [][]float32 {
	l := len(m)
	acc := make([][]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32ArrayMapFloat64Array(m []uint32, f Uint32ToFloat64ArrayTransformer) [][]float64 {
	l := len(m)
	acc := make([][]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32ArrayMapComplex64Array(m []uint32, f Uint32ToComplex64ArrayTransformer) [][]complex64 {
	l := len(m)
	acc := make([][]complex64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32ArrayMapComplex128Array(m []uint32, f Uint32ToComplex128ArrayTransformer) [][]complex128 {
	l := len(m)
	acc := make([][]complex128, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32ArrayMapAnyArray(m []uint32, f Uint32ToAnyArrayTransformer) [][]Any {
	l := len(m)
	acc := make([][]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32ArrayMapBoolOption(m []uint32, f Uint32ToBoolOptionTransformer) []BoolOption {
	l := len(m)
	acc := make([]BoolOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32ArrayMapStringOption(m []uint32, f Uint32ToStringOptionTransformer) []StringOption {
	l := len(m)
	acc := make([]StringOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32ArrayMapIntOption(m []uint32, f Uint32ToIntOptionTransformer) []IntOption {
	l := len(m)
	acc := make([]IntOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32ArrayMapInt8Option(m []uint32, f Uint32ToInt8OptionTransformer) []Int8Option {
	l := len(m)
	acc := make([]Int8Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32ArrayMapInt16Option(m []uint32, f Uint32ToInt16OptionTransformer) []Int16Option {
	l := len(m)
	acc := make([]Int16Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32ArrayMapInt32Option(m []uint32, f Uint32ToInt32OptionTransformer) []Int32Option {
	l := len(m)
	acc := make([]Int32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32ArrayMapInt64Option(m []uint32, f Uint32ToInt64OptionTransformer) []Int64Option {
	l := len(m)
	acc := make([]Int64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32ArrayMapUintOption(m []uint32, f Uint32ToUintOptionTransformer) []UintOption {
	l := len(m)
	acc := make([]UintOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32ArrayMapUint8Option(m []uint32, f Uint32ToUint8OptionTransformer) []Uint8Option {
	l := len(m)
	acc := make([]Uint8Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32ArrayMapUint16Option(m []uint32, f Uint32ToUint16OptionTransformer) []Uint16Option {
	l := len(m)
	acc := make([]Uint16Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32ArrayMapUint32Option(m []uint32, f Uint32ToUint32OptionTransformer) []Uint32Option {
	l := len(m)
	acc := make([]Uint32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32ArrayMapUint64Option(m []uint32, f Uint32ToUint64OptionTransformer) []Uint64Option {
	l := len(m)
	acc := make([]Uint64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32ArrayMapUintptrOption(m []uint32, f Uint32ToUintptrOptionTransformer) []UintptrOption {
	l := len(m)
	acc := make([]UintptrOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32ArrayMapByteOption(m []uint32, f Uint32ToByteOptionTransformer) []ByteOption {
	l := len(m)
	acc := make([]ByteOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32ArrayMapRuneOption(m []uint32, f Uint32ToRuneOptionTransformer) []RuneOption {
	l := len(m)
	acc := make([]RuneOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32ArrayMapFloat32Option(m []uint32, f Uint32ToFloat32OptionTransformer) []Float32Option {
	l := len(m)
	acc := make([]Float32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32ArrayMapFloat64Option(m []uint32, f Uint32ToFloat64OptionTransformer) []Float64Option {
	l := len(m)
	acc := make([]Float64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32ArrayMapComplex64Option(m []uint32, f Uint32ToComplex64OptionTransformer) []Complex64Option {
	l := len(m)
	acc := make([]Complex64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32ArrayMapComplex128Option(m []uint32, f Uint32ToComplex128OptionTransformer) []Complex128Option {
	l := len(m)
	acc := make([]Complex128Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32ArrayMapAnyOption(m []uint32, f Uint32ToAnyOptionTransformer) []AnyOption {
	l := len(m)
	acc := make([]AnyOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64ArrayMapBool(m []uint64, f Uint64ToBoolTransformer) []bool {
	l := len(m)
	acc := make([]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64ArrayMapString(m []uint64, f Uint64ToStringTransformer) []string {
	l := len(m)
	acc := make([]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64ArrayMapInt(m []uint64, f Uint64ToIntTransformer) []int {
	l := len(m)
	acc := make([]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64ArrayMapInt8(m []uint64, f Uint64ToInt8Transformer) []int8 {
	l := len(m)
	acc := make([]int8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64ArrayMapInt16(m []uint64, f Uint64ToInt16Transformer) []int16 {
	l := len(m)
	acc := make([]int16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64ArrayMapInt32(m []uint64, f Uint64ToInt32Transformer) []int32 {
	l := len(m)
	acc := make([]int32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64ArrayMapInt64(m []uint64, f Uint64ToInt64Transformer) []int64 {
	l := len(m)
	acc := make([]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64ArrayMapUint(m []uint64, f Uint64ToUintTransformer) []uint {
	l := len(m)
	acc := make([]uint, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64ArrayMapUint8(m []uint64, f Uint64ToUint8Transformer) []uint8 {
	l := len(m)
	acc := make([]uint8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64ArrayMapUint16(m []uint64, f Uint64ToUint16Transformer) []uint16 {
	l := len(m)
	acc := make([]uint16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64ArrayMapUint32(m []uint64, f Uint64ToUint32Transformer) []uint32 {
	l := len(m)
	acc := make([]uint32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64ArrayMapUint64(m []uint64, f Uint64ToUint64Transformer) []uint64 {
	l := len(m)
	acc := make([]uint64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64ArrayMapUintptr(m []uint64, f Uint64ToUintptrTransformer) []uintptr {
	l := len(m)
	acc := make([]uintptr, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64ArrayMapByte(m []uint64, f Uint64ToByteTransformer) []byte {
	l := len(m)
	acc := make([]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64ArrayMapRune(m []uint64, f Uint64ToRuneTransformer) []rune {
	l := len(m)
	acc := make([]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64ArrayMapFloat32(m []uint64, f Uint64ToFloat32Transformer) []float32 {
	l := len(m)
	acc := make([]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64ArrayMapFloat64(m []uint64, f Uint64ToFloat64Transformer) []float64 {
	l := len(m)
	acc := make([]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64ArrayMapComplex64(m []uint64, f Uint64ToComplex64Transformer) []complex64 {
	l := len(m)
	acc := make([]complex64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64ArrayMapComplex128(m []uint64, f Uint64ToComplex128Transformer) []complex128 {
	l := len(m)
	acc := make([]complex128, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64ArrayMapAny(m []uint64, f Uint64ToAnyTransformer) []Any {
	l := len(m)
	acc := make([]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64ArrayMapBoolArray(m []uint64, f Uint64ToBoolArrayTransformer) [][]bool {
	l := len(m)
	acc := make([][]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64ArrayMapStringArray(m []uint64, f Uint64ToStringArrayTransformer) [][]string {
	l := len(m)
	acc := make([][]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64ArrayMapIntArray(m []uint64, f Uint64ToIntArrayTransformer) [][]int {
	l := len(m)
	acc := make([][]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64ArrayMapInt8Array(m []uint64, f Uint64ToInt8ArrayTransformer) [][]int8 {
	l := len(m)
	acc := make([][]int8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64ArrayMapInt16Array(m []uint64, f Uint64ToInt16ArrayTransformer) [][]int16 {
	l := len(m)
	acc := make([][]int16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64ArrayMapInt32Array(m []uint64, f Uint64ToInt32ArrayTransformer) [][]int32 {
	l := len(m)
	acc := make([][]int32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64ArrayMapInt64Array(m []uint64, f Uint64ToInt64ArrayTransformer) [][]int64 {
	l := len(m)
	acc := make([][]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64ArrayMapUintArray(m []uint64, f Uint64ToUintArrayTransformer) [][]uint {
	l := len(m)
	acc := make([][]uint, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64ArrayMapUint8Array(m []uint64, f Uint64ToUint8ArrayTransformer) [][]uint8 {
	l := len(m)
	acc := make([][]uint8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64ArrayMapUint16Array(m []uint64, f Uint64ToUint16ArrayTransformer) [][]uint16 {
	l := len(m)
	acc := make([][]uint16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64ArrayMapUint32Array(m []uint64, f Uint64ToUint32ArrayTransformer) [][]uint32 {
	l := len(m)
	acc := make([][]uint32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64ArrayMapUint64Array(m []uint64, f Uint64ToUint64ArrayTransformer) [][]uint64 {
	l := len(m)
	acc := make([][]uint64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64ArrayMapUintptrArray(m []uint64, f Uint64ToUintptrArrayTransformer) [][]uintptr {
	l := len(m)
	acc := make([][]uintptr, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64ArrayMapByteArray(m []uint64, f Uint64ToByteArrayTransformer) [][]byte {
	l := len(m)
	acc := make([][]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64ArrayMapRuneArray(m []uint64, f Uint64ToRuneArrayTransformer) [][]rune {
	l := len(m)
	acc := make([][]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64ArrayMapFloat32Array(m []uint64, f Uint64ToFloat32ArrayTransformer) [][]float32 {
	l := len(m)
	acc := make([][]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64ArrayMapFloat64Array(m []uint64, f Uint64ToFloat64ArrayTransformer) [][]float64 {
	l := len(m)
	acc := make([][]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64ArrayMapComplex64Array(m []uint64, f Uint64ToComplex64ArrayTransformer) [][]complex64 {
	l := len(m)
	acc := make([][]complex64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64ArrayMapComplex128Array(m []uint64, f Uint64ToComplex128ArrayTransformer) [][]complex128 {
	l := len(m)
	acc := make([][]complex128, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64ArrayMapAnyArray(m []uint64, f Uint64ToAnyArrayTransformer) [][]Any {
	l := len(m)
	acc := make([][]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64ArrayMapBoolOption(m []uint64, f Uint64ToBoolOptionTransformer) []BoolOption {
	l := len(m)
	acc := make([]BoolOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64ArrayMapStringOption(m []uint64, f Uint64ToStringOptionTransformer) []StringOption {
	l := len(m)
	acc := make([]StringOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64ArrayMapIntOption(m []uint64, f Uint64ToIntOptionTransformer) []IntOption {
	l := len(m)
	acc := make([]IntOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64ArrayMapInt8Option(m []uint64, f Uint64ToInt8OptionTransformer) []Int8Option {
	l := len(m)
	acc := make([]Int8Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64ArrayMapInt16Option(m []uint64, f Uint64ToInt16OptionTransformer) []Int16Option {
	l := len(m)
	acc := make([]Int16Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64ArrayMapInt32Option(m []uint64, f Uint64ToInt32OptionTransformer) []Int32Option {
	l := len(m)
	acc := make([]Int32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64ArrayMapInt64Option(m []uint64, f Uint64ToInt64OptionTransformer) []Int64Option {
	l := len(m)
	acc := make([]Int64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64ArrayMapUintOption(m []uint64, f Uint64ToUintOptionTransformer) []UintOption {
	l := len(m)
	acc := make([]UintOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64ArrayMapUint8Option(m []uint64, f Uint64ToUint8OptionTransformer) []Uint8Option {
	l := len(m)
	acc := make([]Uint8Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64ArrayMapUint16Option(m []uint64, f Uint64ToUint16OptionTransformer) []Uint16Option {
	l := len(m)
	acc := make([]Uint16Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64ArrayMapUint32Option(m []uint64, f Uint64ToUint32OptionTransformer) []Uint32Option {
	l := len(m)
	acc := make([]Uint32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64ArrayMapUint64Option(m []uint64, f Uint64ToUint64OptionTransformer) []Uint64Option {
	l := len(m)
	acc := make([]Uint64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64ArrayMapUintptrOption(m []uint64, f Uint64ToUintptrOptionTransformer) []UintptrOption {
	l := len(m)
	acc := make([]UintptrOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64ArrayMapByteOption(m []uint64, f Uint64ToByteOptionTransformer) []ByteOption {
	l := len(m)
	acc := make([]ByteOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64ArrayMapRuneOption(m []uint64, f Uint64ToRuneOptionTransformer) []RuneOption {
	l := len(m)
	acc := make([]RuneOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64ArrayMapFloat32Option(m []uint64, f Uint64ToFloat32OptionTransformer) []Float32Option {
	l := len(m)
	acc := make([]Float32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64ArrayMapFloat64Option(m []uint64, f Uint64ToFloat64OptionTransformer) []Float64Option {
	l := len(m)
	acc := make([]Float64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64ArrayMapComplex64Option(m []uint64, f Uint64ToComplex64OptionTransformer) []Complex64Option {
	l := len(m)
	acc := make([]Complex64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64ArrayMapComplex128Option(m []uint64, f Uint64ToComplex128OptionTransformer) []Complex128Option {
	l := len(m)
	acc := make([]Complex128Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64ArrayMapAnyOption(m []uint64, f Uint64ToAnyOptionTransformer) []AnyOption {
	l := len(m)
	acc := make([]AnyOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrArrayMapBool(m []uintptr, f UintptrToBoolTransformer) []bool {
	l := len(m)
	acc := make([]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrArrayMapString(m []uintptr, f UintptrToStringTransformer) []string {
	l := len(m)
	acc := make([]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrArrayMapInt(m []uintptr, f UintptrToIntTransformer) []int {
	l := len(m)
	acc := make([]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrArrayMapInt8(m []uintptr, f UintptrToInt8Transformer) []int8 {
	l := len(m)
	acc := make([]int8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrArrayMapInt16(m []uintptr, f UintptrToInt16Transformer) []int16 {
	l := len(m)
	acc := make([]int16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrArrayMapInt32(m []uintptr, f UintptrToInt32Transformer) []int32 {
	l := len(m)
	acc := make([]int32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrArrayMapInt64(m []uintptr, f UintptrToInt64Transformer) []int64 {
	l := len(m)
	acc := make([]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrArrayMapUint(m []uintptr, f UintptrToUintTransformer) []uint {
	l := len(m)
	acc := make([]uint, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrArrayMapUint8(m []uintptr, f UintptrToUint8Transformer) []uint8 {
	l := len(m)
	acc := make([]uint8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrArrayMapUint16(m []uintptr, f UintptrToUint16Transformer) []uint16 {
	l := len(m)
	acc := make([]uint16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrArrayMapUint32(m []uintptr, f UintptrToUint32Transformer) []uint32 {
	l := len(m)
	acc := make([]uint32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrArrayMapUint64(m []uintptr, f UintptrToUint64Transformer) []uint64 {
	l := len(m)
	acc := make([]uint64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrArrayMapUintptr(m []uintptr, f UintptrToUintptrTransformer) []uintptr {
	l := len(m)
	acc := make([]uintptr, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrArrayMapByte(m []uintptr, f UintptrToByteTransformer) []byte {
	l := len(m)
	acc := make([]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrArrayMapRune(m []uintptr, f UintptrToRuneTransformer) []rune {
	l := len(m)
	acc := make([]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrArrayMapFloat32(m []uintptr, f UintptrToFloat32Transformer) []float32 {
	l := len(m)
	acc := make([]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrArrayMapFloat64(m []uintptr, f UintptrToFloat64Transformer) []float64 {
	l := len(m)
	acc := make([]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrArrayMapComplex64(m []uintptr, f UintptrToComplex64Transformer) []complex64 {
	l := len(m)
	acc := make([]complex64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrArrayMapComplex128(m []uintptr, f UintptrToComplex128Transformer) []complex128 {
	l := len(m)
	acc := make([]complex128, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrArrayMapAny(m []uintptr, f UintptrToAnyTransformer) []Any {
	l := len(m)
	acc := make([]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrArrayMapBoolArray(m []uintptr, f UintptrToBoolArrayTransformer) [][]bool {
	l := len(m)
	acc := make([][]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrArrayMapStringArray(m []uintptr, f UintptrToStringArrayTransformer) [][]string {
	l := len(m)
	acc := make([][]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrArrayMapIntArray(m []uintptr, f UintptrToIntArrayTransformer) [][]int {
	l := len(m)
	acc := make([][]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrArrayMapInt8Array(m []uintptr, f UintptrToInt8ArrayTransformer) [][]int8 {
	l := len(m)
	acc := make([][]int8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrArrayMapInt16Array(m []uintptr, f UintptrToInt16ArrayTransformer) [][]int16 {
	l := len(m)
	acc := make([][]int16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrArrayMapInt32Array(m []uintptr, f UintptrToInt32ArrayTransformer) [][]int32 {
	l := len(m)
	acc := make([][]int32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrArrayMapInt64Array(m []uintptr, f UintptrToInt64ArrayTransformer) [][]int64 {
	l := len(m)
	acc := make([][]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrArrayMapUintArray(m []uintptr, f UintptrToUintArrayTransformer) [][]uint {
	l := len(m)
	acc := make([][]uint, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrArrayMapUint8Array(m []uintptr, f UintptrToUint8ArrayTransformer) [][]uint8 {
	l := len(m)
	acc := make([][]uint8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrArrayMapUint16Array(m []uintptr, f UintptrToUint16ArrayTransformer) [][]uint16 {
	l := len(m)
	acc := make([][]uint16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrArrayMapUint32Array(m []uintptr, f UintptrToUint32ArrayTransformer) [][]uint32 {
	l := len(m)
	acc := make([][]uint32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrArrayMapUint64Array(m []uintptr, f UintptrToUint64ArrayTransformer) [][]uint64 {
	l := len(m)
	acc := make([][]uint64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrArrayMapUintptrArray(m []uintptr, f UintptrToUintptrArrayTransformer) [][]uintptr {
	l := len(m)
	acc := make([][]uintptr, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrArrayMapByteArray(m []uintptr, f UintptrToByteArrayTransformer) [][]byte {
	l := len(m)
	acc := make([][]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrArrayMapRuneArray(m []uintptr, f UintptrToRuneArrayTransformer) [][]rune {
	l := len(m)
	acc := make([][]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrArrayMapFloat32Array(m []uintptr, f UintptrToFloat32ArrayTransformer) [][]float32 {
	l := len(m)
	acc := make([][]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrArrayMapFloat64Array(m []uintptr, f UintptrToFloat64ArrayTransformer) [][]float64 {
	l := len(m)
	acc := make([][]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrArrayMapComplex64Array(m []uintptr, f UintptrToComplex64ArrayTransformer) [][]complex64 {
	l := len(m)
	acc := make([][]complex64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrArrayMapComplex128Array(m []uintptr, f UintptrToComplex128ArrayTransformer) [][]complex128 {
	l := len(m)
	acc := make([][]complex128, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrArrayMapAnyArray(m []uintptr, f UintptrToAnyArrayTransformer) [][]Any {
	l := len(m)
	acc := make([][]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrArrayMapBoolOption(m []uintptr, f UintptrToBoolOptionTransformer) []BoolOption {
	l := len(m)
	acc := make([]BoolOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrArrayMapStringOption(m []uintptr, f UintptrToStringOptionTransformer) []StringOption {
	l := len(m)
	acc := make([]StringOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrArrayMapIntOption(m []uintptr, f UintptrToIntOptionTransformer) []IntOption {
	l := len(m)
	acc := make([]IntOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrArrayMapInt8Option(m []uintptr, f UintptrToInt8OptionTransformer) []Int8Option {
	l := len(m)
	acc := make([]Int8Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrArrayMapInt16Option(m []uintptr, f UintptrToInt16OptionTransformer) []Int16Option {
	l := len(m)
	acc := make([]Int16Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrArrayMapInt32Option(m []uintptr, f UintptrToInt32OptionTransformer) []Int32Option {
	l := len(m)
	acc := make([]Int32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrArrayMapInt64Option(m []uintptr, f UintptrToInt64OptionTransformer) []Int64Option {
	l := len(m)
	acc := make([]Int64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrArrayMapUintOption(m []uintptr, f UintptrToUintOptionTransformer) []UintOption {
	l := len(m)
	acc := make([]UintOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrArrayMapUint8Option(m []uintptr, f UintptrToUint8OptionTransformer) []Uint8Option {
	l := len(m)
	acc := make([]Uint8Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrArrayMapUint16Option(m []uintptr, f UintptrToUint16OptionTransformer) []Uint16Option {
	l := len(m)
	acc := make([]Uint16Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrArrayMapUint32Option(m []uintptr, f UintptrToUint32OptionTransformer) []Uint32Option {
	l := len(m)
	acc := make([]Uint32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrArrayMapUint64Option(m []uintptr, f UintptrToUint64OptionTransformer) []Uint64Option {
	l := len(m)
	acc := make([]Uint64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrArrayMapUintptrOption(m []uintptr, f UintptrToUintptrOptionTransformer) []UintptrOption {
	l := len(m)
	acc := make([]UintptrOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrArrayMapByteOption(m []uintptr, f UintptrToByteOptionTransformer) []ByteOption {
	l := len(m)
	acc := make([]ByteOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrArrayMapRuneOption(m []uintptr, f UintptrToRuneOptionTransformer) []RuneOption {
	l := len(m)
	acc := make([]RuneOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrArrayMapFloat32Option(m []uintptr, f UintptrToFloat32OptionTransformer) []Float32Option {
	l := len(m)
	acc := make([]Float32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrArrayMapFloat64Option(m []uintptr, f UintptrToFloat64OptionTransformer) []Float64Option {
	l := len(m)
	acc := make([]Float64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrArrayMapComplex64Option(m []uintptr, f UintptrToComplex64OptionTransformer) []Complex64Option {
	l := len(m)
	acc := make([]Complex64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrArrayMapComplex128Option(m []uintptr, f UintptrToComplex128OptionTransformer) []Complex128Option {
	l := len(m)
	acc := make([]Complex128Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrArrayMapAnyOption(m []uintptr, f UintptrToAnyOptionTransformer) []AnyOption {
	l := len(m)
	acc := make([]AnyOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayMapBool(m []byte, f ByteToBoolTransformer) []bool {
	l := len(m)
	acc := make([]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayMapString(m []byte, f ByteToStringTransformer) []string {
	l := len(m)
	acc := make([]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayMapInt(m []byte, f ByteToIntTransformer) []int {
	l := len(m)
	acc := make([]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayMapInt8(m []byte, f ByteToInt8Transformer) []int8 {
	l := len(m)
	acc := make([]int8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayMapInt16(m []byte, f ByteToInt16Transformer) []int16 {
	l := len(m)
	acc := make([]int16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayMapInt32(m []byte, f ByteToInt32Transformer) []int32 {
	l := len(m)
	acc := make([]int32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayMapInt64(m []byte, f ByteToInt64Transformer) []int64 {
	l := len(m)
	acc := make([]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayMapUint(m []byte, f ByteToUintTransformer) []uint {
	l := len(m)
	acc := make([]uint, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayMapUint8(m []byte, f ByteToUint8Transformer) []uint8 {
	l := len(m)
	acc := make([]uint8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayMapUint16(m []byte, f ByteToUint16Transformer) []uint16 {
	l := len(m)
	acc := make([]uint16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayMapUint32(m []byte, f ByteToUint32Transformer) []uint32 {
	l := len(m)
	acc := make([]uint32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayMapUint64(m []byte, f ByteToUint64Transformer) []uint64 {
	l := len(m)
	acc := make([]uint64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayMapUintptr(m []byte, f ByteToUintptrTransformer) []uintptr {
	l := len(m)
	acc := make([]uintptr, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayMapByte(m []byte, f ByteToByteTransformer) []byte {
	l := len(m)
	acc := make([]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayMapRune(m []byte, f ByteToRuneTransformer) []rune {
	l := len(m)
	acc := make([]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayMapFloat32(m []byte, f ByteToFloat32Transformer) []float32 {
	l := len(m)
	acc := make([]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayMapFloat64(m []byte, f ByteToFloat64Transformer) []float64 {
	l := len(m)
	acc := make([]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayMapComplex64(m []byte, f ByteToComplex64Transformer) []complex64 {
	l := len(m)
	acc := make([]complex64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayMapComplex128(m []byte, f ByteToComplex128Transformer) []complex128 {
	l := len(m)
	acc := make([]complex128, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayMapAny(m []byte, f ByteToAnyTransformer) []Any {
	l := len(m)
	acc := make([]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayMapBoolArray(m []byte, f ByteToBoolArrayTransformer) [][]bool {
	l := len(m)
	acc := make([][]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayMapStringArray(m []byte, f ByteToStringArrayTransformer) [][]string {
	l := len(m)
	acc := make([][]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayMapIntArray(m []byte, f ByteToIntArrayTransformer) [][]int {
	l := len(m)
	acc := make([][]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayMapInt8Array(m []byte, f ByteToInt8ArrayTransformer) [][]int8 {
	l := len(m)
	acc := make([][]int8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayMapInt16Array(m []byte, f ByteToInt16ArrayTransformer) [][]int16 {
	l := len(m)
	acc := make([][]int16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayMapInt32Array(m []byte, f ByteToInt32ArrayTransformer) [][]int32 {
	l := len(m)
	acc := make([][]int32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayMapInt64Array(m []byte, f ByteToInt64ArrayTransformer) [][]int64 {
	l := len(m)
	acc := make([][]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayMapUintArray(m []byte, f ByteToUintArrayTransformer) [][]uint {
	l := len(m)
	acc := make([][]uint, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayMapUint8Array(m []byte, f ByteToUint8ArrayTransformer) [][]uint8 {
	l := len(m)
	acc := make([][]uint8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayMapUint16Array(m []byte, f ByteToUint16ArrayTransformer) [][]uint16 {
	l := len(m)
	acc := make([][]uint16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayMapUint32Array(m []byte, f ByteToUint32ArrayTransformer) [][]uint32 {
	l := len(m)
	acc := make([][]uint32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayMapUint64Array(m []byte, f ByteToUint64ArrayTransformer) [][]uint64 {
	l := len(m)
	acc := make([][]uint64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayMapUintptrArray(m []byte, f ByteToUintptrArrayTransformer) [][]uintptr {
	l := len(m)
	acc := make([][]uintptr, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayMapByteArray(m []byte, f ByteToByteArrayTransformer) [][]byte {
	l := len(m)
	acc := make([][]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayMapRuneArray(m []byte, f ByteToRuneArrayTransformer) [][]rune {
	l := len(m)
	acc := make([][]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayMapFloat32Array(m []byte, f ByteToFloat32ArrayTransformer) [][]float32 {
	l := len(m)
	acc := make([][]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayMapFloat64Array(m []byte, f ByteToFloat64ArrayTransformer) [][]float64 {
	l := len(m)
	acc := make([][]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayMapComplex64Array(m []byte, f ByteToComplex64ArrayTransformer) [][]complex64 {
	l := len(m)
	acc := make([][]complex64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayMapComplex128Array(m []byte, f ByteToComplex128ArrayTransformer) [][]complex128 {
	l := len(m)
	acc := make([][]complex128, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayMapAnyArray(m []byte, f ByteToAnyArrayTransformer) [][]Any {
	l := len(m)
	acc := make([][]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayMapBoolOption(m []byte, f ByteToBoolOptionTransformer) []BoolOption {
	l := len(m)
	acc := make([]BoolOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayMapStringOption(m []byte, f ByteToStringOptionTransformer) []StringOption {
	l := len(m)
	acc := make([]StringOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayMapIntOption(m []byte, f ByteToIntOptionTransformer) []IntOption {
	l := len(m)
	acc := make([]IntOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayMapInt8Option(m []byte, f ByteToInt8OptionTransformer) []Int8Option {
	l := len(m)
	acc := make([]Int8Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayMapInt16Option(m []byte, f ByteToInt16OptionTransformer) []Int16Option {
	l := len(m)
	acc := make([]Int16Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayMapInt32Option(m []byte, f ByteToInt32OptionTransformer) []Int32Option {
	l := len(m)
	acc := make([]Int32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayMapInt64Option(m []byte, f ByteToInt64OptionTransformer) []Int64Option {
	l := len(m)
	acc := make([]Int64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayMapUintOption(m []byte, f ByteToUintOptionTransformer) []UintOption {
	l := len(m)
	acc := make([]UintOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayMapUint8Option(m []byte, f ByteToUint8OptionTransformer) []Uint8Option {
	l := len(m)
	acc := make([]Uint8Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayMapUint16Option(m []byte, f ByteToUint16OptionTransformer) []Uint16Option {
	l := len(m)
	acc := make([]Uint16Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayMapUint32Option(m []byte, f ByteToUint32OptionTransformer) []Uint32Option {
	l := len(m)
	acc := make([]Uint32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayMapUint64Option(m []byte, f ByteToUint64OptionTransformer) []Uint64Option {
	l := len(m)
	acc := make([]Uint64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayMapUintptrOption(m []byte, f ByteToUintptrOptionTransformer) []UintptrOption {
	l := len(m)
	acc := make([]UintptrOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayMapByteOption(m []byte, f ByteToByteOptionTransformer) []ByteOption {
	l := len(m)
	acc := make([]ByteOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayMapRuneOption(m []byte, f ByteToRuneOptionTransformer) []RuneOption {
	l := len(m)
	acc := make([]RuneOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayMapFloat32Option(m []byte, f ByteToFloat32OptionTransformer) []Float32Option {
	l := len(m)
	acc := make([]Float32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayMapFloat64Option(m []byte, f ByteToFloat64OptionTransformer) []Float64Option {
	l := len(m)
	acc := make([]Float64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayMapComplex64Option(m []byte, f ByteToComplex64OptionTransformer) []Complex64Option {
	l := len(m)
	acc := make([]Complex64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayMapComplex128Option(m []byte, f ByteToComplex128OptionTransformer) []Complex128Option {
	l := len(m)
	acc := make([]Complex128Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayMapAnyOption(m []byte, f ByteToAnyOptionTransformer) []AnyOption {
	l := len(m)
	acc := make([]AnyOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayMapBool(m []rune, f RuneToBoolTransformer) []bool {
	l := len(m)
	acc := make([]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayMapString(m []rune, f RuneToStringTransformer) []string {
	l := len(m)
	acc := make([]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayMapInt(m []rune, f RuneToIntTransformer) []int {
	l := len(m)
	acc := make([]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayMapInt8(m []rune, f RuneToInt8Transformer) []int8 {
	l := len(m)
	acc := make([]int8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayMapInt16(m []rune, f RuneToInt16Transformer) []int16 {
	l := len(m)
	acc := make([]int16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayMapInt32(m []rune, f RuneToInt32Transformer) []int32 {
	l := len(m)
	acc := make([]int32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayMapInt64(m []rune, f RuneToInt64Transformer) []int64 {
	l := len(m)
	acc := make([]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayMapUint(m []rune, f RuneToUintTransformer) []uint {
	l := len(m)
	acc := make([]uint, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayMapUint8(m []rune, f RuneToUint8Transformer) []uint8 {
	l := len(m)
	acc := make([]uint8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayMapUint16(m []rune, f RuneToUint16Transformer) []uint16 {
	l := len(m)
	acc := make([]uint16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayMapUint32(m []rune, f RuneToUint32Transformer) []uint32 {
	l := len(m)
	acc := make([]uint32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayMapUint64(m []rune, f RuneToUint64Transformer) []uint64 {
	l := len(m)
	acc := make([]uint64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayMapUintptr(m []rune, f RuneToUintptrTransformer) []uintptr {
	l := len(m)
	acc := make([]uintptr, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayMapByte(m []rune, f RuneToByteTransformer) []byte {
	l := len(m)
	acc := make([]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayMapRune(m []rune, f RuneToRuneTransformer) []rune {
	l := len(m)
	acc := make([]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayMapFloat32(m []rune, f RuneToFloat32Transformer) []float32 {
	l := len(m)
	acc := make([]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayMapFloat64(m []rune, f RuneToFloat64Transformer) []float64 {
	l := len(m)
	acc := make([]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayMapComplex64(m []rune, f RuneToComplex64Transformer) []complex64 {
	l := len(m)
	acc := make([]complex64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayMapComplex128(m []rune, f RuneToComplex128Transformer) []complex128 {
	l := len(m)
	acc := make([]complex128, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayMapAny(m []rune, f RuneToAnyTransformer) []Any {
	l := len(m)
	acc := make([]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayMapBoolArray(m []rune, f RuneToBoolArrayTransformer) [][]bool {
	l := len(m)
	acc := make([][]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayMapStringArray(m []rune, f RuneToStringArrayTransformer) [][]string {
	l := len(m)
	acc := make([][]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayMapIntArray(m []rune, f RuneToIntArrayTransformer) [][]int {
	l := len(m)
	acc := make([][]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayMapInt8Array(m []rune, f RuneToInt8ArrayTransformer) [][]int8 {
	l := len(m)
	acc := make([][]int8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayMapInt16Array(m []rune, f RuneToInt16ArrayTransformer) [][]int16 {
	l := len(m)
	acc := make([][]int16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayMapInt32Array(m []rune, f RuneToInt32ArrayTransformer) [][]int32 {
	l := len(m)
	acc := make([][]int32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayMapInt64Array(m []rune, f RuneToInt64ArrayTransformer) [][]int64 {
	l := len(m)
	acc := make([][]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayMapUintArray(m []rune, f RuneToUintArrayTransformer) [][]uint {
	l := len(m)
	acc := make([][]uint, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayMapUint8Array(m []rune, f RuneToUint8ArrayTransformer) [][]uint8 {
	l := len(m)
	acc := make([][]uint8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayMapUint16Array(m []rune, f RuneToUint16ArrayTransformer) [][]uint16 {
	l := len(m)
	acc := make([][]uint16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayMapUint32Array(m []rune, f RuneToUint32ArrayTransformer) [][]uint32 {
	l := len(m)
	acc := make([][]uint32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayMapUint64Array(m []rune, f RuneToUint64ArrayTransformer) [][]uint64 {
	l := len(m)
	acc := make([][]uint64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayMapUintptrArray(m []rune, f RuneToUintptrArrayTransformer) [][]uintptr {
	l := len(m)
	acc := make([][]uintptr, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayMapByteArray(m []rune, f RuneToByteArrayTransformer) [][]byte {
	l := len(m)
	acc := make([][]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayMapRuneArray(m []rune, f RuneToRuneArrayTransformer) [][]rune {
	l := len(m)
	acc := make([][]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayMapFloat32Array(m []rune, f RuneToFloat32ArrayTransformer) [][]float32 {
	l := len(m)
	acc := make([][]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayMapFloat64Array(m []rune, f RuneToFloat64ArrayTransformer) [][]float64 {
	l := len(m)
	acc := make([][]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayMapComplex64Array(m []rune, f RuneToComplex64ArrayTransformer) [][]complex64 {
	l := len(m)
	acc := make([][]complex64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayMapComplex128Array(m []rune, f RuneToComplex128ArrayTransformer) [][]complex128 {
	l := len(m)
	acc := make([][]complex128, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayMapAnyArray(m []rune, f RuneToAnyArrayTransformer) [][]Any {
	l := len(m)
	acc := make([][]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayMapBoolOption(m []rune, f RuneToBoolOptionTransformer) []BoolOption {
	l := len(m)
	acc := make([]BoolOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayMapStringOption(m []rune, f RuneToStringOptionTransformer) []StringOption {
	l := len(m)
	acc := make([]StringOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayMapIntOption(m []rune, f RuneToIntOptionTransformer) []IntOption {
	l := len(m)
	acc := make([]IntOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayMapInt8Option(m []rune, f RuneToInt8OptionTransformer) []Int8Option {
	l := len(m)
	acc := make([]Int8Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayMapInt16Option(m []rune, f RuneToInt16OptionTransformer) []Int16Option {
	l := len(m)
	acc := make([]Int16Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayMapInt32Option(m []rune, f RuneToInt32OptionTransformer) []Int32Option {
	l := len(m)
	acc := make([]Int32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayMapInt64Option(m []rune, f RuneToInt64OptionTransformer) []Int64Option {
	l := len(m)
	acc := make([]Int64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayMapUintOption(m []rune, f RuneToUintOptionTransformer) []UintOption {
	l := len(m)
	acc := make([]UintOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayMapUint8Option(m []rune, f RuneToUint8OptionTransformer) []Uint8Option {
	l := len(m)
	acc := make([]Uint8Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayMapUint16Option(m []rune, f RuneToUint16OptionTransformer) []Uint16Option {
	l := len(m)
	acc := make([]Uint16Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayMapUint32Option(m []rune, f RuneToUint32OptionTransformer) []Uint32Option {
	l := len(m)
	acc := make([]Uint32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayMapUint64Option(m []rune, f RuneToUint64OptionTransformer) []Uint64Option {
	l := len(m)
	acc := make([]Uint64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayMapUintptrOption(m []rune, f RuneToUintptrOptionTransformer) []UintptrOption {
	l := len(m)
	acc := make([]UintptrOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayMapByteOption(m []rune, f RuneToByteOptionTransformer) []ByteOption {
	l := len(m)
	acc := make([]ByteOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayMapRuneOption(m []rune, f RuneToRuneOptionTransformer) []RuneOption {
	l := len(m)
	acc := make([]RuneOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayMapFloat32Option(m []rune, f RuneToFloat32OptionTransformer) []Float32Option {
	l := len(m)
	acc := make([]Float32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayMapFloat64Option(m []rune, f RuneToFloat64OptionTransformer) []Float64Option {
	l := len(m)
	acc := make([]Float64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayMapComplex64Option(m []rune, f RuneToComplex64OptionTransformer) []Complex64Option {
	l := len(m)
	acc := make([]Complex64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayMapComplex128Option(m []rune, f RuneToComplex128OptionTransformer) []Complex128Option {
	l := len(m)
	acc := make([]Complex128Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayMapAnyOption(m []rune, f RuneToAnyOptionTransformer) []AnyOption {
	l := len(m)
	acc := make([]AnyOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayMapBool(m []float32, f Float32ToBoolTransformer) []bool {
	l := len(m)
	acc := make([]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayMapString(m []float32, f Float32ToStringTransformer) []string {
	l := len(m)
	acc := make([]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayMapInt(m []float32, f Float32ToIntTransformer) []int {
	l := len(m)
	acc := make([]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayMapInt8(m []float32, f Float32ToInt8Transformer) []int8 {
	l := len(m)
	acc := make([]int8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayMapInt16(m []float32, f Float32ToInt16Transformer) []int16 {
	l := len(m)
	acc := make([]int16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayMapInt32(m []float32, f Float32ToInt32Transformer) []int32 {
	l := len(m)
	acc := make([]int32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayMapInt64(m []float32, f Float32ToInt64Transformer) []int64 {
	l := len(m)
	acc := make([]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayMapUint(m []float32, f Float32ToUintTransformer) []uint {
	l := len(m)
	acc := make([]uint, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayMapUint8(m []float32, f Float32ToUint8Transformer) []uint8 {
	l := len(m)
	acc := make([]uint8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayMapUint16(m []float32, f Float32ToUint16Transformer) []uint16 {
	l := len(m)
	acc := make([]uint16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayMapUint32(m []float32, f Float32ToUint32Transformer) []uint32 {
	l := len(m)
	acc := make([]uint32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayMapUint64(m []float32, f Float32ToUint64Transformer) []uint64 {
	l := len(m)
	acc := make([]uint64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayMapUintptr(m []float32, f Float32ToUintptrTransformer) []uintptr {
	l := len(m)
	acc := make([]uintptr, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayMapByte(m []float32, f Float32ToByteTransformer) []byte {
	l := len(m)
	acc := make([]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayMapRune(m []float32, f Float32ToRuneTransformer) []rune {
	l := len(m)
	acc := make([]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayMapFloat32(m []float32, f Float32ToFloat32Transformer) []float32 {
	l := len(m)
	acc := make([]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayMapFloat64(m []float32, f Float32ToFloat64Transformer) []float64 {
	l := len(m)
	acc := make([]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayMapComplex64(m []float32, f Float32ToComplex64Transformer) []complex64 {
	l := len(m)
	acc := make([]complex64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayMapComplex128(m []float32, f Float32ToComplex128Transformer) []complex128 {
	l := len(m)
	acc := make([]complex128, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayMapAny(m []float32, f Float32ToAnyTransformer) []Any {
	l := len(m)
	acc := make([]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayMapBoolArray(m []float32, f Float32ToBoolArrayTransformer) [][]bool {
	l := len(m)
	acc := make([][]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayMapStringArray(m []float32, f Float32ToStringArrayTransformer) [][]string {
	l := len(m)
	acc := make([][]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayMapIntArray(m []float32, f Float32ToIntArrayTransformer) [][]int {
	l := len(m)
	acc := make([][]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayMapInt8Array(m []float32, f Float32ToInt8ArrayTransformer) [][]int8 {
	l := len(m)
	acc := make([][]int8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayMapInt16Array(m []float32, f Float32ToInt16ArrayTransformer) [][]int16 {
	l := len(m)
	acc := make([][]int16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayMapInt32Array(m []float32, f Float32ToInt32ArrayTransformer) [][]int32 {
	l := len(m)
	acc := make([][]int32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayMapInt64Array(m []float32, f Float32ToInt64ArrayTransformer) [][]int64 {
	l := len(m)
	acc := make([][]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayMapUintArray(m []float32, f Float32ToUintArrayTransformer) [][]uint {
	l := len(m)
	acc := make([][]uint, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayMapUint8Array(m []float32, f Float32ToUint8ArrayTransformer) [][]uint8 {
	l := len(m)
	acc := make([][]uint8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayMapUint16Array(m []float32, f Float32ToUint16ArrayTransformer) [][]uint16 {
	l := len(m)
	acc := make([][]uint16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayMapUint32Array(m []float32, f Float32ToUint32ArrayTransformer) [][]uint32 {
	l := len(m)
	acc := make([][]uint32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayMapUint64Array(m []float32, f Float32ToUint64ArrayTransformer) [][]uint64 {
	l := len(m)
	acc := make([][]uint64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayMapUintptrArray(m []float32, f Float32ToUintptrArrayTransformer) [][]uintptr {
	l := len(m)
	acc := make([][]uintptr, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayMapByteArray(m []float32, f Float32ToByteArrayTransformer) [][]byte {
	l := len(m)
	acc := make([][]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayMapRuneArray(m []float32, f Float32ToRuneArrayTransformer) [][]rune {
	l := len(m)
	acc := make([][]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayMapFloat32Array(m []float32, f Float32ToFloat32ArrayTransformer) [][]float32 {
	l := len(m)
	acc := make([][]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayMapFloat64Array(m []float32, f Float32ToFloat64ArrayTransformer) [][]float64 {
	l := len(m)
	acc := make([][]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayMapComplex64Array(m []float32, f Float32ToComplex64ArrayTransformer) [][]complex64 {
	l := len(m)
	acc := make([][]complex64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayMapComplex128Array(m []float32, f Float32ToComplex128ArrayTransformer) [][]complex128 {
	l := len(m)
	acc := make([][]complex128, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayMapAnyArray(m []float32, f Float32ToAnyArrayTransformer) [][]Any {
	l := len(m)
	acc := make([][]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayMapBoolOption(m []float32, f Float32ToBoolOptionTransformer) []BoolOption {
	l := len(m)
	acc := make([]BoolOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayMapStringOption(m []float32, f Float32ToStringOptionTransformer) []StringOption {
	l := len(m)
	acc := make([]StringOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayMapIntOption(m []float32, f Float32ToIntOptionTransformer) []IntOption {
	l := len(m)
	acc := make([]IntOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayMapInt8Option(m []float32, f Float32ToInt8OptionTransformer) []Int8Option {
	l := len(m)
	acc := make([]Int8Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayMapInt16Option(m []float32, f Float32ToInt16OptionTransformer) []Int16Option {
	l := len(m)
	acc := make([]Int16Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayMapInt32Option(m []float32, f Float32ToInt32OptionTransformer) []Int32Option {
	l := len(m)
	acc := make([]Int32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayMapInt64Option(m []float32, f Float32ToInt64OptionTransformer) []Int64Option {
	l := len(m)
	acc := make([]Int64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayMapUintOption(m []float32, f Float32ToUintOptionTransformer) []UintOption {
	l := len(m)
	acc := make([]UintOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayMapUint8Option(m []float32, f Float32ToUint8OptionTransformer) []Uint8Option {
	l := len(m)
	acc := make([]Uint8Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayMapUint16Option(m []float32, f Float32ToUint16OptionTransformer) []Uint16Option {
	l := len(m)
	acc := make([]Uint16Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayMapUint32Option(m []float32, f Float32ToUint32OptionTransformer) []Uint32Option {
	l := len(m)
	acc := make([]Uint32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayMapUint64Option(m []float32, f Float32ToUint64OptionTransformer) []Uint64Option {
	l := len(m)
	acc := make([]Uint64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayMapUintptrOption(m []float32, f Float32ToUintptrOptionTransformer) []UintptrOption {
	l := len(m)
	acc := make([]UintptrOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayMapByteOption(m []float32, f Float32ToByteOptionTransformer) []ByteOption {
	l := len(m)
	acc := make([]ByteOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayMapRuneOption(m []float32, f Float32ToRuneOptionTransformer) []RuneOption {
	l := len(m)
	acc := make([]RuneOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayMapFloat32Option(m []float32, f Float32ToFloat32OptionTransformer) []Float32Option {
	l := len(m)
	acc := make([]Float32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayMapFloat64Option(m []float32, f Float32ToFloat64OptionTransformer) []Float64Option {
	l := len(m)
	acc := make([]Float64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayMapComplex64Option(m []float32, f Float32ToComplex64OptionTransformer) []Complex64Option {
	l := len(m)
	acc := make([]Complex64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayMapComplex128Option(m []float32, f Float32ToComplex128OptionTransformer) []Complex128Option {
	l := len(m)
	acc := make([]Complex128Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayMapAnyOption(m []float32, f Float32ToAnyOptionTransformer) []AnyOption {
	l := len(m)
	acc := make([]AnyOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayMapBool(m []float64, f Float64ToBoolTransformer) []bool {
	l := len(m)
	acc := make([]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayMapString(m []float64, f Float64ToStringTransformer) []string {
	l := len(m)
	acc := make([]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayMapInt(m []float64, f Float64ToIntTransformer) []int {
	l := len(m)
	acc := make([]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayMapInt8(m []float64, f Float64ToInt8Transformer) []int8 {
	l := len(m)
	acc := make([]int8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayMapInt16(m []float64, f Float64ToInt16Transformer) []int16 {
	l := len(m)
	acc := make([]int16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayMapInt32(m []float64, f Float64ToInt32Transformer) []int32 {
	l := len(m)
	acc := make([]int32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayMapInt64(m []float64, f Float64ToInt64Transformer) []int64 {
	l := len(m)
	acc := make([]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayMapUint(m []float64, f Float64ToUintTransformer) []uint {
	l := len(m)
	acc := make([]uint, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayMapUint8(m []float64, f Float64ToUint8Transformer) []uint8 {
	l := len(m)
	acc := make([]uint8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayMapUint16(m []float64, f Float64ToUint16Transformer) []uint16 {
	l := len(m)
	acc := make([]uint16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayMapUint32(m []float64, f Float64ToUint32Transformer) []uint32 {
	l := len(m)
	acc := make([]uint32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayMapUint64(m []float64, f Float64ToUint64Transformer) []uint64 {
	l := len(m)
	acc := make([]uint64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayMapUintptr(m []float64, f Float64ToUintptrTransformer) []uintptr {
	l := len(m)
	acc := make([]uintptr, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayMapByte(m []float64, f Float64ToByteTransformer) []byte {
	l := len(m)
	acc := make([]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayMapRune(m []float64, f Float64ToRuneTransformer) []rune {
	l := len(m)
	acc := make([]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayMapFloat32(m []float64, f Float64ToFloat32Transformer) []float32 {
	l := len(m)
	acc := make([]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayMapFloat64(m []float64, f Float64ToFloat64Transformer) []float64 {
	l := len(m)
	acc := make([]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayMapComplex64(m []float64, f Float64ToComplex64Transformer) []complex64 {
	l := len(m)
	acc := make([]complex64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayMapComplex128(m []float64, f Float64ToComplex128Transformer) []complex128 {
	l := len(m)
	acc := make([]complex128, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayMapAny(m []float64, f Float64ToAnyTransformer) []Any {
	l := len(m)
	acc := make([]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayMapBoolArray(m []float64, f Float64ToBoolArrayTransformer) [][]bool {
	l := len(m)
	acc := make([][]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayMapStringArray(m []float64, f Float64ToStringArrayTransformer) [][]string {
	l := len(m)
	acc := make([][]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayMapIntArray(m []float64, f Float64ToIntArrayTransformer) [][]int {
	l := len(m)
	acc := make([][]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayMapInt8Array(m []float64, f Float64ToInt8ArrayTransformer) [][]int8 {
	l := len(m)
	acc := make([][]int8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayMapInt16Array(m []float64, f Float64ToInt16ArrayTransformer) [][]int16 {
	l := len(m)
	acc := make([][]int16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayMapInt32Array(m []float64, f Float64ToInt32ArrayTransformer) [][]int32 {
	l := len(m)
	acc := make([][]int32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayMapInt64Array(m []float64, f Float64ToInt64ArrayTransformer) [][]int64 {
	l := len(m)
	acc := make([][]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayMapUintArray(m []float64, f Float64ToUintArrayTransformer) [][]uint {
	l := len(m)
	acc := make([][]uint, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayMapUint8Array(m []float64, f Float64ToUint8ArrayTransformer) [][]uint8 {
	l := len(m)
	acc := make([][]uint8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayMapUint16Array(m []float64, f Float64ToUint16ArrayTransformer) [][]uint16 {
	l := len(m)
	acc := make([][]uint16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayMapUint32Array(m []float64, f Float64ToUint32ArrayTransformer) [][]uint32 {
	l := len(m)
	acc := make([][]uint32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayMapUint64Array(m []float64, f Float64ToUint64ArrayTransformer) [][]uint64 {
	l := len(m)
	acc := make([][]uint64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayMapUintptrArray(m []float64, f Float64ToUintptrArrayTransformer) [][]uintptr {
	l := len(m)
	acc := make([][]uintptr, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayMapByteArray(m []float64, f Float64ToByteArrayTransformer) [][]byte {
	l := len(m)
	acc := make([][]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayMapRuneArray(m []float64, f Float64ToRuneArrayTransformer) [][]rune {
	l := len(m)
	acc := make([][]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayMapFloat32Array(m []float64, f Float64ToFloat32ArrayTransformer) [][]float32 {
	l := len(m)
	acc := make([][]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayMapFloat64Array(m []float64, f Float64ToFloat64ArrayTransformer) [][]float64 {
	l := len(m)
	acc := make([][]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayMapComplex64Array(m []float64, f Float64ToComplex64ArrayTransformer) [][]complex64 {
	l := len(m)
	acc := make([][]complex64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayMapComplex128Array(m []float64, f Float64ToComplex128ArrayTransformer) [][]complex128 {
	l := len(m)
	acc := make([][]complex128, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayMapAnyArray(m []float64, f Float64ToAnyArrayTransformer) [][]Any {
	l := len(m)
	acc := make([][]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayMapBoolOption(m []float64, f Float64ToBoolOptionTransformer) []BoolOption {
	l := len(m)
	acc := make([]BoolOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayMapStringOption(m []float64, f Float64ToStringOptionTransformer) []StringOption {
	l := len(m)
	acc := make([]StringOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayMapIntOption(m []float64, f Float64ToIntOptionTransformer) []IntOption {
	l := len(m)
	acc := make([]IntOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayMapInt8Option(m []float64, f Float64ToInt8OptionTransformer) []Int8Option {
	l := len(m)
	acc := make([]Int8Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayMapInt16Option(m []float64, f Float64ToInt16OptionTransformer) []Int16Option {
	l := len(m)
	acc := make([]Int16Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayMapInt32Option(m []float64, f Float64ToInt32OptionTransformer) []Int32Option {
	l := len(m)
	acc := make([]Int32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayMapInt64Option(m []float64, f Float64ToInt64OptionTransformer) []Int64Option {
	l := len(m)
	acc := make([]Int64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayMapUintOption(m []float64, f Float64ToUintOptionTransformer) []UintOption {
	l := len(m)
	acc := make([]UintOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayMapUint8Option(m []float64, f Float64ToUint8OptionTransformer) []Uint8Option {
	l := len(m)
	acc := make([]Uint8Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayMapUint16Option(m []float64, f Float64ToUint16OptionTransformer) []Uint16Option {
	l := len(m)
	acc := make([]Uint16Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayMapUint32Option(m []float64, f Float64ToUint32OptionTransformer) []Uint32Option {
	l := len(m)
	acc := make([]Uint32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayMapUint64Option(m []float64, f Float64ToUint64OptionTransformer) []Uint64Option {
	l := len(m)
	acc := make([]Uint64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayMapUintptrOption(m []float64, f Float64ToUintptrOptionTransformer) []UintptrOption {
	l := len(m)
	acc := make([]UintptrOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayMapByteOption(m []float64, f Float64ToByteOptionTransformer) []ByteOption {
	l := len(m)
	acc := make([]ByteOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayMapRuneOption(m []float64, f Float64ToRuneOptionTransformer) []RuneOption {
	l := len(m)
	acc := make([]RuneOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayMapFloat32Option(m []float64, f Float64ToFloat32OptionTransformer) []Float32Option {
	l := len(m)
	acc := make([]Float32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayMapFloat64Option(m []float64, f Float64ToFloat64OptionTransformer) []Float64Option {
	l := len(m)
	acc := make([]Float64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayMapComplex64Option(m []float64, f Float64ToComplex64OptionTransformer) []Complex64Option {
	l := len(m)
	acc := make([]Complex64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayMapComplex128Option(m []float64, f Float64ToComplex128OptionTransformer) []Complex128Option {
	l := len(m)
	acc := make([]Complex128Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayMapAnyOption(m []float64, f Float64ToAnyOptionTransformer) []AnyOption {
	l := len(m)
	acc := make([]AnyOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64ArrayMapBool(m []complex64, f Complex64ToBoolTransformer) []bool {
	l := len(m)
	acc := make([]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64ArrayMapString(m []complex64, f Complex64ToStringTransformer) []string {
	l := len(m)
	acc := make([]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64ArrayMapInt(m []complex64, f Complex64ToIntTransformer) []int {
	l := len(m)
	acc := make([]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64ArrayMapInt8(m []complex64, f Complex64ToInt8Transformer) []int8 {
	l := len(m)
	acc := make([]int8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64ArrayMapInt16(m []complex64, f Complex64ToInt16Transformer) []int16 {
	l := len(m)
	acc := make([]int16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64ArrayMapInt32(m []complex64, f Complex64ToInt32Transformer) []int32 {
	l := len(m)
	acc := make([]int32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64ArrayMapInt64(m []complex64, f Complex64ToInt64Transformer) []int64 {
	l := len(m)
	acc := make([]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64ArrayMapUint(m []complex64, f Complex64ToUintTransformer) []uint {
	l := len(m)
	acc := make([]uint, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64ArrayMapUint8(m []complex64, f Complex64ToUint8Transformer) []uint8 {
	l := len(m)
	acc := make([]uint8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64ArrayMapUint16(m []complex64, f Complex64ToUint16Transformer) []uint16 {
	l := len(m)
	acc := make([]uint16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64ArrayMapUint32(m []complex64, f Complex64ToUint32Transformer) []uint32 {
	l := len(m)
	acc := make([]uint32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64ArrayMapUint64(m []complex64, f Complex64ToUint64Transformer) []uint64 {
	l := len(m)
	acc := make([]uint64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64ArrayMapUintptr(m []complex64, f Complex64ToUintptrTransformer) []uintptr {
	l := len(m)
	acc := make([]uintptr, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64ArrayMapByte(m []complex64, f Complex64ToByteTransformer) []byte {
	l := len(m)
	acc := make([]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64ArrayMapRune(m []complex64, f Complex64ToRuneTransformer) []rune {
	l := len(m)
	acc := make([]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64ArrayMapFloat32(m []complex64, f Complex64ToFloat32Transformer) []float32 {
	l := len(m)
	acc := make([]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64ArrayMapFloat64(m []complex64, f Complex64ToFloat64Transformer) []float64 {
	l := len(m)
	acc := make([]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64ArrayMapComplex64(m []complex64, f Complex64ToComplex64Transformer) []complex64 {
	l := len(m)
	acc := make([]complex64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64ArrayMapComplex128(m []complex64, f Complex64ToComplex128Transformer) []complex128 {
	l := len(m)
	acc := make([]complex128, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64ArrayMapAny(m []complex64, f Complex64ToAnyTransformer) []Any {
	l := len(m)
	acc := make([]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64ArrayMapBoolArray(m []complex64, f Complex64ToBoolArrayTransformer) [][]bool {
	l := len(m)
	acc := make([][]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64ArrayMapStringArray(m []complex64, f Complex64ToStringArrayTransformer) [][]string {
	l := len(m)
	acc := make([][]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64ArrayMapIntArray(m []complex64, f Complex64ToIntArrayTransformer) [][]int {
	l := len(m)
	acc := make([][]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64ArrayMapInt8Array(m []complex64, f Complex64ToInt8ArrayTransformer) [][]int8 {
	l := len(m)
	acc := make([][]int8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64ArrayMapInt16Array(m []complex64, f Complex64ToInt16ArrayTransformer) [][]int16 {
	l := len(m)
	acc := make([][]int16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64ArrayMapInt32Array(m []complex64, f Complex64ToInt32ArrayTransformer) [][]int32 {
	l := len(m)
	acc := make([][]int32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64ArrayMapInt64Array(m []complex64, f Complex64ToInt64ArrayTransformer) [][]int64 {
	l := len(m)
	acc := make([][]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64ArrayMapUintArray(m []complex64, f Complex64ToUintArrayTransformer) [][]uint {
	l := len(m)
	acc := make([][]uint, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64ArrayMapUint8Array(m []complex64, f Complex64ToUint8ArrayTransformer) [][]uint8 {
	l := len(m)
	acc := make([][]uint8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64ArrayMapUint16Array(m []complex64, f Complex64ToUint16ArrayTransformer) [][]uint16 {
	l := len(m)
	acc := make([][]uint16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64ArrayMapUint32Array(m []complex64, f Complex64ToUint32ArrayTransformer) [][]uint32 {
	l := len(m)
	acc := make([][]uint32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64ArrayMapUint64Array(m []complex64, f Complex64ToUint64ArrayTransformer) [][]uint64 {
	l := len(m)
	acc := make([][]uint64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64ArrayMapUintptrArray(m []complex64, f Complex64ToUintptrArrayTransformer) [][]uintptr {
	l := len(m)
	acc := make([][]uintptr, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64ArrayMapByteArray(m []complex64, f Complex64ToByteArrayTransformer) [][]byte {
	l := len(m)
	acc := make([][]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64ArrayMapRuneArray(m []complex64, f Complex64ToRuneArrayTransformer) [][]rune {
	l := len(m)
	acc := make([][]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64ArrayMapFloat32Array(m []complex64, f Complex64ToFloat32ArrayTransformer) [][]float32 {
	l := len(m)
	acc := make([][]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64ArrayMapFloat64Array(m []complex64, f Complex64ToFloat64ArrayTransformer) [][]float64 {
	l := len(m)
	acc := make([][]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64ArrayMapComplex64Array(m []complex64, f Complex64ToComplex64ArrayTransformer) [][]complex64 {
	l := len(m)
	acc := make([][]complex64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64ArrayMapComplex128Array(m []complex64, f Complex64ToComplex128ArrayTransformer) [][]complex128 {
	l := len(m)
	acc := make([][]complex128, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64ArrayMapAnyArray(m []complex64, f Complex64ToAnyArrayTransformer) [][]Any {
	l := len(m)
	acc := make([][]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64ArrayMapBoolOption(m []complex64, f Complex64ToBoolOptionTransformer) []BoolOption {
	l := len(m)
	acc := make([]BoolOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64ArrayMapStringOption(m []complex64, f Complex64ToStringOptionTransformer) []StringOption {
	l := len(m)
	acc := make([]StringOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64ArrayMapIntOption(m []complex64, f Complex64ToIntOptionTransformer) []IntOption {
	l := len(m)
	acc := make([]IntOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64ArrayMapInt8Option(m []complex64, f Complex64ToInt8OptionTransformer) []Int8Option {
	l := len(m)
	acc := make([]Int8Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64ArrayMapInt16Option(m []complex64, f Complex64ToInt16OptionTransformer) []Int16Option {
	l := len(m)
	acc := make([]Int16Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64ArrayMapInt32Option(m []complex64, f Complex64ToInt32OptionTransformer) []Int32Option {
	l := len(m)
	acc := make([]Int32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64ArrayMapInt64Option(m []complex64, f Complex64ToInt64OptionTransformer) []Int64Option {
	l := len(m)
	acc := make([]Int64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64ArrayMapUintOption(m []complex64, f Complex64ToUintOptionTransformer) []UintOption {
	l := len(m)
	acc := make([]UintOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64ArrayMapUint8Option(m []complex64, f Complex64ToUint8OptionTransformer) []Uint8Option {
	l := len(m)
	acc := make([]Uint8Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64ArrayMapUint16Option(m []complex64, f Complex64ToUint16OptionTransformer) []Uint16Option {
	l := len(m)
	acc := make([]Uint16Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64ArrayMapUint32Option(m []complex64, f Complex64ToUint32OptionTransformer) []Uint32Option {
	l := len(m)
	acc := make([]Uint32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64ArrayMapUint64Option(m []complex64, f Complex64ToUint64OptionTransformer) []Uint64Option {
	l := len(m)
	acc := make([]Uint64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64ArrayMapUintptrOption(m []complex64, f Complex64ToUintptrOptionTransformer) []UintptrOption {
	l := len(m)
	acc := make([]UintptrOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64ArrayMapByteOption(m []complex64, f Complex64ToByteOptionTransformer) []ByteOption {
	l := len(m)
	acc := make([]ByteOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64ArrayMapRuneOption(m []complex64, f Complex64ToRuneOptionTransformer) []RuneOption {
	l := len(m)
	acc := make([]RuneOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64ArrayMapFloat32Option(m []complex64, f Complex64ToFloat32OptionTransformer) []Float32Option {
	l := len(m)
	acc := make([]Float32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64ArrayMapFloat64Option(m []complex64, f Complex64ToFloat64OptionTransformer) []Float64Option {
	l := len(m)
	acc := make([]Float64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64ArrayMapComplex64Option(m []complex64, f Complex64ToComplex64OptionTransformer) []Complex64Option {
	l := len(m)
	acc := make([]Complex64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64ArrayMapComplex128Option(m []complex64, f Complex64ToComplex128OptionTransformer) []Complex128Option {
	l := len(m)
	acc := make([]Complex128Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64ArrayMapAnyOption(m []complex64, f Complex64ToAnyOptionTransformer) []AnyOption {
	l := len(m)
	acc := make([]AnyOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128ArrayMapBool(m []complex128, f Complex128ToBoolTransformer) []bool {
	l := len(m)
	acc := make([]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128ArrayMapString(m []complex128, f Complex128ToStringTransformer) []string {
	l := len(m)
	acc := make([]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128ArrayMapInt(m []complex128, f Complex128ToIntTransformer) []int {
	l := len(m)
	acc := make([]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128ArrayMapInt8(m []complex128, f Complex128ToInt8Transformer) []int8 {
	l := len(m)
	acc := make([]int8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128ArrayMapInt16(m []complex128, f Complex128ToInt16Transformer) []int16 {
	l := len(m)
	acc := make([]int16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128ArrayMapInt32(m []complex128, f Complex128ToInt32Transformer) []int32 {
	l := len(m)
	acc := make([]int32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128ArrayMapInt64(m []complex128, f Complex128ToInt64Transformer) []int64 {
	l := len(m)
	acc := make([]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128ArrayMapUint(m []complex128, f Complex128ToUintTransformer) []uint {
	l := len(m)
	acc := make([]uint, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128ArrayMapUint8(m []complex128, f Complex128ToUint8Transformer) []uint8 {
	l := len(m)
	acc := make([]uint8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128ArrayMapUint16(m []complex128, f Complex128ToUint16Transformer) []uint16 {
	l := len(m)
	acc := make([]uint16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128ArrayMapUint32(m []complex128, f Complex128ToUint32Transformer) []uint32 {
	l := len(m)
	acc := make([]uint32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128ArrayMapUint64(m []complex128, f Complex128ToUint64Transformer) []uint64 {
	l := len(m)
	acc := make([]uint64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128ArrayMapUintptr(m []complex128, f Complex128ToUintptrTransformer) []uintptr {
	l := len(m)
	acc := make([]uintptr, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128ArrayMapByte(m []complex128, f Complex128ToByteTransformer) []byte {
	l := len(m)
	acc := make([]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128ArrayMapRune(m []complex128, f Complex128ToRuneTransformer) []rune {
	l := len(m)
	acc := make([]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128ArrayMapFloat32(m []complex128, f Complex128ToFloat32Transformer) []float32 {
	l := len(m)
	acc := make([]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128ArrayMapFloat64(m []complex128, f Complex128ToFloat64Transformer) []float64 {
	l := len(m)
	acc := make([]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128ArrayMapComplex64(m []complex128, f Complex128ToComplex64Transformer) []complex64 {
	l := len(m)
	acc := make([]complex64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128ArrayMapComplex128(m []complex128, f Complex128ToComplex128Transformer) []complex128 {
	l := len(m)
	acc := make([]complex128, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128ArrayMapAny(m []complex128, f Complex128ToAnyTransformer) []Any {
	l := len(m)
	acc := make([]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128ArrayMapBoolArray(m []complex128, f Complex128ToBoolArrayTransformer) [][]bool {
	l := len(m)
	acc := make([][]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128ArrayMapStringArray(m []complex128, f Complex128ToStringArrayTransformer) [][]string {
	l := len(m)
	acc := make([][]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128ArrayMapIntArray(m []complex128, f Complex128ToIntArrayTransformer) [][]int {
	l := len(m)
	acc := make([][]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128ArrayMapInt8Array(m []complex128, f Complex128ToInt8ArrayTransformer) [][]int8 {
	l := len(m)
	acc := make([][]int8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128ArrayMapInt16Array(m []complex128, f Complex128ToInt16ArrayTransformer) [][]int16 {
	l := len(m)
	acc := make([][]int16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128ArrayMapInt32Array(m []complex128, f Complex128ToInt32ArrayTransformer) [][]int32 {
	l := len(m)
	acc := make([][]int32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128ArrayMapInt64Array(m []complex128, f Complex128ToInt64ArrayTransformer) [][]int64 {
	l := len(m)
	acc := make([][]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128ArrayMapUintArray(m []complex128, f Complex128ToUintArrayTransformer) [][]uint {
	l := len(m)
	acc := make([][]uint, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128ArrayMapUint8Array(m []complex128, f Complex128ToUint8ArrayTransformer) [][]uint8 {
	l := len(m)
	acc := make([][]uint8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128ArrayMapUint16Array(m []complex128, f Complex128ToUint16ArrayTransformer) [][]uint16 {
	l := len(m)
	acc := make([][]uint16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128ArrayMapUint32Array(m []complex128, f Complex128ToUint32ArrayTransformer) [][]uint32 {
	l := len(m)
	acc := make([][]uint32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128ArrayMapUint64Array(m []complex128, f Complex128ToUint64ArrayTransformer) [][]uint64 {
	l := len(m)
	acc := make([][]uint64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128ArrayMapUintptrArray(m []complex128, f Complex128ToUintptrArrayTransformer) [][]uintptr {
	l := len(m)
	acc := make([][]uintptr, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128ArrayMapByteArray(m []complex128, f Complex128ToByteArrayTransformer) [][]byte {
	l := len(m)
	acc := make([][]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128ArrayMapRuneArray(m []complex128, f Complex128ToRuneArrayTransformer) [][]rune {
	l := len(m)
	acc := make([][]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128ArrayMapFloat32Array(m []complex128, f Complex128ToFloat32ArrayTransformer) [][]float32 {
	l := len(m)
	acc := make([][]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128ArrayMapFloat64Array(m []complex128, f Complex128ToFloat64ArrayTransformer) [][]float64 {
	l := len(m)
	acc := make([][]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128ArrayMapComplex64Array(m []complex128, f Complex128ToComplex64ArrayTransformer) [][]complex64 {
	l := len(m)
	acc := make([][]complex64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128ArrayMapComplex128Array(m []complex128, f Complex128ToComplex128ArrayTransformer) [][]complex128 {
	l := len(m)
	acc := make([][]complex128, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128ArrayMapAnyArray(m []complex128, f Complex128ToAnyArrayTransformer) [][]Any {
	l := len(m)
	acc := make([][]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128ArrayMapBoolOption(m []complex128, f Complex128ToBoolOptionTransformer) []BoolOption {
	l := len(m)
	acc := make([]BoolOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128ArrayMapStringOption(m []complex128, f Complex128ToStringOptionTransformer) []StringOption {
	l := len(m)
	acc := make([]StringOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128ArrayMapIntOption(m []complex128, f Complex128ToIntOptionTransformer) []IntOption {
	l := len(m)
	acc := make([]IntOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128ArrayMapInt8Option(m []complex128, f Complex128ToInt8OptionTransformer) []Int8Option {
	l := len(m)
	acc := make([]Int8Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128ArrayMapInt16Option(m []complex128, f Complex128ToInt16OptionTransformer) []Int16Option {
	l := len(m)
	acc := make([]Int16Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128ArrayMapInt32Option(m []complex128, f Complex128ToInt32OptionTransformer) []Int32Option {
	l := len(m)
	acc := make([]Int32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128ArrayMapInt64Option(m []complex128, f Complex128ToInt64OptionTransformer) []Int64Option {
	l := len(m)
	acc := make([]Int64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128ArrayMapUintOption(m []complex128, f Complex128ToUintOptionTransformer) []UintOption {
	l := len(m)
	acc := make([]UintOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128ArrayMapUint8Option(m []complex128, f Complex128ToUint8OptionTransformer) []Uint8Option {
	l := len(m)
	acc := make([]Uint8Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128ArrayMapUint16Option(m []complex128, f Complex128ToUint16OptionTransformer) []Uint16Option {
	l := len(m)
	acc := make([]Uint16Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128ArrayMapUint32Option(m []complex128, f Complex128ToUint32OptionTransformer) []Uint32Option {
	l := len(m)
	acc := make([]Uint32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128ArrayMapUint64Option(m []complex128, f Complex128ToUint64OptionTransformer) []Uint64Option {
	l := len(m)
	acc := make([]Uint64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128ArrayMapUintptrOption(m []complex128, f Complex128ToUintptrOptionTransformer) []UintptrOption {
	l := len(m)
	acc := make([]UintptrOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128ArrayMapByteOption(m []complex128, f Complex128ToByteOptionTransformer) []ByteOption {
	l := len(m)
	acc := make([]ByteOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128ArrayMapRuneOption(m []complex128, f Complex128ToRuneOptionTransformer) []RuneOption {
	l := len(m)
	acc := make([]RuneOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128ArrayMapFloat32Option(m []complex128, f Complex128ToFloat32OptionTransformer) []Float32Option {
	l := len(m)
	acc := make([]Float32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128ArrayMapFloat64Option(m []complex128, f Complex128ToFloat64OptionTransformer) []Float64Option {
	l := len(m)
	acc := make([]Float64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128ArrayMapComplex64Option(m []complex128, f Complex128ToComplex64OptionTransformer) []Complex64Option {
	l := len(m)
	acc := make([]Complex64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128ArrayMapComplex128Option(m []complex128, f Complex128ToComplex128OptionTransformer) []Complex128Option {
	l := len(m)
	acc := make([]Complex128Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128ArrayMapAnyOption(m []complex128, f Complex128ToAnyOptionTransformer) []AnyOption {
	l := len(m)
	acc := make([]AnyOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayMapBool(m []Any, f AnyToBoolTransformer) []bool {
	l := len(m)
	acc := make([]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayMapString(m []Any, f AnyToStringTransformer) []string {
	l := len(m)
	acc := make([]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayMapInt(m []Any, f AnyToIntTransformer) []int {
	l := len(m)
	acc := make([]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayMapInt8(m []Any, f AnyToInt8Transformer) []int8 {
	l := len(m)
	acc := make([]int8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayMapInt16(m []Any, f AnyToInt16Transformer) []int16 {
	l := len(m)
	acc := make([]int16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayMapInt32(m []Any, f AnyToInt32Transformer) []int32 {
	l := len(m)
	acc := make([]int32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayMapInt64(m []Any, f AnyToInt64Transformer) []int64 {
	l := len(m)
	acc := make([]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayMapUint(m []Any, f AnyToUintTransformer) []uint {
	l := len(m)
	acc := make([]uint, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayMapUint8(m []Any, f AnyToUint8Transformer) []uint8 {
	l := len(m)
	acc := make([]uint8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayMapUint16(m []Any, f AnyToUint16Transformer) []uint16 {
	l := len(m)
	acc := make([]uint16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayMapUint32(m []Any, f AnyToUint32Transformer) []uint32 {
	l := len(m)
	acc := make([]uint32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayMapUint64(m []Any, f AnyToUint64Transformer) []uint64 {
	l := len(m)
	acc := make([]uint64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayMapUintptr(m []Any, f AnyToUintptrTransformer) []uintptr {
	l := len(m)
	acc := make([]uintptr, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayMapByte(m []Any, f AnyToByteTransformer) []byte {
	l := len(m)
	acc := make([]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayMapRune(m []Any, f AnyToRuneTransformer) []rune {
	l := len(m)
	acc := make([]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayMapFloat32(m []Any, f AnyToFloat32Transformer) []float32 {
	l := len(m)
	acc := make([]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayMapFloat64(m []Any, f AnyToFloat64Transformer) []float64 {
	l := len(m)
	acc := make([]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayMapComplex64(m []Any, f AnyToComplex64Transformer) []complex64 {
	l := len(m)
	acc := make([]complex64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayMapComplex128(m []Any, f AnyToComplex128Transformer) []complex128 {
	l := len(m)
	acc := make([]complex128, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayMapAny(m []Any, f AnyToAnyTransformer) []Any {
	l := len(m)
	acc := make([]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayMapBoolArray(m []Any, f AnyToBoolArrayTransformer) [][]bool {
	l := len(m)
	acc := make([][]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayMapStringArray(m []Any, f AnyToStringArrayTransformer) [][]string {
	l := len(m)
	acc := make([][]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayMapIntArray(m []Any, f AnyToIntArrayTransformer) [][]int {
	l := len(m)
	acc := make([][]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayMapInt8Array(m []Any, f AnyToInt8ArrayTransformer) [][]int8 {
	l := len(m)
	acc := make([][]int8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayMapInt16Array(m []Any, f AnyToInt16ArrayTransformer) [][]int16 {
	l := len(m)
	acc := make([][]int16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayMapInt32Array(m []Any, f AnyToInt32ArrayTransformer) [][]int32 {
	l := len(m)
	acc := make([][]int32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayMapInt64Array(m []Any, f AnyToInt64ArrayTransformer) [][]int64 {
	l := len(m)
	acc := make([][]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayMapUintArray(m []Any, f AnyToUintArrayTransformer) [][]uint {
	l := len(m)
	acc := make([][]uint, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayMapUint8Array(m []Any, f AnyToUint8ArrayTransformer) [][]uint8 {
	l := len(m)
	acc := make([][]uint8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayMapUint16Array(m []Any, f AnyToUint16ArrayTransformer) [][]uint16 {
	l := len(m)
	acc := make([][]uint16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayMapUint32Array(m []Any, f AnyToUint32ArrayTransformer) [][]uint32 {
	l := len(m)
	acc := make([][]uint32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayMapUint64Array(m []Any, f AnyToUint64ArrayTransformer) [][]uint64 {
	l := len(m)
	acc := make([][]uint64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayMapUintptrArray(m []Any, f AnyToUintptrArrayTransformer) [][]uintptr {
	l := len(m)
	acc := make([][]uintptr, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayMapByteArray(m []Any, f AnyToByteArrayTransformer) [][]byte {
	l := len(m)
	acc := make([][]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayMapRuneArray(m []Any, f AnyToRuneArrayTransformer) [][]rune {
	l := len(m)
	acc := make([][]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayMapFloat32Array(m []Any, f AnyToFloat32ArrayTransformer) [][]float32 {
	l := len(m)
	acc := make([][]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayMapFloat64Array(m []Any, f AnyToFloat64ArrayTransformer) [][]float64 {
	l := len(m)
	acc := make([][]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayMapComplex64Array(m []Any, f AnyToComplex64ArrayTransformer) [][]complex64 {
	l := len(m)
	acc := make([][]complex64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayMapComplex128Array(m []Any, f AnyToComplex128ArrayTransformer) [][]complex128 {
	l := len(m)
	acc := make([][]complex128, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayMapAnyArray(m []Any, f AnyToAnyArrayTransformer) [][]Any {
	l := len(m)
	acc := make([][]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayMapBoolOption(m []Any, f AnyToBoolOptionTransformer) []BoolOption {
	l := len(m)
	acc := make([]BoolOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayMapStringOption(m []Any, f AnyToStringOptionTransformer) []StringOption {
	l := len(m)
	acc := make([]StringOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayMapIntOption(m []Any, f AnyToIntOptionTransformer) []IntOption {
	l := len(m)
	acc := make([]IntOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayMapInt8Option(m []Any, f AnyToInt8OptionTransformer) []Int8Option {
	l := len(m)
	acc := make([]Int8Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayMapInt16Option(m []Any, f AnyToInt16OptionTransformer) []Int16Option {
	l := len(m)
	acc := make([]Int16Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayMapInt32Option(m []Any, f AnyToInt32OptionTransformer) []Int32Option {
	l := len(m)
	acc := make([]Int32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayMapInt64Option(m []Any, f AnyToInt64OptionTransformer) []Int64Option {
	l := len(m)
	acc := make([]Int64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayMapUintOption(m []Any, f AnyToUintOptionTransformer) []UintOption {
	l := len(m)
	acc := make([]UintOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayMapUint8Option(m []Any, f AnyToUint8OptionTransformer) []Uint8Option {
	l := len(m)
	acc := make([]Uint8Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayMapUint16Option(m []Any, f AnyToUint16OptionTransformer) []Uint16Option {
	l := len(m)
	acc := make([]Uint16Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayMapUint32Option(m []Any, f AnyToUint32OptionTransformer) []Uint32Option {
	l := len(m)
	acc := make([]Uint32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayMapUint64Option(m []Any, f AnyToUint64OptionTransformer) []Uint64Option {
	l := len(m)
	acc := make([]Uint64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayMapUintptrOption(m []Any, f AnyToUintptrOptionTransformer) []UintptrOption {
	l := len(m)
	acc := make([]UintptrOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayMapByteOption(m []Any, f AnyToByteOptionTransformer) []ByteOption {
	l := len(m)
	acc := make([]ByteOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayMapRuneOption(m []Any, f AnyToRuneOptionTransformer) []RuneOption {
	l := len(m)
	acc := make([]RuneOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayMapFloat32Option(m []Any, f AnyToFloat32OptionTransformer) []Float32Option {
	l := len(m)
	acc := make([]Float32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayMapFloat64Option(m []Any, f AnyToFloat64OptionTransformer) []Float64Option {
	l := len(m)
	acc := make([]Float64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayMapComplex64Option(m []Any, f AnyToComplex64OptionTransformer) []Complex64Option {
	l := len(m)
	acc := make([]Complex64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayMapComplex128Option(m []Any, f AnyToComplex128OptionTransformer) []Complex128Option {
	l := len(m)
	acc := make([]Complex128Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayMapAnyOption(m []Any, f AnyToAnyOptionTransformer) []AnyOption {
	l := len(m)
	acc := make([]AnyOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayArrayMapBool(m [][]bool, f BoolArrayToBoolTransformer) []bool {
	l := len(m)
	acc := make([]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayArrayMapString(m [][]bool, f BoolArrayToStringTransformer) []string {
	l := len(m)
	acc := make([]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayArrayMapInt(m [][]bool, f BoolArrayToIntTransformer) []int {
	l := len(m)
	acc := make([]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayArrayMapInt8(m [][]bool, f BoolArrayToInt8Transformer) []int8 {
	l := len(m)
	acc := make([]int8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayArrayMapInt16(m [][]bool, f BoolArrayToInt16Transformer) []int16 {
	l := len(m)
	acc := make([]int16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayArrayMapInt32(m [][]bool, f BoolArrayToInt32Transformer) []int32 {
	l := len(m)
	acc := make([]int32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayArrayMapInt64(m [][]bool, f BoolArrayToInt64Transformer) []int64 {
	l := len(m)
	acc := make([]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayArrayMapUint(m [][]bool, f BoolArrayToUintTransformer) []uint {
	l := len(m)
	acc := make([]uint, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayArrayMapUint8(m [][]bool, f BoolArrayToUint8Transformer) []uint8 {
	l := len(m)
	acc := make([]uint8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayArrayMapUint16(m [][]bool, f BoolArrayToUint16Transformer) []uint16 {
	l := len(m)
	acc := make([]uint16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayArrayMapUint32(m [][]bool, f BoolArrayToUint32Transformer) []uint32 {
	l := len(m)
	acc := make([]uint32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayArrayMapUint64(m [][]bool, f BoolArrayToUint64Transformer) []uint64 {
	l := len(m)
	acc := make([]uint64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayArrayMapUintptr(m [][]bool, f BoolArrayToUintptrTransformer) []uintptr {
	l := len(m)
	acc := make([]uintptr, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayArrayMapByte(m [][]bool, f BoolArrayToByteTransformer) []byte {
	l := len(m)
	acc := make([]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayArrayMapRune(m [][]bool, f BoolArrayToRuneTransformer) []rune {
	l := len(m)
	acc := make([]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayArrayMapFloat32(m [][]bool, f BoolArrayToFloat32Transformer) []float32 {
	l := len(m)
	acc := make([]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayArrayMapFloat64(m [][]bool, f BoolArrayToFloat64Transformer) []float64 {
	l := len(m)
	acc := make([]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayArrayMapComplex64(m [][]bool, f BoolArrayToComplex64Transformer) []complex64 {
	l := len(m)
	acc := make([]complex64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayArrayMapComplex128(m [][]bool, f BoolArrayToComplex128Transformer) []complex128 {
	l := len(m)
	acc := make([]complex128, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayArrayMapAny(m [][]bool, f BoolArrayToAnyTransformer) []Any {
	l := len(m)
	acc := make([]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayArrayMapBoolArray(m [][]bool, f BoolArrayToBoolArrayTransformer) [][]bool {
	l := len(m)
	acc := make([][]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayArrayMapStringArray(m [][]bool, f BoolArrayToStringArrayTransformer) [][]string {
	l := len(m)
	acc := make([][]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayArrayMapIntArray(m [][]bool, f BoolArrayToIntArrayTransformer) [][]int {
	l := len(m)
	acc := make([][]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayArrayMapInt8Array(m [][]bool, f BoolArrayToInt8ArrayTransformer) [][]int8 {
	l := len(m)
	acc := make([][]int8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayArrayMapInt16Array(m [][]bool, f BoolArrayToInt16ArrayTransformer) [][]int16 {
	l := len(m)
	acc := make([][]int16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayArrayMapInt32Array(m [][]bool, f BoolArrayToInt32ArrayTransformer) [][]int32 {
	l := len(m)
	acc := make([][]int32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayArrayMapInt64Array(m [][]bool, f BoolArrayToInt64ArrayTransformer) [][]int64 {
	l := len(m)
	acc := make([][]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayArrayMapUintArray(m [][]bool, f BoolArrayToUintArrayTransformer) [][]uint {
	l := len(m)
	acc := make([][]uint, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayArrayMapUint8Array(m [][]bool, f BoolArrayToUint8ArrayTransformer) [][]uint8 {
	l := len(m)
	acc := make([][]uint8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayArrayMapUint16Array(m [][]bool, f BoolArrayToUint16ArrayTransformer) [][]uint16 {
	l := len(m)
	acc := make([][]uint16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayArrayMapUint32Array(m [][]bool, f BoolArrayToUint32ArrayTransformer) [][]uint32 {
	l := len(m)
	acc := make([][]uint32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayArrayMapUint64Array(m [][]bool, f BoolArrayToUint64ArrayTransformer) [][]uint64 {
	l := len(m)
	acc := make([][]uint64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayArrayMapUintptrArray(m [][]bool, f BoolArrayToUintptrArrayTransformer) [][]uintptr {
	l := len(m)
	acc := make([][]uintptr, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayArrayMapByteArray(m [][]bool, f BoolArrayToByteArrayTransformer) [][]byte {
	l := len(m)
	acc := make([][]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayArrayMapRuneArray(m [][]bool, f BoolArrayToRuneArrayTransformer) [][]rune {
	l := len(m)
	acc := make([][]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayArrayMapFloat32Array(m [][]bool, f BoolArrayToFloat32ArrayTransformer) [][]float32 {
	l := len(m)
	acc := make([][]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayArrayMapFloat64Array(m [][]bool, f BoolArrayToFloat64ArrayTransformer) [][]float64 {
	l := len(m)
	acc := make([][]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayArrayMapComplex64Array(m [][]bool, f BoolArrayToComplex64ArrayTransformer) [][]complex64 {
	l := len(m)
	acc := make([][]complex64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayArrayMapComplex128Array(m [][]bool, f BoolArrayToComplex128ArrayTransformer) [][]complex128 {
	l := len(m)
	acc := make([][]complex128, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayArrayMapAnyArray(m [][]bool, f BoolArrayToAnyArrayTransformer) [][]Any {
	l := len(m)
	acc := make([][]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayArrayMapBoolOption(m [][]bool, f BoolArrayToBoolOptionTransformer) []BoolOption {
	l := len(m)
	acc := make([]BoolOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayArrayMapStringOption(m [][]bool, f BoolArrayToStringOptionTransformer) []StringOption {
	l := len(m)
	acc := make([]StringOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayArrayMapIntOption(m [][]bool, f BoolArrayToIntOptionTransformer) []IntOption {
	l := len(m)
	acc := make([]IntOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayArrayMapInt8Option(m [][]bool, f BoolArrayToInt8OptionTransformer) []Int8Option {
	l := len(m)
	acc := make([]Int8Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayArrayMapInt16Option(m [][]bool, f BoolArrayToInt16OptionTransformer) []Int16Option {
	l := len(m)
	acc := make([]Int16Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayArrayMapInt32Option(m [][]bool, f BoolArrayToInt32OptionTransformer) []Int32Option {
	l := len(m)
	acc := make([]Int32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayArrayMapInt64Option(m [][]bool, f BoolArrayToInt64OptionTransformer) []Int64Option {
	l := len(m)
	acc := make([]Int64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayArrayMapUintOption(m [][]bool, f BoolArrayToUintOptionTransformer) []UintOption {
	l := len(m)
	acc := make([]UintOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayArrayMapUint8Option(m [][]bool, f BoolArrayToUint8OptionTransformer) []Uint8Option {
	l := len(m)
	acc := make([]Uint8Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayArrayMapUint16Option(m [][]bool, f BoolArrayToUint16OptionTransformer) []Uint16Option {
	l := len(m)
	acc := make([]Uint16Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayArrayMapUint32Option(m [][]bool, f BoolArrayToUint32OptionTransformer) []Uint32Option {
	l := len(m)
	acc := make([]Uint32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayArrayMapUint64Option(m [][]bool, f BoolArrayToUint64OptionTransformer) []Uint64Option {
	l := len(m)
	acc := make([]Uint64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayArrayMapUintptrOption(m [][]bool, f BoolArrayToUintptrOptionTransformer) []UintptrOption {
	l := len(m)
	acc := make([]UintptrOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayArrayMapByteOption(m [][]bool, f BoolArrayToByteOptionTransformer) []ByteOption {
	l := len(m)
	acc := make([]ByteOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayArrayMapRuneOption(m [][]bool, f BoolArrayToRuneOptionTransformer) []RuneOption {
	l := len(m)
	acc := make([]RuneOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayArrayMapFloat32Option(m [][]bool, f BoolArrayToFloat32OptionTransformer) []Float32Option {
	l := len(m)
	acc := make([]Float32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayArrayMapFloat64Option(m [][]bool, f BoolArrayToFloat64OptionTransformer) []Float64Option {
	l := len(m)
	acc := make([]Float64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayArrayMapComplex64Option(m [][]bool, f BoolArrayToComplex64OptionTransformer) []Complex64Option {
	l := len(m)
	acc := make([]Complex64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayArrayMapComplex128Option(m [][]bool, f BoolArrayToComplex128OptionTransformer) []Complex128Option {
	l := len(m)
	acc := make([]Complex128Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayArrayMapAnyOption(m [][]bool, f BoolArrayToAnyOptionTransformer) []AnyOption {
	l := len(m)
	acc := make([]AnyOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayArrayMapBool(m [][]string, f StringArrayToBoolTransformer) []bool {
	l := len(m)
	acc := make([]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayArrayMapString(m [][]string, f StringArrayToStringTransformer) []string {
	l := len(m)
	acc := make([]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayArrayMapInt(m [][]string, f StringArrayToIntTransformer) []int {
	l := len(m)
	acc := make([]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayArrayMapInt8(m [][]string, f StringArrayToInt8Transformer) []int8 {
	l := len(m)
	acc := make([]int8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayArrayMapInt16(m [][]string, f StringArrayToInt16Transformer) []int16 {
	l := len(m)
	acc := make([]int16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayArrayMapInt32(m [][]string, f StringArrayToInt32Transformer) []int32 {
	l := len(m)
	acc := make([]int32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayArrayMapInt64(m [][]string, f StringArrayToInt64Transformer) []int64 {
	l := len(m)
	acc := make([]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayArrayMapUint(m [][]string, f StringArrayToUintTransformer) []uint {
	l := len(m)
	acc := make([]uint, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayArrayMapUint8(m [][]string, f StringArrayToUint8Transformer) []uint8 {
	l := len(m)
	acc := make([]uint8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayArrayMapUint16(m [][]string, f StringArrayToUint16Transformer) []uint16 {
	l := len(m)
	acc := make([]uint16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayArrayMapUint32(m [][]string, f StringArrayToUint32Transformer) []uint32 {
	l := len(m)
	acc := make([]uint32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayArrayMapUint64(m [][]string, f StringArrayToUint64Transformer) []uint64 {
	l := len(m)
	acc := make([]uint64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayArrayMapUintptr(m [][]string, f StringArrayToUintptrTransformer) []uintptr {
	l := len(m)
	acc := make([]uintptr, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayArrayMapByte(m [][]string, f StringArrayToByteTransformer) []byte {
	l := len(m)
	acc := make([]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayArrayMapRune(m [][]string, f StringArrayToRuneTransformer) []rune {
	l := len(m)
	acc := make([]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayArrayMapFloat32(m [][]string, f StringArrayToFloat32Transformer) []float32 {
	l := len(m)
	acc := make([]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayArrayMapFloat64(m [][]string, f StringArrayToFloat64Transformer) []float64 {
	l := len(m)
	acc := make([]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayArrayMapComplex64(m [][]string, f StringArrayToComplex64Transformer) []complex64 {
	l := len(m)
	acc := make([]complex64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayArrayMapComplex128(m [][]string, f StringArrayToComplex128Transformer) []complex128 {
	l := len(m)
	acc := make([]complex128, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayArrayMapAny(m [][]string, f StringArrayToAnyTransformer) []Any {
	l := len(m)
	acc := make([]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayArrayMapBoolArray(m [][]string, f StringArrayToBoolArrayTransformer) [][]bool {
	l := len(m)
	acc := make([][]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayArrayMapStringArray(m [][]string, f StringArrayToStringArrayTransformer) [][]string {
	l := len(m)
	acc := make([][]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayArrayMapIntArray(m [][]string, f StringArrayToIntArrayTransformer) [][]int {
	l := len(m)
	acc := make([][]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayArrayMapInt8Array(m [][]string, f StringArrayToInt8ArrayTransformer) [][]int8 {
	l := len(m)
	acc := make([][]int8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayArrayMapInt16Array(m [][]string, f StringArrayToInt16ArrayTransformer) [][]int16 {
	l := len(m)
	acc := make([][]int16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayArrayMapInt32Array(m [][]string, f StringArrayToInt32ArrayTransformer) [][]int32 {
	l := len(m)
	acc := make([][]int32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayArrayMapInt64Array(m [][]string, f StringArrayToInt64ArrayTransformer) [][]int64 {
	l := len(m)
	acc := make([][]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayArrayMapUintArray(m [][]string, f StringArrayToUintArrayTransformer) [][]uint {
	l := len(m)
	acc := make([][]uint, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayArrayMapUint8Array(m [][]string, f StringArrayToUint8ArrayTransformer) [][]uint8 {
	l := len(m)
	acc := make([][]uint8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayArrayMapUint16Array(m [][]string, f StringArrayToUint16ArrayTransformer) [][]uint16 {
	l := len(m)
	acc := make([][]uint16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayArrayMapUint32Array(m [][]string, f StringArrayToUint32ArrayTransformer) [][]uint32 {
	l := len(m)
	acc := make([][]uint32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayArrayMapUint64Array(m [][]string, f StringArrayToUint64ArrayTransformer) [][]uint64 {
	l := len(m)
	acc := make([][]uint64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayArrayMapUintptrArray(m [][]string, f StringArrayToUintptrArrayTransformer) [][]uintptr {
	l := len(m)
	acc := make([][]uintptr, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayArrayMapByteArray(m [][]string, f StringArrayToByteArrayTransformer) [][]byte {
	l := len(m)
	acc := make([][]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayArrayMapRuneArray(m [][]string, f StringArrayToRuneArrayTransformer) [][]rune {
	l := len(m)
	acc := make([][]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayArrayMapFloat32Array(m [][]string, f StringArrayToFloat32ArrayTransformer) [][]float32 {
	l := len(m)
	acc := make([][]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayArrayMapFloat64Array(m [][]string, f StringArrayToFloat64ArrayTransformer) [][]float64 {
	l := len(m)
	acc := make([][]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayArrayMapComplex64Array(m [][]string, f StringArrayToComplex64ArrayTransformer) [][]complex64 {
	l := len(m)
	acc := make([][]complex64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayArrayMapComplex128Array(m [][]string, f StringArrayToComplex128ArrayTransformer) [][]complex128 {
	l := len(m)
	acc := make([][]complex128, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayArrayMapAnyArray(m [][]string, f StringArrayToAnyArrayTransformer) [][]Any {
	l := len(m)
	acc := make([][]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayArrayMapBoolOption(m [][]string, f StringArrayToBoolOptionTransformer) []BoolOption {
	l := len(m)
	acc := make([]BoolOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayArrayMapStringOption(m [][]string, f StringArrayToStringOptionTransformer) []StringOption {
	l := len(m)
	acc := make([]StringOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayArrayMapIntOption(m [][]string, f StringArrayToIntOptionTransformer) []IntOption {
	l := len(m)
	acc := make([]IntOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayArrayMapInt8Option(m [][]string, f StringArrayToInt8OptionTransformer) []Int8Option {
	l := len(m)
	acc := make([]Int8Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayArrayMapInt16Option(m [][]string, f StringArrayToInt16OptionTransformer) []Int16Option {
	l := len(m)
	acc := make([]Int16Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayArrayMapInt32Option(m [][]string, f StringArrayToInt32OptionTransformer) []Int32Option {
	l := len(m)
	acc := make([]Int32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayArrayMapInt64Option(m [][]string, f StringArrayToInt64OptionTransformer) []Int64Option {
	l := len(m)
	acc := make([]Int64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayArrayMapUintOption(m [][]string, f StringArrayToUintOptionTransformer) []UintOption {
	l := len(m)
	acc := make([]UintOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayArrayMapUint8Option(m [][]string, f StringArrayToUint8OptionTransformer) []Uint8Option {
	l := len(m)
	acc := make([]Uint8Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayArrayMapUint16Option(m [][]string, f StringArrayToUint16OptionTransformer) []Uint16Option {
	l := len(m)
	acc := make([]Uint16Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayArrayMapUint32Option(m [][]string, f StringArrayToUint32OptionTransformer) []Uint32Option {
	l := len(m)
	acc := make([]Uint32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayArrayMapUint64Option(m [][]string, f StringArrayToUint64OptionTransformer) []Uint64Option {
	l := len(m)
	acc := make([]Uint64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayArrayMapUintptrOption(m [][]string, f StringArrayToUintptrOptionTransformer) []UintptrOption {
	l := len(m)
	acc := make([]UintptrOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayArrayMapByteOption(m [][]string, f StringArrayToByteOptionTransformer) []ByteOption {
	l := len(m)
	acc := make([]ByteOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayArrayMapRuneOption(m [][]string, f StringArrayToRuneOptionTransformer) []RuneOption {
	l := len(m)
	acc := make([]RuneOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayArrayMapFloat32Option(m [][]string, f StringArrayToFloat32OptionTransformer) []Float32Option {
	l := len(m)
	acc := make([]Float32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayArrayMapFloat64Option(m [][]string, f StringArrayToFloat64OptionTransformer) []Float64Option {
	l := len(m)
	acc := make([]Float64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayArrayMapComplex64Option(m [][]string, f StringArrayToComplex64OptionTransformer) []Complex64Option {
	l := len(m)
	acc := make([]Complex64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayArrayMapComplex128Option(m [][]string, f StringArrayToComplex128OptionTransformer) []Complex128Option {
	l := len(m)
	acc := make([]Complex128Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayArrayMapAnyOption(m [][]string, f StringArrayToAnyOptionTransformer) []AnyOption {
	l := len(m)
	acc := make([]AnyOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayArrayMapBool(m [][]int, f IntArrayToBoolTransformer) []bool {
	l := len(m)
	acc := make([]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayArrayMapString(m [][]int, f IntArrayToStringTransformer) []string {
	l := len(m)
	acc := make([]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayArrayMapInt(m [][]int, f IntArrayToIntTransformer) []int {
	l := len(m)
	acc := make([]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayArrayMapInt8(m [][]int, f IntArrayToInt8Transformer) []int8 {
	l := len(m)
	acc := make([]int8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayArrayMapInt16(m [][]int, f IntArrayToInt16Transformer) []int16 {
	l := len(m)
	acc := make([]int16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayArrayMapInt32(m [][]int, f IntArrayToInt32Transformer) []int32 {
	l := len(m)
	acc := make([]int32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayArrayMapInt64(m [][]int, f IntArrayToInt64Transformer) []int64 {
	l := len(m)
	acc := make([]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayArrayMapUint(m [][]int, f IntArrayToUintTransformer) []uint {
	l := len(m)
	acc := make([]uint, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayArrayMapUint8(m [][]int, f IntArrayToUint8Transformer) []uint8 {
	l := len(m)
	acc := make([]uint8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayArrayMapUint16(m [][]int, f IntArrayToUint16Transformer) []uint16 {
	l := len(m)
	acc := make([]uint16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayArrayMapUint32(m [][]int, f IntArrayToUint32Transformer) []uint32 {
	l := len(m)
	acc := make([]uint32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayArrayMapUint64(m [][]int, f IntArrayToUint64Transformer) []uint64 {
	l := len(m)
	acc := make([]uint64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayArrayMapUintptr(m [][]int, f IntArrayToUintptrTransformer) []uintptr {
	l := len(m)
	acc := make([]uintptr, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayArrayMapByte(m [][]int, f IntArrayToByteTransformer) []byte {
	l := len(m)
	acc := make([]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayArrayMapRune(m [][]int, f IntArrayToRuneTransformer) []rune {
	l := len(m)
	acc := make([]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayArrayMapFloat32(m [][]int, f IntArrayToFloat32Transformer) []float32 {
	l := len(m)
	acc := make([]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayArrayMapFloat64(m [][]int, f IntArrayToFloat64Transformer) []float64 {
	l := len(m)
	acc := make([]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayArrayMapComplex64(m [][]int, f IntArrayToComplex64Transformer) []complex64 {
	l := len(m)
	acc := make([]complex64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayArrayMapComplex128(m [][]int, f IntArrayToComplex128Transformer) []complex128 {
	l := len(m)
	acc := make([]complex128, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayArrayMapAny(m [][]int, f IntArrayToAnyTransformer) []Any {
	l := len(m)
	acc := make([]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayArrayMapBoolArray(m [][]int, f IntArrayToBoolArrayTransformer) [][]bool {
	l := len(m)
	acc := make([][]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayArrayMapStringArray(m [][]int, f IntArrayToStringArrayTransformer) [][]string {
	l := len(m)
	acc := make([][]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayArrayMapIntArray(m [][]int, f IntArrayToIntArrayTransformer) [][]int {
	l := len(m)
	acc := make([][]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayArrayMapInt8Array(m [][]int, f IntArrayToInt8ArrayTransformer) [][]int8 {
	l := len(m)
	acc := make([][]int8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayArrayMapInt16Array(m [][]int, f IntArrayToInt16ArrayTransformer) [][]int16 {
	l := len(m)
	acc := make([][]int16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayArrayMapInt32Array(m [][]int, f IntArrayToInt32ArrayTransformer) [][]int32 {
	l := len(m)
	acc := make([][]int32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayArrayMapInt64Array(m [][]int, f IntArrayToInt64ArrayTransformer) [][]int64 {
	l := len(m)
	acc := make([][]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayArrayMapUintArray(m [][]int, f IntArrayToUintArrayTransformer) [][]uint {
	l := len(m)
	acc := make([][]uint, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayArrayMapUint8Array(m [][]int, f IntArrayToUint8ArrayTransformer) [][]uint8 {
	l := len(m)
	acc := make([][]uint8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayArrayMapUint16Array(m [][]int, f IntArrayToUint16ArrayTransformer) [][]uint16 {
	l := len(m)
	acc := make([][]uint16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayArrayMapUint32Array(m [][]int, f IntArrayToUint32ArrayTransformer) [][]uint32 {
	l := len(m)
	acc := make([][]uint32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayArrayMapUint64Array(m [][]int, f IntArrayToUint64ArrayTransformer) [][]uint64 {
	l := len(m)
	acc := make([][]uint64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayArrayMapUintptrArray(m [][]int, f IntArrayToUintptrArrayTransformer) [][]uintptr {
	l := len(m)
	acc := make([][]uintptr, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayArrayMapByteArray(m [][]int, f IntArrayToByteArrayTransformer) [][]byte {
	l := len(m)
	acc := make([][]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayArrayMapRuneArray(m [][]int, f IntArrayToRuneArrayTransformer) [][]rune {
	l := len(m)
	acc := make([][]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayArrayMapFloat32Array(m [][]int, f IntArrayToFloat32ArrayTransformer) [][]float32 {
	l := len(m)
	acc := make([][]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayArrayMapFloat64Array(m [][]int, f IntArrayToFloat64ArrayTransformer) [][]float64 {
	l := len(m)
	acc := make([][]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayArrayMapComplex64Array(m [][]int, f IntArrayToComplex64ArrayTransformer) [][]complex64 {
	l := len(m)
	acc := make([][]complex64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayArrayMapComplex128Array(m [][]int, f IntArrayToComplex128ArrayTransformer) [][]complex128 {
	l := len(m)
	acc := make([][]complex128, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayArrayMapAnyArray(m [][]int, f IntArrayToAnyArrayTransformer) [][]Any {
	l := len(m)
	acc := make([][]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayArrayMapBoolOption(m [][]int, f IntArrayToBoolOptionTransformer) []BoolOption {
	l := len(m)
	acc := make([]BoolOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayArrayMapStringOption(m [][]int, f IntArrayToStringOptionTransformer) []StringOption {
	l := len(m)
	acc := make([]StringOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayArrayMapIntOption(m [][]int, f IntArrayToIntOptionTransformer) []IntOption {
	l := len(m)
	acc := make([]IntOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayArrayMapInt8Option(m [][]int, f IntArrayToInt8OptionTransformer) []Int8Option {
	l := len(m)
	acc := make([]Int8Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayArrayMapInt16Option(m [][]int, f IntArrayToInt16OptionTransformer) []Int16Option {
	l := len(m)
	acc := make([]Int16Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayArrayMapInt32Option(m [][]int, f IntArrayToInt32OptionTransformer) []Int32Option {
	l := len(m)
	acc := make([]Int32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayArrayMapInt64Option(m [][]int, f IntArrayToInt64OptionTransformer) []Int64Option {
	l := len(m)
	acc := make([]Int64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayArrayMapUintOption(m [][]int, f IntArrayToUintOptionTransformer) []UintOption {
	l := len(m)
	acc := make([]UintOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayArrayMapUint8Option(m [][]int, f IntArrayToUint8OptionTransformer) []Uint8Option {
	l := len(m)
	acc := make([]Uint8Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayArrayMapUint16Option(m [][]int, f IntArrayToUint16OptionTransformer) []Uint16Option {
	l := len(m)
	acc := make([]Uint16Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayArrayMapUint32Option(m [][]int, f IntArrayToUint32OptionTransformer) []Uint32Option {
	l := len(m)
	acc := make([]Uint32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayArrayMapUint64Option(m [][]int, f IntArrayToUint64OptionTransformer) []Uint64Option {
	l := len(m)
	acc := make([]Uint64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayArrayMapUintptrOption(m [][]int, f IntArrayToUintptrOptionTransformer) []UintptrOption {
	l := len(m)
	acc := make([]UintptrOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayArrayMapByteOption(m [][]int, f IntArrayToByteOptionTransformer) []ByteOption {
	l := len(m)
	acc := make([]ByteOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayArrayMapRuneOption(m [][]int, f IntArrayToRuneOptionTransformer) []RuneOption {
	l := len(m)
	acc := make([]RuneOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayArrayMapFloat32Option(m [][]int, f IntArrayToFloat32OptionTransformer) []Float32Option {
	l := len(m)
	acc := make([]Float32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayArrayMapFloat64Option(m [][]int, f IntArrayToFloat64OptionTransformer) []Float64Option {
	l := len(m)
	acc := make([]Float64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayArrayMapComplex64Option(m [][]int, f IntArrayToComplex64OptionTransformer) []Complex64Option {
	l := len(m)
	acc := make([]Complex64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayArrayMapComplex128Option(m [][]int, f IntArrayToComplex128OptionTransformer) []Complex128Option {
	l := len(m)
	acc := make([]Complex128Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayArrayMapAnyOption(m [][]int, f IntArrayToAnyOptionTransformer) []AnyOption {
	l := len(m)
	acc := make([]AnyOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8ArrayArrayMapBool(m [][]int8, f Int8ArrayToBoolTransformer) []bool {
	l := len(m)
	acc := make([]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8ArrayArrayMapString(m [][]int8, f Int8ArrayToStringTransformer) []string {
	l := len(m)
	acc := make([]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8ArrayArrayMapInt(m [][]int8, f Int8ArrayToIntTransformer) []int {
	l := len(m)
	acc := make([]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8ArrayArrayMapInt8(m [][]int8, f Int8ArrayToInt8Transformer) []int8 {
	l := len(m)
	acc := make([]int8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8ArrayArrayMapInt16(m [][]int8, f Int8ArrayToInt16Transformer) []int16 {
	l := len(m)
	acc := make([]int16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8ArrayArrayMapInt32(m [][]int8, f Int8ArrayToInt32Transformer) []int32 {
	l := len(m)
	acc := make([]int32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8ArrayArrayMapInt64(m [][]int8, f Int8ArrayToInt64Transformer) []int64 {
	l := len(m)
	acc := make([]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8ArrayArrayMapUint(m [][]int8, f Int8ArrayToUintTransformer) []uint {
	l := len(m)
	acc := make([]uint, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8ArrayArrayMapUint8(m [][]int8, f Int8ArrayToUint8Transformer) []uint8 {
	l := len(m)
	acc := make([]uint8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8ArrayArrayMapUint16(m [][]int8, f Int8ArrayToUint16Transformer) []uint16 {
	l := len(m)
	acc := make([]uint16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8ArrayArrayMapUint32(m [][]int8, f Int8ArrayToUint32Transformer) []uint32 {
	l := len(m)
	acc := make([]uint32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8ArrayArrayMapUint64(m [][]int8, f Int8ArrayToUint64Transformer) []uint64 {
	l := len(m)
	acc := make([]uint64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8ArrayArrayMapUintptr(m [][]int8, f Int8ArrayToUintptrTransformer) []uintptr {
	l := len(m)
	acc := make([]uintptr, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8ArrayArrayMapByte(m [][]int8, f Int8ArrayToByteTransformer) []byte {
	l := len(m)
	acc := make([]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8ArrayArrayMapRune(m [][]int8, f Int8ArrayToRuneTransformer) []rune {
	l := len(m)
	acc := make([]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8ArrayArrayMapFloat32(m [][]int8, f Int8ArrayToFloat32Transformer) []float32 {
	l := len(m)
	acc := make([]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8ArrayArrayMapFloat64(m [][]int8, f Int8ArrayToFloat64Transformer) []float64 {
	l := len(m)
	acc := make([]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8ArrayArrayMapComplex64(m [][]int8, f Int8ArrayToComplex64Transformer) []complex64 {
	l := len(m)
	acc := make([]complex64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8ArrayArrayMapComplex128(m [][]int8, f Int8ArrayToComplex128Transformer) []complex128 {
	l := len(m)
	acc := make([]complex128, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8ArrayArrayMapAny(m [][]int8, f Int8ArrayToAnyTransformer) []Any {
	l := len(m)
	acc := make([]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8ArrayArrayMapBoolArray(m [][]int8, f Int8ArrayToBoolArrayTransformer) [][]bool {
	l := len(m)
	acc := make([][]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8ArrayArrayMapStringArray(m [][]int8, f Int8ArrayToStringArrayTransformer) [][]string {
	l := len(m)
	acc := make([][]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8ArrayArrayMapIntArray(m [][]int8, f Int8ArrayToIntArrayTransformer) [][]int {
	l := len(m)
	acc := make([][]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8ArrayArrayMapInt8Array(m [][]int8, f Int8ArrayToInt8ArrayTransformer) [][]int8 {
	l := len(m)
	acc := make([][]int8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8ArrayArrayMapInt16Array(m [][]int8, f Int8ArrayToInt16ArrayTransformer) [][]int16 {
	l := len(m)
	acc := make([][]int16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8ArrayArrayMapInt32Array(m [][]int8, f Int8ArrayToInt32ArrayTransformer) [][]int32 {
	l := len(m)
	acc := make([][]int32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8ArrayArrayMapInt64Array(m [][]int8, f Int8ArrayToInt64ArrayTransformer) [][]int64 {
	l := len(m)
	acc := make([][]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8ArrayArrayMapUintArray(m [][]int8, f Int8ArrayToUintArrayTransformer) [][]uint {
	l := len(m)
	acc := make([][]uint, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8ArrayArrayMapUint8Array(m [][]int8, f Int8ArrayToUint8ArrayTransformer) [][]uint8 {
	l := len(m)
	acc := make([][]uint8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8ArrayArrayMapUint16Array(m [][]int8, f Int8ArrayToUint16ArrayTransformer) [][]uint16 {
	l := len(m)
	acc := make([][]uint16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8ArrayArrayMapUint32Array(m [][]int8, f Int8ArrayToUint32ArrayTransformer) [][]uint32 {
	l := len(m)
	acc := make([][]uint32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8ArrayArrayMapUint64Array(m [][]int8, f Int8ArrayToUint64ArrayTransformer) [][]uint64 {
	l := len(m)
	acc := make([][]uint64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8ArrayArrayMapUintptrArray(m [][]int8, f Int8ArrayToUintptrArrayTransformer) [][]uintptr {
	l := len(m)
	acc := make([][]uintptr, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8ArrayArrayMapByteArray(m [][]int8, f Int8ArrayToByteArrayTransformer) [][]byte {
	l := len(m)
	acc := make([][]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8ArrayArrayMapRuneArray(m [][]int8, f Int8ArrayToRuneArrayTransformer) [][]rune {
	l := len(m)
	acc := make([][]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8ArrayArrayMapFloat32Array(m [][]int8, f Int8ArrayToFloat32ArrayTransformer) [][]float32 {
	l := len(m)
	acc := make([][]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8ArrayArrayMapFloat64Array(m [][]int8, f Int8ArrayToFloat64ArrayTransformer) [][]float64 {
	l := len(m)
	acc := make([][]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8ArrayArrayMapComplex64Array(m [][]int8, f Int8ArrayToComplex64ArrayTransformer) [][]complex64 {
	l := len(m)
	acc := make([][]complex64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8ArrayArrayMapComplex128Array(m [][]int8, f Int8ArrayToComplex128ArrayTransformer) [][]complex128 {
	l := len(m)
	acc := make([][]complex128, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8ArrayArrayMapAnyArray(m [][]int8, f Int8ArrayToAnyArrayTransformer) [][]Any {
	l := len(m)
	acc := make([][]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8ArrayArrayMapBoolOption(m [][]int8, f Int8ArrayToBoolOptionTransformer) []BoolOption {
	l := len(m)
	acc := make([]BoolOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8ArrayArrayMapStringOption(m [][]int8, f Int8ArrayToStringOptionTransformer) []StringOption {
	l := len(m)
	acc := make([]StringOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8ArrayArrayMapIntOption(m [][]int8, f Int8ArrayToIntOptionTransformer) []IntOption {
	l := len(m)
	acc := make([]IntOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8ArrayArrayMapInt8Option(m [][]int8, f Int8ArrayToInt8OptionTransformer) []Int8Option {
	l := len(m)
	acc := make([]Int8Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8ArrayArrayMapInt16Option(m [][]int8, f Int8ArrayToInt16OptionTransformer) []Int16Option {
	l := len(m)
	acc := make([]Int16Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8ArrayArrayMapInt32Option(m [][]int8, f Int8ArrayToInt32OptionTransformer) []Int32Option {
	l := len(m)
	acc := make([]Int32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8ArrayArrayMapInt64Option(m [][]int8, f Int8ArrayToInt64OptionTransformer) []Int64Option {
	l := len(m)
	acc := make([]Int64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8ArrayArrayMapUintOption(m [][]int8, f Int8ArrayToUintOptionTransformer) []UintOption {
	l := len(m)
	acc := make([]UintOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8ArrayArrayMapUint8Option(m [][]int8, f Int8ArrayToUint8OptionTransformer) []Uint8Option {
	l := len(m)
	acc := make([]Uint8Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8ArrayArrayMapUint16Option(m [][]int8, f Int8ArrayToUint16OptionTransformer) []Uint16Option {
	l := len(m)
	acc := make([]Uint16Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8ArrayArrayMapUint32Option(m [][]int8, f Int8ArrayToUint32OptionTransformer) []Uint32Option {
	l := len(m)
	acc := make([]Uint32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8ArrayArrayMapUint64Option(m [][]int8, f Int8ArrayToUint64OptionTransformer) []Uint64Option {
	l := len(m)
	acc := make([]Uint64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8ArrayArrayMapUintptrOption(m [][]int8, f Int8ArrayToUintptrOptionTransformer) []UintptrOption {
	l := len(m)
	acc := make([]UintptrOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8ArrayArrayMapByteOption(m [][]int8, f Int8ArrayToByteOptionTransformer) []ByteOption {
	l := len(m)
	acc := make([]ByteOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8ArrayArrayMapRuneOption(m [][]int8, f Int8ArrayToRuneOptionTransformer) []RuneOption {
	l := len(m)
	acc := make([]RuneOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8ArrayArrayMapFloat32Option(m [][]int8, f Int8ArrayToFloat32OptionTransformer) []Float32Option {
	l := len(m)
	acc := make([]Float32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8ArrayArrayMapFloat64Option(m [][]int8, f Int8ArrayToFloat64OptionTransformer) []Float64Option {
	l := len(m)
	acc := make([]Float64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8ArrayArrayMapComplex64Option(m [][]int8, f Int8ArrayToComplex64OptionTransformer) []Complex64Option {
	l := len(m)
	acc := make([]Complex64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8ArrayArrayMapComplex128Option(m [][]int8, f Int8ArrayToComplex128OptionTransformer) []Complex128Option {
	l := len(m)
	acc := make([]Complex128Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8ArrayArrayMapAnyOption(m [][]int8, f Int8ArrayToAnyOptionTransformer) []AnyOption {
	l := len(m)
	acc := make([]AnyOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16ArrayArrayMapBool(m [][]int16, f Int16ArrayToBoolTransformer) []bool {
	l := len(m)
	acc := make([]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16ArrayArrayMapString(m [][]int16, f Int16ArrayToStringTransformer) []string {
	l := len(m)
	acc := make([]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16ArrayArrayMapInt(m [][]int16, f Int16ArrayToIntTransformer) []int {
	l := len(m)
	acc := make([]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16ArrayArrayMapInt8(m [][]int16, f Int16ArrayToInt8Transformer) []int8 {
	l := len(m)
	acc := make([]int8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16ArrayArrayMapInt16(m [][]int16, f Int16ArrayToInt16Transformer) []int16 {
	l := len(m)
	acc := make([]int16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16ArrayArrayMapInt32(m [][]int16, f Int16ArrayToInt32Transformer) []int32 {
	l := len(m)
	acc := make([]int32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16ArrayArrayMapInt64(m [][]int16, f Int16ArrayToInt64Transformer) []int64 {
	l := len(m)
	acc := make([]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16ArrayArrayMapUint(m [][]int16, f Int16ArrayToUintTransformer) []uint {
	l := len(m)
	acc := make([]uint, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16ArrayArrayMapUint8(m [][]int16, f Int16ArrayToUint8Transformer) []uint8 {
	l := len(m)
	acc := make([]uint8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16ArrayArrayMapUint16(m [][]int16, f Int16ArrayToUint16Transformer) []uint16 {
	l := len(m)
	acc := make([]uint16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16ArrayArrayMapUint32(m [][]int16, f Int16ArrayToUint32Transformer) []uint32 {
	l := len(m)
	acc := make([]uint32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16ArrayArrayMapUint64(m [][]int16, f Int16ArrayToUint64Transformer) []uint64 {
	l := len(m)
	acc := make([]uint64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16ArrayArrayMapUintptr(m [][]int16, f Int16ArrayToUintptrTransformer) []uintptr {
	l := len(m)
	acc := make([]uintptr, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16ArrayArrayMapByte(m [][]int16, f Int16ArrayToByteTransformer) []byte {
	l := len(m)
	acc := make([]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16ArrayArrayMapRune(m [][]int16, f Int16ArrayToRuneTransformer) []rune {
	l := len(m)
	acc := make([]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16ArrayArrayMapFloat32(m [][]int16, f Int16ArrayToFloat32Transformer) []float32 {
	l := len(m)
	acc := make([]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16ArrayArrayMapFloat64(m [][]int16, f Int16ArrayToFloat64Transformer) []float64 {
	l := len(m)
	acc := make([]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16ArrayArrayMapComplex64(m [][]int16, f Int16ArrayToComplex64Transformer) []complex64 {
	l := len(m)
	acc := make([]complex64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16ArrayArrayMapComplex128(m [][]int16, f Int16ArrayToComplex128Transformer) []complex128 {
	l := len(m)
	acc := make([]complex128, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16ArrayArrayMapAny(m [][]int16, f Int16ArrayToAnyTransformer) []Any {
	l := len(m)
	acc := make([]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16ArrayArrayMapBoolArray(m [][]int16, f Int16ArrayToBoolArrayTransformer) [][]bool {
	l := len(m)
	acc := make([][]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16ArrayArrayMapStringArray(m [][]int16, f Int16ArrayToStringArrayTransformer) [][]string {
	l := len(m)
	acc := make([][]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16ArrayArrayMapIntArray(m [][]int16, f Int16ArrayToIntArrayTransformer) [][]int {
	l := len(m)
	acc := make([][]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16ArrayArrayMapInt8Array(m [][]int16, f Int16ArrayToInt8ArrayTransformer) [][]int8 {
	l := len(m)
	acc := make([][]int8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16ArrayArrayMapInt16Array(m [][]int16, f Int16ArrayToInt16ArrayTransformer) [][]int16 {
	l := len(m)
	acc := make([][]int16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16ArrayArrayMapInt32Array(m [][]int16, f Int16ArrayToInt32ArrayTransformer) [][]int32 {
	l := len(m)
	acc := make([][]int32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16ArrayArrayMapInt64Array(m [][]int16, f Int16ArrayToInt64ArrayTransformer) [][]int64 {
	l := len(m)
	acc := make([][]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16ArrayArrayMapUintArray(m [][]int16, f Int16ArrayToUintArrayTransformer) [][]uint {
	l := len(m)
	acc := make([][]uint, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16ArrayArrayMapUint8Array(m [][]int16, f Int16ArrayToUint8ArrayTransformer) [][]uint8 {
	l := len(m)
	acc := make([][]uint8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16ArrayArrayMapUint16Array(m [][]int16, f Int16ArrayToUint16ArrayTransformer) [][]uint16 {
	l := len(m)
	acc := make([][]uint16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16ArrayArrayMapUint32Array(m [][]int16, f Int16ArrayToUint32ArrayTransformer) [][]uint32 {
	l := len(m)
	acc := make([][]uint32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16ArrayArrayMapUint64Array(m [][]int16, f Int16ArrayToUint64ArrayTransformer) [][]uint64 {
	l := len(m)
	acc := make([][]uint64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16ArrayArrayMapUintptrArray(m [][]int16, f Int16ArrayToUintptrArrayTransformer) [][]uintptr {
	l := len(m)
	acc := make([][]uintptr, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16ArrayArrayMapByteArray(m [][]int16, f Int16ArrayToByteArrayTransformer) [][]byte {
	l := len(m)
	acc := make([][]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16ArrayArrayMapRuneArray(m [][]int16, f Int16ArrayToRuneArrayTransformer) [][]rune {
	l := len(m)
	acc := make([][]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16ArrayArrayMapFloat32Array(m [][]int16, f Int16ArrayToFloat32ArrayTransformer) [][]float32 {
	l := len(m)
	acc := make([][]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16ArrayArrayMapFloat64Array(m [][]int16, f Int16ArrayToFloat64ArrayTransformer) [][]float64 {
	l := len(m)
	acc := make([][]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16ArrayArrayMapComplex64Array(m [][]int16, f Int16ArrayToComplex64ArrayTransformer) [][]complex64 {
	l := len(m)
	acc := make([][]complex64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16ArrayArrayMapComplex128Array(m [][]int16, f Int16ArrayToComplex128ArrayTransformer) [][]complex128 {
	l := len(m)
	acc := make([][]complex128, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16ArrayArrayMapAnyArray(m [][]int16, f Int16ArrayToAnyArrayTransformer) [][]Any {
	l := len(m)
	acc := make([][]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16ArrayArrayMapBoolOption(m [][]int16, f Int16ArrayToBoolOptionTransformer) []BoolOption {
	l := len(m)
	acc := make([]BoolOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16ArrayArrayMapStringOption(m [][]int16, f Int16ArrayToStringOptionTransformer) []StringOption {
	l := len(m)
	acc := make([]StringOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16ArrayArrayMapIntOption(m [][]int16, f Int16ArrayToIntOptionTransformer) []IntOption {
	l := len(m)
	acc := make([]IntOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16ArrayArrayMapInt8Option(m [][]int16, f Int16ArrayToInt8OptionTransformer) []Int8Option {
	l := len(m)
	acc := make([]Int8Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16ArrayArrayMapInt16Option(m [][]int16, f Int16ArrayToInt16OptionTransformer) []Int16Option {
	l := len(m)
	acc := make([]Int16Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16ArrayArrayMapInt32Option(m [][]int16, f Int16ArrayToInt32OptionTransformer) []Int32Option {
	l := len(m)
	acc := make([]Int32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16ArrayArrayMapInt64Option(m [][]int16, f Int16ArrayToInt64OptionTransformer) []Int64Option {
	l := len(m)
	acc := make([]Int64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16ArrayArrayMapUintOption(m [][]int16, f Int16ArrayToUintOptionTransformer) []UintOption {
	l := len(m)
	acc := make([]UintOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16ArrayArrayMapUint8Option(m [][]int16, f Int16ArrayToUint8OptionTransformer) []Uint8Option {
	l := len(m)
	acc := make([]Uint8Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16ArrayArrayMapUint16Option(m [][]int16, f Int16ArrayToUint16OptionTransformer) []Uint16Option {
	l := len(m)
	acc := make([]Uint16Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16ArrayArrayMapUint32Option(m [][]int16, f Int16ArrayToUint32OptionTransformer) []Uint32Option {
	l := len(m)
	acc := make([]Uint32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16ArrayArrayMapUint64Option(m [][]int16, f Int16ArrayToUint64OptionTransformer) []Uint64Option {
	l := len(m)
	acc := make([]Uint64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16ArrayArrayMapUintptrOption(m [][]int16, f Int16ArrayToUintptrOptionTransformer) []UintptrOption {
	l := len(m)
	acc := make([]UintptrOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16ArrayArrayMapByteOption(m [][]int16, f Int16ArrayToByteOptionTransformer) []ByteOption {
	l := len(m)
	acc := make([]ByteOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16ArrayArrayMapRuneOption(m [][]int16, f Int16ArrayToRuneOptionTransformer) []RuneOption {
	l := len(m)
	acc := make([]RuneOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16ArrayArrayMapFloat32Option(m [][]int16, f Int16ArrayToFloat32OptionTransformer) []Float32Option {
	l := len(m)
	acc := make([]Float32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16ArrayArrayMapFloat64Option(m [][]int16, f Int16ArrayToFloat64OptionTransformer) []Float64Option {
	l := len(m)
	acc := make([]Float64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16ArrayArrayMapComplex64Option(m [][]int16, f Int16ArrayToComplex64OptionTransformer) []Complex64Option {
	l := len(m)
	acc := make([]Complex64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16ArrayArrayMapComplex128Option(m [][]int16, f Int16ArrayToComplex128OptionTransformer) []Complex128Option {
	l := len(m)
	acc := make([]Complex128Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16ArrayArrayMapAnyOption(m [][]int16, f Int16ArrayToAnyOptionTransformer) []AnyOption {
	l := len(m)
	acc := make([]AnyOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32ArrayArrayMapBool(m [][]int32, f Int32ArrayToBoolTransformer) []bool {
	l := len(m)
	acc := make([]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32ArrayArrayMapString(m [][]int32, f Int32ArrayToStringTransformer) []string {
	l := len(m)
	acc := make([]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32ArrayArrayMapInt(m [][]int32, f Int32ArrayToIntTransformer) []int {
	l := len(m)
	acc := make([]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32ArrayArrayMapInt8(m [][]int32, f Int32ArrayToInt8Transformer) []int8 {
	l := len(m)
	acc := make([]int8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32ArrayArrayMapInt16(m [][]int32, f Int32ArrayToInt16Transformer) []int16 {
	l := len(m)
	acc := make([]int16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32ArrayArrayMapInt32(m [][]int32, f Int32ArrayToInt32Transformer) []int32 {
	l := len(m)
	acc := make([]int32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32ArrayArrayMapInt64(m [][]int32, f Int32ArrayToInt64Transformer) []int64 {
	l := len(m)
	acc := make([]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32ArrayArrayMapUint(m [][]int32, f Int32ArrayToUintTransformer) []uint {
	l := len(m)
	acc := make([]uint, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32ArrayArrayMapUint8(m [][]int32, f Int32ArrayToUint8Transformer) []uint8 {
	l := len(m)
	acc := make([]uint8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32ArrayArrayMapUint16(m [][]int32, f Int32ArrayToUint16Transformer) []uint16 {
	l := len(m)
	acc := make([]uint16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32ArrayArrayMapUint32(m [][]int32, f Int32ArrayToUint32Transformer) []uint32 {
	l := len(m)
	acc := make([]uint32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32ArrayArrayMapUint64(m [][]int32, f Int32ArrayToUint64Transformer) []uint64 {
	l := len(m)
	acc := make([]uint64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32ArrayArrayMapUintptr(m [][]int32, f Int32ArrayToUintptrTransformer) []uintptr {
	l := len(m)
	acc := make([]uintptr, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32ArrayArrayMapByte(m [][]int32, f Int32ArrayToByteTransformer) []byte {
	l := len(m)
	acc := make([]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32ArrayArrayMapRune(m [][]int32, f Int32ArrayToRuneTransformer) []rune {
	l := len(m)
	acc := make([]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32ArrayArrayMapFloat32(m [][]int32, f Int32ArrayToFloat32Transformer) []float32 {
	l := len(m)
	acc := make([]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32ArrayArrayMapFloat64(m [][]int32, f Int32ArrayToFloat64Transformer) []float64 {
	l := len(m)
	acc := make([]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32ArrayArrayMapComplex64(m [][]int32, f Int32ArrayToComplex64Transformer) []complex64 {
	l := len(m)
	acc := make([]complex64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32ArrayArrayMapComplex128(m [][]int32, f Int32ArrayToComplex128Transformer) []complex128 {
	l := len(m)
	acc := make([]complex128, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32ArrayArrayMapAny(m [][]int32, f Int32ArrayToAnyTransformer) []Any {
	l := len(m)
	acc := make([]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32ArrayArrayMapBoolArray(m [][]int32, f Int32ArrayToBoolArrayTransformer) [][]bool {
	l := len(m)
	acc := make([][]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32ArrayArrayMapStringArray(m [][]int32, f Int32ArrayToStringArrayTransformer) [][]string {
	l := len(m)
	acc := make([][]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32ArrayArrayMapIntArray(m [][]int32, f Int32ArrayToIntArrayTransformer) [][]int {
	l := len(m)
	acc := make([][]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32ArrayArrayMapInt8Array(m [][]int32, f Int32ArrayToInt8ArrayTransformer) [][]int8 {
	l := len(m)
	acc := make([][]int8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32ArrayArrayMapInt16Array(m [][]int32, f Int32ArrayToInt16ArrayTransformer) [][]int16 {
	l := len(m)
	acc := make([][]int16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32ArrayArrayMapInt32Array(m [][]int32, f Int32ArrayToInt32ArrayTransformer) [][]int32 {
	l := len(m)
	acc := make([][]int32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32ArrayArrayMapInt64Array(m [][]int32, f Int32ArrayToInt64ArrayTransformer) [][]int64 {
	l := len(m)
	acc := make([][]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32ArrayArrayMapUintArray(m [][]int32, f Int32ArrayToUintArrayTransformer) [][]uint {
	l := len(m)
	acc := make([][]uint, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32ArrayArrayMapUint8Array(m [][]int32, f Int32ArrayToUint8ArrayTransformer) [][]uint8 {
	l := len(m)
	acc := make([][]uint8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32ArrayArrayMapUint16Array(m [][]int32, f Int32ArrayToUint16ArrayTransformer) [][]uint16 {
	l := len(m)
	acc := make([][]uint16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32ArrayArrayMapUint32Array(m [][]int32, f Int32ArrayToUint32ArrayTransformer) [][]uint32 {
	l := len(m)
	acc := make([][]uint32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32ArrayArrayMapUint64Array(m [][]int32, f Int32ArrayToUint64ArrayTransformer) [][]uint64 {
	l := len(m)
	acc := make([][]uint64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32ArrayArrayMapUintptrArray(m [][]int32, f Int32ArrayToUintptrArrayTransformer) [][]uintptr {
	l := len(m)
	acc := make([][]uintptr, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32ArrayArrayMapByteArray(m [][]int32, f Int32ArrayToByteArrayTransformer) [][]byte {
	l := len(m)
	acc := make([][]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32ArrayArrayMapRuneArray(m [][]int32, f Int32ArrayToRuneArrayTransformer) [][]rune {
	l := len(m)
	acc := make([][]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32ArrayArrayMapFloat32Array(m [][]int32, f Int32ArrayToFloat32ArrayTransformer) [][]float32 {
	l := len(m)
	acc := make([][]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32ArrayArrayMapFloat64Array(m [][]int32, f Int32ArrayToFloat64ArrayTransformer) [][]float64 {
	l := len(m)
	acc := make([][]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32ArrayArrayMapComplex64Array(m [][]int32, f Int32ArrayToComplex64ArrayTransformer) [][]complex64 {
	l := len(m)
	acc := make([][]complex64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32ArrayArrayMapComplex128Array(m [][]int32, f Int32ArrayToComplex128ArrayTransformer) [][]complex128 {
	l := len(m)
	acc := make([][]complex128, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32ArrayArrayMapAnyArray(m [][]int32, f Int32ArrayToAnyArrayTransformer) [][]Any {
	l := len(m)
	acc := make([][]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32ArrayArrayMapBoolOption(m [][]int32, f Int32ArrayToBoolOptionTransformer) []BoolOption {
	l := len(m)
	acc := make([]BoolOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32ArrayArrayMapStringOption(m [][]int32, f Int32ArrayToStringOptionTransformer) []StringOption {
	l := len(m)
	acc := make([]StringOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32ArrayArrayMapIntOption(m [][]int32, f Int32ArrayToIntOptionTransformer) []IntOption {
	l := len(m)
	acc := make([]IntOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32ArrayArrayMapInt8Option(m [][]int32, f Int32ArrayToInt8OptionTransformer) []Int8Option {
	l := len(m)
	acc := make([]Int8Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32ArrayArrayMapInt16Option(m [][]int32, f Int32ArrayToInt16OptionTransformer) []Int16Option {
	l := len(m)
	acc := make([]Int16Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32ArrayArrayMapInt32Option(m [][]int32, f Int32ArrayToInt32OptionTransformer) []Int32Option {
	l := len(m)
	acc := make([]Int32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32ArrayArrayMapInt64Option(m [][]int32, f Int32ArrayToInt64OptionTransformer) []Int64Option {
	l := len(m)
	acc := make([]Int64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32ArrayArrayMapUintOption(m [][]int32, f Int32ArrayToUintOptionTransformer) []UintOption {
	l := len(m)
	acc := make([]UintOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32ArrayArrayMapUint8Option(m [][]int32, f Int32ArrayToUint8OptionTransformer) []Uint8Option {
	l := len(m)
	acc := make([]Uint8Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32ArrayArrayMapUint16Option(m [][]int32, f Int32ArrayToUint16OptionTransformer) []Uint16Option {
	l := len(m)
	acc := make([]Uint16Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32ArrayArrayMapUint32Option(m [][]int32, f Int32ArrayToUint32OptionTransformer) []Uint32Option {
	l := len(m)
	acc := make([]Uint32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32ArrayArrayMapUint64Option(m [][]int32, f Int32ArrayToUint64OptionTransformer) []Uint64Option {
	l := len(m)
	acc := make([]Uint64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32ArrayArrayMapUintptrOption(m [][]int32, f Int32ArrayToUintptrOptionTransformer) []UintptrOption {
	l := len(m)
	acc := make([]UintptrOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32ArrayArrayMapByteOption(m [][]int32, f Int32ArrayToByteOptionTransformer) []ByteOption {
	l := len(m)
	acc := make([]ByteOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32ArrayArrayMapRuneOption(m [][]int32, f Int32ArrayToRuneOptionTransformer) []RuneOption {
	l := len(m)
	acc := make([]RuneOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32ArrayArrayMapFloat32Option(m [][]int32, f Int32ArrayToFloat32OptionTransformer) []Float32Option {
	l := len(m)
	acc := make([]Float32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32ArrayArrayMapFloat64Option(m [][]int32, f Int32ArrayToFloat64OptionTransformer) []Float64Option {
	l := len(m)
	acc := make([]Float64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32ArrayArrayMapComplex64Option(m [][]int32, f Int32ArrayToComplex64OptionTransformer) []Complex64Option {
	l := len(m)
	acc := make([]Complex64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32ArrayArrayMapComplex128Option(m [][]int32, f Int32ArrayToComplex128OptionTransformer) []Complex128Option {
	l := len(m)
	acc := make([]Complex128Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32ArrayArrayMapAnyOption(m [][]int32, f Int32ArrayToAnyOptionTransformer) []AnyOption {
	l := len(m)
	acc := make([]AnyOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayArrayMapBool(m [][]int64, f Int64ArrayToBoolTransformer) []bool {
	l := len(m)
	acc := make([]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayArrayMapString(m [][]int64, f Int64ArrayToStringTransformer) []string {
	l := len(m)
	acc := make([]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayArrayMapInt(m [][]int64, f Int64ArrayToIntTransformer) []int {
	l := len(m)
	acc := make([]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayArrayMapInt8(m [][]int64, f Int64ArrayToInt8Transformer) []int8 {
	l := len(m)
	acc := make([]int8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayArrayMapInt16(m [][]int64, f Int64ArrayToInt16Transformer) []int16 {
	l := len(m)
	acc := make([]int16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayArrayMapInt32(m [][]int64, f Int64ArrayToInt32Transformer) []int32 {
	l := len(m)
	acc := make([]int32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayArrayMapInt64(m [][]int64, f Int64ArrayToInt64Transformer) []int64 {
	l := len(m)
	acc := make([]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayArrayMapUint(m [][]int64, f Int64ArrayToUintTransformer) []uint {
	l := len(m)
	acc := make([]uint, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayArrayMapUint8(m [][]int64, f Int64ArrayToUint8Transformer) []uint8 {
	l := len(m)
	acc := make([]uint8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayArrayMapUint16(m [][]int64, f Int64ArrayToUint16Transformer) []uint16 {
	l := len(m)
	acc := make([]uint16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayArrayMapUint32(m [][]int64, f Int64ArrayToUint32Transformer) []uint32 {
	l := len(m)
	acc := make([]uint32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayArrayMapUint64(m [][]int64, f Int64ArrayToUint64Transformer) []uint64 {
	l := len(m)
	acc := make([]uint64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayArrayMapUintptr(m [][]int64, f Int64ArrayToUintptrTransformer) []uintptr {
	l := len(m)
	acc := make([]uintptr, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayArrayMapByte(m [][]int64, f Int64ArrayToByteTransformer) []byte {
	l := len(m)
	acc := make([]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayArrayMapRune(m [][]int64, f Int64ArrayToRuneTransformer) []rune {
	l := len(m)
	acc := make([]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayArrayMapFloat32(m [][]int64, f Int64ArrayToFloat32Transformer) []float32 {
	l := len(m)
	acc := make([]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayArrayMapFloat64(m [][]int64, f Int64ArrayToFloat64Transformer) []float64 {
	l := len(m)
	acc := make([]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayArrayMapComplex64(m [][]int64, f Int64ArrayToComplex64Transformer) []complex64 {
	l := len(m)
	acc := make([]complex64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayArrayMapComplex128(m [][]int64, f Int64ArrayToComplex128Transformer) []complex128 {
	l := len(m)
	acc := make([]complex128, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayArrayMapAny(m [][]int64, f Int64ArrayToAnyTransformer) []Any {
	l := len(m)
	acc := make([]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayArrayMapBoolArray(m [][]int64, f Int64ArrayToBoolArrayTransformer) [][]bool {
	l := len(m)
	acc := make([][]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayArrayMapStringArray(m [][]int64, f Int64ArrayToStringArrayTransformer) [][]string {
	l := len(m)
	acc := make([][]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayArrayMapIntArray(m [][]int64, f Int64ArrayToIntArrayTransformer) [][]int {
	l := len(m)
	acc := make([][]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayArrayMapInt8Array(m [][]int64, f Int64ArrayToInt8ArrayTransformer) [][]int8 {
	l := len(m)
	acc := make([][]int8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayArrayMapInt16Array(m [][]int64, f Int64ArrayToInt16ArrayTransformer) [][]int16 {
	l := len(m)
	acc := make([][]int16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayArrayMapInt32Array(m [][]int64, f Int64ArrayToInt32ArrayTransformer) [][]int32 {
	l := len(m)
	acc := make([][]int32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayArrayMapInt64Array(m [][]int64, f Int64ArrayToInt64ArrayTransformer) [][]int64 {
	l := len(m)
	acc := make([][]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayArrayMapUintArray(m [][]int64, f Int64ArrayToUintArrayTransformer) [][]uint {
	l := len(m)
	acc := make([][]uint, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayArrayMapUint8Array(m [][]int64, f Int64ArrayToUint8ArrayTransformer) [][]uint8 {
	l := len(m)
	acc := make([][]uint8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayArrayMapUint16Array(m [][]int64, f Int64ArrayToUint16ArrayTransformer) [][]uint16 {
	l := len(m)
	acc := make([][]uint16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayArrayMapUint32Array(m [][]int64, f Int64ArrayToUint32ArrayTransformer) [][]uint32 {
	l := len(m)
	acc := make([][]uint32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayArrayMapUint64Array(m [][]int64, f Int64ArrayToUint64ArrayTransformer) [][]uint64 {
	l := len(m)
	acc := make([][]uint64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayArrayMapUintptrArray(m [][]int64, f Int64ArrayToUintptrArrayTransformer) [][]uintptr {
	l := len(m)
	acc := make([][]uintptr, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayArrayMapByteArray(m [][]int64, f Int64ArrayToByteArrayTransformer) [][]byte {
	l := len(m)
	acc := make([][]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayArrayMapRuneArray(m [][]int64, f Int64ArrayToRuneArrayTransformer) [][]rune {
	l := len(m)
	acc := make([][]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayArrayMapFloat32Array(m [][]int64, f Int64ArrayToFloat32ArrayTransformer) [][]float32 {
	l := len(m)
	acc := make([][]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayArrayMapFloat64Array(m [][]int64, f Int64ArrayToFloat64ArrayTransformer) [][]float64 {
	l := len(m)
	acc := make([][]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayArrayMapComplex64Array(m [][]int64, f Int64ArrayToComplex64ArrayTransformer) [][]complex64 {
	l := len(m)
	acc := make([][]complex64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayArrayMapComplex128Array(m [][]int64, f Int64ArrayToComplex128ArrayTransformer) [][]complex128 {
	l := len(m)
	acc := make([][]complex128, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayArrayMapAnyArray(m [][]int64, f Int64ArrayToAnyArrayTransformer) [][]Any {
	l := len(m)
	acc := make([][]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayArrayMapBoolOption(m [][]int64, f Int64ArrayToBoolOptionTransformer) []BoolOption {
	l := len(m)
	acc := make([]BoolOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayArrayMapStringOption(m [][]int64, f Int64ArrayToStringOptionTransformer) []StringOption {
	l := len(m)
	acc := make([]StringOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayArrayMapIntOption(m [][]int64, f Int64ArrayToIntOptionTransformer) []IntOption {
	l := len(m)
	acc := make([]IntOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayArrayMapInt8Option(m [][]int64, f Int64ArrayToInt8OptionTransformer) []Int8Option {
	l := len(m)
	acc := make([]Int8Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayArrayMapInt16Option(m [][]int64, f Int64ArrayToInt16OptionTransformer) []Int16Option {
	l := len(m)
	acc := make([]Int16Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayArrayMapInt32Option(m [][]int64, f Int64ArrayToInt32OptionTransformer) []Int32Option {
	l := len(m)
	acc := make([]Int32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayArrayMapInt64Option(m [][]int64, f Int64ArrayToInt64OptionTransformer) []Int64Option {
	l := len(m)
	acc := make([]Int64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayArrayMapUintOption(m [][]int64, f Int64ArrayToUintOptionTransformer) []UintOption {
	l := len(m)
	acc := make([]UintOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayArrayMapUint8Option(m [][]int64, f Int64ArrayToUint8OptionTransformer) []Uint8Option {
	l := len(m)
	acc := make([]Uint8Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayArrayMapUint16Option(m [][]int64, f Int64ArrayToUint16OptionTransformer) []Uint16Option {
	l := len(m)
	acc := make([]Uint16Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayArrayMapUint32Option(m [][]int64, f Int64ArrayToUint32OptionTransformer) []Uint32Option {
	l := len(m)
	acc := make([]Uint32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayArrayMapUint64Option(m [][]int64, f Int64ArrayToUint64OptionTransformer) []Uint64Option {
	l := len(m)
	acc := make([]Uint64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayArrayMapUintptrOption(m [][]int64, f Int64ArrayToUintptrOptionTransformer) []UintptrOption {
	l := len(m)
	acc := make([]UintptrOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayArrayMapByteOption(m [][]int64, f Int64ArrayToByteOptionTransformer) []ByteOption {
	l := len(m)
	acc := make([]ByteOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayArrayMapRuneOption(m [][]int64, f Int64ArrayToRuneOptionTransformer) []RuneOption {
	l := len(m)
	acc := make([]RuneOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayArrayMapFloat32Option(m [][]int64, f Int64ArrayToFloat32OptionTransformer) []Float32Option {
	l := len(m)
	acc := make([]Float32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayArrayMapFloat64Option(m [][]int64, f Int64ArrayToFloat64OptionTransformer) []Float64Option {
	l := len(m)
	acc := make([]Float64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayArrayMapComplex64Option(m [][]int64, f Int64ArrayToComplex64OptionTransformer) []Complex64Option {
	l := len(m)
	acc := make([]Complex64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayArrayMapComplex128Option(m [][]int64, f Int64ArrayToComplex128OptionTransformer) []Complex128Option {
	l := len(m)
	acc := make([]Complex128Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayArrayMapAnyOption(m [][]int64, f Int64ArrayToAnyOptionTransformer) []AnyOption {
	l := len(m)
	acc := make([]AnyOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintArrayArrayMapBool(m [][]uint, f UintArrayToBoolTransformer) []bool {
	l := len(m)
	acc := make([]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintArrayArrayMapString(m [][]uint, f UintArrayToStringTransformer) []string {
	l := len(m)
	acc := make([]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintArrayArrayMapInt(m [][]uint, f UintArrayToIntTransformer) []int {
	l := len(m)
	acc := make([]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintArrayArrayMapInt8(m [][]uint, f UintArrayToInt8Transformer) []int8 {
	l := len(m)
	acc := make([]int8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintArrayArrayMapInt16(m [][]uint, f UintArrayToInt16Transformer) []int16 {
	l := len(m)
	acc := make([]int16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintArrayArrayMapInt32(m [][]uint, f UintArrayToInt32Transformer) []int32 {
	l := len(m)
	acc := make([]int32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintArrayArrayMapInt64(m [][]uint, f UintArrayToInt64Transformer) []int64 {
	l := len(m)
	acc := make([]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintArrayArrayMapUint(m [][]uint, f UintArrayToUintTransformer) []uint {
	l := len(m)
	acc := make([]uint, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintArrayArrayMapUint8(m [][]uint, f UintArrayToUint8Transformer) []uint8 {
	l := len(m)
	acc := make([]uint8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintArrayArrayMapUint16(m [][]uint, f UintArrayToUint16Transformer) []uint16 {
	l := len(m)
	acc := make([]uint16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintArrayArrayMapUint32(m [][]uint, f UintArrayToUint32Transformer) []uint32 {
	l := len(m)
	acc := make([]uint32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintArrayArrayMapUint64(m [][]uint, f UintArrayToUint64Transformer) []uint64 {
	l := len(m)
	acc := make([]uint64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintArrayArrayMapUintptr(m [][]uint, f UintArrayToUintptrTransformer) []uintptr {
	l := len(m)
	acc := make([]uintptr, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintArrayArrayMapByte(m [][]uint, f UintArrayToByteTransformer) []byte {
	l := len(m)
	acc := make([]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintArrayArrayMapRune(m [][]uint, f UintArrayToRuneTransformer) []rune {
	l := len(m)
	acc := make([]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintArrayArrayMapFloat32(m [][]uint, f UintArrayToFloat32Transformer) []float32 {
	l := len(m)
	acc := make([]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintArrayArrayMapFloat64(m [][]uint, f UintArrayToFloat64Transformer) []float64 {
	l := len(m)
	acc := make([]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintArrayArrayMapComplex64(m [][]uint, f UintArrayToComplex64Transformer) []complex64 {
	l := len(m)
	acc := make([]complex64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintArrayArrayMapComplex128(m [][]uint, f UintArrayToComplex128Transformer) []complex128 {
	l := len(m)
	acc := make([]complex128, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintArrayArrayMapAny(m [][]uint, f UintArrayToAnyTransformer) []Any {
	l := len(m)
	acc := make([]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintArrayArrayMapBoolArray(m [][]uint, f UintArrayToBoolArrayTransformer) [][]bool {
	l := len(m)
	acc := make([][]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintArrayArrayMapStringArray(m [][]uint, f UintArrayToStringArrayTransformer) [][]string {
	l := len(m)
	acc := make([][]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintArrayArrayMapIntArray(m [][]uint, f UintArrayToIntArrayTransformer) [][]int {
	l := len(m)
	acc := make([][]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintArrayArrayMapInt8Array(m [][]uint, f UintArrayToInt8ArrayTransformer) [][]int8 {
	l := len(m)
	acc := make([][]int8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintArrayArrayMapInt16Array(m [][]uint, f UintArrayToInt16ArrayTransformer) [][]int16 {
	l := len(m)
	acc := make([][]int16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintArrayArrayMapInt32Array(m [][]uint, f UintArrayToInt32ArrayTransformer) [][]int32 {
	l := len(m)
	acc := make([][]int32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintArrayArrayMapInt64Array(m [][]uint, f UintArrayToInt64ArrayTransformer) [][]int64 {
	l := len(m)
	acc := make([][]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintArrayArrayMapUintArray(m [][]uint, f UintArrayToUintArrayTransformer) [][]uint {
	l := len(m)
	acc := make([][]uint, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintArrayArrayMapUint8Array(m [][]uint, f UintArrayToUint8ArrayTransformer) [][]uint8 {
	l := len(m)
	acc := make([][]uint8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintArrayArrayMapUint16Array(m [][]uint, f UintArrayToUint16ArrayTransformer) [][]uint16 {
	l := len(m)
	acc := make([][]uint16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintArrayArrayMapUint32Array(m [][]uint, f UintArrayToUint32ArrayTransformer) [][]uint32 {
	l := len(m)
	acc := make([][]uint32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintArrayArrayMapUint64Array(m [][]uint, f UintArrayToUint64ArrayTransformer) [][]uint64 {
	l := len(m)
	acc := make([][]uint64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintArrayArrayMapUintptrArray(m [][]uint, f UintArrayToUintptrArrayTransformer) [][]uintptr {
	l := len(m)
	acc := make([][]uintptr, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintArrayArrayMapByteArray(m [][]uint, f UintArrayToByteArrayTransformer) [][]byte {
	l := len(m)
	acc := make([][]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintArrayArrayMapRuneArray(m [][]uint, f UintArrayToRuneArrayTransformer) [][]rune {
	l := len(m)
	acc := make([][]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintArrayArrayMapFloat32Array(m [][]uint, f UintArrayToFloat32ArrayTransformer) [][]float32 {
	l := len(m)
	acc := make([][]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintArrayArrayMapFloat64Array(m [][]uint, f UintArrayToFloat64ArrayTransformer) [][]float64 {
	l := len(m)
	acc := make([][]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintArrayArrayMapComplex64Array(m [][]uint, f UintArrayToComplex64ArrayTransformer) [][]complex64 {
	l := len(m)
	acc := make([][]complex64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintArrayArrayMapComplex128Array(m [][]uint, f UintArrayToComplex128ArrayTransformer) [][]complex128 {
	l := len(m)
	acc := make([][]complex128, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintArrayArrayMapAnyArray(m [][]uint, f UintArrayToAnyArrayTransformer) [][]Any {
	l := len(m)
	acc := make([][]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintArrayArrayMapBoolOption(m [][]uint, f UintArrayToBoolOptionTransformer) []BoolOption {
	l := len(m)
	acc := make([]BoolOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintArrayArrayMapStringOption(m [][]uint, f UintArrayToStringOptionTransformer) []StringOption {
	l := len(m)
	acc := make([]StringOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintArrayArrayMapIntOption(m [][]uint, f UintArrayToIntOptionTransformer) []IntOption {
	l := len(m)
	acc := make([]IntOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintArrayArrayMapInt8Option(m [][]uint, f UintArrayToInt8OptionTransformer) []Int8Option {
	l := len(m)
	acc := make([]Int8Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintArrayArrayMapInt16Option(m [][]uint, f UintArrayToInt16OptionTransformer) []Int16Option {
	l := len(m)
	acc := make([]Int16Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintArrayArrayMapInt32Option(m [][]uint, f UintArrayToInt32OptionTransformer) []Int32Option {
	l := len(m)
	acc := make([]Int32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintArrayArrayMapInt64Option(m [][]uint, f UintArrayToInt64OptionTransformer) []Int64Option {
	l := len(m)
	acc := make([]Int64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintArrayArrayMapUintOption(m [][]uint, f UintArrayToUintOptionTransformer) []UintOption {
	l := len(m)
	acc := make([]UintOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintArrayArrayMapUint8Option(m [][]uint, f UintArrayToUint8OptionTransformer) []Uint8Option {
	l := len(m)
	acc := make([]Uint8Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintArrayArrayMapUint16Option(m [][]uint, f UintArrayToUint16OptionTransformer) []Uint16Option {
	l := len(m)
	acc := make([]Uint16Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintArrayArrayMapUint32Option(m [][]uint, f UintArrayToUint32OptionTransformer) []Uint32Option {
	l := len(m)
	acc := make([]Uint32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintArrayArrayMapUint64Option(m [][]uint, f UintArrayToUint64OptionTransformer) []Uint64Option {
	l := len(m)
	acc := make([]Uint64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintArrayArrayMapUintptrOption(m [][]uint, f UintArrayToUintptrOptionTransformer) []UintptrOption {
	l := len(m)
	acc := make([]UintptrOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintArrayArrayMapByteOption(m [][]uint, f UintArrayToByteOptionTransformer) []ByteOption {
	l := len(m)
	acc := make([]ByteOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintArrayArrayMapRuneOption(m [][]uint, f UintArrayToRuneOptionTransformer) []RuneOption {
	l := len(m)
	acc := make([]RuneOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintArrayArrayMapFloat32Option(m [][]uint, f UintArrayToFloat32OptionTransformer) []Float32Option {
	l := len(m)
	acc := make([]Float32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintArrayArrayMapFloat64Option(m [][]uint, f UintArrayToFloat64OptionTransformer) []Float64Option {
	l := len(m)
	acc := make([]Float64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintArrayArrayMapComplex64Option(m [][]uint, f UintArrayToComplex64OptionTransformer) []Complex64Option {
	l := len(m)
	acc := make([]Complex64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintArrayArrayMapComplex128Option(m [][]uint, f UintArrayToComplex128OptionTransformer) []Complex128Option {
	l := len(m)
	acc := make([]Complex128Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintArrayArrayMapAnyOption(m [][]uint, f UintArrayToAnyOptionTransformer) []AnyOption {
	l := len(m)
	acc := make([]AnyOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8ArrayArrayMapBool(m [][]uint8, f Uint8ArrayToBoolTransformer) []bool {
	l := len(m)
	acc := make([]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8ArrayArrayMapString(m [][]uint8, f Uint8ArrayToStringTransformer) []string {
	l := len(m)
	acc := make([]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8ArrayArrayMapInt(m [][]uint8, f Uint8ArrayToIntTransformer) []int {
	l := len(m)
	acc := make([]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8ArrayArrayMapInt8(m [][]uint8, f Uint8ArrayToInt8Transformer) []int8 {
	l := len(m)
	acc := make([]int8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8ArrayArrayMapInt16(m [][]uint8, f Uint8ArrayToInt16Transformer) []int16 {
	l := len(m)
	acc := make([]int16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8ArrayArrayMapInt32(m [][]uint8, f Uint8ArrayToInt32Transformer) []int32 {
	l := len(m)
	acc := make([]int32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8ArrayArrayMapInt64(m [][]uint8, f Uint8ArrayToInt64Transformer) []int64 {
	l := len(m)
	acc := make([]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8ArrayArrayMapUint(m [][]uint8, f Uint8ArrayToUintTransformer) []uint {
	l := len(m)
	acc := make([]uint, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8ArrayArrayMapUint8(m [][]uint8, f Uint8ArrayToUint8Transformer) []uint8 {
	l := len(m)
	acc := make([]uint8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8ArrayArrayMapUint16(m [][]uint8, f Uint8ArrayToUint16Transformer) []uint16 {
	l := len(m)
	acc := make([]uint16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8ArrayArrayMapUint32(m [][]uint8, f Uint8ArrayToUint32Transformer) []uint32 {
	l := len(m)
	acc := make([]uint32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8ArrayArrayMapUint64(m [][]uint8, f Uint8ArrayToUint64Transformer) []uint64 {
	l := len(m)
	acc := make([]uint64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8ArrayArrayMapUintptr(m [][]uint8, f Uint8ArrayToUintptrTransformer) []uintptr {
	l := len(m)
	acc := make([]uintptr, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8ArrayArrayMapByte(m [][]uint8, f Uint8ArrayToByteTransformer) []byte {
	l := len(m)
	acc := make([]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8ArrayArrayMapRune(m [][]uint8, f Uint8ArrayToRuneTransformer) []rune {
	l := len(m)
	acc := make([]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8ArrayArrayMapFloat32(m [][]uint8, f Uint8ArrayToFloat32Transformer) []float32 {
	l := len(m)
	acc := make([]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8ArrayArrayMapFloat64(m [][]uint8, f Uint8ArrayToFloat64Transformer) []float64 {
	l := len(m)
	acc := make([]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8ArrayArrayMapComplex64(m [][]uint8, f Uint8ArrayToComplex64Transformer) []complex64 {
	l := len(m)
	acc := make([]complex64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8ArrayArrayMapComplex128(m [][]uint8, f Uint8ArrayToComplex128Transformer) []complex128 {
	l := len(m)
	acc := make([]complex128, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8ArrayArrayMapAny(m [][]uint8, f Uint8ArrayToAnyTransformer) []Any {
	l := len(m)
	acc := make([]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8ArrayArrayMapBoolArray(m [][]uint8, f Uint8ArrayToBoolArrayTransformer) [][]bool {
	l := len(m)
	acc := make([][]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8ArrayArrayMapStringArray(m [][]uint8, f Uint8ArrayToStringArrayTransformer) [][]string {
	l := len(m)
	acc := make([][]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8ArrayArrayMapIntArray(m [][]uint8, f Uint8ArrayToIntArrayTransformer) [][]int {
	l := len(m)
	acc := make([][]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8ArrayArrayMapInt8Array(m [][]uint8, f Uint8ArrayToInt8ArrayTransformer) [][]int8 {
	l := len(m)
	acc := make([][]int8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8ArrayArrayMapInt16Array(m [][]uint8, f Uint8ArrayToInt16ArrayTransformer) [][]int16 {
	l := len(m)
	acc := make([][]int16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8ArrayArrayMapInt32Array(m [][]uint8, f Uint8ArrayToInt32ArrayTransformer) [][]int32 {
	l := len(m)
	acc := make([][]int32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8ArrayArrayMapInt64Array(m [][]uint8, f Uint8ArrayToInt64ArrayTransformer) [][]int64 {
	l := len(m)
	acc := make([][]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8ArrayArrayMapUintArray(m [][]uint8, f Uint8ArrayToUintArrayTransformer) [][]uint {
	l := len(m)
	acc := make([][]uint, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8ArrayArrayMapUint8Array(m [][]uint8, f Uint8ArrayToUint8ArrayTransformer) [][]uint8 {
	l := len(m)
	acc := make([][]uint8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8ArrayArrayMapUint16Array(m [][]uint8, f Uint8ArrayToUint16ArrayTransformer) [][]uint16 {
	l := len(m)
	acc := make([][]uint16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8ArrayArrayMapUint32Array(m [][]uint8, f Uint8ArrayToUint32ArrayTransformer) [][]uint32 {
	l := len(m)
	acc := make([][]uint32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8ArrayArrayMapUint64Array(m [][]uint8, f Uint8ArrayToUint64ArrayTransformer) [][]uint64 {
	l := len(m)
	acc := make([][]uint64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8ArrayArrayMapUintptrArray(m [][]uint8, f Uint8ArrayToUintptrArrayTransformer) [][]uintptr {
	l := len(m)
	acc := make([][]uintptr, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8ArrayArrayMapByteArray(m [][]uint8, f Uint8ArrayToByteArrayTransformer) [][]byte {
	l := len(m)
	acc := make([][]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8ArrayArrayMapRuneArray(m [][]uint8, f Uint8ArrayToRuneArrayTransformer) [][]rune {
	l := len(m)
	acc := make([][]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8ArrayArrayMapFloat32Array(m [][]uint8, f Uint8ArrayToFloat32ArrayTransformer) [][]float32 {
	l := len(m)
	acc := make([][]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8ArrayArrayMapFloat64Array(m [][]uint8, f Uint8ArrayToFloat64ArrayTransformer) [][]float64 {
	l := len(m)
	acc := make([][]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8ArrayArrayMapComplex64Array(m [][]uint8, f Uint8ArrayToComplex64ArrayTransformer) [][]complex64 {
	l := len(m)
	acc := make([][]complex64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8ArrayArrayMapComplex128Array(m [][]uint8, f Uint8ArrayToComplex128ArrayTransformer) [][]complex128 {
	l := len(m)
	acc := make([][]complex128, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8ArrayArrayMapAnyArray(m [][]uint8, f Uint8ArrayToAnyArrayTransformer) [][]Any {
	l := len(m)
	acc := make([][]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8ArrayArrayMapBoolOption(m [][]uint8, f Uint8ArrayToBoolOptionTransformer) []BoolOption {
	l := len(m)
	acc := make([]BoolOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8ArrayArrayMapStringOption(m [][]uint8, f Uint8ArrayToStringOptionTransformer) []StringOption {
	l := len(m)
	acc := make([]StringOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8ArrayArrayMapIntOption(m [][]uint8, f Uint8ArrayToIntOptionTransformer) []IntOption {
	l := len(m)
	acc := make([]IntOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8ArrayArrayMapInt8Option(m [][]uint8, f Uint8ArrayToInt8OptionTransformer) []Int8Option {
	l := len(m)
	acc := make([]Int8Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8ArrayArrayMapInt16Option(m [][]uint8, f Uint8ArrayToInt16OptionTransformer) []Int16Option {
	l := len(m)
	acc := make([]Int16Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8ArrayArrayMapInt32Option(m [][]uint8, f Uint8ArrayToInt32OptionTransformer) []Int32Option {
	l := len(m)
	acc := make([]Int32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8ArrayArrayMapInt64Option(m [][]uint8, f Uint8ArrayToInt64OptionTransformer) []Int64Option {
	l := len(m)
	acc := make([]Int64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8ArrayArrayMapUintOption(m [][]uint8, f Uint8ArrayToUintOptionTransformer) []UintOption {
	l := len(m)
	acc := make([]UintOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8ArrayArrayMapUint8Option(m [][]uint8, f Uint8ArrayToUint8OptionTransformer) []Uint8Option {
	l := len(m)
	acc := make([]Uint8Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8ArrayArrayMapUint16Option(m [][]uint8, f Uint8ArrayToUint16OptionTransformer) []Uint16Option {
	l := len(m)
	acc := make([]Uint16Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8ArrayArrayMapUint32Option(m [][]uint8, f Uint8ArrayToUint32OptionTransformer) []Uint32Option {
	l := len(m)
	acc := make([]Uint32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8ArrayArrayMapUint64Option(m [][]uint8, f Uint8ArrayToUint64OptionTransformer) []Uint64Option {
	l := len(m)
	acc := make([]Uint64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8ArrayArrayMapUintptrOption(m [][]uint8, f Uint8ArrayToUintptrOptionTransformer) []UintptrOption {
	l := len(m)
	acc := make([]UintptrOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8ArrayArrayMapByteOption(m [][]uint8, f Uint8ArrayToByteOptionTransformer) []ByteOption {
	l := len(m)
	acc := make([]ByteOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8ArrayArrayMapRuneOption(m [][]uint8, f Uint8ArrayToRuneOptionTransformer) []RuneOption {
	l := len(m)
	acc := make([]RuneOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8ArrayArrayMapFloat32Option(m [][]uint8, f Uint8ArrayToFloat32OptionTransformer) []Float32Option {
	l := len(m)
	acc := make([]Float32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8ArrayArrayMapFloat64Option(m [][]uint8, f Uint8ArrayToFloat64OptionTransformer) []Float64Option {
	l := len(m)
	acc := make([]Float64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8ArrayArrayMapComplex64Option(m [][]uint8, f Uint8ArrayToComplex64OptionTransformer) []Complex64Option {
	l := len(m)
	acc := make([]Complex64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8ArrayArrayMapComplex128Option(m [][]uint8, f Uint8ArrayToComplex128OptionTransformer) []Complex128Option {
	l := len(m)
	acc := make([]Complex128Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8ArrayArrayMapAnyOption(m [][]uint8, f Uint8ArrayToAnyOptionTransformer) []AnyOption {
	l := len(m)
	acc := make([]AnyOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16ArrayArrayMapBool(m [][]uint16, f Uint16ArrayToBoolTransformer) []bool {
	l := len(m)
	acc := make([]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16ArrayArrayMapString(m [][]uint16, f Uint16ArrayToStringTransformer) []string {
	l := len(m)
	acc := make([]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16ArrayArrayMapInt(m [][]uint16, f Uint16ArrayToIntTransformer) []int {
	l := len(m)
	acc := make([]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16ArrayArrayMapInt8(m [][]uint16, f Uint16ArrayToInt8Transformer) []int8 {
	l := len(m)
	acc := make([]int8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16ArrayArrayMapInt16(m [][]uint16, f Uint16ArrayToInt16Transformer) []int16 {
	l := len(m)
	acc := make([]int16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16ArrayArrayMapInt32(m [][]uint16, f Uint16ArrayToInt32Transformer) []int32 {
	l := len(m)
	acc := make([]int32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16ArrayArrayMapInt64(m [][]uint16, f Uint16ArrayToInt64Transformer) []int64 {
	l := len(m)
	acc := make([]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16ArrayArrayMapUint(m [][]uint16, f Uint16ArrayToUintTransformer) []uint {
	l := len(m)
	acc := make([]uint, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16ArrayArrayMapUint8(m [][]uint16, f Uint16ArrayToUint8Transformer) []uint8 {
	l := len(m)
	acc := make([]uint8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16ArrayArrayMapUint16(m [][]uint16, f Uint16ArrayToUint16Transformer) []uint16 {
	l := len(m)
	acc := make([]uint16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16ArrayArrayMapUint32(m [][]uint16, f Uint16ArrayToUint32Transformer) []uint32 {
	l := len(m)
	acc := make([]uint32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16ArrayArrayMapUint64(m [][]uint16, f Uint16ArrayToUint64Transformer) []uint64 {
	l := len(m)
	acc := make([]uint64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16ArrayArrayMapUintptr(m [][]uint16, f Uint16ArrayToUintptrTransformer) []uintptr {
	l := len(m)
	acc := make([]uintptr, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16ArrayArrayMapByte(m [][]uint16, f Uint16ArrayToByteTransformer) []byte {
	l := len(m)
	acc := make([]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16ArrayArrayMapRune(m [][]uint16, f Uint16ArrayToRuneTransformer) []rune {
	l := len(m)
	acc := make([]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16ArrayArrayMapFloat32(m [][]uint16, f Uint16ArrayToFloat32Transformer) []float32 {
	l := len(m)
	acc := make([]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16ArrayArrayMapFloat64(m [][]uint16, f Uint16ArrayToFloat64Transformer) []float64 {
	l := len(m)
	acc := make([]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16ArrayArrayMapComplex64(m [][]uint16, f Uint16ArrayToComplex64Transformer) []complex64 {
	l := len(m)
	acc := make([]complex64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16ArrayArrayMapComplex128(m [][]uint16, f Uint16ArrayToComplex128Transformer) []complex128 {
	l := len(m)
	acc := make([]complex128, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16ArrayArrayMapAny(m [][]uint16, f Uint16ArrayToAnyTransformer) []Any {
	l := len(m)
	acc := make([]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16ArrayArrayMapBoolArray(m [][]uint16, f Uint16ArrayToBoolArrayTransformer) [][]bool {
	l := len(m)
	acc := make([][]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16ArrayArrayMapStringArray(m [][]uint16, f Uint16ArrayToStringArrayTransformer) [][]string {
	l := len(m)
	acc := make([][]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16ArrayArrayMapIntArray(m [][]uint16, f Uint16ArrayToIntArrayTransformer) [][]int {
	l := len(m)
	acc := make([][]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16ArrayArrayMapInt8Array(m [][]uint16, f Uint16ArrayToInt8ArrayTransformer) [][]int8 {
	l := len(m)
	acc := make([][]int8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16ArrayArrayMapInt16Array(m [][]uint16, f Uint16ArrayToInt16ArrayTransformer) [][]int16 {
	l := len(m)
	acc := make([][]int16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16ArrayArrayMapInt32Array(m [][]uint16, f Uint16ArrayToInt32ArrayTransformer) [][]int32 {
	l := len(m)
	acc := make([][]int32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16ArrayArrayMapInt64Array(m [][]uint16, f Uint16ArrayToInt64ArrayTransformer) [][]int64 {
	l := len(m)
	acc := make([][]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16ArrayArrayMapUintArray(m [][]uint16, f Uint16ArrayToUintArrayTransformer) [][]uint {
	l := len(m)
	acc := make([][]uint, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16ArrayArrayMapUint8Array(m [][]uint16, f Uint16ArrayToUint8ArrayTransformer) [][]uint8 {
	l := len(m)
	acc := make([][]uint8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16ArrayArrayMapUint16Array(m [][]uint16, f Uint16ArrayToUint16ArrayTransformer) [][]uint16 {
	l := len(m)
	acc := make([][]uint16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16ArrayArrayMapUint32Array(m [][]uint16, f Uint16ArrayToUint32ArrayTransformer) [][]uint32 {
	l := len(m)
	acc := make([][]uint32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16ArrayArrayMapUint64Array(m [][]uint16, f Uint16ArrayToUint64ArrayTransformer) [][]uint64 {
	l := len(m)
	acc := make([][]uint64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16ArrayArrayMapUintptrArray(m [][]uint16, f Uint16ArrayToUintptrArrayTransformer) [][]uintptr {
	l := len(m)
	acc := make([][]uintptr, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16ArrayArrayMapByteArray(m [][]uint16, f Uint16ArrayToByteArrayTransformer) [][]byte {
	l := len(m)
	acc := make([][]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16ArrayArrayMapRuneArray(m [][]uint16, f Uint16ArrayToRuneArrayTransformer) [][]rune {
	l := len(m)
	acc := make([][]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16ArrayArrayMapFloat32Array(m [][]uint16, f Uint16ArrayToFloat32ArrayTransformer) [][]float32 {
	l := len(m)
	acc := make([][]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16ArrayArrayMapFloat64Array(m [][]uint16, f Uint16ArrayToFloat64ArrayTransformer) [][]float64 {
	l := len(m)
	acc := make([][]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16ArrayArrayMapComplex64Array(m [][]uint16, f Uint16ArrayToComplex64ArrayTransformer) [][]complex64 {
	l := len(m)
	acc := make([][]complex64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16ArrayArrayMapComplex128Array(m [][]uint16, f Uint16ArrayToComplex128ArrayTransformer) [][]complex128 {
	l := len(m)
	acc := make([][]complex128, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16ArrayArrayMapAnyArray(m [][]uint16, f Uint16ArrayToAnyArrayTransformer) [][]Any {
	l := len(m)
	acc := make([][]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16ArrayArrayMapBoolOption(m [][]uint16, f Uint16ArrayToBoolOptionTransformer) []BoolOption {
	l := len(m)
	acc := make([]BoolOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16ArrayArrayMapStringOption(m [][]uint16, f Uint16ArrayToStringOptionTransformer) []StringOption {
	l := len(m)
	acc := make([]StringOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16ArrayArrayMapIntOption(m [][]uint16, f Uint16ArrayToIntOptionTransformer) []IntOption {
	l := len(m)
	acc := make([]IntOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16ArrayArrayMapInt8Option(m [][]uint16, f Uint16ArrayToInt8OptionTransformer) []Int8Option {
	l := len(m)
	acc := make([]Int8Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16ArrayArrayMapInt16Option(m [][]uint16, f Uint16ArrayToInt16OptionTransformer) []Int16Option {
	l := len(m)
	acc := make([]Int16Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16ArrayArrayMapInt32Option(m [][]uint16, f Uint16ArrayToInt32OptionTransformer) []Int32Option {
	l := len(m)
	acc := make([]Int32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16ArrayArrayMapInt64Option(m [][]uint16, f Uint16ArrayToInt64OptionTransformer) []Int64Option {
	l := len(m)
	acc := make([]Int64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16ArrayArrayMapUintOption(m [][]uint16, f Uint16ArrayToUintOptionTransformer) []UintOption {
	l := len(m)
	acc := make([]UintOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16ArrayArrayMapUint8Option(m [][]uint16, f Uint16ArrayToUint8OptionTransformer) []Uint8Option {
	l := len(m)
	acc := make([]Uint8Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16ArrayArrayMapUint16Option(m [][]uint16, f Uint16ArrayToUint16OptionTransformer) []Uint16Option {
	l := len(m)
	acc := make([]Uint16Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16ArrayArrayMapUint32Option(m [][]uint16, f Uint16ArrayToUint32OptionTransformer) []Uint32Option {
	l := len(m)
	acc := make([]Uint32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16ArrayArrayMapUint64Option(m [][]uint16, f Uint16ArrayToUint64OptionTransformer) []Uint64Option {
	l := len(m)
	acc := make([]Uint64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16ArrayArrayMapUintptrOption(m [][]uint16, f Uint16ArrayToUintptrOptionTransformer) []UintptrOption {
	l := len(m)
	acc := make([]UintptrOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16ArrayArrayMapByteOption(m [][]uint16, f Uint16ArrayToByteOptionTransformer) []ByteOption {
	l := len(m)
	acc := make([]ByteOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16ArrayArrayMapRuneOption(m [][]uint16, f Uint16ArrayToRuneOptionTransformer) []RuneOption {
	l := len(m)
	acc := make([]RuneOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16ArrayArrayMapFloat32Option(m [][]uint16, f Uint16ArrayToFloat32OptionTransformer) []Float32Option {
	l := len(m)
	acc := make([]Float32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16ArrayArrayMapFloat64Option(m [][]uint16, f Uint16ArrayToFloat64OptionTransformer) []Float64Option {
	l := len(m)
	acc := make([]Float64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16ArrayArrayMapComplex64Option(m [][]uint16, f Uint16ArrayToComplex64OptionTransformer) []Complex64Option {
	l := len(m)
	acc := make([]Complex64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16ArrayArrayMapComplex128Option(m [][]uint16, f Uint16ArrayToComplex128OptionTransformer) []Complex128Option {
	l := len(m)
	acc := make([]Complex128Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16ArrayArrayMapAnyOption(m [][]uint16, f Uint16ArrayToAnyOptionTransformer) []AnyOption {
	l := len(m)
	acc := make([]AnyOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32ArrayArrayMapBool(m [][]uint32, f Uint32ArrayToBoolTransformer) []bool {
	l := len(m)
	acc := make([]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32ArrayArrayMapString(m [][]uint32, f Uint32ArrayToStringTransformer) []string {
	l := len(m)
	acc := make([]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32ArrayArrayMapInt(m [][]uint32, f Uint32ArrayToIntTransformer) []int {
	l := len(m)
	acc := make([]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32ArrayArrayMapInt8(m [][]uint32, f Uint32ArrayToInt8Transformer) []int8 {
	l := len(m)
	acc := make([]int8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32ArrayArrayMapInt16(m [][]uint32, f Uint32ArrayToInt16Transformer) []int16 {
	l := len(m)
	acc := make([]int16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32ArrayArrayMapInt32(m [][]uint32, f Uint32ArrayToInt32Transformer) []int32 {
	l := len(m)
	acc := make([]int32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32ArrayArrayMapInt64(m [][]uint32, f Uint32ArrayToInt64Transformer) []int64 {
	l := len(m)
	acc := make([]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32ArrayArrayMapUint(m [][]uint32, f Uint32ArrayToUintTransformer) []uint {
	l := len(m)
	acc := make([]uint, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32ArrayArrayMapUint8(m [][]uint32, f Uint32ArrayToUint8Transformer) []uint8 {
	l := len(m)
	acc := make([]uint8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32ArrayArrayMapUint16(m [][]uint32, f Uint32ArrayToUint16Transformer) []uint16 {
	l := len(m)
	acc := make([]uint16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32ArrayArrayMapUint32(m [][]uint32, f Uint32ArrayToUint32Transformer) []uint32 {
	l := len(m)
	acc := make([]uint32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32ArrayArrayMapUint64(m [][]uint32, f Uint32ArrayToUint64Transformer) []uint64 {
	l := len(m)
	acc := make([]uint64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32ArrayArrayMapUintptr(m [][]uint32, f Uint32ArrayToUintptrTransformer) []uintptr {
	l := len(m)
	acc := make([]uintptr, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32ArrayArrayMapByte(m [][]uint32, f Uint32ArrayToByteTransformer) []byte {
	l := len(m)
	acc := make([]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32ArrayArrayMapRune(m [][]uint32, f Uint32ArrayToRuneTransformer) []rune {
	l := len(m)
	acc := make([]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32ArrayArrayMapFloat32(m [][]uint32, f Uint32ArrayToFloat32Transformer) []float32 {
	l := len(m)
	acc := make([]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32ArrayArrayMapFloat64(m [][]uint32, f Uint32ArrayToFloat64Transformer) []float64 {
	l := len(m)
	acc := make([]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32ArrayArrayMapComplex64(m [][]uint32, f Uint32ArrayToComplex64Transformer) []complex64 {
	l := len(m)
	acc := make([]complex64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32ArrayArrayMapComplex128(m [][]uint32, f Uint32ArrayToComplex128Transformer) []complex128 {
	l := len(m)
	acc := make([]complex128, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32ArrayArrayMapAny(m [][]uint32, f Uint32ArrayToAnyTransformer) []Any {
	l := len(m)
	acc := make([]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32ArrayArrayMapBoolArray(m [][]uint32, f Uint32ArrayToBoolArrayTransformer) [][]bool {
	l := len(m)
	acc := make([][]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32ArrayArrayMapStringArray(m [][]uint32, f Uint32ArrayToStringArrayTransformer) [][]string {
	l := len(m)
	acc := make([][]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32ArrayArrayMapIntArray(m [][]uint32, f Uint32ArrayToIntArrayTransformer) [][]int {
	l := len(m)
	acc := make([][]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32ArrayArrayMapInt8Array(m [][]uint32, f Uint32ArrayToInt8ArrayTransformer) [][]int8 {
	l := len(m)
	acc := make([][]int8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32ArrayArrayMapInt16Array(m [][]uint32, f Uint32ArrayToInt16ArrayTransformer) [][]int16 {
	l := len(m)
	acc := make([][]int16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32ArrayArrayMapInt32Array(m [][]uint32, f Uint32ArrayToInt32ArrayTransformer) [][]int32 {
	l := len(m)
	acc := make([][]int32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32ArrayArrayMapInt64Array(m [][]uint32, f Uint32ArrayToInt64ArrayTransformer) [][]int64 {
	l := len(m)
	acc := make([][]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32ArrayArrayMapUintArray(m [][]uint32, f Uint32ArrayToUintArrayTransformer) [][]uint {
	l := len(m)
	acc := make([][]uint, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32ArrayArrayMapUint8Array(m [][]uint32, f Uint32ArrayToUint8ArrayTransformer) [][]uint8 {
	l := len(m)
	acc := make([][]uint8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32ArrayArrayMapUint16Array(m [][]uint32, f Uint32ArrayToUint16ArrayTransformer) [][]uint16 {
	l := len(m)
	acc := make([][]uint16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32ArrayArrayMapUint32Array(m [][]uint32, f Uint32ArrayToUint32ArrayTransformer) [][]uint32 {
	l := len(m)
	acc := make([][]uint32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32ArrayArrayMapUint64Array(m [][]uint32, f Uint32ArrayToUint64ArrayTransformer) [][]uint64 {
	l := len(m)
	acc := make([][]uint64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32ArrayArrayMapUintptrArray(m [][]uint32, f Uint32ArrayToUintptrArrayTransformer) [][]uintptr {
	l := len(m)
	acc := make([][]uintptr, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32ArrayArrayMapByteArray(m [][]uint32, f Uint32ArrayToByteArrayTransformer) [][]byte {
	l := len(m)
	acc := make([][]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32ArrayArrayMapRuneArray(m [][]uint32, f Uint32ArrayToRuneArrayTransformer) [][]rune {
	l := len(m)
	acc := make([][]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32ArrayArrayMapFloat32Array(m [][]uint32, f Uint32ArrayToFloat32ArrayTransformer) [][]float32 {
	l := len(m)
	acc := make([][]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32ArrayArrayMapFloat64Array(m [][]uint32, f Uint32ArrayToFloat64ArrayTransformer) [][]float64 {
	l := len(m)
	acc := make([][]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32ArrayArrayMapComplex64Array(m [][]uint32, f Uint32ArrayToComplex64ArrayTransformer) [][]complex64 {
	l := len(m)
	acc := make([][]complex64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32ArrayArrayMapComplex128Array(m [][]uint32, f Uint32ArrayToComplex128ArrayTransformer) [][]complex128 {
	l := len(m)
	acc := make([][]complex128, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32ArrayArrayMapAnyArray(m [][]uint32, f Uint32ArrayToAnyArrayTransformer) [][]Any {
	l := len(m)
	acc := make([][]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32ArrayArrayMapBoolOption(m [][]uint32, f Uint32ArrayToBoolOptionTransformer) []BoolOption {
	l := len(m)
	acc := make([]BoolOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32ArrayArrayMapStringOption(m [][]uint32, f Uint32ArrayToStringOptionTransformer) []StringOption {
	l := len(m)
	acc := make([]StringOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32ArrayArrayMapIntOption(m [][]uint32, f Uint32ArrayToIntOptionTransformer) []IntOption {
	l := len(m)
	acc := make([]IntOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32ArrayArrayMapInt8Option(m [][]uint32, f Uint32ArrayToInt8OptionTransformer) []Int8Option {
	l := len(m)
	acc := make([]Int8Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32ArrayArrayMapInt16Option(m [][]uint32, f Uint32ArrayToInt16OptionTransformer) []Int16Option {
	l := len(m)
	acc := make([]Int16Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32ArrayArrayMapInt32Option(m [][]uint32, f Uint32ArrayToInt32OptionTransformer) []Int32Option {
	l := len(m)
	acc := make([]Int32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32ArrayArrayMapInt64Option(m [][]uint32, f Uint32ArrayToInt64OptionTransformer) []Int64Option {
	l := len(m)
	acc := make([]Int64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32ArrayArrayMapUintOption(m [][]uint32, f Uint32ArrayToUintOptionTransformer) []UintOption {
	l := len(m)
	acc := make([]UintOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32ArrayArrayMapUint8Option(m [][]uint32, f Uint32ArrayToUint8OptionTransformer) []Uint8Option {
	l := len(m)
	acc := make([]Uint8Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32ArrayArrayMapUint16Option(m [][]uint32, f Uint32ArrayToUint16OptionTransformer) []Uint16Option {
	l := len(m)
	acc := make([]Uint16Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32ArrayArrayMapUint32Option(m [][]uint32, f Uint32ArrayToUint32OptionTransformer) []Uint32Option {
	l := len(m)
	acc := make([]Uint32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32ArrayArrayMapUint64Option(m [][]uint32, f Uint32ArrayToUint64OptionTransformer) []Uint64Option {
	l := len(m)
	acc := make([]Uint64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32ArrayArrayMapUintptrOption(m [][]uint32, f Uint32ArrayToUintptrOptionTransformer) []UintptrOption {
	l := len(m)
	acc := make([]UintptrOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32ArrayArrayMapByteOption(m [][]uint32, f Uint32ArrayToByteOptionTransformer) []ByteOption {
	l := len(m)
	acc := make([]ByteOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32ArrayArrayMapRuneOption(m [][]uint32, f Uint32ArrayToRuneOptionTransformer) []RuneOption {
	l := len(m)
	acc := make([]RuneOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32ArrayArrayMapFloat32Option(m [][]uint32, f Uint32ArrayToFloat32OptionTransformer) []Float32Option {
	l := len(m)
	acc := make([]Float32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32ArrayArrayMapFloat64Option(m [][]uint32, f Uint32ArrayToFloat64OptionTransformer) []Float64Option {
	l := len(m)
	acc := make([]Float64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32ArrayArrayMapComplex64Option(m [][]uint32, f Uint32ArrayToComplex64OptionTransformer) []Complex64Option {
	l := len(m)
	acc := make([]Complex64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32ArrayArrayMapComplex128Option(m [][]uint32, f Uint32ArrayToComplex128OptionTransformer) []Complex128Option {
	l := len(m)
	acc := make([]Complex128Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32ArrayArrayMapAnyOption(m [][]uint32, f Uint32ArrayToAnyOptionTransformer) []AnyOption {
	l := len(m)
	acc := make([]AnyOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64ArrayArrayMapBool(m [][]uint64, f Uint64ArrayToBoolTransformer) []bool {
	l := len(m)
	acc := make([]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64ArrayArrayMapString(m [][]uint64, f Uint64ArrayToStringTransformer) []string {
	l := len(m)
	acc := make([]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64ArrayArrayMapInt(m [][]uint64, f Uint64ArrayToIntTransformer) []int {
	l := len(m)
	acc := make([]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64ArrayArrayMapInt8(m [][]uint64, f Uint64ArrayToInt8Transformer) []int8 {
	l := len(m)
	acc := make([]int8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64ArrayArrayMapInt16(m [][]uint64, f Uint64ArrayToInt16Transformer) []int16 {
	l := len(m)
	acc := make([]int16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64ArrayArrayMapInt32(m [][]uint64, f Uint64ArrayToInt32Transformer) []int32 {
	l := len(m)
	acc := make([]int32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64ArrayArrayMapInt64(m [][]uint64, f Uint64ArrayToInt64Transformer) []int64 {
	l := len(m)
	acc := make([]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64ArrayArrayMapUint(m [][]uint64, f Uint64ArrayToUintTransformer) []uint {
	l := len(m)
	acc := make([]uint, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64ArrayArrayMapUint8(m [][]uint64, f Uint64ArrayToUint8Transformer) []uint8 {
	l := len(m)
	acc := make([]uint8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64ArrayArrayMapUint16(m [][]uint64, f Uint64ArrayToUint16Transformer) []uint16 {
	l := len(m)
	acc := make([]uint16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64ArrayArrayMapUint32(m [][]uint64, f Uint64ArrayToUint32Transformer) []uint32 {
	l := len(m)
	acc := make([]uint32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64ArrayArrayMapUint64(m [][]uint64, f Uint64ArrayToUint64Transformer) []uint64 {
	l := len(m)
	acc := make([]uint64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64ArrayArrayMapUintptr(m [][]uint64, f Uint64ArrayToUintptrTransformer) []uintptr {
	l := len(m)
	acc := make([]uintptr, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64ArrayArrayMapByte(m [][]uint64, f Uint64ArrayToByteTransformer) []byte {
	l := len(m)
	acc := make([]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64ArrayArrayMapRune(m [][]uint64, f Uint64ArrayToRuneTransformer) []rune {
	l := len(m)
	acc := make([]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64ArrayArrayMapFloat32(m [][]uint64, f Uint64ArrayToFloat32Transformer) []float32 {
	l := len(m)
	acc := make([]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64ArrayArrayMapFloat64(m [][]uint64, f Uint64ArrayToFloat64Transformer) []float64 {
	l := len(m)
	acc := make([]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64ArrayArrayMapComplex64(m [][]uint64, f Uint64ArrayToComplex64Transformer) []complex64 {
	l := len(m)
	acc := make([]complex64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64ArrayArrayMapComplex128(m [][]uint64, f Uint64ArrayToComplex128Transformer) []complex128 {
	l := len(m)
	acc := make([]complex128, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64ArrayArrayMapAny(m [][]uint64, f Uint64ArrayToAnyTransformer) []Any {
	l := len(m)
	acc := make([]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64ArrayArrayMapBoolArray(m [][]uint64, f Uint64ArrayToBoolArrayTransformer) [][]bool {
	l := len(m)
	acc := make([][]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64ArrayArrayMapStringArray(m [][]uint64, f Uint64ArrayToStringArrayTransformer) [][]string {
	l := len(m)
	acc := make([][]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64ArrayArrayMapIntArray(m [][]uint64, f Uint64ArrayToIntArrayTransformer) [][]int {
	l := len(m)
	acc := make([][]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64ArrayArrayMapInt8Array(m [][]uint64, f Uint64ArrayToInt8ArrayTransformer) [][]int8 {
	l := len(m)
	acc := make([][]int8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64ArrayArrayMapInt16Array(m [][]uint64, f Uint64ArrayToInt16ArrayTransformer) [][]int16 {
	l := len(m)
	acc := make([][]int16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64ArrayArrayMapInt32Array(m [][]uint64, f Uint64ArrayToInt32ArrayTransformer) [][]int32 {
	l := len(m)
	acc := make([][]int32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64ArrayArrayMapInt64Array(m [][]uint64, f Uint64ArrayToInt64ArrayTransformer) [][]int64 {
	l := len(m)
	acc := make([][]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64ArrayArrayMapUintArray(m [][]uint64, f Uint64ArrayToUintArrayTransformer) [][]uint {
	l := len(m)
	acc := make([][]uint, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64ArrayArrayMapUint8Array(m [][]uint64, f Uint64ArrayToUint8ArrayTransformer) [][]uint8 {
	l := len(m)
	acc := make([][]uint8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64ArrayArrayMapUint16Array(m [][]uint64, f Uint64ArrayToUint16ArrayTransformer) [][]uint16 {
	l := len(m)
	acc := make([][]uint16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64ArrayArrayMapUint32Array(m [][]uint64, f Uint64ArrayToUint32ArrayTransformer) [][]uint32 {
	l := len(m)
	acc := make([][]uint32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64ArrayArrayMapUint64Array(m [][]uint64, f Uint64ArrayToUint64ArrayTransformer) [][]uint64 {
	l := len(m)
	acc := make([][]uint64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64ArrayArrayMapUintptrArray(m [][]uint64, f Uint64ArrayToUintptrArrayTransformer) [][]uintptr {
	l := len(m)
	acc := make([][]uintptr, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64ArrayArrayMapByteArray(m [][]uint64, f Uint64ArrayToByteArrayTransformer) [][]byte {
	l := len(m)
	acc := make([][]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64ArrayArrayMapRuneArray(m [][]uint64, f Uint64ArrayToRuneArrayTransformer) [][]rune {
	l := len(m)
	acc := make([][]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64ArrayArrayMapFloat32Array(m [][]uint64, f Uint64ArrayToFloat32ArrayTransformer) [][]float32 {
	l := len(m)
	acc := make([][]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64ArrayArrayMapFloat64Array(m [][]uint64, f Uint64ArrayToFloat64ArrayTransformer) [][]float64 {
	l := len(m)
	acc := make([][]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64ArrayArrayMapComplex64Array(m [][]uint64, f Uint64ArrayToComplex64ArrayTransformer) [][]complex64 {
	l := len(m)
	acc := make([][]complex64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64ArrayArrayMapComplex128Array(m [][]uint64, f Uint64ArrayToComplex128ArrayTransformer) [][]complex128 {
	l := len(m)
	acc := make([][]complex128, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64ArrayArrayMapAnyArray(m [][]uint64, f Uint64ArrayToAnyArrayTransformer) [][]Any {
	l := len(m)
	acc := make([][]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64ArrayArrayMapBoolOption(m [][]uint64, f Uint64ArrayToBoolOptionTransformer) []BoolOption {
	l := len(m)
	acc := make([]BoolOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64ArrayArrayMapStringOption(m [][]uint64, f Uint64ArrayToStringOptionTransformer) []StringOption {
	l := len(m)
	acc := make([]StringOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64ArrayArrayMapIntOption(m [][]uint64, f Uint64ArrayToIntOptionTransformer) []IntOption {
	l := len(m)
	acc := make([]IntOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64ArrayArrayMapInt8Option(m [][]uint64, f Uint64ArrayToInt8OptionTransformer) []Int8Option {
	l := len(m)
	acc := make([]Int8Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64ArrayArrayMapInt16Option(m [][]uint64, f Uint64ArrayToInt16OptionTransformer) []Int16Option {
	l := len(m)
	acc := make([]Int16Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64ArrayArrayMapInt32Option(m [][]uint64, f Uint64ArrayToInt32OptionTransformer) []Int32Option {
	l := len(m)
	acc := make([]Int32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64ArrayArrayMapInt64Option(m [][]uint64, f Uint64ArrayToInt64OptionTransformer) []Int64Option {
	l := len(m)
	acc := make([]Int64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64ArrayArrayMapUintOption(m [][]uint64, f Uint64ArrayToUintOptionTransformer) []UintOption {
	l := len(m)
	acc := make([]UintOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64ArrayArrayMapUint8Option(m [][]uint64, f Uint64ArrayToUint8OptionTransformer) []Uint8Option {
	l := len(m)
	acc := make([]Uint8Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64ArrayArrayMapUint16Option(m [][]uint64, f Uint64ArrayToUint16OptionTransformer) []Uint16Option {
	l := len(m)
	acc := make([]Uint16Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64ArrayArrayMapUint32Option(m [][]uint64, f Uint64ArrayToUint32OptionTransformer) []Uint32Option {
	l := len(m)
	acc := make([]Uint32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64ArrayArrayMapUint64Option(m [][]uint64, f Uint64ArrayToUint64OptionTransformer) []Uint64Option {
	l := len(m)
	acc := make([]Uint64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64ArrayArrayMapUintptrOption(m [][]uint64, f Uint64ArrayToUintptrOptionTransformer) []UintptrOption {
	l := len(m)
	acc := make([]UintptrOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64ArrayArrayMapByteOption(m [][]uint64, f Uint64ArrayToByteOptionTransformer) []ByteOption {
	l := len(m)
	acc := make([]ByteOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64ArrayArrayMapRuneOption(m [][]uint64, f Uint64ArrayToRuneOptionTransformer) []RuneOption {
	l := len(m)
	acc := make([]RuneOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64ArrayArrayMapFloat32Option(m [][]uint64, f Uint64ArrayToFloat32OptionTransformer) []Float32Option {
	l := len(m)
	acc := make([]Float32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64ArrayArrayMapFloat64Option(m [][]uint64, f Uint64ArrayToFloat64OptionTransformer) []Float64Option {
	l := len(m)
	acc := make([]Float64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64ArrayArrayMapComplex64Option(m [][]uint64, f Uint64ArrayToComplex64OptionTransformer) []Complex64Option {
	l := len(m)
	acc := make([]Complex64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64ArrayArrayMapComplex128Option(m [][]uint64, f Uint64ArrayToComplex128OptionTransformer) []Complex128Option {
	l := len(m)
	acc := make([]Complex128Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64ArrayArrayMapAnyOption(m [][]uint64, f Uint64ArrayToAnyOptionTransformer) []AnyOption {
	l := len(m)
	acc := make([]AnyOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrArrayArrayMapBool(m [][]uintptr, f UintptrArrayToBoolTransformer) []bool {
	l := len(m)
	acc := make([]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrArrayArrayMapString(m [][]uintptr, f UintptrArrayToStringTransformer) []string {
	l := len(m)
	acc := make([]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrArrayArrayMapInt(m [][]uintptr, f UintptrArrayToIntTransformer) []int {
	l := len(m)
	acc := make([]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrArrayArrayMapInt8(m [][]uintptr, f UintptrArrayToInt8Transformer) []int8 {
	l := len(m)
	acc := make([]int8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrArrayArrayMapInt16(m [][]uintptr, f UintptrArrayToInt16Transformer) []int16 {
	l := len(m)
	acc := make([]int16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrArrayArrayMapInt32(m [][]uintptr, f UintptrArrayToInt32Transformer) []int32 {
	l := len(m)
	acc := make([]int32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrArrayArrayMapInt64(m [][]uintptr, f UintptrArrayToInt64Transformer) []int64 {
	l := len(m)
	acc := make([]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrArrayArrayMapUint(m [][]uintptr, f UintptrArrayToUintTransformer) []uint {
	l := len(m)
	acc := make([]uint, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrArrayArrayMapUint8(m [][]uintptr, f UintptrArrayToUint8Transformer) []uint8 {
	l := len(m)
	acc := make([]uint8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrArrayArrayMapUint16(m [][]uintptr, f UintptrArrayToUint16Transformer) []uint16 {
	l := len(m)
	acc := make([]uint16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrArrayArrayMapUint32(m [][]uintptr, f UintptrArrayToUint32Transformer) []uint32 {
	l := len(m)
	acc := make([]uint32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrArrayArrayMapUint64(m [][]uintptr, f UintptrArrayToUint64Transformer) []uint64 {
	l := len(m)
	acc := make([]uint64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrArrayArrayMapUintptr(m [][]uintptr, f UintptrArrayToUintptrTransformer) []uintptr {
	l := len(m)
	acc := make([]uintptr, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrArrayArrayMapByte(m [][]uintptr, f UintptrArrayToByteTransformer) []byte {
	l := len(m)
	acc := make([]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrArrayArrayMapRune(m [][]uintptr, f UintptrArrayToRuneTransformer) []rune {
	l := len(m)
	acc := make([]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrArrayArrayMapFloat32(m [][]uintptr, f UintptrArrayToFloat32Transformer) []float32 {
	l := len(m)
	acc := make([]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrArrayArrayMapFloat64(m [][]uintptr, f UintptrArrayToFloat64Transformer) []float64 {
	l := len(m)
	acc := make([]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrArrayArrayMapComplex64(m [][]uintptr, f UintptrArrayToComplex64Transformer) []complex64 {
	l := len(m)
	acc := make([]complex64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrArrayArrayMapComplex128(m [][]uintptr, f UintptrArrayToComplex128Transformer) []complex128 {
	l := len(m)
	acc := make([]complex128, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrArrayArrayMapAny(m [][]uintptr, f UintptrArrayToAnyTransformer) []Any {
	l := len(m)
	acc := make([]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrArrayArrayMapBoolArray(m [][]uintptr, f UintptrArrayToBoolArrayTransformer) [][]bool {
	l := len(m)
	acc := make([][]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrArrayArrayMapStringArray(m [][]uintptr, f UintptrArrayToStringArrayTransformer) [][]string {
	l := len(m)
	acc := make([][]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrArrayArrayMapIntArray(m [][]uintptr, f UintptrArrayToIntArrayTransformer) [][]int {
	l := len(m)
	acc := make([][]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrArrayArrayMapInt8Array(m [][]uintptr, f UintptrArrayToInt8ArrayTransformer) [][]int8 {
	l := len(m)
	acc := make([][]int8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrArrayArrayMapInt16Array(m [][]uintptr, f UintptrArrayToInt16ArrayTransformer) [][]int16 {
	l := len(m)
	acc := make([][]int16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrArrayArrayMapInt32Array(m [][]uintptr, f UintptrArrayToInt32ArrayTransformer) [][]int32 {
	l := len(m)
	acc := make([][]int32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrArrayArrayMapInt64Array(m [][]uintptr, f UintptrArrayToInt64ArrayTransformer) [][]int64 {
	l := len(m)
	acc := make([][]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrArrayArrayMapUintArray(m [][]uintptr, f UintptrArrayToUintArrayTransformer) [][]uint {
	l := len(m)
	acc := make([][]uint, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrArrayArrayMapUint8Array(m [][]uintptr, f UintptrArrayToUint8ArrayTransformer) [][]uint8 {
	l := len(m)
	acc := make([][]uint8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrArrayArrayMapUint16Array(m [][]uintptr, f UintptrArrayToUint16ArrayTransformer) [][]uint16 {
	l := len(m)
	acc := make([][]uint16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrArrayArrayMapUint32Array(m [][]uintptr, f UintptrArrayToUint32ArrayTransformer) [][]uint32 {
	l := len(m)
	acc := make([][]uint32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrArrayArrayMapUint64Array(m [][]uintptr, f UintptrArrayToUint64ArrayTransformer) [][]uint64 {
	l := len(m)
	acc := make([][]uint64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrArrayArrayMapUintptrArray(m [][]uintptr, f UintptrArrayToUintptrArrayTransformer) [][]uintptr {
	l := len(m)
	acc := make([][]uintptr, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrArrayArrayMapByteArray(m [][]uintptr, f UintptrArrayToByteArrayTransformer) [][]byte {
	l := len(m)
	acc := make([][]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrArrayArrayMapRuneArray(m [][]uintptr, f UintptrArrayToRuneArrayTransformer) [][]rune {
	l := len(m)
	acc := make([][]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrArrayArrayMapFloat32Array(m [][]uintptr, f UintptrArrayToFloat32ArrayTransformer) [][]float32 {
	l := len(m)
	acc := make([][]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrArrayArrayMapFloat64Array(m [][]uintptr, f UintptrArrayToFloat64ArrayTransformer) [][]float64 {
	l := len(m)
	acc := make([][]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrArrayArrayMapComplex64Array(m [][]uintptr, f UintptrArrayToComplex64ArrayTransformer) [][]complex64 {
	l := len(m)
	acc := make([][]complex64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrArrayArrayMapComplex128Array(m [][]uintptr, f UintptrArrayToComplex128ArrayTransformer) [][]complex128 {
	l := len(m)
	acc := make([][]complex128, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrArrayArrayMapAnyArray(m [][]uintptr, f UintptrArrayToAnyArrayTransformer) [][]Any {
	l := len(m)
	acc := make([][]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrArrayArrayMapBoolOption(m [][]uintptr, f UintptrArrayToBoolOptionTransformer) []BoolOption {
	l := len(m)
	acc := make([]BoolOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrArrayArrayMapStringOption(m [][]uintptr, f UintptrArrayToStringOptionTransformer) []StringOption {
	l := len(m)
	acc := make([]StringOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrArrayArrayMapIntOption(m [][]uintptr, f UintptrArrayToIntOptionTransformer) []IntOption {
	l := len(m)
	acc := make([]IntOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrArrayArrayMapInt8Option(m [][]uintptr, f UintptrArrayToInt8OptionTransformer) []Int8Option {
	l := len(m)
	acc := make([]Int8Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrArrayArrayMapInt16Option(m [][]uintptr, f UintptrArrayToInt16OptionTransformer) []Int16Option {
	l := len(m)
	acc := make([]Int16Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrArrayArrayMapInt32Option(m [][]uintptr, f UintptrArrayToInt32OptionTransformer) []Int32Option {
	l := len(m)
	acc := make([]Int32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrArrayArrayMapInt64Option(m [][]uintptr, f UintptrArrayToInt64OptionTransformer) []Int64Option {
	l := len(m)
	acc := make([]Int64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrArrayArrayMapUintOption(m [][]uintptr, f UintptrArrayToUintOptionTransformer) []UintOption {
	l := len(m)
	acc := make([]UintOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrArrayArrayMapUint8Option(m [][]uintptr, f UintptrArrayToUint8OptionTransformer) []Uint8Option {
	l := len(m)
	acc := make([]Uint8Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrArrayArrayMapUint16Option(m [][]uintptr, f UintptrArrayToUint16OptionTransformer) []Uint16Option {
	l := len(m)
	acc := make([]Uint16Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrArrayArrayMapUint32Option(m [][]uintptr, f UintptrArrayToUint32OptionTransformer) []Uint32Option {
	l := len(m)
	acc := make([]Uint32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrArrayArrayMapUint64Option(m [][]uintptr, f UintptrArrayToUint64OptionTransformer) []Uint64Option {
	l := len(m)
	acc := make([]Uint64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrArrayArrayMapUintptrOption(m [][]uintptr, f UintptrArrayToUintptrOptionTransformer) []UintptrOption {
	l := len(m)
	acc := make([]UintptrOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrArrayArrayMapByteOption(m [][]uintptr, f UintptrArrayToByteOptionTransformer) []ByteOption {
	l := len(m)
	acc := make([]ByteOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrArrayArrayMapRuneOption(m [][]uintptr, f UintptrArrayToRuneOptionTransformer) []RuneOption {
	l := len(m)
	acc := make([]RuneOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrArrayArrayMapFloat32Option(m [][]uintptr, f UintptrArrayToFloat32OptionTransformer) []Float32Option {
	l := len(m)
	acc := make([]Float32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrArrayArrayMapFloat64Option(m [][]uintptr, f UintptrArrayToFloat64OptionTransformer) []Float64Option {
	l := len(m)
	acc := make([]Float64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrArrayArrayMapComplex64Option(m [][]uintptr, f UintptrArrayToComplex64OptionTransformer) []Complex64Option {
	l := len(m)
	acc := make([]Complex64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrArrayArrayMapComplex128Option(m [][]uintptr, f UintptrArrayToComplex128OptionTransformer) []Complex128Option {
	l := len(m)
	acc := make([]Complex128Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrArrayArrayMapAnyOption(m [][]uintptr, f UintptrArrayToAnyOptionTransformer) []AnyOption {
	l := len(m)
	acc := make([]AnyOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayArrayMapBool(m [][]byte, f ByteArrayToBoolTransformer) []bool {
	l := len(m)
	acc := make([]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayArrayMapString(m [][]byte, f ByteArrayToStringTransformer) []string {
	l := len(m)
	acc := make([]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayArrayMapInt(m [][]byte, f ByteArrayToIntTransformer) []int {
	l := len(m)
	acc := make([]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayArrayMapInt8(m [][]byte, f ByteArrayToInt8Transformer) []int8 {
	l := len(m)
	acc := make([]int8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayArrayMapInt16(m [][]byte, f ByteArrayToInt16Transformer) []int16 {
	l := len(m)
	acc := make([]int16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayArrayMapInt32(m [][]byte, f ByteArrayToInt32Transformer) []int32 {
	l := len(m)
	acc := make([]int32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayArrayMapInt64(m [][]byte, f ByteArrayToInt64Transformer) []int64 {
	l := len(m)
	acc := make([]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayArrayMapUint(m [][]byte, f ByteArrayToUintTransformer) []uint {
	l := len(m)
	acc := make([]uint, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayArrayMapUint8(m [][]byte, f ByteArrayToUint8Transformer) []uint8 {
	l := len(m)
	acc := make([]uint8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayArrayMapUint16(m [][]byte, f ByteArrayToUint16Transformer) []uint16 {
	l := len(m)
	acc := make([]uint16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayArrayMapUint32(m [][]byte, f ByteArrayToUint32Transformer) []uint32 {
	l := len(m)
	acc := make([]uint32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayArrayMapUint64(m [][]byte, f ByteArrayToUint64Transformer) []uint64 {
	l := len(m)
	acc := make([]uint64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayArrayMapUintptr(m [][]byte, f ByteArrayToUintptrTransformer) []uintptr {
	l := len(m)
	acc := make([]uintptr, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayArrayMapByte(m [][]byte, f ByteArrayToByteTransformer) []byte {
	l := len(m)
	acc := make([]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayArrayMapRune(m [][]byte, f ByteArrayToRuneTransformer) []rune {
	l := len(m)
	acc := make([]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayArrayMapFloat32(m [][]byte, f ByteArrayToFloat32Transformer) []float32 {
	l := len(m)
	acc := make([]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayArrayMapFloat64(m [][]byte, f ByteArrayToFloat64Transformer) []float64 {
	l := len(m)
	acc := make([]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayArrayMapComplex64(m [][]byte, f ByteArrayToComplex64Transformer) []complex64 {
	l := len(m)
	acc := make([]complex64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayArrayMapComplex128(m [][]byte, f ByteArrayToComplex128Transformer) []complex128 {
	l := len(m)
	acc := make([]complex128, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayArrayMapAny(m [][]byte, f ByteArrayToAnyTransformer) []Any {
	l := len(m)
	acc := make([]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayArrayMapBoolArray(m [][]byte, f ByteArrayToBoolArrayTransformer) [][]bool {
	l := len(m)
	acc := make([][]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayArrayMapStringArray(m [][]byte, f ByteArrayToStringArrayTransformer) [][]string {
	l := len(m)
	acc := make([][]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayArrayMapIntArray(m [][]byte, f ByteArrayToIntArrayTransformer) [][]int {
	l := len(m)
	acc := make([][]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayArrayMapInt8Array(m [][]byte, f ByteArrayToInt8ArrayTransformer) [][]int8 {
	l := len(m)
	acc := make([][]int8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayArrayMapInt16Array(m [][]byte, f ByteArrayToInt16ArrayTransformer) [][]int16 {
	l := len(m)
	acc := make([][]int16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayArrayMapInt32Array(m [][]byte, f ByteArrayToInt32ArrayTransformer) [][]int32 {
	l := len(m)
	acc := make([][]int32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayArrayMapInt64Array(m [][]byte, f ByteArrayToInt64ArrayTransformer) [][]int64 {
	l := len(m)
	acc := make([][]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayArrayMapUintArray(m [][]byte, f ByteArrayToUintArrayTransformer) [][]uint {
	l := len(m)
	acc := make([][]uint, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayArrayMapUint8Array(m [][]byte, f ByteArrayToUint8ArrayTransformer) [][]uint8 {
	l := len(m)
	acc := make([][]uint8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayArrayMapUint16Array(m [][]byte, f ByteArrayToUint16ArrayTransformer) [][]uint16 {
	l := len(m)
	acc := make([][]uint16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayArrayMapUint32Array(m [][]byte, f ByteArrayToUint32ArrayTransformer) [][]uint32 {
	l := len(m)
	acc := make([][]uint32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayArrayMapUint64Array(m [][]byte, f ByteArrayToUint64ArrayTransformer) [][]uint64 {
	l := len(m)
	acc := make([][]uint64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayArrayMapUintptrArray(m [][]byte, f ByteArrayToUintptrArrayTransformer) [][]uintptr {
	l := len(m)
	acc := make([][]uintptr, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayArrayMapByteArray(m [][]byte, f ByteArrayToByteArrayTransformer) [][]byte {
	l := len(m)
	acc := make([][]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayArrayMapRuneArray(m [][]byte, f ByteArrayToRuneArrayTransformer) [][]rune {
	l := len(m)
	acc := make([][]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayArrayMapFloat32Array(m [][]byte, f ByteArrayToFloat32ArrayTransformer) [][]float32 {
	l := len(m)
	acc := make([][]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayArrayMapFloat64Array(m [][]byte, f ByteArrayToFloat64ArrayTransformer) [][]float64 {
	l := len(m)
	acc := make([][]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayArrayMapComplex64Array(m [][]byte, f ByteArrayToComplex64ArrayTransformer) [][]complex64 {
	l := len(m)
	acc := make([][]complex64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayArrayMapComplex128Array(m [][]byte, f ByteArrayToComplex128ArrayTransformer) [][]complex128 {
	l := len(m)
	acc := make([][]complex128, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayArrayMapAnyArray(m [][]byte, f ByteArrayToAnyArrayTransformer) [][]Any {
	l := len(m)
	acc := make([][]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayArrayMapBoolOption(m [][]byte, f ByteArrayToBoolOptionTransformer) []BoolOption {
	l := len(m)
	acc := make([]BoolOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayArrayMapStringOption(m [][]byte, f ByteArrayToStringOptionTransformer) []StringOption {
	l := len(m)
	acc := make([]StringOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayArrayMapIntOption(m [][]byte, f ByteArrayToIntOptionTransformer) []IntOption {
	l := len(m)
	acc := make([]IntOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayArrayMapInt8Option(m [][]byte, f ByteArrayToInt8OptionTransformer) []Int8Option {
	l := len(m)
	acc := make([]Int8Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayArrayMapInt16Option(m [][]byte, f ByteArrayToInt16OptionTransformer) []Int16Option {
	l := len(m)
	acc := make([]Int16Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayArrayMapInt32Option(m [][]byte, f ByteArrayToInt32OptionTransformer) []Int32Option {
	l := len(m)
	acc := make([]Int32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayArrayMapInt64Option(m [][]byte, f ByteArrayToInt64OptionTransformer) []Int64Option {
	l := len(m)
	acc := make([]Int64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayArrayMapUintOption(m [][]byte, f ByteArrayToUintOptionTransformer) []UintOption {
	l := len(m)
	acc := make([]UintOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayArrayMapUint8Option(m [][]byte, f ByteArrayToUint8OptionTransformer) []Uint8Option {
	l := len(m)
	acc := make([]Uint8Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayArrayMapUint16Option(m [][]byte, f ByteArrayToUint16OptionTransformer) []Uint16Option {
	l := len(m)
	acc := make([]Uint16Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayArrayMapUint32Option(m [][]byte, f ByteArrayToUint32OptionTransformer) []Uint32Option {
	l := len(m)
	acc := make([]Uint32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayArrayMapUint64Option(m [][]byte, f ByteArrayToUint64OptionTransformer) []Uint64Option {
	l := len(m)
	acc := make([]Uint64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayArrayMapUintptrOption(m [][]byte, f ByteArrayToUintptrOptionTransformer) []UintptrOption {
	l := len(m)
	acc := make([]UintptrOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayArrayMapByteOption(m [][]byte, f ByteArrayToByteOptionTransformer) []ByteOption {
	l := len(m)
	acc := make([]ByteOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayArrayMapRuneOption(m [][]byte, f ByteArrayToRuneOptionTransformer) []RuneOption {
	l := len(m)
	acc := make([]RuneOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayArrayMapFloat32Option(m [][]byte, f ByteArrayToFloat32OptionTransformer) []Float32Option {
	l := len(m)
	acc := make([]Float32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayArrayMapFloat64Option(m [][]byte, f ByteArrayToFloat64OptionTransformer) []Float64Option {
	l := len(m)
	acc := make([]Float64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayArrayMapComplex64Option(m [][]byte, f ByteArrayToComplex64OptionTransformer) []Complex64Option {
	l := len(m)
	acc := make([]Complex64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayArrayMapComplex128Option(m [][]byte, f ByteArrayToComplex128OptionTransformer) []Complex128Option {
	l := len(m)
	acc := make([]Complex128Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayArrayMapAnyOption(m [][]byte, f ByteArrayToAnyOptionTransformer) []AnyOption {
	l := len(m)
	acc := make([]AnyOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayArrayMapBool(m [][]rune, f RuneArrayToBoolTransformer) []bool {
	l := len(m)
	acc := make([]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayArrayMapString(m [][]rune, f RuneArrayToStringTransformer) []string {
	l := len(m)
	acc := make([]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayArrayMapInt(m [][]rune, f RuneArrayToIntTransformer) []int {
	l := len(m)
	acc := make([]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayArrayMapInt8(m [][]rune, f RuneArrayToInt8Transformer) []int8 {
	l := len(m)
	acc := make([]int8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayArrayMapInt16(m [][]rune, f RuneArrayToInt16Transformer) []int16 {
	l := len(m)
	acc := make([]int16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayArrayMapInt32(m [][]rune, f RuneArrayToInt32Transformer) []int32 {
	l := len(m)
	acc := make([]int32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayArrayMapInt64(m [][]rune, f RuneArrayToInt64Transformer) []int64 {
	l := len(m)
	acc := make([]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayArrayMapUint(m [][]rune, f RuneArrayToUintTransformer) []uint {
	l := len(m)
	acc := make([]uint, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayArrayMapUint8(m [][]rune, f RuneArrayToUint8Transformer) []uint8 {
	l := len(m)
	acc := make([]uint8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayArrayMapUint16(m [][]rune, f RuneArrayToUint16Transformer) []uint16 {
	l := len(m)
	acc := make([]uint16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayArrayMapUint32(m [][]rune, f RuneArrayToUint32Transformer) []uint32 {
	l := len(m)
	acc := make([]uint32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayArrayMapUint64(m [][]rune, f RuneArrayToUint64Transformer) []uint64 {
	l := len(m)
	acc := make([]uint64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayArrayMapUintptr(m [][]rune, f RuneArrayToUintptrTransformer) []uintptr {
	l := len(m)
	acc := make([]uintptr, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayArrayMapByte(m [][]rune, f RuneArrayToByteTransformer) []byte {
	l := len(m)
	acc := make([]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayArrayMapRune(m [][]rune, f RuneArrayToRuneTransformer) []rune {
	l := len(m)
	acc := make([]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayArrayMapFloat32(m [][]rune, f RuneArrayToFloat32Transformer) []float32 {
	l := len(m)
	acc := make([]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayArrayMapFloat64(m [][]rune, f RuneArrayToFloat64Transformer) []float64 {
	l := len(m)
	acc := make([]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayArrayMapComplex64(m [][]rune, f RuneArrayToComplex64Transformer) []complex64 {
	l := len(m)
	acc := make([]complex64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayArrayMapComplex128(m [][]rune, f RuneArrayToComplex128Transformer) []complex128 {
	l := len(m)
	acc := make([]complex128, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayArrayMapAny(m [][]rune, f RuneArrayToAnyTransformer) []Any {
	l := len(m)
	acc := make([]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayArrayMapBoolArray(m [][]rune, f RuneArrayToBoolArrayTransformer) [][]bool {
	l := len(m)
	acc := make([][]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayArrayMapStringArray(m [][]rune, f RuneArrayToStringArrayTransformer) [][]string {
	l := len(m)
	acc := make([][]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayArrayMapIntArray(m [][]rune, f RuneArrayToIntArrayTransformer) [][]int {
	l := len(m)
	acc := make([][]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayArrayMapInt8Array(m [][]rune, f RuneArrayToInt8ArrayTransformer) [][]int8 {
	l := len(m)
	acc := make([][]int8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayArrayMapInt16Array(m [][]rune, f RuneArrayToInt16ArrayTransformer) [][]int16 {
	l := len(m)
	acc := make([][]int16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayArrayMapInt32Array(m [][]rune, f RuneArrayToInt32ArrayTransformer) [][]int32 {
	l := len(m)
	acc := make([][]int32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayArrayMapInt64Array(m [][]rune, f RuneArrayToInt64ArrayTransformer) [][]int64 {
	l := len(m)
	acc := make([][]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayArrayMapUintArray(m [][]rune, f RuneArrayToUintArrayTransformer) [][]uint {
	l := len(m)
	acc := make([][]uint, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayArrayMapUint8Array(m [][]rune, f RuneArrayToUint8ArrayTransformer) [][]uint8 {
	l := len(m)
	acc := make([][]uint8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayArrayMapUint16Array(m [][]rune, f RuneArrayToUint16ArrayTransformer) [][]uint16 {
	l := len(m)
	acc := make([][]uint16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayArrayMapUint32Array(m [][]rune, f RuneArrayToUint32ArrayTransformer) [][]uint32 {
	l := len(m)
	acc := make([][]uint32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayArrayMapUint64Array(m [][]rune, f RuneArrayToUint64ArrayTransformer) [][]uint64 {
	l := len(m)
	acc := make([][]uint64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayArrayMapUintptrArray(m [][]rune, f RuneArrayToUintptrArrayTransformer) [][]uintptr {
	l := len(m)
	acc := make([][]uintptr, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayArrayMapByteArray(m [][]rune, f RuneArrayToByteArrayTransformer) [][]byte {
	l := len(m)
	acc := make([][]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayArrayMapRuneArray(m [][]rune, f RuneArrayToRuneArrayTransformer) [][]rune {
	l := len(m)
	acc := make([][]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayArrayMapFloat32Array(m [][]rune, f RuneArrayToFloat32ArrayTransformer) [][]float32 {
	l := len(m)
	acc := make([][]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayArrayMapFloat64Array(m [][]rune, f RuneArrayToFloat64ArrayTransformer) [][]float64 {
	l := len(m)
	acc := make([][]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayArrayMapComplex64Array(m [][]rune, f RuneArrayToComplex64ArrayTransformer) [][]complex64 {
	l := len(m)
	acc := make([][]complex64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayArrayMapComplex128Array(m [][]rune, f RuneArrayToComplex128ArrayTransformer) [][]complex128 {
	l := len(m)
	acc := make([][]complex128, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayArrayMapAnyArray(m [][]rune, f RuneArrayToAnyArrayTransformer) [][]Any {
	l := len(m)
	acc := make([][]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayArrayMapBoolOption(m [][]rune, f RuneArrayToBoolOptionTransformer) []BoolOption {
	l := len(m)
	acc := make([]BoolOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayArrayMapStringOption(m [][]rune, f RuneArrayToStringOptionTransformer) []StringOption {
	l := len(m)
	acc := make([]StringOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayArrayMapIntOption(m [][]rune, f RuneArrayToIntOptionTransformer) []IntOption {
	l := len(m)
	acc := make([]IntOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayArrayMapInt8Option(m [][]rune, f RuneArrayToInt8OptionTransformer) []Int8Option {
	l := len(m)
	acc := make([]Int8Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayArrayMapInt16Option(m [][]rune, f RuneArrayToInt16OptionTransformer) []Int16Option {
	l := len(m)
	acc := make([]Int16Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayArrayMapInt32Option(m [][]rune, f RuneArrayToInt32OptionTransformer) []Int32Option {
	l := len(m)
	acc := make([]Int32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayArrayMapInt64Option(m [][]rune, f RuneArrayToInt64OptionTransformer) []Int64Option {
	l := len(m)
	acc := make([]Int64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayArrayMapUintOption(m [][]rune, f RuneArrayToUintOptionTransformer) []UintOption {
	l := len(m)
	acc := make([]UintOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayArrayMapUint8Option(m [][]rune, f RuneArrayToUint8OptionTransformer) []Uint8Option {
	l := len(m)
	acc := make([]Uint8Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayArrayMapUint16Option(m [][]rune, f RuneArrayToUint16OptionTransformer) []Uint16Option {
	l := len(m)
	acc := make([]Uint16Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayArrayMapUint32Option(m [][]rune, f RuneArrayToUint32OptionTransformer) []Uint32Option {
	l := len(m)
	acc := make([]Uint32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayArrayMapUint64Option(m [][]rune, f RuneArrayToUint64OptionTransformer) []Uint64Option {
	l := len(m)
	acc := make([]Uint64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayArrayMapUintptrOption(m [][]rune, f RuneArrayToUintptrOptionTransformer) []UintptrOption {
	l := len(m)
	acc := make([]UintptrOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayArrayMapByteOption(m [][]rune, f RuneArrayToByteOptionTransformer) []ByteOption {
	l := len(m)
	acc := make([]ByteOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayArrayMapRuneOption(m [][]rune, f RuneArrayToRuneOptionTransformer) []RuneOption {
	l := len(m)
	acc := make([]RuneOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayArrayMapFloat32Option(m [][]rune, f RuneArrayToFloat32OptionTransformer) []Float32Option {
	l := len(m)
	acc := make([]Float32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayArrayMapFloat64Option(m [][]rune, f RuneArrayToFloat64OptionTransformer) []Float64Option {
	l := len(m)
	acc := make([]Float64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayArrayMapComplex64Option(m [][]rune, f RuneArrayToComplex64OptionTransformer) []Complex64Option {
	l := len(m)
	acc := make([]Complex64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayArrayMapComplex128Option(m [][]rune, f RuneArrayToComplex128OptionTransformer) []Complex128Option {
	l := len(m)
	acc := make([]Complex128Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayArrayMapAnyOption(m [][]rune, f RuneArrayToAnyOptionTransformer) []AnyOption {
	l := len(m)
	acc := make([]AnyOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayArrayMapBool(m [][]float32, f Float32ArrayToBoolTransformer) []bool {
	l := len(m)
	acc := make([]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayArrayMapString(m [][]float32, f Float32ArrayToStringTransformer) []string {
	l := len(m)
	acc := make([]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayArrayMapInt(m [][]float32, f Float32ArrayToIntTransformer) []int {
	l := len(m)
	acc := make([]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayArrayMapInt8(m [][]float32, f Float32ArrayToInt8Transformer) []int8 {
	l := len(m)
	acc := make([]int8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayArrayMapInt16(m [][]float32, f Float32ArrayToInt16Transformer) []int16 {
	l := len(m)
	acc := make([]int16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayArrayMapInt32(m [][]float32, f Float32ArrayToInt32Transformer) []int32 {
	l := len(m)
	acc := make([]int32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayArrayMapInt64(m [][]float32, f Float32ArrayToInt64Transformer) []int64 {
	l := len(m)
	acc := make([]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayArrayMapUint(m [][]float32, f Float32ArrayToUintTransformer) []uint {
	l := len(m)
	acc := make([]uint, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayArrayMapUint8(m [][]float32, f Float32ArrayToUint8Transformer) []uint8 {
	l := len(m)
	acc := make([]uint8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayArrayMapUint16(m [][]float32, f Float32ArrayToUint16Transformer) []uint16 {
	l := len(m)
	acc := make([]uint16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayArrayMapUint32(m [][]float32, f Float32ArrayToUint32Transformer) []uint32 {
	l := len(m)
	acc := make([]uint32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayArrayMapUint64(m [][]float32, f Float32ArrayToUint64Transformer) []uint64 {
	l := len(m)
	acc := make([]uint64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayArrayMapUintptr(m [][]float32, f Float32ArrayToUintptrTransformer) []uintptr {
	l := len(m)
	acc := make([]uintptr, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayArrayMapByte(m [][]float32, f Float32ArrayToByteTransformer) []byte {
	l := len(m)
	acc := make([]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayArrayMapRune(m [][]float32, f Float32ArrayToRuneTransformer) []rune {
	l := len(m)
	acc := make([]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayArrayMapFloat32(m [][]float32, f Float32ArrayToFloat32Transformer) []float32 {
	l := len(m)
	acc := make([]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayArrayMapFloat64(m [][]float32, f Float32ArrayToFloat64Transformer) []float64 {
	l := len(m)
	acc := make([]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayArrayMapComplex64(m [][]float32, f Float32ArrayToComplex64Transformer) []complex64 {
	l := len(m)
	acc := make([]complex64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayArrayMapComplex128(m [][]float32, f Float32ArrayToComplex128Transformer) []complex128 {
	l := len(m)
	acc := make([]complex128, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayArrayMapAny(m [][]float32, f Float32ArrayToAnyTransformer) []Any {
	l := len(m)
	acc := make([]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayArrayMapBoolArray(m [][]float32, f Float32ArrayToBoolArrayTransformer) [][]bool {
	l := len(m)
	acc := make([][]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayArrayMapStringArray(m [][]float32, f Float32ArrayToStringArrayTransformer) [][]string {
	l := len(m)
	acc := make([][]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayArrayMapIntArray(m [][]float32, f Float32ArrayToIntArrayTransformer) [][]int {
	l := len(m)
	acc := make([][]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayArrayMapInt8Array(m [][]float32, f Float32ArrayToInt8ArrayTransformer) [][]int8 {
	l := len(m)
	acc := make([][]int8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayArrayMapInt16Array(m [][]float32, f Float32ArrayToInt16ArrayTransformer) [][]int16 {
	l := len(m)
	acc := make([][]int16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayArrayMapInt32Array(m [][]float32, f Float32ArrayToInt32ArrayTransformer) [][]int32 {
	l := len(m)
	acc := make([][]int32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayArrayMapInt64Array(m [][]float32, f Float32ArrayToInt64ArrayTransformer) [][]int64 {
	l := len(m)
	acc := make([][]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayArrayMapUintArray(m [][]float32, f Float32ArrayToUintArrayTransformer) [][]uint {
	l := len(m)
	acc := make([][]uint, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayArrayMapUint8Array(m [][]float32, f Float32ArrayToUint8ArrayTransformer) [][]uint8 {
	l := len(m)
	acc := make([][]uint8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayArrayMapUint16Array(m [][]float32, f Float32ArrayToUint16ArrayTransformer) [][]uint16 {
	l := len(m)
	acc := make([][]uint16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayArrayMapUint32Array(m [][]float32, f Float32ArrayToUint32ArrayTransformer) [][]uint32 {
	l := len(m)
	acc := make([][]uint32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayArrayMapUint64Array(m [][]float32, f Float32ArrayToUint64ArrayTransformer) [][]uint64 {
	l := len(m)
	acc := make([][]uint64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayArrayMapUintptrArray(m [][]float32, f Float32ArrayToUintptrArrayTransformer) [][]uintptr {
	l := len(m)
	acc := make([][]uintptr, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayArrayMapByteArray(m [][]float32, f Float32ArrayToByteArrayTransformer) [][]byte {
	l := len(m)
	acc := make([][]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayArrayMapRuneArray(m [][]float32, f Float32ArrayToRuneArrayTransformer) [][]rune {
	l := len(m)
	acc := make([][]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayArrayMapFloat32Array(m [][]float32, f Float32ArrayToFloat32ArrayTransformer) [][]float32 {
	l := len(m)
	acc := make([][]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayArrayMapFloat64Array(m [][]float32, f Float32ArrayToFloat64ArrayTransformer) [][]float64 {
	l := len(m)
	acc := make([][]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayArrayMapComplex64Array(m [][]float32, f Float32ArrayToComplex64ArrayTransformer) [][]complex64 {
	l := len(m)
	acc := make([][]complex64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayArrayMapComplex128Array(m [][]float32, f Float32ArrayToComplex128ArrayTransformer) [][]complex128 {
	l := len(m)
	acc := make([][]complex128, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayArrayMapAnyArray(m [][]float32, f Float32ArrayToAnyArrayTransformer) [][]Any {
	l := len(m)
	acc := make([][]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayArrayMapBoolOption(m [][]float32, f Float32ArrayToBoolOptionTransformer) []BoolOption {
	l := len(m)
	acc := make([]BoolOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayArrayMapStringOption(m [][]float32, f Float32ArrayToStringOptionTransformer) []StringOption {
	l := len(m)
	acc := make([]StringOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayArrayMapIntOption(m [][]float32, f Float32ArrayToIntOptionTransformer) []IntOption {
	l := len(m)
	acc := make([]IntOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayArrayMapInt8Option(m [][]float32, f Float32ArrayToInt8OptionTransformer) []Int8Option {
	l := len(m)
	acc := make([]Int8Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayArrayMapInt16Option(m [][]float32, f Float32ArrayToInt16OptionTransformer) []Int16Option {
	l := len(m)
	acc := make([]Int16Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayArrayMapInt32Option(m [][]float32, f Float32ArrayToInt32OptionTransformer) []Int32Option {
	l := len(m)
	acc := make([]Int32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayArrayMapInt64Option(m [][]float32, f Float32ArrayToInt64OptionTransformer) []Int64Option {
	l := len(m)
	acc := make([]Int64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayArrayMapUintOption(m [][]float32, f Float32ArrayToUintOptionTransformer) []UintOption {
	l := len(m)
	acc := make([]UintOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayArrayMapUint8Option(m [][]float32, f Float32ArrayToUint8OptionTransformer) []Uint8Option {
	l := len(m)
	acc := make([]Uint8Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayArrayMapUint16Option(m [][]float32, f Float32ArrayToUint16OptionTransformer) []Uint16Option {
	l := len(m)
	acc := make([]Uint16Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayArrayMapUint32Option(m [][]float32, f Float32ArrayToUint32OptionTransformer) []Uint32Option {
	l := len(m)
	acc := make([]Uint32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayArrayMapUint64Option(m [][]float32, f Float32ArrayToUint64OptionTransformer) []Uint64Option {
	l := len(m)
	acc := make([]Uint64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayArrayMapUintptrOption(m [][]float32, f Float32ArrayToUintptrOptionTransformer) []UintptrOption {
	l := len(m)
	acc := make([]UintptrOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayArrayMapByteOption(m [][]float32, f Float32ArrayToByteOptionTransformer) []ByteOption {
	l := len(m)
	acc := make([]ByteOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayArrayMapRuneOption(m [][]float32, f Float32ArrayToRuneOptionTransformer) []RuneOption {
	l := len(m)
	acc := make([]RuneOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayArrayMapFloat32Option(m [][]float32, f Float32ArrayToFloat32OptionTransformer) []Float32Option {
	l := len(m)
	acc := make([]Float32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayArrayMapFloat64Option(m [][]float32, f Float32ArrayToFloat64OptionTransformer) []Float64Option {
	l := len(m)
	acc := make([]Float64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayArrayMapComplex64Option(m [][]float32, f Float32ArrayToComplex64OptionTransformer) []Complex64Option {
	l := len(m)
	acc := make([]Complex64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayArrayMapComplex128Option(m [][]float32, f Float32ArrayToComplex128OptionTransformer) []Complex128Option {
	l := len(m)
	acc := make([]Complex128Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayArrayMapAnyOption(m [][]float32, f Float32ArrayToAnyOptionTransformer) []AnyOption {
	l := len(m)
	acc := make([]AnyOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayArrayMapBool(m [][]float64, f Float64ArrayToBoolTransformer) []bool {
	l := len(m)
	acc := make([]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayArrayMapString(m [][]float64, f Float64ArrayToStringTransformer) []string {
	l := len(m)
	acc := make([]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayArrayMapInt(m [][]float64, f Float64ArrayToIntTransformer) []int {
	l := len(m)
	acc := make([]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayArrayMapInt8(m [][]float64, f Float64ArrayToInt8Transformer) []int8 {
	l := len(m)
	acc := make([]int8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayArrayMapInt16(m [][]float64, f Float64ArrayToInt16Transformer) []int16 {
	l := len(m)
	acc := make([]int16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayArrayMapInt32(m [][]float64, f Float64ArrayToInt32Transformer) []int32 {
	l := len(m)
	acc := make([]int32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayArrayMapInt64(m [][]float64, f Float64ArrayToInt64Transformer) []int64 {
	l := len(m)
	acc := make([]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayArrayMapUint(m [][]float64, f Float64ArrayToUintTransformer) []uint {
	l := len(m)
	acc := make([]uint, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayArrayMapUint8(m [][]float64, f Float64ArrayToUint8Transformer) []uint8 {
	l := len(m)
	acc := make([]uint8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayArrayMapUint16(m [][]float64, f Float64ArrayToUint16Transformer) []uint16 {
	l := len(m)
	acc := make([]uint16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayArrayMapUint32(m [][]float64, f Float64ArrayToUint32Transformer) []uint32 {
	l := len(m)
	acc := make([]uint32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayArrayMapUint64(m [][]float64, f Float64ArrayToUint64Transformer) []uint64 {
	l := len(m)
	acc := make([]uint64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayArrayMapUintptr(m [][]float64, f Float64ArrayToUintptrTransformer) []uintptr {
	l := len(m)
	acc := make([]uintptr, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayArrayMapByte(m [][]float64, f Float64ArrayToByteTransformer) []byte {
	l := len(m)
	acc := make([]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayArrayMapRune(m [][]float64, f Float64ArrayToRuneTransformer) []rune {
	l := len(m)
	acc := make([]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayArrayMapFloat32(m [][]float64, f Float64ArrayToFloat32Transformer) []float32 {
	l := len(m)
	acc := make([]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayArrayMapFloat64(m [][]float64, f Float64ArrayToFloat64Transformer) []float64 {
	l := len(m)
	acc := make([]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayArrayMapComplex64(m [][]float64, f Float64ArrayToComplex64Transformer) []complex64 {
	l := len(m)
	acc := make([]complex64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayArrayMapComplex128(m [][]float64, f Float64ArrayToComplex128Transformer) []complex128 {
	l := len(m)
	acc := make([]complex128, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayArrayMapAny(m [][]float64, f Float64ArrayToAnyTransformer) []Any {
	l := len(m)
	acc := make([]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayArrayMapBoolArray(m [][]float64, f Float64ArrayToBoolArrayTransformer) [][]bool {
	l := len(m)
	acc := make([][]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayArrayMapStringArray(m [][]float64, f Float64ArrayToStringArrayTransformer) [][]string {
	l := len(m)
	acc := make([][]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayArrayMapIntArray(m [][]float64, f Float64ArrayToIntArrayTransformer) [][]int {
	l := len(m)
	acc := make([][]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayArrayMapInt8Array(m [][]float64, f Float64ArrayToInt8ArrayTransformer) [][]int8 {
	l := len(m)
	acc := make([][]int8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayArrayMapInt16Array(m [][]float64, f Float64ArrayToInt16ArrayTransformer) [][]int16 {
	l := len(m)
	acc := make([][]int16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayArrayMapInt32Array(m [][]float64, f Float64ArrayToInt32ArrayTransformer) [][]int32 {
	l := len(m)
	acc := make([][]int32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayArrayMapInt64Array(m [][]float64, f Float64ArrayToInt64ArrayTransformer) [][]int64 {
	l := len(m)
	acc := make([][]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayArrayMapUintArray(m [][]float64, f Float64ArrayToUintArrayTransformer) [][]uint {
	l := len(m)
	acc := make([][]uint, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayArrayMapUint8Array(m [][]float64, f Float64ArrayToUint8ArrayTransformer) [][]uint8 {
	l := len(m)
	acc := make([][]uint8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayArrayMapUint16Array(m [][]float64, f Float64ArrayToUint16ArrayTransformer) [][]uint16 {
	l := len(m)
	acc := make([][]uint16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayArrayMapUint32Array(m [][]float64, f Float64ArrayToUint32ArrayTransformer) [][]uint32 {
	l := len(m)
	acc := make([][]uint32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayArrayMapUint64Array(m [][]float64, f Float64ArrayToUint64ArrayTransformer) [][]uint64 {
	l := len(m)
	acc := make([][]uint64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayArrayMapUintptrArray(m [][]float64, f Float64ArrayToUintptrArrayTransformer) [][]uintptr {
	l := len(m)
	acc := make([][]uintptr, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayArrayMapByteArray(m [][]float64, f Float64ArrayToByteArrayTransformer) [][]byte {
	l := len(m)
	acc := make([][]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayArrayMapRuneArray(m [][]float64, f Float64ArrayToRuneArrayTransformer) [][]rune {
	l := len(m)
	acc := make([][]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayArrayMapFloat32Array(m [][]float64, f Float64ArrayToFloat32ArrayTransformer) [][]float32 {
	l := len(m)
	acc := make([][]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayArrayMapFloat64Array(m [][]float64, f Float64ArrayToFloat64ArrayTransformer) [][]float64 {
	l := len(m)
	acc := make([][]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayArrayMapComplex64Array(m [][]float64, f Float64ArrayToComplex64ArrayTransformer) [][]complex64 {
	l := len(m)
	acc := make([][]complex64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayArrayMapComplex128Array(m [][]float64, f Float64ArrayToComplex128ArrayTransformer) [][]complex128 {
	l := len(m)
	acc := make([][]complex128, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayArrayMapAnyArray(m [][]float64, f Float64ArrayToAnyArrayTransformer) [][]Any {
	l := len(m)
	acc := make([][]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayArrayMapBoolOption(m [][]float64, f Float64ArrayToBoolOptionTransformer) []BoolOption {
	l := len(m)
	acc := make([]BoolOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayArrayMapStringOption(m [][]float64, f Float64ArrayToStringOptionTransformer) []StringOption {
	l := len(m)
	acc := make([]StringOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayArrayMapIntOption(m [][]float64, f Float64ArrayToIntOptionTransformer) []IntOption {
	l := len(m)
	acc := make([]IntOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayArrayMapInt8Option(m [][]float64, f Float64ArrayToInt8OptionTransformer) []Int8Option {
	l := len(m)
	acc := make([]Int8Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayArrayMapInt16Option(m [][]float64, f Float64ArrayToInt16OptionTransformer) []Int16Option {
	l := len(m)
	acc := make([]Int16Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayArrayMapInt32Option(m [][]float64, f Float64ArrayToInt32OptionTransformer) []Int32Option {
	l := len(m)
	acc := make([]Int32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayArrayMapInt64Option(m [][]float64, f Float64ArrayToInt64OptionTransformer) []Int64Option {
	l := len(m)
	acc := make([]Int64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayArrayMapUintOption(m [][]float64, f Float64ArrayToUintOptionTransformer) []UintOption {
	l := len(m)
	acc := make([]UintOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayArrayMapUint8Option(m [][]float64, f Float64ArrayToUint8OptionTransformer) []Uint8Option {
	l := len(m)
	acc := make([]Uint8Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayArrayMapUint16Option(m [][]float64, f Float64ArrayToUint16OptionTransformer) []Uint16Option {
	l := len(m)
	acc := make([]Uint16Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayArrayMapUint32Option(m [][]float64, f Float64ArrayToUint32OptionTransformer) []Uint32Option {
	l := len(m)
	acc := make([]Uint32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayArrayMapUint64Option(m [][]float64, f Float64ArrayToUint64OptionTransformer) []Uint64Option {
	l := len(m)
	acc := make([]Uint64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayArrayMapUintptrOption(m [][]float64, f Float64ArrayToUintptrOptionTransformer) []UintptrOption {
	l := len(m)
	acc := make([]UintptrOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayArrayMapByteOption(m [][]float64, f Float64ArrayToByteOptionTransformer) []ByteOption {
	l := len(m)
	acc := make([]ByteOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayArrayMapRuneOption(m [][]float64, f Float64ArrayToRuneOptionTransformer) []RuneOption {
	l := len(m)
	acc := make([]RuneOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayArrayMapFloat32Option(m [][]float64, f Float64ArrayToFloat32OptionTransformer) []Float32Option {
	l := len(m)
	acc := make([]Float32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayArrayMapFloat64Option(m [][]float64, f Float64ArrayToFloat64OptionTransformer) []Float64Option {
	l := len(m)
	acc := make([]Float64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayArrayMapComplex64Option(m [][]float64, f Float64ArrayToComplex64OptionTransformer) []Complex64Option {
	l := len(m)
	acc := make([]Complex64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayArrayMapComplex128Option(m [][]float64, f Float64ArrayToComplex128OptionTransformer) []Complex128Option {
	l := len(m)
	acc := make([]Complex128Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayArrayMapAnyOption(m [][]float64, f Float64ArrayToAnyOptionTransformer) []AnyOption {
	l := len(m)
	acc := make([]AnyOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64ArrayArrayMapBool(m [][]complex64, f Complex64ArrayToBoolTransformer) []bool {
	l := len(m)
	acc := make([]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64ArrayArrayMapString(m [][]complex64, f Complex64ArrayToStringTransformer) []string {
	l := len(m)
	acc := make([]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64ArrayArrayMapInt(m [][]complex64, f Complex64ArrayToIntTransformer) []int {
	l := len(m)
	acc := make([]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64ArrayArrayMapInt8(m [][]complex64, f Complex64ArrayToInt8Transformer) []int8 {
	l := len(m)
	acc := make([]int8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64ArrayArrayMapInt16(m [][]complex64, f Complex64ArrayToInt16Transformer) []int16 {
	l := len(m)
	acc := make([]int16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64ArrayArrayMapInt32(m [][]complex64, f Complex64ArrayToInt32Transformer) []int32 {
	l := len(m)
	acc := make([]int32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64ArrayArrayMapInt64(m [][]complex64, f Complex64ArrayToInt64Transformer) []int64 {
	l := len(m)
	acc := make([]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64ArrayArrayMapUint(m [][]complex64, f Complex64ArrayToUintTransformer) []uint {
	l := len(m)
	acc := make([]uint, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64ArrayArrayMapUint8(m [][]complex64, f Complex64ArrayToUint8Transformer) []uint8 {
	l := len(m)
	acc := make([]uint8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64ArrayArrayMapUint16(m [][]complex64, f Complex64ArrayToUint16Transformer) []uint16 {
	l := len(m)
	acc := make([]uint16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64ArrayArrayMapUint32(m [][]complex64, f Complex64ArrayToUint32Transformer) []uint32 {
	l := len(m)
	acc := make([]uint32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64ArrayArrayMapUint64(m [][]complex64, f Complex64ArrayToUint64Transformer) []uint64 {
	l := len(m)
	acc := make([]uint64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64ArrayArrayMapUintptr(m [][]complex64, f Complex64ArrayToUintptrTransformer) []uintptr {
	l := len(m)
	acc := make([]uintptr, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64ArrayArrayMapByte(m [][]complex64, f Complex64ArrayToByteTransformer) []byte {
	l := len(m)
	acc := make([]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64ArrayArrayMapRune(m [][]complex64, f Complex64ArrayToRuneTransformer) []rune {
	l := len(m)
	acc := make([]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64ArrayArrayMapFloat32(m [][]complex64, f Complex64ArrayToFloat32Transformer) []float32 {
	l := len(m)
	acc := make([]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64ArrayArrayMapFloat64(m [][]complex64, f Complex64ArrayToFloat64Transformer) []float64 {
	l := len(m)
	acc := make([]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64ArrayArrayMapComplex64(m [][]complex64, f Complex64ArrayToComplex64Transformer) []complex64 {
	l := len(m)
	acc := make([]complex64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64ArrayArrayMapComplex128(m [][]complex64, f Complex64ArrayToComplex128Transformer) []complex128 {
	l := len(m)
	acc := make([]complex128, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64ArrayArrayMapAny(m [][]complex64, f Complex64ArrayToAnyTransformer) []Any {
	l := len(m)
	acc := make([]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64ArrayArrayMapBoolArray(m [][]complex64, f Complex64ArrayToBoolArrayTransformer) [][]bool {
	l := len(m)
	acc := make([][]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64ArrayArrayMapStringArray(m [][]complex64, f Complex64ArrayToStringArrayTransformer) [][]string {
	l := len(m)
	acc := make([][]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64ArrayArrayMapIntArray(m [][]complex64, f Complex64ArrayToIntArrayTransformer) [][]int {
	l := len(m)
	acc := make([][]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64ArrayArrayMapInt8Array(m [][]complex64, f Complex64ArrayToInt8ArrayTransformer) [][]int8 {
	l := len(m)
	acc := make([][]int8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64ArrayArrayMapInt16Array(m [][]complex64, f Complex64ArrayToInt16ArrayTransformer) [][]int16 {
	l := len(m)
	acc := make([][]int16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64ArrayArrayMapInt32Array(m [][]complex64, f Complex64ArrayToInt32ArrayTransformer) [][]int32 {
	l := len(m)
	acc := make([][]int32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64ArrayArrayMapInt64Array(m [][]complex64, f Complex64ArrayToInt64ArrayTransformer) [][]int64 {
	l := len(m)
	acc := make([][]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64ArrayArrayMapUintArray(m [][]complex64, f Complex64ArrayToUintArrayTransformer) [][]uint {
	l := len(m)
	acc := make([][]uint, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64ArrayArrayMapUint8Array(m [][]complex64, f Complex64ArrayToUint8ArrayTransformer) [][]uint8 {
	l := len(m)
	acc := make([][]uint8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64ArrayArrayMapUint16Array(m [][]complex64, f Complex64ArrayToUint16ArrayTransformer) [][]uint16 {
	l := len(m)
	acc := make([][]uint16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64ArrayArrayMapUint32Array(m [][]complex64, f Complex64ArrayToUint32ArrayTransformer) [][]uint32 {
	l := len(m)
	acc := make([][]uint32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64ArrayArrayMapUint64Array(m [][]complex64, f Complex64ArrayToUint64ArrayTransformer) [][]uint64 {
	l := len(m)
	acc := make([][]uint64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64ArrayArrayMapUintptrArray(m [][]complex64, f Complex64ArrayToUintptrArrayTransformer) [][]uintptr {
	l := len(m)
	acc := make([][]uintptr, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64ArrayArrayMapByteArray(m [][]complex64, f Complex64ArrayToByteArrayTransformer) [][]byte {
	l := len(m)
	acc := make([][]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64ArrayArrayMapRuneArray(m [][]complex64, f Complex64ArrayToRuneArrayTransformer) [][]rune {
	l := len(m)
	acc := make([][]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64ArrayArrayMapFloat32Array(m [][]complex64, f Complex64ArrayToFloat32ArrayTransformer) [][]float32 {
	l := len(m)
	acc := make([][]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64ArrayArrayMapFloat64Array(m [][]complex64, f Complex64ArrayToFloat64ArrayTransformer) [][]float64 {
	l := len(m)
	acc := make([][]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64ArrayArrayMapComplex64Array(m [][]complex64, f Complex64ArrayToComplex64ArrayTransformer) [][]complex64 {
	l := len(m)
	acc := make([][]complex64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64ArrayArrayMapComplex128Array(m [][]complex64, f Complex64ArrayToComplex128ArrayTransformer) [][]complex128 {
	l := len(m)
	acc := make([][]complex128, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64ArrayArrayMapAnyArray(m [][]complex64, f Complex64ArrayToAnyArrayTransformer) [][]Any {
	l := len(m)
	acc := make([][]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64ArrayArrayMapBoolOption(m [][]complex64, f Complex64ArrayToBoolOptionTransformer) []BoolOption {
	l := len(m)
	acc := make([]BoolOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64ArrayArrayMapStringOption(m [][]complex64, f Complex64ArrayToStringOptionTransformer) []StringOption {
	l := len(m)
	acc := make([]StringOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64ArrayArrayMapIntOption(m [][]complex64, f Complex64ArrayToIntOptionTransformer) []IntOption {
	l := len(m)
	acc := make([]IntOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64ArrayArrayMapInt8Option(m [][]complex64, f Complex64ArrayToInt8OptionTransformer) []Int8Option {
	l := len(m)
	acc := make([]Int8Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64ArrayArrayMapInt16Option(m [][]complex64, f Complex64ArrayToInt16OptionTransformer) []Int16Option {
	l := len(m)
	acc := make([]Int16Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64ArrayArrayMapInt32Option(m [][]complex64, f Complex64ArrayToInt32OptionTransformer) []Int32Option {
	l := len(m)
	acc := make([]Int32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64ArrayArrayMapInt64Option(m [][]complex64, f Complex64ArrayToInt64OptionTransformer) []Int64Option {
	l := len(m)
	acc := make([]Int64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64ArrayArrayMapUintOption(m [][]complex64, f Complex64ArrayToUintOptionTransformer) []UintOption {
	l := len(m)
	acc := make([]UintOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64ArrayArrayMapUint8Option(m [][]complex64, f Complex64ArrayToUint8OptionTransformer) []Uint8Option {
	l := len(m)
	acc := make([]Uint8Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64ArrayArrayMapUint16Option(m [][]complex64, f Complex64ArrayToUint16OptionTransformer) []Uint16Option {
	l := len(m)
	acc := make([]Uint16Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64ArrayArrayMapUint32Option(m [][]complex64, f Complex64ArrayToUint32OptionTransformer) []Uint32Option {
	l := len(m)
	acc := make([]Uint32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64ArrayArrayMapUint64Option(m [][]complex64, f Complex64ArrayToUint64OptionTransformer) []Uint64Option {
	l := len(m)
	acc := make([]Uint64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64ArrayArrayMapUintptrOption(m [][]complex64, f Complex64ArrayToUintptrOptionTransformer) []UintptrOption {
	l := len(m)
	acc := make([]UintptrOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64ArrayArrayMapByteOption(m [][]complex64, f Complex64ArrayToByteOptionTransformer) []ByteOption {
	l := len(m)
	acc := make([]ByteOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64ArrayArrayMapRuneOption(m [][]complex64, f Complex64ArrayToRuneOptionTransformer) []RuneOption {
	l := len(m)
	acc := make([]RuneOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64ArrayArrayMapFloat32Option(m [][]complex64, f Complex64ArrayToFloat32OptionTransformer) []Float32Option {
	l := len(m)
	acc := make([]Float32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64ArrayArrayMapFloat64Option(m [][]complex64, f Complex64ArrayToFloat64OptionTransformer) []Float64Option {
	l := len(m)
	acc := make([]Float64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64ArrayArrayMapComplex64Option(m [][]complex64, f Complex64ArrayToComplex64OptionTransformer) []Complex64Option {
	l := len(m)
	acc := make([]Complex64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64ArrayArrayMapComplex128Option(m [][]complex64, f Complex64ArrayToComplex128OptionTransformer) []Complex128Option {
	l := len(m)
	acc := make([]Complex128Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64ArrayArrayMapAnyOption(m [][]complex64, f Complex64ArrayToAnyOptionTransformer) []AnyOption {
	l := len(m)
	acc := make([]AnyOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128ArrayArrayMapBool(m [][]complex128, f Complex128ArrayToBoolTransformer) []bool {
	l := len(m)
	acc := make([]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128ArrayArrayMapString(m [][]complex128, f Complex128ArrayToStringTransformer) []string {
	l := len(m)
	acc := make([]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128ArrayArrayMapInt(m [][]complex128, f Complex128ArrayToIntTransformer) []int {
	l := len(m)
	acc := make([]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128ArrayArrayMapInt8(m [][]complex128, f Complex128ArrayToInt8Transformer) []int8 {
	l := len(m)
	acc := make([]int8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128ArrayArrayMapInt16(m [][]complex128, f Complex128ArrayToInt16Transformer) []int16 {
	l := len(m)
	acc := make([]int16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128ArrayArrayMapInt32(m [][]complex128, f Complex128ArrayToInt32Transformer) []int32 {
	l := len(m)
	acc := make([]int32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128ArrayArrayMapInt64(m [][]complex128, f Complex128ArrayToInt64Transformer) []int64 {
	l := len(m)
	acc := make([]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128ArrayArrayMapUint(m [][]complex128, f Complex128ArrayToUintTransformer) []uint {
	l := len(m)
	acc := make([]uint, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128ArrayArrayMapUint8(m [][]complex128, f Complex128ArrayToUint8Transformer) []uint8 {
	l := len(m)
	acc := make([]uint8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128ArrayArrayMapUint16(m [][]complex128, f Complex128ArrayToUint16Transformer) []uint16 {
	l := len(m)
	acc := make([]uint16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128ArrayArrayMapUint32(m [][]complex128, f Complex128ArrayToUint32Transformer) []uint32 {
	l := len(m)
	acc := make([]uint32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128ArrayArrayMapUint64(m [][]complex128, f Complex128ArrayToUint64Transformer) []uint64 {
	l := len(m)
	acc := make([]uint64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128ArrayArrayMapUintptr(m [][]complex128, f Complex128ArrayToUintptrTransformer) []uintptr {
	l := len(m)
	acc := make([]uintptr, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128ArrayArrayMapByte(m [][]complex128, f Complex128ArrayToByteTransformer) []byte {
	l := len(m)
	acc := make([]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128ArrayArrayMapRune(m [][]complex128, f Complex128ArrayToRuneTransformer) []rune {
	l := len(m)
	acc := make([]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128ArrayArrayMapFloat32(m [][]complex128, f Complex128ArrayToFloat32Transformer) []float32 {
	l := len(m)
	acc := make([]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128ArrayArrayMapFloat64(m [][]complex128, f Complex128ArrayToFloat64Transformer) []float64 {
	l := len(m)
	acc := make([]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128ArrayArrayMapComplex64(m [][]complex128, f Complex128ArrayToComplex64Transformer) []complex64 {
	l := len(m)
	acc := make([]complex64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128ArrayArrayMapComplex128(m [][]complex128, f Complex128ArrayToComplex128Transformer) []complex128 {
	l := len(m)
	acc := make([]complex128, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128ArrayArrayMapAny(m [][]complex128, f Complex128ArrayToAnyTransformer) []Any {
	l := len(m)
	acc := make([]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128ArrayArrayMapBoolArray(m [][]complex128, f Complex128ArrayToBoolArrayTransformer) [][]bool {
	l := len(m)
	acc := make([][]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128ArrayArrayMapStringArray(m [][]complex128, f Complex128ArrayToStringArrayTransformer) [][]string {
	l := len(m)
	acc := make([][]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128ArrayArrayMapIntArray(m [][]complex128, f Complex128ArrayToIntArrayTransformer) [][]int {
	l := len(m)
	acc := make([][]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128ArrayArrayMapInt8Array(m [][]complex128, f Complex128ArrayToInt8ArrayTransformer) [][]int8 {
	l := len(m)
	acc := make([][]int8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128ArrayArrayMapInt16Array(m [][]complex128, f Complex128ArrayToInt16ArrayTransformer) [][]int16 {
	l := len(m)
	acc := make([][]int16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128ArrayArrayMapInt32Array(m [][]complex128, f Complex128ArrayToInt32ArrayTransformer) [][]int32 {
	l := len(m)
	acc := make([][]int32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128ArrayArrayMapInt64Array(m [][]complex128, f Complex128ArrayToInt64ArrayTransformer) [][]int64 {
	l := len(m)
	acc := make([][]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128ArrayArrayMapUintArray(m [][]complex128, f Complex128ArrayToUintArrayTransformer) [][]uint {
	l := len(m)
	acc := make([][]uint, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128ArrayArrayMapUint8Array(m [][]complex128, f Complex128ArrayToUint8ArrayTransformer) [][]uint8 {
	l := len(m)
	acc := make([][]uint8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128ArrayArrayMapUint16Array(m [][]complex128, f Complex128ArrayToUint16ArrayTransformer) [][]uint16 {
	l := len(m)
	acc := make([][]uint16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128ArrayArrayMapUint32Array(m [][]complex128, f Complex128ArrayToUint32ArrayTransformer) [][]uint32 {
	l := len(m)
	acc := make([][]uint32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128ArrayArrayMapUint64Array(m [][]complex128, f Complex128ArrayToUint64ArrayTransformer) [][]uint64 {
	l := len(m)
	acc := make([][]uint64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128ArrayArrayMapUintptrArray(m [][]complex128, f Complex128ArrayToUintptrArrayTransformer) [][]uintptr {
	l := len(m)
	acc := make([][]uintptr, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128ArrayArrayMapByteArray(m [][]complex128, f Complex128ArrayToByteArrayTransformer) [][]byte {
	l := len(m)
	acc := make([][]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128ArrayArrayMapRuneArray(m [][]complex128, f Complex128ArrayToRuneArrayTransformer) [][]rune {
	l := len(m)
	acc := make([][]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128ArrayArrayMapFloat32Array(m [][]complex128, f Complex128ArrayToFloat32ArrayTransformer) [][]float32 {
	l := len(m)
	acc := make([][]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128ArrayArrayMapFloat64Array(m [][]complex128, f Complex128ArrayToFloat64ArrayTransformer) [][]float64 {
	l := len(m)
	acc := make([][]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128ArrayArrayMapComplex64Array(m [][]complex128, f Complex128ArrayToComplex64ArrayTransformer) [][]complex64 {
	l := len(m)
	acc := make([][]complex64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128ArrayArrayMapComplex128Array(m [][]complex128, f Complex128ArrayToComplex128ArrayTransformer) [][]complex128 {
	l := len(m)
	acc := make([][]complex128, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128ArrayArrayMapAnyArray(m [][]complex128, f Complex128ArrayToAnyArrayTransformer) [][]Any {
	l := len(m)
	acc := make([][]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128ArrayArrayMapBoolOption(m [][]complex128, f Complex128ArrayToBoolOptionTransformer) []BoolOption {
	l := len(m)
	acc := make([]BoolOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128ArrayArrayMapStringOption(m [][]complex128, f Complex128ArrayToStringOptionTransformer) []StringOption {
	l := len(m)
	acc := make([]StringOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128ArrayArrayMapIntOption(m [][]complex128, f Complex128ArrayToIntOptionTransformer) []IntOption {
	l := len(m)
	acc := make([]IntOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128ArrayArrayMapInt8Option(m [][]complex128, f Complex128ArrayToInt8OptionTransformer) []Int8Option {
	l := len(m)
	acc := make([]Int8Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128ArrayArrayMapInt16Option(m [][]complex128, f Complex128ArrayToInt16OptionTransformer) []Int16Option {
	l := len(m)
	acc := make([]Int16Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128ArrayArrayMapInt32Option(m [][]complex128, f Complex128ArrayToInt32OptionTransformer) []Int32Option {
	l := len(m)
	acc := make([]Int32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128ArrayArrayMapInt64Option(m [][]complex128, f Complex128ArrayToInt64OptionTransformer) []Int64Option {
	l := len(m)
	acc := make([]Int64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128ArrayArrayMapUintOption(m [][]complex128, f Complex128ArrayToUintOptionTransformer) []UintOption {
	l := len(m)
	acc := make([]UintOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128ArrayArrayMapUint8Option(m [][]complex128, f Complex128ArrayToUint8OptionTransformer) []Uint8Option {
	l := len(m)
	acc := make([]Uint8Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128ArrayArrayMapUint16Option(m [][]complex128, f Complex128ArrayToUint16OptionTransformer) []Uint16Option {
	l := len(m)
	acc := make([]Uint16Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128ArrayArrayMapUint32Option(m [][]complex128, f Complex128ArrayToUint32OptionTransformer) []Uint32Option {
	l := len(m)
	acc := make([]Uint32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128ArrayArrayMapUint64Option(m [][]complex128, f Complex128ArrayToUint64OptionTransformer) []Uint64Option {
	l := len(m)
	acc := make([]Uint64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128ArrayArrayMapUintptrOption(m [][]complex128, f Complex128ArrayToUintptrOptionTransformer) []UintptrOption {
	l := len(m)
	acc := make([]UintptrOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128ArrayArrayMapByteOption(m [][]complex128, f Complex128ArrayToByteOptionTransformer) []ByteOption {
	l := len(m)
	acc := make([]ByteOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128ArrayArrayMapRuneOption(m [][]complex128, f Complex128ArrayToRuneOptionTransformer) []RuneOption {
	l := len(m)
	acc := make([]RuneOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128ArrayArrayMapFloat32Option(m [][]complex128, f Complex128ArrayToFloat32OptionTransformer) []Float32Option {
	l := len(m)
	acc := make([]Float32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128ArrayArrayMapFloat64Option(m [][]complex128, f Complex128ArrayToFloat64OptionTransformer) []Float64Option {
	l := len(m)
	acc := make([]Float64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128ArrayArrayMapComplex64Option(m [][]complex128, f Complex128ArrayToComplex64OptionTransformer) []Complex64Option {
	l := len(m)
	acc := make([]Complex64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128ArrayArrayMapComplex128Option(m [][]complex128, f Complex128ArrayToComplex128OptionTransformer) []Complex128Option {
	l := len(m)
	acc := make([]Complex128Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128ArrayArrayMapAnyOption(m [][]complex128, f Complex128ArrayToAnyOptionTransformer) []AnyOption {
	l := len(m)
	acc := make([]AnyOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayArrayMapBool(m [][]Any, f AnyArrayToBoolTransformer) []bool {
	l := len(m)
	acc := make([]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayArrayMapString(m [][]Any, f AnyArrayToStringTransformer) []string {
	l := len(m)
	acc := make([]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayArrayMapInt(m [][]Any, f AnyArrayToIntTransformer) []int {
	l := len(m)
	acc := make([]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayArrayMapInt8(m [][]Any, f AnyArrayToInt8Transformer) []int8 {
	l := len(m)
	acc := make([]int8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayArrayMapInt16(m [][]Any, f AnyArrayToInt16Transformer) []int16 {
	l := len(m)
	acc := make([]int16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayArrayMapInt32(m [][]Any, f AnyArrayToInt32Transformer) []int32 {
	l := len(m)
	acc := make([]int32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayArrayMapInt64(m [][]Any, f AnyArrayToInt64Transformer) []int64 {
	l := len(m)
	acc := make([]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayArrayMapUint(m [][]Any, f AnyArrayToUintTransformer) []uint {
	l := len(m)
	acc := make([]uint, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayArrayMapUint8(m [][]Any, f AnyArrayToUint8Transformer) []uint8 {
	l := len(m)
	acc := make([]uint8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayArrayMapUint16(m [][]Any, f AnyArrayToUint16Transformer) []uint16 {
	l := len(m)
	acc := make([]uint16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayArrayMapUint32(m [][]Any, f AnyArrayToUint32Transformer) []uint32 {
	l := len(m)
	acc := make([]uint32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayArrayMapUint64(m [][]Any, f AnyArrayToUint64Transformer) []uint64 {
	l := len(m)
	acc := make([]uint64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayArrayMapUintptr(m [][]Any, f AnyArrayToUintptrTransformer) []uintptr {
	l := len(m)
	acc := make([]uintptr, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayArrayMapByte(m [][]Any, f AnyArrayToByteTransformer) []byte {
	l := len(m)
	acc := make([]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayArrayMapRune(m [][]Any, f AnyArrayToRuneTransformer) []rune {
	l := len(m)
	acc := make([]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayArrayMapFloat32(m [][]Any, f AnyArrayToFloat32Transformer) []float32 {
	l := len(m)
	acc := make([]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayArrayMapFloat64(m [][]Any, f AnyArrayToFloat64Transformer) []float64 {
	l := len(m)
	acc := make([]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayArrayMapComplex64(m [][]Any, f AnyArrayToComplex64Transformer) []complex64 {
	l := len(m)
	acc := make([]complex64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayArrayMapComplex128(m [][]Any, f AnyArrayToComplex128Transformer) []complex128 {
	l := len(m)
	acc := make([]complex128, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayArrayMapAny(m [][]Any, f AnyArrayToAnyTransformer) []Any {
	l := len(m)
	acc := make([]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayArrayMapBoolArray(m [][]Any, f AnyArrayToBoolArrayTransformer) [][]bool {
	l := len(m)
	acc := make([][]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayArrayMapStringArray(m [][]Any, f AnyArrayToStringArrayTransformer) [][]string {
	l := len(m)
	acc := make([][]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayArrayMapIntArray(m [][]Any, f AnyArrayToIntArrayTransformer) [][]int {
	l := len(m)
	acc := make([][]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayArrayMapInt8Array(m [][]Any, f AnyArrayToInt8ArrayTransformer) [][]int8 {
	l := len(m)
	acc := make([][]int8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayArrayMapInt16Array(m [][]Any, f AnyArrayToInt16ArrayTransformer) [][]int16 {
	l := len(m)
	acc := make([][]int16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayArrayMapInt32Array(m [][]Any, f AnyArrayToInt32ArrayTransformer) [][]int32 {
	l := len(m)
	acc := make([][]int32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayArrayMapInt64Array(m [][]Any, f AnyArrayToInt64ArrayTransformer) [][]int64 {
	l := len(m)
	acc := make([][]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayArrayMapUintArray(m [][]Any, f AnyArrayToUintArrayTransformer) [][]uint {
	l := len(m)
	acc := make([][]uint, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayArrayMapUint8Array(m [][]Any, f AnyArrayToUint8ArrayTransformer) [][]uint8 {
	l := len(m)
	acc := make([][]uint8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayArrayMapUint16Array(m [][]Any, f AnyArrayToUint16ArrayTransformer) [][]uint16 {
	l := len(m)
	acc := make([][]uint16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayArrayMapUint32Array(m [][]Any, f AnyArrayToUint32ArrayTransformer) [][]uint32 {
	l := len(m)
	acc := make([][]uint32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayArrayMapUint64Array(m [][]Any, f AnyArrayToUint64ArrayTransformer) [][]uint64 {
	l := len(m)
	acc := make([][]uint64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayArrayMapUintptrArray(m [][]Any, f AnyArrayToUintptrArrayTransformer) [][]uintptr {
	l := len(m)
	acc := make([][]uintptr, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayArrayMapByteArray(m [][]Any, f AnyArrayToByteArrayTransformer) [][]byte {
	l := len(m)
	acc := make([][]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayArrayMapRuneArray(m [][]Any, f AnyArrayToRuneArrayTransformer) [][]rune {
	l := len(m)
	acc := make([][]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayArrayMapFloat32Array(m [][]Any, f AnyArrayToFloat32ArrayTransformer) [][]float32 {
	l := len(m)
	acc := make([][]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayArrayMapFloat64Array(m [][]Any, f AnyArrayToFloat64ArrayTransformer) [][]float64 {
	l := len(m)
	acc := make([][]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayArrayMapComplex64Array(m [][]Any, f AnyArrayToComplex64ArrayTransformer) [][]complex64 {
	l := len(m)
	acc := make([][]complex64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayArrayMapComplex128Array(m [][]Any, f AnyArrayToComplex128ArrayTransformer) [][]complex128 {
	l := len(m)
	acc := make([][]complex128, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayArrayMapAnyArray(m [][]Any, f AnyArrayToAnyArrayTransformer) [][]Any {
	l := len(m)
	acc := make([][]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayArrayMapBoolOption(m [][]Any, f AnyArrayToBoolOptionTransformer) []BoolOption {
	l := len(m)
	acc := make([]BoolOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayArrayMapStringOption(m [][]Any, f AnyArrayToStringOptionTransformer) []StringOption {
	l := len(m)
	acc := make([]StringOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayArrayMapIntOption(m [][]Any, f AnyArrayToIntOptionTransformer) []IntOption {
	l := len(m)
	acc := make([]IntOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayArrayMapInt8Option(m [][]Any, f AnyArrayToInt8OptionTransformer) []Int8Option {
	l := len(m)
	acc := make([]Int8Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayArrayMapInt16Option(m [][]Any, f AnyArrayToInt16OptionTransformer) []Int16Option {
	l := len(m)
	acc := make([]Int16Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayArrayMapInt32Option(m [][]Any, f AnyArrayToInt32OptionTransformer) []Int32Option {
	l := len(m)
	acc := make([]Int32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayArrayMapInt64Option(m [][]Any, f AnyArrayToInt64OptionTransformer) []Int64Option {
	l := len(m)
	acc := make([]Int64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayArrayMapUintOption(m [][]Any, f AnyArrayToUintOptionTransformer) []UintOption {
	l := len(m)
	acc := make([]UintOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayArrayMapUint8Option(m [][]Any, f AnyArrayToUint8OptionTransformer) []Uint8Option {
	l := len(m)
	acc := make([]Uint8Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayArrayMapUint16Option(m [][]Any, f AnyArrayToUint16OptionTransformer) []Uint16Option {
	l := len(m)
	acc := make([]Uint16Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayArrayMapUint32Option(m [][]Any, f AnyArrayToUint32OptionTransformer) []Uint32Option {
	l := len(m)
	acc := make([]Uint32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayArrayMapUint64Option(m [][]Any, f AnyArrayToUint64OptionTransformer) []Uint64Option {
	l := len(m)
	acc := make([]Uint64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayArrayMapUintptrOption(m [][]Any, f AnyArrayToUintptrOptionTransformer) []UintptrOption {
	l := len(m)
	acc := make([]UintptrOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayArrayMapByteOption(m [][]Any, f AnyArrayToByteOptionTransformer) []ByteOption {
	l := len(m)
	acc := make([]ByteOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayArrayMapRuneOption(m [][]Any, f AnyArrayToRuneOptionTransformer) []RuneOption {
	l := len(m)
	acc := make([]RuneOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayArrayMapFloat32Option(m [][]Any, f AnyArrayToFloat32OptionTransformer) []Float32Option {
	l := len(m)
	acc := make([]Float32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayArrayMapFloat64Option(m [][]Any, f AnyArrayToFloat64OptionTransformer) []Float64Option {
	l := len(m)
	acc := make([]Float64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayArrayMapComplex64Option(m [][]Any, f AnyArrayToComplex64OptionTransformer) []Complex64Option {
	l := len(m)
	acc := make([]Complex64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayArrayMapComplex128Option(m [][]Any, f AnyArrayToComplex128OptionTransformer) []Complex128Option {
	l := len(m)
	acc := make([]Complex128Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayArrayMapAnyOption(m [][]Any, f AnyArrayToAnyOptionTransformer) []AnyOption {
	l := len(m)
	acc := make([]AnyOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolOptionArrayMapBool(m []BoolOption, f BoolOptionToBoolTransformer) []bool {
	l := len(m)
	acc := make([]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolOptionArrayMapString(m []BoolOption, f BoolOptionToStringTransformer) []string {
	l := len(m)
	acc := make([]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolOptionArrayMapInt(m []BoolOption, f BoolOptionToIntTransformer) []int {
	l := len(m)
	acc := make([]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolOptionArrayMapInt8(m []BoolOption, f BoolOptionToInt8Transformer) []int8 {
	l := len(m)
	acc := make([]int8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolOptionArrayMapInt16(m []BoolOption, f BoolOptionToInt16Transformer) []int16 {
	l := len(m)
	acc := make([]int16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolOptionArrayMapInt32(m []BoolOption, f BoolOptionToInt32Transformer) []int32 {
	l := len(m)
	acc := make([]int32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolOptionArrayMapInt64(m []BoolOption, f BoolOptionToInt64Transformer) []int64 {
	l := len(m)
	acc := make([]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolOptionArrayMapUint(m []BoolOption, f BoolOptionToUintTransformer) []uint {
	l := len(m)
	acc := make([]uint, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolOptionArrayMapUint8(m []BoolOption, f BoolOptionToUint8Transformer) []uint8 {
	l := len(m)
	acc := make([]uint8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolOptionArrayMapUint16(m []BoolOption, f BoolOptionToUint16Transformer) []uint16 {
	l := len(m)
	acc := make([]uint16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolOptionArrayMapUint32(m []BoolOption, f BoolOptionToUint32Transformer) []uint32 {
	l := len(m)
	acc := make([]uint32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolOptionArrayMapUint64(m []BoolOption, f BoolOptionToUint64Transformer) []uint64 {
	l := len(m)
	acc := make([]uint64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolOptionArrayMapUintptr(m []BoolOption, f BoolOptionToUintptrTransformer) []uintptr {
	l := len(m)
	acc := make([]uintptr, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolOptionArrayMapByte(m []BoolOption, f BoolOptionToByteTransformer) []byte {
	l := len(m)
	acc := make([]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolOptionArrayMapRune(m []BoolOption, f BoolOptionToRuneTransformer) []rune {
	l := len(m)
	acc := make([]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolOptionArrayMapFloat32(m []BoolOption, f BoolOptionToFloat32Transformer) []float32 {
	l := len(m)
	acc := make([]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolOptionArrayMapFloat64(m []BoolOption, f BoolOptionToFloat64Transformer) []float64 {
	l := len(m)
	acc := make([]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolOptionArrayMapComplex64(m []BoolOption, f BoolOptionToComplex64Transformer) []complex64 {
	l := len(m)
	acc := make([]complex64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolOptionArrayMapComplex128(m []BoolOption, f BoolOptionToComplex128Transformer) []complex128 {
	l := len(m)
	acc := make([]complex128, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolOptionArrayMapAny(m []BoolOption, f BoolOptionToAnyTransformer) []Any {
	l := len(m)
	acc := make([]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolOptionArrayMapBoolArray(m []BoolOption, f BoolOptionToBoolArrayTransformer) [][]bool {
	l := len(m)
	acc := make([][]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolOptionArrayMapStringArray(m []BoolOption, f BoolOptionToStringArrayTransformer) [][]string {
	l := len(m)
	acc := make([][]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolOptionArrayMapIntArray(m []BoolOption, f BoolOptionToIntArrayTransformer) [][]int {
	l := len(m)
	acc := make([][]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolOptionArrayMapInt8Array(m []BoolOption, f BoolOptionToInt8ArrayTransformer) [][]int8 {
	l := len(m)
	acc := make([][]int8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolOptionArrayMapInt16Array(m []BoolOption, f BoolOptionToInt16ArrayTransformer) [][]int16 {
	l := len(m)
	acc := make([][]int16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolOptionArrayMapInt32Array(m []BoolOption, f BoolOptionToInt32ArrayTransformer) [][]int32 {
	l := len(m)
	acc := make([][]int32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolOptionArrayMapInt64Array(m []BoolOption, f BoolOptionToInt64ArrayTransformer) [][]int64 {
	l := len(m)
	acc := make([][]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolOptionArrayMapUintArray(m []BoolOption, f BoolOptionToUintArrayTransformer) [][]uint {
	l := len(m)
	acc := make([][]uint, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolOptionArrayMapUint8Array(m []BoolOption, f BoolOptionToUint8ArrayTransformer) [][]uint8 {
	l := len(m)
	acc := make([][]uint8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolOptionArrayMapUint16Array(m []BoolOption, f BoolOptionToUint16ArrayTransformer) [][]uint16 {
	l := len(m)
	acc := make([][]uint16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolOptionArrayMapUint32Array(m []BoolOption, f BoolOptionToUint32ArrayTransformer) [][]uint32 {
	l := len(m)
	acc := make([][]uint32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolOptionArrayMapUint64Array(m []BoolOption, f BoolOptionToUint64ArrayTransformer) [][]uint64 {
	l := len(m)
	acc := make([][]uint64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolOptionArrayMapUintptrArray(m []BoolOption, f BoolOptionToUintptrArrayTransformer) [][]uintptr {
	l := len(m)
	acc := make([][]uintptr, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolOptionArrayMapByteArray(m []BoolOption, f BoolOptionToByteArrayTransformer) [][]byte {
	l := len(m)
	acc := make([][]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolOptionArrayMapRuneArray(m []BoolOption, f BoolOptionToRuneArrayTransformer) [][]rune {
	l := len(m)
	acc := make([][]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolOptionArrayMapFloat32Array(m []BoolOption, f BoolOptionToFloat32ArrayTransformer) [][]float32 {
	l := len(m)
	acc := make([][]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolOptionArrayMapFloat64Array(m []BoolOption, f BoolOptionToFloat64ArrayTransformer) [][]float64 {
	l := len(m)
	acc := make([][]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolOptionArrayMapComplex64Array(m []BoolOption, f BoolOptionToComplex64ArrayTransformer) [][]complex64 {
	l := len(m)
	acc := make([][]complex64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolOptionArrayMapComplex128Array(m []BoolOption, f BoolOptionToComplex128ArrayTransformer) [][]complex128 {
	l := len(m)
	acc := make([][]complex128, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolOptionArrayMapAnyArray(m []BoolOption, f BoolOptionToAnyArrayTransformer) [][]Any {
	l := len(m)
	acc := make([][]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolOptionArrayMapBoolOption(m []BoolOption, f BoolOptionToBoolOptionTransformer) []BoolOption {
	l := len(m)
	acc := make([]BoolOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolOptionArrayMapStringOption(m []BoolOption, f BoolOptionToStringOptionTransformer) []StringOption {
	l := len(m)
	acc := make([]StringOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolOptionArrayMapIntOption(m []BoolOption, f BoolOptionToIntOptionTransformer) []IntOption {
	l := len(m)
	acc := make([]IntOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolOptionArrayMapInt8Option(m []BoolOption, f BoolOptionToInt8OptionTransformer) []Int8Option {
	l := len(m)
	acc := make([]Int8Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolOptionArrayMapInt16Option(m []BoolOption, f BoolOptionToInt16OptionTransformer) []Int16Option {
	l := len(m)
	acc := make([]Int16Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolOptionArrayMapInt32Option(m []BoolOption, f BoolOptionToInt32OptionTransformer) []Int32Option {
	l := len(m)
	acc := make([]Int32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolOptionArrayMapInt64Option(m []BoolOption, f BoolOptionToInt64OptionTransformer) []Int64Option {
	l := len(m)
	acc := make([]Int64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolOptionArrayMapUintOption(m []BoolOption, f BoolOptionToUintOptionTransformer) []UintOption {
	l := len(m)
	acc := make([]UintOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolOptionArrayMapUint8Option(m []BoolOption, f BoolOptionToUint8OptionTransformer) []Uint8Option {
	l := len(m)
	acc := make([]Uint8Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolOptionArrayMapUint16Option(m []BoolOption, f BoolOptionToUint16OptionTransformer) []Uint16Option {
	l := len(m)
	acc := make([]Uint16Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolOptionArrayMapUint32Option(m []BoolOption, f BoolOptionToUint32OptionTransformer) []Uint32Option {
	l := len(m)
	acc := make([]Uint32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolOptionArrayMapUint64Option(m []BoolOption, f BoolOptionToUint64OptionTransformer) []Uint64Option {
	l := len(m)
	acc := make([]Uint64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolOptionArrayMapUintptrOption(m []BoolOption, f BoolOptionToUintptrOptionTransformer) []UintptrOption {
	l := len(m)
	acc := make([]UintptrOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolOptionArrayMapByteOption(m []BoolOption, f BoolOptionToByteOptionTransformer) []ByteOption {
	l := len(m)
	acc := make([]ByteOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolOptionArrayMapRuneOption(m []BoolOption, f BoolOptionToRuneOptionTransformer) []RuneOption {
	l := len(m)
	acc := make([]RuneOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolOptionArrayMapFloat32Option(m []BoolOption, f BoolOptionToFloat32OptionTransformer) []Float32Option {
	l := len(m)
	acc := make([]Float32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolOptionArrayMapFloat64Option(m []BoolOption, f BoolOptionToFloat64OptionTransformer) []Float64Option {
	l := len(m)
	acc := make([]Float64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolOptionArrayMapComplex64Option(m []BoolOption, f BoolOptionToComplex64OptionTransformer) []Complex64Option {
	l := len(m)
	acc := make([]Complex64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolOptionArrayMapComplex128Option(m []BoolOption, f BoolOptionToComplex128OptionTransformer) []Complex128Option {
	l := len(m)
	acc := make([]Complex128Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolOptionArrayMapAnyOption(m []BoolOption, f BoolOptionToAnyOptionTransformer) []AnyOption {
	l := len(m)
	acc := make([]AnyOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringOptionArrayMapBool(m []StringOption, f StringOptionToBoolTransformer) []bool {
	l := len(m)
	acc := make([]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringOptionArrayMapString(m []StringOption, f StringOptionToStringTransformer) []string {
	l := len(m)
	acc := make([]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringOptionArrayMapInt(m []StringOption, f StringOptionToIntTransformer) []int {
	l := len(m)
	acc := make([]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringOptionArrayMapInt8(m []StringOption, f StringOptionToInt8Transformer) []int8 {
	l := len(m)
	acc := make([]int8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringOptionArrayMapInt16(m []StringOption, f StringOptionToInt16Transformer) []int16 {
	l := len(m)
	acc := make([]int16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringOptionArrayMapInt32(m []StringOption, f StringOptionToInt32Transformer) []int32 {
	l := len(m)
	acc := make([]int32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringOptionArrayMapInt64(m []StringOption, f StringOptionToInt64Transformer) []int64 {
	l := len(m)
	acc := make([]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringOptionArrayMapUint(m []StringOption, f StringOptionToUintTransformer) []uint {
	l := len(m)
	acc := make([]uint, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringOptionArrayMapUint8(m []StringOption, f StringOptionToUint8Transformer) []uint8 {
	l := len(m)
	acc := make([]uint8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringOptionArrayMapUint16(m []StringOption, f StringOptionToUint16Transformer) []uint16 {
	l := len(m)
	acc := make([]uint16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringOptionArrayMapUint32(m []StringOption, f StringOptionToUint32Transformer) []uint32 {
	l := len(m)
	acc := make([]uint32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringOptionArrayMapUint64(m []StringOption, f StringOptionToUint64Transformer) []uint64 {
	l := len(m)
	acc := make([]uint64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringOptionArrayMapUintptr(m []StringOption, f StringOptionToUintptrTransformer) []uintptr {
	l := len(m)
	acc := make([]uintptr, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringOptionArrayMapByte(m []StringOption, f StringOptionToByteTransformer) []byte {
	l := len(m)
	acc := make([]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringOptionArrayMapRune(m []StringOption, f StringOptionToRuneTransformer) []rune {
	l := len(m)
	acc := make([]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringOptionArrayMapFloat32(m []StringOption, f StringOptionToFloat32Transformer) []float32 {
	l := len(m)
	acc := make([]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringOptionArrayMapFloat64(m []StringOption, f StringOptionToFloat64Transformer) []float64 {
	l := len(m)
	acc := make([]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringOptionArrayMapComplex64(m []StringOption, f StringOptionToComplex64Transformer) []complex64 {
	l := len(m)
	acc := make([]complex64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringOptionArrayMapComplex128(m []StringOption, f StringOptionToComplex128Transformer) []complex128 {
	l := len(m)
	acc := make([]complex128, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringOptionArrayMapAny(m []StringOption, f StringOptionToAnyTransformer) []Any {
	l := len(m)
	acc := make([]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringOptionArrayMapBoolArray(m []StringOption, f StringOptionToBoolArrayTransformer) [][]bool {
	l := len(m)
	acc := make([][]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringOptionArrayMapStringArray(m []StringOption, f StringOptionToStringArrayTransformer) [][]string {
	l := len(m)
	acc := make([][]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringOptionArrayMapIntArray(m []StringOption, f StringOptionToIntArrayTransformer) [][]int {
	l := len(m)
	acc := make([][]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringOptionArrayMapInt8Array(m []StringOption, f StringOptionToInt8ArrayTransformer) [][]int8 {
	l := len(m)
	acc := make([][]int8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringOptionArrayMapInt16Array(m []StringOption, f StringOptionToInt16ArrayTransformer) [][]int16 {
	l := len(m)
	acc := make([][]int16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringOptionArrayMapInt32Array(m []StringOption, f StringOptionToInt32ArrayTransformer) [][]int32 {
	l := len(m)
	acc := make([][]int32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringOptionArrayMapInt64Array(m []StringOption, f StringOptionToInt64ArrayTransformer) [][]int64 {
	l := len(m)
	acc := make([][]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringOptionArrayMapUintArray(m []StringOption, f StringOptionToUintArrayTransformer) [][]uint {
	l := len(m)
	acc := make([][]uint, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringOptionArrayMapUint8Array(m []StringOption, f StringOptionToUint8ArrayTransformer) [][]uint8 {
	l := len(m)
	acc := make([][]uint8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringOptionArrayMapUint16Array(m []StringOption, f StringOptionToUint16ArrayTransformer) [][]uint16 {
	l := len(m)
	acc := make([][]uint16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringOptionArrayMapUint32Array(m []StringOption, f StringOptionToUint32ArrayTransformer) [][]uint32 {
	l := len(m)
	acc := make([][]uint32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringOptionArrayMapUint64Array(m []StringOption, f StringOptionToUint64ArrayTransformer) [][]uint64 {
	l := len(m)
	acc := make([][]uint64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringOptionArrayMapUintptrArray(m []StringOption, f StringOptionToUintptrArrayTransformer) [][]uintptr {
	l := len(m)
	acc := make([][]uintptr, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringOptionArrayMapByteArray(m []StringOption, f StringOptionToByteArrayTransformer) [][]byte {
	l := len(m)
	acc := make([][]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringOptionArrayMapRuneArray(m []StringOption, f StringOptionToRuneArrayTransformer) [][]rune {
	l := len(m)
	acc := make([][]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringOptionArrayMapFloat32Array(m []StringOption, f StringOptionToFloat32ArrayTransformer) [][]float32 {
	l := len(m)
	acc := make([][]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringOptionArrayMapFloat64Array(m []StringOption, f StringOptionToFloat64ArrayTransformer) [][]float64 {
	l := len(m)
	acc := make([][]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringOptionArrayMapComplex64Array(m []StringOption, f StringOptionToComplex64ArrayTransformer) [][]complex64 {
	l := len(m)
	acc := make([][]complex64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringOptionArrayMapComplex128Array(m []StringOption, f StringOptionToComplex128ArrayTransformer) [][]complex128 {
	l := len(m)
	acc := make([][]complex128, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringOptionArrayMapAnyArray(m []StringOption, f StringOptionToAnyArrayTransformer) [][]Any {
	l := len(m)
	acc := make([][]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringOptionArrayMapBoolOption(m []StringOption, f StringOptionToBoolOptionTransformer) []BoolOption {
	l := len(m)
	acc := make([]BoolOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringOptionArrayMapStringOption(m []StringOption, f StringOptionToStringOptionTransformer) []StringOption {
	l := len(m)
	acc := make([]StringOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringOptionArrayMapIntOption(m []StringOption, f StringOptionToIntOptionTransformer) []IntOption {
	l := len(m)
	acc := make([]IntOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringOptionArrayMapInt8Option(m []StringOption, f StringOptionToInt8OptionTransformer) []Int8Option {
	l := len(m)
	acc := make([]Int8Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringOptionArrayMapInt16Option(m []StringOption, f StringOptionToInt16OptionTransformer) []Int16Option {
	l := len(m)
	acc := make([]Int16Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringOptionArrayMapInt32Option(m []StringOption, f StringOptionToInt32OptionTransformer) []Int32Option {
	l := len(m)
	acc := make([]Int32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringOptionArrayMapInt64Option(m []StringOption, f StringOptionToInt64OptionTransformer) []Int64Option {
	l := len(m)
	acc := make([]Int64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringOptionArrayMapUintOption(m []StringOption, f StringOptionToUintOptionTransformer) []UintOption {
	l := len(m)
	acc := make([]UintOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringOptionArrayMapUint8Option(m []StringOption, f StringOptionToUint8OptionTransformer) []Uint8Option {
	l := len(m)
	acc := make([]Uint8Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringOptionArrayMapUint16Option(m []StringOption, f StringOptionToUint16OptionTransformer) []Uint16Option {
	l := len(m)
	acc := make([]Uint16Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringOptionArrayMapUint32Option(m []StringOption, f StringOptionToUint32OptionTransformer) []Uint32Option {
	l := len(m)
	acc := make([]Uint32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringOptionArrayMapUint64Option(m []StringOption, f StringOptionToUint64OptionTransformer) []Uint64Option {
	l := len(m)
	acc := make([]Uint64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringOptionArrayMapUintptrOption(m []StringOption, f StringOptionToUintptrOptionTransformer) []UintptrOption {
	l := len(m)
	acc := make([]UintptrOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringOptionArrayMapByteOption(m []StringOption, f StringOptionToByteOptionTransformer) []ByteOption {
	l := len(m)
	acc := make([]ByteOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringOptionArrayMapRuneOption(m []StringOption, f StringOptionToRuneOptionTransformer) []RuneOption {
	l := len(m)
	acc := make([]RuneOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringOptionArrayMapFloat32Option(m []StringOption, f StringOptionToFloat32OptionTransformer) []Float32Option {
	l := len(m)
	acc := make([]Float32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringOptionArrayMapFloat64Option(m []StringOption, f StringOptionToFloat64OptionTransformer) []Float64Option {
	l := len(m)
	acc := make([]Float64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringOptionArrayMapComplex64Option(m []StringOption, f StringOptionToComplex64OptionTransformer) []Complex64Option {
	l := len(m)
	acc := make([]Complex64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringOptionArrayMapComplex128Option(m []StringOption, f StringOptionToComplex128OptionTransformer) []Complex128Option {
	l := len(m)
	acc := make([]Complex128Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringOptionArrayMapAnyOption(m []StringOption, f StringOptionToAnyOptionTransformer) []AnyOption {
	l := len(m)
	acc := make([]AnyOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntOptionArrayMapBool(m []IntOption, f IntOptionToBoolTransformer) []bool {
	l := len(m)
	acc := make([]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntOptionArrayMapString(m []IntOption, f IntOptionToStringTransformer) []string {
	l := len(m)
	acc := make([]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntOptionArrayMapInt(m []IntOption, f IntOptionToIntTransformer) []int {
	l := len(m)
	acc := make([]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntOptionArrayMapInt8(m []IntOption, f IntOptionToInt8Transformer) []int8 {
	l := len(m)
	acc := make([]int8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntOptionArrayMapInt16(m []IntOption, f IntOptionToInt16Transformer) []int16 {
	l := len(m)
	acc := make([]int16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntOptionArrayMapInt32(m []IntOption, f IntOptionToInt32Transformer) []int32 {
	l := len(m)
	acc := make([]int32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntOptionArrayMapInt64(m []IntOption, f IntOptionToInt64Transformer) []int64 {
	l := len(m)
	acc := make([]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntOptionArrayMapUint(m []IntOption, f IntOptionToUintTransformer) []uint {
	l := len(m)
	acc := make([]uint, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntOptionArrayMapUint8(m []IntOption, f IntOptionToUint8Transformer) []uint8 {
	l := len(m)
	acc := make([]uint8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntOptionArrayMapUint16(m []IntOption, f IntOptionToUint16Transformer) []uint16 {
	l := len(m)
	acc := make([]uint16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntOptionArrayMapUint32(m []IntOption, f IntOptionToUint32Transformer) []uint32 {
	l := len(m)
	acc := make([]uint32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntOptionArrayMapUint64(m []IntOption, f IntOptionToUint64Transformer) []uint64 {
	l := len(m)
	acc := make([]uint64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntOptionArrayMapUintptr(m []IntOption, f IntOptionToUintptrTransformer) []uintptr {
	l := len(m)
	acc := make([]uintptr, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntOptionArrayMapByte(m []IntOption, f IntOptionToByteTransformer) []byte {
	l := len(m)
	acc := make([]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntOptionArrayMapRune(m []IntOption, f IntOptionToRuneTransformer) []rune {
	l := len(m)
	acc := make([]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntOptionArrayMapFloat32(m []IntOption, f IntOptionToFloat32Transformer) []float32 {
	l := len(m)
	acc := make([]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntOptionArrayMapFloat64(m []IntOption, f IntOptionToFloat64Transformer) []float64 {
	l := len(m)
	acc := make([]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntOptionArrayMapComplex64(m []IntOption, f IntOptionToComplex64Transformer) []complex64 {
	l := len(m)
	acc := make([]complex64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntOptionArrayMapComplex128(m []IntOption, f IntOptionToComplex128Transformer) []complex128 {
	l := len(m)
	acc := make([]complex128, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntOptionArrayMapAny(m []IntOption, f IntOptionToAnyTransformer) []Any {
	l := len(m)
	acc := make([]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntOptionArrayMapBoolArray(m []IntOption, f IntOptionToBoolArrayTransformer) [][]bool {
	l := len(m)
	acc := make([][]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntOptionArrayMapStringArray(m []IntOption, f IntOptionToStringArrayTransformer) [][]string {
	l := len(m)
	acc := make([][]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntOptionArrayMapIntArray(m []IntOption, f IntOptionToIntArrayTransformer) [][]int {
	l := len(m)
	acc := make([][]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntOptionArrayMapInt8Array(m []IntOption, f IntOptionToInt8ArrayTransformer) [][]int8 {
	l := len(m)
	acc := make([][]int8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntOptionArrayMapInt16Array(m []IntOption, f IntOptionToInt16ArrayTransformer) [][]int16 {
	l := len(m)
	acc := make([][]int16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntOptionArrayMapInt32Array(m []IntOption, f IntOptionToInt32ArrayTransformer) [][]int32 {
	l := len(m)
	acc := make([][]int32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntOptionArrayMapInt64Array(m []IntOption, f IntOptionToInt64ArrayTransformer) [][]int64 {
	l := len(m)
	acc := make([][]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntOptionArrayMapUintArray(m []IntOption, f IntOptionToUintArrayTransformer) [][]uint {
	l := len(m)
	acc := make([][]uint, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntOptionArrayMapUint8Array(m []IntOption, f IntOptionToUint8ArrayTransformer) [][]uint8 {
	l := len(m)
	acc := make([][]uint8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntOptionArrayMapUint16Array(m []IntOption, f IntOptionToUint16ArrayTransformer) [][]uint16 {
	l := len(m)
	acc := make([][]uint16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntOptionArrayMapUint32Array(m []IntOption, f IntOptionToUint32ArrayTransformer) [][]uint32 {
	l := len(m)
	acc := make([][]uint32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntOptionArrayMapUint64Array(m []IntOption, f IntOptionToUint64ArrayTransformer) [][]uint64 {
	l := len(m)
	acc := make([][]uint64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntOptionArrayMapUintptrArray(m []IntOption, f IntOptionToUintptrArrayTransformer) [][]uintptr {
	l := len(m)
	acc := make([][]uintptr, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntOptionArrayMapByteArray(m []IntOption, f IntOptionToByteArrayTransformer) [][]byte {
	l := len(m)
	acc := make([][]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntOptionArrayMapRuneArray(m []IntOption, f IntOptionToRuneArrayTransformer) [][]rune {
	l := len(m)
	acc := make([][]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntOptionArrayMapFloat32Array(m []IntOption, f IntOptionToFloat32ArrayTransformer) [][]float32 {
	l := len(m)
	acc := make([][]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntOptionArrayMapFloat64Array(m []IntOption, f IntOptionToFloat64ArrayTransformer) [][]float64 {
	l := len(m)
	acc := make([][]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntOptionArrayMapComplex64Array(m []IntOption, f IntOptionToComplex64ArrayTransformer) [][]complex64 {
	l := len(m)
	acc := make([][]complex64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntOptionArrayMapComplex128Array(m []IntOption, f IntOptionToComplex128ArrayTransformer) [][]complex128 {
	l := len(m)
	acc := make([][]complex128, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntOptionArrayMapAnyArray(m []IntOption, f IntOptionToAnyArrayTransformer) [][]Any {
	l := len(m)
	acc := make([][]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntOptionArrayMapBoolOption(m []IntOption, f IntOptionToBoolOptionTransformer) []BoolOption {
	l := len(m)
	acc := make([]BoolOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntOptionArrayMapStringOption(m []IntOption, f IntOptionToStringOptionTransformer) []StringOption {
	l := len(m)
	acc := make([]StringOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntOptionArrayMapIntOption(m []IntOption, f IntOptionToIntOptionTransformer) []IntOption {
	l := len(m)
	acc := make([]IntOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntOptionArrayMapInt8Option(m []IntOption, f IntOptionToInt8OptionTransformer) []Int8Option {
	l := len(m)
	acc := make([]Int8Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntOptionArrayMapInt16Option(m []IntOption, f IntOptionToInt16OptionTransformer) []Int16Option {
	l := len(m)
	acc := make([]Int16Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntOptionArrayMapInt32Option(m []IntOption, f IntOptionToInt32OptionTransformer) []Int32Option {
	l := len(m)
	acc := make([]Int32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntOptionArrayMapInt64Option(m []IntOption, f IntOptionToInt64OptionTransformer) []Int64Option {
	l := len(m)
	acc := make([]Int64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntOptionArrayMapUintOption(m []IntOption, f IntOptionToUintOptionTransformer) []UintOption {
	l := len(m)
	acc := make([]UintOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntOptionArrayMapUint8Option(m []IntOption, f IntOptionToUint8OptionTransformer) []Uint8Option {
	l := len(m)
	acc := make([]Uint8Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntOptionArrayMapUint16Option(m []IntOption, f IntOptionToUint16OptionTransformer) []Uint16Option {
	l := len(m)
	acc := make([]Uint16Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntOptionArrayMapUint32Option(m []IntOption, f IntOptionToUint32OptionTransformer) []Uint32Option {
	l := len(m)
	acc := make([]Uint32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntOptionArrayMapUint64Option(m []IntOption, f IntOptionToUint64OptionTransformer) []Uint64Option {
	l := len(m)
	acc := make([]Uint64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntOptionArrayMapUintptrOption(m []IntOption, f IntOptionToUintptrOptionTransformer) []UintptrOption {
	l := len(m)
	acc := make([]UintptrOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntOptionArrayMapByteOption(m []IntOption, f IntOptionToByteOptionTransformer) []ByteOption {
	l := len(m)
	acc := make([]ByteOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntOptionArrayMapRuneOption(m []IntOption, f IntOptionToRuneOptionTransformer) []RuneOption {
	l := len(m)
	acc := make([]RuneOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntOptionArrayMapFloat32Option(m []IntOption, f IntOptionToFloat32OptionTransformer) []Float32Option {
	l := len(m)
	acc := make([]Float32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntOptionArrayMapFloat64Option(m []IntOption, f IntOptionToFloat64OptionTransformer) []Float64Option {
	l := len(m)
	acc := make([]Float64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntOptionArrayMapComplex64Option(m []IntOption, f IntOptionToComplex64OptionTransformer) []Complex64Option {
	l := len(m)
	acc := make([]Complex64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntOptionArrayMapComplex128Option(m []IntOption, f IntOptionToComplex128OptionTransformer) []Complex128Option {
	l := len(m)
	acc := make([]Complex128Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntOptionArrayMapAnyOption(m []IntOption, f IntOptionToAnyOptionTransformer) []AnyOption {
	l := len(m)
	acc := make([]AnyOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8OptionArrayMapBool(m []Int8Option, f Int8OptionToBoolTransformer) []bool {
	l := len(m)
	acc := make([]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8OptionArrayMapString(m []Int8Option, f Int8OptionToStringTransformer) []string {
	l := len(m)
	acc := make([]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8OptionArrayMapInt(m []Int8Option, f Int8OptionToIntTransformer) []int {
	l := len(m)
	acc := make([]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8OptionArrayMapInt8(m []Int8Option, f Int8OptionToInt8Transformer) []int8 {
	l := len(m)
	acc := make([]int8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8OptionArrayMapInt16(m []Int8Option, f Int8OptionToInt16Transformer) []int16 {
	l := len(m)
	acc := make([]int16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8OptionArrayMapInt32(m []Int8Option, f Int8OptionToInt32Transformer) []int32 {
	l := len(m)
	acc := make([]int32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8OptionArrayMapInt64(m []Int8Option, f Int8OptionToInt64Transformer) []int64 {
	l := len(m)
	acc := make([]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8OptionArrayMapUint(m []Int8Option, f Int8OptionToUintTransformer) []uint {
	l := len(m)
	acc := make([]uint, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8OptionArrayMapUint8(m []Int8Option, f Int8OptionToUint8Transformer) []uint8 {
	l := len(m)
	acc := make([]uint8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8OptionArrayMapUint16(m []Int8Option, f Int8OptionToUint16Transformer) []uint16 {
	l := len(m)
	acc := make([]uint16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8OptionArrayMapUint32(m []Int8Option, f Int8OptionToUint32Transformer) []uint32 {
	l := len(m)
	acc := make([]uint32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8OptionArrayMapUint64(m []Int8Option, f Int8OptionToUint64Transformer) []uint64 {
	l := len(m)
	acc := make([]uint64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8OptionArrayMapUintptr(m []Int8Option, f Int8OptionToUintptrTransformer) []uintptr {
	l := len(m)
	acc := make([]uintptr, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8OptionArrayMapByte(m []Int8Option, f Int8OptionToByteTransformer) []byte {
	l := len(m)
	acc := make([]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8OptionArrayMapRune(m []Int8Option, f Int8OptionToRuneTransformer) []rune {
	l := len(m)
	acc := make([]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8OptionArrayMapFloat32(m []Int8Option, f Int8OptionToFloat32Transformer) []float32 {
	l := len(m)
	acc := make([]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8OptionArrayMapFloat64(m []Int8Option, f Int8OptionToFloat64Transformer) []float64 {
	l := len(m)
	acc := make([]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8OptionArrayMapComplex64(m []Int8Option, f Int8OptionToComplex64Transformer) []complex64 {
	l := len(m)
	acc := make([]complex64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8OptionArrayMapComplex128(m []Int8Option, f Int8OptionToComplex128Transformer) []complex128 {
	l := len(m)
	acc := make([]complex128, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8OptionArrayMapAny(m []Int8Option, f Int8OptionToAnyTransformer) []Any {
	l := len(m)
	acc := make([]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8OptionArrayMapBoolArray(m []Int8Option, f Int8OptionToBoolArrayTransformer) [][]bool {
	l := len(m)
	acc := make([][]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8OptionArrayMapStringArray(m []Int8Option, f Int8OptionToStringArrayTransformer) [][]string {
	l := len(m)
	acc := make([][]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8OptionArrayMapIntArray(m []Int8Option, f Int8OptionToIntArrayTransformer) [][]int {
	l := len(m)
	acc := make([][]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8OptionArrayMapInt8Array(m []Int8Option, f Int8OptionToInt8ArrayTransformer) [][]int8 {
	l := len(m)
	acc := make([][]int8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8OptionArrayMapInt16Array(m []Int8Option, f Int8OptionToInt16ArrayTransformer) [][]int16 {
	l := len(m)
	acc := make([][]int16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8OptionArrayMapInt32Array(m []Int8Option, f Int8OptionToInt32ArrayTransformer) [][]int32 {
	l := len(m)
	acc := make([][]int32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8OptionArrayMapInt64Array(m []Int8Option, f Int8OptionToInt64ArrayTransformer) [][]int64 {
	l := len(m)
	acc := make([][]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8OptionArrayMapUintArray(m []Int8Option, f Int8OptionToUintArrayTransformer) [][]uint {
	l := len(m)
	acc := make([][]uint, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8OptionArrayMapUint8Array(m []Int8Option, f Int8OptionToUint8ArrayTransformer) [][]uint8 {
	l := len(m)
	acc := make([][]uint8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8OptionArrayMapUint16Array(m []Int8Option, f Int8OptionToUint16ArrayTransformer) [][]uint16 {
	l := len(m)
	acc := make([][]uint16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8OptionArrayMapUint32Array(m []Int8Option, f Int8OptionToUint32ArrayTransformer) [][]uint32 {
	l := len(m)
	acc := make([][]uint32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8OptionArrayMapUint64Array(m []Int8Option, f Int8OptionToUint64ArrayTransformer) [][]uint64 {
	l := len(m)
	acc := make([][]uint64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8OptionArrayMapUintptrArray(m []Int8Option, f Int8OptionToUintptrArrayTransformer) [][]uintptr {
	l := len(m)
	acc := make([][]uintptr, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8OptionArrayMapByteArray(m []Int8Option, f Int8OptionToByteArrayTransformer) [][]byte {
	l := len(m)
	acc := make([][]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8OptionArrayMapRuneArray(m []Int8Option, f Int8OptionToRuneArrayTransformer) [][]rune {
	l := len(m)
	acc := make([][]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8OptionArrayMapFloat32Array(m []Int8Option, f Int8OptionToFloat32ArrayTransformer) [][]float32 {
	l := len(m)
	acc := make([][]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8OptionArrayMapFloat64Array(m []Int8Option, f Int8OptionToFloat64ArrayTransformer) [][]float64 {
	l := len(m)
	acc := make([][]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8OptionArrayMapComplex64Array(m []Int8Option, f Int8OptionToComplex64ArrayTransformer) [][]complex64 {
	l := len(m)
	acc := make([][]complex64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8OptionArrayMapComplex128Array(m []Int8Option, f Int8OptionToComplex128ArrayTransformer) [][]complex128 {
	l := len(m)
	acc := make([][]complex128, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8OptionArrayMapAnyArray(m []Int8Option, f Int8OptionToAnyArrayTransformer) [][]Any {
	l := len(m)
	acc := make([][]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8OptionArrayMapBoolOption(m []Int8Option, f Int8OptionToBoolOptionTransformer) []BoolOption {
	l := len(m)
	acc := make([]BoolOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8OptionArrayMapStringOption(m []Int8Option, f Int8OptionToStringOptionTransformer) []StringOption {
	l := len(m)
	acc := make([]StringOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8OptionArrayMapIntOption(m []Int8Option, f Int8OptionToIntOptionTransformer) []IntOption {
	l := len(m)
	acc := make([]IntOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8OptionArrayMapInt8Option(m []Int8Option, f Int8OptionToInt8OptionTransformer) []Int8Option {
	l := len(m)
	acc := make([]Int8Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8OptionArrayMapInt16Option(m []Int8Option, f Int8OptionToInt16OptionTransformer) []Int16Option {
	l := len(m)
	acc := make([]Int16Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8OptionArrayMapInt32Option(m []Int8Option, f Int8OptionToInt32OptionTransformer) []Int32Option {
	l := len(m)
	acc := make([]Int32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8OptionArrayMapInt64Option(m []Int8Option, f Int8OptionToInt64OptionTransformer) []Int64Option {
	l := len(m)
	acc := make([]Int64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8OptionArrayMapUintOption(m []Int8Option, f Int8OptionToUintOptionTransformer) []UintOption {
	l := len(m)
	acc := make([]UintOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8OptionArrayMapUint8Option(m []Int8Option, f Int8OptionToUint8OptionTransformer) []Uint8Option {
	l := len(m)
	acc := make([]Uint8Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8OptionArrayMapUint16Option(m []Int8Option, f Int8OptionToUint16OptionTransformer) []Uint16Option {
	l := len(m)
	acc := make([]Uint16Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8OptionArrayMapUint32Option(m []Int8Option, f Int8OptionToUint32OptionTransformer) []Uint32Option {
	l := len(m)
	acc := make([]Uint32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8OptionArrayMapUint64Option(m []Int8Option, f Int8OptionToUint64OptionTransformer) []Uint64Option {
	l := len(m)
	acc := make([]Uint64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8OptionArrayMapUintptrOption(m []Int8Option, f Int8OptionToUintptrOptionTransformer) []UintptrOption {
	l := len(m)
	acc := make([]UintptrOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8OptionArrayMapByteOption(m []Int8Option, f Int8OptionToByteOptionTransformer) []ByteOption {
	l := len(m)
	acc := make([]ByteOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8OptionArrayMapRuneOption(m []Int8Option, f Int8OptionToRuneOptionTransformer) []RuneOption {
	l := len(m)
	acc := make([]RuneOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8OptionArrayMapFloat32Option(m []Int8Option, f Int8OptionToFloat32OptionTransformer) []Float32Option {
	l := len(m)
	acc := make([]Float32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8OptionArrayMapFloat64Option(m []Int8Option, f Int8OptionToFloat64OptionTransformer) []Float64Option {
	l := len(m)
	acc := make([]Float64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8OptionArrayMapComplex64Option(m []Int8Option, f Int8OptionToComplex64OptionTransformer) []Complex64Option {
	l := len(m)
	acc := make([]Complex64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8OptionArrayMapComplex128Option(m []Int8Option, f Int8OptionToComplex128OptionTransformer) []Complex128Option {
	l := len(m)
	acc := make([]Complex128Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int8OptionArrayMapAnyOption(m []Int8Option, f Int8OptionToAnyOptionTransformer) []AnyOption {
	l := len(m)
	acc := make([]AnyOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16OptionArrayMapBool(m []Int16Option, f Int16OptionToBoolTransformer) []bool {
	l := len(m)
	acc := make([]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16OptionArrayMapString(m []Int16Option, f Int16OptionToStringTransformer) []string {
	l := len(m)
	acc := make([]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16OptionArrayMapInt(m []Int16Option, f Int16OptionToIntTransformer) []int {
	l := len(m)
	acc := make([]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16OptionArrayMapInt8(m []Int16Option, f Int16OptionToInt8Transformer) []int8 {
	l := len(m)
	acc := make([]int8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16OptionArrayMapInt16(m []Int16Option, f Int16OptionToInt16Transformer) []int16 {
	l := len(m)
	acc := make([]int16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16OptionArrayMapInt32(m []Int16Option, f Int16OptionToInt32Transformer) []int32 {
	l := len(m)
	acc := make([]int32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16OptionArrayMapInt64(m []Int16Option, f Int16OptionToInt64Transformer) []int64 {
	l := len(m)
	acc := make([]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16OptionArrayMapUint(m []Int16Option, f Int16OptionToUintTransformer) []uint {
	l := len(m)
	acc := make([]uint, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16OptionArrayMapUint8(m []Int16Option, f Int16OptionToUint8Transformer) []uint8 {
	l := len(m)
	acc := make([]uint8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16OptionArrayMapUint16(m []Int16Option, f Int16OptionToUint16Transformer) []uint16 {
	l := len(m)
	acc := make([]uint16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16OptionArrayMapUint32(m []Int16Option, f Int16OptionToUint32Transformer) []uint32 {
	l := len(m)
	acc := make([]uint32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16OptionArrayMapUint64(m []Int16Option, f Int16OptionToUint64Transformer) []uint64 {
	l := len(m)
	acc := make([]uint64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16OptionArrayMapUintptr(m []Int16Option, f Int16OptionToUintptrTransformer) []uintptr {
	l := len(m)
	acc := make([]uintptr, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16OptionArrayMapByte(m []Int16Option, f Int16OptionToByteTransformer) []byte {
	l := len(m)
	acc := make([]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16OptionArrayMapRune(m []Int16Option, f Int16OptionToRuneTransformer) []rune {
	l := len(m)
	acc := make([]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16OptionArrayMapFloat32(m []Int16Option, f Int16OptionToFloat32Transformer) []float32 {
	l := len(m)
	acc := make([]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16OptionArrayMapFloat64(m []Int16Option, f Int16OptionToFloat64Transformer) []float64 {
	l := len(m)
	acc := make([]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16OptionArrayMapComplex64(m []Int16Option, f Int16OptionToComplex64Transformer) []complex64 {
	l := len(m)
	acc := make([]complex64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16OptionArrayMapComplex128(m []Int16Option, f Int16OptionToComplex128Transformer) []complex128 {
	l := len(m)
	acc := make([]complex128, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16OptionArrayMapAny(m []Int16Option, f Int16OptionToAnyTransformer) []Any {
	l := len(m)
	acc := make([]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16OptionArrayMapBoolArray(m []Int16Option, f Int16OptionToBoolArrayTransformer) [][]bool {
	l := len(m)
	acc := make([][]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16OptionArrayMapStringArray(m []Int16Option, f Int16OptionToStringArrayTransformer) [][]string {
	l := len(m)
	acc := make([][]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16OptionArrayMapIntArray(m []Int16Option, f Int16OptionToIntArrayTransformer) [][]int {
	l := len(m)
	acc := make([][]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16OptionArrayMapInt8Array(m []Int16Option, f Int16OptionToInt8ArrayTransformer) [][]int8 {
	l := len(m)
	acc := make([][]int8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16OptionArrayMapInt16Array(m []Int16Option, f Int16OptionToInt16ArrayTransformer) [][]int16 {
	l := len(m)
	acc := make([][]int16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16OptionArrayMapInt32Array(m []Int16Option, f Int16OptionToInt32ArrayTransformer) [][]int32 {
	l := len(m)
	acc := make([][]int32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16OptionArrayMapInt64Array(m []Int16Option, f Int16OptionToInt64ArrayTransformer) [][]int64 {
	l := len(m)
	acc := make([][]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16OptionArrayMapUintArray(m []Int16Option, f Int16OptionToUintArrayTransformer) [][]uint {
	l := len(m)
	acc := make([][]uint, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16OptionArrayMapUint8Array(m []Int16Option, f Int16OptionToUint8ArrayTransformer) [][]uint8 {
	l := len(m)
	acc := make([][]uint8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16OptionArrayMapUint16Array(m []Int16Option, f Int16OptionToUint16ArrayTransformer) [][]uint16 {
	l := len(m)
	acc := make([][]uint16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16OptionArrayMapUint32Array(m []Int16Option, f Int16OptionToUint32ArrayTransformer) [][]uint32 {
	l := len(m)
	acc := make([][]uint32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16OptionArrayMapUint64Array(m []Int16Option, f Int16OptionToUint64ArrayTransformer) [][]uint64 {
	l := len(m)
	acc := make([][]uint64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16OptionArrayMapUintptrArray(m []Int16Option, f Int16OptionToUintptrArrayTransformer) [][]uintptr {
	l := len(m)
	acc := make([][]uintptr, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16OptionArrayMapByteArray(m []Int16Option, f Int16OptionToByteArrayTransformer) [][]byte {
	l := len(m)
	acc := make([][]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16OptionArrayMapRuneArray(m []Int16Option, f Int16OptionToRuneArrayTransformer) [][]rune {
	l := len(m)
	acc := make([][]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16OptionArrayMapFloat32Array(m []Int16Option, f Int16OptionToFloat32ArrayTransformer) [][]float32 {
	l := len(m)
	acc := make([][]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16OptionArrayMapFloat64Array(m []Int16Option, f Int16OptionToFloat64ArrayTransformer) [][]float64 {
	l := len(m)
	acc := make([][]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16OptionArrayMapComplex64Array(m []Int16Option, f Int16OptionToComplex64ArrayTransformer) [][]complex64 {
	l := len(m)
	acc := make([][]complex64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16OptionArrayMapComplex128Array(m []Int16Option, f Int16OptionToComplex128ArrayTransformer) [][]complex128 {
	l := len(m)
	acc := make([][]complex128, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16OptionArrayMapAnyArray(m []Int16Option, f Int16OptionToAnyArrayTransformer) [][]Any {
	l := len(m)
	acc := make([][]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16OptionArrayMapBoolOption(m []Int16Option, f Int16OptionToBoolOptionTransformer) []BoolOption {
	l := len(m)
	acc := make([]BoolOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16OptionArrayMapStringOption(m []Int16Option, f Int16OptionToStringOptionTransformer) []StringOption {
	l := len(m)
	acc := make([]StringOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16OptionArrayMapIntOption(m []Int16Option, f Int16OptionToIntOptionTransformer) []IntOption {
	l := len(m)
	acc := make([]IntOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16OptionArrayMapInt8Option(m []Int16Option, f Int16OptionToInt8OptionTransformer) []Int8Option {
	l := len(m)
	acc := make([]Int8Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16OptionArrayMapInt16Option(m []Int16Option, f Int16OptionToInt16OptionTransformer) []Int16Option {
	l := len(m)
	acc := make([]Int16Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16OptionArrayMapInt32Option(m []Int16Option, f Int16OptionToInt32OptionTransformer) []Int32Option {
	l := len(m)
	acc := make([]Int32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16OptionArrayMapInt64Option(m []Int16Option, f Int16OptionToInt64OptionTransformer) []Int64Option {
	l := len(m)
	acc := make([]Int64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16OptionArrayMapUintOption(m []Int16Option, f Int16OptionToUintOptionTransformer) []UintOption {
	l := len(m)
	acc := make([]UintOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16OptionArrayMapUint8Option(m []Int16Option, f Int16OptionToUint8OptionTransformer) []Uint8Option {
	l := len(m)
	acc := make([]Uint8Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16OptionArrayMapUint16Option(m []Int16Option, f Int16OptionToUint16OptionTransformer) []Uint16Option {
	l := len(m)
	acc := make([]Uint16Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16OptionArrayMapUint32Option(m []Int16Option, f Int16OptionToUint32OptionTransformer) []Uint32Option {
	l := len(m)
	acc := make([]Uint32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16OptionArrayMapUint64Option(m []Int16Option, f Int16OptionToUint64OptionTransformer) []Uint64Option {
	l := len(m)
	acc := make([]Uint64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16OptionArrayMapUintptrOption(m []Int16Option, f Int16OptionToUintptrOptionTransformer) []UintptrOption {
	l := len(m)
	acc := make([]UintptrOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16OptionArrayMapByteOption(m []Int16Option, f Int16OptionToByteOptionTransformer) []ByteOption {
	l := len(m)
	acc := make([]ByteOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16OptionArrayMapRuneOption(m []Int16Option, f Int16OptionToRuneOptionTransformer) []RuneOption {
	l := len(m)
	acc := make([]RuneOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16OptionArrayMapFloat32Option(m []Int16Option, f Int16OptionToFloat32OptionTransformer) []Float32Option {
	l := len(m)
	acc := make([]Float32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16OptionArrayMapFloat64Option(m []Int16Option, f Int16OptionToFloat64OptionTransformer) []Float64Option {
	l := len(m)
	acc := make([]Float64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16OptionArrayMapComplex64Option(m []Int16Option, f Int16OptionToComplex64OptionTransformer) []Complex64Option {
	l := len(m)
	acc := make([]Complex64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16OptionArrayMapComplex128Option(m []Int16Option, f Int16OptionToComplex128OptionTransformer) []Complex128Option {
	l := len(m)
	acc := make([]Complex128Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int16OptionArrayMapAnyOption(m []Int16Option, f Int16OptionToAnyOptionTransformer) []AnyOption {
	l := len(m)
	acc := make([]AnyOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32OptionArrayMapBool(m []Int32Option, f Int32OptionToBoolTransformer) []bool {
	l := len(m)
	acc := make([]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32OptionArrayMapString(m []Int32Option, f Int32OptionToStringTransformer) []string {
	l := len(m)
	acc := make([]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32OptionArrayMapInt(m []Int32Option, f Int32OptionToIntTransformer) []int {
	l := len(m)
	acc := make([]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32OptionArrayMapInt8(m []Int32Option, f Int32OptionToInt8Transformer) []int8 {
	l := len(m)
	acc := make([]int8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32OptionArrayMapInt16(m []Int32Option, f Int32OptionToInt16Transformer) []int16 {
	l := len(m)
	acc := make([]int16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32OptionArrayMapInt32(m []Int32Option, f Int32OptionToInt32Transformer) []int32 {
	l := len(m)
	acc := make([]int32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32OptionArrayMapInt64(m []Int32Option, f Int32OptionToInt64Transformer) []int64 {
	l := len(m)
	acc := make([]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32OptionArrayMapUint(m []Int32Option, f Int32OptionToUintTransformer) []uint {
	l := len(m)
	acc := make([]uint, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32OptionArrayMapUint8(m []Int32Option, f Int32OptionToUint8Transformer) []uint8 {
	l := len(m)
	acc := make([]uint8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32OptionArrayMapUint16(m []Int32Option, f Int32OptionToUint16Transformer) []uint16 {
	l := len(m)
	acc := make([]uint16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32OptionArrayMapUint32(m []Int32Option, f Int32OptionToUint32Transformer) []uint32 {
	l := len(m)
	acc := make([]uint32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32OptionArrayMapUint64(m []Int32Option, f Int32OptionToUint64Transformer) []uint64 {
	l := len(m)
	acc := make([]uint64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32OptionArrayMapUintptr(m []Int32Option, f Int32OptionToUintptrTransformer) []uintptr {
	l := len(m)
	acc := make([]uintptr, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32OptionArrayMapByte(m []Int32Option, f Int32OptionToByteTransformer) []byte {
	l := len(m)
	acc := make([]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32OptionArrayMapRune(m []Int32Option, f Int32OptionToRuneTransformer) []rune {
	l := len(m)
	acc := make([]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32OptionArrayMapFloat32(m []Int32Option, f Int32OptionToFloat32Transformer) []float32 {
	l := len(m)
	acc := make([]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32OptionArrayMapFloat64(m []Int32Option, f Int32OptionToFloat64Transformer) []float64 {
	l := len(m)
	acc := make([]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32OptionArrayMapComplex64(m []Int32Option, f Int32OptionToComplex64Transformer) []complex64 {
	l := len(m)
	acc := make([]complex64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32OptionArrayMapComplex128(m []Int32Option, f Int32OptionToComplex128Transformer) []complex128 {
	l := len(m)
	acc := make([]complex128, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32OptionArrayMapAny(m []Int32Option, f Int32OptionToAnyTransformer) []Any {
	l := len(m)
	acc := make([]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32OptionArrayMapBoolArray(m []Int32Option, f Int32OptionToBoolArrayTransformer) [][]bool {
	l := len(m)
	acc := make([][]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32OptionArrayMapStringArray(m []Int32Option, f Int32OptionToStringArrayTransformer) [][]string {
	l := len(m)
	acc := make([][]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32OptionArrayMapIntArray(m []Int32Option, f Int32OptionToIntArrayTransformer) [][]int {
	l := len(m)
	acc := make([][]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32OptionArrayMapInt8Array(m []Int32Option, f Int32OptionToInt8ArrayTransformer) [][]int8 {
	l := len(m)
	acc := make([][]int8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32OptionArrayMapInt16Array(m []Int32Option, f Int32OptionToInt16ArrayTransformer) [][]int16 {
	l := len(m)
	acc := make([][]int16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32OptionArrayMapInt32Array(m []Int32Option, f Int32OptionToInt32ArrayTransformer) [][]int32 {
	l := len(m)
	acc := make([][]int32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32OptionArrayMapInt64Array(m []Int32Option, f Int32OptionToInt64ArrayTransformer) [][]int64 {
	l := len(m)
	acc := make([][]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32OptionArrayMapUintArray(m []Int32Option, f Int32OptionToUintArrayTransformer) [][]uint {
	l := len(m)
	acc := make([][]uint, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32OptionArrayMapUint8Array(m []Int32Option, f Int32OptionToUint8ArrayTransformer) [][]uint8 {
	l := len(m)
	acc := make([][]uint8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32OptionArrayMapUint16Array(m []Int32Option, f Int32OptionToUint16ArrayTransformer) [][]uint16 {
	l := len(m)
	acc := make([][]uint16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32OptionArrayMapUint32Array(m []Int32Option, f Int32OptionToUint32ArrayTransformer) [][]uint32 {
	l := len(m)
	acc := make([][]uint32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32OptionArrayMapUint64Array(m []Int32Option, f Int32OptionToUint64ArrayTransformer) [][]uint64 {
	l := len(m)
	acc := make([][]uint64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32OptionArrayMapUintptrArray(m []Int32Option, f Int32OptionToUintptrArrayTransformer) [][]uintptr {
	l := len(m)
	acc := make([][]uintptr, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32OptionArrayMapByteArray(m []Int32Option, f Int32OptionToByteArrayTransformer) [][]byte {
	l := len(m)
	acc := make([][]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32OptionArrayMapRuneArray(m []Int32Option, f Int32OptionToRuneArrayTransformer) [][]rune {
	l := len(m)
	acc := make([][]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32OptionArrayMapFloat32Array(m []Int32Option, f Int32OptionToFloat32ArrayTransformer) [][]float32 {
	l := len(m)
	acc := make([][]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32OptionArrayMapFloat64Array(m []Int32Option, f Int32OptionToFloat64ArrayTransformer) [][]float64 {
	l := len(m)
	acc := make([][]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32OptionArrayMapComplex64Array(m []Int32Option, f Int32OptionToComplex64ArrayTransformer) [][]complex64 {
	l := len(m)
	acc := make([][]complex64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32OptionArrayMapComplex128Array(m []Int32Option, f Int32OptionToComplex128ArrayTransformer) [][]complex128 {
	l := len(m)
	acc := make([][]complex128, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32OptionArrayMapAnyArray(m []Int32Option, f Int32OptionToAnyArrayTransformer) [][]Any {
	l := len(m)
	acc := make([][]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32OptionArrayMapBoolOption(m []Int32Option, f Int32OptionToBoolOptionTransformer) []BoolOption {
	l := len(m)
	acc := make([]BoolOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32OptionArrayMapStringOption(m []Int32Option, f Int32OptionToStringOptionTransformer) []StringOption {
	l := len(m)
	acc := make([]StringOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32OptionArrayMapIntOption(m []Int32Option, f Int32OptionToIntOptionTransformer) []IntOption {
	l := len(m)
	acc := make([]IntOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32OptionArrayMapInt8Option(m []Int32Option, f Int32OptionToInt8OptionTransformer) []Int8Option {
	l := len(m)
	acc := make([]Int8Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32OptionArrayMapInt16Option(m []Int32Option, f Int32OptionToInt16OptionTransformer) []Int16Option {
	l := len(m)
	acc := make([]Int16Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32OptionArrayMapInt32Option(m []Int32Option, f Int32OptionToInt32OptionTransformer) []Int32Option {
	l := len(m)
	acc := make([]Int32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32OptionArrayMapInt64Option(m []Int32Option, f Int32OptionToInt64OptionTransformer) []Int64Option {
	l := len(m)
	acc := make([]Int64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32OptionArrayMapUintOption(m []Int32Option, f Int32OptionToUintOptionTransformer) []UintOption {
	l := len(m)
	acc := make([]UintOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32OptionArrayMapUint8Option(m []Int32Option, f Int32OptionToUint8OptionTransformer) []Uint8Option {
	l := len(m)
	acc := make([]Uint8Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32OptionArrayMapUint16Option(m []Int32Option, f Int32OptionToUint16OptionTransformer) []Uint16Option {
	l := len(m)
	acc := make([]Uint16Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32OptionArrayMapUint32Option(m []Int32Option, f Int32OptionToUint32OptionTransformer) []Uint32Option {
	l := len(m)
	acc := make([]Uint32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32OptionArrayMapUint64Option(m []Int32Option, f Int32OptionToUint64OptionTransformer) []Uint64Option {
	l := len(m)
	acc := make([]Uint64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32OptionArrayMapUintptrOption(m []Int32Option, f Int32OptionToUintptrOptionTransformer) []UintptrOption {
	l := len(m)
	acc := make([]UintptrOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32OptionArrayMapByteOption(m []Int32Option, f Int32OptionToByteOptionTransformer) []ByteOption {
	l := len(m)
	acc := make([]ByteOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32OptionArrayMapRuneOption(m []Int32Option, f Int32OptionToRuneOptionTransformer) []RuneOption {
	l := len(m)
	acc := make([]RuneOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32OptionArrayMapFloat32Option(m []Int32Option, f Int32OptionToFloat32OptionTransformer) []Float32Option {
	l := len(m)
	acc := make([]Float32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32OptionArrayMapFloat64Option(m []Int32Option, f Int32OptionToFloat64OptionTransformer) []Float64Option {
	l := len(m)
	acc := make([]Float64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32OptionArrayMapComplex64Option(m []Int32Option, f Int32OptionToComplex64OptionTransformer) []Complex64Option {
	l := len(m)
	acc := make([]Complex64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32OptionArrayMapComplex128Option(m []Int32Option, f Int32OptionToComplex128OptionTransformer) []Complex128Option {
	l := len(m)
	acc := make([]Complex128Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int32OptionArrayMapAnyOption(m []Int32Option, f Int32OptionToAnyOptionTransformer) []AnyOption {
	l := len(m)
	acc := make([]AnyOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64OptionArrayMapBool(m []Int64Option, f Int64OptionToBoolTransformer) []bool {
	l := len(m)
	acc := make([]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64OptionArrayMapString(m []Int64Option, f Int64OptionToStringTransformer) []string {
	l := len(m)
	acc := make([]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64OptionArrayMapInt(m []Int64Option, f Int64OptionToIntTransformer) []int {
	l := len(m)
	acc := make([]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64OptionArrayMapInt8(m []Int64Option, f Int64OptionToInt8Transformer) []int8 {
	l := len(m)
	acc := make([]int8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64OptionArrayMapInt16(m []Int64Option, f Int64OptionToInt16Transformer) []int16 {
	l := len(m)
	acc := make([]int16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64OptionArrayMapInt32(m []Int64Option, f Int64OptionToInt32Transformer) []int32 {
	l := len(m)
	acc := make([]int32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64OptionArrayMapInt64(m []Int64Option, f Int64OptionToInt64Transformer) []int64 {
	l := len(m)
	acc := make([]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64OptionArrayMapUint(m []Int64Option, f Int64OptionToUintTransformer) []uint {
	l := len(m)
	acc := make([]uint, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64OptionArrayMapUint8(m []Int64Option, f Int64OptionToUint8Transformer) []uint8 {
	l := len(m)
	acc := make([]uint8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64OptionArrayMapUint16(m []Int64Option, f Int64OptionToUint16Transformer) []uint16 {
	l := len(m)
	acc := make([]uint16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64OptionArrayMapUint32(m []Int64Option, f Int64OptionToUint32Transformer) []uint32 {
	l := len(m)
	acc := make([]uint32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64OptionArrayMapUint64(m []Int64Option, f Int64OptionToUint64Transformer) []uint64 {
	l := len(m)
	acc := make([]uint64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64OptionArrayMapUintptr(m []Int64Option, f Int64OptionToUintptrTransformer) []uintptr {
	l := len(m)
	acc := make([]uintptr, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64OptionArrayMapByte(m []Int64Option, f Int64OptionToByteTransformer) []byte {
	l := len(m)
	acc := make([]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64OptionArrayMapRune(m []Int64Option, f Int64OptionToRuneTransformer) []rune {
	l := len(m)
	acc := make([]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64OptionArrayMapFloat32(m []Int64Option, f Int64OptionToFloat32Transformer) []float32 {
	l := len(m)
	acc := make([]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64OptionArrayMapFloat64(m []Int64Option, f Int64OptionToFloat64Transformer) []float64 {
	l := len(m)
	acc := make([]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64OptionArrayMapComplex64(m []Int64Option, f Int64OptionToComplex64Transformer) []complex64 {
	l := len(m)
	acc := make([]complex64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64OptionArrayMapComplex128(m []Int64Option, f Int64OptionToComplex128Transformer) []complex128 {
	l := len(m)
	acc := make([]complex128, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64OptionArrayMapAny(m []Int64Option, f Int64OptionToAnyTransformer) []Any {
	l := len(m)
	acc := make([]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64OptionArrayMapBoolArray(m []Int64Option, f Int64OptionToBoolArrayTransformer) [][]bool {
	l := len(m)
	acc := make([][]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64OptionArrayMapStringArray(m []Int64Option, f Int64OptionToStringArrayTransformer) [][]string {
	l := len(m)
	acc := make([][]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64OptionArrayMapIntArray(m []Int64Option, f Int64OptionToIntArrayTransformer) [][]int {
	l := len(m)
	acc := make([][]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64OptionArrayMapInt8Array(m []Int64Option, f Int64OptionToInt8ArrayTransformer) [][]int8 {
	l := len(m)
	acc := make([][]int8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64OptionArrayMapInt16Array(m []Int64Option, f Int64OptionToInt16ArrayTransformer) [][]int16 {
	l := len(m)
	acc := make([][]int16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64OptionArrayMapInt32Array(m []Int64Option, f Int64OptionToInt32ArrayTransformer) [][]int32 {
	l := len(m)
	acc := make([][]int32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64OptionArrayMapInt64Array(m []Int64Option, f Int64OptionToInt64ArrayTransformer) [][]int64 {
	l := len(m)
	acc := make([][]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64OptionArrayMapUintArray(m []Int64Option, f Int64OptionToUintArrayTransformer) [][]uint {
	l := len(m)
	acc := make([][]uint, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64OptionArrayMapUint8Array(m []Int64Option, f Int64OptionToUint8ArrayTransformer) [][]uint8 {
	l := len(m)
	acc := make([][]uint8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64OptionArrayMapUint16Array(m []Int64Option, f Int64OptionToUint16ArrayTransformer) [][]uint16 {
	l := len(m)
	acc := make([][]uint16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64OptionArrayMapUint32Array(m []Int64Option, f Int64OptionToUint32ArrayTransformer) [][]uint32 {
	l := len(m)
	acc := make([][]uint32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64OptionArrayMapUint64Array(m []Int64Option, f Int64OptionToUint64ArrayTransformer) [][]uint64 {
	l := len(m)
	acc := make([][]uint64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64OptionArrayMapUintptrArray(m []Int64Option, f Int64OptionToUintptrArrayTransformer) [][]uintptr {
	l := len(m)
	acc := make([][]uintptr, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64OptionArrayMapByteArray(m []Int64Option, f Int64OptionToByteArrayTransformer) [][]byte {
	l := len(m)
	acc := make([][]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64OptionArrayMapRuneArray(m []Int64Option, f Int64OptionToRuneArrayTransformer) [][]rune {
	l := len(m)
	acc := make([][]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64OptionArrayMapFloat32Array(m []Int64Option, f Int64OptionToFloat32ArrayTransformer) [][]float32 {
	l := len(m)
	acc := make([][]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64OptionArrayMapFloat64Array(m []Int64Option, f Int64OptionToFloat64ArrayTransformer) [][]float64 {
	l := len(m)
	acc := make([][]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64OptionArrayMapComplex64Array(m []Int64Option, f Int64OptionToComplex64ArrayTransformer) [][]complex64 {
	l := len(m)
	acc := make([][]complex64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64OptionArrayMapComplex128Array(m []Int64Option, f Int64OptionToComplex128ArrayTransformer) [][]complex128 {
	l := len(m)
	acc := make([][]complex128, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64OptionArrayMapAnyArray(m []Int64Option, f Int64OptionToAnyArrayTransformer) [][]Any {
	l := len(m)
	acc := make([][]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64OptionArrayMapBoolOption(m []Int64Option, f Int64OptionToBoolOptionTransformer) []BoolOption {
	l := len(m)
	acc := make([]BoolOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64OptionArrayMapStringOption(m []Int64Option, f Int64OptionToStringOptionTransformer) []StringOption {
	l := len(m)
	acc := make([]StringOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64OptionArrayMapIntOption(m []Int64Option, f Int64OptionToIntOptionTransformer) []IntOption {
	l := len(m)
	acc := make([]IntOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64OptionArrayMapInt8Option(m []Int64Option, f Int64OptionToInt8OptionTransformer) []Int8Option {
	l := len(m)
	acc := make([]Int8Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64OptionArrayMapInt16Option(m []Int64Option, f Int64OptionToInt16OptionTransformer) []Int16Option {
	l := len(m)
	acc := make([]Int16Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64OptionArrayMapInt32Option(m []Int64Option, f Int64OptionToInt32OptionTransformer) []Int32Option {
	l := len(m)
	acc := make([]Int32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64OptionArrayMapInt64Option(m []Int64Option, f Int64OptionToInt64OptionTransformer) []Int64Option {
	l := len(m)
	acc := make([]Int64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64OptionArrayMapUintOption(m []Int64Option, f Int64OptionToUintOptionTransformer) []UintOption {
	l := len(m)
	acc := make([]UintOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64OptionArrayMapUint8Option(m []Int64Option, f Int64OptionToUint8OptionTransformer) []Uint8Option {
	l := len(m)
	acc := make([]Uint8Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64OptionArrayMapUint16Option(m []Int64Option, f Int64OptionToUint16OptionTransformer) []Uint16Option {
	l := len(m)
	acc := make([]Uint16Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64OptionArrayMapUint32Option(m []Int64Option, f Int64OptionToUint32OptionTransformer) []Uint32Option {
	l := len(m)
	acc := make([]Uint32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64OptionArrayMapUint64Option(m []Int64Option, f Int64OptionToUint64OptionTransformer) []Uint64Option {
	l := len(m)
	acc := make([]Uint64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64OptionArrayMapUintptrOption(m []Int64Option, f Int64OptionToUintptrOptionTransformer) []UintptrOption {
	l := len(m)
	acc := make([]UintptrOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64OptionArrayMapByteOption(m []Int64Option, f Int64OptionToByteOptionTransformer) []ByteOption {
	l := len(m)
	acc := make([]ByteOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64OptionArrayMapRuneOption(m []Int64Option, f Int64OptionToRuneOptionTransformer) []RuneOption {
	l := len(m)
	acc := make([]RuneOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64OptionArrayMapFloat32Option(m []Int64Option, f Int64OptionToFloat32OptionTransformer) []Float32Option {
	l := len(m)
	acc := make([]Float32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64OptionArrayMapFloat64Option(m []Int64Option, f Int64OptionToFloat64OptionTransformer) []Float64Option {
	l := len(m)
	acc := make([]Float64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64OptionArrayMapComplex64Option(m []Int64Option, f Int64OptionToComplex64OptionTransformer) []Complex64Option {
	l := len(m)
	acc := make([]Complex64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64OptionArrayMapComplex128Option(m []Int64Option, f Int64OptionToComplex128OptionTransformer) []Complex128Option {
	l := len(m)
	acc := make([]Complex128Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64OptionArrayMapAnyOption(m []Int64Option, f Int64OptionToAnyOptionTransformer) []AnyOption {
	l := len(m)
	acc := make([]AnyOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintOptionArrayMapBool(m []UintOption, f UintOptionToBoolTransformer) []bool {
	l := len(m)
	acc := make([]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintOptionArrayMapString(m []UintOption, f UintOptionToStringTransformer) []string {
	l := len(m)
	acc := make([]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintOptionArrayMapInt(m []UintOption, f UintOptionToIntTransformer) []int {
	l := len(m)
	acc := make([]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintOptionArrayMapInt8(m []UintOption, f UintOptionToInt8Transformer) []int8 {
	l := len(m)
	acc := make([]int8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintOptionArrayMapInt16(m []UintOption, f UintOptionToInt16Transformer) []int16 {
	l := len(m)
	acc := make([]int16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintOptionArrayMapInt32(m []UintOption, f UintOptionToInt32Transformer) []int32 {
	l := len(m)
	acc := make([]int32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintOptionArrayMapInt64(m []UintOption, f UintOptionToInt64Transformer) []int64 {
	l := len(m)
	acc := make([]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintOptionArrayMapUint(m []UintOption, f UintOptionToUintTransformer) []uint {
	l := len(m)
	acc := make([]uint, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintOptionArrayMapUint8(m []UintOption, f UintOptionToUint8Transformer) []uint8 {
	l := len(m)
	acc := make([]uint8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintOptionArrayMapUint16(m []UintOption, f UintOptionToUint16Transformer) []uint16 {
	l := len(m)
	acc := make([]uint16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintOptionArrayMapUint32(m []UintOption, f UintOptionToUint32Transformer) []uint32 {
	l := len(m)
	acc := make([]uint32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintOptionArrayMapUint64(m []UintOption, f UintOptionToUint64Transformer) []uint64 {
	l := len(m)
	acc := make([]uint64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintOptionArrayMapUintptr(m []UintOption, f UintOptionToUintptrTransformer) []uintptr {
	l := len(m)
	acc := make([]uintptr, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintOptionArrayMapByte(m []UintOption, f UintOptionToByteTransformer) []byte {
	l := len(m)
	acc := make([]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintOptionArrayMapRune(m []UintOption, f UintOptionToRuneTransformer) []rune {
	l := len(m)
	acc := make([]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintOptionArrayMapFloat32(m []UintOption, f UintOptionToFloat32Transformer) []float32 {
	l := len(m)
	acc := make([]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintOptionArrayMapFloat64(m []UintOption, f UintOptionToFloat64Transformer) []float64 {
	l := len(m)
	acc := make([]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintOptionArrayMapComplex64(m []UintOption, f UintOptionToComplex64Transformer) []complex64 {
	l := len(m)
	acc := make([]complex64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintOptionArrayMapComplex128(m []UintOption, f UintOptionToComplex128Transformer) []complex128 {
	l := len(m)
	acc := make([]complex128, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintOptionArrayMapAny(m []UintOption, f UintOptionToAnyTransformer) []Any {
	l := len(m)
	acc := make([]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintOptionArrayMapBoolArray(m []UintOption, f UintOptionToBoolArrayTransformer) [][]bool {
	l := len(m)
	acc := make([][]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintOptionArrayMapStringArray(m []UintOption, f UintOptionToStringArrayTransformer) [][]string {
	l := len(m)
	acc := make([][]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintOptionArrayMapIntArray(m []UintOption, f UintOptionToIntArrayTransformer) [][]int {
	l := len(m)
	acc := make([][]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintOptionArrayMapInt8Array(m []UintOption, f UintOptionToInt8ArrayTransformer) [][]int8 {
	l := len(m)
	acc := make([][]int8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintOptionArrayMapInt16Array(m []UintOption, f UintOptionToInt16ArrayTransformer) [][]int16 {
	l := len(m)
	acc := make([][]int16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintOptionArrayMapInt32Array(m []UintOption, f UintOptionToInt32ArrayTransformer) [][]int32 {
	l := len(m)
	acc := make([][]int32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintOptionArrayMapInt64Array(m []UintOption, f UintOptionToInt64ArrayTransformer) [][]int64 {
	l := len(m)
	acc := make([][]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintOptionArrayMapUintArray(m []UintOption, f UintOptionToUintArrayTransformer) [][]uint {
	l := len(m)
	acc := make([][]uint, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintOptionArrayMapUint8Array(m []UintOption, f UintOptionToUint8ArrayTransformer) [][]uint8 {
	l := len(m)
	acc := make([][]uint8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintOptionArrayMapUint16Array(m []UintOption, f UintOptionToUint16ArrayTransformer) [][]uint16 {
	l := len(m)
	acc := make([][]uint16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintOptionArrayMapUint32Array(m []UintOption, f UintOptionToUint32ArrayTransformer) [][]uint32 {
	l := len(m)
	acc := make([][]uint32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintOptionArrayMapUint64Array(m []UintOption, f UintOptionToUint64ArrayTransformer) [][]uint64 {
	l := len(m)
	acc := make([][]uint64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintOptionArrayMapUintptrArray(m []UintOption, f UintOptionToUintptrArrayTransformer) [][]uintptr {
	l := len(m)
	acc := make([][]uintptr, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintOptionArrayMapByteArray(m []UintOption, f UintOptionToByteArrayTransformer) [][]byte {
	l := len(m)
	acc := make([][]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintOptionArrayMapRuneArray(m []UintOption, f UintOptionToRuneArrayTransformer) [][]rune {
	l := len(m)
	acc := make([][]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintOptionArrayMapFloat32Array(m []UintOption, f UintOptionToFloat32ArrayTransformer) [][]float32 {
	l := len(m)
	acc := make([][]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintOptionArrayMapFloat64Array(m []UintOption, f UintOptionToFloat64ArrayTransformer) [][]float64 {
	l := len(m)
	acc := make([][]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintOptionArrayMapComplex64Array(m []UintOption, f UintOptionToComplex64ArrayTransformer) [][]complex64 {
	l := len(m)
	acc := make([][]complex64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintOptionArrayMapComplex128Array(m []UintOption, f UintOptionToComplex128ArrayTransformer) [][]complex128 {
	l := len(m)
	acc := make([][]complex128, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintOptionArrayMapAnyArray(m []UintOption, f UintOptionToAnyArrayTransformer) [][]Any {
	l := len(m)
	acc := make([][]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintOptionArrayMapBoolOption(m []UintOption, f UintOptionToBoolOptionTransformer) []BoolOption {
	l := len(m)
	acc := make([]BoolOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintOptionArrayMapStringOption(m []UintOption, f UintOptionToStringOptionTransformer) []StringOption {
	l := len(m)
	acc := make([]StringOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintOptionArrayMapIntOption(m []UintOption, f UintOptionToIntOptionTransformer) []IntOption {
	l := len(m)
	acc := make([]IntOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintOptionArrayMapInt8Option(m []UintOption, f UintOptionToInt8OptionTransformer) []Int8Option {
	l := len(m)
	acc := make([]Int8Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintOptionArrayMapInt16Option(m []UintOption, f UintOptionToInt16OptionTransformer) []Int16Option {
	l := len(m)
	acc := make([]Int16Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintOptionArrayMapInt32Option(m []UintOption, f UintOptionToInt32OptionTransformer) []Int32Option {
	l := len(m)
	acc := make([]Int32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintOptionArrayMapInt64Option(m []UintOption, f UintOptionToInt64OptionTransformer) []Int64Option {
	l := len(m)
	acc := make([]Int64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintOptionArrayMapUintOption(m []UintOption, f UintOptionToUintOptionTransformer) []UintOption {
	l := len(m)
	acc := make([]UintOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintOptionArrayMapUint8Option(m []UintOption, f UintOptionToUint8OptionTransformer) []Uint8Option {
	l := len(m)
	acc := make([]Uint8Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintOptionArrayMapUint16Option(m []UintOption, f UintOptionToUint16OptionTransformer) []Uint16Option {
	l := len(m)
	acc := make([]Uint16Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintOptionArrayMapUint32Option(m []UintOption, f UintOptionToUint32OptionTransformer) []Uint32Option {
	l := len(m)
	acc := make([]Uint32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintOptionArrayMapUint64Option(m []UintOption, f UintOptionToUint64OptionTransformer) []Uint64Option {
	l := len(m)
	acc := make([]Uint64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintOptionArrayMapUintptrOption(m []UintOption, f UintOptionToUintptrOptionTransformer) []UintptrOption {
	l := len(m)
	acc := make([]UintptrOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintOptionArrayMapByteOption(m []UintOption, f UintOptionToByteOptionTransformer) []ByteOption {
	l := len(m)
	acc := make([]ByteOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintOptionArrayMapRuneOption(m []UintOption, f UintOptionToRuneOptionTransformer) []RuneOption {
	l := len(m)
	acc := make([]RuneOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintOptionArrayMapFloat32Option(m []UintOption, f UintOptionToFloat32OptionTransformer) []Float32Option {
	l := len(m)
	acc := make([]Float32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintOptionArrayMapFloat64Option(m []UintOption, f UintOptionToFloat64OptionTransformer) []Float64Option {
	l := len(m)
	acc := make([]Float64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintOptionArrayMapComplex64Option(m []UintOption, f UintOptionToComplex64OptionTransformer) []Complex64Option {
	l := len(m)
	acc := make([]Complex64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintOptionArrayMapComplex128Option(m []UintOption, f UintOptionToComplex128OptionTransformer) []Complex128Option {
	l := len(m)
	acc := make([]Complex128Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintOptionArrayMapAnyOption(m []UintOption, f UintOptionToAnyOptionTransformer) []AnyOption {
	l := len(m)
	acc := make([]AnyOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8OptionArrayMapBool(m []Uint8Option, f Uint8OptionToBoolTransformer) []bool {
	l := len(m)
	acc := make([]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8OptionArrayMapString(m []Uint8Option, f Uint8OptionToStringTransformer) []string {
	l := len(m)
	acc := make([]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8OptionArrayMapInt(m []Uint8Option, f Uint8OptionToIntTransformer) []int {
	l := len(m)
	acc := make([]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8OptionArrayMapInt8(m []Uint8Option, f Uint8OptionToInt8Transformer) []int8 {
	l := len(m)
	acc := make([]int8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8OptionArrayMapInt16(m []Uint8Option, f Uint8OptionToInt16Transformer) []int16 {
	l := len(m)
	acc := make([]int16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8OptionArrayMapInt32(m []Uint8Option, f Uint8OptionToInt32Transformer) []int32 {
	l := len(m)
	acc := make([]int32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8OptionArrayMapInt64(m []Uint8Option, f Uint8OptionToInt64Transformer) []int64 {
	l := len(m)
	acc := make([]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8OptionArrayMapUint(m []Uint8Option, f Uint8OptionToUintTransformer) []uint {
	l := len(m)
	acc := make([]uint, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8OptionArrayMapUint8(m []Uint8Option, f Uint8OptionToUint8Transformer) []uint8 {
	l := len(m)
	acc := make([]uint8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8OptionArrayMapUint16(m []Uint8Option, f Uint8OptionToUint16Transformer) []uint16 {
	l := len(m)
	acc := make([]uint16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8OptionArrayMapUint32(m []Uint8Option, f Uint8OptionToUint32Transformer) []uint32 {
	l := len(m)
	acc := make([]uint32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8OptionArrayMapUint64(m []Uint8Option, f Uint8OptionToUint64Transformer) []uint64 {
	l := len(m)
	acc := make([]uint64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8OptionArrayMapUintptr(m []Uint8Option, f Uint8OptionToUintptrTransformer) []uintptr {
	l := len(m)
	acc := make([]uintptr, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8OptionArrayMapByte(m []Uint8Option, f Uint8OptionToByteTransformer) []byte {
	l := len(m)
	acc := make([]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8OptionArrayMapRune(m []Uint8Option, f Uint8OptionToRuneTransformer) []rune {
	l := len(m)
	acc := make([]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8OptionArrayMapFloat32(m []Uint8Option, f Uint8OptionToFloat32Transformer) []float32 {
	l := len(m)
	acc := make([]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8OptionArrayMapFloat64(m []Uint8Option, f Uint8OptionToFloat64Transformer) []float64 {
	l := len(m)
	acc := make([]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8OptionArrayMapComplex64(m []Uint8Option, f Uint8OptionToComplex64Transformer) []complex64 {
	l := len(m)
	acc := make([]complex64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8OptionArrayMapComplex128(m []Uint8Option, f Uint8OptionToComplex128Transformer) []complex128 {
	l := len(m)
	acc := make([]complex128, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8OptionArrayMapAny(m []Uint8Option, f Uint8OptionToAnyTransformer) []Any {
	l := len(m)
	acc := make([]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8OptionArrayMapBoolArray(m []Uint8Option, f Uint8OptionToBoolArrayTransformer) [][]bool {
	l := len(m)
	acc := make([][]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8OptionArrayMapStringArray(m []Uint8Option, f Uint8OptionToStringArrayTransformer) [][]string {
	l := len(m)
	acc := make([][]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8OptionArrayMapIntArray(m []Uint8Option, f Uint8OptionToIntArrayTransformer) [][]int {
	l := len(m)
	acc := make([][]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8OptionArrayMapInt8Array(m []Uint8Option, f Uint8OptionToInt8ArrayTransformer) [][]int8 {
	l := len(m)
	acc := make([][]int8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8OptionArrayMapInt16Array(m []Uint8Option, f Uint8OptionToInt16ArrayTransformer) [][]int16 {
	l := len(m)
	acc := make([][]int16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8OptionArrayMapInt32Array(m []Uint8Option, f Uint8OptionToInt32ArrayTransformer) [][]int32 {
	l := len(m)
	acc := make([][]int32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8OptionArrayMapInt64Array(m []Uint8Option, f Uint8OptionToInt64ArrayTransformer) [][]int64 {
	l := len(m)
	acc := make([][]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8OptionArrayMapUintArray(m []Uint8Option, f Uint8OptionToUintArrayTransformer) [][]uint {
	l := len(m)
	acc := make([][]uint, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8OptionArrayMapUint8Array(m []Uint8Option, f Uint8OptionToUint8ArrayTransformer) [][]uint8 {
	l := len(m)
	acc := make([][]uint8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8OptionArrayMapUint16Array(m []Uint8Option, f Uint8OptionToUint16ArrayTransformer) [][]uint16 {
	l := len(m)
	acc := make([][]uint16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8OptionArrayMapUint32Array(m []Uint8Option, f Uint8OptionToUint32ArrayTransformer) [][]uint32 {
	l := len(m)
	acc := make([][]uint32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8OptionArrayMapUint64Array(m []Uint8Option, f Uint8OptionToUint64ArrayTransformer) [][]uint64 {
	l := len(m)
	acc := make([][]uint64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8OptionArrayMapUintptrArray(m []Uint8Option, f Uint8OptionToUintptrArrayTransformer) [][]uintptr {
	l := len(m)
	acc := make([][]uintptr, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8OptionArrayMapByteArray(m []Uint8Option, f Uint8OptionToByteArrayTransformer) [][]byte {
	l := len(m)
	acc := make([][]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8OptionArrayMapRuneArray(m []Uint8Option, f Uint8OptionToRuneArrayTransformer) [][]rune {
	l := len(m)
	acc := make([][]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8OptionArrayMapFloat32Array(m []Uint8Option, f Uint8OptionToFloat32ArrayTransformer) [][]float32 {
	l := len(m)
	acc := make([][]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8OptionArrayMapFloat64Array(m []Uint8Option, f Uint8OptionToFloat64ArrayTransformer) [][]float64 {
	l := len(m)
	acc := make([][]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8OptionArrayMapComplex64Array(m []Uint8Option, f Uint8OptionToComplex64ArrayTransformer) [][]complex64 {
	l := len(m)
	acc := make([][]complex64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8OptionArrayMapComplex128Array(m []Uint8Option, f Uint8OptionToComplex128ArrayTransformer) [][]complex128 {
	l := len(m)
	acc := make([][]complex128, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8OptionArrayMapAnyArray(m []Uint8Option, f Uint8OptionToAnyArrayTransformer) [][]Any {
	l := len(m)
	acc := make([][]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8OptionArrayMapBoolOption(m []Uint8Option, f Uint8OptionToBoolOptionTransformer) []BoolOption {
	l := len(m)
	acc := make([]BoolOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8OptionArrayMapStringOption(m []Uint8Option, f Uint8OptionToStringOptionTransformer) []StringOption {
	l := len(m)
	acc := make([]StringOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8OptionArrayMapIntOption(m []Uint8Option, f Uint8OptionToIntOptionTransformer) []IntOption {
	l := len(m)
	acc := make([]IntOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8OptionArrayMapInt8Option(m []Uint8Option, f Uint8OptionToInt8OptionTransformer) []Int8Option {
	l := len(m)
	acc := make([]Int8Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8OptionArrayMapInt16Option(m []Uint8Option, f Uint8OptionToInt16OptionTransformer) []Int16Option {
	l := len(m)
	acc := make([]Int16Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8OptionArrayMapInt32Option(m []Uint8Option, f Uint8OptionToInt32OptionTransformer) []Int32Option {
	l := len(m)
	acc := make([]Int32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8OptionArrayMapInt64Option(m []Uint8Option, f Uint8OptionToInt64OptionTransformer) []Int64Option {
	l := len(m)
	acc := make([]Int64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8OptionArrayMapUintOption(m []Uint8Option, f Uint8OptionToUintOptionTransformer) []UintOption {
	l := len(m)
	acc := make([]UintOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8OptionArrayMapUint8Option(m []Uint8Option, f Uint8OptionToUint8OptionTransformer) []Uint8Option {
	l := len(m)
	acc := make([]Uint8Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8OptionArrayMapUint16Option(m []Uint8Option, f Uint8OptionToUint16OptionTransformer) []Uint16Option {
	l := len(m)
	acc := make([]Uint16Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8OptionArrayMapUint32Option(m []Uint8Option, f Uint8OptionToUint32OptionTransformer) []Uint32Option {
	l := len(m)
	acc := make([]Uint32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8OptionArrayMapUint64Option(m []Uint8Option, f Uint8OptionToUint64OptionTransformer) []Uint64Option {
	l := len(m)
	acc := make([]Uint64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8OptionArrayMapUintptrOption(m []Uint8Option, f Uint8OptionToUintptrOptionTransformer) []UintptrOption {
	l := len(m)
	acc := make([]UintptrOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8OptionArrayMapByteOption(m []Uint8Option, f Uint8OptionToByteOptionTransformer) []ByteOption {
	l := len(m)
	acc := make([]ByteOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8OptionArrayMapRuneOption(m []Uint8Option, f Uint8OptionToRuneOptionTransformer) []RuneOption {
	l := len(m)
	acc := make([]RuneOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8OptionArrayMapFloat32Option(m []Uint8Option, f Uint8OptionToFloat32OptionTransformer) []Float32Option {
	l := len(m)
	acc := make([]Float32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8OptionArrayMapFloat64Option(m []Uint8Option, f Uint8OptionToFloat64OptionTransformer) []Float64Option {
	l := len(m)
	acc := make([]Float64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8OptionArrayMapComplex64Option(m []Uint8Option, f Uint8OptionToComplex64OptionTransformer) []Complex64Option {
	l := len(m)
	acc := make([]Complex64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8OptionArrayMapComplex128Option(m []Uint8Option, f Uint8OptionToComplex128OptionTransformer) []Complex128Option {
	l := len(m)
	acc := make([]Complex128Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint8OptionArrayMapAnyOption(m []Uint8Option, f Uint8OptionToAnyOptionTransformer) []AnyOption {
	l := len(m)
	acc := make([]AnyOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16OptionArrayMapBool(m []Uint16Option, f Uint16OptionToBoolTransformer) []bool {
	l := len(m)
	acc := make([]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16OptionArrayMapString(m []Uint16Option, f Uint16OptionToStringTransformer) []string {
	l := len(m)
	acc := make([]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16OptionArrayMapInt(m []Uint16Option, f Uint16OptionToIntTransformer) []int {
	l := len(m)
	acc := make([]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16OptionArrayMapInt8(m []Uint16Option, f Uint16OptionToInt8Transformer) []int8 {
	l := len(m)
	acc := make([]int8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16OptionArrayMapInt16(m []Uint16Option, f Uint16OptionToInt16Transformer) []int16 {
	l := len(m)
	acc := make([]int16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16OptionArrayMapInt32(m []Uint16Option, f Uint16OptionToInt32Transformer) []int32 {
	l := len(m)
	acc := make([]int32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16OptionArrayMapInt64(m []Uint16Option, f Uint16OptionToInt64Transformer) []int64 {
	l := len(m)
	acc := make([]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16OptionArrayMapUint(m []Uint16Option, f Uint16OptionToUintTransformer) []uint {
	l := len(m)
	acc := make([]uint, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16OptionArrayMapUint8(m []Uint16Option, f Uint16OptionToUint8Transformer) []uint8 {
	l := len(m)
	acc := make([]uint8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16OptionArrayMapUint16(m []Uint16Option, f Uint16OptionToUint16Transformer) []uint16 {
	l := len(m)
	acc := make([]uint16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16OptionArrayMapUint32(m []Uint16Option, f Uint16OptionToUint32Transformer) []uint32 {
	l := len(m)
	acc := make([]uint32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16OptionArrayMapUint64(m []Uint16Option, f Uint16OptionToUint64Transformer) []uint64 {
	l := len(m)
	acc := make([]uint64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16OptionArrayMapUintptr(m []Uint16Option, f Uint16OptionToUintptrTransformer) []uintptr {
	l := len(m)
	acc := make([]uintptr, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16OptionArrayMapByte(m []Uint16Option, f Uint16OptionToByteTransformer) []byte {
	l := len(m)
	acc := make([]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16OptionArrayMapRune(m []Uint16Option, f Uint16OptionToRuneTransformer) []rune {
	l := len(m)
	acc := make([]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16OptionArrayMapFloat32(m []Uint16Option, f Uint16OptionToFloat32Transformer) []float32 {
	l := len(m)
	acc := make([]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16OptionArrayMapFloat64(m []Uint16Option, f Uint16OptionToFloat64Transformer) []float64 {
	l := len(m)
	acc := make([]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16OptionArrayMapComplex64(m []Uint16Option, f Uint16OptionToComplex64Transformer) []complex64 {
	l := len(m)
	acc := make([]complex64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16OptionArrayMapComplex128(m []Uint16Option, f Uint16OptionToComplex128Transformer) []complex128 {
	l := len(m)
	acc := make([]complex128, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16OptionArrayMapAny(m []Uint16Option, f Uint16OptionToAnyTransformer) []Any {
	l := len(m)
	acc := make([]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16OptionArrayMapBoolArray(m []Uint16Option, f Uint16OptionToBoolArrayTransformer) [][]bool {
	l := len(m)
	acc := make([][]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16OptionArrayMapStringArray(m []Uint16Option, f Uint16OptionToStringArrayTransformer) [][]string {
	l := len(m)
	acc := make([][]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16OptionArrayMapIntArray(m []Uint16Option, f Uint16OptionToIntArrayTransformer) [][]int {
	l := len(m)
	acc := make([][]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16OptionArrayMapInt8Array(m []Uint16Option, f Uint16OptionToInt8ArrayTransformer) [][]int8 {
	l := len(m)
	acc := make([][]int8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16OptionArrayMapInt16Array(m []Uint16Option, f Uint16OptionToInt16ArrayTransformer) [][]int16 {
	l := len(m)
	acc := make([][]int16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16OptionArrayMapInt32Array(m []Uint16Option, f Uint16OptionToInt32ArrayTransformer) [][]int32 {
	l := len(m)
	acc := make([][]int32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16OptionArrayMapInt64Array(m []Uint16Option, f Uint16OptionToInt64ArrayTransformer) [][]int64 {
	l := len(m)
	acc := make([][]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16OptionArrayMapUintArray(m []Uint16Option, f Uint16OptionToUintArrayTransformer) [][]uint {
	l := len(m)
	acc := make([][]uint, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16OptionArrayMapUint8Array(m []Uint16Option, f Uint16OptionToUint8ArrayTransformer) [][]uint8 {
	l := len(m)
	acc := make([][]uint8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16OptionArrayMapUint16Array(m []Uint16Option, f Uint16OptionToUint16ArrayTransformer) [][]uint16 {
	l := len(m)
	acc := make([][]uint16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16OptionArrayMapUint32Array(m []Uint16Option, f Uint16OptionToUint32ArrayTransformer) [][]uint32 {
	l := len(m)
	acc := make([][]uint32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16OptionArrayMapUint64Array(m []Uint16Option, f Uint16OptionToUint64ArrayTransformer) [][]uint64 {
	l := len(m)
	acc := make([][]uint64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16OptionArrayMapUintptrArray(m []Uint16Option, f Uint16OptionToUintptrArrayTransformer) [][]uintptr {
	l := len(m)
	acc := make([][]uintptr, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16OptionArrayMapByteArray(m []Uint16Option, f Uint16OptionToByteArrayTransformer) [][]byte {
	l := len(m)
	acc := make([][]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16OptionArrayMapRuneArray(m []Uint16Option, f Uint16OptionToRuneArrayTransformer) [][]rune {
	l := len(m)
	acc := make([][]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16OptionArrayMapFloat32Array(m []Uint16Option, f Uint16OptionToFloat32ArrayTransformer) [][]float32 {
	l := len(m)
	acc := make([][]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16OptionArrayMapFloat64Array(m []Uint16Option, f Uint16OptionToFloat64ArrayTransformer) [][]float64 {
	l := len(m)
	acc := make([][]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16OptionArrayMapComplex64Array(m []Uint16Option, f Uint16OptionToComplex64ArrayTransformer) [][]complex64 {
	l := len(m)
	acc := make([][]complex64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16OptionArrayMapComplex128Array(m []Uint16Option, f Uint16OptionToComplex128ArrayTransformer) [][]complex128 {
	l := len(m)
	acc := make([][]complex128, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16OptionArrayMapAnyArray(m []Uint16Option, f Uint16OptionToAnyArrayTransformer) [][]Any {
	l := len(m)
	acc := make([][]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16OptionArrayMapBoolOption(m []Uint16Option, f Uint16OptionToBoolOptionTransformer) []BoolOption {
	l := len(m)
	acc := make([]BoolOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16OptionArrayMapStringOption(m []Uint16Option, f Uint16OptionToStringOptionTransformer) []StringOption {
	l := len(m)
	acc := make([]StringOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16OptionArrayMapIntOption(m []Uint16Option, f Uint16OptionToIntOptionTransformer) []IntOption {
	l := len(m)
	acc := make([]IntOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16OptionArrayMapInt8Option(m []Uint16Option, f Uint16OptionToInt8OptionTransformer) []Int8Option {
	l := len(m)
	acc := make([]Int8Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16OptionArrayMapInt16Option(m []Uint16Option, f Uint16OptionToInt16OptionTransformer) []Int16Option {
	l := len(m)
	acc := make([]Int16Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16OptionArrayMapInt32Option(m []Uint16Option, f Uint16OptionToInt32OptionTransformer) []Int32Option {
	l := len(m)
	acc := make([]Int32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16OptionArrayMapInt64Option(m []Uint16Option, f Uint16OptionToInt64OptionTransformer) []Int64Option {
	l := len(m)
	acc := make([]Int64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16OptionArrayMapUintOption(m []Uint16Option, f Uint16OptionToUintOptionTransformer) []UintOption {
	l := len(m)
	acc := make([]UintOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16OptionArrayMapUint8Option(m []Uint16Option, f Uint16OptionToUint8OptionTransformer) []Uint8Option {
	l := len(m)
	acc := make([]Uint8Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16OptionArrayMapUint16Option(m []Uint16Option, f Uint16OptionToUint16OptionTransformer) []Uint16Option {
	l := len(m)
	acc := make([]Uint16Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16OptionArrayMapUint32Option(m []Uint16Option, f Uint16OptionToUint32OptionTransformer) []Uint32Option {
	l := len(m)
	acc := make([]Uint32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16OptionArrayMapUint64Option(m []Uint16Option, f Uint16OptionToUint64OptionTransformer) []Uint64Option {
	l := len(m)
	acc := make([]Uint64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16OptionArrayMapUintptrOption(m []Uint16Option, f Uint16OptionToUintptrOptionTransformer) []UintptrOption {
	l := len(m)
	acc := make([]UintptrOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16OptionArrayMapByteOption(m []Uint16Option, f Uint16OptionToByteOptionTransformer) []ByteOption {
	l := len(m)
	acc := make([]ByteOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16OptionArrayMapRuneOption(m []Uint16Option, f Uint16OptionToRuneOptionTransformer) []RuneOption {
	l := len(m)
	acc := make([]RuneOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16OptionArrayMapFloat32Option(m []Uint16Option, f Uint16OptionToFloat32OptionTransformer) []Float32Option {
	l := len(m)
	acc := make([]Float32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16OptionArrayMapFloat64Option(m []Uint16Option, f Uint16OptionToFloat64OptionTransformer) []Float64Option {
	l := len(m)
	acc := make([]Float64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16OptionArrayMapComplex64Option(m []Uint16Option, f Uint16OptionToComplex64OptionTransformer) []Complex64Option {
	l := len(m)
	acc := make([]Complex64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16OptionArrayMapComplex128Option(m []Uint16Option, f Uint16OptionToComplex128OptionTransformer) []Complex128Option {
	l := len(m)
	acc := make([]Complex128Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint16OptionArrayMapAnyOption(m []Uint16Option, f Uint16OptionToAnyOptionTransformer) []AnyOption {
	l := len(m)
	acc := make([]AnyOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32OptionArrayMapBool(m []Uint32Option, f Uint32OptionToBoolTransformer) []bool {
	l := len(m)
	acc := make([]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32OptionArrayMapString(m []Uint32Option, f Uint32OptionToStringTransformer) []string {
	l := len(m)
	acc := make([]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32OptionArrayMapInt(m []Uint32Option, f Uint32OptionToIntTransformer) []int {
	l := len(m)
	acc := make([]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32OptionArrayMapInt8(m []Uint32Option, f Uint32OptionToInt8Transformer) []int8 {
	l := len(m)
	acc := make([]int8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32OptionArrayMapInt16(m []Uint32Option, f Uint32OptionToInt16Transformer) []int16 {
	l := len(m)
	acc := make([]int16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32OptionArrayMapInt32(m []Uint32Option, f Uint32OptionToInt32Transformer) []int32 {
	l := len(m)
	acc := make([]int32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32OptionArrayMapInt64(m []Uint32Option, f Uint32OptionToInt64Transformer) []int64 {
	l := len(m)
	acc := make([]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32OptionArrayMapUint(m []Uint32Option, f Uint32OptionToUintTransformer) []uint {
	l := len(m)
	acc := make([]uint, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32OptionArrayMapUint8(m []Uint32Option, f Uint32OptionToUint8Transformer) []uint8 {
	l := len(m)
	acc := make([]uint8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32OptionArrayMapUint16(m []Uint32Option, f Uint32OptionToUint16Transformer) []uint16 {
	l := len(m)
	acc := make([]uint16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32OptionArrayMapUint32(m []Uint32Option, f Uint32OptionToUint32Transformer) []uint32 {
	l := len(m)
	acc := make([]uint32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32OptionArrayMapUint64(m []Uint32Option, f Uint32OptionToUint64Transformer) []uint64 {
	l := len(m)
	acc := make([]uint64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32OptionArrayMapUintptr(m []Uint32Option, f Uint32OptionToUintptrTransformer) []uintptr {
	l := len(m)
	acc := make([]uintptr, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32OptionArrayMapByte(m []Uint32Option, f Uint32OptionToByteTransformer) []byte {
	l := len(m)
	acc := make([]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32OptionArrayMapRune(m []Uint32Option, f Uint32OptionToRuneTransformer) []rune {
	l := len(m)
	acc := make([]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32OptionArrayMapFloat32(m []Uint32Option, f Uint32OptionToFloat32Transformer) []float32 {
	l := len(m)
	acc := make([]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32OptionArrayMapFloat64(m []Uint32Option, f Uint32OptionToFloat64Transformer) []float64 {
	l := len(m)
	acc := make([]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32OptionArrayMapComplex64(m []Uint32Option, f Uint32OptionToComplex64Transformer) []complex64 {
	l := len(m)
	acc := make([]complex64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32OptionArrayMapComplex128(m []Uint32Option, f Uint32OptionToComplex128Transformer) []complex128 {
	l := len(m)
	acc := make([]complex128, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32OptionArrayMapAny(m []Uint32Option, f Uint32OptionToAnyTransformer) []Any {
	l := len(m)
	acc := make([]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32OptionArrayMapBoolArray(m []Uint32Option, f Uint32OptionToBoolArrayTransformer) [][]bool {
	l := len(m)
	acc := make([][]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32OptionArrayMapStringArray(m []Uint32Option, f Uint32OptionToStringArrayTransformer) [][]string {
	l := len(m)
	acc := make([][]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32OptionArrayMapIntArray(m []Uint32Option, f Uint32OptionToIntArrayTransformer) [][]int {
	l := len(m)
	acc := make([][]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32OptionArrayMapInt8Array(m []Uint32Option, f Uint32OptionToInt8ArrayTransformer) [][]int8 {
	l := len(m)
	acc := make([][]int8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32OptionArrayMapInt16Array(m []Uint32Option, f Uint32OptionToInt16ArrayTransformer) [][]int16 {
	l := len(m)
	acc := make([][]int16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32OptionArrayMapInt32Array(m []Uint32Option, f Uint32OptionToInt32ArrayTransformer) [][]int32 {
	l := len(m)
	acc := make([][]int32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32OptionArrayMapInt64Array(m []Uint32Option, f Uint32OptionToInt64ArrayTransformer) [][]int64 {
	l := len(m)
	acc := make([][]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32OptionArrayMapUintArray(m []Uint32Option, f Uint32OptionToUintArrayTransformer) [][]uint {
	l := len(m)
	acc := make([][]uint, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32OptionArrayMapUint8Array(m []Uint32Option, f Uint32OptionToUint8ArrayTransformer) [][]uint8 {
	l := len(m)
	acc := make([][]uint8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32OptionArrayMapUint16Array(m []Uint32Option, f Uint32OptionToUint16ArrayTransformer) [][]uint16 {
	l := len(m)
	acc := make([][]uint16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32OptionArrayMapUint32Array(m []Uint32Option, f Uint32OptionToUint32ArrayTransformer) [][]uint32 {
	l := len(m)
	acc := make([][]uint32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32OptionArrayMapUint64Array(m []Uint32Option, f Uint32OptionToUint64ArrayTransformer) [][]uint64 {
	l := len(m)
	acc := make([][]uint64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32OptionArrayMapUintptrArray(m []Uint32Option, f Uint32OptionToUintptrArrayTransformer) [][]uintptr {
	l := len(m)
	acc := make([][]uintptr, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32OptionArrayMapByteArray(m []Uint32Option, f Uint32OptionToByteArrayTransformer) [][]byte {
	l := len(m)
	acc := make([][]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32OptionArrayMapRuneArray(m []Uint32Option, f Uint32OptionToRuneArrayTransformer) [][]rune {
	l := len(m)
	acc := make([][]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32OptionArrayMapFloat32Array(m []Uint32Option, f Uint32OptionToFloat32ArrayTransformer) [][]float32 {
	l := len(m)
	acc := make([][]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32OptionArrayMapFloat64Array(m []Uint32Option, f Uint32OptionToFloat64ArrayTransformer) [][]float64 {
	l := len(m)
	acc := make([][]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32OptionArrayMapComplex64Array(m []Uint32Option, f Uint32OptionToComplex64ArrayTransformer) [][]complex64 {
	l := len(m)
	acc := make([][]complex64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32OptionArrayMapComplex128Array(m []Uint32Option, f Uint32OptionToComplex128ArrayTransformer) [][]complex128 {
	l := len(m)
	acc := make([][]complex128, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32OptionArrayMapAnyArray(m []Uint32Option, f Uint32OptionToAnyArrayTransformer) [][]Any {
	l := len(m)
	acc := make([][]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32OptionArrayMapBoolOption(m []Uint32Option, f Uint32OptionToBoolOptionTransformer) []BoolOption {
	l := len(m)
	acc := make([]BoolOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32OptionArrayMapStringOption(m []Uint32Option, f Uint32OptionToStringOptionTransformer) []StringOption {
	l := len(m)
	acc := make([]StringOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32OptionArrayMapIntOption(m []Uint32Option, f Uint32OptionToIntOptionTransformer) []IntOption {
	l := len(m)
	acc := make([]IntOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32OptionArrayMapInt8Option(m []Uint32Option, f Uint32OptionToInt8OptionTransformer) []Int8Option {
	l := len(m)
	acc := make([]Int8Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32OptionArrayMapInt16Option(m []Uint32Option, f Uint32OptionToInt16OptionTransformer) []Int16Option {
	l := len(m)
	acc := make([]Int16Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32OptionArrayMapInt32Option(m []Uint32Option, f Uint32OptionToInt32OptionTransformer) []Int32Option {
	l := len(m)
	acc := make([]Int32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32OptionArrayMapInt64Option(m []Uint32Option, f Uint32OptionToInt64OptionTransformer) []Int64Option {
	l := len(m)
	acc := make([]Int64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32OptionArrayMapUintOption(m []Uint32Option, f Uint32OptionToUintOptionTransformer) []UintOption {
	l := len(m)
	acc := make([]UintOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32OptionArrayMapUint8Option(m []Uint32Option, f Uint32OptionToUint8OptionTransformer) []Uint8Option {
	l := len(m)
	acc := make([]Uint8Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32OptionArrayMapUint16Option(m []Uint32Option, f Uint32OptionToUint16OptionTransformer) []Uint16Option {
	l := len(m)
	acc := make([]Uint16Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32OptionArrayMapUint32Option(m []Uint32Option, f Uint32OptionToUint32OptionTransformer) []Uint32Option {
	l := len(m)
	acc := make([]Uint32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32OptionArrayMapUint64Option(m []Uint32Option, f Uint32OptionToUint64OptionTransformer) []Uint64Option {
	l := len(m)
	acc := make([]Uint64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32OptionArrayMapUintptrOption(m []Uint32Option, f Uint32OptionToUintptrOptionTransformer) []UintptrOption {
	l := len(m)
	acc := make([]UintptrOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32OptionArrayMapByteOption(m []Uint32Option, f Uint32OptionToByteOptionTransformer) []ByteOption {
	l := len(m)
	acc := make([]ByteOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32OptionArrayMapRuneOption(m []Uint32Option, f Uint32OptionToRuneOptionTransformer) []RuneOption {
	l := len(m)
	acc := make([]RuneOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32OptionArrayMapFloat32Option(m []Uint32Option, f Uint32OptionToFloat32OptionTransformer) []Float32Option {
	l := len(m)
	acc := make([]Float32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32OptionArrayMapFloat64Option(m []Uint32Option, f Uint32OptionToFloat64OptionTransformer) []Float64Option {
	l := len(m)
	acc := make([]Float64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32OptionArrayMapComplex64Option(m []Uint32Option, f Uint32OptionToComplex64OptionTransformer) []Complex64Option {
	l := len(m)
	acc := make([]Complex64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32OptionArrayMapComplex128Option(m []Uint32Option, f Uint32OptionToComplex128OptionTransformer) []Complex128Option {
	l := len(m)
	acc := make([]Complex128Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint32OptionArrayMapAnyOption(m []Uint32Option, f Uint32OptionToAnyOptionTransformer) []AnyOption {
	l := len(m)
	acc := make([]AnyOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64OptionArrayMapBool(m []Uint64Option, f Uint64OptionToBoolTransformer) []bool {
	l := len(m)
	acc := make([]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64OptionArrayMapString(m []Uint64Option, f Uint64OptionToStringTransformer) []string {
	l := len(m)
	acc := make([]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64OptionArrayMapInt(m []Uint64Option, f Uint64OptionToIntTransformer) []int {
	l := len(m)
	acc := make([]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64OptionArrayMapInt8(m []Uint64Option, f Uint64OptionToInt8Transformer) []int8 {
	l := len(m)
	acc := make([]int8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64OptionArrayMapInt16(m []Uint64Option, f Uint64OptionToInt16Transformer) []int16 {
	l := len(m)
	acc := make([]int16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64OptionArrayMapInt32(m []Uint64Option, f Uint64OptionToInt32Transformer) []int32 {
	l := len(m)
	acc := make([]int32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64OptionArrayMapInt64(m []Uint64Option, f Uint64OptionToInt64Transformer) []int64 {
	l := len(m)
	acc := make([]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64OptionArrayMapUint(m []Uint64Option, f Uint64OptionToUintTransformer) []uint {
	l := len(m)
	acc := make([]uint, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64OptionArrayMapUint8(m []Uint64Option, f Uint64OptionToUint8Transformer) []uint8 {
	l := len(m)
	acc := make([]uint8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64OptionArrayMapUint16(m []Uint64Option, f Uint64OptionToUint16Transformer) []uint16 {
	l := len(m)
	acc := make([]uint16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64OptionArrayMapUint32(m []Uint64Option, f Uint64OptionToUint32Transformer) []uint32 {
	l := len(m)
	acc := make([]uint32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64OptionArrayMapUint64(m []Uint64Option, f Uint64OptionToUint64Transformer) []uint64 {
	l := len(m)
	acc := make([]uint64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64OptionArrayMapUintptr(m []Uint64Option, f Uint64OptionToUintptrTransformer) []uintptr {
	l := len(m)
	acc := make([]uintptr, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64OptionArrayMapByte(m []Uint64Option, f Uint64OptionToByteTransformer) []byte {
	l := len(m)
	acc := make([]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64OptionArrayMapRune(m []Uint64Option, f Uint64OptionToRuneTransformer) []rune {
	l := len(m)
	acc := make([]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64OptionArrayMapFloat32(m []Uint64Option, f Uint64OptionToFloat32Transformer) []float32 {
	l := len(m)
	acc := make([]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64OptionArrayMapFloat64(m []Uint64Option, f Uint64OptionToFloat64Transformer) []float64 {
	l := len(m)
	acc := make([]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64OptionArrayMapComplex64(m []Uint64Option, f Uint64OptionToComplex64Transformer) []complex64 {
	l := len(m)
	acc := make([]complex64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64OptionArrayMapComplex128(m []Uint64Option, f Uint64OptionToComplex128Transformer) []complex128 {
	l := len(m)
	acc := make([]complex128, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64OptionArrayMapAny(m []Uint64Option, f Uint64OptionToAnyTransformer) []Any {
	l := len(m)
	acc := make([]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64OptionArrayMapBoolArray(m []Uint64Option, f Uint64OptionToBoolArrayTransformer) [][]bool {
	l := len(m)
	acc := make([][]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64OptionArrayMapStringArray(m []Uint64Option, f Uint64OptionToStringArrayTransformer) [][]string {
	l := len(m)
	acc := make([][]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64OptionArrayMapIntArray(m []Uint64Option, f Uint64OptionToIntArrayTransformer) [][]int {
	l := len(m)
	acc := make([][]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64OptionArrayMapInt8Array(m []Uint64Option, f Uint64OptionToInt8ArrayTransformer) [][]int8 {
	l := len(m)
	acc := make([][]int8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64OptionArrayMapInt16Array(m []Uint64Option, f Uint64OptionToInt16ArrayTransformer) [][]int16 {
	l := len(m)
	acc := make([][]int16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64OptionArrayMapInt32Array(m []Uint64Option, f Uint64OptionToInt32ArrayTransformer) [][]int32 {
	l := len(m)
	acc := make([][]int32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64OptionArrayMapInt64Array(m []Uint64Option, f Uint64OptionToInt64ArrayTransformer) [][]int64 {
	l := len(m)
	acc := make([][]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64OptionArrayMapUintArray(m []Uint64Option, f Uint64OptionToUintArrayTransformer) [][]uint {
	l := len(m)
	acc := make([][]uint, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64OptionArrayMapUint8Array(m []Uint64Option, f Uint64OptionToUint8ArrayTransformer) [][]uint8 {
	l := len(m)
	acc := make([][]uint8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64OptionArrayMapUint16Array(m []Uint64Option, f Uint64OptionToUint16ArrayTransformer) [][]uint16 {
	l := len(m)
	acc := make([][]uint16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64OptionArrayMapUint32Array(m []Uint64Option, f Uint64OptionToUint32ArrayTransformer) [][]uint32 {
	l := len(m)
	acc := make([][]uint32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64OptionArrayMapUint64Array(m []Uint64Option, f Uint64OptionToUint64ArrayTransformer) [][]uint64 {
	l := len(m)
	acc := make([][]uint64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64OptionArrayMapUintptrArray(m []Uint64Option, f Uint64OptionToUintptrArrayTransformer) [][]uintptr {
	l := len(m)
	acc := make([][]uintptr, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64OptionArrayMapByteArray(m []Uint64Option, f Uint64OptionToByteArrayTransformer) [][]byte {
	l := len(m)
	acc := make([][]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64OptionArrayMapRuneArray(m []Uint64Option, f Uint64OptionToRuneArrayTransformer) [][]rune {
	l := len(m)
	acc := make([][]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64OptionArrayMapFloat32Array(m []Uint64Option, f Uint64OptionToFloat32ArrayTransformer) [][]float32 {
	l := len(m)
	acc := make([][]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64OptionArrayMapFloat64Array(m []Uint64Option, f Uint64OptionToFloat64ArrayTransformer) [][]float64 {
	l := len(m)
	acc := make([][]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64OptionArrayMapComplex64Array(m []Uint64Option, f Uint64OptionToComplex64ArrayTransformer) [][]complex64 {
	l := len(m)
	acc := make([][]complex64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64OptionArrayMapComplex128Array(m []Uint64Option, f Uint64OptionToComplex128ArrayTransformer) [][]complex128 {
	l := len(m)
	acc := make([][]complex128, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64OptionArrayMapAnyArray(m []Uint64Option, f Uint64OptionToAnyArrayTransformer) [][]Any {
	l := len(m)
	acc := make([][]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64OptionArrayMapBoolOption(m []Uint64Option, f Uint64OptionToBoolOptionTransformer) []BoolOption {
	l := len(m)
	acc := make([]BoolOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64OptionArrayMapStringOption(m []Uint64Option, f Uint64OptionToStringOptionTransformer) []StringOption {
	l := len(m)
	acc := make([]StringOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64OptionArrayMapIntOption(m []Uint64Option, f Uint64OptionToIntOptionTransformer) []IntOption {
	l := len(m)
	acc := make([]IntOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64OptionArrayMapInt8Option(m []Uint64Option, f Uint64OptionToInt8OptionTransformer) []Int8Option {
	l := len(m)
	acc := make([]Int8Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64OptionArrayMapInt16Option(m []Uint64Option, f Uint64OptionToInt16OptionTransformer) []Int16Option {
	l := len(m)
	acc := make([]Int16Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64OptionArrayMapInt32Option(m []Uint64Option, f Uint64OptionToInt32OptionTransformer) []Int32Option {
	l := len(m)
	acc := make([]Int32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64OptionArrayMapInt64Option(m []Uint64Option, f Uint64OptionToInt64OptionTransformer) []Int64Option {
	l := len(m)
	acc := make([]Int64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64OptionArrayMapUintOption(m []Uint64Option, f Uint64OptionToUintOptionTransformer) []UintOption {
	l := len(m)
	acc := make([]UintOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64OptionArrayMapUint8Option(m []Uint64Option, f Uint64OptionToUint8OptionTransformer) []Uint8Option {
	l := len(m)
	acc := make([]Uint8Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64OptionArrayMapUint16Option(m []Uint64Option, f Uint64OptionToUint16OptionTransformer) []Uint16Option {
	l := len(m)
	acc := make([]Uint16Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64OptionArrayMapUint32Option(m []Uint64Option, f Uint64OptionToUint32OptionTransformer) []Uint32Option {
	l := len(m)
	acc := make([]Uint32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64OptionArrayMapUint64Option(m []Uint64Option, f Uint64OptionToUint64OptionTransformer) []Uint64Option {
	l := len(m)
	acc := make([]Uint64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64OptionArrayMapUintptrOption(m []Uint64Option, f Uint64OptionToUintptrOptionTransformer) []UintptrOption {
	l := len(m)
	acc := make([]UintptrOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64OptionArrayMapByteOption(m []Uint64Option, f Uint64OptionToByteOptionTransformer) []ByteOption {
	l := len(m)
	acc := make([]ByteOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64OptionArrayMapRuneOption(m []Uint64Option, f Uint64OptionToRuneOptionTransformer) []RuneOption {
	l := len(m)
	acc := make([]RuneOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64OptionArrayMapFloat32Option(m []Uint64Option, f Uint64OptionToFloat32OptionTransformer) []Float32Option {
	l := len(m)
	acc := make([]Float32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64OptionArrayMapFloat64Option(m []Uint64Option, f Uint64OptionToFloat64OptionTransformer) []Float64Option {
	l := len(m)
	acc := make([]Float64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64OptionArrayMapComplex64Option(m []Uint64Option, f Uint64OptionToComplex64OptionTransformer) []Complex64Option {
	l := len(m)
	acc := make([]Complex64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64OptionArrayMapComplex128Option(m []Uint64Option, f Uint64OptionToComplex128OptionTransformer) []Complex128Option {
	l := len(m)
	acc := make([]Complex128Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Uint64OptionArrayMapAnyOption(m []Uint64Option, f Uint64OptionToAnyOptionTransformer) []AnyOption {
	l := len(m)
	acc := make([]AnyOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrOptionArrayMapBool(m []UintptrOption, f UintptrOptionToBoolTransformer) []bool {
	l := len(m)
	acc := make([]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrOptionArrayMapString(m []UintptrOption, f UintptrOptionToStringTransformer) []string {
	l := len(m)
	acc := make([]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrOptionArrayMapInt(m []UintptrOption, f UintptrOptionToIntTransformer) []int {
	l := len(m)
	acc := make([]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrOptionArrayMapInt8(m []UintptrOption, f UintptrOptionToInt8Transformer) []int8 {
	l := len(m)
	acc := make([]int8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrOptionArrayMapInt16(m []UintptrOption, f UintptrOptionToInt16Transformer) []int16 {
	l := len(m)
	acc := make([]int16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrOptionArrayMapInt32(m []UintptrOption, f UintptrOptionToInt32Transformer) []int32 {
	l := len(m)
	acc := make([]int32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrOptionArrayMapInt64(m []UintptrOption, f UintptrOptionToInt64Transformer) []int64 {
	l := len(m)
	acc := make([]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrOptionArrayMapUint(m []UintptrOption, f UintptrOptionToUintTransformer) []uint {
	l := len(m)
	acc := make([]uint, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrOptionArrayMapUint8(m []UintptrOption, f UintptrOptionToUint8Transformer) []uint8 {
	l := len(m)
	acc := make([]uint8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrOptionArrayMapUint16(m []UintptrOption, f UintptrOptionToUint16Transformer) []uint16 {
	l := len(m)
	acc := make([]uint16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrOptionArrayMapUint32(m []UintptrOption, f UintptrOptionToUint32Transformer) []uint32 {
	l := len(m)
	acc := make([]uint32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrOptionArrayMapUint64(m []UintptrOption, f UintptrOptionToUint64Transformer) []uint64 {
	l := len(m)
	acc := make([]uint64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrOptionArrayMapUintptr(m []UintptrOption, f UintptrOptionToUintptrTransformer) []uintptr {
	l := len(m)
	acc := make([]uintptr, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrOptionArrayMapByte(m []UintptrOption, f UintptrOptionToByteTransformer) []byte {
	l := len(m)
	acc := make([]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrOptionArrayMapRune(m []UintptrOption, f UintptrOptionToRuneTransformer) []rune {
	l := len(m)
	acc := make([]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrOptionArrayMapFloat32(m []UintptrOption, f UintptrOptionToFloat32Transformer) []float32 {
	l := len(m)
	acc := make([]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrOptionArrayMapFloat64(m []UintptrOption, f UintptrOptionToFloat64Transformer) []float64 {
	l := len(m)
	acc := make([]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrOptionArrayMapComplex64(m []UintptrOption, f UintptrOptionToComplex64Transformer) []complex64 {
	l := len(m)
	acc := make([]complex64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrOptionArrayMapComplex128(m []UintptrOption, f UintptrOptionToComplex128Transformer) []complex128 {
	l := len(m)
	acc := make([]complex128, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrOptionArrayMapAny(m []UintptrOption, f UintptrOptionToAnyTransformer) []Any {
	l := len(m)
	acc := make([]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrOptionArrayMapBoolArray(m []UintptrOption, f UintptrOptionToBoolArrayTransformer) [][]bool {
	l := len(m)
	acc := make([][]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrOptionArrayMapStringArray(m []UintptrOption, f UintptrOptionToStringArrayTransformer) [][]string {
	l := len(m)
	acc := make([][]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrOptionArrayMapIntArray(m []UintptrOption, f UintptrOptionToIntArrayTransformer) [][]int {
	l := len(m)
	acc := make([][]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrOptionArrayMapInt8Array(m []UintptrOption, f UintptrOptionToInt8ArrayTransformer) [][]int8 {
	l := len(m)
	acc := make([][]int8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrOptionArrayMapInt16Array(m []UintptrOption, f UintptrOptionToInt16ArrayTransformer) [][]int16 {
	l := len(m)
	acc := make([][]int16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrOptionArrayMapInt32Array(m []UintptrOption, f UintptrOptionToInt32ArrayTransformer) [][]int32 {
	l := len(m)
	acc := make([][]int32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrOptionArrayMapInt64Array(m []UintptrOption, f UintptrOptionToInt64ArrayTransformer) [][]int64 {
	l := len(m)
	acc := make([][]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrOptionArrayMapUintArray(m []UintptrOption, f UintptrOptionToUintArrayTransformer) [][]uint {
	l := len(m)
	acc := make([][]uint, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrOptionArrayMapUint8Array(m []UintptrOption, f UintptrOptionToUint8ArrayTransformer) [][]uint8 {
	l := len(m)
	acc := make([][]uint8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrOptionArrayMapUint16Array(m []UintptrOption, f UintptrOptionToUint16ArrayTransformer) [][]uint16 {
	l := len(m)
	acc := make([][]uint16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrOptionArrayMapUint32Array(m []UintptrOption, f UintptrOptionToUint32ArrayTransformer) [][]uint32 {
	l := len(m)
	acc := make([][]uint32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrOptionArrayMapUint64Array(m []UintptrOption, f UintptrOptionToUint64ArrayTransformer) [][]uint64 {
	l := len(m)
	acc := make([][]uint64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrOptionArrayMapUintptrArray(m []UintptrOption, f UintptrOptionToUintptrArrayTransformer) [][]uintptr {
	l := len(m)
	acc := make([][]uintptr, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrOptionArrayMapByteArray(m []UintptrOption, f UintptrOptionToByteArrayTransformer) [][]byte {
	l := len(m)
	acc := make([][]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrOptionArrayMapRuneArray(m []UintptrOption, f UintptrOptionToRuneArrayTransformer) [][]rune {
	l := len(m)
	acc := make([][]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrOptionArrayMapFloat32Array(m []UintptrOption, f UintptrOptionToFloat32ArrayTransformer) [][]float32 {
	l := len(m)
	acc := make([][]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrOptionArrayMapFloat64Array(m []UintptrOption, f UintptrOptionToFloat64ArrayTransformer) [][]float64 {
	l := len(m)
	acc := make([][]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrOptionArrayMapComplex64Array(m []UintptrOption, f UintptrOptionToComplex64ArrayTransformer) [][]complex64 {
	l := len(m)
	acc := make([][]complex64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrOptionArrayMapComplex128Array(m []UintptrOption, f UintptrOptionToComplex128ArrayTransformer) [][]complex128 {
	l := len(m)
	acc := make([][]complex128, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrOptionArrayMapAnyArray(m []UintptrOption, f UintptrOptionToAnyArrayTransformer) [][]Any {
	l := len(m)
	acc := make([][]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrOptionArrayMapBoolOption(m []UintptrOption, f UintptrOptionToBoolOptionTransformer) []BoolOption {
	l := len(m)
	acc := make([]BoolOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrOptionArrayMapStringOption(m []UintptrOption, f UintptrOptionToStringOptionTransformer) []StringOption {
	l := len(m)
	acc := make([]StringOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrOptionArrayMapIntOption(m []UintptrOption, f UintptrOptionToIntOptionTransformer) []IntOption {
	l := len(m)
	acc := make([]IntOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrOptionArrayMapInt8Option(m []UintptrOption, f UintptrOptionToInt8OptionTransformer) []Int8Option {
	l := len(m)
	acc := make([]Int8Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrOptionArrayMapInt16Option(m []UintptrOption, f UintptrOptionToInt16OptionTransformer) []Int16Option {
	l := len(m)
	acc := make([]Int16Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrOptionArrayMapInt32Option(m []UintptrOption, f UintptrOptionToInt32OptionTransformer) []Int32Option {
	l := len(m)
	acc := make([]Int32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrOptionArrayMapInt64Option(m []UintptrOption, f UintptrOptionToInt64OptionTransformer) []Int64Option {
	l := len(m)
	acc := make([]Int64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrOptionArrayMapUintOption(m []UintptrOption, f UintptrOptionToUintOptionTransformer) []UintOption {
	l := len(m)
	acc := make([]UintOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrOptionArrayMapUint8Option(m []UintptrOption, f UintptrOptionToUint8OptionTransformer) []Uint8Option {
	l := len(m)
	acc := make([]Uint8Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrOptionArrayMapUint16Option(m []UintptrOption, f UintptrOptionToUint16OptionTransformer) []Uint16Option {
	l := len(m)
	acc := make([]Uint16Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrOptionArrayMapUint32Option(m []UintptrOption, f UintptrOptionToUint32OptionTransformer) []Uint32Option {
	l := len(m)
	acc := make([]Uint32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrOptionArrayMapUint64Option(m []UintptrOption, f UintptrOptionToUint64OptionTransformer) []Uint64Option {
	l := len(m)
	acc := make([]Uint64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrOptionArrayMapUintptrOption(m []UintptrOption, f UintptrOptionToUintptrOptionTransformer) []UintptrOption {
	l := len(m)
	acc := make([]UintptrOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrOptionArrayMapByteOption(m []UintptrOption, f UintptrOptionToByteOptionTransformer) []ByteOption {
	l := len(m)
	acc := make([]ByteOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrOptionArrayMapRuneOption(m []UintptrOption, f UintptrOptionToRuneOptionTransformer) []RuneOption {
	l := len(m)
	acc := make([]RuneOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrOptionArrayMapFloat32Option(m []UintptrOption, f UintptrOptionToFloat32OptionTransformer) []Float32Option {
	l := len(m)
	acc := make([]Float32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrOptionArrayMapFloat64Option(m []UintptrOption, f UintptrOptionToFloat64OptionTransformer) []Float64Option {
	l := len(m)
	acc := make([]Float64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrOptionArrayMapComplex64Option(m []UintptrOption, f UintptrOptionToComplex64OptionTransformer) []Complex64Option {
	l := len(m)
	acc := make([]Complex64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrOptionArrayMapComplex128Option(m []UintptrOption, f UintptrOptionToComplex128OptionTransformer) []Complex128Option {
	l := len(m)
	acc := make([]Complex128Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func UintptrOptionArrayMapAnyOption(m []UintptrOption, f UintptrOptionToAnyOptionTransformer) []AnyOption {
	l := len(m)
	acc := make([]AnyOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteOptionArrayMapBool(m []ByteOption, f ByteOptionToBoolTransformer) []bool {
	l := len(m)
	acc := make([]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteOptionArrayMapString(m []ByteOption, f ByteOptionToStringTransformer) []string {
	l := len(m)
	acc := make([]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteOptionArrayMapInt(m []ByteOption, f ByteOptionToIntTransformer) []int {
	l := len(m)
	acc := make([]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteOptionArrayMapInt8(m []ByteOption, f ByteOptionToInt8Transformer) []int8 {
	l := len(m)
	acc := make([]int8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteOptionArrayMapInt16(m []ByteOption, f ByteOptionToInt16Transformer) []int16 {
	l := len(m)
	acc := make([]int16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteOptionArrayMapInt32(m []ByteOption, f ByteOptionToInt32Transformer) []int32 {
	l := len(m)
	acc := make([]int32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteOptionArrayMapInt64(m []ByteOption, f ByteOptionToInt64Transformer) []int64 {
	l := len(m)
	acc := make([]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteOptionArrayMapUint(m []ByteOption, f ByteOptionToUintTransformer) []uint {
	l := len(m)
	acc := make([]uint, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteOptionArrayMapUint8(m []ByteOption, f ByteOptionToUint8Transformer) []uint8 {
	l := len(m)
	acc := make([]uint8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteOptionArrayMapUint16(m []ByteOption, f ByteOptionToUint16Transformer) []uint16 {
	l := len(m)
	acc := make([]uint16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteOptionArrayMapUint32(m []ByteOption, f ByteOptionToUint32Transformer) []uint32 {
	l := len(m)
	acc := make([]uint32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteOptionArrayMapUint64(m []ByteOption, f ByteOptionToUint64Transformer) []uint64 {
	l := len(m)
	acc := make([]uint64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteOptionArrayMapUintptr(m []ByteOption, f ByteOptionToUintptrTransformer) []uintptr {
	l := len(m)
	acc := make([]uintptr, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteOptionArrayMapByte(m []ByteOption, f ByteOptionToByteTransformer) []byte {
	l := len(m)
	acc := make([]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteOptionArrayMapRune(m []ByteOption, f ByteOptionToRuneTransformer) []rune {
	l := len(m)
	acc := make([]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteOptionArrayMapFloat32(m []ByteOption, f ByteOptionToFloat32Transformer) []float32 {
	l := len(m)
	acc := make([]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteOptionArrayMapFloat64(m []ByteOption, f ByteOptionToFloat64Transformer) []float64 {
	l := len(m)
	acc := make([]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteOptionArrayMapComplex64(m []ByteOption, f ByteOptionToComplex64Transformer) []complex64 {
	l := len(m)
	acc := make([]complex64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteOptionArrayMapComplex128(m []ByteOption, f ByteOptionToComplex128Transformer) []complex128 {
	l := len(m)
	acc := make([]complex128, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteOptionArrayMapAny(m []ByteOption, f ByteOptionToAnyTransformer) []Any {
	l := len(m)
	acc := make([]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteOptionArrayMapBoolArray(m []ByteOption, f ByteOptionToBoolArrayTransformer) [][]bool {
	l := len(m)
	acc := make([][]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteOptionArrayMapStringArray(m []ByteOption, f ByteOptionToStringArrayTransformer) [][]string {
	l := len(m)
	acc := make([][]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteOptionArrayMapIntArray(m []ByteOption, f ByteOptionToIntArrayTransformer) [][]int {
	l := len(m)
	acc := make([][]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteOptionArrayMapInt8Array(m []ByteOption, f ByteOptionToInt8ArrayTransformer) [][]int8 {
	l := len(m)
	acc := make([][]int8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteOptionArrayMapInt16Array(m []ByteOption, f ByteOptionToInt16ArrayTransformer) [][]int16 {
	l := len(m)
	acc := make([][]int16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteOptionArrayMapInt32Array(m []ByteOption, f ByteOptionToInt32ArrayTransformer) [][]int32 {
	l := len(m)
	acc := make([][]int32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteOptionArrayMapInt64Array(m []ByteOption, f ByteOptionToInt64ArrayTransformer) [][]int64 {
	l := len(m)
	acc := make([][]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteOptionArrayMapUintArray(m []ByteOption, f ByteOptionToUintArrayTransformer) [][]uint {
	l := len(m)
	acc := make([][]uint, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteOptionArrayMapUint8Array(m []ByteOption, f ByteOptionToUint8ArrayTransformer) [][]uint8 {
	l := len(m)
	acc := make([][]uint8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteOptionArrayMapUint16Array(m []ByteOption, f ByteOptionToUint16ArrayTransformer) [][]uint16 {
	l := len(m)
	acc := make([][]uint16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteOptionArrayMapUint32Array(m []ByteOption, f ByteOptionToUint32ArrayTransformer) [][]uint32 {
	l := len(m)
	acc := make([][]uint32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteOptionArrayMapUint64Array(m []ByteOption, f ByteOptionToUint64ArrayTransformer) [][]uint64 {
	l := len(m)
	acc := make([][]uint64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteOptionArrayMapUintptrArray(m []ByteOption, f ByteOptionToUintptrArrayTransformer) [][]uintptr {
	l := len(m)
	acc := make([][]uintptr, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteOptionArrayMapByteArray(m []ByteOption, f ByteOptionToByteArrayTransformer) [][]byte {
	l := len(m)
	acc := make([][]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteOptionArrayMapRuneArray(m []ByteOption, f ByteOptionToRuneArrayTransformer) [][]rune {
	l := len(m)
	acc := make([][]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteOptionArrayMapFloat32Array(m []ByteOption, f ByteOptionToFloat32ArrayTransformer) [][]float32 {
	l := len(m)
	acc := make([][]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteOptionArrayMapFloat64Array(m []ByteOption, f ByteOptionToFloat64ArrayTransformer) [][]float64 {
	l := len(m)
	acc := make([][]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteOptionArrayMapComplex64Array(m []ByteOption, f ByteOptionToComplex64ArrayTransformer) [][]complex64 {
	l := len(m)
	acc := make([][]complex64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteOptionArrayMapComplex128Array(m []ByteOption, f ByteOptionToComplex128ArrayTransformer) [][]complex128 {
	l := len(m)
	acc := make([][]complex128, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteOptionArrayMapAnyArray(m []ByteOption, f ByteOptionToAnyArrayTransformer) [][]Any {
	l := len(m)
	acc := make([][]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteOptionArrayMapBoolOption(m []ByteOption, f ByteOptionToBoolOptionTransformer) []BoolOption {
	l := len(m)
	acc := make([]BoolOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteOptionArrayMapStringOption(m []ByteOption, f ByteOptionToStringOptionTransformer) []StringOption {
	l := len(m)
	acc := make([]StringOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteOptionArrayMapIntOption(m []ByteOption, f ByteOptionToIntOptionTransformer) []IntOption {
	l := len(m)
	acc := make([]IntOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteOptionArrayMapInt8Option(m []ByteOption, f ByteOptionToInt8OptionTransformer) []Int8Option {
	l := len(m)
	acc := make([]Int8Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteOptionArrayMapInt16Option(m []ByteOption, f ByteOptionToInt16OptionTransformer) []Int16Option {
	l := len(m)
	acc := make([]Int16Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteOptionArrayMapInt32Option(m []ByteOption, f ByteOptionToInt32OptionTransformer) []Int32Option {
	l := len(m)
	acc := make([]Int32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteOptionArrayMapInt64Option(m []ByteOption, f ByteOptionToInt64OptionTransformer) []Int64Option {
	l := len(m)
	acc := make([]Int64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteOptionArrayMapUintOption(m []ByteOption, f ByteOptionToUintOptionTransformer) []UintOption {
	l := len(m)
	acc := make([]UintOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteOptionArrayMapUint8Option(m []ByteOption, f ByteOptionToUint8OptionTransformer) []Uint8Option {
	l := len(m)
	acc := make([]Uint8Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteOptionArrayMapUint16Option(m []ByteOption, f ByteOptionToUint16OptionTransformer) []Uint16Option {
	l := len(m)
	acc := make([]Uint16Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteOptionArrayMapUint32Option(m []ByteOption, f ByteOptionToUint32OptionTransformer) []Uint32Option {
	l := len(m)
	acc := make([]Uint32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteOptionArrayMapUint64Option(m []ByteOption, f ByteOptionToUint64OptionTransformer) []Uint64Option {
	l := len(m)
	acc := make([]Uint64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteOptionArrayMapUintptrOption(m []ByteOption, f ByteOptionToUintptrOptionTransformer) []UintptrOption {
	l := len(m)
	acc := make([]UintptrOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteOptionArrayMapByteOption(m []ByteOption, f ByteOptionToByteOptionTransformer) []ByteOption {
	l := len(m)
	acc := make([]ByteOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteOptionArrayMapRuneOption(m []ByteOption, f ByteOptionToRuneOptionTransformer) []RuneOption {
	l := len(m)
	acc := make([]RuneOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteOptionArrayMapFloat32Option(m []ByteOption, f ByteOptionToFloat32OptionTransformer) []Float32Option {
	l := len(m)
	acc := make([]Float32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteOptionArrayMapFloat64Option(m []ByteOption, f ByteOptionToFloat64OptionTransformer) []Float64Option {
	l := len(m)
	acc := make([]Float64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteOptionArrayMapComplex64Option(m []ByteOption, f ByteOptionToComplex64OptionTransformer) []Complex64Option {
	l := len(m)
	acc := make([]Complex64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteOptionArrayMapComplex128Option(m []ByteOption, f ByteOptionToComplex128OptionTransformer) []Complex128Option {
	l := len(m)
	acc := make([]Complex128Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteOptionArrayMapAnyOption(m []ByteOption, f ByteOptionToAnyOptionTransformer) []AnyOption {
	l := len(m)
	acc := make([]AnyOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneOptionArrayMapBool(m []RuneOption, f RuneOptionToBoolTransformer) []bool {
	l := len(m)
	acc := make([]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneOptionArrayMapString(m []RuneOption, f RuneOptionToStringTransformer) []string {
	l := len(m)
	acc := make([]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneOptionArrayMapInt(m []RuneOption, f RuneOptionToIntTransformer) []int {
	l := len(m)
	acc := make([]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneOptionArrayMapInt8(m []RuneOption, f RuneOptionToInt8Transformer) []int8 {
	l := len(m)
	acc := make([]int8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneOptionArrayMapInt16(m []RuneOption, f RuneOptionToInt16Transformer) []int16 {
	l := len(m)
	acc := make([]int16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneOptionArrayMapInt32(m []RuneOption, f RuneOptionToInt32Transformer) []int32 {
	l := len(m)
	acc := make([]int32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneOptionArrayMapInt64(m []RuneOption, f RuneOptionToInt64Transformer) []int64 {
	l := len(m)
	acc := make([]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneOptionArrayMapUint(m []RuneOption, f RuneOptionToUintTransformer) []uint {
	l := len(m)
	acc := make([]uint, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneOptionArrayMapUint8(m []RuneOption, f RuneOptionToUint8Transformer) []uint8 {
	l := len(m)
	acc := make([]uint8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneOptionArrayMapUint16(m []RuneOption, f RuneOptionToUint16Transformer) []uint16 {
	l := len(m)
	acc := make([]uint16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneOptionArrayMapUint32(m []RuneOption, f RuneOptionToUint32Transformer) []uint32 {
	l := len(m)
	acc := make([]uint32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneOptionArrayMapUint64(m []RuneOption, f RuneOptionToUint64Transformer) []uint64 {
	l := len(m)
	acc := make([]uint64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneOptionArrayMapUintptr(m []RuneOption, f RuneOptionToUintptrTransformer) []uintptr {
	l := len(m)
	acc := make([]uintptr, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneOptionArrayMapByte(m []RuneOption, f RuneOptionToByteTransformer) []byte {
	l := len(m)
	acc := make([]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneOptionArrayMapRune(m []RuneOption, f RuneOptionToRuneTransformer) []rune {
	l := len(m)
	acc := make([]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneOptionArrayMapFloat32(m []RuneOption, f RuneOptionToFloat32Transformer) []float32 {
	l := len(m)
	acc := make([]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneOptionArrayMapFloat64(m []RuneOption, f RuneOptionToFloat64Transformer) []float64 {
	l := len(m)
	acc := make([]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneOptionArrayMapComplex64(m []RuneOption, f RuneOptionToComplex64Transformer) []complex64 {
	l := len(m)
	acc := make([]complex64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneOptionArrayMapComplex128(m []RuneOption, f RuneOptionToComplex128Transformer) []complex128 {
	l := len(m)
	acc := make([]complex128, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneOptionArrayMapAny(m []RuneOption, f RuneOptionToAnyTransformer) []Any {
	l := len(m)
	acc := make([]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneOptionArrayMapBoolArray(m []RuneOption, f RuneOptionToBoolArrayTransformer) [][]bool {
	l := len(m)
	acc := make([][]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneOptionArrayMapStringArray(m []RuneOption, f RuneOptionToStringArrayTransformer) [][]string {
	l := len(m)
	acc := make([][]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneOptionArrayMapIntArray(m []RuneOption, f RuneOptionToIntArrayTransformer) [][]int {
	l := len(m)
	acc := make([][]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneOptionArrayMapInt8Array(m []RuneOption, f RuneOptionToInt8ArrayTransformer) [][]int8 {
	l := len(m)
	acc := make([][]int8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneOptionArrayMapInt16Array(m []RuneOption, f RuneOptionToInt16ArrayTransformer) [][]int16 {
	l := len(m)
	acc := make([][]int16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneOptionArrayMapInt32Array(m []RuneOption, f RuneOptionToInt32ArrayTransformer) [][]int32 {
	l := len(m)
	acc := make([][]int32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneOptionArrayMapInt64Array(m []RuneOption, f RuneOptionToInt64ArrayTransformer) [][]int64 {
	l := len(m)
	acc := make([][]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneOptionArrayMapUintArray(m []RuneOption, f RuneOptionToUintArrayTransformer) [][]uint {
	l := len(m)
	acc := make([][]uint, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneOptionArrayMapUint8Array(m []RuneOption, f RuneOptionToUint8ArrayTransformer) [][]uint8 {
	l := len(m)
	acc := make([][]uint8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneOptionArrayMapUint16Array(m []RuneOption, f RuneOptionToUint16ArrayTransformer) [][]uint16 {
	l := len(m)
	acc := make([][]uint16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneOptionArrayMapUint32Array(m []RuneOption, f RuneOptionToUint32ArrayTransformer) [][]uint32 {
	l := len(m)
	acc := make([][]uint32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneOptionArrayMapUint64Array(m []RuneOption, f RuneOptionToUint64ArrayTransformer) [][]uint64 {
	l := len(m)
	acc := make([][]uint64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneOptionArrayMapUintptrArray(m []RuneOption, f RuneOptionToUintptrArrayTransformer) [][]uintptr {
	l := len(m)
	acc := make([][]uintptr, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneOptionArrayMapByteArray(m []RuneOption, f RuneOptionToByteArrayTransformer) [][]byte {
	l := len(m)
	acc := make([][]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneOptionArrayMapRuneArray(m []RuneOption, f RuneOptionToRuneArrayTransformer) [][]rune {
	l := len(m)
	acc := make([][]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneOptionArrayMapFloat32Array(m []RuneOption, f RuneOptionToFloat32ArrayTransformer) [][]float32 {
	l := len(m)
	acc := make([][]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneOptionArrayMapFloat64Array(m []RuneOption, f RuneOptionToFloat64ArrayTransformer) [][]float64 {
	l := len(m)
	acc := make([][]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneOptionArrayMapComplex64Array(m []RuneOption, f RuneOptionToComplex64ArrayTransformer) [][]complex64 {
	l := len(m)
	acc := make([][]complex64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneOptionArrayMapComplex128Array(m []RuneOption, f RuneOptionToComplex128ArrayTransformer) [][]complex128 {
	l := len(m)
	acc := make([][]complex128, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneOptionArrayMapAnyArray(m []RuneOption, f RuneOptionToAnyArrayTransformer) [][]Any {
	l := len(m)
	acc := make([][]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneOptionArrayMapBoolOption(m []RuneOption, f RuneOptionToBoolOptionTransformer) []BoolOption {
	l := len(m)
	acc := make([]BoolOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneOptionArrayMapStringOption(m []RuneOption, f RuneOptionToStringOptionTransformer) []StringOption {
	l := len(m)
	acc := make([]StringOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneOptionArrayMapIntOption(m []RuneOption, f RuneOptionToIntOptionTransformer) []IntOption {
	l := len(m)
	acc := make([]IntOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneOptionArrayMapInt8Option(m []RuneOption, f RuneOptionToInt8OptionTransformer) []Int8Option {
	l := len(m)
	acc := make([]Int8Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneOptionArrayMapInt16Option(m []RuneOption, f RuneOptionToInt16OptionTransformer) []Int16Option {
	l := len(m)
	acc := make([]Int16Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneOptionArrayMapInt32Option(m []RuneOption, f RuneOptionToInt32OptionTransformer) []Int32Option {
	l := len(m)
	acc := make([]Int32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneOptionArrayMapInt64Option(m []RuneOption, f RuneOptionToInt64OptionTransformer) []Int64Option {
	l := len(m)
	acc := make([]Int64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneOptionArrayMapUintOption(m []RuneOption, f RuneOptionToUintOptionTransformer) []UintOption {
	l := len(m)
	acc := make([]UintOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneOptionArrayMapUint8Option(m []RuneOption, f RuneOptionToUint8OptionTransformer) []Uint8Option {
	l := len(m)
	acc := make([]Uint8Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneOptionArrayMapUint16Option(m []RuneOption, f RuneOptionToUint16OptionTransformer) []Uint16Option {
	l := len(m)
	acc := make([]Uint16Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneOptionArrayMapUint32Option(m []RuneOption, f RuneOptionToUint32OptionTransformer) []Uint32Option {
	l := len(m)
	acc := make([]Uint32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneOptionArrayMapUint64Option(m []RuneOption, f RuneOptionToUint64OptionTransformer) []Uint64Option {
	l := len(m)
	acc := make([]Uint64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneOptionArrayMapUintptrOption(m []RuneOption, f RuneOptionToUintptrOptionTransformer) []UintptrOption {
	l := len(m)
	acc := make([]UintptrOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneOptionArrayMapByteOption(m []RuneOption, f RuneOptionToByteOptionTransformer) []ByteOption {
	l := len(m)
	acc := make([]ByteOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneOptionArrayMapRuneOption(m []RuneOption, f RuneOptionToRuneOptionTransformer) []RuneOption {
	l := len(m)
	acc := make([]RuneOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneOptionArrayMapFloat32Option(m []RuneOption, f RuneOptionToFloat32OptionTransformer) []Float32Option {
	l := len(m)
	acc := make([]Float32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneOptionArrayMapFloat64Option(m []RuneOption, f RuneOptionToFloat64OptionTransformer) []Float64Option {
	l := len(m)
	acc := make([]Float64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneOptionArrayMapComplex64Option(m []RuneOption, f RuneOptionToComplex64OptionTransformer) []Complex64Option {
	l := len(m)
	acc := make([]Complex64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneOptionArrayMapComplex128Option(m []RuneOption, f RuneOptionToComplex128OptionTransformer) []Complex128Option {
	l := len(m)
	acc := make([]Complex128Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneOptionArrayMapAnyOption(m []RuneOption, f RuneOptionToAnyOptionTransformer) []AnyOption {
	l := len(m)
	acc := make([]AnyOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32OptionArrayMapBool(m []Float32Option, f Float32OptionToBoolTransformer) []bool {
	l := len(m)
	acc := make([]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32OptionArrayMapString(m []Float32Option, f Float32OptionToStringTransformer) []string {
	l := len(m)
	acc := make([]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32OptionArrayMapInt(m []Float32Option, f Float32OptionToIntTransformer) []int {
	l := len(m)
	acc := make([]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32OptionArrayMapInt8(m []Float32Option, f Float32OptionToInt8Transformer) []int8 {
	l := len(m)
	acc := make([]int8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32OptionArrayMapInt16(m []Float32Option, f Float32OptionToInt16Transformer) []int16 {
	l := len(m)
	acc := make([]int16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32OptionArrayMapInt32(m []Float32Option, f Float32OptionToInt32Transformer) []int32 {
	l := len(m)
	acc := make([]int32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32OptionArrayMapInt64(m []Float32Option, f Float32OptionToInt64Transformer) []int64 {
	l := len(m)
	acc := make([]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32OptionArrayMapUint(m []Float32Option, f Float32OptionToUintTransformer) []uint {
	l := len(m)
	acc := make([]uint, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32OptionArrayMapUint8(m []Float32Option, f Float32OptionToUint8Transformer) []uint8 {
	l := len(m)
	acc := make([]uint8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32OptionArrayMapUint16(m []Float32Option, f Float32OptionToUint16Transformer) []uint16 {
	l := len(m)
	acc := make([]uint16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32OptionArrayMapUint32(m []Float32Option, f Float32OptionToUint32Transformer) []uint32 {
	l := len(m)
	acc := make([]uint32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32OptionArrayMapUint64(m []Float32Option, f Float32OptionToUint64Transformer) []uint64 {
	l := len(m)
	acc := make([]uint64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32OptionArrayMapUintptr(m []Float32Option, f Float32OptionToUintptrTransformer) []uintptr {
	l := len(m)
	acc := make([]uintptr, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32OptionArrayMapByte(m []Float32Option, f Float32OptionToByteTransformer) []byte {
	l := len(m)
	acc := make([]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32OptionArrayMapRune(m []Float32Option, f Float32OptionToRuneTransformer) []rune {
	l := len(m)
	acc := make([]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32OptionArrayMapFloat32(m []Float32Option, f Float32OptionToFloat32Transformer) []float32 {
	l := len(m)
	acc := make([]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32OptionArrayMapFloat64(m []Float32Option, f Float32OptionToFloat64Transformer) []float64 {
	l := len(m)
	acc := make([]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32OptionArrayMapComplex64(m []Float32Option, f Float32OptionToComplex64Transformer) []complex64 {
	l := len(m)
	acc := make([]complex64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32OptionArrayMapComplex128(m []Float32Option, f Float32OptionToComplex128Transformer) []complex128 {
	l := len(m)
	acc := make([]complex128, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32OptionArrayMapAny(m []Float32Option, f Float32OptionToAnyTransformer) []Any {
	l := len(m)
	acc := make([]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32OptionArrayMapBoolArray(m []Float32Option, f Float32OptionToBoolArrayTransformer) [][]bool {
	l := len(m)
	acc := make([][]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32OptionArrayMapStringArray(m []Float32Option, f Float32OptionToStringArrayTransformer) [][]string {
	l := len(m)
	acc := make([][]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32OptionArrayMapIntArray(m []Float32Option, f Float32OptionToIntArrayTransformer) [][]int {
	l := len(m)
	acc := make([][]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32OptionArrayMapInt8Array(m []Float32Option, f Float32OptionToInt8ArrayTransformer) [][]int8 {
	l := len(m)
	acc := make([][]int8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32OptionArrayMapInt16Array(m []Float32Option, f Float32OptionToInt16ArrayTransformer) [][]int16 {
	l := len(m)
	acc := make([][]int16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32OptionArrayMapInt32Array(m []Float32Option, f Float32OptionToInt32ArrayTransformer) [][]int32 {
	l := len(m)
	acc := make([][]int32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32OptionArrayMapInt64Array(m []Float32Option, f Float32OptionToInt64ArrayTransformer) [][]int64 {
	l := len(m)
	acc := make([][]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32OptionArrayMapUintArray(m []Float32Option, f Float32OptionToUintArrayTransformer) [][]uint {
	l := len(m)
	acc := make([][]uint, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32OptionArrayMapUint8Array(m []Float32Option, f Float32OptionToUint8ArrayTransformer) [][]uint8 {
	l := len(m)
	acc := make([][]uint8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32OptionArrayMapUint16Array(m []Float32Option, f Float32OptionToUint16ArrayTransformer) [][]uint16 {
	l := len(m)
	acc := make([][]uint16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32OptionArrayMapUint32Array(m []Float32Option, f Float32OptionToUint32ArrayTransformer) [][]uint32 {
	l := len(m)
	acc := make([][]uint32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32OptionArrayMapUint64Array(m []Float32Option, f Float32OptionToUint64ArrayTransformer) [][]uint64 {
	l := len(m)
	acc := make([][]uint64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32OptionArrayMapUintptrArray(m []Float32Option, f Float32OptionToUintptrArrayTransformer) [][]uintptr {
	l := len(m)
	acc := make([][]uintptr, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32OptionArrayMapByteArray(m []Float32Option, f Float32OptionToByteArrayTransformer) [][]byte {
	l := len(m)
	acc := make([][]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32OptionArrayMapRuneArray(m []Float32Option, f Float32OptionToRuneArrayTransformer) [][]rune {
	l := len(m)
	acc := make([][]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32OptionArrayMapFloat32Array(m []Float32Option, f Float32OptionToFloat32ArrayTransformer) [][]float32 {
	l := len(m)
	acc := make([][]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32OptionArrayMapFloat64Array(m []Float32Option, f Float32OptionToFloat64ArrayTransformer) [][]float64 {
	l := len(m)
	acc := make([][]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32OptionArrayMapComplex64Array(m []Float32Option, f Float32OptionToComplex64ArrayTransformer) [][]complex64 {
	l := len(m)
	acc := make([][]complex64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32OptionArrayMapComplex128Array(m []Float32Option, f Float32OptionToComplex128ArrayTransformer) [][]complex128 {
	l := len(m)
	acc := make([][]complex128, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32OptionArrayMapAnyArray(m []Float32Option, f Float32OptionToAnyArrayTransformer) [][]Any {
	l := len(m)
	acc := make([][]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32OptionArrayMapBoolOption(m []Float32Option, f Float32OptionToBoolOptionTransformer) []BoolOption {
	l := len(m)
	acc := make([]BoolOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32OptionArrayMapStringOption(m []Float32Option, f Float32OptionToStringOptionTransformer) []StringOption {
	l := len(m)
	acc := make([]StringOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32OptionArrayMapIntOption(m []Float32Option, f Float32OptionToIntOptionTransformer) []IntOption {
	l := len(m)
	acc := make([]IntOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32OptionArrayMapInt8Option(m []Float32Option, f Float32OptionToInt8OptionTransformer) []Int8Option {
	l := len(m)
	acc := make([]Int8Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32OptionArrayMapInt16Option(m []Float32Option, f Float32OptionToInt16OptionTransformer) []Int16Option {
	l := len(m)
	acc := make([]Int16Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32OptionArrayMapInt32Option(m []Float32Option, f Float32OptionToInt32OptionTransformer) []Int32Option {
	l := len(m)
	acc := make([]Int32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32OptionArrayMapInt64Option(m []Float32Option, f Float32OptionToInt64OptionTransformer) []Int64Option {
	l := len(m)
	acc := make([]Int64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32OptionArrayMapUintOption(m []Float32Option, f Float32OptionToUintOptionTransformer) []UintOption {
	l := len(m)
	acc := make([]UintOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32OptionArrayMapUint8Option(m []Float32Option, f Float32OptionToUint8OptionTransformer) []Uint8Option {
	l := len(m)
	acc := make([]Uint8Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32OptionArrayMapUint16Option(m []Float32Option, f Float32OptionToUint16OptionTransformer) []Uint16Option {
	l := len(m)
	acc := make([]Uint16Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32OptionArrayMapUint32Option(m []Float32Option, f Float32OptionToUint32OptionTransformer) []Uint32Option {
	l := len(m)
	acc := make([]Uint32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32OptionArrayMapUint64Option(m []Float32Option, f Float32OptionToUint64OptionTransformer) []Uint64Option {
	l := len(m)
	acc := make([]Uint64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32OptionArrayMapUintptrOption(m []Float32Option, f Float32OptionToUintptrOptionTransformer) []UintptrOption {
	l := len(m)
	acc := make([]UintptrOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32OptionArrayMapByteOption(m []Float32Option, f Float32OptionToByteOptionTransformer) []ByteOption {
	l := len(m)
	acc := make([]ByteOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32OptionArrayMapRuneOption(m []Float32Option, f Float32OptionToRuneOptionTransformer) []RuneOption {
	l := len(m)
	acc := make([]RuneOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32OptionArrayMapFloat32Option(m []Float32Option, f Float32OptionToFloat32OptionTransformer) []Float32Option {
	l := len(m)
	acc := make([]Float32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32OptionArrayMapFloat64Option(m []Float32Option, f Float32OptionToFloat64OptionTransformer) []Float64Option {
	l := len(m)
	acc := make([]Float64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32OptionArrayMapComplex64Option(m []Float32Option, f Float32OptionToComplex64OptionTransformer) []Complex64Option {
	l := len(m)
	acc := make([]Complex64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32OptionArrayMapComplex128Option(m []Float32Option, f Float32OptionToComplex128OptionTransformer) []Complex128Option {
	l := len(m)
	acc := make([]Complex128Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32OptionArrayMapAnyOption(m []Float32Option, f Float32OptionToAnyOptionTransformer) []AnyOption {
	l := len(m)
	acc := make([]AnyOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64OptionArrayMapBool(m []Float64Option, f Float64OptionToBoolTransformer) []bool {
	l := len(m)
	acc := make([]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64OptionArrayMapString(m []Float64Option, f Float64OptionToStringTransformer) []string {
	l := len(m)
	acc := make([]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64OptionArrayMapInt(m []Float64Option, f Float64OptionToIntTransformer) []int {
	l := len(m)
	acc := make([]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64OptionArrayMapInt8(m []Float64Option, f Float64OptionToInt8Transformer) []int8 {
	l := len(m)
	acc := make([]int8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64OptionArrayMapInt16(m []Float64Option, f Float64OptionToInt16Transformer) []int16 {
	l := len(m)
	acc := make([]int16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64OptionArrayMapInt32(m []Float64Option, f Float64OptionToInt32Transformer) []int32 {
	l := len(m)
	acc := make([]int32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64OptionArrayMapInt64(m []Float64Option, f Float64OptionToInt64Transformer) []int64 {
	l := len(m)
	acc := make([]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64OptionArrayMapUint(m []Float64Option, f Float64OptionToUintTransformer) []uint {
	l := len(m)
	acc := make([]uint, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64OptionArrayMapUint8(m []Float64Option, f Float64OptionToUint8Transformer) []uint8 {
	l := len(m)
	acc := make([]uint8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64OptionArrayMapUint16(m []Float64Option, f Float64OptionToUint16Transformer) []uint16 {
	l := len(m)
	acc := make([]uint16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64OptionArrayMapUint32(m []Float64Option, f Float64OptionToUint32Transformer) []uint32 {
	l := len(m)
	acc := make([]uint32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64OptionArrayMapUint64(m []Float64Option, f Float64OptionToUint64Transformer) []uint64 {
	l := len(m)
	acc := make([]uint64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64OptionArrayMapUintptr(m []Float64Option, f Float64OptionToUintptrTransformer) []uintptr {
	l := len(m)
	acc := make([]uintptr, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64OptionArrayMapByte(m []Float64Option, f Float64OptionToByteTransformer) []byte {
	l := len(m)
	acc := make([]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64OptionArrayMapRune(m []Float64Option, f Float64OptionToRuneTransformer) []rune {
	l := len(m)
	acc := make([]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64OptionArrayMapFloat32(m []Float64Option, f Float64OptionToFloat32Transformer) []float32 {
	l := len(m)
	acc := make([]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64OptionArrayMapFloat64(m []Float64Option, f Float64OptionToFloat64Transformer) []float64 {
	l := len(m)
	acc := make([]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64OptionArrayMapComplex64(m []Float64Option, f Float64OptionToComplex64Transformer) []complex64 {
	l := len(m)
	acc := make([]complex64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64OptionArrayMapComplex128(m []Float64Option, f Float64OptionToComplex128Transformer) []complex128 {
	l := len(m)
	acc := make([]complex128, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64OptionArrayMapAny(m []Float64Option, f Float64OptionToAnyTransformer) []Any {
	l := len(m)
	acc := make([]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64OptionArrayMapBoolArray(m []Float64Option, f Float64OptionToBoolArrayTransformer) [][]bool {
	l := len(m)
	acc := make([][]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64OptionArrayMapStringArray(m []Float64Option, f Float64OptionToStringArrayTransformer) [][]string {
	l := len(m)
	acc := make([][]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64OptionArrayMapIntArray(m []Float64Option, f Float64OptionToIntArrayTransformer) [][]int {
	l := len(m)
	acc := make([][]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64OptionArrayMapInt8Array(m []Float64Option, f Float64OptionToInt8ArrayTransformer) [][]int8 {
	l := len(m)
	acc := make([][]int8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64OptionArrayMapInt16Array(m []Float64Option, f Float64OptionToInt16ArrayTransformer) [][]int16 {
	l := len(m)
	acc := make([][]int16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64OptionArrayMapInt32Array(m []Float64Option, f Float64OptionToInt32ArrayTransformer) [][]int32 {
	l := len(m)
	acc := make([][]int32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64OptionArrayMapInt64Array(m []Float64Option, f Float64OptionToInt64ArrayTransformer) [][]int64 {
	l := len(m)
	acc := make([][]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64OptionArrayMapUintArray(m []Float64Option, f Float64OptionToUintArrayTransformer) [][]uint {
	l := len(m)
	acc := make([][]uint, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64OptionArrayMapUint8Array(m []Float64Option, f Float64OptionToUint8ArrayTransformer) [][]uint8 {
	l := len(m)
	acc := make([][]uint8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64OptionArrayMapUint16Array(m []Float64Option, f Float64OptionToUint16ArrayTransformer) [][]uint16 {
	l := len(m)
	acc := make([][]uint16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64OptionArrayMapUint32Array(m []Float64Option, f Float64OptionToUint32ArrayTransformer) [][]uint32 {
	l := len(m)
	acc := make([][]uint32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64OptionArrayMapUint64Array(m []Float64Option, f Float64OptionToUint64ArrayTransformer) [][]uint64 {
	l := len(m)
	acc := make([][]uint64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64OptionArrayMapUintptrArray(m []Float64Option, f Float64OptionToUintptrArrayTransformer) [][]uintptr {
	l := len(m)
	acc := make([][]uintptr, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64OptionArrayMapByteArray(m []Float64Option, f Float64OptionToByteArrayTransformer) [][]byte {
	l := len(m)
	acc := make([][]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64OptionArrayMapRuneArray(m []Float64Option, f Float64OptionToRuneArrayTransformer) [][]rune {
	l := len(m)
	acc := make([][]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64OptionArrayMapFloat32Array(m []Float64Option, f Float64OptionToFloat32ArrayTransformer) [][]float32 {
	l := len(m)
	acc := make([][]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64OptionArrayMapFloat64Array(m []Float64Option, f Float64OptionToFloat64ArrayTransformer) [][]float64 {
	l := len(m)
	acc := make([][]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64OptionArrayMapComplex64Array(m []Float64Option, f Float64OptionToComplex64ArrayTransformer) [][]complex64 {
	l := len(m)
	acc := make([][]complex64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64OptionArrayMapComplex128Array(m []Float64Option, f Float64OptionToComplex128ArrayTransformer) [][]complex128 {
	l := len(m)
	acc := make([][]complex128, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64OptionArrayMapAnyArray(m []Float64Option, f Float64OptionToAnyArrayTransformer) [][]Any {
	l := len(m)
	acc := make([][]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64OptionArrayMapBoolOption(m []Float64Option, f Float64OptionToBoolOptionTransformer) []BoolOption {
	l := len(m)
	acc := make([]BoolOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64OptionArrayMapStringOption(m []Float64Option, f Float64OptionToStringOptionTransformer) []StringOption {
	l := len(m)
	acc := make([]StringOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64OptionArrayMapIntOption(m []Float64Option, f Float64OptionToIntOptionTransformer) []IntOption {
	l := len(m)
	acc := make([]IntOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64OptionArrayMapInt8Option(m []Float64Option, f Float64OptionToInt8OptionTransformer) []Int8Option {
	l := len(m)
	acc := make([]Int8Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64OptionArrayMapInt16Option(m []Float64Option, f Float64OptionToInt16OptionTransformer) []Int16Option {
	l := len(m)
	acc := make([]Int16Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64OptionArrayMapInt32Option(m []Float64Option, f Float64OptionToInt32OptionTransformer) []Int32Option {
	l := len(m)
	acc := make([]Int32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64OptionArrayMapInt64Option(m []Float64Option, f Float64OptionToInt64OptionTransformer) []Int64Option {
	l := len(m)
	acc := make([]Int64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64OptionArrayMapUintOption(m []Float64Option, f Float64OptionToUintOptionTransformer) []UintOption {
	l := len(m)
	acc := make([]UintOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64OptionArrayMapUint8Option(m []Float64Option, f Float64OptionToUint8OptionTransformer) []Uint8Option {
	l := len(m)
	acc := make([]Uint8Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64OptionArrayMapUint16Option(m []Float64Option, f Float64OptionToUint16OptionTransformer) []Uint16Option {
	l := len(m)
	acc := make([]Uint16Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64OptionArrayMapUint32Option(m []Float64Option, f Float64OptionToUint32OptionTransformer) []Uint32Option {
	l := len(m)
	acc := make([]Uint32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64OptionArrayMapUint64Option(m []Float64Option, f Float64OptionToUint64OptionTransformer) []Uint64Option {
	l := len(m)
	acc := make([]Uint64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64OptionArrayMapUintptrOption(m []Float64Option, f Float64OptionToUintptrOptionTransformer) []UintptrOption {
	l := len(m)
	acc := make([]UintptrOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64OptionArrayMapByteOption(m []Float64Option, f Float64OptionToByteOptionTransformer) []ByteOption {
	l := len(m)
	acc := make([]ByteOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64OptionArrayMapRuneOption(m []Float64Option, f Float64OptionToRuneOptionTransformer) []RuneOption {
	l := len(m)
	acc := make([]RuneOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64OptionArrayMapFloat32Option(m []Float64Option, f Float64OptionToFloat32OptionTransformer) []Float32Option {
	l := len(m)
	acc := make([]Float32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64OptionArrayMapFloat64Option(m []Float64Option, f Float64OptionToFloat64OptionTransformer) []Float64Option {
	l := len(m)
	acc := make([]Float64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64OptionArrayMapComplex64Option(m []Float64Option, f Float64OptionToComplex64OptionTransformer) []Complex64Option {
	l := len(m)
	acc := make([]Complex64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64OptionArrayMapComplex128Option(m []Float64Option, f Float64OptionToComplex128OptionTransformer) []Complex128Option {
	l := len(m)
	acc := make([]Complex128Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64OptionArrayMapAnyOption(m []Float64Option, f Float64OptionToAnyOptionTransformer) []AnyOption {
	l := len(m)
	acc := make([]AnyOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64OptionArrayMapBool(m []Complex64Option, f Complex64OptionToBoolTransformer) []bool {
	l := len(m)
	acc := make([]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64OptionArrayMapString(m []Complex64Option, f Complex64OptionToStringTransformer) []string {
	l := len(m)
	acc := make([]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64OptionArrayMapInt(m []Complex64Option, f Complex64OptionToIntTransformer) []int {
	l := len(m)
	acc := make([]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64OptionArrayMapInt8(m []Complex64Option, f Complex64OptionToInt8Transformer) []int8 {
	l := len(m)
	acc := make([]int8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64OptionArrayMapInt16(m []Complex64Option, f Complex64OptionToInt16Transformer) []int16 {
	l := len(m)
	acc := make([]int16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64OptionArrayMapInt32(m []Complex64Option, f Complex64OptionToInt32Transformer) []int32 {
	l := len(m)
	acc := make([]int32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64OptionArrayMapInt64(m []Complex64Option, f Complex64OptionToInt64Transformer) []int64 {
	l := len(m)
	acc := make([]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64OptionArrayMapUint(m []Complex64Option, f Complex64OptionToUintTransformer) []uint {
	l := len(m)
	acc := make([]uint, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64OptionArrayMapUint8(m []Complex64Option, f Complex64OptionToUint8Transformer) []uint8 {
	l := len(m)
	acc := make([]uint8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64OptionArrayMapUint16(m []Complex64Option, f Complex64OptionToUint16Transformer) []uint16 {
	l := len(m)
	acc := make([]uint16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64OptionArrayMapUint32(m []Complex64Option, f Complex64OptionToUint32Transformer) []uint32 {
	l := len(m)
	acc := make([]uint32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64OptionArrayMapUint64(m []Complex64Option, f Complex64OptionToUint64Transformer) []uint64 {
	l := len(m)
	acc := make([]uint64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64OptionArrayMapUintptr(m []Complex64Option, f Complex64OptionToUintptrTransformer) []uintptr {
	l := len(m)
	acc := make([]uintptr, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64OptionArrayMapByte(m []Complex64Option, f Complex64OptionToByteTransformer) []byte {
	l := len(m)
	acc := make([]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64OptionArrayMapRune(m []Complex64Option, f Complex64OptionToRuneTransformer) []rune {
	l := len(m)
	acc := make([]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64OptionArrayMapFloat32(m []Complex64Option, f Complex64OptionToFloat32Transformer) []float32 {
	l := len(m)
	acc := make([]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64OptionArrayMapFloat64(m []Complex64Option, f Complex64OptionToFloat64Transformer) []float64 {
	l := len(m)
	acc := make([]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64OptionArrayMapComplex64(m []Complex64Option, f Complex64OptionToComplex64Transformer) []complex64 {
	l := len(m)
	acc := make([]complex64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64OptionArrayMapComplex128(m []Complex64Option, f Complex64OptionToComplex128Transformer) []complex128 {
	l := len(m)
	acc := make([]complex128, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64OptionArrayMapAny(m []Complex64Option, f Complex64OptionToAnyTransformer) []Any {
	l := len(m)
	acc := make([]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64OptionArrayMapBoolArray(m []Complex64Option, f Complex64OptionToBoolArrayTransformer) [][]bool {
	l := len(m)
	acc := make([][]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64OptionArrayMapStringArray(m []Complex64Option, f Complex64OptionToStringArrayTransformer) [][]string {
	l := len(m)
	acc := make([][]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64OptionArrayMapIntArray(m []Complex64Option, f Complex64OptionToIntArrayTransformer) [][]int {
	l := len(m)
	acc := make([][]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64OptionArrayMapInt8Array(m []Complex64Option, f Complex64OptionToInt8ArrayTransformer) [][]int8 {
	l := len(m)
	acc := make([][]int8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64OptionArrayMapInt16Array(m []Complex64Option, f Complex64OptionToInt16ArrayTransformer) [][]int16 {
	l := len(m)
	acc := make([][]int16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64OptionArrayMapInt32Array(m []Complex64Option, f Complex64OptionToInt32ArrayTransformer) [][]int32 {
	l := len(m)
	acc := make([][]int32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64OptionArrayMapInt64Array(m []Complex64Option, f Complex64OptionToInt64ArrayTransformer) [][]int64 {
	l := len(m)
	acc := make([][]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64OptionArrayMapUintArray(m []Complex64Option, f Complex64OptionToUintArrayTransformer) [][]uint {
	l := len(m)
	acc := make([][]uint, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64OptionArrayMapUint8Array(m []Complex64Option, f Complex64OptionToUint8ArrayTransformer) [][]uint8 {
	l := len(m)
	acc := make([][]uint8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64OptionArrayMapUint16Array(m []Complex64Option, f Complex64OptionToUint16ArrayTransformer) [][]uint16 {
	l := len(m)
	acc := make([][]uint16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64OptionArrayMapUint32Array(m []Complex64Option, f Complex64OptionToUint32ArrayTransformer) [][]uint32 {
	l := len(m)
	acc := make([][]uint32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64OptionArrayMapUint64Array(m []Complex64Option, f Complex64OptionToUint64ArrayTransformer) [][]uint64 {
	l := len(m)
	acc := make([][]uint64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64OptionArrayMapUintptrArray(m []Complex64Option, f Complex64OptionToUintptrArrayTransformer) [][]uintptr {
	l := len(m)
	acc := make([][]uintptr, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64OptionArrayMapByteArray(m []Complex64Option, f Complex64OptionToByteArrayTransformer) [][]byte {
	l := len(m)
	acc := make([][]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64OptionArrayMapRuneArray(m []Complex64Option, f Complex64OptionToRuneArrayTransformer) [][]rune {
	l := len(m)
	acc := make([][]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64OptionArrayMapFloat32Array(m []Complex64Option, f Complex64OptionToFloat32ArrayTransformer) [][]float32 {
	l := len(m)
	acc := make([][]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64OptionArrayMapFloat64Array(m []Complex64Option, f Complex64OptionToFloat64ArrayTransformer) [][]float64 {
	l := len(m)
	acc := make([][]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64OptionArrayMapComplex64Array(m []Complex64Option, f Complex64OptionToComplex64ArrayTransformer) [][]complex64 {
	l := len(m)
	acc := make([][]complex64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64OptionArrayMapComplex128Array(m []Complex64Option, f Complex64OptionToComplex128ArrayTransformer) [][]complex128 {
	l := len(m)
	acc := make([][]complex128, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64OptionArrayMapAnyArray(m []Complex64Option, f Complex64OptionToAnyArrayTransformer) [][]Any {
	l := len(m)
	acc := make([][]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64OptionArrayMapBoolOption(m []Complex64Option, f Complex64OptionToBoolOptionTransformer) []BoolOption {
	l := len(m)
	acc := make([]BoolOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64OptionArrayMapStringOption(m []Complex64Option, f Complex64OptionToStringOptionTransformer) []StringOption {
	l := len(m)
	acc := make([]StringOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64OptionArrayMapIntOption(m []Complex64Option, f Complex64OptionToIntOptionTransformer) []IntOption {
	l := len(m)
	acc := make([]IntOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64OptionArrayMapInt8Option(m []Complex64Option, f Complex64OptionToInt8OptionTransformer) []Int8Option {
	l := len(m)
	acc := make([]Int8Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64OptionArrayMapInt16Option(m []Complex64Option, f Complex64OptionToInt16OptionTransformer) []Int16Option {
	l := len(m)
	acc := make([]Int16Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64OptionArrayMapInt32Option(m []Complex64Option, f Complex64OptionToInt32OptionTransformer) []Int32Option {
	l := len(m)
	acc := make([]Int32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64OptionArrayMapInt64Option(m []Complex64Option, f Complex64OptionToInt64OptionTransformer) []Int64Option {
	l := len(m)
	acc := make([]Int64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64OptionArrayMapUintOption(m []Complex64Option, f Complex64OptionToUintOptionTransformer) []UintOption {
	l := len(m)
	acc := make([]UintOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64OptionArrayMapUint8Option(m []Complex64Option, f Complex64OptionToUint8OptionTransformer) []Uint8Option {
	l := len(m)
	acc := make([]Uint8Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64OptionArrayMapUint16Option(m []Complex64Option, f Complex64OptionToUint16OptionTransformer) []Uint16Option {
	l := len(m)
	acc := make([]Uint16Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64OptionArrayMapUint32Option(m []Complex64Option, f Complex64OptionToUint32OptionTransformer) []Uint32Option {
	l := len(m)
	acc := make([]Uint32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64OptionArrayMapUint64Option(m []Complex64Option, f Complex64OptionToUint64OptionTransformer) []Uint64Option {
	l := len(m)
	acc := make([]Uint64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64OptionArrayMapUintptrOption(m []Complex64Option, f Complex64OptionToUintptrOptionTransformer) []UintptrOption {
	l := len(m)
	acc := make([]UintptrOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64OptionArrayMapByteOption(m []Complex64Option, f Complex64OptionToByteOptionTransformer) []ByteOption {
	l := len(m)
	acc := make([]ByteOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64OptionArrayMapRuneOption(m []Complex64Option, f Complex64OptionToRuneOptionTransformer) []RuneOption {
	l := len(m)
	acc := make([]RuneOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64OptionArrayMapFloat32Option(m []Complex64Option, f Complex64OptionToFloat32OptionTransformer) []Float32Option {
	l := len(m)
	acc := make([]Float32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64OptionArrayMapFloat64Option(m []Complex64Option, f Complex64OptionToFloat64OptionTransformer) []Float64Option {
	l := len(m)
	acc := make([]Float64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64OptionArrayMapComplex64Option(m []Complex64Option, f Complex64OptionToComplex64OptionTransformer) []Complex64Option {
	l := len(m)
	acc := make([]Complex64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64OptionArrayMapComplex128Option(m []Complex64Option, f Complex64OptionToComplex128OptionTransformer) []Complex128Option {
	l := len(m)
	acc := make([]Complex128Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex64OptionArrayMapAnyOption(m []Complex64Option, f Complex64OptionToAnyOptionTransformer) []AnyOption {
	l := len(m)
	acc := make([]AnyOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128OptionArrayMapBool(m []Complex128Option, f Complex128OptionToBoolTransformer) []bool {
	l := len(m)
	acc := make([]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128OptionArrayMapString(m []Complex128Option, f Complex128OptionToStringTransformer) []string {
	l := len(m)
	acc := make([]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128OptionArrayMapInt(m []Complex128Option, f Complex128OptionToIntTransformer) []int {
	l := len(m)
	acc := make([]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128OptionArrayMapInt8(m []Complex128Option, f Complex128OptionToInt8Transformer) []int8 {
	l := len(m)
	acc := make([]int8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128OptionArrayMapInt16(m []Complex128Option, f Complex128OptionToInt16Transformer) []int16 {
	l := len(m)
	acc := make([]int16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128OptionArrayMapInt32(m []Complex128Option, f Complex128OptionToInt32Transformer) []int32 {
	l := len(m)
	acc := make([]int32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128OptionArrayMapInt64(m []Complex128Option, f Complex128OptionToInt64Transformer) []int64 {
	l := len(m)
	acc := make([]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128OptionArrayMapUint(m []Complex128Option, f Complex128OptionToUintTransformer) []uint {
	l := len(m)
	acc := make([]uint, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128OptionArrayMapUint8(m []Complex128Option, f Complex128OptionToUint8Transformer) []uint8 {
	l := len(m)
	acc := make([]uint8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128OptionArrayMapUint16(m []Complex128Option, f Complex128OptionToUint16Transformer) []uint16 {
	l := len(m)
	acc := make([]uint16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128OptionArrayMapUint32(m []Complex128Option, f Complex128OptionToUint32Transformer) []uint32 {
	l := len(m)
	acc := make([]uint32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128OptionArrayMapUint64(m []Complex128Option, f Complex128OptionToUint64Transformer) []uint64 {
	l := len(m)
	acc := make([]uint64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128OptionArrayMapUintptr(m []Complex128Option, f Complex128OptionToUintptrTransformer) []uintptr {
	l := len(m)
	acc := make([]uintptr, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128OptionArrayMapByte(m []Complex128Option, f Complex128OptionToByteTransformer) []byte {
	l := len(m)
	acc := make([]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128OptionArrayMapRune(m []Complex128Option, f Complex128OptionToRuneTransformer) []rune {
	l := len(m)
	acc := make([]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128OptionArrayMapFloat32(m []Complex128Option, f Complex128OptionToFloat32Transformer) []float32 {
	l := len(m)
	acc := make([]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128OptionArrayMapFloat64(m []Complex128Option, f Complex128OptionToFloat64Transformer) []float64 {
	l := len(m)
	acc := make([]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128OptionArrayMapComplex64(m []Complex128Option, f Complex128OptionToComplex64Transformer) []complex64 {
	l := len(m)
	acc := make([]complex64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128OptionArrayMapComplex128(m []Complex128Option, f Complex128OptionToComplex128Transformer) []complex128 {
	l := len(m)
	acc := make([]complex128, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128OptionArrayMapAny(m []Complex128Option, f Complex128OptionToAnyTransformer) []Any {
	l := len(m)
	acc := make([]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128OptionArrayMapBoolArray(m []Complex128Option, f Complex128OptionToBoolArrayTransformer) [][]bool {
	l := len(m)
	acc := make([][]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128OptionArrayMapStringArray(m []Complex128Option, f Complex128OptionToStringArrayTransformer) [][]string {
	l := len(m)
	acc := make([][]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128OptionArrayMapIntArray(m []Complex128Option, f Complex128OptionToIntArrayTransformer) [][]int {
	l := len(m)
	acc := make([][]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128OptionArrayMapInt8Array(m []Complex128Option, f Complex128OptionToInt8ArrayTransformer) [][]int8 {
	l := len(m)
	acc := make([][]int8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128OptionArrayMapInt16Array(m []Complex128Option, f Complex128OptionToInt16ArrayTransformer) [][]int16 {
	l := len(m)
	acc := make([][]int16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128OptionArrayMapInt32Array(m []Complex128Option, f Complex128OptionToInt32ArrayTransformer) [][]int32 {
	l := len(m)
	acc := make([][]int32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128OptionArrayMapInt64Array(m []Complex128Option, f Complex128OptionToInt64ArrayTransformer) [][]int64 {
	l := len(m)
	acc := make([][]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128OptionArrayMapUintArray(m []Complex128Option, f Complex128OptionToUintArrayTransformer) [][]uint {
	l := len(m)
	acc := make([][]uint, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128OptionArrayMapUint8Array(m []Complex128Option, f Complex128OptionToUint8ArrayTransformer) [][]uint8 {
	l := len(m)
	acc := make([][]uint8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128OptionArrayMapUint16Array(m []Complex128Option, f Complex128OptionToUint16ArrayTransformer) [][]uint16 {
	l := len(m)
	acc := make([][]uint16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128OptionArrayMapUint32Array(m []Complex128Option, f Complex128OptionToUint32ArrayTransformer) [][]uint32 {
	l := len(m)
	acc := make([][]uint32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128OptionArrayMapUint64Array(m []Complex128Option, f Complex128OptionToUint64ArrayTransformer) [][]uint64 {
	l := len(m)
	acc := make([][]uint64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128OptionArrayMapUintptrArray(m []Complex128Option, f Complex128OptionToUintptrArrayTransformer) [][]uintptr {
	l := len(m)
	acc := make([][]uintptr, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128OptionArrayMapByteArray(m []Complex128Option, f Complex128OptionToByteArrayTransformer) [][]byte {
	l := len(m)
	acc := make([][]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128OptionArrayMapRuneArray(m []Complex128Option, f Complex128OptionToRuneArrayTransformer) [][]rune {
	l := len(m)
	acc := make([][]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128OptionArrayMapFloat32Array(m []Complex128Option, f Complex128OptionToFloat32ArrayTransformer) [][]float32 {
	l := len(m)
	acc := make([][]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128OptionArrayMapFloat64Array(m []Complex128Option, f Complex128OptionToFloat64ArrayTransformer) [][]float64 {
	l := len(m)
	acc := make([][]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128OptionArrayMapComplex64Array(m []Complex128Option, f Complex128OptionToComplex64ArrayTransformer) [][]complex64 {
	l := len(m)
	acc := make([][]complex64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128OptionArrayMapComplex128Array(m []Complex128Option, f Complex128OptionToComplex128ArrayTransformer) [][]complex128 {
	l := len(m)
	acc := make([][]complex128, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128OptionArrayMapAnyArray(m []Complex128Option, f Complex128OptionToAnyArrayTransformer) [][]Any {
	l := len(m)
	acc := make([][]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128OptionArrayMapBoolOption(m []Complex128Option, f Complex128OptionToBoolOptionTransformer) []BoolOption {
	l := len(m)
	acc := make([]BoolOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128OptionArrayMapStringOption(m []Complex128Option, f Complex128OptionToStringOptionTransformer) []StringOption {
	l := len(m)
	acc := make([]StringOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128OptionArrayMapIntOption(m []Complex128Option, f Complex128OptionToIntOptionTransformer) []IntOption {
	l := len(m)
	acc := make([]IntOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128OptionArrayMapInt8Option(m []Complex128Option, f Complex128OptionToInt8OptionTransformer) []Int8Option {
	l := len(m)
	acc := make([]Int8Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128OptionArrayMapInt16Option(m []Complex128Option, f Complex128OptionToInt16OptionTransformer) []Int16Option {
	l := len(m)
	acc := make([]Int16Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128OptionArrayMapInt32Option(m []Complex128Option, f Complex128OptionToInt32OptionTransformer) []Int32Option {
	l := len(m)
	acc := make([]Int32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128OptionArrayMapInt64Option(m []Complex128Option, f Complex128OptionToInt64OptionTransformer) []Int64Option {
	l := len(m)
	acc := make([]Int64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128OptionArrayMapUintOption(m []Complex128Option, f Complex128OptionToUintOptionTransformer) []UintOption {
	l := len(m)
	acc := make([]UintOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128OptionArrayMapUint8Option(m []Complex128Option, f Complex128OptionToUint8OptionTransformer) []Uint8Option {
	l := len(m)
	acc := make([]Uint8Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128OptionArrayMapUint16Option(m []Complex128Option, f Complex128OptionToUint16OptionTransformer) []Uint16Option {
	l := len(m)
	acc := make([]Uint16Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128OptionArrayMapUint32Option(m []Complex128Option, f Complex128OptionToUint32OptionTransformer) []Uint32Option {
	l := len(m)
	acc := make([]Uint32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128OptionArrayMapUint64Option(m []Complex128Option, f Complex128OptionToUint64OptionTransformer) []Uint64Option {
	l := len(m)
	acc := make([]Uint64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128OptionArrayMapUintptrOption(m []Complex128Option, f Complex128OptionToUintptrOptionTransformer) []UintptrOption {
	l := len(m)
	acc := make([]UintptrOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128OptionArrayMapByteOption(m []Complex128Option, f Complex128OptionToByteOptionTransformer) []ByteOption {
	l := len(m)
	acc := make([]ByteOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128OptionArrayMapRuneOption(m []Complex128Option, f Complex128OptionToRuneOptionTransformer) []RuneOption {
	l := len(m)
	acc := make([]RuneOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128OptionArrayMapFloat32Option(m []Complex128Option, f Complex128OptionToFloat32OptionTransformer) []Float32Option {
	l := len(m)
	acc := make([]Float32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128OptionArrayMapFloat64Option(m []Complex128Option, f Complex128OptionToFloat64OptionTransformer) []Float64Option {
	l := len(m)
	acc := make([]Float64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128OptionArrayMapComplex64Option(m []Complex128Option, f Complex128OptionToComplex64OptionTransformer) []Complex64Option {
	l := len(m)
	acc := make([]Complex64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128OptionArrayMapComplex128Option(m []Complex128Option, f Complex128OptionToComplex128OptionTransformer) []Complex128Option {
	l := len(m)
	acc := make([]Complex128Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Complex128OptionArrayMapAnyOption(m []Complex128Option, f Complex128OptionToAnyOptionTransformer) []AnyOption {
	l := len(m)
	acc := make([]AnyOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyOptionArrayMapBool(m []AnyOption, f AnyOptionToBoolTransformer) []bool {
	l := len(m)
	acc := make([]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyOptionArrayMapString(m []AnyOption, f AnyOptionToStringTransformer) []string {
	l := len(m)
	acc := make([]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyOptionArrayMapInt(m []AnyOption, f AnyOptionToIntTransformer) []int {
	l := len(m)
	acc := make([]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyOptionArrayMapInt8(m []AnyOption, f AnyOptionToInt8Transformer) []int8 {
	l := len(m)
	acc := make([]int8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyOptionArrayMapInt16(m []AnyOption, f AnyOptionToInt16Transformer) []int16 {
	l := len(m)
	acc := make([]int16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyOptionArrayMapInt32(m []AnyOption, f AnyOptionToInt32Transformer) []int32 {
	l := len(m)
	acc := make([]int32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyOptionArrayMapInt64(m []AnyOption, f AnyOptionToInt64Transformer) []int64 {
	l := len(m)
	acc := make([]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyOptionArrayMapUint(m []AnyOption, f AnyOptionToUintTransformer) []uint {
	l := len(m)
	acc := make([]uint, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyOptionArrayMapUint8(m []AnyOption, f AnyOptionToUint8Transformer) []uint8 {
	l := len(m)
	acc := make([]uint8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyOptionArrayMapUint16(m []AnyOption, f AnyOptionToUint16Transformer) []uint16 {
	l := len(m)
	acc := make([]uint16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyOptionArrayMapUint32(m []AnyOption, f AnyOptionToUint32Transformer) []uint32 {
	l := len(m)
	acc := make([]uint32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyOptionArrayMapUint64(m []AnyOption, f AnyOptionToUint64Transformer) []uint64 {
	l := len(m)
	acc := make([]uint64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyOptionArrayMapUintptr(m []AnyOption, f AnyOptionToUintptrTransformer) []uintptr {
	l := len(m)
	acc := make([]uintptr, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyOptionArrayMapByte(m []AnyOption, f AnyOptionToByteTransformer) []byte {
	l := len(m)
	acc := make([]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyOptionArrayMapRune(m []AnyOption, f AnyOptionToRuneTransformer) []rune {
	l := len(m)
	acc := make([]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyOptionArrayMapFloat32(m []AnyOption, f AnyOptionToFloat32Transformer) []float32 {
	l := len(m)
	acc := make([]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyOptionArrayMapFloat64(m []AnyOption, f AnyOptionToFloat64Transformer) []float64 {
	l := len(m)
	acc := make([]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyOptionArrayMapComplex64(m []AnyOption, f AnyOptionToComplex64Transformer) []complex64 {
	l := len(m)
	acc := make([]complex64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyOptionArrayMapComplex128(m []AnyOption, f AnyOptionToComplex128Transformer) []complex128 {
	l := len(m)
	acc := make([]complex128, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyOptionArrayMapAny(m []AnyOption, f AnyOptionToAnyTransformer) []Any {
	l := len(m)
	acc := make([]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyOptionArrayMapBoolArray(m []AnyOption, f AnyOptionToBoolArrayTransformer) [][]bool {
	l := len(m)
	acc := make([][]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyOptionArrayMapStringArray(m []AnyOption, f AnyOptionToStringArrayTransformer) [][]string {
	l := len(m)
	acc := make([][]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyOptionArrayMapIntArray(m []AnyOption, f AnyOptionToIntArrayTransformer) [][]int {
	l := len(m)
	acc := make([][]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyOptionArrayMapInt8Array(m []AnyOption, f AnyOptionToInt8ArrayTransformer) [][]int8 {
	l := len(m)
	acc := make([][]int8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyOptionArrayMapInt16Array(m []AnyOption, f AnyOptionToInt16ArrayTransformer) [][]int16 {
	l := len(m)
	acc := make([][]int16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyOptionArrayMapInt32Array(m []AnyOption, f AnyOptionToInt32ArrayTransformer) [][]int32 {
	l := len(m)
	acc := make([][]int32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyOptionArrayMapInt64Array(m []AnyOption, f AnyOptionToInt64ArrayTransformer) [][]int64 {
	l := len(m)
	acc := make([][]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyOptionArrayMapUintArray(m []AnyOption, f AnyOptionToUintArrayTransformer) [][]uint {
	l := len(m)
	acc := make([][]uint, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyOptionArrayMapUint8Array(m []AnyOption, f AnyOptionToUint8ArrayTransformer) [][]uint8 {
	l := len(m)
	acc := make([][]uint8, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyOptionArrayMapUint16Array(m []AnyOption, f AnyOptionToUint16ArrayTransformer) [][]uint16 {
	l := len(m)
	acc := make([][]uint16, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyOptionArrayMapUint32Array(m []AnyOption, f AnyOptionToUint32ArrayTransformer) [][]uint32 {
	l := len(m)
	acc := make([][]uint32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyOptionArrayMapUint64Array(m []AnyOption, f AnyOptionToUint64ArrayTransformer) [][]uint64 {
	l := len(m)
	acc := make([][]uint64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyOptionArrayMapUintptrArray(m []AnyOption, f AnyOptionToUintptrArrayTransformer) [][]uintptr {
	l := len(m)
	acc := make([][]uintptr, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyOptionArrayMapByteArray(m []AnyOption, f AnyOptionToByteArrayTransformer) [][]byte {
	l := len(m)
	acc := make([][]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyOptionArrayMapRuneArray(m []AnyOption, f AnyOptionToRuneArrayTransformer) [][]rune {
	l := len(m)
	acc := make([][]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyOptionArrayMapFloat32Array(m []AnyOption, f AnyOptionToFloat32ArrayTransformer) [][]float32 {
	l := len(m)
	acc := make([][]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyOptionArrayMapFloat64Array(m []AnyOption, f AnyOptionToFloat64ArrayTransformer) [][]float64 {
	l := len(m)
	acc := make([][]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyOptionArrayMapComplex64Array(m []AnyOption, f AnyOptionToComplex64ArrayTransformer) [][]complex64 {
	l := len(m)
	acc := make([][]complex64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyOptionArrayMapComplex128Array(m []AnyOption, f AnyOptionToComplex128ArrayTransformer) [][]complex128 {
	l := len(m)
	acc := make([][]complex128, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyOptionArrayMapAnyArray(m []AnyOption, f AnyOptionToAnyArrayTransformer) [][]Any {
	l := len(m)
	acc := make([][]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyOptionArrayMapBoolOption(m []AnyOption, f AnyOptionToBoolOptionTransformer) []BoolOption {
	l := len(m)
	acc := make([]BoolOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyOptionArrayMapStringOption(m []AnyOption, f AnyOptionToStringOptionTransformer) []StringOption {
	l := len(m)
	acc := make([]StringOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyOptionArrayMapIntOption(m []AnyOption, f AnyOptionToIntOptionTransformer) []IntOption {
	l := len(m)
	acc := make([]IntOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyOptionArrayMapInt8Option(m []AnyOption, f AnyOptionToInt8OptionTransformer) []Int8Option {
	l := len(m)
	acc := make([]Int8Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyOptionArrayMapInt16Option(m []AnyOption, f AnyOptionToInt16OptionTransformer) []Int16Option {
	l := len(m)
	acc := make([]Int16Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyOptionArrayMapInt32Option(m []AnyOption, f AnyOptionToInt32OptionTransformer) []Int32Option {
	l := len(m)
	acc := make([]Int32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyOptionArrayMapInt64Option(m []AnyOption, f AnyOptionToInt64OptionTransformer) []Int64Option {
	l := len(m)
	acc := make([]Int64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyOptionArrayMapUintOption(m []AnyOption, f AnyOptionToUintOptionTransformer) []UintOption {
	l := len(m)
	acc := make([]UintOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyOptionArrayMapUint8Option(m []AnyOption, f AnyOptionToUint8OptionTransformer) []Uint8Option {
	l := len(m)
	acc := make([]Uint8Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyOptionArrayMapUint16Option(m []AnyOption, f AnyOptionToUint16OptionTransformer) []Uint16Option {
	l := len(m)
	acc := make([]Uint16Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyOptionArrayMapUint32Option(m []AnyOption, f AnyOptionToUint32OptionTransformer) []Uint32Option {
	l := len(m)
	acc := make([]Uint32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyOptionArrayMapUint64Option(m []AnyOption, f AnyOptionToUint64OptionTransformer) []Uint64Option {
	l := len(m)
	acc := make([]Uint64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyOptionArrayMapUintptrOption(m []AnyOption, f AnyOptionToUintptrOptionTransformer) []UintptrOption {
	l := len(m)
	acc := make([]UintptrOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyOptionArrayMapByteOption(m []AnyOption, f AnyOptionToByteOptionTransformer) []ByteOption {
	l := len(m)
	acc := make([]ByteOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyOptionArrayMapRuneOption(m []AnyOption, f AnyOptionToRuneOptionTransformer) []RuneOption {
	l := len(m)
	acc := make([]RuneOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyOptionArrayMapFloat32Option(m []AnyOption, f AnyOptionToFloat32OptionTransformer) []Float32Option {
	l := len(m)
	acc := make([]Float32Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyOptionArrayMapFloat64Option(m []AnyOption, f AnyOptionToFloat64OptionTransformer) []Float64Option {
	l := len(m)
	acc := make([]Float64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyOptionArrayMapComplex64Option(m []AnyOption, f AnyOptionToComplex64OptionTransformer) []Complex64Option {
	l := len(m)
	acc := make([]Complex64Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyOptionArrayMapComplex128Option(m []AnyOption, f AnyOptionToComplex128OptionTransformer) []Complex128Option {
	l := len(m)
	acc := make([]Complex128Option, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyOptionArrayMapAnyOption(m []AnyOption, f AnyOptionToAnyOptionTransformer) []AnyOption {
	l := len(m)
	acc := make([]AnyOption, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
