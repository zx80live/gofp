// bootstrap_array_map.go
// DO NOT EDIT THIS FILE WAS GENERATED AUTOMATICALLY BY https://github.com/zx80live/gofp-bootstrap

package fp

func BoolArrayMapBool(m []bool, f func(bool) bool) []bool {
	l := len(m)
	acc := make([]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayMapString(m []bool, f func(bool) string) []string {
	l := len(m)
	acc := make([]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayMapInt(m []bool, f func(bool) int) []int {
	l := len(m)
	acc := make([]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayMapInt64(m []bool, f func(bool) int64) []int64 {
	l := len(m)
	acc := make([]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayMapByte(m []bool, f func(bool) byte) []byte {
	l := len(m)
	acc := make([]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayMapRune(m []bool, f func(bool) rune) []rune {
	l := len(m)
	acc := make([]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayMapFloat32(m []bool, f func(bool) float32) []float32 {
	l := len(m)
	acc := make([]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayMapFloat64(m []bool, f func(bool) float64) []float64 {
	l := len(m)
	acc := make([]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayMapAny(m []bool, f func(bool) Any) []Any {
	l := len(m)
	acc := make([]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayMapBoolArray(m []bool, f func(bool) []bool) [][]bool {
	l := len(m)
	acc := make([][]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayMapStringArray(m []bool, f func(bool) []string) [][]string {
	l := len(m)
	acc := make([][]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayMapIntArray(m []bool, f func(bool) []int) [][]int {
	l := len(m)
	acc := make([][]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayMapInt64Array(m []bool, f func(bool) []int64) [][]int64 {
	l := len(m)
	acc := make([][]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayMapByteArray(m []bool, f func(bool) []byte) [][]byte {
	l := len(m)
	acc := make([][]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayMapRuneArray(m []bool, f func(bool) []rune) [][]rune {
	l := len(m)
	acc := make([][]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayMapFloat32Array(m []bool, f func(bool) []float32) [][]float32 {
	l := len(m)
	acc := make([][]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayMapFloat64Array(m []bool, f func(bool) []float64) [][]float64 {
	l := len(m)
	acc := make([][]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayMapAnyArray(m []bool, f func(bool) []Any) [][]Any {
	l := len(m)
	acc := make([][]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayMapBool(m []string, f func(string) bool) []bool {
	l := len(m)
	acc := make([]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayMapString(m []string, f func(string) string) []string {
	l := len(m)
	acc := make([]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayMapInt(m []string, f func(string) int) []int {
	l := len(m)
	acc := make([]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayMapInt64(m []string, f func(string) int64) []int64 {
	l := len(m)
	acc := make([]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayMapByte(m []string, f func(string) byte) []byte {
	l := len(m)
	acc := make([]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayMapRune(m []string, f func(string) rune) []rune {
	l := len(m)
	acc := make([]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayMapFloat32(m []string, f func(string) float32) []float32 {
	l := len(m)
	acc := make([]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayMapFloat64(m []string, f func(string) float64) []float64 {
	l := len(m)
	acc := make([]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayMapAny(m []string, f func(string) Any) []Any {
	l := len(m)
	acc := make([]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayMapBoolArray(m []string, f func(string) []bool) [][]bool {
	l := len(m)
	acc := make([][]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayMapStringArray(m []string, f func(string) []string) [][]string {
	l := len(m)
	acc := make([][]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayMapIntArray(m []string, f func(string) []int) [][]int {
	l := len(m)
	acc := make([][]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayMapInt64Array(m []string, f func(string) []int64) [][]int64 {
	l := len(m)
	acc := make([][]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayMapByteArray(m []string, f func(string) []byte) [][]byte {
	l := len(m)
	acc := make([][]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayMapRuneArray(m []string, f func(string) []rune) [][]rune {
	l := len(m)
	acc := make([][]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayMapFloat32Array(m []string, f func(string) []float32) [][]float32 {
	l := len(m)
	acc := make([][]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayMapFloat64Array(m []string, f func(string) []float64) [][]float64 {
	l := len(m)
	acc := make([][]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayMapAnyArray(m []string, f func(string) []Any) [][]Any {
	l := len(m)
	acc := make([][]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayMapBool(m []int, f func(int) bool) []bool {
	l := len(m)
	acc := make([]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayMapString(m []int, f func(int) string) []string {
	l := len(m)
	acc := make([]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayMapInt(m []int, f func(int) int) []int {
	l := len(m)
	acc := make([]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayMapInt64(m []int, f func(int) int64) []int64 {
	l := len(m)
	acc := make([]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayMapByte(m []int, f func(int) byte) []byte {
	l := len(m)
	acc := make([]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayMapRune(m []int, f func(int) rune) []rune {
	l := len(m)
	acc := make([]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayMapFloat32(m []int, f func(int) float32) []float32 {
	l := len(m)
	acc := make([]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayMapFloat64(m []int, f func(int) float64) []float64 {
	l := len(m)
	acc := make([]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayMapAny(m []int, f func(int) Any) []Any {
	l := len(m)
	acc := make([]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayMapBoolArray(m []int, f func(int) []bool) [][]bool {
	l := len(m)
	acc := make([][]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayMapStringArray(m []int, f func(int) []string) [][]string {
	l := len(m)
	acc := make([][]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayMapIntArray(m []int, f func(int) []int) [][]int {
	l := len(m)
	acc := make([][]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayMapInt64Array(m []int, f func(int) []int64) [][]int64 {
	l := len(m)
	acc := make([][]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayMapByteArray(m []int, f func(int) []byte) [][]byte {
	l := len(m)
	acc := make([][]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayMapRuneArray(m []int, f func(int) []rune) [][]rune {
	l := len(m)
	acc := make([][]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayMapFloat32Array(m []int, f func(int) []float32) [][]float32 {
	l := len(m)
	acc := make([][]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayMapFloat64Array(m []int, f func(int) []float64) [][]float64 {
	l := len(m)
	acc := make([][]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayMapAnyArray(m []int, f func(int) []Any) [][]Any {
	l := len(m)
	acc := make([][]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayMapBool(m []int64, f func(int64) bool) []bool {
	l := len(m)
	acc := make([]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayMapString(m []int64, f func(int64) string) []string {
	l := len(m)
	acc := make([]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayMapInt(m []int64, f func(int64) int) []int {
	l := len(m)
	acc := make([]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayMapInt64(m []int64, f func(int64) int64) []int64 {
	l := len(m)
	acc := make([]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayMapByte(m []int64, f func(int64) byte) []byte {
	l := len(m)
	acc := make([]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayMapRune(m []int64, f func(int64) rune) []rune {
	l := len(m)
	acc := make([]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayMapFloat32(m []int64, f func(int64) float32) []float32 {
	l := len(m)
	acc := make([]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayMapFloat64(m []int64, f func(int64) float64) []float64 {
	l := len(m)
	acc := make([]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayMapAny(m []int64, f func(int64) Any) []Any {
	l := len(m)
	acc := make([]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayMapBoolArray(m []int64, f func(int64) []bool) [][]bool {
	l := len(m)
	acc := make([][]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayMapStringArray(m []int64, f func(int64) []string) [][]string {
	l := len(m)
	acc := make([][]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayMapIntArray(m []int64, f func(int64) []int) [][]int {
	l := len(m)
	acc := make([][]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayMapInt64Array(m []int64, f func(int64) []int64) [][]int64 {
	l := len(m)
	acc := make([][]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayMapByteArray(m []int64, f func(int64) []byte) [][]byte {
	l := len(m)
	acc := make([][]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayMapRuneArray(m []int64, f func(int64) []rune) [][]rune {
	l := len(m)
	acc := make([][]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayMapFloat32Array(m []int64, f func(int64) []float32) [][]float32 {
	l := len(m)
	acc := make([][]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayMapFloat64Array(m []int64, f func(int64) []float64) [][]float64 {
	l := len(m)
	acc := make([][]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayMapAnyArray(m []int64, f func(int64) []Any) [][]Any {
	l := len(m)
	acc := make([][]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayMapBool(m []byte, f func(byte) bool) []bool {
	l := len(m)
	acc := make([]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayMapString(m []byte, f func(byte) string) []string {
	l := len(m)
	acc := make([]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayMapInt(m []byte, f func(byte) int) []int {
	l := len(m)
	acc := make([]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayMapInt64(m []byte, f func(byte) int64) []int64 {
	l := len(m)
	acc := make([]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayMapByte(m []byte, f func(byte) byte) []byte {
	l := len(m)
	acc := make([]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayMapRune(m []byte, f func(byte) rune) []rune {
	l := len(m)
	acc := make([]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayMapFloat32(m []byte, f func(byte) float32) []float32 {
	l := len(m)
	acc := make([]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayMapFloat64(m []byte, f func(byte) float64) []float64 {
	l := len(m)
	acc := make([]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayMapAny(m []byte, f func(byte) Any) []Any {
	l := len(m)
	acc := make([]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayMapBoolArray(m []byte, f func(byte) []bool) [][]bool {
	l := len(m)
	acc := make([][]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayMapStringArray(m []byte, f func(byte) []string) [][]string {
	l := len(m)
	acc := make([][]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayMapIntArray(m []byte, f func(byte) []int) [][]int {
	l := len(m)
	acc := make([][]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayMapInt64Array(m []byte, f func(byte) []int64) [][]int64 {
	l := len(m)
	acc := make([][]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayMapByteArray(m []byte, f func(byte) []byte) [][]byte {
	l := len(m)
	acc := make([][]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayMapRuneArray(m []byte, f func(byte) []rune) [][]rune {
	l := len(m)
	acc := make([][]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayMapFloat32Array(m []byte, f func(byte) []float32) [][]float32 {
	l := len(m)
	acc := make([][]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayMapFloat64Array(m []byte, f func(byte) []float64) [][]float64 {
	l := len(m)
	acc := make([][]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayMapAnyArray(m []byte, f func(byte) []Any) [][]Any {
	l := len(m)
	acc := make([][]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayMapBool(m []rune, f func(rune) bool) []bool {
	l := len(m)
	acc := make([]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayMapString(m []rune, f func(rune) string) []string {
	l := len(m)
	acc := make([]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayMapInt(m []rune, f func(rune) int) []int {
	l := len(m)
	acc := make([]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayMapInt64(m []rune, f func(rune) int64) []int64 {
	l := len(m)
	acc := make([]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayMapByte(m []rune, f func(rune) byte) []byte {
	l := len(m)
	acc := make([]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayMapRune(m []rune, f func(rune) rune) []rune {
	l := len(m)
	acc := make([]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayMapFloat32(m []rune, f func(rune) float32) []float32 {
	l := len(m)
	acc := make([]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayMapFloat64(m []rune, f func(rune) float64) []float64 {
	l := len(m)
	acc := make([]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayMapAny(m []rune, f func(rune) Any) []Any {
	l := len(m)
	acc := make([]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayMapBoolArray(m []rune, f func(rune) []bool) [][]bool {
	l := len(m)
	acc := make([][]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayMapStringArray(m []rune, f func(rune) []string) [][]string {
	l := len(m)
	acc := make([][]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayMapIntArray(m []rune, f func(rune) []int) [][]int {
	l := len(m)
	acc := make([][]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayMapInt64Array(m []rune, f func(rune) []int64) [][]int64 {
	l := len(m)
	acc := make([][]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayMapByteArray(m []rune, f func(rune) []byte) [][]byte {
	l := len(m)
	acc := make([][]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayMapRuneArray(m []rune, f func(rune) []rune) [][]rune {
	l := len(m)
	acc := make([][]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayMapFloat32Array(m []rune, f func(rune) []float32) [][]float32 {
	l := len(m)
	acc := make([][]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayMapFloat64Array(m []rune, f func(rune) []float64) [][]float64 {
	l := len(m)
	acc := make([][]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayMapAnyArray(m []rune, f func(rune) []Any) [][]Any {
	l := len(m)
	acc := make([][]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayMapBool(m []float32, f func(float32) bool) []bool {
	l := len(m)
	acc := make([]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayMapString(m []float32, f func(float32) string) []string {
	l := len(m)
	acc := make([]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayMapInt(m []float32, f func(float32) int) []int {
	l := len(m)
	acc := make([]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayMapInt64(m []float32, f func(float32) int64) []int64 {
	l := len(m)
	acc := make([]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayMapByte(m []float32, f func(float32) byte) []byte {
	l := len(m)
	acc := make([]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayMapRune(m []float32, f func(float32) rune) []rune {
	l := len(m)
	acc := make([]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayMapFloat32(m []float32, f func(float32) float32) []float32 {
	l := len(m)
	acc := make([]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayMapFloat64(m []float32, f func(float32) float64) []float64 {
	l := len(m)
	acc := make([]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayMapAny(m []float32, f func(float32) Any) []Any {
	l := len(m)
	acc := make([]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayMapBoolArray(m []float32, f func(float32) []bool) [][]bool {
	l := len(m)
	acc := make([][]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayMapStringArray(m []float32, f func(float32) []string) [][]string {
	l := len(m)
	acc := make([][]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayMapIntArray(m []float32, f func(float32) []int) [][]int {
	l := len(m)
	acc := make([][]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayMapInt64Array(m []float32, f func(float32) []int64) [][]int64 {
	l := len(m)
	acc := make([][]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayMapByteArray(m []float32, f func(float32) []byte) [][]byte {
	l := len(m)
	acc := make([][]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayMapRuneArray(m []float32, f func(float32) []rune) [][]rune {
	l := len(m)
	acc := make([][]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayMapFloat32Array(m []float32, f func(float32) []float32) [][]float32 {
	l := len(m)
	acc := make([][]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayMapFloat64Array(m []float32, f func(float32) []float64) [][]float64 {
	l := len(m)
	acc := make([][]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayMapAnyArray(m []float32, f func(float32) []Any) [][]Any {
	l := len(m)
	acc := make([][]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayMapBool(m []float64, f func(float64) bool) []bool {
	l := len(m)
	acc := make([]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayMapString(m []float64, f func(float64) string) []string {
	l := len(m)
	acc := make([]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayMapInt(m []float64, f func(float64) int) []int {
	l := len(m)
	acc := make([]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayMapInt64(m []float64, f func(float64) int64) []int64 {
	l := len(m)
	acc := make([]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayMapByte(m []float64, f func(float64) byte) []byte {
	l := len(m)
	acc := make([]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayMapRune(m []float64, f func(float64) rune) []rune {
	l := len(m)
	acc := make([]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayMapFloat32(m []float64, f func(float64) float32) []float32 {
	l := len(m)
	acc := make([]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayMapFloat64(m []float64, f func(float64) float64) []float64 {
	l := len(m)
	acc := make([]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayMapAny(m []float64, f func(float64) Any) []Any {
	l := len(m)
	acc := make([]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayMapBoolArray(m []float64, f func(float64) []bool) [][]bool {
	l := len(m)
	acc := make([][]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayMapStringArray(m []float64, f func(float64) []string) [][]string {
	l := len(m)
	acc := make([][]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayMapIntArray(m []float64, f func(float64) []int) [][]int {
	l := len(m)
	acc := make([][]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayMapInt64Array(m []float64, f func(float64) []int64) [][]int64 {
	l := len(m)
	acc := make([][]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayMapByteArray(m []float64, f func(float64) []byte) [][]byte {
	l := len(m)
	acc := make([][]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayMapRuneArray(m []float64, f func(float64) []rune) [][]rune {
	l := len(m)
	acc := make([][]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayMapFloat32Array(m []float64, f func(float64) []float32) [][]float32 {
	l := len(m)
	acc := make([][]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayMapFloat64Array(m []float64, f func(float64) []float64) [][]float64 {
	l := len(m)
	acc := make([][]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayMapAnyArray(m []float64, f func(float64) []Any) [][]Any {
	l := len(m)
	acc := make([][]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayMapBool(m []Any, f func(Any) bool) []bool {
	l := len(m)
	acc := make([]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayMapString(m []Any, f func(Any) string) []string {
	l := len(m)
	acc := make([]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayMapInt(m []Any, f func(Any) int) []int {
	l := len(m)
	acc := make([]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayMapInt64(m []Any, f func(Any) int64) []int64 {
	l := len(m)
	acc := make([]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayMapByte(m []Any, f func(Any) byte) []byte {
	l := len(m)
	acc := make([]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayMapRune(m []Any, f func(Any) rune) []rune {
	l := len(m)
	acc := make([]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayMapFloat32(m []Any, f func(Any) float32) []float32 {
	l := len(m)
	acc := make([]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayMapFloat64(m []Any, f func(Any) float64) []float64 {
	l := len(m)
	acc := make([]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayMapAny(m []Any, f func(Any) Any) []Any {
	l := len(m)
	acc := make([]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayMapBoolArray(m []Any, f func(Any) []bool) [][]bool {
	l := len(m)
	acc := make([][]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayMapStringArray(m []Any, f func(Any) []string) [][]string {
	l := len(m)
	acc := make([][]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayMapIntArray(m []Any, f func(Any) []int) [][]int {
	l := len(m)
	acc := make([][]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayMapInt64Array(m []Any, f func(Any) []int64) [][]int64 {
	l := len(m)
	acc := make([][]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayMapByteArray(m []Any, f func(Any) []byte) [][]byte {
	l := len(m)
	acc := make([][]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayMapRuneArray(m []Any, f func(Any) []rune) [][]rune {
	l := len(m)
	acc := make([][]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayMapFloat32Array(m []Any, f func(Any) []float32) [][]float32 {
	l := len(m)
	acc := make([][]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayMapFloat64Array(m []Any, f func(Any) []float64) [][]float64 {
	l := len(m)
	acc := make([][]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayMapAnyArray(m []Any, f func(Any) []Any) [][]Any {
	l := len(m)
	acc := make([][]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayArrayMapBool(m [][]bool, f func([]bool) bool) []bool {
	l := len(m)
	acc := make([]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayArrayMapString(m [][]bool, f func([]bool) string) []string {
	l := len(m)
	acc := make([]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayArrayMapInt(m [][]bool, f func([]bool) int) []int {
	l := len(m)
	acc := make([]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayArrayMapInt64(m [][]bool, f func([]bool) int64) []int64 {
	l := len(m)
	acc := make([]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayArrayMapByte(m [][]bool, f func([]bool) byte) []byte {
	l := len(m)
	acc := make([]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayArrayMapRune(m [][]bool, f func([]bool) rune) []rune {
	l := len(m)
	acc := make([]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayArrayMapFloat32(m [][]bool, f func([]bool) float32) []float32 {
	l := len(m)
	acc := make([]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayArrayMapFloat64(m [][]bool, f func([]bool) float64) []float64 {
	l := len(m)
	acc := make([]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayArrayMapAny(m [][]bool, f func([]bool) Any) []Any {
	l := len(m)
	acc := make([]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayArrayMapBoolArray(m [][]bool, f func([]bool) []bool) [][]bool {
	l := len(m)
	acc := make([][]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayArrayMapStringArray(m [][]bool, f func([]bool) []string) [][]string {
	l := len(m)
	acc := make([][]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayArrayMapIntArray(m [][]bool, f func([]bool) []int) [][]int {
	l := len(m)
	acc := make([][]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayArrayMapInt64Array(m [][]bool, f func([]bool) []int64) [][]int64 {
	l := len(m)
	acc := make([][]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayArrayMapByteArray(m [][]bool, f func([]bool) []byte) [][]byte {
	l := len(m)
	acc := make([][]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayArrayMapRuneArray(m [][]bool, f func([]bool) []rune) [][]rune {
	l := len(m)
	acc := make([][]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayArrayMapFloat32Array(m [][]bool, f func([]bool) []float32) [][]float32 {
	l := len(m)
	acc := make([][]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayArrayMapFloat64Array(m [][]bool, f func([]bool) []float64) [][]float64 {
	l := len(m)
	acc := make([][]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func BoolArrayArrayMapAnyArray(m [][]bool, f func([]bool) []Any) [][]Any {
	l := len(m)
	acc := make([][]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayArrayMapBool(m [][]string, f func([]string) bool) []bool {
	l := len(m)
	acc := make([]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayArrayMapString(m [][]string, f func([]string) string) []string {
	l := len(m)
	acc := make([]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayArrayMapInt(m [][]string, f func([]string) int) []int {
	l := len(m)
	acc := make([]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayArrayMapInt64(m [][]string, f func([]string) int64) []int64 {
	l := len(m)
	acc := make([]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayArrayMapByte(m [][]string, f func([]string) byte) []byte {
	l := len(m)
	acc := make([]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayArrayMapRune(m [][]string, f func([]string) rune) []rune {
	l := len(m)
	acc := make([]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayArrayMapFloat32(m [][]string, f func([]string) float32) []float32 {
	l := len(m)
	acc := make([]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayArrayMapFloat64(m [][]string, f func([]string) float64) []float64 {
	l := len(m)
	acc := make([]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayArrayMapAny(m [][]string, f func([]string) Any) []Any {
	l := len(m)
	acc := make([]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayArrayMapBoolArray(m [][]string, f func([]string) []bool) [][]bool {
	l := len(m)
	acc := make([][]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayArrayMapStringArray(m [][]string, f func([]string) []string) [][]string {
	l := len(m)
	acc := make([][]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayArrayMapIntArray(m [][]string, f func([]string) []int) [][]int {
	l := len(m)
	acc := make([][]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayArrayMapInt64Array(m [][]string, f func([]string) []int64) [][]int64 {
	l := len(m)
	acc := make([][]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayArrayMapByteArray(m [][]string, f func([]string) []byte) [][]byte {
	l := len(m)
	acc := make([][]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayArrayMapRuneArray(m [][]string, f func([]string) []rune) [][]rune {
	l := len(m)
	acc := make([][]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayArrayMapFloat32Array(m [][]string, f func([]string) []float32) [][]float32 {
	l := len(m)
	acc := make([][]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayArrayMapFloat64Array(m [][]string, f func([]string) []float64) [][]float64 {
	l := len(m)
	acc := make([][]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func StringArrayArrayMapAnyArray(m [][]string, f func([]string) []Any) [][]Any {
	l := len(m)
	acc := make([][]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayArrayMapBool(m [][]int, f func([]int) bool) []bool {
	l := len(m)
	acc := make([]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayArrayMapString(m [][]int, f func([]int) string) []string {
	l := len(m)
	acc := make([]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayArrayMapInt(m [][]int, f func([]int) int) []int {
	l := len(m)
	acc := make([]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayArrayMapInt64(m [][]int, f func([]int) int64) []int64 {
	l := len(m)
	acc := make([]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayArrayMapByte(m [][]int, f func([]int) byte) []byte {
	l := len(m)
	acc := make([]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayArrayMapRune(m [][]int, f func([]int) rune) []rune {
	l := len(m)
	acc := make([]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayArrayMapFloat32(m [][]int, f func([]int) float32) []float32 {
	l := len(m)
	acc := make([]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayArrayMapFloat64(m [][]int, f func([]int) float64) []float64 {
	l := len(m)
	acc := make([]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayArrayMapAny(m [][]int, f func([]int) Any) []Any {
	l := len(m)
	acc := make([]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayArrayMapBoolArray(m [][]int, f func([]int) []bool) [][]bool {
	l := len(m)
	acc := make([][]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayArrayMapStringArray(m [][]int, f func([]int) []string) [][]string {
	l := len(m)
	acc := make([][]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayArrayMapIntArray(m [][]int, f func([]int) []int) [][]int {
	l := len(m)
	acc := make([][]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayArrayMapInt64Array(m [][]int, f func([]int) []int64) [][]int64 {
	l := len(m)
	acc := make([][]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayArrayMapByteArray(m [][]int, f func([]int) []byte) [][]byte {
	l := len(m)
	acc := make([][]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayArrayMapRuneArray(m [][]int, f func([]int) []rune) [][]rune {
	l := len(m)
	acc := make([][]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayArrayMapFloat32Array(m [][]int, f func([]int) []float32) [][]float32 {
	l := len(m)
	acc := make([][]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayArrayMapFloat64Array(m [][]int, f func([]int) []float64) [][]float64 {
	l := len(m)
	acc := make([][]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func IntArrayArrayMapAnyArray(m [][]int, f func([]int) []Any) [][]Any {
	l := len(m)
	acc := make([][]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayArrayMapBool(m [][]int64, f func([]int64) bool) []bool {
	l := len(m)
	acc := make([]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayArrayMapString(m [][]int64, f func([]int64) string) []string {
	l := len(m)
	acc := make([]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayArrayMapInt(m [][]int64, f func([]int64) int) []int {
	l := len(m)
	acc := make([]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayArrayMapInt64(m [][]int64, f func([]int64) int64) []int64 {
	l := len(m)
	acc := make([]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayArrayMapByte(m [][]int64, f func([]int64) byte) []byte {
	l := len(m)
	acc := make([]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayArrayMapRune(m [][]int64, f func([]int64) rune) []rune {
	l := len(m)
	acc := make([]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayArrayMapFloat32(m [][]int64, f func([]int64) float32) []float32 {
	l := len(m)
	acc := make([]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayArrayMapFloat64(m [][]int64, f func([]int64) float64) []float64 {
	l := len(m)
	acc := make([]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayArrayMapAny(m [][]int64, f func([]int64) Any) []Any {
	l := len(m)
	acc := make([]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayArrayMapBoolArray(m [][]int64, f func([]int64) []bool) [][]bool {
	l := len(m)
	acc := make([][]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayArrayMapStringArray(m [][]int64, f func([]int64) []string) [][]string {
	l := len(m)
	acc := make([][]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayArrayMapIntArray(m [][]int64, f func([]int64) []int) [][]int {
	l := len(m)
	acc := make([][]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayArrayMapInt64Array(m [][]int64, f func([]int64) []int64) [][]int64 {
	l := len(m)
	acc := make([][]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayArrayMapByteArray(m [][]int64, f func([]int64) []byte) [][]byte {
	l := len(m)
	acc := make([][]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayArrayMapRuneArray(m [][]int64, f func([]int64) []rune) [][]rune {
	l := len(m)
	acc := make([][]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayArrayMapFloat32Array(m [][]int64, f func([]int64) []float32) [][]float32 {
	l := len(m)
	acc := make([][]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayArrayMapFloat64Array(m [][]int64, f func([]int64) []float64) [][]float64 {
	l := len(m)
	acc := make([][]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Int64ArrayArrayMapAnyArray(m [][]int64, f func([]int64) []Any) [][]Any {
	l := len(m)
	acc := make([][]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayArrayMapBool(m [][]byte, f func([]byte) bool) []bool {
	l := len(m)
	acc := make([]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayArrayMapString(m [][]byte, f func([]byte) string) []string {
	l := len(m)
	acc := make([]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayArrayMapInt(m [][]byte, f func([]byte) int) []int {
	l := len(m)
	acc := make([]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayArrayMapInt64(m [][]byte, f func([]byte) int64) []int64 {
	l := len(m)
	acc := make([]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayArrayMapByte(m [][]byte, f func([]byte) byte) []byte {
	l := len(m)
	acc := make([]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayArrayMapRune(m [][]byte, f func([]byte) rune) []rune {
	l := len(m)
	acc := make([]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayArrayMapFloat32(m [][]byte, f func([]byte) float32) []float32 {
	l := len(m)
	acc := make([]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayArrayMapFloat64(m [][]byte, f func([]byte) float64) []float64 {
	l := len(m)
	acc := make([]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayArrayMapAny(m [][]byte, f func([]byte) Any) []Any {
	l := len(m)
	acc := make([]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayArrayMapBoolArray(m [][]byte, f func([]byte) []bool) [][]bool {
	l := len(m)
	acc := make([][]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayArrayMapStringArray(m [][]byte, f func([]byte) []string) [][]string {
	l := len(m)
	acc := make([][]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayArrayMapIntArray(m [][]byte, f func([]byte) []int) [][]int {
	l := len(m)
	acc := make([][]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayArrayMapInt64Array(m [][]byte, f func([]byte) []int64) [][]int64 {
	l := len(m)
	acc := make([][]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayArrayMapByteArray(m [][]byte, f func([]byte) []byte) [][]byte {
	l := len(m)
	acc := make([][]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayArrayMapRuneArray(m [][]byte, f func([]byte) []rune) [][]rune {
	l := len(m)
	acc := make([][]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayArrayMapFloat32Array(m [][]byte, f func([]byte) []float32) [][]float32 {
	l := len(m)
	acc := make([][]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayArrayMapFloat64Array(m [][]byte, f func([]byte) []float64) [][]float64 {
	l := len(m)
	acc := make([][]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func ByteArrayArrayMapAnyArray(m [][]byte, f func([]byte) []Any) [][]Any {
	l := len(m)
	acc := make([][]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayArrayMapBool(m [][]rune, f func([]rune) bool) []bool {
	l := len(m)
	acc := make([]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayArrayMapString(m [][]rune, f func([]rune) string) []string {
	l := len(m)
	acc := make([]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayArrayMapInt(m [][]rune, f func([]rune) int) []int {
	l := len(m)
	acc := make([]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayArrayMapInt64(m [][]rune, f func([]rune) int64) []int64 {
	l := len(m)
	acc := make([]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayArrayMapByte(m [][]rune, f func([]rune) byte) []byte {
	l := len(m)
	acc := make([]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayArrayMapRune(m [][]rune, f func([]rune) rune) []rune {
	l := len(m)
	acc := make([]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayArrayMapFloat32(m [][]rune, f func([]rune) float32) []float32 {
	l := len(m)
	acc := make([]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayArrayMapFloat64(m [][]rune, f func([]rune) float64) []float64 {
	l := len(m)
	acc := make([]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayArrayMapAny(m [][]rune, f func([]rune) Any) []Any {
	l := len(m)
	acc := make([]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayArrayMapBoolArray(m [][]rune, f func([]rune) []bool) [][]bool {
	l := len(m)
	acc := make([][]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayArrayMapStringArray(m [][]rune, f func([]rune) []string) [][]string {
	l := len(m)
	acc := make([][]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayArrayMapIntArray(m [][]rune, f func([]rune) []int) [][]int {
	l := len(m)
	acc := make([][]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayArrayMapInt64Array(m [][]rune, f func([]rune) []int64) [][]int64 {
	l := len(m)
	acc := make([][]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayArrayMapByteArray(m [][]rune, f func([]rune) []byte) [][]byte {
	l := len(m)
	acc := make([][]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayArrayMapRuneArray(m [][]rune, f func([]rune) []rune) [][]rune {
	l := len(m)
	acc := make([][]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayArrayMapFloat32Array(m [][]rune, f func([]rune) []float32) [][]float32 {
	l := len(m)
	acc := make([][]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayArrayMapFloat64Array(m [][]rune, f func([]rune) []float64) [][]float64 {
	l := len(m)
	acc := make([][]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func RuneArrayArrayMapAnyArray(m [][]rune, f func([]rune) []Any) [][]Any {
	l := len(m)
	acc := make([][]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayArrayMapBool(m [][]float32, f func([]float32) bool) []bool {
	l := len(m)
	acc := make([]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayArrayMapString(m [][]float32, f func([]float32) string) []string {
	l := len(m)
	acc := make([]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayArrayMapInt(m [][]float32, f func([]float32) int) []int {
	l := len(m)
	acc := make([]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayArrayMapInt64(m [][]float32, f func([]float32) int64) []int64 {
	l := len(m)
	acc := make([]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayArrayMapByte(m [][]float32, f func([]float32) byte) []byte {
	l := len(m)
	acc := make([]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayArrayMapRune(m [][]float32, f func([]float32) rune) []rune {
	l := len(m)
	acc := make([]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayArrayMapFloat32(m [][]float32, f func([]float32) float32) []float32 {
	l := len(m)
	acc := make([]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayArrayMapFloat64(m [][]float32, f func([]float32) float64) []float64 {
	l := len(m)
	acc := make([]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayArrayMapAny(m [][]float32, f func([]float32) Any) []Any {
	l := len(m)
	acc := make([]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayArrayMapBoolArray(m [][]float32, f func([]float32) []bool) [][]bool {
	l := len(m)
	acc := make([][]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayArrayMapStringArray(m [][]float32, f func([]float32) []string) [][]string {
	l := len(m)
	acc := make([][]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayArrayMapIntArray(m [][]float32, f func([]float32) []int) [][]int {
	l := len(m)
	acc := make([][]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayArrayMapInt64Array(m [][]float32, f func([]float32) []int64) [][]int64 {
	l := len(m)
	acc := make([][]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayArrayMapByteArray(m [][]float32, f func([]float32) []byte) [][]byte {
	l := len(m)
	acc := make([][]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayArrayMapRuneArray(m [][]float32, f func([]float32) []rune) [][]rune {
	l := len(m)
	acc := make([][]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayArrayMapFloat32Array(m [][]float32, f func([]float32) []float32) [][]float32 {
	l := len(m)
	acc := make([][]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayArrayMapFloat64Array(m [][]float32, f func([]float32) []float64) [][]float64 {
	l := len(m)
	acc := make([][]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float32ArrayArrayMapAnyArray(m [][]float32, f func([]float32) []Any) [][]Any {
	l := len(m)
	acc := make([][]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayArrayMapBool(m [][]float64, f func([]float64) bool) []bool {
	l := len(m)
	acc := make([]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayArrayMapString(m [][]float64, f func([]float64) string) []string {
	l := len(m)
	acc := make([]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayArrayMapInt(m [][]float64, f func([]float64) int) []int {
	l := len(m)
	acc := make([]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayArrayMapInt64(m [][]float64, f func([]float64) int64) []int64 {
	l := len(m)
	acc := make([]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayArrayMapByte(m [][]float64, f func([]float64) byte) []byte {
	l := len(m)
	acc := make([]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayArrayMapRune(m [][]float64, f func([]float64) rune) []rune {
	l := len(m)
	acc := make([]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayArrayMapFloat32(m [][]float64, f func([]float64) float32) []float32 {
	l := len(m)
	acc := make([]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayArrayMapFloat64(m [][]float64, f func([]float64) float64) []float64 {
	l := len(m)
	acc := make([]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayArrayMapAny(m [][]float64, f func([]float64) Any) []Any {
	l := len(m)
	acc := make([]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayArrayMapBoolArray(m [][]float64, f func([]float64) []bool) [][]bool {
	l := len(m)
	acc := make([][]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayArrayMapStringArray(m [][]float64, f func([]float64) []string) [][]string {
	l := len(m)
	acc := make([][]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayArrayMapIntArray(m [][]float64, f func([]float64) []int) [][]int {
	l := len(m)
	acc := make([][]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayArrayMapInt64Array(m [][]float64, f func([]float64) []int64) [][]int64 {
	l := len(m)
	acc := make([][]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayArrayMapByteArray(m [][]float64, f func([]float64) []byte) [][]byte {
	l := len(m)
	acc := make([][]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayArrayMapRuneArray(m [][]float64, f func([]float64) []rune) [][]rune {
	l := len(m)
	acc := make([][]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayArrayMapFloat32Array(m [][]float64, f func([]float64) []float32) [][]float32 {
	l := len(m)
	acc := make([][]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayArrayMapFloat64Array(m [][]float64, f func([]float64) []float64) [][]float64 {
	l := len(m)
	acc := make([][]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func Float64ArrayArrayMapAnyArray(m [][]float64, f func([]float64) []Any) [][]Any {
	l := len(m)
	acc := make([][]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayArrayMapBool(m [][]Any, f func([]Any) bool) []bool {
	l := len(m)
	acc := make([]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayArrayMapString(m [][]Any, f func([]Any) string) []string {
	l := len(m)
	acc := make([]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayArrayMapInt(m [][]Any, f func([]Any) int) []int {
	l := len(m)
	acc := make([]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayArrayMapInt64(m [][]Any, f func([]Any) int64) []int64 {
	l := len(m)
	acc := make([]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayArrayMapByte(m [][]Any, f func([]Any) byte) []byte {
	l := len(m)
	acc := make([]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayArrayMapRune(m [][]Any, f func([]Any) rune) []rune {
	l := len(m)
	acc := make([]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayArrayMapFloat32(m [][]Any, f func([]Any) float32) []float32 {
	l := len(m)
	acc := make([]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayArrayMapFloat64(m [][]Any, f func([]Any) float64) []float64 {
	l := len(m)
	acc := make([]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayArrayMapAny(m [][]Any, f func([]Any) Any) []Any {
	l := len(m)
	acc := make([]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayArrayMapBoolArray(m [][]Any, f func([]Any) []bool) [][]bool {
	l := len(m)
	acc := make([][]bool, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayArrayMapStringArray(m [][]Any, f func([]Any) []string) [][]string {
	l := len(m)
	acc := make([][]string, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayArrayMapIntArray(m [][]Any, f func([]Any) []int) [][]int {
	l := len(m)
	acc := make([][]int, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayArrayMapInt64Array(m [][]Any, f func([]Any) []int64) [][]int64 {
	l := len(m)
	acc := make([][]int64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayArrayMapByteArray(m [][]Any, f func([]Any) []byte) [][]byte {
	l := len(m)
	acc := make([][]byte, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayArrayMapRuneArray(m [][]Any, f func([]Any) []rune) [][]rune {
	l := len(m)
	acc := make([][]rune, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayArrayMapFloat32Array(m [][]Any, f func([]Any) []float32) [][]float32 {
	l := len(m)
	acc := make([][]float32, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayArrayMapFloat64Array(m [][]Any, f func([]Any) []float64) [][]float64 {
	l := len(m)
	acc := make([][]float64, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
func AnyArrayArrayMapAnyArray(m [][]Any, f func([]Any) []Any) [][]Any {
	l := len(m)
	acc := make([][]Any, l)
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
