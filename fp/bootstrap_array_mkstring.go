// bootstrap_array_mkstring.go
// DO NOT EDIT THIS FILE WAS GENERATED AUTOMATICALLY BY https://github.com/zx80live/gofp-bootstrap

package fp

import "fmt"

func BoolArrayMkString(a []bool, start, sep, end string) string {
	content := ""
	for _, e := range a {
		content = fmt.Sprintf("%v%v%v", content, BoolToString(e), sep)
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func StringArrayMkString(a []string, start, sep, end string) string {
	content := ""
	for _, e := range a {
		content = fmt.Sprintf("%v%v%v", content, StringToString(e), sep)
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func IntArrayMkString(a []int, start, sep, end string) string {
	content := ""
	for _, e := range a {
		content = fmt.Sprintf("%v%v%v", content, IntToString(e), sep)
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func Int8ArrayMkString(a []int8, start, sep, end string) string {
	content := ""
	for _, e := range a {
		content = fmt.Sprintf("%v%v%v", content, Int8ToString(e), sep)
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func Int16ArrayMkString(a []int16, start, sep, end string) string {
	content := ""
	for _, e := range a {
		content = fmt.Sprintf("%v%v%v", content, Int16ToString(e), sep)
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func Int32ArrayMkString(a []int32, start, sep, end string) string {
	content := ""
	for _, e := range a {
		content = fmt.Sprintf("%v%v%v", content, Int32ToString(e), sep)
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func Int64ArrayMkString(a []int64, start, sep, end string) string {
	content := ""
	for _, e := range a {
		content = fmt.Sprintf("%v%v%v", content, Int64ToString(e), sep)
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func UintArrayMkString(a []uint, start, sep, end string) string {
	content := ""
	for _, e := range a {
		content = fmt.Sprintf("%v%v%v", content, UintToString(e), sep)
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func Uint8ArrayMkString(a []uint8, start, sep, end string) string {
	content := ""
	for _, e := range a {
		content = fmt.Sprintf("%v%v%v", content, Uint8ToString(e), sep)
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func Uint16ArrayMkString(a []uint16, start, sep, end string) string {
	content := ""
	for _, e := range a {
		content = fmt.Sprintf("%v%v%v", content, Uint16ToString(e), sep)
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func Uint32ArrayMkString(a []uint32, start, sep, end string) string {
	content := ""
	for _, e := range a {
		content = fmt.Sprintf("%v%v%v", content, Uint32ToString(e), sep)
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func Uint64ArrayMkString(a []uint64, start, sep, end string) string {
	content := ""
	for _, e := range a {
		content = fmt.Sprintf("%v%v%v", content, Uint64ToString(e), sep)
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func UintptrArrayMkString(a []uintptr, start, sep, end string) string {
	content := ""
	for _, e := range a {
		content = fmt.Sprintf("%v%v%v", content, UintptrToString(e), sep)
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func ByteArrayMkString(a []byte, start, sep, end string) string {
	content := ""
	for _, e := range a {
		content = fmt.Sprintf("%v%v%v", content, ByteToString(e), sep)
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func RuneArrayMkString(a []rune, start, sep, end string) string {
	content := ""
	for _, e := range a {
		content = fmt.Sprintf("%v%v%v", content, RuneToString(e), sep)
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func Float32ArrayMkString(a []float32, start, sep, end string) string {
	content := ""
	for _, e := range a {
		content = fmt.Sprintf("%v%v%v", content, Float32ToString(e), sep)
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func Float64ArrayMkString(a []float64, start, sep, end string) string {
	content := ""
	for _, e := range a {
		content = fmt.Sprintf("%v%v%v", content, Float64ToString(e), sep)
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func Complex64ArrayMkString(a []complex64, start, sep, end string) string {
	content := ""
	for _, e := range a {
		content = fmt.Sprintf("%v%v%v", content, Complex64ToString(e), sep)
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func Complex128ArrayMkString(a []complex128, start, sep, end string) string {
	content := ""
	for _, e := range a {
		content = fmt.Sprintf("%v%v%v", content, Complex128ToString(e), sep)
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func AnyArrayMkString(a []Any, start, sep, end string) string {
	content := ""
	for _, e := range a {
		content = fmt.Sprintf("%v%v%v", content, AnyToString(e), sep)
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func BoolArrayArrayMkString(a [][]bool, start, sep, end string) string {
	content := ""
	for _, e := range a {
		content = fmt.Sprintf("%v%v%v", content, BoolArrayToString(e), sep)
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func StringArrayArrayMkString(a [][]string, start, sep, end string) string {
	content := ""
	for _, e := range a {
		content = fmt.Sprintf("%v%v%v", content, StringArrayToString(e), sep)
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func IntArrayArrayMkString(a [][]int, start, sep, end string) string {
	content := ""
	for _, e := range a {
		content = fmt.Sprintf("%v%v%v", content, IntArrayToString(e), sep)
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func Int8ArrayArrayMkString(a [][]int8, start, sep, end string) string {
	content := ""
	for _, e := range a {
		content = fmt.Sprintf("%v%v%v", content, Int8ArrayToString(e), sep)
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func Int16ArrayArrayMkString(a [][]int16, start, sep, end string) string {
	content := ""
	for _, e := range a {
		content = fmt.Sprintf("%v%v%v", content, Int16ArrayToString(e), sep)
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func Int32ArrayArrayMkString(a [][]int32, start, sep, end string) string {
	content := ""
	for _, e := range a {
		content = fmt.Sprintf("%v%v%v", content, Int32ArrayToString(e), sep)
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func Int64ArrayArrayMkString(a [][]int64, start, sep, end string) string {
	content := ""
	for _, e := range a {
		content = fmt.Sprintf("%v%v%v", content, Int64ArrayToString(e), sep)
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func UintArrayArrayMkString(a [][]uint, start, sep, end string) string {
	content := ""
	for _, e := range a {
		content = fmt.Sprintf("%v%v%v", content, UintArrayToString(e), sep)
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func Uint8ArrayArrayMkString(a [][]uint8, start, sep, end string) string {
	content := ""
	for _, e := range a {
		content = fmt.Sprintf("%v%v%v", content, Uint8ArrayToString(e), sep)
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func Uint16ArrayArrayMkString(a [][]uint16, start, sep, end string) string {
	content := ""
	for _, e := range a {
		content = fmt.Sprintf("%v%v%v", content, Uint16ArrayToString(e), sep)
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func Uint32ArrayArrayMkString(a [][]uint32, start, sep, end string) string {
	content := ""
	for _, e := range a {
		content = fmt.Sprintf("%v%v%v", content, Uint32ArrayToString(e), sep)
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func Uint64ArrayArrayMkString(a [][]uint64, start, sep, end string) string {
	content := ""
	for _, e := range a {
		content = fmt.Sprintf("%v%v%v", content, Uint64ArrayToString(e), sep)
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func UintptrArrayArrayMkString(a [][]uintptr, start, sep, end string) string {
	content := ""
	for _, e := range a {
		content = fmt.Sprintf("%v%v%v", content, UintptrArrayToString(e), sep)
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func ByteArrayArrayMkString(a [][]byte, start, sep, end string) string {
	content := ""
	for _, e := range a {
		content = fmt.Sprintf("%v%v%v", content, ByteArrayToString(e), sep)
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func RuneArrayArrayMkString(a [][]rune, start, sep, end string) string {
	content := ""
	for _, e := range a {
		content = fmt.Sprintf("%v%v%v", content, RuneArrayToString(e), sep)
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func Float32ArrayArrayMkString(a [][]float32, start, sep, end string) string {
	content := ""
	for _, e := range a {
		content = fmt.Sprintf("%v%v%v", content, Float32ArrayToString(e), sep)
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func Float64ArrayArrayMkString(a [][]float64, start, sep, end string) string {
	content := ""
	for _, e := range a {
		content = fmt.Sprintf("%v%v%v", content, Float64ArrayToString(e), sep)
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func Complex64ArrayArrayMkString(a [][]complex64, start, sep, end string) string {
	content := ""
	for _, e := range a {
		content = fmt.Sprintf("%v%v%v", content, Complex64ArrayToString(e), sep)
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func Complex128ArrayArrayMkString(a [][]complex128, start, sep, end string) string {
	content := ""
	for _, e := range a {
		content = fmt.Sprintf("%v%v%v", content, Complex128ArrayToString(e), sep)
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func AnyArrayArrayMkString(a [][]Any, start, sep, end string) string {
	content := ""
	for _, e := range a {
		content = fmt.Sprintf("%v%v%v", content, AnyArrayToString(e), sep)
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func BoolOptionArrayMkString(a []BoolOption, start, sep, end string) string {
	content := ""
	for _, e := range a {
		content = fmt.Sprintf("%v%v%v", content, BoolOptionToString(e), sep)
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func StringOptionArrayMkString(a []StringOption, start, sep, end string) string {
	content := ""
	for _, e := range a {
		content = fmt.Sprintf("%v%v%v", content, StringOptionToString(e), sep)
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func IntOptionArrayMkString(a []IntOption, start, sep, end string) string {
	content := ""
	for _, e := range a {
		content = fmt.Sprintf("%v%v%v", content, IntOptionToString(e), sep)
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func Int8OptionArrayMkString(a []Int8Option, start, sep, end string) string {
	content := ""
	for _, e := range a {
		content = fmt.Sprintf("%v%v%v", content, Int8OptionToString(e), sep)
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func Int16OptionArrayMkString(a []Int16Option, start, sep, end string) string {
	content := ""
	for _, e := range a {
		content = fmt.Sprintf("%v%v%v", content, Int16OptionToString(e), sep)
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func Int32OptionArrayMkString(a []Int32Option, start, sep, end string) string {
	content := ""
	for _, e := range a {
		content = fmt.Sprintf("%v%v%v", content, Int32OptionToString(e), sep)
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func Int64OptionArrayMkString(a []Int64Option, start, sep, end string) string {
	content := ""
	for _, e := range a {
		content = fmt.Sprintf("%v%v%v", content, Int64OptionToString(e), sep)
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func UintOptionArrayMkString(a []UintOption, start, sep, end string) string {
	content := ""
	for _, e := range a {
		content = fmt.Sprintf("%v%v%v", content, UintOptionToString(e), sep)
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func Uint8OptionArrayMkString(a []Uint8Option, start, sep, end string) string {
	content := ""
	for _, e := range a {
		content = fmt.Sprintf("%v%v%v", content, Uint8OptionToString(e), sep)
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func Uint16OptionArrayMkString(a []Uint16Option, start, sep, end string) string {
	content := ""
	for _, e := range a {
		content = fmt.Sprintf("%v%v%v", content, Uint16OptionToString(e), sep)
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func Uint32OptionArrayMkString(a []Uint32Option, start, sep, end string) string {
	content := ""
	for _, e := range a {
		content = fmt.Sprintf("%v%v%v", content, Uint32OptionToString(e), sep)
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func Uint64OptionArrayMkString(a []Uint64Option, start, sep, end string) string {
	content := ""
	for _, e := range a {
		content = fmt.Sprintf("%v%v%v", content, Uint64OptionToString(e), sep)
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func UintptrOptionArrayMkString(a []UintptrOption, start, sep, end string) string {
	content := ""
	for _, e := range a {
		content = fmt.Sprintf("%v%v%v", content, UintptrOptionToString(e), sep)
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func ByteOptionArrayMkString(a []ByteOption, start, sep, end string) string {
	content := ""
	for _, e := range a {
		content = fmt.Sprintf("%v%v%v", content, ByteOptionToString(e), sep)
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func RuneOptionArrayMkString(a []RuneOption, start, sep, end string) string {
	content := ""
	for _, e := range a {
		content = fmt.Sprintf("%v%v%v", content, RuneOptionToString(e), sep)
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func Float32OptionArrayMkString(a []Float32Option, start, sep, end string) string {
	content := ""
	for _, e := range a {
		content = fmt.Sprintf("%v%v%v", content, Float32OptionToString(e), sep)
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func Float64OptionArrayMkString(a []Float64Option, start, sep, end string) string {
	content := ""
	for _, e := range a {
		content = fmt.Sprintf("%v%v%v", content, Float64OptionToString(e), sep)
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func Complex64OptionArrayMkString(a []Complex64Option, start, sep, end string) string {
	content := ""
	for _, e := range a {
		content = fmt.Sprintf("%v%v%v", content, Complex64OptionToString(e), sep)
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func Complex128OptionArrayMkString(a []Complex128Option, start, sep, end string) string {
	content := ""
	for _, e := range a {
		content = fmt.Sprintf("%v%v%v", content, Complex128OptionToString(e), sep)
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func AnyOptionArrayMkString(a []AnyOption, start, sep, end string) string {
	content := ""
	for _, e := range a {
		content = fmt.Sprintf("%v%v%v", content, AnyOptionToString(e), sep)
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
