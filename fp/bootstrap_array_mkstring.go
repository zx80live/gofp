// bootstrap_array_mkstring.go
// DO NOT EDIT THIS FILE WAS GENERATED AUTOMATICALLY BY https://github.com/zx80live/gofp-bootstrap

package fp

import "fmt"

func BoolArrayMkString(a []bool, start, sep, end string) string {
	content := ""
	for _, e := range a {
		content = fmt.Sprintf("%v%v%v", content, BoolToString(e), sep)
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func StringArrayMkString(a []string, start, sep, end string) string {
	content := ""
	for _, e := range a {
		content = fmt.Sprintf("%v%v%v", content, StringToString(e), sep)
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func IntArrayMkString(a []int, start, sep, end string) string {
	content := ""
	for _, e := range a {
		content = fmt.Sprintf("%v%v%v", content, IntToString(e), sep)
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func Int64ArrayMkString(a []int64, start, sep, end string) string {
	content := ""
	for _, e := range a {
		content = fmt.Sprintf("%v%v%v", content, Int64ToString(e), sep)
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func ByteArrayMkString(a []byte, start, sep, end string) string {
	content := ""
	for _, e := range a {
		content = fmt.Sprintf("%v%v%v", content, ByteToString(e), sep)
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func RuneArrayMkString(a []rune, start, sep, end string) string {
	content := ""
	for _, e := range a {
		content = fmt.Sprintf("%v%v%v", content, RuneToString(e), sep)
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func Float32ArrayMkString(a []float32, start, sep, end string) string {
	content := ""
	for _, e := range a {
		content = fmt.Sprintf("%v%v%v", content, Float32ToString(e), sep)
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func Float64ArrayMkString(a []float64, start, sep, end string) string {
	content := ""
	for _, e := range a {
		content = fmt.Sprintf("%v%v%v", content, Float64ToString(e), sep)
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func AnyArrayMkString(a []Any, start, sep, end string) string {
	content := ""
	for _, e := range a {
		content = fmt.Sprintf("%v%v%v", content, AnyToString(e), sep)
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func BoolArrayArrayMkString(a [][]bool, start, sep, end string) string {
	content := ""
	for _, e := range a {
		content = fmt.Sprintf("%v%v%v", content, BoolArrayToString(e), sep)
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func StringArrayArrayMkString(a [][]string, start, sep, end string) string {
	content := ""
	for _, e := range a {
		content = fmt.Sprintf("%v%v%v", content, StringArrayToString(e), sep)
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func IntArrayArrayMkString(a [][]int, start, sep, end string) string {
	content := ""
	for _, e := range a {
		content = fmt.Sprintf("%v%v%v", content, IntArrayToString(e), sep)
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func Int64ArrayArrayMkString(a [][]int64, start, sep, end string) string {
	content := ""
	for _, e := range a {
		content = fmt.Sprintf("%v%v%v", content, Int64ArrayToString(e), sep)
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func ByteArrayArrayMkString(a [][]byte, start, sep, end string) string {
	content := ""
	for _, e := range a {
		content = fmt.Sprintf("%v%v%v", content, ByteArrayToString(e), sep)
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func RuneArrayArrayMkString(a [][]rune, start, sep, end string) string {
	content := ""
	for _, e := range a {
		content = fmt.Sprintf("%v%v%v", content, RuneArrayToString(e), sep)
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func Float32ArrayArrayMkString(a [][]float32, start, sep, end string) string {
	content := ""
	for _, e := range a {
		content = fmt.Sprintf("%v%v%v", content, Float32ArrayToString(e), sep)
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func Float64ArrayArrayMkString(a [][]float64, start, sep, end string) string {
	content := ""
	for _, e := range a {
		content = fmt.Sprintf("%v%v%v", content, Float64ArrayToString(e), sep)
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
func AnyArrayArrayMkString(a [][]Any, start, sep, end string) string {
	content := ""
	for _, e := range a {
		content = fmt.Sprintf("%v%v%v", content, AnyArrayToString(e), sep)
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)
}
