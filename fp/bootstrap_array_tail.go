// bootstrap_array_tail.go
// DO NOT EDIT THIS FILE WAS GENERATED AUTOMATICALLY BY https://github.com/zx80live/gofp-bootstrap

package fp

func BoolArrayTail(m []bool) []bool {
	s := len(m)
	if s > 0 {
		return m[1 : s-1]
	} else {
		return []bool{}
	}
}
func StringArrayTail(m []string) []string {
	s := len(m)
	if s > 0 {
		return m[1 : s-1]
	} else {
		return []string{}
	}
}
func IntArrayTail(m []int) []int {
	s := len(m)
	if s > 0 {
		return m[1 : s-1]
	} else {
		return []int{}
	}
}
func Int64ArrayTail(m []int64) []int64 {
	s := len(m)
	if s > 0 {
		return m[1 : s-1]
	} else {
		return []int64{}
	}
}
func ByteArrayTail(m []byte) []byte {
	s := len(m)
	if s > 0 {
		return m[1 : s-1]
	} else {
		return []byte{}
	}
}
func RuneArrayTail(m []rune) []rune {
	s := len(m)
	if s > 0 {
		return m[1 : s-1]
	} else {
		return []rune{}
	}
}
func Float32ArrayTail(m []float32) []float32 {
	s := len(m)
	if s > 0 {
		return m[1 : s-1]
	} else {
		return []float32{}
	}
}
func Float64ArrayTail(m []float64) []float64 {
	s := len(m)
	if s > 0 {
		return m[1 : s-1]
	} else {
		return []float64{}
	}
}
func AnyArrayTail(m []Any) []Any {
	s := len(m)
	if s > 0 {
		return m[1 : s-1]
	} else {
		return []Any{}
	}
}
func BoolArrayArrayTail(m [][]bool) [][]bool {
	s := len(m)
	if s > 0 {
		return m[1 : s-1]
	} else {
		return [][]bool{}
	}
}
func StringArrayArrayTail(m [][]string) [][]string {
	s := len(m)
	if s > 0 {
		return m[1 : s-1]
	} else {
		return [][]string{}
	}
}
func IntArrayArrayTail(m [][]int) [][]int {
	s := len(m)
	if s > 0 {
		return m[1 : s-1]
	} else {
		return [][]int{}
	}
}
func Int64ArrayArrayTail(m [][]int64) [][]int64 {
	s := len(m)
	if s > 0 {
		return m[1 : s-1]
	} else {
		return [][]int64{}
	}
}
func ByteArrayArrayTail(m [][]byte) [][]byte {
	s := len(m)
	if s > 0 {
		return m[1 : s-1]
	} else {
		return [][]byte{}
	}
}
func RuneArrayArrayTail(m [][]rune) [][]rune {
	s := len(m)
	if s > 0 {
		return m[1 : s-1]
	} else {
		return [][]rune{}
	}
}
func Float32ArrayArrayTail(m [][]float32) [][]float32 {
	s := len(m)
	if s > 0 {
		return m[1 : s-1]
	} else {
		return [][]float32{}
	}
}
func Float64ArrayArrayTail(m [][]float64) [][]float64 {
	s := len(m)
	if s > 0 {
		return m[1 : s-1]
	} else {
		return [][]float64{}
	}
}
func AnyArrayArrayTail(m [][]Any) [][]Any {
	s := len(m)
	if s > 0 {
		return m[1 : s-1]
	} else {
		return [][]Any{}
	}
}
