// bootstrap_array_tail.go
// DO NOT EDIT THIS FILE WAS GENERATED AUTOMATICALLY BY https://github.com/zx80live/gofp-bootstrap

package fp

func BoolArrayTail(m []bool) []bool {
	s := len(m)
	if s > 0 {
		return m[1 : s-1]
	} else {
		return []bool{}
	}
}
func StringArrayTail(m []string) []string {
	s := len(m)
	if s > 0 {
		return m[1 : s-1]
	} else {
		return []string{}
	}
}
func IntArrayTail(m []int) []int {
	s := len(m)
	if s > 0 {
		return m[1 : s-1]
	} else {
		return []int{}
	}
}
func Int8ArrayTail(m []int8) []int8 {
	s := len(m)
	if s > 0 {
		return m[1 : s-1]
	} else {
		return []int8{}
	}
}
func Int16ArrayTail(m []int16) []int16 {
	s := len(m)
	if s > 0 {
		return m[1 : s-1]
	} else {
		return []int16{}
	}
}
func Int32ArrayTail(m []int32) []int32 {
	s := len(m)
	if s > 0 {
		return m[1 : s-1]
	} else {
		return []int32{}
	}
}
func Int64ArrayTail(m []int64) []int64 {
	s := len(m)
	if s > 0 {
		return m[1 : s-1]
	} else {
		return []int64{}
	}
}
func UintArrayTail(m []uint) []uint {
	s := len(m)
	if s > 0 {
		return m[1 : s-1]
	} else {
		return []uint{}
	}
}
func Uint8ArrayTail(m []uint8) []uint8 {
	s := len(m)
	if s > 0 {
		return m[1 : s-1]
	} else {
		return []uint8{}
	}
}
func Uint16ArrayTail(m []uint16) []uint16 {
	s := len(m)
	if s > 0 {
		return m[1 : s-1]
	} else {
		return []uint16{}
	}
}
func Uint32ArrayTail(m []uint32) []uint32 {
	s := len(m)
	if s > 0 {
		return m[1 : s-1]
	} else {
		return []uint32{}
	}
}
func Uint64ArrayTail(m []uint64) []uint64 {
	s := len(m)
	if s > 0 {
		return m[1 : s-1]
	} else {
		return []uint64{}
	}
}
func UintptrArrayTail(m []uintptr) []uintptr {
	s := len(m)
	if s > 0 {
		return m[1 : s-1]
	} else {
		return []uintptr{}
	}
}
func ByteArrayTail(m []byte) []byte {
	s := len(m)
	if s > 0 {
		return m[1 : s-1]
	} else {
		return []byte{}
	}
}
func RuneArrayTail(m []rune) []rune {
	s := len(m)
	if s > 0 {
		return m[1 : s-1]
	} else {
		return []rune{}
	}
}
func Float32ArrayTail(m []float32) []float32 {
	s := len(m)
	if s > 0 {
		return m[1 : s-1]
	} else {
		return []float32{}
	}
}
func Float64ArrayTail(m []float64) []float64 {
	s := len(m)
	if s > 0 {
		return m[1 : s-1]
	} else {
		return []float64{}
	}
}
func Complex64ArrayTail(m []complex64) []complex64 {
	s := len(m)
	if s > 0 {
		return m[1 : s-1]
	} else {
		return []complex64{}
	}
}
func Complex128ArrayTail(m []complex128) []complex128 {
	s := len(m)
	if s > 0 {
		return m[1 : s-1]
	} else {
		return []complex128{}
	}
}
func AnyArrayTail(m []Any) []Any {
	s := len(m)
	if s > 0 {
		return m[1 : s-1]
	} else {
		return []Any{}
	}
}
func BoolArrayArrayTail(m [][]bool) [][]bool {
	s := len(m)
	if s > 0 {
		return m[1 : s-1]
	} else {
		return [][]bool{}
	}
}
func StringArrayArrayTail(m [][]string) [][]string {
	s := len(m)
	if s > 0 {
		return m[1 : s-1]
	} else {
		return [][]string{}
	}
}
func IntArrayArrayTail(m [][]int) [][]int {
	s := len(m)
	if s > 0 {
		return m[1 : s-1]
	} else {
		return [][]int{}
	}
}
func Int8ArrayArrayTail(m [][]int8) [][]int8 {
	s := len(m)
	if s > 0 {
		return m[1 : s-1]
	} else {
		return [][]int8{}
	}
}
func Int16ArrayArrayTail(m [][]int16) [][]int16 {
	s := len(m)
	if s > 0 {
		return m[1 : s-1]
	} else {
		return [][]int16{}
	}
}
func Int32ArrayArrayTail(m [][]int32) [][]int32 {
	s := len(m)
	if s > 0 {
		return m[1 : s-1]
	} else {
		return [][]int32{}
	}
}
func Int64ArrayArrayTail(m [][]int64) [][]int64 {
	s := len(m)
	if s > 0 {
		return m[1 : s-1]
	} else {
		return [][]int64{}
	}
}
func UintArrayArrayTail(m [][]uint) [][]uint {
	s := len(m)
	if s > 0 {
		return m[1 : s-1]
	} else {
		return [][]uint{}
	}
}
func Uint8ArrayArrayTail(m [][]uint8) [][]uint8 {
	s := len(m)
	if s > 0 {
		return m[1 : s-1]
	} else {
		return [][]uint8{}
	}
}
func Uint16ArrayArrayTail(m [][]uint16) [][]uint16 {
	s := len(m)
	if s > 0 {
		return m[1 : s-1]
	} else {
		return [][]uint16{}
	}
}
func Uint32ArrayArrayTail(m [][]uint32) [][]uint32 {
	s := len(m)
	if s > 0 {
		return m[1 : s-1]
	} else {
		return [][]uint32{}
	}
}
func Uint64ArrayArrayTail(m [][]uint64) [][]uint64 {
	s := len(m)
	if s > 0 {
		return m[1 : s-1]
	} else {
		return [][]uint64{}
	}
}
func UintptrArrayArrayTail(m [][]uintptr) [][]uintptr {
	s := len(m)
	if s > 0 {
		return m[1 : s-1]
	} else {
		return [][]uintptr{}
	}
}
func ByteArrayArrayTail(m [][]byte) [][]byte {
	s := len(m)
	if s > 0 {
		return m[1 : s-1]
	} else {
		return [][]byte{}
	}
}
func RuneArrayArrayTail(m [][]rune) [][]rune {
	s := len(m)
	if s > 0 {
		return m[1 : s-1]
	} else {
		return [][]rune{}
	}
}
func Float32ArrayArrayTail(m [][]float32) [][]float32 {
	s := len(m)
	if s > 0 {
		return m[1 : s-1]
	} else {
		return [][]float32{}
	}
}
func Float64ArrayArrayTail(m [][]float64) [][]float64 {
	s := len(m)
	if s > 0 {
		return m[1 : s-1]
	} else {
		return [][]float64{}
	}
}
func Complex64ArrayArrayTail(m [][]complex64) [][]complex64 {
	s := len(m)
	if s > 0 {
		return m[1 : s-1]
	} else {
		return [][]complex64{}
	}
}
func Complex128ArrayArrayTail(m [][]complex128) [][]complex128 {
	s := len(m)
	if s > 0 {
		return m[1 : s-1]
	} else {
		return [][]complex128{}
	}
}
func AnyArrayArrayTail(m [][]Any) [][]Any {
	s := len(m)
	if s > 0 {
		return m[1 : s-1]
	} else {
		return [][]Any{}
	}
}
func BoolOptionArrayTail(m []BoolOption) []BoolOption {
	s := len(m)
	if s > 0 {
		return m[1 : s-1]
	} else {
		return []BoolOption{}
	}
}
func StringOptionArrayTail(m []StringOption) []StringOption {
	s := len(m)
	if s > 0 {
		return m[1 : s-1]
	} else {
		return []StringOption{}
	}
}
func IntOptionArrayTail(m []IntOption) []IntOption {
	s := len(m)
	if s > 0 {
		return m[1 : s-1]
	} else {
		return []IntOption{}
	}
}
func Int8OptionArrayTail(m []Int8Option) []Int8Option {
	s := len(m)
	if s > 0 {
		return m[1 : s-1]
	} else {
		return []Int8Option{}
	}
}
func Int16OptionArrayTail(m []Int16Option) []Int16Option {
	s := len(m)
	if s > 0 {
		return m[1 : s-1]
	} else {
		return []Int16Option{}
	}
}
func Int32OptionArrayTail(m []Int32Option) []Int32Option {
	s := len(m)
	if s > 0 {
		return m[1 : s-1]
	} else {
		return []Int32Option{}
	}
}
func Int64OptionArrayTail(m []Int64Option) []Int64Option {
	s := len(m)
	if s > 0 {
		return m[1 : s-1]
	} else {
		return []Int64Option{}
	}
}
func UintOptionArrayTail(m []UintOption) []UintOption {
	s := len(m)
	if s > 0 {
		return m[1 : s-1]
	} else {
		return []UintOption{}
	}
}
func Uint8OptionArrayTail(m []Uint8Option) []Uint8Option {
	s := len(m)
	if s > 0 {
		return m[1 : s-1]
	} else {
		return []Uint8Option{}
	}
}
func Uint16OptionArrayTail(m []Uint16Option) []Uint16Option {
	s := len(m)
	if s > 0 {
		return m[1 : s-1]
	} else {
		return []Uint16Option{}
	}
}
func Uint32OptionArrayTail(m []Uint32Option) []Uint32Option {
	s := len(m)
	if s > 0 {
		return m[1 : s-1]
	} else {
		return []Uint32Option{}
	}
}
func Uint64OptionArrayTail(m []Uint64Option) []Uint64Option {
	s := len(m)
	if s > 0 {
		return m[1 : s-1]
	} else {
		return []Uint64Option{}
	}
}
func UintptrOptionArrayTail(m []UintptrOption) []UintptrOption {
	s := len(m)
	if s > 0 {
		return m[1 : s-1]
	} else {
		return []UintptrOption{}
	}
}
func ByteOptionArrayTail(m []ByteOption) []ByteOption {
	s := len(m)
	if s > 0 {
		return m[1 : s-1]
	} else {
		return []ByteOption{}
	}
}
func RuneOptionArrayTail(m []RuneOption) []RuneOption {
	s := len(m)
	if s > 0 {
		return m[1 : s-1]
	} else {
		return []RuneOption{}
	}
}
func Float32OptionArrayTail(m []Float32Option) []Float32Option {
	s := len(m)
	if s > 0 {
		return m[1 : s-1]
	} else {
		return []Float32Option{}
	}
}
func Float64OptionArrayTail(m []Float64Option) []Float64Option {
	s := len(m)
	if s > 0 {
		return m[1 : s-1]
	} else {
		return []Float64Option{}
	}
}
func Complex64OptionArrayTail(m []Complex64Option) []Complex64Option {
	s := len(m)
	if s > 0 {
		return m[1 : s-1]
	} else {
		return []Complex64Option{}
	}
}
func Complex128OptionArrayTail(m []Complex128Option) []Complex128Option {
	s := len(m)
	if s > 0 {
		return m[1 : s-1]
	} else {
		return []Complex128Option{}
	}
}
func AnyOptionArrayTail(m []AnyOption) []AnyOption {
	s := len(m)
	if s > 0 {
		return m[1 : s-1]
	} else {
		return []AnyOption{}
	}
}
