// bootstrap_array_zipwithindex.go
// DO NOT EDIT THIS FILE WAS GENERATED AUTOMATICALLY BY https://github.com/zx80live/gofp-bootstrap

package fp


func(l BoolArray) ZipWithIndex() Tuple2Array {
  zipped := make([]Tuple2, len(l))
  for i, e := range l {
    zipped[i] = Tuple2 { e, i }
  }
  return zipped }
func(l StringArray) ZipWithIndex() Tuple2Array {
  zipped := make([]Tuple2, len(l))
  for i, e := range l {
    zipped[i] = Tuple2 { e, i }
  }
  return zipped }
func(l IntArray) ZipWithIndex() Tuple2Array {
  zipped := make([]Tuple2, len(l))
  for i, e := range l {
    zipped[i] = Tuple2 { e, i }
  }
  return zipped }
func(l Int64Array) ZipWithIndex() Tuple2Array {
  zipped := make([]Tuple2, len(l))
  for i, e := range l {
    zipped[i] = Tuple2 { e, i }
  }
  return zipped }
func(l ByteArray) ZipWithIndex() Tuple2Array {
  zipped := make([]Tuple2, len(l))
  for i, e := range l {
    zipped[i] = Tuple2 { e, i }
  }
  return zipped }
func(l RuneArray) ZipWithIndex() Tuple2Array {
  zipped := make([]Tuple2, len(l))
  for i, e := range l {
    zipped[i] = Tuple2 { e, i }
  }
  return zipped }
func(l Float32Array) ZipWithIndex() Tuple2Array {
  zipped := make([]Tuple2, len(l))
  for i, e := range l {
    zipped[i] = Tuple2 { e, i }
  }
  return zipped }
func(l Float64Array) ZipWithIndex() Tuple2Array {
  zipped := make([]Tuple2, len(l))
  for i, e := range l {
    zipped[i] = Tuple2 { e, i }
  }
  return zipped }
func(l AnyArray) ZipWithIndex() Tuple2Array {
  zipped := make([]Tuple2, len(l))
  for i, e := range l {
    zipped[i] = Tuple2 { e, i }
  }
  return zipped }
func(l Tuple2Array) ZipWithIndex() Tuple2Array {
  zipped := make([]Tuple2, len(l))
  for i, e := range l {
    zipped[i] = Tuple2 { e, i }
  }
  return zipped }
func(l BoolArrayArray) ZipWithIndex() Tuple2Array {
  zipped := make([]Tuple2, len(l))
  for i, e := range l {
    zipped[i] = Tuple2 { e, i }
  }
  return zipped }
func(l StringArrayArray) ZipWithIndex() Tuple2Array {
  zipped := make([]Tuple2, len(l))
  for i, e := range l {
    zipped[i] = Tuple2 { e, i }
  }
  return zipped }
func(l IntArrayArray) ZipWithIndex() Tuple2Array {
  zipped := make([]Tuple2, len(l))
  for i, e := range l {
    zipped[i] = Tuple2 { e, i }
  }
  return zipped }
func(l Int64ArrayArray) ZipWithIndex() Tuple2Array {
  zipped := make([]Tuple2, len(l))
  for i, e := range l {
    zipped[i] = Tuple2 { e, i }
  }
  return zipped }
func(l ByteArrayArray) ZipWithIndex() Tuple2Array {
  zipped := make([]Tuple2, len(l))
  for i, e := range l {
    zipped[i] = Tuple2 { e, i }
  }
  return zipped }
func(l RuneArrayArray) ZipWithIndex() Tuple2Array {
  zipped := make([]Tuple2, len(l))
  for i, e := range l {
    zipped[i] = Tuple2 { e, i }
  }
  return zipped }
func(l Float32ArrayArray) ZipWithIndex() Tuple2Array {
  zipped := make([]Tuple2, len(l))
  for i, e := range l {
    zipped[i] = Tuple2 { e, i }
  }
  return zipped }
func(l Float64ArrayArray) ZipWithIndex() Tuple2Array {
  zipped := make([]Tuple2, len(l))
  for i, e := range l {
    zipped[i] = Tuple2 { e, i }
  }
  return zipped }
func(l AnyArrayArray) ZipWithIndex() Tuple2Array {
  zipped := make([]Tuple2, len(l))
  for i, e := range l {
    zipped[i] = Tuple2 { e, i }
  }
  return zipped }
func(l Tuple2ArrayArray) ZipWithIndex() Tuple2Array {
  zipped := make([]Tuple2, len(l))
  for i, e := range l {
    zipped[i] = Tuple2 { e, i }
  }
  return zipped }