// bootstrap_base_numeric.go
// DO NOT EDIT THIS FILE WAS GENERATED AUTOMATICALLY BY https://github.com/zx80live/gofp-bootstrap

package fp

func (a Int) Min(b Int) Int {
	if a <= b {
		return a
	} else {
		return b
	}
}
func (a Int64) Min(b Int64) Int64 {
	if a <= b {
		return a
	} else {
		return b
	}
}
func (a Byte) Min(b Byte) Byte {
	if a <= b {
		return a
	} else {
		return b
	}
}
func (a Rune) Min(b Rune) Rune {
	if a <= b {
		return a
	} else {
		return b
	}
}
func (a Float32) Min(b Float32) Float32 {
	if a <= b {
		return a
	} else {
		return b
	}
}
func (a Float64) Min(b Float64) Float64 {
	if a <= b {
		return a
	} else {
		return b
	}
}
func (a Int) Max(b Int) Int {
	if a > b {
		return a
	} else {
		return b
	}
}
func (a Int64) Max(b Int64) Int64 {
	if a > b {
		return a
	} else {
		return b
	}
}
func (a Byte) Max(b Byte) Byte {
	if a > b {
		return a
	} else {
		return b
	}
}
func (a Rune) Max(b Rune) Rune {
	if a > b {
		return a
	} else {
		return b
	}
}
func (a Float32) Max(b Float32) Float32 {
	if a > b {
		return a
	} else {
		return b
	}
}
func (a Float64) Max(b Float64) Float64 {
	if a > b {
		return a
	} else {
		return b
	}
}
func (n Int) To(t Int) IntList {
	acc := NilInt
	for i := n.Underlined(); i <= t.Underlined(); i++ {
		acc = acc.Cons(i)
	}
	return acc.Reverse()
}
func (n Byte) To(t Byte) ByteList {
	acc := NilByte
	for i := n.Underlined(); i <= t.Underlined(); i++ {
		acc = acc.Cons(i)
	}
	return acc.Reverse()
}
func (n Int) Until(t Int) IntList {
	acc := NilInt
	for i := n.Underlined(); i < t.Underlined(); i++ {
		acc = acc.Cons(i)
	}
	return acc.Reverse()
}
func (n Byte) Until(t Byte) ByteList {
	acc := NilByte
	for i := n.Underlined(); i < t.Underlined(); i++ {
		acc = acc.Cons(i)
	}
	return acc.Reverse()
}
