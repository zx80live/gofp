// bootstrap_fmap_array.go
// DO NOT EDIT THIS FILE WAS GENERATED AUTOMATICALLY BY https://github.com/zx80live/gofp-bootstrap

package fp

/* []bool: bool->bool */
func MapBoolToBoolArr(m []bool, f func(bool) bool) []bool {
	acc := make([]bool, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []bool: bool->string */ func MapStringToBoolArr(m []bool, f func(bool) string) []string {
	acc := make([]string, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []bool: bool->int */ func MapIntToBoolArr(m []bool, f func(bool) int) []int {
	acc := make([]int, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []bool: bool->int8 */ func MapInt8ToBoolArr(m []bool, f func(bool) int8) []int8 {
	acc := make([]int8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []bool: bool->int16 */ func MapInt16ToBoolArr(m []bool, f func(bool) int16) []int16 {
	acc := make([]int16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []bool: bool->int32 */ func MapInt32ToBoolArr(m []bool, f func(bool) int32) []int32 {
	acc := make([]int32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []bool: bool->int64 */ func MapInt64ToBoolArr(m []bool, f func(bool) int64) []int64 {
	acc := make([]int64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []bool: bool->uint */ func MapUintToBoolArr(m []bool, f func(bool) uint) []uint {
	acc := make([]uint, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []bool: bool->uint8 */ func MapUint8ToBoolArr(m []bool, f func(bool) uint8) []uint8 {
	acc := make([]uint8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []bool: bool->uint16 */ func MapUint16ToBoolArr(m []bool, f func(bool) uint16) []uint16 {
	acc := make([]uint16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []bool: bool->uint32 */ func MapUint32ToBoolArr(m []bool, f func(bool) uint32) []uint32 {
	acc := make([]uint32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []bool: bool->uint64 */ func MapUint64ToBoolArr(m []bool, f func(bool) uint64) []uint64 {
	acc := make([]uint64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []bool: bool->uintptr */ func MapUintptrToBoolArr(m []bool, f func(bool) uintptr) []uintptr {
	acc := make([]uintptr, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []bool: bool->byte */ func MapByteToBoolArr(m []bool, f func(bool) byte) []byte {
	acc := make([]byte, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []bool: bool->rune */ func MapRuneToBoolArr(m []bool, f func(bool) rune) []rune {
	acc := make([]rune, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []bool: bool->float32 */ func MapFloat32ToBoolArr(m []bool, f func(bool) float32) []float32 {
	acc := make([]float32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []bool: bool->float64 */ func MapFloat64ToBoolArr(m []bool, f func(bool) float64) []float64 {
	acc := make([]float64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []bool: bool->complex64 */ func MapComplex64ToBoolArr(m []bool, f func(bool) complex64) []complex64 {
	acc := make([]complex64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []bool: bool->complex128 */ func MapComplex128ToBoolArr(m []bool, f func(bool) complex128) []complex128 {
	acc := make([]complex128, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []bool: bool->Any */ func MapAnyToBoolArr(m []bool, f func(bool) Any) []Any {
	acc := make([]Any, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []bool: bool->BoolOption */ func MapBoolOptionToBoolArr(m []bool, f func(bool) BoolOption) []BoolOption {
	acc := make([]BoolOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []bool: bool->StringOption */ func MapStringOptionToBoolArr(m []bool, f func(bool) StringOption) []StringOption {
	acc := make([]StringOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []bool: bool->IntOption */ func MapIntOptionToBoolArr(m []bool, f func(bool) IntOption) []IntOption {
	acc := make([]IntOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []bool: bool->Int8Option */ func MapInt8OptionToBoolArr(m []bool, f func(bool) Int8Option) []Int8Option {
	acc := make([]Int8Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []bool: bool->Int16Option */ func MapInt16OptionToBoolArr(m []bool, f func(bool) Int16Option) []Int16Option {
	acc := make([]Int16Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []bool: bool->Int32Option */ func MapInt32OptionToBoolArr(m []bool, f func(bool) Int32Option) []Int32Option {
	acc := make([]Int32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []bool: bool->Int64Option */ func MapInt64OptionToBoolArr(m []bool, f func(bool) Int64Option) []Int64Option {
	acc := make([]Int64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []bool: bool->UintOption */ func MapUintOptionToBoolArr(m []bool, f func(bool) UintOption) []UintOption {
	acc := make([]UintOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []bool: bool->Uint8Option */ func MapUint8OptionToBoolArr(m []bool, f func(bool) Uint8Option) []Uint8Option {
	acc := make([]Uint8Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []bool: bool->Uint16Option */ func MapUint16OptionToBoolArr(m []bool, f func(bool) Uint16Option) []Uint16Option {
	acc := make([]Uint16Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []bool: bool->Uint32Option */ func MapUint32OptionToBoolArr(m []bool, f func(bool) Uint32Option) []Uint32Option {
	acc := make([]Uint32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []bool: bool->Uint64Option */ func MapUint64OptionToBoolArr(m []bool, f func(bool) Uint64Option) []Uint64Option {
	acc := make([]Uint64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []bool: bool->UintptrOption */ func MapUintptrOptionToBoolArr(m []bool, f func(bool) UintptrOption) []UintptrOption {
	acc := make([]UintptrOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []bool: bool->ByteOption */ func MapByteOptionToBoolArr(m []bool, f func(bool) ByteOption) []ByteOption {
	acc := make([]ByteOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []bool: bool->RuneOption */ func MapRuneOptionToBoolArr(m []bool, f func(bool) RuneOption) []RuneOption {
	acc := make([]RuneOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []bool: bool->Float32Option */ func MapFloat32OptionToBoolArr(m []bool, f func(bool) Float32Option) []Float32Option {
	acc := make([]Float32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []bool: bool->Float64Option */ func MapFloat64OptionToBoolArr(m []bool, f func(bool) Float64Option) []Float64Option {
	acc := make([]Float64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []bool: bool->Complex64Option */ func MapComplex64OptionToBoolArr(m []bool, f func(bool) Complex64Option) []Complex64Option {
	acc := make([]Complex64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []bool: bool->Complex128Option */ func MapComplex128OptionToBoolArr(m []bool, f func(bool) Complex128Option) []Complex128Option {
	acc := make([]Complex128Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []bool: bool->AnyOption */ func MapAnyOptionToBoolArr(m []bool, f func(bool) AnyOption) []AnyOption {
	acc := make([]AnyOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []bool: bool->[]bool */ func MapBoolArrToBoolArr(m []bool, f func(bool) []bool) [][]bool {
	acc := make([][]bool, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []bool: bool->[]string */ func MapStringArrToBoolArr(m []bool, f func(bool) []string) [][]string {
	acc := make([][]string, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []bool: bool->[]int */ func MapIntArrToBoolArr(m []bool, f func(bool) []int) [][]int {
	acc := make([][]int, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []bool: bool->[]int8 */ func MapInt8ArrToBoolArr(m []bool, f func(bool) []int8) [][]int8 {
	acc := make([][]int8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []bool: bool->[]int16 */ func MapInt16ArrToBoolArr(m []bool, f func(bool) []int16) [][]int16 {
	acc := make([][]int16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []bool: bool->[]int32 */ func MapInt32ArrToBoolArr(m []bool, f func(bool) []int32) [][]int32 {
	acc := make([][]int32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []bool: bool->[]int64 */ func MapInt64ArrToBoolArr(m []bool, f func(bool) []int64) [][]int64 {
	acc := make([][]int64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []bool: bool->[]uint */ func MapUintArrToBoolArr(m []bool, f func(bool) []uint) [][]uint {
	acc := make([][]uint, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []bool: bool->[]uint8 */ func MapUint8ArrToBoolArr(m []bool, f func(bool) []uint8) [][]uint8 {
	acc := make([][]uint8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []bool: bool->[]uint16 */ func MapUint16ArrToBoolArr(m []bool, f func(bool) []uint16) [][]uint16 {
	acc := make([][]uint16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []bool: bool->[]uint32 */ func MapUint32ArrToBoolArr(m []bool, f func(bool) []uint32) [][]uint32 {
	acc := make([][]uint32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []bool: bool->[]uint64 */ func MapUint64ArrToBoolArr(m []bool, f func(bool) []uint64) [][]uint64 {
	acc := make([][]uint64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []bool: bool->[]uintptr */ func MapUintptrArrToBoolArr(m []bool, f func(bool) []uintptr) [][]uintptr {
	acc := make([][]uintptr, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []bool: bool->[]byte */ func MapByteArrToBoolArr(m []bool, f func(bool) []byte) [][]byte {
	acc := make([][]byte, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []bool: bool->[]rune */ func MapRuneArrToBoolArr(m []bool, f func(bool) []rune) [][]rune {
	acc := make([][]rune, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []bool: bool->[]float32 */ func MapFloat32ArrToBoolArr(m []bool, f func(bool) []float32) [][]float32 {
	acc := make([][]float32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []bool: bool->[]float64 */ func MapFloat64ArrToBoolArr(m []bool, f func(bool) []float64) [][]float64 {
	acc := make([][]float64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []bool: bool->[]complex64 */ func MapComplex64ArrToBoolArr(m []bool, f func(bool) []complex64) [][]complex64 {
	acc := make([][]complex64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []bool: bool->[]complex128 */ func MapComplex128ArrToBoolArr(m []bool, f func(bool) []complex128) [][]complex128 {
	acc := make([][]complex128, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []bool: bool->[]Any */ func MapAnyArrToBoolArr(m []bool, f func(bool) []Any) [][]Any {
	acc := make([][]Any, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []bool: bool->BoolList */ func MapBoolListToBoolArr(m []bool, f func(bool) BoolList) []BoolList {
	acc := make([]BoolList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []bool: bool->StringList */ func MapStringListToBoolArr(m []bool, f func(bool) StringList) []StringList {
	acc := make([]StringList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []bool: bool->IntList */ func MapIntListToBoolArr(m []bool, f func(bool) IntList) []IntList {
	acc := make([]IntList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []bool: bool->Int8List */ func MapInt8ListToBoolArr(m []bool, f func(bool) Int8List) []Int8List {
	acc := make([]Int8List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []bool: bool->Int16List */ func MapInt16ListToBoolArr(m []bool, f func(bool) Int16List) []Int16List {
	acc := make([]Int16List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []bool: bool->Int32List */ func MapInt32ListToBoolArr(m []bool, f func(bool) Int32List) []Int32List {
	acc := make([]Int32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []bool: bool->Int64List */ func MapInt64ListToBoolArr(m []bool, f func(bool) Int64List) []Int64List {
	acc := make([]Int64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []bool: bool->UintList */ func MapUintListToBoolArr(m []bool, f func(bool) UintList) []UintList {
	acc := make([]UintList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []bool: bool->Uint8List */ func MapUint8ListToBoolArr(m []bool, f func(bool) Uint8List) []Uint8List {
	acc := make([]Uint8List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []bool: bool->Uint16List */ func MapUint16ListToBoolArr(m []bool, f func(bool) Uint16List) []Uint16List {
	acc := make([]Uint16List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []bool: bool->Uint32List */ func MapUint32ListToBoolArr(m []bool, f func(bool) Uint32List) []Uint32List {
	acc := make([]Uint32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []bool: bool->Uint64List */ func MapUint64ListToBoolArr(m []bool, f func(bool) Uint64List) []Uint64List {
	acc := make([]Uint64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []bool: bool->UintptrList */ func MapUintptrListToBoolArr(m []bool, f func(bool) UintptrList) []UintptrList {
	acc := make([]UintptrList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []bool: bool->ByteList */ func MapByteListToBoolArr(m []bool, f func(bool) ByteList) []ByteList {
	acc := make([]ByteList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []bool: bool->RuneList */ func MapRuneListToBoolArr(m []bool, f func(bool) RuneList) []RuneList {
	acc := make([]RuneList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []bool: bool->Float32List */ func MapFloat32ListToBoolArr(m []bool, f func(bool) Float32List) []Float32List {
	acc := make([]Float32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []bool: bool->Float64List */ func MapFloat64ListToBoolArr(m []bool, f func(bool) Float64List) []Float64List {
	acc := make([]Float64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []bool: bool->Complex64List */ func MapComplex64ListToBoolArr(m []bool, f func(bool) Complex64List) []Complex64List {
	acc := make([]Complex64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []bool: bool->Complex128List */ func MapComplex128ListToBoolArr(m []bool, f func(bool) Complex128List) []Complex128List {
	acc := make([]Complex128List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []bool: bool->AnyList */ func MapAnyListToBoolArr(m []bool, f func(bool) AnyList) []AnyList {
	acc := make([]AnyList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []string: string->bool */ func MapBoolToStringArr(m []string, f func(string) bool) []bool {
	acc := make([]bool, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []string: string->string */ func MapStringToStringArr(m []string, f func(string) string) []string {
	acc := make([]string, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []string: string->int */ func MapIntToStringArr(m []string, f func(string) int) []int {
	acc := make([]int, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []string: string->int8 */ func MapInt8ToStringArr(m []string, f func(string) int8) []int8 {
	acc := make([]int8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []string: string->int16 */ func MapInt16ToStringArr(m []string, f func(string) int16) []int16 {
	acc := make([]int16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []string: string->int32 */ func MapInt32ToStringArr(m []string, f func(string) int32) []int32 {
	acc := make([]int32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []string: string->int64 */ func MapInt64ToStringArr(m []string, f func(string) int64) []int64 {
	acc := make([]int64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []string: string->uint */ func MapUintToStringArr(m []string, f func(string) uint) []uint {
	acc := make([]uint, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []string: string->uint8 */ func MapUint8ToStringArr(m []string, f func(string) uint8) []uint8 {
	acc := make([]uint8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []string: string->uint16 */ func MapUint16ToStringArr(m []string, f func(string) uint16) []uint16 {
	acc := make([]uint16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []string: string->uint32 */ func MapUint32ToStringArr(m []string, f func(string) uint32) []uint32 {
	acc := make([]uint32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []string: string->uint64 */ func MapUint64ToStringArr(m []string, f func(string) uint64) []uint64 {
	acc := make([]uint64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []string: string->uintptr */ func MapUintptrToStringArr(m []string, f func(string) uintptr) []uintptr {
	acc := make([]uintptr, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []string: string->byte */ func MapByteToStringArr(m []string, f func(string) byte) []byte {
	acc := make([]byte, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []string: string->rune */ func MapRuneToStringArr(m []string, f func(string) rune) []rune {
	acc := make([]rune, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []string: string->float32 */ func MapFloat32ToStringArr(m []string, f func(string) float32) []float32 {
	acc := make([]float32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []string: string->float64 */ func MapFloat64ToStringArr(m []string, f func(string) float64) []float64 {
	acc := make([]float64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []string: string->complex64 */ func MapComplex64ToStringArr(m []string, f func(string) complex64) []complex64 {
	acc := make([]complex64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []string: string->complex128 */ func MapComplex128ToStringArr(m []string, f func(string) complex128) []complex128 {
	acc := make([]complex128, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []string: string->Any */ func MapAnyToStringArr(m []string, f func(string) Any) []Any {
	acc := make([]Any, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []string: string->BoolOption */ func MapBoolOptionToStringArr(m []string, f func(string) BoolOption) []BoolOption {
	acc := make([]BoolOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []string: string->StringOption */ func MapStringOptionToStringArr(m []string, f func(string) StringOption) []StringOption {
	acc := make([]StringOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []string: string->IntOption */ func MapIntOptionToStringArr(m []string, f func(string) IntOption) []IntOption {
	acc := make([]IntOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []string: string->Int8Option */ func MapInt8OptionToStringArr(m []string, f func(string) Int8Option) []Int8Option {
	acc := make([]Int8Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []string: string->Int16Option */ func MapInt16OptionToStringArr(m []string, f func(string) Int16Option) []Int16Option {
	acc := make([]Int16Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []string: string->Int32Option */ func MapInt32OptionToStringArr(m []string, f func(string) Int32Option) []Int32Option {
	acc := make([]Int32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []string: string->Int64Option */ func MapInt64OptionToStringArr(m []string, f func(string) Int64Option) []Int64Option {
	acc := make([]Int64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []string: string->UintOption */ func MapUintOptionToStringArr(m []string, f func(string) UintOption) []UintOption {
	acc := make([]UintOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []string: string->Uint8Option */ func MapUint8OptionToStringArr(m []string, f func(string) Uint8Option) []Uint8Option {
	acc := make([]Uint8Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []string: string->Uint16Option */ func MapUint16OptionToStringArr(m []string, f func(string) Uint16Option) []Uint16Option {
	acc := make([]Uint16Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []string: string->Uint32Option */ func MapUint32OptionToStringArr(m []string, f func(string) Uint32Option) []Uint32Option {
	acc := make([]Uint32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []string: string->Uint64Option */ func MapUint64OptionToStringArr(m []string, f func(string) Uint64Option) []Uint64Option {
	acc := make([]Uint64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []string: string->UintptrOption */ func MapUintptrOptionToStringArr(m []string, f func(string) UintptrOption) []UintptrOption {
	acc := make([]UintptrOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []string: string->ByteOption */ func MapByteOptionToStringArr(m []string, f func(string) ByteOption) []ByteOption {
	acc := make([]ByteOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []string: string->RuneOption */ func MapRuneOptionToStringArr(m []string, f func(string) RuneOption) []RuneOption {
	acc := make([]RuneOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []string: string->Float32Option */ func MapFloat32OptionToStringArr(m []string, f func(string) Float32Option) []Float32Option {
	acc := make([]Float32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []string: string->Float64Option */ func MapFloat64OptionToStringArr(m []string, f func(string) Float64Option) []Float64Option {
	acc := make([]Float64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []string: string->Complex64Option */ func MapComplex64OptionToStringArr(m []string, f func(string) Complex64Option) []Complex64Option {
	acc := make([]Complex64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []string: string->Complex128Option */ func MapComplex128OptionToStringArr(m []string, f func(string) Complex128Option) []Complex128Option {
	acc := make([]Complex128Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []string: string->AnyOption */ func MapAnyOptionToStringArr(m []string, f func(string) AnyOption) []AnyOption {
	acc := make([]AnyOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []string: string->[]bool */ func MapBoolArrToStringArr(m []string, f func(string) []bool) [][]bool {
	acc := make([][]bool, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []string: string->[]string */ func MapStringArrToStringArr(m []string, f func(string) []string) [][]string {
	acc := make([][]string, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []string: string->[]int */ func MapIntArrToStringArr(m []string, f func(string) []int) [][]int {
	acc := make([][]int, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []string: string->[]int8 */ func MapInt8ArrToStringArr(m []string, f func(string) []int8) [][]int8 {
	acc := make([][]int8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []string: string->[]int16 */ func MapInt16ArrToStringArr(m []string, f func(string) []int16) [][]int16 {
	acc := make([][]int16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []string: string->[]int32 */ func MapInt32ArrToStringArr(m []string, f func(string) []int32) [][]int32 {
	acc := make([][]int32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []string: string->[]int64 */ func MapInt64ArrToStringArr(m []string, f func(string) []int64) [][]int64 {
	acc := make([][]int64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []string: string->[]uint */ func MapUintArrToStringArr(m []string, f func(string) []uint) [][]uint {
	acc := make([][]uint, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []string: string->[]uint8 */ func MapUint8ArrToStringArr(m []string, f func(string) []uint8) [][]uint8 {
	acc := make([][]uint8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []string: string->[]uint16 */ func MapUint16ArrToStringArr(m []string, f func(string) []uint16) [][]uint16 {
	acc := make([][]uint16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []string: string->[]uint32 */ func MapUint32ArrToStringArr(m []string, f func(string) []uint32) [][]uint32 {
	acc := make([][]uint32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []string: string->[]uint64 */ func MapUint64ArrToStringArr(m []string, f func(string) []uint64) [][]uint64 {
	acc := make([][]uint64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []string: string->[]uintptr */ func MapUintptrArrToStringArr(m []string, f func(string) []uintptr) [][]uintptr {
	acc := make([][]uintptr, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []string: string->[]byte */ func MapByteArrToStringArr(m []string, f func(string) []byte) [][]byte {
	acc := make([][]byte, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []string: string->[]rune */ func MapRuneArrToStringArr(m []string, f func(string) []rune) [][]rune {
	acc := make([][]rune, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []string: string->[]float32 */ func MapFloat32ArrToStringArr(m []string, f func(string) []float32) [][]float32 {
	acc := make([][]float32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []string: string->[]float64 */ func MapFloat64ArrToStringArr(m []string, f func(string) []float64) [][]float64 {
	acc := make([][]float64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []string: string->[]complex64 */ func MapComplex64ArrToStringArr(m []string, f func(string) []complex64) [][]complex64 {
	acc := make([][]complex64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []string: string->[]complex128 */ func MapComplex128ArrToStringArr(m []string, f func(string) []complex128) [][]complex128 {
	acc := make([][]complex128, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []string: string->[]Any */ func MapAnyArrToStringArr(m []string, f func(string) []Any) [][]Any {
	acc := make([][]Any, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []string: string->BoolList */ func MapBoolListToStringArr(m []string, f func(string) BoolList) []BoolList {
	acc := make([]BoolList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []string: string->StringList */ func MapStringListToStringArr(m []string, f func(string) StringList) []StringList {
	acc := make([]StringList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []string: string->IntList */ func MapIntListToStringArr(m []string, f func(string) IntList) []IntList {
	acc := make([]IntList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []string: string->Int8List */ func MapInt8ListToStringArr(m []string, f func(string) Int8List) []Int8List {
	acc := make([]Int8List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []string: string->Int16List */ func MapInt16ListToStringArr(m []string, f func(string) Int16List) []Int16List {
	acc := make([]Int16List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []string: string->Int32List */ func MapInt32ListToStringArr(m []string, f func(string) Int32List) []Int32List {
	acc := make([]Int32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []string: string->Int64List */ func MapInt64ListToStringArr(m []string, f func(string) Int64List) []Int64List {
	acc := make([]Int64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []string: string->UintList */ func MapUintListToStringArr(m []string, f func(string) UintList) []UintList {
	acc := make([]UintList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []string: string->Uint8List */ func MapUint8ListToStringArr(m []string, f func(string) Uint8List) []Uint8List {
	acc := make([]Uint8List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []string: string->Uint16List */ func MapUint16ListToStringArr(m []string, f func(string) Uint16List) []Uint16List {
	acc := make([]Uint16List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []string: string->Uint32List */ func MapUint32ListToStringArr(m []string, f func(string) Uint32List) []Uint32List {
	acc := make([]Uint32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []string: string->Uint64List */ func MapUint64ListToStringArr(m []string, f func(string) Uint64List) []Uint64List {
	acc := make([]Uint64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []string: string->UintptrList */ func MapUintptrListToStringArr(m []string, f func(string) UintptrList) []UintptrList {
	acc := make([]UintptrList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []string: string->ByteList */ func MapByteListToStringArr(m []string, f func(string) ByteList) []ByteList {
	acc := make([]ByteList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []string: string->RuneList */ func MapRuneListToStringArr(m []string, f func(string) RuneList) []RuneList {
	acc := make([]RuneList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []string: string->Float32List */ func MapFloat32ListToStringArr(m []string, f func(string) Float32List) []Float32List {
	acc := make([]Float32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []string: string->Float64List */ func MapFloat64ListToStringArr(m []string, f func(string) Float64List) []Float64List {
	acc := make([]Float64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []string: string->Complex64List */ func MapComplex64ListToStringArr(m []string, f func(string) Complex64List) []Complex64List {
	acc := make([]Complex64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []string: string->Complex128List */ func MapComplex128ListToStringArr(m []string, f func(string) Complex128List) []Complex128List {
	acc := make([]Complex128List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []string: string->AnyList */ func MapAnyListToStringArr(m []string, f func(string) AnyList) []AnyList {
	acc := make([]AnyList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int: int->bool */ func MapBoolToIntArr(m []int, f func(int) bool) []bool {
	acc := make([]bool, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int: int->string */ func MapStringToIntArr(m []int, f func(int) string) []string {
	acc := make([]string, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int: int->int */ func MapIntToIntArr(m []int, f func(int) int) []int {
	acc := make([]int, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int: int->int8 */ func MapInt8ToIntArr(m []int, f func(int) int8) []int8 {
	acc := make([]int8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int: int->int16 */ func MapInt16ToIntArr(m []int, f func(int) int16) []int16 {
	acc := make([]int16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int: int->int32 */ func MapInt32ToIntArr(m []int, f func(int) int32) []int32 {
	acc := make([]int32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int: int->int64 */ func MapInt64ToIntArr(m []int, f func(int) int64) []int64 {
	acc := make([]int64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int: int->uint */ func MapUintToIntArr(m []int, f func(int) uint) []uint {
	acc := make([]uint, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int: int->uint8 */ func MapUint8ToIntArr(m []int, f func(int) uint8) []uint8 {
	acc := make([]uint8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int: int->uint16 */ func MapUint16ToIntArr(m []int, f func(int) uint16) []uint16 {
	acc := make([]uint16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int: int->uint32 */ func MapUint32ToIntArr(m []int, f func(int) uint32) []uint32 {
	acc := make([]uint32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int: int->uint64 */ func MapUint64ToIntArr(m []int, f func(int) uint64) []uint64 {
	acc := make([]uint64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int: int->uintptr */ func MapUintptrToIntArr(m []int, f func(int) uintptr) []uintptr {
	acc := make([]uintptr, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int: int->byte */ func MapByteToIntArr(m []int, f func(int) byte) []byte {
	acc := make([]byte, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int: int->rune */ func MapRuneToIntArr(m []int, f func(int) rune) []rune {
	acc := make([]rune, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int: int->float32 */ func MapFloat32ToIntArr(m []int, f func(int) float32) []float32 {
	acc := make([]float32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int: int->float64 */ func MapFloat64ToIntArr(m []int, f func(int) float64) []float64 {
	acc := make([]float64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int: int->complex64 */ func MapComplex64ToIntArr(m []int, f func(int) complex64) []complex64 {
	acc := make([]complex64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int: int->complex128 */ func MapComplex128ToIntArr(m []int, f func(int) complex128) []complex128 {
	acc := make([]complex128, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int: int->Any */ func MapAnyToIntArr(m []int, f func(int) Any) []Any {
	acc := make([]Any, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int: int->BoolOption */ func MapBoolOptionToIntArr(m []int, f func(int) BoolOption) []BoolOption {
	acc := make([]BoolOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int: int->StringOption */ func MapStringOptionToIntArr(m []int, f func(int) StringOption) []StringOption {
	acc := make([]StringOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int: int->IntOption */ func MapIntOptionToIntArr(m []int, f func(int) IntOption) []IntOption {
	acc := make([]IntOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int: int->Int8Option */ func MapInt8OptionToIntArr(m []int, f func(int) Int8Option) []Int8Option {
	acc := make([]Int8Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int: int->Int16Option */ func MapInt16OptionToIntArr(m []int, f func(int) Int16Option) []Int16Option {
	acc := make([]Int16Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int: int->Int32Option */ func MapInt32OptionToIntArr(m []int, f func(int) Int32Option) []Int32Option {
	acc := make([]Int32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int: int->Int64Option */ func MapInt64OptionToIntArr(m []int, f func(int) Int64Option) []Int64Option {
	acc := make([]Int64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int: int->UintOption */ func MapUintOptionToIntArr(m []int, f func(int) UintOption) []UintOption {
	acc := make([]UintOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int: int->Uint8Option */ func MapUint8OptionToIntArr(m []int, f func(int) Uint8Option) []Uint8Option {
	acc := make([]Uint8Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int: int->Uint16Option */ func MapUint16OptionToIntArr(m []int, f func(int) Uint16Option) []Uint16Option {
	acc := make([]Uint16Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int: int->Uint32Option */ func MapUint32OptionToIntArr(m []int, f func(int) Uint32Option) []Uint32Option {
	acc := make([]Uint32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int: int->Uint64Option */ func MapUint64OptionToIntArr(m []int, f func(int) Uint64Option) []Uint64Option {
	acc := make([]Uint64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int: int->UintptrOption */ func MapUintptrOptionToIntArr(m []int, f func(int) UintptrOption) []UintptrOption {
	acc := make([]UintptrOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int: int->ByteOption */ func MapByteOptionToIntArr(m []int, f func(int) ByteOption) []ByteOption {
	acc := make([]ByteOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int: int->RuneOption */ func MapRuneOptionToIntArr(m []int, f func(int) RuneOption) []RuneOption {
	acc := make([]RuneOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int: int->Float32Option */ func MapFloat32OptionToIntArr(m []int, f func(int) Float32Option) []Float32Option {
	acc := make([]Float32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int: int->Float64Option */ func MapFloat64OptionToIntArr(m []int, f func(int) Float64Option) []Float64Option {
	acc := make([]Float64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int: int->Complex64Option */ func MapComplex64OptionToIntArr(m []int, f func(int) Complex64Option) []Complex64Option {
	acc := make([]Complex64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int: int->Complex128Option */ func MapComplex128OptionToIntArr(m []int, f func(int) Complex128Option) []Complex128Option {
	acc := make([]Complex128Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int: int->AnyOption */ func MapAnyOptionToIntArr(m []int, f func(int) AnyOption) []AnyOption {
	acc := make([]AnyOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int: int->[]bool */ func MapBoolArrToIntArr(m []int, f func(int) []bool) [][]bool {
	acc := make([][]bool, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int: int->[]string */ func MapStringArrToIntArr(m []int, f func(int) []string) [][]string {
	acc := make([][]string, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int: int->[]int */ func MapIntArrToIntArr(m []int, f func(int) []int) [][]int {
	acc := make([][]int, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int: int->[]int8 */ func MapInt8ArrToIntArr(m []int, f func(int) []int8) [][]int8 {
	acc := make([][]int8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int: int->[]int16 */ func MapInt16ArrToIntArr(m []int, f func(int) []int16) [][]int16 {
	acc := make([][]int16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int: int->[]int32 */ func MapInt32ArrToIntArr(m []int, f func(int) []int32) [][]int32 {
	acc := make([][]int32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int: int->[]int64 */ func MapInt64ArrToIntArr(m []int, f func(int) []int64) [][]int64 {
	acc := make([][]int64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int: int->[]uint */ func MapUintArrToIntArr(m []int, f func(int) []uint) [][]uint {
	acc := make([][]uint, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int: int->[]uint8 */ func MapUint8ArrToIntArr(m []int, f func(int) []uint8) [][]uint8 {
	acc := make([][]uint8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int: int->[]uint16 */ func MapUint16ArrToIntArr(m []int, f func(int) []uint16) [][]uint16 {
	acc := make([][]uint16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int: int->[]uint32 */ func MapUint32ArrToIntArr(m []int, f func(int) []uint32) [][]uint32 {
	acc := make([][]uint32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int: int->[]uint64 */ func MapUint64ArrToIntArr(m []int, f func(int) []uint64) [][]uint64 {
	acc := make([][]uint64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int: int->[]uintptr */ func MapUintptrArrToIntArr(m []int, f func(int) []uintptr) [][]uintptr {
	acc := make([][]uintptr, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int: int->[]byte */ func MapByteArrToIntArr(m []int, f func(int) []byte) [][]byte {
	acc := make([][]byte, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int: int->[]rune */ func MapRuneArrToIntArr(m []int, f func(int) []rune) [][]rune {
	acc := make([][]rune, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int: int->[]float32 */ func MapFloat32ArrToIntArr(m []int, f func(int) []float32) [][]float32 {
	acc := make([][]float32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int: int->[]float64 */ func MapFloat64ArrToIntArr(m []int, f func(int) []float64) [][]float64 {
	acc := make([][]float64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int: int->[]complex64 */ func MapComplex64ArrToIntArr(m []int, f func(int) []complex64) [][]complex64 {
	acc := make([][]complex64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int: int->[]complex128 */ func MapComplex128ArrToIntArr(m []int, f func(int) []complex128) [][]complex128 {
	acc := make([][]complex128, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int: int->[]Any */ func MapAnyArrToIntArr(m []int, f func(int) []Any) [][]Any {
	acc := make([][]Any, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int: int->BoolList */ func MapBoolListToIntArr(m []int, f func(int) BoolList) []BoolList {
	acc := make([]BoolList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int: int->StringList */ func MapStringListToIntArr(m []int, f func(int) StringList) []StringList {
	acc := make([]StringList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int: int->IntList */ func MapIntListToIntArr(m []int, f func(int) IntList) []IntList {
	acc := make([]IntList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int: int->Int8List */ func MapInt8ListToIntArr(m []int, f func(int) Int8List) []Int8List {
	acc := make([]Int8List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int: int->Int16List */ func MapInt16ListToIntArr(m []int, f func(int) Int16List) []Int16List {
	acc := make([]Int16List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int: int->Int32List */ func MapInt32ListToIntArr(m []int, f func(int) Int32List) []Int32List {
	acc := make([]Int32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int: int->Int64List */ func MapInt64ListToIntArr(m []int, f func(int) Int64List) []Int64List {
	acc := make([]Int64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int: int->UintList */ func MapUintListToIntArr(m []int, f func(int) UintList) []UintList {
	acc := make([]UintList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int: int->Uint8List */ func MapUint8ListToIntArr(m []int, f func(int) Uint8List) []Uint8List {
	acc := make([]Uint8List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int: int->Uint16List */ func MapUint16ListToIntArr(m []int, f func(int) Uint16List) []Uint16List {
	acc := make([]Uint16List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int: int->Uint32List */ func MapUint32ListToIntArr(m []int, f func(int) Uint32List) []Uint32List {
	acc := make([]Uint32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int: int->Uint64List */ func MapUint64ListToIntArr(m []int, f func(int) Uint64List) []Uint64List {
	acc := make([]Uint64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int: int->UintptrList */ func MapUintptrListToIntArr(m []int, f func(int) UintptrList) []UintptrList {
	acc := make([]UintptrList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int: int->ByteList */ func MapByteListToIntArr(m []int, f func(int) ByteList) []ByteList {
	acc := make([]ByteList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int: int->RuneList */ func MapRuneListToIntArr(m []int, f func(int) RuneList) []RuneList {
	acc := make([]RuneList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int: int->Float32List */ func MapFloat32ListToIntArr(m []int, f func(int) Float32List) []Float32List {
	acc := make([]Float32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int: int->Float64List */ func MapFloat64ListToIntArr(m []int, f func(int) Float64List) []Float64List {
	acc := make([]Float64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int: int->Complex64List */ func MapComplex64ListToIntArr(m []int, f func(int) Complex64List) []Complex64List {
	acc := make([]Complex64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int: int->Complex128List */ func MapComplex128ListToIntArr(m []int, f func(int) Complex128List) []Complex128List {
	acc := make([]Complex128List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int: int->AnyList */ func MapAnyListToIntArr(m []int, f func(int) AnyList) []AnyList {
	acc := make([]AnyList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int8: int8->bool */ func MapBoolToInt8Arr(m []int8, f func(int8) bool) []bool {
	acc := make([]bool, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int8: int8->string */ func MapStringToInt8Arr(m []int8, f func(int8) string) []string {
	acc := make([]string, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int8: int8->int */ func MapIntToInt8Arr(m []int8, f func(int8) int) []int {
	acc := make([]int, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int8: int8->int8 */ func MapInt8ToInt8Arr(m []int8, f func(int8) int8) []int8 {
	acc := make([]int8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int8: int8->int16 */ func MapInt16ToInt8Arr(m []int8, f func(int8) int16) []int16 {
	acc := make([]int16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int8: int8->int32 */ func MapInt32ToInt8Arr(m []int8, f func(int8) int32) []int32 {
	acc := make([]int32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int8: int8->int64 */ func MapInt64ToInt8Arr(m []int8, f func(int8) int64) []int64 {
	acc := make([]int64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int8: int8->uint */ func MapUintToInt8Arr(m []int8, f func(int8) uint) []uint {
	acc := make([]uint, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int8: int8->uint8 */ func MapUint8ToInt8Arr(m []int8, f func(int8) uint8) []uint8 {
	acc := make([]uint8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int8: int8->uint16 */ func MapUint16ToInt8Arr(m []int8, f func(int8) uint16) []uint16 {
	acc := make([]uint16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int8: int8->uint32 */ func MapUint32ToInt8Arr(m []int8, f func(int8) uint32) []uint32 {
	acc := make([]uint32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int8: int8->uint64 */ func MapUint64ToInt8Arr(m []int8, f func(int8) uint64) []uint64 {
	acc := make([]uint64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int8: int8->uintptr */ func MapUintptrToInt8Arr(m []int8, f func(int8) uintptr) []uintptr {
	acc := make([]uintptr, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int8: int8->byte */ func MapByteToInt8Arr(m []int8, f func(int8) byte) []byte {
	acc := make([]byte, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int8: int8->rune */ func MapRuneToInt8Arr(m []int8, f func(int8) rune) []rune {
	acc := make([]rune, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int8: int8->float32 */ func MapFloat32ToInt8Arr(m []int8, f func(int8) float32) []float32 {
	acc := make([]float32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int8: int8->float64 */ func MapFloat64ToInt8Arr(m []int8, f func(int8) float64) []float64 {
	acc := make([]float64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int8: int8->complex64 */ func MapComplex64ToInt8Arr(m []int8, f func(int8) complex64) []complex64 {
	acc := make([]complex64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int8: int8->complex128 */ func MapComplex128ToInt8Arr(m []int8, f func(int8) complex128) []complex128 {
	acc := make([]complex128, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int8: int8->Any */ func MapAnyToInt8Arr(m []int8, f func(int8) Any) []Any {
	acc := make([]Any, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int8: int8->BoolOption */ func MapBoolOptionToInt8Arr(m []int8, f func(int8) BoolOption) []BoolOption {
	acc := make([]BoolOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int8: int8->StringOption */ func MapStringOptionToInt8Arr(m []int8, f func(int8) StringOption) []StringOption {
	acc := make([]StringOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int8: int8->IntOption */ func MapIntOptionToInt8Arr(m []int8, f func(int8) IntOption) []IntOption {
	acc := make([]IntOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int8: int8->Int8Option */ func MapInt8OptionToInt8Arr(m []int8, f func(int8) Int8Option) []Int8Option {
	acc := make([]Int8Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int8: int8->Int16Option */ func MapInt16OptionToInt8Arr(m []int8, f func(int8) Int16Option) []Int16Option {
	acc := make([]Int16Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int8: int8->Int32Option */ func MapInt32OptionToInt8Arr(m []int8, f func(int8) Int32Option) []Int32Option {
	acc := make([]Int32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int8: int8->Int64Option */ func MapInt64OptionToInt8Arr(m []int8, f func(int8) Int64Option) []Int64Option {
	acc := make([]Int64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int8: int8->UintOption */ func MapUintOptionToInt8Arr(m []int8, f func(int8) UintOption) []UintOption {
	acc := make([]UintOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int8: int8->Uint8Option */ func MapUint8OptionToInt8Arr(m []int8, f func(int8) Uint8Option) []Uint8Option {
	acc := make([]Uint8Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int8: int8->Uint16Option */ func MapUint16OptionToInt8Arr(m []int8, f func(int8) Uint16Option) []Uint16Option {
	acc := make([]Uint16Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int8: int8->Uint32Option */ func MapUint32OptionToInt8Arr(m []int8, f func(int8) Uint32Option) []Uint32Option {
	acc := make([]Uint32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int8: int8->Uint64Option */ func MapUint64OptionToInt8Arr(m []int8, f func(int8) Uint64Option) []Uint64Option {
	acc := make([]Uint64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int8: int8->UintptrOption */ func MapUintptrOptionToInt8Arr(m []int8, f func(int8) UintptrOption) []UintptrOption {
	acc := make([]UintptrOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int8: int8->ByteOption */ func MapByteOptionToInt8Arr(m []int8, f func(int8) ByteOption) []ByteOption {
	acc := make([]ByteOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int8: int8->RuneOption */ func MapRuneOptionToInt8Arr(m []int8, f func(int8) RuneOption) []RuneOption {
	acc := make([]RuneOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int8: int8->Float32Option */ func MapFloat32OptionToInt8Arr(m []int8, f func(int8) Float32Option) []Float32Option {
	acc := make([]Float32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int8: int8->Float64Option */ func MapFloat64OptionToInt8Arr(m []int8, f func(int8) Float64Option) []Float64Option {
	acc := make([]Float64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int8: int8->Complex64Option */ func MapComplex64OptionToInt8Arr(m []int8, f func(int8) Complex64Option) []Complex64Option {
	acc := make([]Complex64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int8: int8->Complex128Option */ func MapComplex128OptionToInt8Arr(m []int8, f func(int8) Complex128Option) []Complex128Option {
	acc := make([]Complex128Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int8: int8->AnyOption */ func MapAnyOptionToInt8Arr(m []int8, f func(int8) AnyOption) []AnyOption {
	acc := make([]AnyOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int8: int8->[]bool */ func MapBoolArrToInt8Arr(m []int8, f func(int8) []bool) [][]bool {
	acc := make([][]bool, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int8: int8->[]string */ func MapStringArrToInt8Arr(m []int8, f func(int8) []string) [][]string {
	acc := make([][]string, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int8: int8->[]int */ func MapIntArrToInt8Arr(m []int8, f func(int8) []int) [][]int {
	acc := make([][]int, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int8: int8->[]int8 */ func MapInt8ArrToInt8Arr(m []int8, f func(int8) []int8) [][]int8 {
	acc := make([][]int8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int8: int8->[]int16 */ func MapInt16ArrToInt8Arr(m []int8, f func(int8) []int16) [][]int16 {
	acc := make([][]int16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int8: int8->[]int32 */ func MapInt32ArrToInt8Arr(m []int8, f func(int8) []int32) [][]int32 {
	acc := make([][]int32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int8: int8->[]int64 */ func MapInt64ArrToInt8Arr(m []int8, f func(int8) []int64) [][]int64 {
	acc := make([][]int64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int8: int8->[]uint */ func MapUintArrToInt8Arr(m []int8, f func(int8) []uint) [][]uint {
	acc := make([][]uint, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int8: int8->[]uint8 */ func MapUint8ArrToInt8Arr(m []int8, f func(int8) []uint8) [][]uint8 {
	acc := make([][]uint8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int8: int8->[]uint16 */ func MapUint16ArrToInt8Arr(m []int8, f func(int8) []uint16) [][]uint16 {
	acc := make([][]uint16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int8: int8->[]uint32 */ func MapUint32ArrToInt8Arr(m []int8, f func(int8) []uint32) [][]uint32 {
	acc := make([][]uint32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int8: int8->[]uint64 */ func MapUint64ArrToInt8Arr(m []int8, f func(int8) []uint64) [][]uint64 {
	acc := make([][]uint64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int8: int8->[]uintptr */ func MapUintptrArrToInt8Arr(m []int8, f func(int8) []uintptr) [][]uintptr {
	acc := make([][]uintptr, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int8: int8->[]byte */ func MapByteArrToInt8Arr(m []int8, f func(int8) []byte) [][]byte {
	acc := make([][]byte, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int8: int8->[]rune */ func MapRuneArrToInt8Arr(m []int8, f func(int8) []rune) [][]rune {
	acc := make([][]rune, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int8: int8->[]float32 */ func MapFloat32ArrToInt8Arr(m []int8, f func(int8) []float32) [][]float32 {
	acc := make([][]float32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int8: int8->[]float64 */ func MapFloat64ArrToInt8Arr(m []int8, f func(int8) []float64) [][]float64 {
	acc := make([][]float64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int8: int8->[]complex64 */ func MapComplex64ArrToInt8Arr(m []int8, f func(int8) []complex64) [][]complex64 {
	acc := make([][]complex64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int8: int8->[]complex128 */ func MapComplex128ArrToInt8Arr(m []int8, f func(int8) []complex128) [][]complex128 {
	acc := make([][]complex128, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int8: int8->[]Any */ func MapAnyArrToInt8Arr(m []int8, f func(int8) []Any) [][]Any {
	acc := make([][]Any, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int8: int8->BoolList */ func MapBoolListToInt8Arr(m []int8, f func(int8) BoolList) []BoolList {
	acc := make([]BoolList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int8: int8->StringList */ func MapStringListToInt8Arr(m []int8, f func(int8) StringList) []StringList {
	acc := make([]StringList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int8: int8->IntList */ func MapIntListToInt8Arr(m []int8, f func(int8) IntList) []IntList {
	acc := make([]IntList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int8: int8->Int8List */ func MapInt8ListToInt8Arr(m []int8, f func(int8) Int8List) []Int8List {
	acc := make([]Int8List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int8: int8->Int16List */ func MapInt16ListToInt8Arr(m []int8, f func(int8) Int16List) []Int16List {
	acc := make([]Int16List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int8: int8->Int32List */ func MapInt32ListToInt8Arr(m []int8, f func(int8) Int32List) []Int32List {
	acc := make([]Int32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int8: int8->Int64List */ func MapInt64ListToInt8Arr(m []int8, f func(int8) Int64List) []Int64List {
	acc := make([]Int64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int8: int8->UintList */ func MapUintListToInt8Arr(m []int8, f func(int8) UintList) []UintList {
	acc := make([]UintList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int8: int8->Uint8List */ func MapUint8ListToInt8Arr(m []int8, f func(int8) Uint8List) []Uint8List {
	acc := make([]Uint8List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int8: int8->Uint16List */ func MapUint16ListToInt8Arr(m []int8, f func(int8) Uint16List) []Uint16List {
	acc := make([]Uint16List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int8: int8->Uint32List */ func MapUint32ListToInt8Arr(m []int8, f func(int8) Uint32List) []Uint32List {
	acc := make([]Uint32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int8: int8->Uint64List */ func MapUint64ListToInt8Arr(m []int8, f func(int8) Uint64List) []Uint64List {
	acc := make([]Uint64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int8: int8->UintptrList */ func MapUintptrListToInt8Arr(m []int8, f func(int8) UintptrList) []UintptrList {
	acc := make([]UintptrList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int8: int8->ByteList */ func MapByteListToInt8Arr(m []int8, f func(int8) ByteList) []ByteList {
	acc := make([]ByteList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int8: int8->RuneList */ func MapRuneListToInt8Arr(m []int8, f func(int8) RuneList) []RuneList {
	acc := make([]RuneList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int8: int8->Float32List */ func MapFloat32ListToInt8Arr(m []int8, f func(int8) Float32List) []Float32List {
	acc := make([]Float32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int8: int8->Float64List */ func MapFloat64ListToInt8Arr(m []int8, f func(int8) Float64List) []Float64List {
	acc := make([]Float64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int8: int8->Complex64List */ func MapComplex64ListToInt8Arr(m []int8, f func(int8) Complex64List) []Complex64List {
	acc := make([]Complex64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int8: int8->Complex128List */ func MapComplex128ListToInt8Arr(m []int8, f func(int8) Complex128List) []Complex128List {
	acc := make([]Complex128List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int8: int8->AnyList */ func MapAnyListToInt8Arr(m []int8, f func(int8) AnyList) []AnyList {
	acc := make([]AnyList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int16: int16->bool */ func MapBoolToInt16Arr(m []int16, f func(int16) bool) []bool {
	acc := make([]bool, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int16: int16->string */ func MapStringToInt16Arr(m []int16, f func(int16) string) []string {
	acc := make([]string, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int16: int16->int */ func MapIntToInt16Arr(m []int16, f func(int16) int) []int {
	acc := make([]int, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int16: int16->int8 */ func MapInt8ToInt16Arr(m []int16, f func(int16) int8) []int8 {
	acc := make([]int8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int16: int16->int16 */ func MapInt16ToInt16Arr(m []int16, f func(int16) int16) []int16 {
	acc := make([]int16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int16: int16->int32 */ func MapInt32ToInt16Arr(m []int16, f func(int16) int32) []int32 {
	acc := make([]int32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int16: int16->int64 */ func MapInt64ToInt16Arr(m []int16, f func(int16) int64) []int64 {
	acc := make([]int64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int16: int16->uint */ func MapUintToInt16Arr(m []int16, f func(int16) uint) []uint {
	acc := make([]uint, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int16: int16->uint8 */ func MapUint8ToInt16Arr(m []int16, f func(int16) uint8) []uint8 {
	acc := make([]uint8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int16: int16->uint16 */ func MapUint16ToInt16Arr(m []int16, f func(int16) uint16) []uint16 {
	acc := make([]uint16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int16: int16->uint32 */ func MapUint32ToInt16Arr(m []int16, f func(int16) uint32) []uint32 {
	acc := make([]uint32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int16: int16->uint64 */ func MapUint64ToInt16Arr(m []int16, f func(int16) uint64) []uint64 {
	acc := make([]uint64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int16: int16->uintptr */ func MapUintptrToInt16Arr(m []int16, f func(int16) uintptr) []uintptr {
	acc := make([]uintptr, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int16: int16->byte */ func MapByteToInt16Arr(m []int16, f func(int16) byte) []byte {
	acc := make([]byte, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int16: int16->rune */ func MapRuneToInt16Arr(m []int16, f func(int16) rune) []rune {
	acc := make([]rune, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int16: int16->float32 */ func MapFloat32ToInt16Arr(m []int16, f func(int16) float32) []float32 {
	acc := make([]float32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int16: int16->float64 */ func MapFloat64ToInt16Arr(m []int16, f func(int16) float64) []float64 {
	acc := make([]float64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int16: int16->complex64 */ func MapComplex64ToInt16Arr(m []int16, f func(int16) complex64) []complex64 {
	acc := make([]complex64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int16: int16->complex128 */ func MapComplex128ToInt16Arr(m []int16, f func(int16) complex128) []complex128 {
	acc := make([]complex128, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int16: int16->Any */ func MapAnyToInt16Arr(m []int16, f func(int16) Any) []Any {
	acc := make([]Any, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int16: int16->BoolOption */ func MapBoolOptionToInt16Arr(m []int16, f func(int16) BoolOption) []BoolOption {
	acc := make([]BoolOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int16: int16->StringOption */ func MapStringOptionToInt16Arr(m []int16, f func(int16) StringOption) []StringOption {
	acc := make([]StringOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int16: int16->IntOption */ func MapIntOptionToInt16Arr(m []int16, f func(int16) IntOption) []IntOption {
	acc := make([]IntOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int16: int16->Int8Option */ func MapInt8OptionToInt16Arr(m []int16, f func(int16) Int8Option) []Int8Option {
	acc := make([]Int8Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int16: int16->Int16Option */ func MapInt16OptionToInt16Arr(m []int16, f func(int16) Int16Option) []Int16Option {
	acc := make([]Int16Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int16: int16->Int32Option */ func MapInt32OptionToInt16Arr(m []int16, f func(int16) Int32Option) []Int32Option {
	acc := make([]Int32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int16: int16->Int64Option */ func MapInt64OptionToInt16Arr(m []int16, f func(int16) Int64Option) []Int64Option {
	acc := make([]Int64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int16: int16->UintOption */ func MapUintOptionToInt16Arr(m []int16, f func(int16) UintOption) []UintOption {
	acc := make([]UintOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int16: int16->Uint8Option */ func MapUint8OptionToInt16Arr(m []int16, f func(int16) Uint8Option) []Uint8Option {
	acc := make([]Uint8Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int16: int16->Uint16Option */ func MapUint16OptionToInt16Arr(m []int16, f func(int16) Uint16Option) []Uint16Option {
	acc := make([]Uint16Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int16: int16->Uint32Option */ func MapUint32OptionToInt16Arr(m []int16, f func(int16) Uint32Option) []Uint32Option {
	acc := make([]Uint32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int16: int16->Uint64Option */ func MapUint64OptionToInt16Arr(m []int16, f func(int16) Uint64Option) []Uint64Option {
	acc := make([]Uint64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int16: int16->UintptrOption */ func MapUintptrOptionToInt16Arr(m []int16, f func(int16) UintptrOption) []UintptrOption {
	acc := make([]UintptrOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int16: int16->ByteOption */ func MapByteOptionToInt16Arr(m []int16, f func(int16) ByteOption) []ByteOption {
	acc := make([]ByteOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int16: int16->RuneOption */ func MapRuneOptionToInt16Arr(m []int16, f func(int16) RuneOption) []RuneOption {
	acc := make([]RuneOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int16: int16->Float32Option */ func MapFloat32OptionToInt16Arr(m []int16, f func(int16) Float32Option) []Float32Option {
	acc := make([]Float32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int16: int16->Float64Option */ func MapFloat64OptionToInt16Arr(m []int16, f func(int16) Float64Option) []Float64Option {
	acc := make([]Float64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int16: int16->Complex64Option */ func MapComplex64OptionToInt16Arr(m []int16, f func(int16) Complex64Option) []Complex64Option {
	acc := make([]Complex64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int16: int16->Complex128Option */ func MapComplex128OptionToInt16Arr(m []int16, f func(int16) Complex128Option) []Complex128Option {
	acc := make([]Complex128Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int16: int16->AnyOption */ func MapAnyOptionToInt16Arr(m []int16, f func(int16) AnyOption) []AnyOption {
	acc := make([]AnyOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int16: int16->[]bool */ func MapBoolArrToInt16Arr(m []int16, f func(int16) []bool) [][]bool {
	acc := make([][]bool, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int16: int16->[]string */ func MapStringArrToInt16Arr(m []int16, f func(int16) []string) [][]string {
	acc := make([][]string, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int16: int16->[]int */ func MapIntArrToInt16Arr(m []int16, f func(int16) []int) [][]int {
	acc := make([][]int, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int16: int16->[]int8 */ func MapInt8ArrToInt16Arr(m []int16, f func(int16) []int8) [][]int8 {
	acc := make([][]int8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int16: int16->[]int16 */ func MapInt16ArrToInt16Arr(m []int16, f func(int16) []int16) [][]int16 {
	acc := make([][]int16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int16: int16->[]int32 */ func MapInt32ArrToInt16Arr(m []int16, f func(int16) []int32) [][]int32 {
	acc := make([][]int32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int16: int16->[]int64 */ func MapInt64ArrToInt16Arr(m []int16, f func(int16) []int64) [][]int64 {
	acc := make([][]int64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int16: int16->[]uint */ func MapUintArrToInt16Arr(m []int16, f func(int16) []uint) [][]uint {
	acc := make([][]uint, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int16: int16->[]uint8 */ func MapUint8ArrToInt16Arr(m []int16, f func(int16) []uint8) [][]uint8 {
	acc := make([][]uint8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int16: int16->[]uint16 */ func MapUint16ArrToInt16Arr(m []int16, f func(int16) []uint16) [][]uint16 {
	acc := make([][]uint16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int16: int16->[]uint32 */ func MapUint32ArrToInt16Arr(m []int16, f func(int16) []uint32) [][]uint32 {
	acc := make([][]uint32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int16: int16->[]uint64 */ func MapUint64ArrToInt16Arr(m []int16, f func(int16) []uint64) [][]uint64 {
	acc := make([][]uint64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int16: int16->[]uintptr */ func MapUintptrArrToInt16Arr(m []int16, f func(int16) []uintptr) [][]uintptr {
	acc := make([][]uintptr, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int16: int16->[]byte */ func MapByteArrToInt16Arr(m []int16, f func(int16) []byte) [][]byte {
	acc := make([][]byte, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int16: int16->[]rune */ func MapRuneArrToInt16Arr(m []int16, f func(int16) []rune) [][]rune {
	acc := make([][]rune, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int16: int16->[]float32 */ func MapFloat32ArrToInt16Arr(m []int16, f func(int16) []float32) [][]float32 {
	acc := make([][]float32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int16: int16->[]float64 */ func MapFloat64ArrToInt16Arr(m []int16, f func(int16) []float64) [][]float64 {
	acc := make([][]float64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int16: int16->[]complex64 */ func MapComplex64ArrToInt16Arr(m []int16, f func(int16) []complex64) [][]complex64 {
	acc := make([][]complex64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int16: int16->[]complex128 */ func MapComplex128ArrToInt16Arr(m []int16, f func(int16) []complex128) [][]complex128 {
	acc := make([][]complex128, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int16: int16->[]Any */ func MapAnyArrToInt16Arr(m []int16, f func(int16) []Any) [][]Any {
	acc := make([][]Any, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int16: int16->BoolList */ func MapBoolListToInt16Arr(m []int16, f func(int16) BoolList) []BoolList {
	acc := make([]BoolList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int16: int16->StringList */ func MapStringListToInt16Arr(m []int16, f func(int16) StringList) []StringList {
	acc := make([]StringList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int16: int16->IntList */ func MapIntListToInt16Arr(m []int16, f func(int16) IntList) []IntList {
	acc := make([]IntList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int16: int16->Int8List */ func MapInt8ListToInt16Arr(m []int16, f func(int16) Int8List) []Int8List {
	acc := make([]Int8List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int16: int16->Int16List */ func MapInt16ListToInt16Arr(m []int16, f func(int16) Int16List) []Int16List {
	acc := make([]Int16List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int16: int16->Int32List */ func MapInt32ListToInt16Arr(m []int16, f func(int16) Int32List) []Int32List {
	acc := make([]Int32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int16: int16->Int64List */ func MapInt64ListToInt16Arr(m []int16, f func(int16) Int64List) []Int64List {
	acc := make([]Int64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int16: int16->UintList */ func MapUintListToInt16Arr(m []int16, f func(int16) UintList) []UintList {
	acc := make([]UintList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int16: int16->Uint8List */ func MapUint8ListToInt16Arr(m []int16, f func(int16) Uint8List) []Uint8List {
	acc := make([]Uint8List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int16: int16->Uint16List */ func MapUint16ListToInt16Arr(m []int16, f func(int16) Uint16List) []Uint16List {
	acc := make([]Uint16List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int16: int16->Uint32List */ func MapUint32ListToInt16Arr(m []int16, f func(int16) Uint32List) []Uint32List {
	acc := make([]Uint32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int16: int16->Uint64List */ func MapUint64ListToInt16Arr(m []int16, f func(int16) Uint64List) []Uint64List {
	acc := make([]Uint64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int16: int16->UintptrList */ func MapUintptrListToInt16Arr(m []int16, f func(int16) UintptrList) []UintptrList {
	acc := make([]UintptrList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int16: int16->ByteList */ func MapByteListToInt16Arr(m []int16, f func(int16) ByteList) []ByteList {
	acc := make([]ByteList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int16: int16->RuneList */ func MapRuneListToInt16Arr(m []int16, f func(int16) RuneList) []RuneList {
	acc := make([]RuneList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int16: int16->Float32List */ func MapFloat32ListToInt16Arr(m []int16, f func(int16) Float32List) []Float32List {
	acc := make([]Float32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int16: int16->Float64List */ func MapFloat64ListToInt16Arr(m []int16, f func(int16) Float64List) []Float64List {
	acc := make([]Float64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int16: int16->Complex64List */ func MapComplex64ListToInt16Arr(m []int16, f func(int16) Complex64List) []Complex64List {
	acc := make([]Complex64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int16: int16->Complex128List */ func MapComplex128ListToInt16Arr(m []int16, f func(int16) Complex128List) []Complex128List {
	acc := make([]Complex128List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int16: int16->AnyList */ func MapAnyListToInt16Arr(m []int16, f func(int16) AnyList) []AnyList {
	acc := make([]AnyList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int32: int32->bool */ func MapBoolToInt32Arr(m []int32, f func(int32) bool) []bool {
	acc := make([]bool, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int32: int32->string */ func MapStringToInt32Arr(m []int32, f func(int32) string) []string {
	acc := make([]string, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int32: int32->int */ func MapIntToInt32Arr(m []int32, f func(int32) int) []int {
	acc := make([]int, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int32: int32->int8 */ func MapInt8ToInt32Arr(m []int32, f func(int32) int8) []int8 {
	acc := make([]int8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int32: int32->int16 */ func MapInt16ToInt32Arr(m []int32, f func(int32) int16) []int16 {
	acc := make([]int16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int32: int32->int32 */ func MapInt32ToInt32Arr(m []int32, f func(int32) int32) []int32 {
	acc := make([]int32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int32: int32->int64 */ func MapInt64ToInt32Arr(m []int32, f func(int32) int64) []int64 {
	acc := make([]int64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int32: int32->uint */ func MapUintToInt32Arr(m []int32, f func(int32) uint) []uint {
	acc := make([]uint, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int32: int32->uint8 */ func MapUint8ToInt32Arr(m []int32, f func(int32) uint8) []uint8 {
	acc := make([]uint8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int32: int32->uint16 */ func MapUint16ToInt32Arr(m []int32, f func(int32) uint16) []uint16 {
	acc := make([]uint16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int32: int32->uint32 */ func MapUint32ToInt32Arr(m []int32, f func(int32) uint32) []uint32 {
	acc := make([]uint32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int32: int32->uint64 */ func MapUint64ToInt32Arr(m []int32, f func(int32) uint64) []uint64 {
	acc := make([]uint64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int32: int32->uintptr */ func MapUintptrToInt32Arr(m []int32, f func(int32) uintptr) []uintptr {
	acc := make([]uintptr, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int32: int32->byte */ func MapByteToInt32Arr(m []int32, f func(int32) byte) []byte {
	acc := make([]byte, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int32: int32->rune */ func MapRuneToInt32Arr(m []int32, f func(int32) rune) []rune {
	acc := make([]rune, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int32: int32->float32 */ func MapFloat32ToInt32Arr(m []int32, f func(int32) float32) []float32 {
	acc := make([]float32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int32: int32->float64 */ func MapFloat64ToInt32Arr(m []int32, f func(int32) float64) []float64 {
	acc := make([]float64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int32: int32->complex64 */ func MapComplex64ToInt32Arr(m []int32, f func(int32) complex64) []complex64 {
	acc := make([]complex64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int32: int32->complex128 */ func MapComplex128ToInt32Arr(m []int32, f func(int32) complex128) []complex128 {
	acc := make([]complex128, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int32: int32->Any */ func MapAnyToInt32Arr(m []int32, f func(int32) Any) []Any {
	acc := make([]Any, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int32: int32->BoolOption */ func MapBoolOptionToInt32Arr(m []int32, f func(int32) BoolOption) []BoolOption {
	acc := make([]BoolOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int32: int32->StringOption */ func MapStringOptionToInt32Arr(m []int32, f func(int32) StringOption) []StringOption {
	acc := make([]StringOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int32: int32->IntOption */ func MapIntOptionToInt32Arr(m []int32, f func(int32) IntOption) []IntOption {
	acc := make([]IntOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int32: int32->Int8Option */ func MapInt8OptionToInt32Arr(m []int32, f func(int32) Int8Option) []Int8Option {
	acc := make([]Int8Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int32: int32->Int16Option */ func MapInt16OptionToInt32Arr(m []int32, f func(int32) Int16Option) []Int16Option {
	acc := make([]Int16Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int32: int32->Int32Option */ func MapInt32OptionToInt32Arr(m []int32, f func(int32) Int32Option) []Int32Option {
	acc := make([]Int32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int32: int32->Int64Option */ func MapInt64OptionToInt32Arr(m []int32, f func(int32) Int64Option) []Int64Option {
	acc := make([]Int64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int32: int32->UintOption */ func MapUintOptionToInt32Arr(m []int32, f func(int32) UintOption) []UintOption {
	acc := make([]UintOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int32: int32->Uint8Option */ func MapUint8OptionToInt32Arr(m []int32, f func(int32) Uint8Option) []Uint8Option {
	acc := make([]Uint8Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int32: int32->Uint16Option */ func MapUint16OptionToInt32Arr(m []int32, f func(int32) Uint16Option) []Uint16Option {
	acc := make([]Uint16Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int32: int32->Uint32Option */ func MapUint32OptionToInt32Arr(m []int32, f func(int32) Uint32Option) []Uint32Option {
	acc := make([]Uint32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int32: int32->Uint64Option */ func MapUint64OptionToInt32Arr(m []int32, f func(int32) Uint64Option) []Uint64Option {
	acc := make([]Uint64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int32: int32->UintptrOption */ func MapUintptrOptionToInt32Arr(m []int32, f func(int32) UintptrOption) []UintptrOption {
	acc := make([]UintptrOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int32: int32->ByteOption */ func MapByteOptionToInt32Arr(m []int32, f func(int32) ByteOption) []ByteOption {
	acc := make([]ByteOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int32: int32->RuneOption */ func MapRuneOptionToInt32Arr(m []int32, f func(int32) RuneOption) []RuneOption {
	acc := make([]RuneOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int32: int32->Float32Option */ func MapFloat32OptionToInt32Arr(m []int32, f func(int32) Float32Option) []Float32Option {
	acc := make([]Float32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int32: int32->Float64Option */ func MapFloat64OptionToInt32Arr(m []int32, f func(int32) Float64Option) []Float64Option {
	acc := make([]Float64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int32: int32->Complex64Option */ func MapComplex64OptionToInt32Arr(m []int32, f func(int32) Complex64Option) []Complex64Option {
	acc := make([]Complex64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int32: int32->Complex128Option */ func MapComplex128OptionToInt32Arr(m []int32, f func(int32) Complex128Option) []Complex128Option {
	acc := make([]Complex128Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int32: int32->AnyOption */ func MapAnyOptionToInt32Arr(m []int32, f func(int32) AnyOption) []AnyOption {
	acc := make([]AnyOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int32: int32->[]bool */ func MapBoolArrToInt32Arr(m []int32, f func(int32) []bool) [][]bool {
	acc := make([][]bool, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int32: int32->[]string */ func MapStringArrToInt32Arr(m []int32, f func(int32) []string) [][]string {
	acc := make([][]string, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int32: int32->[]int */ func MapIntArrToInt32Arr(m []int32, f func(int32) []int) [][]int {
	acc := make([][]int, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int32: int32->[]int8 */ func MapInt8ArrToInt32Arr(m []int32, f func(int32) []int8) [][]int8 {
	acc := make([][]int8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int32: int32->[]int16 */ func MapInt16ArrToInt32Arr(m []int32, f func(int32) []int16) [][]int16 {
	acc := make([][]int16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int32: int32->[]int32 */ func MapInt32ArrToInt32Arr(m []int32, f func(int32) []int32) [][]int32 {
	acc := make([][]int32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int32: int32->[]int64 */ func MapInt64ArrToInt32Arr(m []int32, f func(int32) []int64) [][]int64 {
	acc := make([][]int64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int32: int32->[]uint */ func MapUintArrToInt32Arr(m []int32, f func(int32) []uint) [][]uint {
	acc := make([][]uint, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int32: int32->[]uint8 */ func MapUint8ArrToInt32Arr(m []int32, f func(int32) []uint8) [][]uint8 {
	acc := make([][]uint8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int32: int32->[]uint16 */ func MapUint16ArrToInt32Arr(m []int32, f func(int32) []uint16) [][]uint16 {
	acc := make([][]uint16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int32: int32->[]uint32 */ func MapUint32ArrToInt32Arr(m []int32, f func(int32) []uint32) [][]uint32 {
	acc := make([][]uint32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int32: int32->[]uint64 */ func MapUint64ArrToInt32Arr(m []int32, f func(int32) []uint64) [][]uint64 {
	acc := make([][]uint64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int32: int32->[]uintptr */ func MapUintptrArrToInt32Arr(m []int32, f func(int32) []uintptr) [][]uintptr {
	acc := make([][]uintptr, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int32: int32->[]byte */ func MapByteArrToInt32Arr(m []int32, f func(int32) []byte) [][]byte {
	acc := make([][]byte, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int32: int32->[]rune */ func MapRuneArrToInt32Arr(m []int32, f func(int32) []rune) [][]rune {
	acc := make([][]rune, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int32: int32->[]float32 */ func MapFloat32ArrToInt32Arr(m []int32, f func(int32) []float32) [][]float32 {
	acc := make([][]float32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int32: int32->[]float64 */ func MapFloat64ArrToInt32Arr(m []int32, f func(int32) []float64) [][]float64 {
	acc := make([][]float64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int32: int32->[]complex64 */ func MapComplex64ArrToInt32Arr(m []int32, f func(int32) []complex64) [][]complex64 {
	acc := make([][]complex64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int32: int32->[]complex128 */ func MapComplex128ArrToInt32Arr(m []int32, f func(int32) []complex128) [][]complex128 {
	acc := make([][]complex128, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int32: int32->[]Any */ func MapAnyArrToInt32Arr(m []int32, f func(int32) []Any) [][]Any {
	acc := make([][]Any, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int32: int32->BoolList */ func MapBoolListToInt32Arr(m []int32, f func(int32) BoolList) []BoolList {
	acc := make([]BoolList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int32: int32->StringList */ func MapStringListToInt32Arr(m []int32, f func(int32) StringList) []StringList {
	acc := make([]StringList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int32: int32->IntList */ func MapIntListToInt32Arr(m []int32, f func(int32) IntList) []IntList {
	acc := make([]IntList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int32: int32->Int8List */ func MapInt8ListToInt32Arr(m []int32, f func(int32) Int8List) []Int8List {
	acc := make([]Int8List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int32: int32->Int16List */ func MapInt16ListToInt32Arr(m []int32, f func(int32) Int16List) []Int16List {
	acc := make([]Int16List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int32: int32->Int32List */ func MapInt32ListToInt32Arr(m []int32, f func(int32) Int32List) []Int32List {
	acc := make([]Int32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int32: int32->Int64List */ func MapInt64ListToInt32Arr(m []int32, f func(int32) Int64List) []Int64List {
	acc := make([]Int64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int32: int32->UintList */ func MapUintListToInt32Arr(m []int32, f func(int32) UintList) []UintList {
	acc := make([]UintList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int32: int32->Uint8List */ func MapUint8ListToInt32Arr(m []int32, f func(int32) Uint8List) []Uint8List {
	acc := make([]Uint8List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int32: int32->Uint16List */ func MapUint16ListToInt32Arr(m []int32, f func(int32) Uint16List) []Uint16List {
	acc := make([]Uint16List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int32: int32->Uint32List */ func MapUint32ListToInt32Arr(m []int32, f func(int32) Uint32List) []Uint32List {
	acc := make([]Uint32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int32: int32->Uint64List */ func MapUint64ListToInt32Arr(m []int32, f func(int32) Uint64List) []Uint64List {
	acc := make([]Uint64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int32: int32->UintptrList */ func MapUintptrListToInt32Arr(m []int32, f func(int32) UintptrList) []UintptrList {
	acc := make([]UintptrList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int32: int32->ByteList */ func MapByteListToInt32Arr(m []int32, f func(int32) ByteList) []ByteList {
	acc := make([]ByteList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int32: int32->RuneList */ func MapRuneListToInt32Arr(m []int32, f func(int32) RuneList) []RuneList {
	acc := make([]RuneList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int32: int32->Float32List */ func MapFloat32ListToInt32Arr(m []int32, f func(int32) Float32List) []Float32List {
	acc := make([]Float32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int32: int32->Float64List */ func MapFloat64ListToInt32Arr(m []int32, f func(int32) Float64List) []Float64List {
	acc := make([]Float64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int32: int32->Complex64List */ func MapComplex64ListToInt32Arr(m []int32, f func(int32) Complex64List) []Complex64List {
	acc := make([]Complex64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int32: int32->Complex128List */ func MapComplex128ListToInt32Arr(m []int32, f func(int32) Complex128List) []Complex128List {
	acc := make([]Complex128List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int32: int32->AnyList */ func MapAnyListToInt32Arr(m []int32, f func(int32) AnyList) []AnyList {
	acc := make([]AnyList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int64: int64->bool */ func MapBoolToInt64Arr(m []int64, f func(int64) bool) []bool {
	acc := make([]bool, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int64: int64->string */ func MapStringToInt64Arr(m []int64, f func(int64) string) []string {
	acc := make([]string, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int64: int64->int */ func MapIntToInt64Arr(m []int64, f func(int64) int) []int {
	acc := make([]int, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int64: int64->int8 */ func MapInt8ToInt64Arr(m []int64, f func(int64) int8) []int8 {
	acc := make([]int8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int64: int64->int16 */ func MapInt16ToInt64Arr(m []int64, f func(int64) int16) []int16 {
	acc := make([]int16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int64: int64->int32 */ func MapInt32ToInt64Arr(m []int64, f func(int64) int32) []int32 {
	acc := make([]int32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int64: int64->int64 */ func MapInt64ToInt64Arr(m []int64, f func(int64) int64) []int64 {
	acc := make([]int64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int64: int64->uint */ func MapUintToInt64Arr(m []int64, f func(int64) uint) []uint {
	acc := make([]uint, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int64: int64->uint8 */ func MapUint8ToInt64Arr(m []int64, f func(int64) uint8) []uint8 {
	acc := make([]uint8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int64: int64->uint16 */ func MapUint16ToInt64Arr(m []int64, f func(int64) uint16) []uint16 {
	acc := make([]uint16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int64: int64->uint32 */ func MapUint32ToInt64Arr(m []int64, f func(int64) uint32) []uint32 {
	acc := make([]uint32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int64: int64->uint64 */ func MapUint64ToInt64Arr(m []int64, f func(int64) uint64) []uint64 {
	acc := make([]uint64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int64: int64->uintptr */ func MapUintptrToInt64Arr(m []int64, f func(int64) uintptr) []uintptr {
	acc := make([]uintptr, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int64: int64->byte */ func MapByteToInt64Arr(m []int64, f func(int64) byte) []byte {
	acc := make([]byte, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int64: int64->rune */ func MapRuneToInt64Arr(m []int64, f func(int64) rune) []rune {
	acc := make([]rune, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int64: int64->float32 */ func MapFloat32ToInt64Arr(m []int64, f func(int64) float32) []float32 {
	acc := make([]float32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int64: int64->float64 */ func MapFloat64ToInt64Arr(m []int64, f func(int64) float64) []float64 {
	acc := make([]float64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int64: int64->complex64 */ func MapComplex64ToInt64Arr(m []int64, f func(int64) complex64) []complex64 {
	acc := make([]complex64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int64: int64->complex128 */ func MapComplex128ToInt64Arr(m []int64, f func(int64) complex128) []complex128 {
	acc := make([]complex128, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int64: int64->Any */ func MapAnyToInt64Arr(m []int64, f func(int64) Any) []Any {
	acc := make([]Any, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int64: int64->BoolOption */ func MapBoolOptionToInt64Arr(m []int64, f func(int64) BoolOption) []BoolOption {
	acc := make([]BoolOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int64: int64->StringOption */ func MapStringOptionToInt64Arr(m []int64, f func(int64) StringOption) []StringOption {
	acc := make([]StringOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int64: int64->IntOption */ func MapIntOptionToInt64Arr(m []int64, f func(int64) IntOption) []IntOption {
	acc := make([]IntOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int64: int64->Int8Option */ func MapInt8OptionToInt64Arr(m []int64, f func(int64) Int8Option) []Int8Option {
	acc := make([]Int8Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int64: int64->Int16Option */ func MapInt16OptionToInt64Arr(m []int64, f func(int64) Int16Option) []Int16Option {
	acc := make([]Int16Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int64: int64->Int32Option */ func MapInt32OptionToInt64Arr(m []int64, f func(int64) Int32Option) []Int32Option {
	acc := make([]Int32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int64: int64->Int64Option */ func MapInt64OptionToInt64Arr(m []int64, f func(int64) Int64Option) []Int64Option {
	acc := make([]Int64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int64: int64->UintOption */ func MapUintOptionToInt64Arr(m []int64, f func(int64) UintOption) []UintOption {
	acc := make([]UintOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int64: int64->Uint8Option */ func MapUint8OptionToInt64Arr(m []int64, f func(int64) Uint8Option) []Uint8Option {
	acc := make([]Uint8Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int64: int64->Uint16Option */ func MapUint16OptionToInt64Arr(m []int64, f func(int64) Uint16Option) []Uint16Option {
	acc := make([]Uint16Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int64: int64->Uint32Option */ func MapUint32OptionToInt64Arr(m []int64, f func(int64) Uint32Option) []Uint32Option {
	acc := make([]Uint32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int64: int64->Uint64Option */ func MapUint64OptionToInt64Arr(m []int64, f func(int64) Uint64Option) []Uint64Option {
	acc := make([]Uint64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int64: int64->UintptrOption */ func MapUintptrOptionToInt64Arr(m []int64, f func(int64) UintptrOption) []UintptrOption {
	acc := make([]UintptrOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int64: int64->ByteOption */ func MapByteOptionToInt64Arr(m []int64, f func(int64) ByteOption) []ByteOption {
	acc := make([]ByteOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int64: int64->RuneOption */ func MapRuneOptionToInt64Arr(m []int64, f func(int64) RuneOption) []RuneOption {
	acc := make([]RuneOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int64: int64->Float32Option */ func MapFloat32OptionToInt64Arr(m []int64, f func(int64) Float32Option) []Float32Option {
	acc := make([]Float32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int64: int64->Float64Option */ func MapFloat64OptionToInt64Arr(m []int64, f func(int64) Float64Option) []Float64Option {
	acc := make([]Float64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int64: int64->Complex64Option */ func MapComplex64OptionToInt64Arr(m []int64, f func(int64) Complex64Option) []Complex64Option {
	acc := make([]Complex64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int64: int64->Complex128Option */ func MapComplex128OptionToInt64Arr(m []int64, f func(int64) Complex128Option) []Complex128Option {
	acc := make([]Complex128Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int64: int64->AnyOption */ func MapAnyOptionToInt64Arr(m []int64, f func(int64) AnyOption) []AnyOption {
	acc := make([]AnyOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int64: int64->[]bool */ func MapBoolArrToInt64Arr(m []int64, f func(int64) []bool) [][]bool {
	acc := make([][]bool, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int64: int64->[]string */ func MapStringArrToInt64Arr(m []int64, f func(int64) []string) [][]string {
	acc := make([][]string, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int64: int64->[]int */ func MapIntArrToInt64Arr(m []int64, f func(int64) []int) [][]int {
	acc := make([][]int, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int64: int64->[]int8 */ func MapInt8ArrToInt64Arr(m []int64, f func(int64) []int8) [][]int8 {
	acc := make([][]int8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int64: int64->[]int16 */ func MapInt16ArrToInt64Arr(m []int64, f func(int64) []int16) [][]int16 {
	acc := make([][]int16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int64: int64->[]int32 */ func MapInt32ArrToInt64Arr(m []int64, f func(int64) []int32) [][]int32 {
	acc := make([][]int32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int64: int64->[]int64 */ func MapInt64ArrToInt64Arr(m []int64, f func(int64) []int64) [][]int64 {
	acc := make([][]int64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int64: int64->[]uint */ func MapUintArrToInt64Arr(m []int64, f func(int64) []uint) [][]uint {
	acc := make([][]uint, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int64: int64->[]uint8 */ func MapUint8ArrToInt64Arr(m []int64, f func(int64) []uint8) [][]uint8 {
	acc := make([][]uint8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int64: int64->[]uint16 */ func MapUint16ArrToInt64Arr(m []int64, f func(int64) []uint16) [][]uint16 {
	acc := make([][]uint16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int64: int64->[]uint32 */ func MapUint32ArrToInt64Arr(m []int64, f func(int64) []uint32) [][]uint32 {
	acc := make([][]uint32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int64: int64->[]uint64 */ func MapUint64ArrToInt64Arr(m []int64, f func(int64) []uint64) [][]uint64 {
	acc := make([][]uint64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int64: int64->[]uintptr */ func MapUintptrArrToInt64Arr(m []int64, f func(int64) []uintptr) [][]uintptr {
	acc := make([][]uintptr, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int64: int64->[]byte */ func MapByteArrToInt64Arr(m []int64, f func(int64) []byte) [][]byte {
	acc := make([][]byte, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int64: int64->[]rune */ func MapRuneArrToInt64Arr(m []int64, f func(int64) []rune) [][]rune {
	acc := make([][]rune, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int64: int64->[]float32 */ func MapFloat32ArrToInt64Arr(m []int64, f func(int64) []float32) [][]float32 {
	acc := make([][]float32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int64: int64->[]float64 */ func MapFloat64ArrToInt64Arr(m []int64, f func(int64) []float64) [][]float64 {
	acc := make([][]float64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int64: int64->[]complex64 */ func MapComplex64ArrToInt64Arr(m []int64, f func(int64) []complex64) [][]complex64 {
	acc := make([][]complex64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int64: int64->[]complex128 */ func MapComplex128ArrToInt64Arr(m []int64, f func(int64) []complex128) [][]complex128 {
	acc := make([][]complex128, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int64: int64->[]Any */ func MapAnyArrToInt64Arr(m []int64, f func(int64) []Any) [][]Any {
	acc := make([][]Any, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int64: int64->BoolList */ func MapBoolListToInt64Arr(m []int64, f func(int64) BoolList) []BoolList {
	acc := make([]BoolList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int64: int64->StringList */ func MapStringListToInt64Arr(m []int64, f func(int64) StringList) []StringList {
	acc := make([]StringList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int64: int64->IntList */ func MapIntListToInt64Arr(m []int64, f func(int64) IntList) []IntList {
	acc := make([]IntList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int64: int64->Int8List */ func MapInt8ListToInt64Arr(m []int64, f func(int64) Int8List) []Int8List {
	acc := make([]Int8List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int64: int64->Int16List */ func MapInt16ListToInt64Arr(m []int64, f func(int64) Int16List) []Int16List {
	acc := make([]Int16List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int64: int64->Int32List */ func MapInt32ListToInt64Arr(m []int64, f func(int64) Int32List) []Int32List {
	acc := make([]Int32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int64: int64->Int64List */ func MapInt64ListToInt64Arr(m []int64, f func(int64) Int64List) []Int64List {
	acc := make([]Int64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int64: int64->UintList */ func MapUintListToInt64Arr(m []int64, f func(int64) UintList) []UintList {
	acc := make([]UintList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int64: int64->Uint8List */ func MapUint8ListToInt64Arr(m []int64, f func(int64) Uint8List) []Uint8List {
	acc := make([]Uint8List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int64: int64->Uint16List */ func MapUint16ListToInt64Arr(m []int64, f func(int64) Uint16List) []Uint16List {
	acc := make([]Uint16List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int64: int64->Uint32List */ func MapUint32ListToInt64Arr(m []int64, f func(int64) Uint32List) []Uint32List {
	acc := make([]Uint32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int64: int64->Uint64List */ func MapUint64ListToInt64Arr(m []int64, f func(int64) Uint64List) []Uint64List {
	acc := make([]Uint64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int64: int64->UintptrList */ func MapUintptrListToInt64Arr(m []int64, f func(int64) UintptrList) []UintptrList {
	acc := make([]UintptrList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int64: int64->ByteList */ func MapByteListToInt64Arr(m []int64, f func(int64) ByteList) []ByteList {
	acc := make([]ByteList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int64: int64->RuneList */ func MapRuneListToInt64Arr(m []int64, f func(int64) RuneList) []RuneList {
	acc := make([]RuneList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int64: int64->Float32List */ func MapFloat32ListToInt64Arr(m []int64, f func(int64) Float32List) []Float32List {
	acc := make([]Float32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int64: int64->Float64List */ func MapFloat64ListToInt64Arr(m []int64, f func(int64) Float64List) []Float64List {
	acc := make([]Float64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int64: int64->Complex64List */ func MapComplex64ListToInt64Arr(m []int64, f func(int64) Complex64List) []Complex64List {
	acc := make([]Complex64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int64: int64->Complex128List */ func MapComplex128ListToInt64Arr(m []int64, f func(int64) Complex128List) []Complex128List {
	acc := make([]Complex128List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []int64: int64->AnyList */ func MapAnyListToInt64Arr(m []int64, f func(int64) AnyList) []AnyList {
	acc := make([]AnyList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint: uint->bool */ func MapBoolToUintArr(m []uint, f func(uint) bool) []bool {
	acc := make([]bool, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint: uint->string */ func MapStringToUintArr(m []uint, f func(uint) string) []string {
	acc := make([]string, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint: uint->int */ func MapIntToUintArr(m []uint, f func(uint) int) []int {
	acc := make([]int, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint: uint->int8 */ func MapInt8ToUintArr(m []uint, f func(uint) int8) []int8 {
	acc := make([]int8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint: uint->int16 */ func MapInt16ToUintArr(m []uint, f func(uint) int16) []int16 {
	acc := make([]int16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint: uint->int32 */ func MapInt32ToUintArr(m []uint, f func(uint) int32) []int32 {
	acc := make([]int32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint: uint->int64 */ func MapInt64ToUintArr(m []uint, f func(uint) int64) []int64 {
	acc := make([]int64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint: uint->uint */ func MapUintToUintArr(m []uint, f func(uint) uint) []uint {
	acc := make([]uint, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint: uint->uint8 */ func MapUint8ToUintArr(m []uint, f func(uint) uint8) []uint8 {
	acc := make([]uint8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint: uint->uint16 */ func MapUint16ToUintArr(m []uint, f func(uint) uint16) []uint16 {
	acc := make([]uint16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint: uint->uint32 */ func MapUint32ToUintArr(m []uint, f func(uint) uint32) []uint32 {
	acc := make([]uint32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint: uint->uint64 */ func MapUint64ToUintArr(m []uint, f func(uint) uint64) []uint64 {
	acc := make([]uint64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint: uint->uintptr */ func MapUintptrToUintArr(m []uint, f func(uint) uintptr) []uintptr {
	acc := make([]uintptr, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint: uint->byte */ func MapByteToUintArr(m []uint, f func(uint) byte) []byte {
	acc := make([]byte, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint: uint->rune */ func MapRuneToUintArr(m []uint, f func(uint) rune) []rune {
	acc := make([]rune, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint: uint->float32 */ func MapFloat32ToUintArr(m []uint, f func(uint) float32) []float32 {
	acc := make([]float32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint: uint->float64 */ func MapFloat64ToUintArr(m []uint, f func(uint) float64) []float64 {
	acc := make([]float64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint: uint->complex64 */ func MapComplex64ToUintArr(m []uint, f func(uint) complex64) []complex64 {
	acc := make([]complex64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint: uint->complex128 */ func MapComplex128ToUintArr(m []uint, f func(uint) complex128) []complex128 {
	acc := make([]complex128, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint: uint->Any */ func MapAnyToUintArr(m []uint, f func(uint) Any) []Any {
	acc := make([]Any, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint: uint->BoolOption */ func MapBoolOptionToUintArr(m []uint, f func(uint) BoolOption) []BoolOption {
	acc := make([]BoolOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint: uint->StringOption */ func MapStringOptionToUintArr(m []uint, f func(uint) StringOption) []StringOption {
	acc := make([]StringOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint: uint->IntOption */ func MapIntOptionToUintArr(m []uint, f func(uint) IntOption) []IntOption {
	acc := make([]IntOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint: uint->Int8Option */ func MapInt8OptionToUintArr(m []uint, f func(uint) Int8Option) []Int8Option {
	acc := make([]Int8Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint: uint->Int16Option */ func MapInt16OptionToUintArr(m []uint, f func(uint) Int16Option) []Int16Option {
	acc := make([]Int16Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint: uint->Int32Option */ func MapInt32OptionToUintArr(m []uint, f func(uint) Int32Option) []Int32Option {
	acc := make([]Int32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint: uint->Int64Option */ func MapInt64OptionToUintArr(m []uint, f func(uint) Int64Option) []Int64Option {
	acc := make([]Int64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint: uint->UintOption */ func MapUintOptionToUintArr(m []uint, f func(uint) UintOption) []UintOption {
	acc := make([]UintOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint: uint->Uint8Option */ func MapUint8OptionToUintArr(m []uint, f func(uint) Uint8Option) []Uint8Option {
	acc := make([]Uint8Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint: uint->Uint16Option */ func MapUint16OptionToUintArr(m []uint, f func(uint) Uint16Option) []Uint16Option {
	acc := make([]Uint16Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint: uint->Uint32Option */ func MapUint32OptionToUintArr(m []uint, f func(uint) Uint32Option) []Uint32Option {
	acc := make([]Uint32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint: uint->Uint64Option */ func MapUint64OptionToUintArr(m []uint, f func(uint) Uint64Option) []Uint64Option {
	acc := make([]Uint64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint: uint->UintptrOption */ func MapUintptrOptionToUintArr(m []uint, f func(uint) UintptrOption) []UintptrOption {
	acc := make([]UintptrOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint: uint->ByteOption */ func MapByteOptionToUintArr(m []uint, f func(uint) ByteOption) []ByteOption {
	acc := make([]ByteOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint: uint->RuneOption */ func MapRuneOptionToUintArr(m []uint, f func(uint) RuneOption) []RuneOption {
	acc := make([]RuneOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint: uint->Float32Option */ func MapFloat32OptionToUintArr(m []uint, f func(uint) Float32Option) []Float32Option {
	acc := make([]Float32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint: uint->Float64Option */ func MapFloat64OptionToUintArr(m []uint, f func(uint) Float64Option) []Float64Option {
	acc := make([]Float64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint: uint->Complex64Option */ func MapComplex64OptionToUintArr(m []uint, f func(uint) Complex64Option) []Complex64Option {
	acc := make([]Complex64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint: uint->Complex128Option */ func MapComplex128OptionToUintArr(m []uint, f func(uint) Complex128Option) []Complex128Option {
	acc := make([]Complex128Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint: uint->AnyOption */ func MapAnyOptionToUintArr(m []uint, f func(uint) AnyOption) []AnyOption {
	acc := make([]AnyOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint: uint->[]bool */ func MapBoolArrToUintArr(m []uint, f func(uint) []bool) [][]bool {
	acc := make([][]bool, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint: uint->[]string */ func MapStringArrToUintArr(m []uint, f func(uint) []string) [][]string {
	acc := make([][]string, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint: uint->[]int */ func MapIntArrToUintArr(m []uint, f func(uint) []int) [][]int {
	acc := make([][]int, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint: uint->[]int8 */ func MapInt8ArrToUintArr(m []uint, f func(uint) []int8) [][]int8 {
	acc := make([][]int8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint: uint->[]int16 */ func MapInt16ArrToUintArr(m []uint, f func(uint) []int16) [][]int16 {
	acc := make([][]int16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint: uint->[]int32 */ func MapInt32ArrToUintArr(m []uint, f func(uint) []int32) [][]int32 {
	acc := make([][]int32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint: uint->[]int64 */ func MapInt64ArrToUintArr(m []uint, f func(uint) []int64) [][]int64 {
	acc := make([][]int64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint: uint->[]uint */ func MapUintArrToUintArr(m []uint, f func(uint) []uint) [][]uint {
	acc := make([][]uint, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint: uint->[]uint8 */ func MapUint8ArrToUintArr(m []uint, f func(uint) []uint8) [][]uint8 {
	acc := make([][]uint8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint: uint->[]uint16 */ func MapUint16ArrToUintArr(m []uint, f func(uint) []uint16) [][]uint16 {
	acc := make([][]uint16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint: uint->[]uint32 */ func MapUint32ArrToUintArr(m []uint, f func(uint) []uint32) [][]uint32 {
	acc := make([][]uint32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint: uint->[]uint64 */ func MapUint64ArrToUintArr(m []uint, f func(uint) []uint64) [][]uint64 {
	acc := make([][]uint64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint: uint->[]uintptr */ func MapUintptrArrToUintArr(m []uint, f func(uint) []uintptr) [][]uintptr {
	acc := make([][]uintptr, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint: uint->[]byte */ func MapByteArrToUintArr(m []uint, f func(uint) []byte) [][]byte {
	acc := make([][]byte, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint: uint->[]rune */ func MapRuneArrToUintArr(m []uint, f func(uint) []rune) [][]rune {
	acc := make([][]rune, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint: uint->[]float32 */ func MapFloat32ArrToUintArr(m []uint, f func(uint) []float32) [][]float32 {
	acc := make([][]float32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint: uint->[]float64 */ func MapFloat64ArrToUintArr(m []uint, f func(uint) []float64) [][]float64 {
	acc := make([][]float64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint: uint->[]complex64 */ func MapComplex64ArrToUintArr(m []uint, f func(uint) []complex64) [][]complex64 {
	acc := make([][]complex64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint: uint->[]complex128 */ func MapComplex128ArrToUintArr(m []uint, f func(uint) []complex128) [][]complex128 {
	acc := make([][]complex128, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint: uint->[]Any */ func MapAnyArrToUintArr(m []uint, f func(uint) []Any) [][]Any {
	acc := make([][]Any, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint: uint->BoolList */ func MapBoolListToUintArr(m []uint, f func(uint) BoolList) []BoolList {
	acc := make([]BoolList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint: uint->StringList */ func MapStringListToUintArr(m []uint, f func(uint) StringList) []StringList {
	acc := make([]StringList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint: uint->IntList */ func MapIntListToUintArr(m []uint, f func(uint) IntList) []IntList {
	acc := make([]IntList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint: uint->Int8List */ func MapInt8ListToUintArr(m []uint, f func(uint) Int8List) []Int8List {
	acc := make([]Int8List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint: uint->Int16List */ func MapInt16ListToUintArr(m []uint, f func(uint) Int16List) []Int16List {
	acc := make([]Int16List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint: uint->Int32List */ func MapInt32ListToUintArr(m []uint, f func(uint) Int32List) []Int32List {
	acc := make([]Int32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint: uint->Int64List */ func MapInt64ListToUintArr(m []uint, f func(uint) Int64List) []Int64List {
	acc := make([]Int64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint: uint->UintList */ func MapUintListToUintArr(m []uint, f func(uint) UintList) []UintList {
	acc := make([]UintList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint: uint->Uint8List */ func MapUint8ListToUintArr(m []uint, f func(uint) Uint8List) []Uint8List {
	acc := make([]Uint8List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint: uint->Uint16List */ func MapUint16ListToUintArr(m []uint, f func(uint) Uint16List) []Uint16List {
	acc := make([]Uint16List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint: uint->Uint32List */ func MapUint32ListToUintArr(m []uint, f func(uint) Uint32List) []Uint32List {
	acc := make([]Uint32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint: uint->Uint64List */ func MapUint64ListToUintArr(m []uint, f func(uint) Uint64List) []Uint64List {
	acc := make([]Uint64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint: uint->UintptrList */ func MapUintptrListToUintArr(m []uint, f func(uint) UintptrList) []UintptrList {
	acc := make([]UintptrList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint: uint->ByteList */ func MapByteListToUintArr(m []uint, f func(uint) ByteList) []ByteList {
	acc := make([]ByteList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint: uint->RuneList */ func MapRuneListToUintArr(m []uint, f func(uint) RuneList) []RuneList {
	acc := make([]RuneList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint: uint->Float32List */ func MapFloat32ListToUintArr(m []uint, f func(uint) Float32List) []Float32List {
	acc := make([]Float32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint: uint->Float64List */ func MapFloat64ListToUintArr(m []uint, f func(uint) Float64List) []Float64List {
	acc := make([]Float64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint: uint->Complex64List */ func MapComplex64ListToUintArr(m []uint, f func(uint) Complex64List) []Complex64List {
	acc := make([]Complex64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint: uint->Complex128List */ func MapComplex128ListToUintArr(m []uint, f func(uint) Complex128List) []Complex128List {
	acc := make([]Complex128List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint: uint->AnyList */ func MapAnyListToUintArr(m []uint, f func(uint) AnyList) []AnyList {
	acc := make([]AnyList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint8: uint8->bool */ func MapBoolToUint8Arr(m []uint8, f func(uint8) bool) []bool {
	acc := make([]bool, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint8: uint8->string */ func MapStringToUint8Arr(m []uint8, f func(uint8) string) []string {
	acc := make([]string, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint8: uint8->int */ func MapIntToUint8Arr(m []uint8, f func(uint8) int) []int {
	acc := make([]int, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint8: uint8->int8 */ func MapInt8ToUint8Arr(m []uint8, f func(uint8) int8) []int8 {
	acc := make([]int8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint8: uint8->int16 */ func MapInt16ToUint8Arr(m []uint8, f func(uint8) int16) []int16 {
	acc := make([]int16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint8: uint8->int32 */ func MapInt32ToUint8Arr(m []uint8, f func(uint8) int32) []int32 {
	acc := make([]int32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint8: uint8->int64 */ func MapInt64ToUint8Arr(m []uint8, f func(uint8) int64) []int64 {
	acc := make([]int64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint8: uint8->uint */ func MapUintToUint8Arr(m []uint8, f func(uint8) uint) []uint {
	acc := make([]uint, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint8: uint8->uint8 */ func MapUint8ToUint8Arr(m []uint8, f func(uint8) uint8) []uint8 {
	acc := make([]uint8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint8: uint8->uint16 */ func MapUint16ToUint8Arr(m []uint8, f func(uint8) uint16) []uint16 {
	acc := make([]uint16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint8: uint8->uint32 */ func MapUint32ToUint8Arr(m []uint8, f func(uint8) uint32) []uint32 {
	acc := make([]uint32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint8: uint8->uint64 */ func MapUint64ToUint8Arr(m []uint8, f func(uint8) uint64) []uint64 {
	acc := make([]uint64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint8: uint8->uintptr */ func MapUintptrToUint8Arr(m []uint8, f func(uint8) uintptr) []uintptr {
	acc := make([]uintptr, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint8: uint8->byte */ func MapByteToUint8Arr(m []uint8, f func(uint8) byte) []byte {
	acc := make([]byte, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint8: uint8->rune */ func MapRuneToUint8Arr(m []uint8, f func(uint8) rune) []rune {
	acc := make([]rune, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint8: uint8->float32 */ func MapFloat32ToUint8Arr(m []uint8, f func(uint8) float32) []float32 {
	acc := make([]float32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint8: uint8->float64 */ func MapFloat64ToUint8Arr(m []uint8, f func(uint8) float64) []float64 {
	acc := make([]float64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint8: uint8->complex64 */ func MapComplex64ToUint8Arr(m []uint8, f func(uint8) complex64) []complex64 {
	acc := make([]complex64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint8: uint8->complex128 */ func MapComplex128ToUint8Arr(m []uint8, f func(uint8) complex128) []complex128 {
	acc := make([]complex128, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint8: uint8->Any */ func MapAnyToUint8Arr(m []uint8, f func(uint8) Any) []Any {
	acc := make([]Any, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint8: uint8->BoolOption */ func MapBoolOptionToUint8Arr(m []uint8, f func(uint8) BoolOption) []BoolOption {
	acc := make([]BoolOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint8: uint8->StringOption */ func MapStringOptionToUint8Arr(m []uint8, f func(uint8) StringOption) []StringOption {
	acc := make([]StringOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint8: uint8->IntOption */ func MapIntOptionToUint8Arr(m []uint8, f func(uint8) IntOption) []IntOption {
	acc := make([]IntOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint8: uint8->Int8Option */ func MapInt8OptionToUint8Arr(m []uint8, f func(uint8) Int8Option) []Int8Option {
	acc := make([]Int8Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint8: uint8->Int16Option */ func MapInt16OptionToUint8Arr(m []uint8, f func(uint8) Int16Option) []Int16Option {
	acc := make([]Int16Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint8: uint8->Int32Option */ func MapInt32OptionToUint8Arr(m []uint8, f func(uint8) Int32Option) []Int32Option {
	acc := make([]Int32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint8: uint8->Int64Option */ func MapInt64OptionToUint8Arr(m []uint8, f func(uint8) Int64Option) []Int64Option {
	acc := make([]Int64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint8: uint8->UintOption */ func MapUintOptionToUint8Arr(m []uint8, f func(uint8) UintOption) []UintOption {
	acc := make([]UintOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint8: uint8->Uint8Option */ func MapUint8OptionToUint8Arr(m []uint8, f func(uint8) Uint8Option) []Uint8Option {
	acc := make([]Uint8Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint8: uint8->Uint16Option */ func MapUint16OptionToUint8Arr(m []uint8, f func(uint8) Uint16Option) []Uint16Option {
	acc := make([]Uint16Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint8: uint8->Uint32Option */ func MapUint32OptionToUint8Arr(m []uint8, f func(uint8) Uint32Option) []Uint32Option {
	acc := make([]Uint32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint8: uint8->Uint64Option */ func MapUint64OptionToUint8Arr(m []uint8, f func(uint8) Uint64Option) []Uint64Option {
	acc := make([]Uint64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint8: uint8->UintptrOption */ func MapUintptrOptionToUint8Arr(m []uint8, f func(uint8) UintptrOption) []UintptrOption {
	acc := make([]UintptrOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint8: uint8->ByteOption */ func MapByteOptionToUint8Arr(m []uint8, f func(uint8) ByteOption) []ByteOption {
	acc := make([]ByteOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint8: uint8->RuneOption */ func MapRuneOptionToUint8Arr(m []uint8, f func(uint8) RuneOption) []RuneOption {
	acc := make([]RuneOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint8: uint8->Float32Option */ func MapFloat32OptionToUint8Arr(m []uint8, f func(uint8) Float32Option) []Float32Option {
	acc := make([]Float32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint8: uint8->Float64Option */ func MapFloat64OptionToUint8Arr(m []uint8, f func(uint8) Float64Option) []Float64Option {
	acc := make([]Float64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint8: uint8->Complex64Option */ func MapComplex64OptionToUint8Arr(m []uint8, f func(uint8) Complex64Option) []Complex64Option {
	acc := make([]Complex64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint8: uint8->Complex128Option */ func MapComplex128OptionToUint8Arr(m []uint8, f func(uint8) Complex128Option) []Complex128Option {
	acc := make([]Complex128Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint8: uint8->AnyOption */ func MapAnyOptionToUint8Arr(m []uint8, f func(uint8) AnyOption) []AnyOption {
	acc := make([]AnyOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint8: uint8->[]bool */ func MapBoolArrToUint8Arr(m []uint8, f func(uint8) []bool) [][]bool {
	acc := make([][]bool, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint8: uint8->[]string */ func MapStringArrToUint8Arr(m []uint8, f func(uint8) []string) [][]string {
	acc := make([][]string, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint8: uint8->[]int */ func MapIntArrToUint8Arr(m []uint8, f func(uint8) []int) [][]int {
	acc := make([][]int, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint8: uint8->[]int8 */ func MapInt8ArrToUint8Arr(m []uint8, f func(uint8) []int8) [][]int8 {
	acc := make([][]int8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint8: uint8->[]int16 */ func MapInt16ArrToUint8Arr(m []uint8, f func(uint8) []int16) [][]int16 {
	acc := make([][]int16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint8: uint8->[]int32 */ func MapInt32ArrToUint8Arr(m []uint8, f func(uint8) []int32) [][]int32 {
	acc := make([][]int32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint8: uint8->[]int64 */ func MapInt64ArrToUint8Arr(m []uint8, f func(uint8) []int64) [][]int64 {
	acc := make([][]int64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint8: uint8->[]uint */ func MapUintArrToUint8Arr(m []uint8, f func(uint8) []uint) [][]uint {
	acc := make([][]uint, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint8: uint8->[]uint8 */ func MapUint8ArrToUint8Arr(m []uint8, f func(uint8) []uint8) [][]uint8 {
	acc := make([][]uint8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint8: uint8->[]uint16 */ func MapUint16ArrToUint8Arr(m []uint8, f func(uint8) []uint16) [][]uint16 {
	acc := make([][]uint16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint8: uint8->[]uint32 */ func MapUint32ArrToUint8Arr(m []uint8, f func(uint8) []uint32) [][]uint32 {
	acc := make([][]uint32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint8: uint8->[]uint64 */ func MapUint64ArrToUint8Arr(m []uint8, f func(uint8) []uint64) [][]uint64 {
	acc := make([][]uint64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint8: uint8->[]uintptr */ func MapUintptrArrToUint8Arr(m []uint8, f func(uint8) []uintptr) [][]uintptr {
	acc := make([][]uintptr, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint8: uint8->[]byte */ func MapByteArrToUint8Arr(m []uint8, f func(uint8) []byte) [][]byte {
	acc := make([][]byte, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint8: uint8->[]rune */ func MapRuneArrToUint8Arr(m []uint8, f func(uint8) []rune) [][]rune {
	acc := make([][]rune, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint8: uint8->[]float32 */ func MapFloat32ArrToUint8Arr(m []uint8, f func(uint8) []float32) [][]float32 {
	acc := make([][]float32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint8: uint8->[]float64 */ func MapFloat64ArrToUint8Arr(m []uint8, f func(uint8) []float64) [][]float64 {
	acc := make([][]float64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint8: uint8->[]complex64 */ func MapComplex64ArrToUint8Arr(m []uint8, f func(uint8) []complex64) [][]complex64 {
	acc := make([][]complex64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint8: uint8->[]complex128 */ func MapComplex128ArrToUint8Arr(m []uint8, f func(uint8) []complex128) [][]complex128 {
	acc := make([][]complex128, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint8: uint8->[]Any */ func MapAnyArrToUint8Arr(m []uint8, f func(uint8) []Any) [][]Any {
	acc := make([][]Any, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint8: uint8->BoolList */ func MapBoolListToUint8Arr(m []uint8, f func(uint8) BoolList) []BoolList {
	acc := make([]BoolList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint8: uint8->StringList */ func MapStringListToUint8Arr(m []uint8, f func(uint8) StringList) []StringList {
	acc := make([]StringList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint8: uint8->IntList */ func MapIntListToUint8Arr(m []uint8, f func(uint8) IntList) []IntList {
	acc := make([]IntList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint8: uint8->Int8List */ func MapInt8ListToUint8Arr(m []uint8, f func(uint8) Int8List) []Int8List {
	acc := make([]Int8List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint8: uint8->Int16List */ func MapInt16ListToUint8Arr(m []uint8, f func(uint8) Int16List) []Int16List {
	acc := make([]Int16List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint8: uint8->Int32List */ func MapInt32ListToUint8Arr(m []uint8, f func(uint8) Int32List) []Int32List {
	acc := make([]Int32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint8: uint8->Int64List */ func MapInt64ListToUint8Arr(m []uint8, f func(uint8) Int64List) []Int64List {
	acc := make([]Int64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint8: uint8->UintList */ func MapUintListToUint8Arr(m []uint8, f func(uint8) UintList) []UintList {
	acc := make([]UintList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint8: uint8->Uint8List */ func MapUint8ListToUint8Arr(m []uint8, f func(uint8) Uint8List) []Uint8List {
	acc := make([]Uint8List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint8: uint8->Uint16List */ func MapUint16ListToUint8Arr(m []uint8, f func(uint8) Uint16List) []Uint16List {
	acc := make([]Uint16List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint8: uint8->Uint32List */ func MapUint32ListToUint8Arr(m []uint8, f func(uint8) Uint32List) []Uint32List {
	acc := make([]Uint32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint8: uint8->Uint64List */ func MapUint64ListToUint8Arr(m []uint8, f func(uint8) Uint64List) []Uint64List {
	acc := make([]Uint64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint8: uint8->UintptrList */ func MapUintptrListToUint8Arr(m []uint8, f func(uint8) UintptrList) []UintptrList {
	acc := make([]UintptrList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint8: uint8->ByteList */ func MapByteListToUint8Arr(m []uint8, f func(uint8) ByteList) []ByteList {
	acc := make([]ByteList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint8: uint8->RuneList */ func MapRuneListToUint8Arr(m []uint8, f func(uint8) RuneList) []RuneList {
	acc := make([]RuneList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint8: uint8->Float32List */ func MapFloat32ListToUint8Arr(m []uint8, f func(uint8) Float32List) []Float32List {
	acc := make([]Float32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint8: uint8->Float64List */ func MapFloat64ListToUint8Arr(m []uint8, f func(uint8) Float64List) []Float64List {
	acc := make([]Float64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint8: uint8->Complex64List */ func MapComplex64ListToUint8Arr(m []uint8, f func(uint8) Complex64List) []Complex64List {
	acc := make([]Complex64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint8: uint8->Complex128List */ func MapComplex128ListToUint8Arr(m []uint8, f func(uint8) Complex128List) []Complex128List {
	acc := make([]Complex128List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint8: uint8->AnyList */ func MapAnyListToUint8Arr(m []uint8, f func(uint8) AnyList) []AnyList {
	acc := make([]AnyList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint16: uint16->bool */ func MapBoolToUint16Arr(m []uint16, f func(uint16) bool) []bool {
	acc := make([]bool, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint16: uint16->string */ func MapStringToUint16Arr(m []uint16, f func(uint16) string) []string {
	acc := make([]string, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint16: uint16->int */ func MapIntToUint16Arr(m []uint16, f func(uint16) int) []int {
	acc := make([]int, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint16: uint16->int8 */ func MapInt8ToUint16Arr(m []uint16, f func(uint16) int8) []int8 {
	acc := make([]int8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint16: uint16->int16 */ func MapInt16ToUint16Arr(m []uint16, f func(uint16) int16) []int16 {
	acc := make([]int16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint16: uint16->int32 */ func MapInt32ToUint16Arr(m []uint16, f func(uint16) int32) []int32 {
	acc := make([]int32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint16: uint16->int64 */ func MapInt64ToUint16Arr(m []uint16, f func(uint16) int64) []int64 {
	acc := make([]int64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint16: uint16->uint */ func MapUintToUint16Arr(m []uint16, f func(uint16) uint) []uint {
	acc := make([]uint, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint16: uint16->uint8 */ func MapUint8ToUint16Arr(m []uint16, f func(uint16) uint8) []uint8 {
	acc := make([]uint8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint16: uint16->uint16 */ func MapUint16ToUint16Arr(m []uint16, f func(uint16) uint16) []uint16 {
	acc := make([]uint16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint16: uint16->uint32 */ func MapUint32ToUint16Arr(m []uint16, f func(uint16) uint32) []uint32 {
	acc := make([]uint32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint16: uint16->uint64 */ func MapUint64ToUint16Arr(m []uint16, f func(uint16) uint64) []uint64 {
	acc := make([]uint64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint16: uint16->uintptr */ func MapUintptrToUint16Arr(m []uint16, f func(uint16) uintptr) []uintptr {
	acc := make([]uintptr, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint16: uint16->byte */ func MapByteToUint16Arr(m []uint16, f func(uint16) byte) []byte {
	acc := make([]byte, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint16: uint16->rune */ func MapRuneToUint16Arr(m []uint16, f func(uint16) rune) []rune {
	acc := make([]rune, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint16: uint16->float32 */ func MapFloat32ToUint16Arr(m []uint16, f func(uint16) float32) []float32 {
	acc := make([]float32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint16: uint16->float64 */ func MapFloat64ToUint16Arr(m []uint16, f func(uint16) float64) []float64 {
	acc := make([]float64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint16: uint16->complex64 */ func MapComplex64ToUint16Arr(m []uint16, f func(uint16) complex64) []complex64 {
	acc := make([]complex64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint16: uint16->complex128 */ func MapComplex128ToUint16Arr(m []uint16, f func(uint16) complex128) []complex128 {
	acc := make([]complex128, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint16: uint16->Any */ func MapAnyToUint16Arr(m []uint16, f func(uint16) Any) []Any {
	acc := make([]Any, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint16: uint16->BoolOption */ func MapBoolOptionToUint16Arr(m []uint16, f func(uint16) BoolOption) []BoolOption {
	acc := make([]BoolOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint16: uint16->StringOption */ func MapStringOptionToUint16Arr(m []uint16, f func(uint16) StringOption) []StringOption {
	acc := make([]StringOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint16: uint16->IntOption */ func MapIntOptionToUint16Arr(m []uint16, f func(uint16) IntOption) []IntOption {
	acc := make([]IntOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint16: uint16->Int8Option */ func MapInt8OptionToUint16Arr(m []uint16, f func(uint16) Int8Option) []Int8Option {
	acc := make([]Int8Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint16: uint16->Int16Option */ func MapInt16OptionToUint16Arr(m []uint16, f func(uint16) Int16Option) []Int16Option {
	acc := make([]Int16Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint16: uint16->Int32Option */ func MapInt32OptionToUint16Arr(m []uint16, f func(uint16) Int32Option) []Int32Option {
	acc := make([]Int32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint16: uint16->Int64Option */ func MapInt64OptionToUint16Arr(m []uint16, f func(uint16) Int64Option) []Int64Option {
	acc := make([]Int64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint16: uint16->UintOption */ func MapUintOptionToUint16Arr(m []uint16, f func(uint16) UintOption) []UintOption {
	acc := make([]UintOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint16: uint16->Uint8Option */ func MapUint8OptionToUint16Arr(m []uint16, f func(uint16) Uint8Option) []Uint8Option {
	acc := make([]Uint8Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint16: uint16->Uint16Option */ func MapUint16OptionToUint16Arr(m []uint16, f func(uint16) Uint16Option) []Uint16Option {
	acc := make([]Uint16Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint16: uint16->Uint32Option */ func MapUint32OptionToUint16Arr(m []uint16, f func(uint16) Uint32Option) []Uint32Option {
	acc := make([]Uint32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint16: uint16->Uint64Option */ func MapUint64OptionToUint16Arr(m []uint16, f func(uint16) Uint64Option) []Uint64Option {
	acc := make([]Uint64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint16: uint16->UintptrOption */ func MapUintptrOptionToUint16Arr(m []uint16, f func(uint16) UintptrOption) []UintptrOption {
	acc := make([]UintptrOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint16: uint16->ByteOption */ func MapByteOptionToUint16Arr(m []uint16, f func(uint16) ByteOption) []ByteOption {
	acc := make([]ByteOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint16: uint16->RuneOption */ func MapRuneOptionToUint16Arr(m []uint16, f func(uint16) RuneOption) []RuneOption {
	acc := make([]RuneOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint16: uint16->Float32Option */ func MapFloat32OptionToUint16Arr(m []uint16, f func(uint16) Float32Option) []Float32Option {
	acc := make([]Float32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint16: uint16->Float64Option */ func MapFloat64OptionToUint16Arr(m []uint16, f func(uint16) Float64Option) []Float64Option {
	acc := make([]Float64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint16: uint16->Complex64Option */ func MapComplex64OptionToUint16Arr(m []uint16, f func(uint16) Complex64Option) []Complex64Option {
	acc := make([]Complex64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint16: uint16->Complex128Option */ func MapComplex128OptionToUint16Arr(m []uint16, f func(uint16) Complex128Option) []Complex128Option {
	acc := make([]Complex128Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint16: uint16->AnyOption */ func MapAnyOptionToUint16Arr(m []uint16, f func(uint16) AnyOption) []AnyOption {
	acc := make([]AnyOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint16: uint16->[]bool */ func MapBoolArrToUint16Arr(m []uint16, f func(uint16) []bool) [][]bool {
	acc := make([][]bool, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint16: uint16->[]string */ func MapStringArrToUint16Arr(m []uint16, f func(uint16) []string) [][]string {
	acc := make([][]string, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint16: uint16->[]int */ func MapIntArrToUint16Arr(m []uint16, f func(uint16) []int) [][]int {
	acc := make([][]int, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint16: uint16->[]int8 */ func MapInt8ArrToUint16Arr(m []uint16, f func(uint16) []int8) [][]int8 {
	acc := make([][]int8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint16: uint16->[]int16 */ func MapInt16ArrToUint16Arr(m []uint16, f func(uint16) []int16) [][]int16 {
	acc := make([][]int16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint16: uint16->[]int32 */ func MapInt32ArrToUint16Arr(m []uint16, f func(uint16) []int32) [][]int32 {
	acc := make([][]int32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint16: uint16->[]int64 */ func MapInt64ArrToUint16Arr(m []uint16, f func(uint16) []int64) [][]int64 {
	acc := make([][]int64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint16: uint16->[]uint */ func MapUintArrToUint16Arr(m []uint16, f func(uint16) []uint) [][]uint {
	acc := make([][]uint, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint16: uint16->[]uint8 */ func MapUint8ArrToUint16Arr(m []uint16, f func(uint16) []uint8) [][]uint8 {
	acc := make([][]uint8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint16: uint16->[]uint16 */ func MapUint16ArrToUint16Arr(m []uint16, f func(uint16) []uint16) [][]uint16 {
	acc := make([][]uint16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint16: uint16->[]uint32 */ func MapUint32ArrToUint16Arr(m []uint16, f func(uint16) []uint32) [][]uint32 {
	acc := make([][]uint32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint16: uint16->[]uint64 */ func MapUint64ArrToUint16Arr(m []uint16, f func(uint16) []uint64) [][]uint64 {
	acc := make([][]uint64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint16: uint16->[]uintptr */ func MapUintptrArrToUint16Arr(m []uint16, f func(uint16) []uintptr) [][]uintptr {
	acc := make([][]uintptr, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint16: uint16->[]byte */ func MapByteArrToUint16Arr(m []uint16, f func(uint16) []byte) [][]byte {
	acc := make([][]byte, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint16: uint16->[]rune */ func MapRuneArrToUint16Arr(m []uint16, f func(uint16) []rune) [][]rune {
	acc := make([][]rune, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint16: uint16->[]float32 */ func MapFloat32ArrToUint16Arr(m []uint16, f func(uint16) []float32) [][]float32 {
	acc := make([][]float32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint16: uint16->[]float64 */ func MapFloat64ArrToUint16Arr(m []uint16, f func(uint16) []float64) [][]float64 {
	acc := make([][]float64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint16: uint16->[]complex64 */ func MapComplex64ArrToUint16Arr(m []uint16, f func(uint16) []complex64) [][]complex64 {
	acc := make([][]complex64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint16: uint16->[]complex128 */ func MapComplex128ArrToUint16Arr(m []uint16, f func(uint16) []complex128) [][]complex128 {
	acc := make([][]complex128, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint16: uint16->[]Any */ func MapAnyArrToUint16Arr(m []uint16, f func(uint16) []Any) [][]Any {
	acc := make([][]Any, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint16: uint16->BoolList */ func MapBoolListToUint16Arr(m []uint16, f func(uint16) BoolList) []BoolList {
	acc := make([]BoolList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint16: uint16->StringList */ func MapStringListToUint16Arr(m []uint16, f func(uint16) StringList) []StringList {
	acc := make([]StringList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint16: uint16->IntList */ func MapIntListToUint16Arr(m []uint16, f func(uint16) IntList) []IntList {
	acc := make([]IntList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint16: uint16->Int8List */ func MapInt8ListToUint16Arr(m []uint16, f func(uint16) Int8List) []Int8List {
	acc := make([]Int8List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint16: uint16->Int16List */ func MapInt16ListToUint16Arr(m []uint16, f func(uint16) Int16List) []Int16List {
	acc := make([]Int16List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint16: uint16->Int32List */ func MapInt32ListToUint16Arr(m []uint16, f func(uint16) Int32List) []Int32List {
	acc := make([]Int32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint16: uint16->Int64List */ func MapInt64ListToUint16Arr(m []uint16, f func(uint16) Int64List) []Int64List {
	acc := make([]Int64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint16: uint16->UintList */ func MapUintListToUint16Arr(m []uint16, f func(uint16) UintList) []UintList {
	acc := make([]UintList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint16: uint16->Uint8List */ func MapUint8ListToUint16Arr(m []uint16, f func(uint16) Uint8List) []Uint8List {
	acc := make([]Uint8List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint16: uint16->Uint16List */ func MapUint16ListToUint16Arr(m []uint16, f func(uint16) Uint16List) []Uint16List {
	acc := make([]Uint16List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint16: uint16->Uint32List */ func MapUint32ListToUint16Arr(m []uint16, f func(uint16) Uint32List) []Uint32List {
	acc := make([]Uint32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint16: uint16->Uint64List */ func MapUint64ListToUint16Arr(m []uint16, f func(uint16) Uint64List) []Uint64List {
	acc := make([]Uint64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint16: uint16->UintptrList */ func MapUintptrListToUint16Arr(m []uint16, f func(uint16) UintptrList) []UintptrList {
	acc := make([]UintptrList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint16: uint16->ByteList */ func MapByteListToUint16Arr(m []uint16, f func(uint16) ByteList) []ByteList {
	acc := make([]ByteList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint16: uint16->RuneList */ func MapRuneListToUint16Arr(m []uint16, f func(uint16) RuneList) []RuneList {
	acc := make([]RuneList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint16: uint16->Float32List */ func MapFloat32ListToUint16Arr(m []uint16, f func(uint16) Float32List) []Float32List {
	acc := make([]Float32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint16: uint16->Float64List */ func MapFloat64ListToUint16Arr(m []uint16, f func(uint16) Float64List) []Float64List {
	acc := make([]Float64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint16: uint16->Complex64List */ func MapComplex64ListToUint16Arr(m []uint16, f func(uint16) Complex64List) []Complex64List {
	acc := make([]Complex64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint16: uint16->Complex128List */ func MapComplex128ListToUint16Arr(m []uint16, f func(uint16) Complex128List) []Complex128List {
	acc := make([]Complex128List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint16: uint16->AnyList */ func MapAnyListToUint16Arr(m []uint16, f func(uint16) AnyList) []AnyList {
	acc := make([]AnyList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint32: uint32->bool */ func MapBoolToUint32Arr(m []uint32, f func(uint32) bool) []bool {
	acc := make([]bool, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint32: uint32->string */ func MapStringToUint32Arr(m []uint32, f func(uint32) string) []string {
	acc := make([]string, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint32: uint32->int */ func MapIntToUint32Arr(m []uint32, f func(uint32) int) []int {
	acc := make([]int, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint32: uint32->int8 */ func MapInt8ToUint32Arr(m []uint32, f func(uint32) int8) []int8 {
	acc := make([]int8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint32: uint32->int16 */ func MapInt16ToUint32Arr(m []uint32, f func(uint32) int16) []int16 {
	acc := make([]int16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint32: uint32->int32 */ func MapInt32ToUint32Arr(m []uint32, f func(uint32) int32) []int32 {
	acc := make([]int32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint32: uint32->int64 */ func MapInt64ToUint32Arr(m []uint32, f func(uint32) int64) []int64 {
	acc := make([]int64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint32: uint32->uint */ func MapUintToUint32Arr(m []uint32, f func(uint32) uint) []uint {
	acc := make([]uint, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint32: uint32->uint8 */ func MapUint8ToUint32Arr(m []uint32, f func(uint32) uint8) []uint8 {
	acc := make([]uint8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint32: uint32->uint16 */ func MapUint16ToUint32Arr(m []uint32, f func(uint32) uint16) []uint16 {
	acc := make([]uint16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint32: uint32->uint32 */ func MapUint32ToUint32Arr(m []uint32, f func(uint32) uint32) []uint32 {
	acc := make([]uint32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint32: uint32->uint64 */ func MapUint64ToUint32Arr(m []uint32, f func(uint32) uint64) []uint64 {
	acc := make([]uint64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint32: uint32->uintptr */ func MapUintptrToUint32Arr(m []uint32, f func(uint32) uintptr) []uintptr {
	acc := make([]uintptr, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint32: uint32->byte */ func MapByteToUint32Arr(m []uint32, f func(uint32) byte) []byte {
	acc := make([]byte, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint32: uint32->rune */ func MapRuneToUint32Arr(m []uint32, f func(uint32) rune) []rune {
	acc := make([]rune, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint32: uint32->float32 */ func MapFloat32ToUint32Arr(m []uint32, f func(uint32) float32) []float32 {
	acc := make([]float32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint32: uint32->float64 */ func MapFloat64ToUint32Arr(m []uint32, f func(uint32) float64) []float64 {
	acc := make([]float64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint32: uint32->complex64 */ func MapComplex64ToUint32Arr(m []uint32, f func(uint32) complex64) []complex64 {
	acc := make([]complex64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint32: uint32->complex128 */ func MapComplex128ToUint32Arr(m []uint32, f func(uint32) complex128) []complex128 {
	acc := make([]complex128, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint32: uint32->Any */ func MapAnyToUint32Arr(m []uint32, f func(uint32) Any) []Any {
	acc := make([]Any, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint32: uint32->BoolOption */ func MapBoolOptionToUint32Arr(m []uint32, f func(uint32) BoolOption) []BoolOption {
	acc := make([]BoolOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint32: uint32->StringOption */ func MapStringOptionToUint32Arr(m []uint32, f func(uint32) StringOption) []StringOption {
	acc := make([]StringOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint32: uint32->IntOption */ func MapIntOptionToUint32Arr(m []uint32, f func(uint32) IntOption) []IntOption {
	acc := make([]IntOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint32: uint32->Int8Option */ func MapInt8OptionToUint32Arr(m []uint32, f func(uint32) Int8Option) []Int8Option {
	acc := make([]Int8Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint32: uint32->Int16Option */ func MapInt16OptionToUint32Arr(m []uint32, f func(uint32) Int16Option) []Int16Option {
	acc := make([]Int16Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint32: uint32->Int32Option */ func MapInt32OptionToUint32Arr(m []uint32, f func(uint32) Int32Option) []Int32Option {
	acc := make([]Int32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint32: uint32->Int64Option */ func MapInt64OptionToUint32Arr(m []uint32, f func(uint32) Int64Option) []Int64Option {
	acc := make([]Int64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint32: uint32->UintOption */ func MapUintOptionToUint32Arr(m []uint32, f func(uint32) UintOption) []UintOption {
	acc := make([]UintOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint32: uint32->Uint8Option */ func MapUint8OptionToUint32Arr(m []uint32, f func(uint32) Uint8Option) []Uint8Option {
	acc := make([]Uint8Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint32: uint32->Uint16Option */ func MapUint16OptionToUint32Arr(m []uint32, f func(uint32) Uint16Option) []Uint16Option {
	acc := make([]Uint16Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint32: uint32->Uint32Option */ func MapUint32OptionToUint32Arr(m []uint32, f func(uint32) Uint32Option) []Uint32Option {
	acc := make([]Uint32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint32: uint32->Uint64Option */ func MapUint64OptionToUint32Arr(m []uint32, f func(uint32) Uint64Option) []Uint64Option {
	acc := make([]Uint64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint32: uint32->UintptrOption */ func MapUintptrOptionToUint32Arr(m []uint32, f func(uint32) UintptrOption) []UintptrOption {
	acc := make([]UintptrOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint32: uint32->ByteOption */ func MapByteOptionToUint32Arr(m []uint32, f func(uint32) ByteOption) []ByteOption {
	acc := make([]ByteOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint32: uint32->RuneOption */ func MapRuneOptionToUint32Arr(m []uint32, f func(uint32) RuneOption) []RuneOption {
	acc := make([]RuneOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint32: uint32->Float32Option */ func MapFloat32OptionToUint32Arr(m []uint32, f func(uint32) Float32Option) []Float32Option {
	acc := make([]Float32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint32: uint32->Float64Option */ func MapFloat64OptionToUint32Arr(m []uint32, f func(uint32) Float64Option) []Float64Option {
	acc := make([]Float64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint32: uint32->Complex64Option */ func MapComplex64OptionToUint32Arr(m []uint32, f func(uint32) Complex64Option) []Complex64Option {
	acc := make([]Complex64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint32: uint32->Complex128Option */ func MapComplex128OptionToUint32Arr(m []uint32, f func(uint32) Complex128Option) []Complex128Option {
	acc := make([]Complex128Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint32: uint32->AnyOption */ func MapAnyOptionToUint32Arr(m []uint32, f func(uint32) AnyOption) []AnyOption {
	acc := make([]AnyOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint32: uint32->[]bool */ func MapBoolArrToUint32Arr(m []uint32, f func(uint32) []bool) [][]bool {
	acc := make([][]bool, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint32: uint32->[]string */ func MapStringArrToUint32Arr(m []uint32, f func(uint32) []string) [][]string {
	acc := make([][]string, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint32: uint32->[]int */ func MapIntArrToUint32Arr(m []uint32, f func(uint32) []int) [][]int {
	acc := make([][]int, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint32: uint32->[]int8 */ func MapInt8ArrToUint32Arr(m []uint32, f func(uint32) []int8) [][]int8 {
	acc := make([][]int8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint32: uint32->[]int16 */ func MapInt16ArrToUint32Arr(m []uint32, f func(uint32) []int16) [][]int16 {
	acc := make([][]int16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint32: uint32->[]int32 */ func MapInt32ArrToUint32Arr(m []uint32, f func(uint32) []int32) [][]int32 {
	acc := make([][]int32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint32: uint32->[]int64 */ func MapInt64ArrToUint32Arr(m []uint32, f func(uint32) []int64) [][]int64 {
	acc := make([][]int64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint32: uint32->[]uint */ func MapUintArrToUint32Arr(m []uint32, f func(uint32) []uint) [][]uint {
	acc := make([][]uint, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint32: uint32->[]uint8 */ func MapUint8ArrToUint32Arr(m []uint32, f func(uint32) []uint8) [][]uint8 {
	acc := make([][]uint8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint32: uint32->[]uint16 */ func MapUint16ArrToUint32Arr(m []uint32, f func(uint32) []uint16) [][]uint16 {
	acc := make([][]uint16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint32: uint32->[]uint32 */ func MapUint32ArrToUint32Arr(m []uint32, f func(uint32) []uint32) [][]uint32 {
	acc := make([][]uint32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint32: uint32->[]uint64 */ func MapUint64ArrToUint32Arr(m []uint32, f func(uint32) []uint64) [][]uint64 {
	acc := make([][]uint64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint32: uint32->[]uintptr */ func MapUintptrArrToUint32Arr(m []uint32, f func(uint32) []uintptr) [][]uintptr {
	acc := make([][]uintptr, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint32: uint32->[]byte */ func MapByteArrToUint32Arr(m []uint32, f func(uint32) []byte) [][]byte {
	acc := make([][]byte, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint32: uint32->[]rune */ func MapRuneArrToUint32Arr(m []uint32, f func(uint32) []rune) [][]rune {
	acc := make([][]rune, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint32: uint32->[]float32 */ func MapFloat32ArrToUint32Arr(m []uint32, f func(uint32) []float32) [][]float32 {
	acc := make([][]float32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint32: uint32->[]float64 */ func MapFloat64ArrToUint32Arr(m []uint32, f func(uint32) []float64) [][]float64 {
	acc := make([][]float64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint32: uint32->[]complex64 */ func MapComplex64ArrToUint32Arr(m []uint32, f func(uint32) []complex64) [][]complex64 {
	acc := make([][]complex64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint32: uint32->[]complex128 */ func MapComplex128ArrToUint32Arr(m []uint32, f func(uint32) []complex128) [][]complex128 {
	acc := make([][]complex128, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint32: uint32->[]Any */ func MapAnyArrToUint32Arr(m []uint32, f func(uint32) []Any) [][]Any {
	acc := make([][]Any, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint32: uint32->BoolList */ func MapBoolListToUint32Arr(m []uint32, f func(uint32) BoolList) []BoolList {
	acc := make([]BoolList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint32: uint32->StringList */ func MapStringListToUint32Arr(m []uint32, f func(uint32) StringList) []StringList {
	acc := make([]StringList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint32: uint32->IntList */ func MapIntListToUint32Arr(m []uint32, f func(uint32) IntList) []IntList {
	acc := make([]IntList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint32: uint32->Int8List */ func MapInt8ListToUint32Arr(m []uint32, f func(uint32) Int8List) []Int8List {
	acc := make([]Int8List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint32: uint32->Int16List */ func MapInt16ListToUint32Arr(m []uint32, f func(uint32) Int16List) []Int16List {
	acc := make([]Int16List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint32: uint32->Int32List */ func MapInt32ListToUint32Arr(m []uint32, f func(uint32) Int32List) []Int32List {
	acc := make([]Int32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint32: uint32->Int64List */ func MapInt64ListToUint32Arr(m []uint32, f func(uint32) Int64List) []Int64List {
	acc := make([]Int64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint32: uint32->UintList */ func MapUintListToUint32Arr(m []uint32, f func(uint32) UintList) []UintList {
	acc := make([]UintList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint32: uint32->Uint8List */ func MapUint8ListToUint32Arr(m []uint32, f func(uint32) Uint8List) []Uint8List {
	acc := make([]Uint8List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint32: uint32->Uint16List */ func MapUint16ListToUint32Arr(m []uint32, f func(uint32) Uint16List) []Uint16List {
	acc := make([]Uint16List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint32: uint32->Uint32List */ func MapUint32ListToUint32Arr(m []uint32, f func(uint32) Uint32List) []Uint32List {
	acc := make([]Uint32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint32: uint32->Uint64List */ func MapUint64ListToUint32Arr(m []uint32, f func(uint32) Uint64List) []Uint64List {
	acc := make([]Uint64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint32: uint32->UintptrList */ func MapUintptrListToUint32Arr(m []uint32, f func(uint32) UintptrList) []UintptrList {
	acc := make([]UintptrList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint32: uint32->ByteList */ func MapByteListToUint32Arr(m []uint32, f func(uint32) ByteList) []ByteList {
	acc := make([]ByteList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint32: uint32->RuneList */ func MapRuneListToUint32Arr(m []uint32, f func(uint32) RuneList) []RuneList {
	acc := make([]RuneList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint32: uint32->Float32List */ func MapFloat32ListToUint32Arr(m []uint32, f func(uint32) Float32List) []Float32List {
	acc := make([]Float32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint32: uint32->Float64List */ func MapFloat64ListToUint32Arr(m []uint32, f func(uint32) Float64List) []Float64List {
	acc := make([]Float64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint32: uint32->Complex64List */ func MapComplex64ListToUint32Arr(m []uint32, f func(uint32) Complex64List) []Complex64List {
	acc := make([]Complex64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint32: uint32->Complex128List */ func MapComplex128ListToUint32Arr(m []uint32, f func(uint32) Complex128List) []Complex128List {
	acc := make([]Complex128List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint32: uint32->AnyList */ func MapAnyListToUint32Arr(m []uint32, f func(uint32) AnyList) []AnyList {
	acc := make([]AnyList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint64: uint64->bool */ func MapBoolToUint64Arr(m []uint64, f func(uint64) bool) []bool {
	acc := make([]bool, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint64: uint64->string */ func MapStringToUint64Arr(m []uint64, f func(uint64) string) []string {
	acc := make([]string, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint64: uint64->int */ func MapIntToUint64Arr(m []uint64, f func(uint64) int) []int {
	acc := make([]int, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint64: uint64->int8 */ func MapInt8ToUint64Arr(m []uint64, f func(uint64) int8) []int8 {
	acc := make([]int8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint64: uint64->int16 */ func MapInt16ToUint64Arr(m []uint64, f func(uint64) int16) []int16 {
	acc := make([]int16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint64: uint64->int32 */ func MapInt32ToUint64Arr(m []uint64, f func(uint64) int32) []int32 {
	acc := make([]int32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint64: uint64->int64 */ func MapInt64ToUint64Arr(m []uint64, f func(uint64) int64) []int64 {
	acc := make([]int64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint64: uint64->uint */ func MapUintToUint64Arr(m []uint64, f func(uint64) uint) []uint {
	acc := make([]uint, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint64: uint64->uint8 */ func MapUint8ToUint64Arr(m []uint64, f func(uint64) uint8) []uint8 {
	acc := make([]uint8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint64: uint64->uint16 */ func MapUint16ToUint64Arr(m []uint64, f func(uint64) uint16) []uint16 {
	acc := make([]uint16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint64: uint64->uint32 */ func MapUint32ToUint64Arr(m []uint64, f func(uint64) uint32) []uint32 {
	acc := make([]uint32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint64: uint64->uint64 */ func MapUint64ToUint64Arr(m []uint64, f func(uint64) uint64) []uint64 {
	acc := make([]uint64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint64: uint64->uintptr */ func MapUintptrToUint64Arr(m []uint64, f func(uint64) uintptr) []uintptr {
	acc := make([]uintptr, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint64: uint64->byte */ func MapByteToUint64Arr(m []uint64, f func(uint64) byte) []byte {
	acc := make([]byte, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint64: uint64->rune */ func MapRuneToUint64Arr(m []uint64, f func(uint64) rune) []rune {
	acc := make([]rune, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint64: uint64->float32 */ func MapFloat32ToUint64Arr(m []uint64, f func(uint64) float32) []float32 {
	acc := make([]float32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint64: uint64->float64 */ func MapFloat64ToUint64Arr(m []uint64, f func(uint64) float64) []float64 {
	acc := make([]float64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint64: uint64->complex64 */ func MapComplex64ToUint64Arr(m []uint64, f func(uint64) complex64) []complex64 {
	acc := make([]complex64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint64: uint64->complex128 */ func MapComplex128ToUint64Arr(m []uint64, f func(uint64) complex128) []complex128 {
	acc := make([]complex128, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint64: uint64->Any */ func MapAnyToUint64Arr(m []uint64, f func(uint64) Any) []Any {
	acc := make([]Any, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint64: uint64->BoolOption */ func MapBoolOptionToUint64Arr(m []uint64, f func(uint64) BoolOption) []BoolOption {
	acc := make([]BoolOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint64: uint64->StringOption */ func MapStringOptionToUint64Arr(m []uint64, f func(uint64) StringOption) []StringOption {
	acc := make([]StringOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint64: uint64->IntOption */ func MapIntOptionToUint64Arr(m []uint64, f func(uint64) IntOption) []IntOption {
	acc := make([]IntOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint64: uint64->Int8Option */ func MapInt8OptionToUint64Arr(m []uint64, f func(uint64) Int8Option) []Int8Option {
	acc := make([]Int8Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint64: uint64->Int16Option */ func MapInt16OptionToUint64Arr(m []uint64, f func(uint64) Int16Option) []Int16Option {
	acc := make([]Int16Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint64: uint64->Int32Option */ func MapInt32OptionToUint64Arr(m []uint64, f func(uint64) Int32Option) []Int32Option {
	acc := make([]Int32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint64: uint64->Int64Option */ func MapInt64OptionToUint64Arr(m []uint64, f func(uint64) Int64Option) []Int64Option {
	acc := make([]Int64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint64: uint64->UintOption */ func MapUintOptionToUint64Arr(m []uint64, f func(uint64) UintOption) []UintOption {
	acc := make([]UintOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint64: uint64->Uint8Option */ func MapUint8OptionToUint64Arr(m []uint64, f func(uint64) Uint8Option) []Uint8Option {
	acc := make([]Uint8Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint64: uint64->Uint16Option */ func MapUint16OptionToUint64Arr(m []uint64, f func(uint64) Uint16Option) []Uint16Option {
	acc := make([]Uint16Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint64: uint64->Uint32Option */ func MapUint32OptionToUint64Arr(m []uint64, f func(uint64) Uint32Option) []Uint32Option {
	acc := make([]Uint32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint64: uint64->Uint64Option */ func MapUint64OptionToUint64Arr(m []uint64, f func(uint64) Uint64Option) []Uint64Option {
	acc := make([]Uint64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint64: uint64->UintptrOption */ func MapUintptrOptionToUint64Arr(m []uint64, f func(uint64) UintptrOption) []UintptrOption {
	acc := make([]UintptrOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint64: uint64->ByteOption */ func MapByteOptionToUint64Arr(m []uint64, f func(uint64) ByteOption) []ByteOption {
	acc := make([]ByteOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint64: uint64->RuneOption */ func MapRuneOptionToUint64Arr(m []uint64, f func(uint64) RuneOption) []RuneOption {
	acc := make([]RuneOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint64: uint64->Float32Option */ func MapFloat32OptionToUint64Arr(m []uint64, f func(uint64) Float32Option) []Float32Option {
	acc := make([]Float32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint64: uint64->Float64Option */ func MapFloat64OptionToUint64Arr(m []uint64, f func(uint64) Float64Option) []Float64Option {
	acc := make([]Float64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint64: uint64->Complex64Option */ func MapComplex64OptionToUint64Arr(m []uint64, f func(uint64) Complex64Option) []Complex64Option {
	acc := make([]Complex64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint64: uint64->Complex128Option */ func MapComplex128OptionToUint64Arr(m []uint64, f func(uint64) Complex128Option) []Complex128Option {
	acc := make([]Complex128Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint64: uint64->AnyOption */ func MapAnyOptionToUint64Arr(m []uint64, f func(uint64) AnyOption) []AnyOption {
	acc := make([]AnyOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint64: uint64->[]bool */ func MapBoolArrToUint64Arr(m []uint64, f func(uint64) []bool) [][]bool {
	acc := make([][]bool, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint64: uint64->[]string */ func MapStringArrToUint64Arr(m []uint64, f func(uint64) []string) [][]string {
	acc := make([][]string, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint64: uint64->[]int */ func MapIntArrToUint64Arr(m []uint64, f func(uint64) []int) [][]int {
	acc := make([][]int, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint64: uint64->[]int8 */ func MapInt8ArrToUint64Arr(m []uint64, f func(uint64) []int8) [][]int8 {
	acc := make([][]int8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint64: uint64->[]int16 */ func MapInt16ArrToUint64Arr(m []uint64, f func(uint64) []int16) [][]int16 {
	acc := make([][]int16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint64: uint64->[]int32 */ func MapInt32ArrToUint64Arr(m []uint64, f func(uint64) []int32) [][]int32 {
	acc := make([][]int32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint64: uint64->[]int64 */ func MapInt64ArrToUint64Arr(m []uint64, f func(uint64) []int64) [][]int64 {
	acc := make([][]int64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint64: uint64->[]uint */ func MapUintArrToUint64Arr(m []uint64, f func(uint64) []uint) [][]uint {
	acc := make([][]uint, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint64: uint64->[]uint8 */ func MapUint8ArrToUint64Arr(m []uint64, f func(uint64) []uint8) [][]uint8 {
	acc := make([][]uint8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint64: uint64->[]uint16 */ func MapUint16ArrToUint64Arr(m []uint64, f func(uint64) []uint16) [][]uint16 {
	acc := make([][]uint16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint64: uint64->[]uint32 */ func MapUint32ArrToUint64Arr(m []uint64, f func(uint64) []uint32) [][]uint32 {
	acc := make([][]uint32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint64: uint64->[]uint64 */ func MapUint64ArrToUint64Arr(m []uint64, f func(uint64) []uint64) [][]uint64 {
	acc := make([][]uint64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint64: uint64->[]uintptr */ func MapUintptrArrToUint64Arr(m []uint64, f func(uint64) []uintptr) [][]uintptr {
	acc := make([][]uintptr, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint64: uint64->[]byte */ func MapByteArrToUint64Arr(m []uint64, f func(uint64) []byte) [][]byte {
	acc := make([][]byte, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint64: uint64->[]rune */ func MapRuneArrToUint64Arr(m []uint64, f func(uint64) []rune) [][]rune {
	acc := make([][]rune, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint64: uint64->[]float32 */ func MapFloat32ArrToUint64Arr(m []uint64, f func(uint64) []float32) [][]float32 {
	acc := make([][]float32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint64: uint64->[]float64 */ func MapFloat64ArrToUint64Arr(m []uint64, f func(uint64) []float64) [][]float64 {
	acc := make([][]float64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint64: uint64->[]complex64 */ func MapComplex64ArrToUint64Arr(m []uint64, f func(uint64) []complex64) [][]complex64 {
	acc := make([][]complex64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint64: uint64->[]complex128 */ func MapComplex128ArrToUint64Arr(m []uint64, f func(uint64) []complex128) [][]complex128 {
	acc := make([][]complex128, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint64: uint64->[]Any */ func MapAnyArrToUint64Arr(m []uint64, f func(uint64) []Any) [][]Any {
	acc := make([][]Any, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint64: uint64->BoolList */ func MapBoolListToUint64Arr(m []uint64, f func(uint64) BoolList) []BoolList {
	acc := make([]BoolList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint64: uint64->StringList */ func MapStringListToUint64Arr(m []uint64, f func(uint64) StringList) []StringList {
	acc := make([]StringList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint64: uint64->IntList */ func MapIntListToUint64Arr(m []uint64, f func(uint64) IntList) []IntList {
	acc := make([]IntList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint64: uint64->Int8List */ func MapInt8ListToUint64Arr(m []uint64, f func(uint64) Int8List) []Int8List {
	acc := make([]Int8List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint64: uint64->Int16List */ func MapInt16ListToUint64Arr(m []uint64, f func(uint64) Int16List) []Int16List {
	acc := make([]Int16List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint64: uint64->Int32List */ func MapInt32ListToUint64Arr(m []uint64, f func(uint64) Int32List) []Int32List {
	acc := make([]Int32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint64: uint64->Int64List */ func MapInt64ListToUint64Arr(m []uint64, f func(uint64) Int64List) []Int64List {
	acc := make([]Int64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint64: uint64->UintList */ func MapUintListToUint64Arr(m []uint64, f func(uint64) UintList) []UintList {
	acc := make([]UintList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint64: uint64->Uint8List */ func MapUint8ListToUint64Arr(m []uint64, f func(uint64) Uint8List) []Uint8List {
	acc := make([]Uint8List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint64: uint64->Uint16List */ func MapUint16ListToUint64Arr(m []uint64, f func(uint64) Uint16List) []Uint16List {
	acc := make([]Uint16List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint64: uint64->Uint32List */ func MapUint32ListToUint64Arr(m []uint64, f func(uint64) Uint32List) []Uint32List {
	acc := make([]Uint32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint64: uint64->Uint64List */ func MapUint64ListToUint64Arr(m []uint64, f func(uint64) Uint64List) []Uint64List {
	acc := make([]Uint64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint64: uint64->UintptrList */ func MapUintptrListToUint64Arr(m []uint64, f func(uint64) UintptrList) []UintptrList {
	acc := make([]UintptrList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint64: uint64->ByteList */ func MapByteListToUint64Arr(m []uint64, f func(uint64) ByteList) []ByteList {
	acc := make([]ByteList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint64: uint64->RuneList */ func MapRuneListToUint64Arr(m []uint64, f func(uint64) RuneList) []RuneList {
	acc := make([]RuneList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint64: uint64->Float32List */ func MapFloat32ListToUint64Arr(m []uint64, f func(uint64) Float32List) []Float32List {
	acc := make([]Float32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint64: uint64->Float64List */ func MapFloat64ListToUint64Arr(m []uint64, f func(uint64) Float64List) []Float64List {
	acc := make([]Float64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint64: uint64->Complex64List */ func MapComplex64ListToUint64Arr(m []uint64, f func(uint64) Complex64List) []Complex64List {
	acc := make([]Complex64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint64: uint64->Complex128List */ func MapComplex128ListToUint64Arr(m []uint64, f func(uint64) Complex128List) []Complex128List {
	acc := make([]Complex128List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uint64: uint64->AnyList */ func MapAnyListToUint64Arr(m []uint64, f func(uint64) AnyList) []AnyList {
	acc := make([]AnyList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uintptr: uintptr->bool */ func MapBoolToUintptrArr(m []uintptr, f func(uintptr) bool) []bool {
	acc := make([]bool, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uintptr: uintptr->string */ func MapStringToUintptrArr(m []uintptr, f func(uintptr) string) []string {
	acc := make([]string, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uintptr: uintptr->int */ func MapIntToUintptrArr(m []uintptr, f func(uintptr) int) []int {
	acc := make([]int, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uintptr: uintptr->int8 */ func MapInt8ToUintptrArr(m []uintptr, f func(uintptr) int8) []int8 {
	acc := make([]int8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uintptr: uintptr->int16 */ func MapInt16ToUintptrArr(m []uintptr, f func(uintptr) int16) []int16 {
	acc := make([]int16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uintptr: uintptr->int32 */ func MapInt32ToUintptrArr(m []uintptr, f func(uintptr) int32) []int32 {
	acc := make([]int32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uintptr: uintptr->int64 */ func MapInt64ToUintptrArr(m []uintptr, f func(uintptr) int64) []int64 {
	acc := make([]int64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uintptr: uintptr->uint */ func MapUintToUintptrArr(m []uintptr, f func(uintptr) uint) []uint {
	acc := make([]uint, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uintptr: uintptr->uint8 */ func MapUint8ToUintptrArr(m []uintptr, f func(uintptr) uint8) []uint8 {
	acc := make([]uint8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uintptr: uintptr->uint16 */ func MapUint16ToUintptrArr(m []uintptr, f func(uintptr) uint16) []uint16 {
	acc := make([]uint16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uintptr: uintptr->uint32 */ func MapUint32ToUintptrArr(m []uintptr, f func(uintptr) uint32) []uint32 {
	acc := make([]uint32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uintptr: uintptr->uint64 */ func MapUint64ToUintptrArr(m []uintptr, f func(uintptr) uint64) []uint64 {
	acc := make([]uint64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uintptr: uintptr->uintptr */ func MapUintptrToUintptrArr(m []uintptr, f func(uintptr) uintptr) []uintptr {
	acc := make([]uintptr, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uintptr: uintptr->byte */ func MapByteToUintptrArr(m []uintptr, f func(uintptr) byte) []byte {
	acc := make([]byte, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uintptr: uintptr->rune */ func MapRuneToUintptrArr(m []uintptr, f func(uintptr) rune) []rune {
	acc := make([]rune, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uintptr: uintptr->float32 */ func MapFloat32ToUintptrArr(m []uintptr, f func(uintptr) float32) []float32 {
	acc := make([]float32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uintptr: uintptr->float64 */ func MapFloat64ToUintptrArr(m []uintptr, f func(uintptr) float64) []float64 {
	acc := make([]float64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uintptr: uintptr->complex64 */ func MapComplex64ToUintptrArr(m []uintptr, f func(uintptr) complex64) []complex64 {
	acc := make([]complex64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uintptr: uintptr->complex128 */ func MapComplex128ToUintptrArr(m []uintptr, f func(uintptr) complex128) []complex128 {
	acc := make([]complex128, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uintptr: uintptr->Any */ func MapAnyToUintptrArr(m []uintptr, f func(uintptr) Any) []Any {
	acc := make([]Any, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uintptr: uintptr->BoolOption */ func MapBoolOptionToUintptrArr(m []uintptr, f func(uintptr) BoolOption) []BoolOption {
	acc := make([]BoolOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uintptr: uintptr->StringOption */ func MapStringOptionToUintptrArr(m []uintptr, f func(uintptr) StringOption) []StringOption {
	acc := make([]StringOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uintptr: uintptr->IntOption */ func MapIntOptionToUintptrArr(m []uintptr, f func(uintptr) IntOption) []IntOption {
	acc := make([]IntOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uintptr: uintptr->Int8Option */ func MapInt8OptionToUintptrArr(m []uintptr, f func(uintptr) Int8Option) []Int8Option {
	acc := make([]Int8Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uintptr: uintptr->Int16Option */ func MapInt16OptionToUintptrArr(m []uintptr, f func(uintptr) Int16Option) []Int16Option {
	acc := make([]Int16Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uintptr: uintptr->Int32Option */ func MapInt32OptionToUintptrArr(m []uintptr, f func(uintptr) Int32Option) []Int32Option {
	acc := make([]Int32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uintptr: uintptr->Int64Option */ func MapInt64OptionToUintptrArr(m []uintptr, f func(uintptr) Int64Option) []Int64Option {
	acc := make([]Int64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uintptr: uintptr->UintOption */ func MapUintOptionToUintptrArr(m []uintptr, f func(uintptr) UintOption) []UintOption {
	acc := make([]UintOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uintptr: uintptr->Uint8Option */ func MapUint8OptionToUintptrArr(m []uintptr, f func(uintptr) Uint8Option) []Uint8Option {
	acc := make([]Uint8Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uintptr: uintptr->Uint16Option */ func MapUint16OptionToUintptrArr(m []uintptr, f func(uintptr) Uint16Option) []Uint16Option {
	acc := make([]Uint16Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uintptr: uintptr->Uint32Option */ func MapUint32OptionToUintptrArr(m []uintptr, f func(uintptr) Uint32Option) []Uint32Option {
	acc := make([]Uint32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uintptr: uintptr->Uint64Option */ func MapUint64OptionToUintptrArr(m []uintptr, f func(uintptr) Uint64Option) []Uint64Option {
	acc := make([]Uint64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uintptr: uintptr->UintptrOption */ func MapUintptrOptionToUintptrArr(m []uintptr, f func(uintptr) UintptrOption) []UintptrOption {
	acc := make([]UintptrOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uintptr: uintptr->ByteOption */ func MapByteOptionToUintptrArr(m []uintptr, f func(uintptr) ByteOption) []ByteOption {
	acc := make([]ByteOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uintptr: uintptr->RuneOption */ func MapRuneOptionToUintptrArr(m []uintptr, f func(uintptr) RuneOption) []RuneOption {
	acc := make([]RuneOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uintptr: uintptr->Float32Option */ func MapFloat32OptionToUintptrArr(m []uintptr, f func(uintptr) Float32Option) []Float32Option {
	acc := make([]Float32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uintptr: uintptr->Float64Option */ func MapFloat64OptionToUintptrArr(m []uintptr, f func(uintptr) Float64Option) []Float64Option {
	acc := make([]Float64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uintptr: uintptr->Complex64Option */ func MapComplex64OptionToUintptrArr(m []uintptr, f func(uintptr) Complex64Option) []Complex64Option {
	acc := make([]Complex64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uintptr: uintptr->Complex128Option */ func MapComplex128OptionToUintptrArr(m []uintptr, f func(uintptr) Complex128Option) []Complex128Option {
	acc := make([]Complex128Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uintptr: uintptr->AnyOption */ func MapAnyOptionToUintptrArr(m []uintptr, f func(uintptr) AnyOption) []AnyOption {
	acc := make([]AnyOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uintptr: uintptr->[]bool */ func MapBoolArrToUintptrArr(m []uintptr, f func(uintptr) []bool) [][]bool {
	acc := make([][]bool, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uintptr: uintptr->[]string */ func MapStringArrToUintptrArr(m []uintptr, f func(uintptr) []string) [][]string {
	acc := make([][]string, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uintptr: uintptr->[]int */ func MapIntArrToUintptrArr(m []uintptr, f func(uintptr) []int) [][]int {
	acc := make([][]int, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uintptr: uintptr->[]int8 */ func MapInt8ArrToUintptrArr(m []uintptr, f func(uintptr) []int8) [][]int8 {
	acc := make([][]int8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uintptr: uintptr->[]int16 */ func MapInt16ArrToUintptrArr(m []uintptr, f func(uintptr) []int16) [][]int16 {
	acc := make([][]int16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uintptr: uintptr->[]int32 */ func MapInt32ArrToUintptrArr(m []uintptr, f func(uintptr) []int32) [][]int32 {
	acc := make([][]int32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uintptr: uintptr->[]int64 */ func MapInt64ArrToUintptrArr(m []uintptr, f func(uintptr) []int64) [][]int64 {
	acc := make([][]int64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uintptr: uintptr->[]uint */ func MapUintArrToUintptrArr(m []uintptr, f func(uintptr) []uint) [][]uint {
	acc := make([][]uint, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uintptr: uintptr->[]uint8 */ func MapUint8ArrToUintptrArr(m []uintptr, f func(uintptr) []uint8) [][]uint8 {
	acc := make([][]uint8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uintptr: uintptr->[]uint16 */ func MapUint16ArrToUintptrArr(m []uintptr, f func(uintptr) []uint16) [][]uint16 {
	acc := make([][]uint16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uintptr: uintptr->[]uint32 */ func MapUint32ArrToUintptrArr(m []uintptr, f func(uintptr) []uint32) [][]uint32 {
	acc := make([][]uint32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uintptr: uintptr->[]uint64 */ func MapUint64ArrToUintptrArr(m []uintptr, f func(uintptr) []uint64) [][]uint64 {
	acc := make([][]uint64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uintptr: uintptr->[]uintptr */ func MapUintptrArrToUintptrArr(m []uintptr, f func(uintptr) []uintptr) [][]uintptr {
	acc := make([][]uintptr, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uintptr: uintptr->[]byte */ func MapByteArrToUintptrArr(m []uintptr, f func(uintptr) []byte) [][]byte {
	acc := make([][]byte, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uintptr: uintptr->[]rune */ func MapRuneArrToUintptrArr(m []uintptr, f func(uintptr) []rune) [][]rune {
	acc := make([][]rune, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uintptr: uintptr->[]float32 */ func MapFloat32ArrToUintptrArr(m []uintptr, f func(uintptr) []float32) [][]float32 {
	acc := make([][]float32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uintptr: uintptr->[]float64 */ func MapFloat64ArrToUintptrArr(m []uintptr, f func(uintptr) []float64) [][]float64 {
	acc := make([][]float64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uintptr: uintptr->[]complex64 */ func MapComplex64ArrToUintptrArr(m []uintptr, f func(uintptr) []complex64) [][]complex64 {
	acc := make([][]complex64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uintptr: uintptr->[]complex128 */ func MapComplex128ArrToUintptrArr(m []uintptr, f func(uintptr) []complex128) [][]complex128 {
	acc := make([][]complex128, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uintptr: uintptr->[]Any */ func MapAnyArrToUintptrArr(m []uintptr, f func(uintptr) []Any) [][]Any {
	acc := make([][]Any, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uintptr: uintptr->BoolList */ func MapBoolListToUintptrArr(m []uintptr, f func(uintptr) BoolList) []BoolList {
	acc := make([]BoolList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uintptr: uintptr->StringList */ func MapStringListToUintptrArr(m []uintptr, f func(uintptr) StringList) []StringList {
	acc := make([]StringList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uintptr: uintptr->IntList */ func MapIntListToUintptrArr(m []uintptr, f func(uintptr) IntList) []IntList {
	acc := make([]IntList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uintptr: uintptr->Int8List */ func MapInt8ListToUintptrArr(m []uintptr, f func(uintptr) Int8List) []Int8List {
	acc := make([]Int8List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uintptr: uintptr->Int16List */ func MapInt16ListToUintptrArr(m []uintptr, f func(uintptr) Int16List) []Int16List {
	acc := make([]Int16List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uintptr: uintptr->Int32List */ func MapInt32ListToUintptrArr(m []uintptr, f func(uintptr) Int32List) []Int32List {
	acc := make([]Int32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uintptr: uintptr->Int64List */ func MapInt64ListToUintptrArr(m []uintptr, f func(uintptr) Int64List) []Int64List {
	acc := make([]Int64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uintptr: uintptr->UintList */ func MapUintListToUintptrArr(m []uintptr, f func(uintptr) UintList) []UintList {
	acc := make([]UintList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uintptr: uintptr->Uint8List */ func MapUint8ListToUintptrArr(m []uintptr, f func(uintptr) Uint8List) []Uint8List {
	acc := make([]Uint8List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uintptr: uintptr->Uint16List */ func MapUint16ListToUintptrArr(m []uintptr, f func(uintptr) Uint16List) []Uint16List {
	acc := make([]Uint16List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uintptr: uintptr->Uint32List */ func MapUint32ListToUintptrArr(m []uintptr, f func(uintptr) Uint32List) []Uint32List {
	acc := make([]Uint32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uintptr: uintptr->Uint64List */ func MapUint64ListToUintptrArr(m []uintptr, f func(uintptr) Uint64List) []Uint64List {
	acc := make([]Uint64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uintptr: uintptr->UintptrList */ func MapUintptrListToUintptrArr(m []uintptr, f func(uintptr) UintptrList) []UintptrList {
	acc := make([]UintptrList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uintptr: uintptr->ByteList */ func MapByteListToUintptrArr(m []uintptr, f func(uintptr) ByteList) []ByteList {
	acc := make([]ByteList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uintptr: uintptr->RuneList */ func MapRuneListToUintptrArr(m []uintptr, f func(uintptr) RuneList) []RuneList {
	acc := make([]RuneList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uintptr: uintptr->Float32List */ func MapFloat32ListToUintptrArr(m []uintptr, f func(uintptr) Float32List) []Float32List {
	acc := make([]Float32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uintptr: uintptr->Float64List */ func MapFloat64ListToUintptrArr(m []uintptr, f func(uintptr) Float64List) []Float64List {
	acc := make([]Float64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uintptr: uintptr->Complex64List */ func MapComplex64ListToUintptrArr(m []uintptr, f func(uintptr) Complex64List) []Complex64List {
	acc := make([]Complex64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uintptr: uintptr->Complex128List */ func MapComplex128ListToUintptrArr(m []uintptr, f func(uintptr) Complex128List) []Complex128List {
	acc := make([]Complex128List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []uintptr: uintptr->AnyList */ func MapAnyListToUintptrArr(m []uintptr, f func(uintptr) AnyList) []AnyList {
	acc := make([]AnyList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []byte: byte->bool */ func MapBoolToByteArr(m []byte, f func(byte) bool) []bool {
	acc := make([]bool, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []byte: byte->string */ func MapStringToByteArr(m []byte, f func(byte) string) []string {
	acc := make([]string, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []byte: byte->int */ func MapIntToByteArr(m []byte, f func(byte) int) []int {
	acc := make([]int, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []byte: byte->int8 */ func MapInt8ToByteArr(m []byte, f func(byte) int8) []int8 {
	acc := make([]int8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []byte: byte->int16 */ func MapInt16ToByteArr(m []byte, f func(byte) int16) []int16 {
	acc := make([]int16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []byte: byte->int32 */ func MapInt32ToByteArr(m []byte, f func(byte) int32) []int32 {
	acc := make([]int32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []byte: byte->int64 */ func MapInt64ToByteArr(m []byte, f func(byte) int64) []int64 {
	acc := make([]int64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []byte: byte->uint */ func MapUintToByteArr(m []byte, f func(byte) uint) []uint {
	acc := make([]uint, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []byte: byte->uint8 */ func MapUint8ToByteArr(m []byte, f func(byte) uint8) []uint8 {
	acc := make([]uint8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []byte: byte->uint16 */ func MapUint16ToByteArr(m []byte, f func(byte) uint16) []uint16 {
	acc := make([]uint16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []byte: byte->uint32 */ func MapUint32ToByteArr(m []byte, f func(byte) uint32) []uint32 {
	acc := make([]uint32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []byte: byte->uint64 */ func MapUint64ToByteArr(m []byte, f func(byte) uint64) []uint64 {
	acc := make([]uint64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []byte: byte->uintptr */ func MapUintptrToByteArr(m []byte, f func(byte) uintptr) []uintptr {
	acc := make([]uintptr, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []byte: byte->byte */ func MapByteToByteArr(m []byte, f func(byte) byte) []byte {
	acc := make([]byte, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []byte: byte->rune */ func MapRuneToByteArr(m []byte, f func(byte) rune) []rune {
	acc := make([]rune, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []byte: byte->float32 */ func MapFloat32ToByteArr(m []byte, f func(byte) float32) []float32 {
	acc := make([]float32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []byte: byte->float64 */ func MapFloat64ToByteArr(m []byte, f func(byte) float64) []float64 {
	acc := make([]float64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []byte: byte->complex64 */ func MapComplex64ToByteArr(m []byte, f func(byte) complex64) []complex64 {
	acc := make([]complex64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []byte: byte->complex128 */ func MapComplex128ToByteArr(m []byte, f func(byte) complex128) []complex128 {
	acc := make([]complex128, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []byte: byte->Any */ func MapAnyToByteArr(m []byte, f func(byte) Any) []Any {
	acc := make([]Any, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []byte: byte->BoolOption */ func MapBoolOptionToByteArr(m []byte, f func(byte) BoolOption) []BoolOption {
	acc := make([]BoolOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []byte: byte->StringOption */ func MapStringOptionToByteArr(m []byte, f func(byte) StringOption) []StringOption {
	acc := make([]StringOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []byte: byte->IntOption */ func MapIntOptionToByteArr(m []byte, f func(byte) IntOption) []IntOption {
	acc := make([]IntOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []byte: byte->Int8Option */ func MapInt8OptionToByteArr(m []byte, f func(byte) Int8Option) []Int8Option {
	acc := make([]Int8Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []byte: byte->Int16Option */ func MapInt16OptionToByteArr(m []byte, f func(byte) Int16Option) []Int16Option {
	acc := make([]Int16Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []byte: byte->Int32Option */ func MapInt32OptionToByteArr(m []byte, f func(byte) Int32Option) []Int32Option {
	acc := make([]Int32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []byte: byte->Int64Option */ func MapInt64OptionToByteArr(m []byte, f func(byte) Int64Option) []Int64Option {
	acc := make([]Int64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []byte: byte->UintOption */ func MapUintOptionToByteArr(m []byte, f func(byte) UintOption) []UintOption {
	acc := make([]UintOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []byte: byte->Uint8Option */ func MapUint8OptionToByteArr(m []byte, f func(byte) Uint8Option) []Uint8Option {
	acc := make([]Uint8Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []byte: byte->Uint16Option */ func MapUint16OptionToByteArr(m []byte, f func(byte) Uint16Option) []Uint16Option {
	acc := make([]Uint16Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []byte: byte->Uint32Option */ func MapUint32OptionToByteArr(m []byte, f func(byte) Uint32Option) []Uint32Option {
	acc := make([]Uint32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []byte: byte->Uint64Option */ func MapUint64OptionToByteArr(m []byte, f func(byte) Uint64Option) []Uint64Option {
	acc := make([]Uint64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []byte: byte->UintptrOption */ func MapUintptrOptionToByteArr(m []byte, f func(byte) UintptrOption) []UintptrOption {
	acc := make([]UintptrOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []byte: byte->ByteOption */ func MapByteOptionToByteArr(m []byte, f func(byte) ByteOption) []ByteOption {
	acc := make([]ByteOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []byte: byte->RuneOption */ func MapRuneOptionToByteArr(m []byte, f func(byte) RuneOption) []RuneOption {
	acc := make([]RuneOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []byte: byte->Float32Option */ func MapFloat32OptionToByteArr(m []byte, f func(byte) Float32Option) []Float32Option {
	acc := make([]Float32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []byte: byte->Float64Option */ func MapFloat64OptionToByteArr(m []byte, f func(byte) Float64Option) []Float64Option {
	acc := make([]Float64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []byte: byte->Complex64Option */ func MapComplex64OptionToByteArr(m []byte, f func(byte) Complex64Option) []Complex64Option {
	acc := make([]Complex64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []byte: byte->Complex128Option */ func MapComplex128OptionToByteArr(m []byte, f func(byte) Complex128Option) []Complex128Option {
	acc := make([]Complex128Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []byte: byte->AnyOption */ func MapAnyOptionToByteArr(m []byte, f func(byte) AnyOption) []AnyOption {
	acc := make([]AnyOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []byte: byte->[]bool */ func MapBoolArrToByteArr(m []byte, f func(byte) []bool) [][]bool {
	acc := make([][]bool, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []byte: byte->[]string */ func MapStringArrToByteArr(m []byte, f func(byte) []string) [][]string {
	acc := make([][]string, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []byte: byte->[]int */ func MapIntArrToByteArr(m []byte, f func(byte) []int) [][]int {
	acc := make([][]int, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []byte: byte->[]int8 */ func MapInt8ArrToByteArr(m []byte, f func(byte) []int8) [][]int8 {
	acc := make([][]int8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []byte: byte->[]int16 */ func MapInt16ArrToByteArr(m []byte, f func(byte) []int16) [][]int16 {
	acc := make([][]int16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []byte: byte->[]int32 */ func MapInt32ArrToByteArr(m []byte, f func(byte) []int32) [][]int32 {
	acc := make([][]int32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []byte: byte->[]int64 */ func MapInt64ArrToByteArr(m []byte, f func(byte) []int64) [][]int64 {
	acc := make([][]int64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []byte: byte->[]uint */ func MapUintArrToByteArr(m []byte, f func(byte) []uint) [][]uint {
	acc := make([][]uint, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []byte: byte->[]uint8 */ func MapUint8ArrToByteArr(m []byte, f func(byte) []uint8) [][]uint8 {
	acc := make([][]uint8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []byte: byte->[]uint16 */ func MapUint16ArrToByteArr(m []byte, f func(byte) []uint16) [][]uint16 {
	acc := make([][]uint16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []byte: byte->[]uint32 */ func MapUint32ArrToByteArr(m []byte, f func(byte) []uint32) [][]uint32 {
	acc := make([][]uint32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []byte: byte->[]uint64 */ func MapUint64ArrToByteArr(m []byte, f func(byte) []uint64) [][]uint64 {
	acc := make([][]uint64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []byte: byte->[]uintptr */ func MapUintptrArrToByteArr(m []byte, f func(byte) []uintptr) [][]uintptr {
	acc := make([][]uintptr, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []byte: byte->[]byte */ func MapByteArrToByteArr(m []byte, f func(byte) []byte) [][]byte {
	acc := make([][]byte, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []byte: byte->[]rune */ func MapRuneArrToByteArr(m []byte, f func(byte) []rune) [][]rune {
	acc := make([][]rune, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []byte: byte->[]float32 */ func MapFloat32ArrToByteArr(m []byte, f func(byte) []float32) [][]float32 {
	acc := make([][]float32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []byte: byte->[]float64 */ func MapFloat64ArrToByteArr(m []byte, f func(byte) []float64) [][]float64 {
	acc := make([][]float64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []byte: byte->[]complex64 */ func MapComplex64ArrToByteArr(m []byte, f func(byte) []complex64) [][]complex64 {
	acc := make([][]complex64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []byte: byte->[]complex128 */ func MapComplex128ArrToByteArr(m []byte, f func(byte) []complex128) [][]complex128 {
	acc := make([][]complex128, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []byte: byte->[]Any */ func MapAnyArrToByteArr(m []byte, f func(byte) []Any) [][]Any {
	acc := make([][]Any, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []byte: byte->BoolList */ func MapBoolListToByteArr(m []byte, f func(byte) BoolList) []BoolList {
	acc := make([]BoolList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []byte: byte->StringList */ func MapStringListToByteArr(m []byte, f func(byte) StringList) []StringList {
	acc := make([]StringList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []byte: byte->IntList */ func MapIntListToByteArr(m []byte, f func(byte) IntList) []IntList {
	acc := make([]IntList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []byte: byte->Int8List */ func MapInt8ListToByteArr(m []byte, f func(byte) Int8List) []Int8List {
	acc := make([]Int8List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []byte: byte->Int16List */ func MapInt16ListToByteArr(m []byte, f func(byte) Int16List) []Int16List {
	acc := make([]Int16List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []byte: byte->Int32List */ func MapInt32ListToByteArr(m []byte, f func(byte) Int32List) []Int32List {
	acc := make([]Int32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []byte: byte->Int64List */ func MapInt64ListToByteArr(m []byte, f func(byte) Int64List) []Int64List {
	acc := make([]Int64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []byte: byte->UintList */ func MapUintListToByteArr(m []byte, f func(byte) UintList) []UintList {
	acc := make([]UintList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []byte: byte->Uint8List */ func MapUint8ListToByteArr(m []byte, f func(byte) Uint8List) []Uint8List {
	acc := make([]Uint8List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []byte: byte->Uint16List */ func MapUint16ListToByteArr(m []byte, f func(byte) Uint16List) []Uint16List {
	acc := make([]Uint16List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []byte: byte->Uint32List */ func MapUint32ListToByteArr(m []byte, f func(byte) Uint32List) []Uint32List {
	acc := make([]Uint32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []byte: byte->Uint64List */ func MapUint64ListToByteArr(m []byte, f func(byte) Uint64List) []Uint64List {
	acc := make([]Uint64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []byte: byte->UintptrList */ func MapUintptrListToByteArr(m []byte, f func(byte) UintptrList) []UintptrList {
	acc := make([]UintptrList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []byte: byte->ByteList */ func MapByteListToByteArr(m []byte, f func(byte) ByteList) []ByteList {
	acc := make([]ByteList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []byte: byte->RuneList */ func MapRuneListToByteArr(m []byte, f func(byte) RuneList) []RuneList {
	acc := make([]RuneList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []byte: byte->Float32List */ func MapFloat32ListToByteArr(m []byte, f func(byte) Float32List) []Float32List {
	acc := make([]Float32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []byte: byte->Float64List */ func MapFloat64ListToByteArr(m []byte, f func(byte) Float64List) []Float64List {
	acc := make([]Float64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []byte: byte->Complex64List */ func MapComplex64ListToByteArr(m []byte, f func(byte) Complex64List) []Complex64List {
	acc := make([]Complex64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []byte: byte->Complex128List */ func MapComplex128ListToByteArr(m []byte, f func(byte) Complex128List) []Complex128List {
	acc := make([]Complex128List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []byte: byte->AnyList */ func MapAnyListToByteArr(m []byte, f func(byte) AnyList) []AnyList {
	acc := make([]AnyList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []rune: rune->bool */ func MapBoolToRuneArr(m []rune, f func(rune) bool) []bool {
	acc := make([]bool, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []rune: rune->string */ func MapStringToRuneArr(m []rune, f func(rune) string) []string {
	acc := make([]string, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []rune: rune->int */ func MapIntToRuneArr(m []rune, f func(rune) int) []int {
	acc := make([]int, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []rune: rune->int8 */ func MapInt8ToRuneArr(m []rune, f func(rune) int8) []int8 {
	acc := make([]int8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []rune: rune->int16 */ func MapInt16ToRuneArr(m []rune, f func(rune) int16) []int16 {
	acc := make([]int16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []rune: rune->int32 */ func MapInt32ToRuneArr(m []rune, f func(rune) int32) []int32 {
	acc := make([]int32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []rune: rune->int64 */ func MapInt64ToRuneArr(m []rune, f func(rune) int64) []int64 {
	acc := make([]int64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []rune: rune->uint */ func MapUintToRuneArr(m []rune, f func(rune) uint) []uint {
	acc := make([]uint, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []rune: rune->uint8 */ func MapUint8ToRuneArr(m []rune, f func(rune) uint8) []uint8 {
	acc := make([]uint8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []rune: rune->uint16 */ func MapUint16ToRuneArr(m []rune, f func(rune) uint16) []uint16 {
	acc := make([]uint16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []rune: rune->uint32 */ func MapUint32ToRuneArr(m []rune, f func(rune) uint32) []uint32 {
	acc := make([]uint32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []rune: rune->uint64 */ func MapUint64ToRuneArr(m []rune, f func(rune) uint64) []uint64 {
	acc := make([]uint64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []rune: rune->uintptr */ func MapUintptrToRuneArr(m []rune, f func(rune) uintptr) []uintptr {
	acc := make([]uintptr, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []rune: rune->byte */ func MapByteToRuneArr(m []rune, f func(rune) byte) []byte {
	acc := make([]byte, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []rune: rune->rune */ func MapRuneToRuneArr(m []rune, f func(rune) rune) []rune {
	acc := make([]rune, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []rune: rune->float32 */ func MapFloat32ToRuneArr(m []rune, f func(rune) float32) []float32 {
	acc := make([]float32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []rune: rune->float64 */ func MapFloat64ToRuneArr(m []rune, f func(rune) float64) []float64 {
	acc := make([]float64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []rune: rune->complex64 */ func MapComplex64ToRuneArr(m []rune, f func(rune) complex64) []complex64 {
	acc := make([]complex64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []rune: rune->complex128 */ func MapComplex128ToRuneArr(m []rune, f func(rune) complex128) []complex128 {
	acc := make([]complex128, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []rune: rune->Any */ func MapAnyToRuneArr(m []rune, f func(rune) Any) []Any {
	acc := make([]Any, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []rune: rune->BoolOption */ func MapBoolOptionToRuneArr(m []rune, f func(rune) BoolOption) []BoolOption {
	acc := make([]BoolOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []rune: rune->StringOption */ func MapStringOptionToRuneArr(m []rune, f func(rune) StringOption) []StringOption {
	acc := make([]StringOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []rune: rune->IntOption */ func MapIntOptionToRuneArr(m []rune, f func(rune) IntOption) []IntOption {
	acc := make([]IntOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []rune: rune->Int8Option */ func MapInt8OptionToRuneArr(m []rune, f func(rune) Int8Option) []Int8Option {
	acc := make([]Int8Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []rune: rune->Int16Option */ func MapInt16OptionToRuneArr(m []rune, f func(rune) Int16Option) []Int16Option {
	acc := make([]Int16Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []rune: rune->Int32Option */ func MapInt32OptionToRuneArr(m []rune, f func(rune) Int32Option) []Int32Option {
	acc := make([]Int32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []rune: rune->Int64Option */ func MapInt64OptionToRuneArr(m []rune, f func(rune) Int64Option) []Int64Option {
	acc := make([]Int64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []rune: rune->UintOption */ func MapUintOptionToRuneArr(m []rune, f func(rune) UintOption) []UintOption {
	acc := make([]UintOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []rune: rune->Uint8Option */ func MapUint8OptionToRuneArr(m []rune, f func(rune) Uint8Option) []Uint8Option {
	acc := make([]Uint8Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []rune: rune->Uint16Option */ func MapUint16OptionToRuneArr(m []rune, f func(rune) Uint16Option) []Uint16Option {
	acc := make([]Uint16Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []rune: rune->Uint32Option */ func MapUint32OptionToRuneArr(m []rune, f func(rune) Uint32Option) []Uint32Option {
	acc := make([]Uint32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []rune: rune->Uint64Option */ func MapUint64OptionToRuneArr(m []rune, f func(rune) Uint64Option) []Uint64Option {
	acc := make([]Uint64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []rune: rune->UintptrOption */ func MapUintptrOptionToRuneArr(m []rune, f func(rune) UintptrOption) []UintptrOption {
	acc := make([]UintptrOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []rune: rune->ByteOption */ func MapByteOptionToRuneArr(m []rune, f func(rune) ByteOption) []ByteOption {
	acc := make([]ByteOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []rune: rune->RuneOption */ func MapRuneOptionToRuneArr(m []rune, f func(rune) RuneOption) []RuneOption {
	acc := make([]RuneOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []rune: rune->Float32Option */ func MapFloat32OptionToRuneArr(m []rune, f func(rune) Float32Option) []Float32Option {
	acc := make([]Float32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []rune: rune->Float64Option */ func MapFloat64OptionToRuneArr(m []rune, f func(rune) Float64Option) []Float64Option {
	acc := make([]Float64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []rune: rune->Complex64Option */ func MapComplex64OptionToRuneArr(m []rune, f func(rune) Complex64Option) []Complex64Option {
	acc := make([]Complex64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []rune: rune->Complex128Option */ func MapComplex128OptionToRuneArr(m []rune, f func(rune) Complex128Option) []Complex128Option {
	acc := make([]Complex128Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []rune: rune->AnyOption */ func MapAnyOptionToRuneArr(m []rune, f func(rune) AnyOption) []AnyOption {
	acc := make([]AnyOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []rune: rune->[]bool */ func MapBoolArrToRuneArr(m []rune, f func(rune) []bool) [][]bool {
	acc := make([][]bool, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []rune: rune->[]string */ func MapStringArrToRuneArr(m []rune, f func(rune) []string) [][]string {
	acc := make([][]string, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []rune: rune->[]int */ func MapIntArrToRuneArr(m []rune, f func(rune) []int) [][]int {
	acc := make([][]int, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []rune: rune->[]int8 */ func MapInt8ArrToRuneArr(m []rune, f func(rune) []int8) [][]int8 {
	acc := make([][]int8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []rune: rune->[]int16 */ func MapInt16ArrToRuneArr(m []rune, f func(rune) []int16) [][]int16 {
	acc := make([][]int16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []rune: rune->[]int32 */ func MapInt32ArrToRuneArr(m []rune, f func(rune) []int32) [][]int32 {
	acc := make([][]int32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []rune: rune->[]int64 */ func MapInt64ArrToRuneArr(m []rune, f func(rune) []int64) [][]int64 {
	acc := make([][]int64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []rune: rune->[]uint */ func MapUintArrToRuneArr(m []rune, f func(rune) []uint) [][]uint {
	acc := make([][]uint, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []rune: rune->[]uint8 */ func MapUint8ArrToRuneArr(m []rune, f func(rune) []uint8) [][]uint8 {
	acc := make([][]uint8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []rune: rune->[]uint16 */ func MapUint16ArrToRuneArr(m []rune, f func(rune) []uint16) [][]uint16 {
	acc := make([][]uint16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []rune: rune->[]uint32 */ func MapUint32ArrToRuneArr(m []rune, f func(rune) []uint32) [][]uint32 {
	acc := make([][]uint32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []rune: rune->[]uint64 */ func MapUint64ArrToRuneArr(m []rune, f func(rune) []uint64) [][]uint64 {
	acc := make([][]uint64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []rune: rune->[]uintptr */ func MapUintptrArrToRuneArr(m []rune, f func(rune) []uintptr) [][]uintptr {
	acc := make([][]uintptr, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []rune: rune->[]byte */ func MapByteArrToRuneArr(m []rune, f func(rune) []byte) [][]byte {
	acc := make([][]byte, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []rune: rune->[]rune */ func MapRuneArrToRuneArr(m []rune, f func(rune) []rune) [][]rune {
	acc := make([][]rune, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []rune: rune->[]float32 */ func MapFloat32ArrToRuneArr(m []rune, f func(rune) []float32) [][]float32 {
	acc := make([][]float32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []rune: rune->[]float64 */ func MapFloat64ArrToRuneArr(m []rune, f func(rune) []float64) [][]float64 {
	acc := make([][]float64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []rune: rune->[]complex64 */ func MapComplex64ArrToRuneArr(m []rune, f func(rune) []complex64) [][]complex64 {
	acc := make([][]complex64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []rune: rune->[]complex128 */ func MapComplex128ArrToRuneArr(m []rune, f func(rune) []complex128) [][]complex128 {
	acc := make([][]complex128, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []rune: rune->[]Any */ func MapAnyArrToRuneArr(m []rune, f func(rune) []Any) [][]Any {
	acc := make([][]Any, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []rune: rune->BoolList */ func MapBoolListToRuneArr(m []rune, f func(rune) BoolList) []BoolList {
	acc := make([]BoolList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []rune: rune->StringList */ func MapStringListToRuneArr(m []rune, f func(rune) StringList) []StringList {
	acc := make([]StringList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []rune: rune->IntList */ func MapIntListToRuneArr(m []rune, f func(rune) IntList) []IntList {
	acc := make([]IntList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []rune: rune->Int8List */ func MapInt8ListToRuneArr(m []rune, f func(rune) Int8List) []Int8List {
	acc := make([]Int8List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []rune: rune->Int16List */ func MapInt16ListToRuneArr(m []rune, f func(rune) Int16List) []Int16List {
	acc := make([]Int16List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []rune: rune->Int32List */ func MapInt32ListToRuneArr(m []rune, f func(rune) Int32List) []Int32List {
	acc := make([]Int32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []rune: rune->Int64List */ func MapInt64ListToRuneArr(m []rune, f func(rune) Int64List) []Int64List {
	acc := make([]Int64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []rune: rune->UintList */ func MapUintListToRuneArr(m []rune, f func(rune) UintList) []UintList {
	acc := make([]UintList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []rune: rune->Uint8List */ func MapUint8ListToRuneArr(m []rune, f func(rune) Uint8List) []Uint8List {
	acc := make([]Uint8List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []rune: rune->Uint16List */ func MapUint16ListToRuneArr(m []rune, f func(rune) Uint16List) []Uint16List {
	acc := make([]Uint16List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []rune: rune->Uint32List */ func MapUint32ListToRuneArr(m []rune, f func(rune) Uint32List) []Uint32List {
	acc := make([]Uint32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []rune: rune->Uint64List */ func MapUint64ListToRuneArr(m []rune, f func(rune) Uint64List) []Uint64List {
	acc := make([]Uint64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []rune: rune->UintptrList */ func MapUintptrListToRuneArr(m []rune, f func(rune) UintptrList) []UintptrList {
	acc := make([]UintptrList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []rune: rune->ByteList */ func MapByteListToRuneArr(m []rune, f func(rune) ByteList) []ByteList {
	acc := make([]ByteList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []rune: rune->RuneList */ func MapRuneListToRuneArr(m []rune, f func(rune) RuneList) []RuneList {
	acc := make([]RuneList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []rune: rune->Float32List */ func MapFloat32ListToRuneArr(m []rune, f func(rune) Float32List) []Float32List {
	acc := make([]Float32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []rune: rune->Float64List */ func MapFloat64ListToRuneArr(m []rune, f func(rune) Float64List) []Float64List {
	acc := make([]Float64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []rune: rune->Complex64List */ func MapComplex64ListToRuneArr(m []rune, f func(rune) Complex64List) []Complex64List {
	acc := make([]Complex64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []rune: rune->Complex128List */ func MapComplex128ListToRuneArr(m []rune, f func(rune) Complex128List) []Complex128List {
	acc := make([]Complex128List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []rune: rune->AnyList */ func MapAnyListToRuneArr(m []rune, f func(rune) AnyList) []AnyList {
	acc := make([]AnyList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float32: float32->bool */ func MapBoolToFloat32Arr(m []float32, f func(float32) bool) []bool {
	acc := make([]bool, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float32: float32->string */ func MapStringToFloat32Arr(m []float32, f func(float32) string) []string {
	acc := make([]string, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float32: float32->int */ func MapIntToFloat32Arr(m []float32, f func(float32) int) []int {
	acc := make([]int, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float32: float32->int8 */ func MapInt8ToFloat32Arr(m []float32, f func(float32) int8) []int8 {
	acc := make([]int8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float32: float32->int16 */ func MapInt16ToFloat32Arr(m []float32, f func(float32) int16) []int16 {
	acc := make([]int16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float32: float32->int32 */ func MapInt32ToFloat32Arr(m []float32, f func(float32) int32) []int32 {
	acc := make([]int32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float32: float32->int64 */ func MapInt64ToFloat32Arr(m []float32, f func(float32) int64) []int64 {
	acc := make([]int64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float32: float32->uint */ func MapUintToFloat32Arr(m []float32, f func(float32) uint) []uint {
	acc := make([]uint, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float32: float32->uint8 */ func MapUint8ToFloat32Arr(m []float32, f func(float32) uint8) []uint8 {
	acc := make([]uint8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float32: float32->uint16 */ func MapUint16ToFloat32Arr(m []float32, f func(float32) uint16) []uint16 {
	acc := make([]uint16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float32: float32->uint32 */ func MapUint32ToFloat32Arr(m []float32, f func(float32) uint32) []uint32 {
	acc := make([]uint32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float32: float32->uint64 */ func MapUint64ToFloat32Arr(m []float32, f func(float32) uint64) []uint64 {
	acc := make([]uint64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float32: float32->uintptr */ func MapUintptrToFloat32Arr(m []float32, f func(float32) uintptr) []uintptr {
	acc := make([]uintptr, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float32: float32->byte */ func MapByteToFloat32Arr(m []float32, f func(float32) byte) []byte {
	acc := make([]byte, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float32: float32->rune */ func MapRuneToFloat32Arr(m []float32, f func(float32) rune) []rune {
	acc := make([]rune, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float32: float32->float32 */ func MapFloat32ToFloat32Arr(m []float32, f func(float32) float32) []float32 {
	acc := make([]float32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float32: float32->float64 */ func MapFloat64ToFloat32Arr(m []float32, f func(float32) float64) []float64 {
	acc := make([]float64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float32: float32->complex64 */ func MapComplex64ToFloat32Arr(m []float32, f func(float32) complex64) []complex64 {
	acc := make([]complex64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float32: float32->complex128 */ func MapComplex128ToFloat32Arr(m []float32, f func(float32) complex128) []complex128 {
	acc := make([]complex128, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float32: float32->Any */ func MapAnyToFloat32Arr(m []float32, f func(float32) Any) []Any {
	acc := make([]Any, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float32: float32->BoolOption */ func MapBoolOptionToFloat32Arr(m []float32, f func(float32) BoolOption) []BoolOption {
	acc := make([]BoolOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float32: float32->StringOption */ func MapStringOptionToFloat32Arr(m []float32, f func(float32) StringOption) []StringOption {
	acc := make([]StringOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float32: float32->IntOption */ func MapIntOptionToFloat32Arr(m []float32, f func(float32) IntOption) []IntOption {
	acc := make([]IntOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float32: float32->Int8Option */ func MapInt8OptionToFloat32Arr(m []float32, f func(float32) Int8Option) []Int8Option {
	acc := make([]Int8Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float32: float32->Int16Option */ func MapInt16OptionToFloat32Arr(m []float32, f func(float32) Int16Option) []Int16Option {
	acc := make([]Int16Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float32: float32->Int32Option */ func MapInt32OptionToFloat32Arr(m []float32, f func(float32) Int32Option) []Int32Option {
	acc := make([]Int32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float32: float32->Int64Option */ func MapInt64OptionToFloat32Arr(m []float32, f func(float32) Int64Option) []Int64Option {
	acc := make([]Int64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float32: float32->UintOption */ func MapUintOptionToFloat32Arr(m []float32, f func(float32) UintOption) []UintOption {
	acc := make([]UintOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float32: float32->Uint8Option */ func MapUint8OptionToFloat32Arr(m []float32, f func(float32) Uint8Option) []Uint8Option {
	acc := make([]Uint8Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float32: float32->Uint16Option */ func MapUint16OptionToFloat32Arr(m []float32, f func(float32) Uint16Option) []Uint16Option {
	acc := make([]Uint16Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float32: float32->Uint32Option */ func MapUint32OptionToFloat32Arr(m []float32, f func(float32) Uint32Option) []Uint32Option {
	acc := make([]Uint32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float32: float32->Uint64Option */ func MapUint64OptionToFloat32Arr(m []float32, f func(float32) Uint64Option) []Uint64Option {
	acc := make([]Uint64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float32: float32->UintptrOption */ func MapUintptrOptionToFloat32Arr(m []float32, f func(float32) UintptrOption) []UintptrOption {
	acc := make([]UintptrOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float32: float32->ByteOption */ func MapByteOptionToFloat32Arr(m []float32, f func(float32) ByteOption) []ByteOption {
	acc := make([]ByteOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float32: float32->RuneOption */ func MapRuneOptionToFloat32Arr(m []float32, f func(float32) RuneOption) []RuneOption {
	acc := make([]RuneOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float32: float32->Float32Option */ func MapFloat32OptionToFloat32Arr(m []float32, f func(float32) Float32Option) []Float32Option {
	acc := make([]Float32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float32: float32->Float64Option */ func MapFloat64OptionToFloat32Arr(m []float32, f func(float32) Float64Option) []Float64Option {
	acc := make([]Float64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float32: float32->Complex64Option */ func MapComplex64OptionToFloat32Arr(m []float32, f func(float32) Complex64Option) []Complex64Option {
	acc := make([]Complex64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float32: float32->Complex128Option */ func MapComplex128OptionToFloat32Arr(m []float32, f func(float32) Complex128Option) []Complex128Option {
	acc := make([]Complex128Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float32: float32->AnyOption */ func MapAnyOptionToFloat32Arr(m []float32, f func(float32) AnyOption) []AnyOption {
	acc := make([]AnyOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float32: float32->[]bool */ func MapBoolArrToFloat32Arr(m []float32, f func(float32) []bool) [][]bool {
	acc := make([][]bool, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float32: float32->[]string */ func MapStringArrToFloat32Arr(m []float32, f func(float32) []string) [][]string {
	acc := make([][]string, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float32: float32->[]int */ func MapIntArrToFloat32Arr(m []float32, f func(float32) []int) [][]int {
	acc := make([][]int, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float32: float32->[]int8 */ func MapInt8ArrToFloat32Arr(m []float32, f func(float32) []int8) [][]int8 {
	acc := make([][]int8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float32: float32->[]int16 */ func MapInt16ArrToFloat32Arr(m []float32, f func(float32) []int16) [][]int16 {
	acc := make([][]int16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float32: float32->[]int32 */ func MapInt32ArrToFloat32Arr(m []float32, f func(float32) []int32) [][]int32 {
	acc := make([][]int32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float32: float32->[]int64 */ func MapInt64ArrToFloat32Arr(m []float32, f func(float32) []int64) [][]int64 {
	acc := make([][]int64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float32: float32->[]uint */ func MapUintArrToFloat32Arr(m []float32, f func(float32) []uint) [][]uint {
	acc := make([][]uint, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float32: float32->[]uint8 */ func MapUint8ArrToFloat32Arr(m []float32, f func(float32) []uint8) [][]uint8 {
	acc := make([][]uint8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float32: float32->[]uint16 */ func MapUint16ArrToFloat32Arr(m []float32, f func(float32) []uint16) [][]uint16 {
	acc := make([][]uint16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float32: float32->[]uint32 */ func MapUint32ArrToFloat32Arr(m []float32, f func(float32) []uint32) [][]uint32 {
	acc := make([][]uint32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float32: float32->[]uint64 */ func MapUint64ArrToFloat32Arr(m []float32, f func(float32) []uint64) [][]uint64 {
	acc := make([][]uint64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float32: float32->[]uintptr */ func MapUintptrArrToFloat32Arr(m []float32, f func(float32) []uintptr) [][]uintptr {
	acc := make([][]uintptr, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float32: float32->[]byte */ func MapByteArrToFloat32Arr(m []float32, f func(float32) []byte) [][]byte {
	acc := make([][]byte, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float32: float32->[]rune */ func MapRuneArrToFloat32Arr(m []float32, f func(float32) []rune) [][]rune {
	acc := make([][]rune, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float32: float32->[]float32 */ func MapFloat32ArrToFloat32Arr(m []float32, f func(float32) []float32) [][]float32 {
	acc := make([][]float32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float32: float32->[]float64 */ func MapFloat64ArrToFloat32Arr(m []float32, f func(float32) []float64) [][]float64 {
	acc := make([][]float64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float32: float32->[]complex64 */ func MapComplex64ArrToFloat32Arr(m []float32, f func(float32) []complex64) [][]complex64 {
	acc := make([][]complex64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float32: float32->[]complex128 */ func MapComplex128ArrToFloat32Arr(m []float32, f func(float32) []complex128) [][]complex128 {
	acc := make([][]complex128, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float32: float32->[]Any */ func MapAnyArrToFloat32Arr(m []float32, f func(float32) []Any) [][]Any {
	acc := make([][]Any, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float32: float32->BoolList */ func MapBoolListToFloat32Arr(m []float32, f func(float32) BoolList) []BoolList {
	acc := make([]BoolList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float32: float32->StringList */ func MapStringListToFloat32Arr(m []float32, f func(float32) StringList) []StringList {
	acc := make([]StringList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float32: float32->IntList */ func MapIntListToFloat32Arr(m []float32, f func(float32) IntList) []IntList {
	acc := make([]IntList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float32: float32->Int8List */ func MapInt8ListToFloat32Arr(m []float32, f func(float32) Int8List) []Int8List {
	acc := make([]Int8List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float32: float32->Int16List */ func MapInt16ListToFloat32Arr(m []float32, f func(float32) Int16List) []Int16List {
	acc := make([]Int16List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float32: float32->Int32List */ func MapInt32ListToFloat32Arr(m []float32, f func(float32) Int32List) []Int32List {
	acc := make([]Int32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float32: float32->Int64List */ func MapInt64ListToFloat32Arr(m []float32, f func(float32) Int64List) []Int64List {
	acc := make([]Int64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float32: float32->UintList */ func MapUintListToFloat32Arr(m []float32, f func(float32) UintList) []UintList {
	acc := make([]UintList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float32: float32->Uint8List */ func MapUint8ListToFloat32Arr(m []float32, f func(float32) Uint8List) []Uint8List {
	acc := make([]Uint8List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float32: float32->Uint16List */ func MapUint16ListToFloat32Arr(m []float32, f func(float32) Uint16List) []Uint16List {
	acc := make([]Uint16List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float32: float32->Uint32List */ func MapUint32ListToFloat32Arr(m []float32, f func(float32) Uint32List) []Uint32List {
	acc := make([]Uint32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float32: float32->Uint64List */ func MapUint64ListToFloat32Arr(m []float32, f func(float32) Uint64List) []Uint64List {
	acc := make([]Uint64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float32: float32->UintptrList */ func MapUintptrListToFloat32Arr(m []float32, f func(float32) UintptrList) []UintptrList {
	acc := make([]UintptrList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float32: float32->ByteList */ func MapByteListToFloat32Arr(m []float32, f func(float32) ByteList) []ByteList {
	acc := make([]ByteList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float32: float32->RuneList */ func MapRuneListToFloat32Arr(m []float32, f func(float32) RuneList) []RuneList {
	acc := make([]RuneList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float32: float32->Float32List */ func MapFloat32ListToFloat32Arr(m []float32, f func(float32) Float32List) []Float32List {
	acc := make([]Float32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float32: float32->Float64List */ func MapFloat64ListToFloat32Arr(m []float32, f func(float32) Float64List) []Float64List {
	acc := make([]Float64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float32: float32->Complex64List */ func MapComplex64ListToFloat32Arr(m []float32, f func(float32) Complex64List) []Complex64List {
	acc := make([]Complex64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float32: float32->Complex128List */ func MapComplex128ListToFloat32Arr(m []float32, f func(float32) Complex128List) []Complex128List {
	acc := make([]Complex128List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float32: float32->AnyList */ func MapAnyListToFloat32Arr(m []float32, f func(float32) AnyList) []AnyList {
	acc := make([]AnyList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float64: float64->bool */ func MapBoolToFloat64Arr(m []float64, f func(float64) bool) []bool {
	acc := make([]bool, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float64: float64->string */ func MapStringToFloat64Arr(m []float64, f func(float64) string) []string {
	acc := make([]string, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float64: float64->int */ func MapIntToFloat64Arr(m []float64, f func(float64) int) []int {
	acc := make([]int, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float64: float64->int8 */ func MapInt8ToFloat64Arr(m []float64, f func(float64) int8) []int8 {
	acc := make([]int8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float64: float64->int16 */ func MapInt16ToFloat64Arr(m []float64, f func(float64) int16) []int16 {
	acc := make([]int16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float64: float64->int32 */ func MapInt32ToFloat64Arr(m []float64, f func(float64) int32) []int32 {
	acc := make([]int32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float64: float64->int64 */ func MapInt64ToFloat64Arr(m []float64, f func(float64) int64) []int64 {
	acc := make([]int64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float64: float64->uint */ func MapUintToFloat64Arr(m []float64, f func(float64) uint) []uint {
	acc := make([]uint, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float64: float64->uint8 */ func MapUint8ToFloat64Arr(m []float64, f func(float64) uint8) []uint8 {
	acc := make([]uint8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float64: float64->uint16 */ func MapUint16ToFloat64Arr(m []float64, f func(float64) uint16) []uint16 {
	acc := make([]uint16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float64: float64->uint32 */ func MapUint32ToFloat64Arr(m []float64, f func(float64) uint32) []uint32 {
	acc := make([]uint32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float64: float64->uint64 */ func MapUint64ToFloat64Arr(m []float64, f func(float64) uint64) []uint64 {
	acc := make([]uint64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float64: float64->uintptr */ func MapUintptrToFloat64Arr(m []float64, f func(float64) uintptr) []uintptr {
	acc := make([]uintptr, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float64: float64->byte */ func MapByteToFloat64Arr(m []float64, f func(float64) byte) []byte {
	acc := make([]byte, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float64: float64->rune */ func MapRuneToFloat64Arr(m []float64, f func(float64) rune) []rune {
	acc := make([]rune, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float64: float64->float32 */ func MapFloat32ToFloat64Arr(m []float64, f func(float64) float32) []float32 {
	acc := make([]float32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float64: float64->float64 */ func MapFloat64ToFloat64Arr(m []float64, f func(float64) float64) []float64 {
	acc := make([]float64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float64: float64->complex64 */ func MapComplex64ToFloat64Arr(m []float64, f func(float64) complex64) []complex64 {
	acc := make([]complex64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float64: float64->complex128 */ func MapComplex128ToFloat64Arr(m []float64, f func(float64) complex128) []complex128 {
	acc := make([]complex128, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float64: float64->Any */ func MapAnyToFloat64Arr(m []float64, f func(float64) Any) []Any {
	acc := make([]Any, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float64: float64->BoolOption */ func MapBoolOptionToFloat64Arr(m []float64, f func(float64) BoolOption) []BoolOption {
	acc := make([]BoolOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float64: float64->StringOption */ func MapStringOptionToFloat64Arr(m []float64, f func(float64) StringOption) []StringOption {
	acc := make([]StringOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float64: float64->IntOption */ func MapIntOptionToFloat64Arr(m []float64, f func(float64) IntOption) []IntOption {
	acc := make([]IntOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float64: float64->Int8Option */ func MapInt8OptionToFloat64Arr(m []float64, f func(float64) Int8Option) []Int8Option {
	acc := make([]Int8Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float64: float64->Int16Option */ func MapInt16OptionToFloat64Arr(m []float64, f func(float64) Int16Option) []Int16Option {
	acc := make([]Int16Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float64: float64->Int32Option */ func MapInt32OptionToFloat64Arr(m []float64, f func(float64) Int32Option) []Int32Option {
	acc := make([]Int32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float64: float64->Int64Option */ func MapInt64OptionToFloat64Arr(m []float64, f func(float64) Int64Option) []Int64Option {
	acc := make([]Int64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float64: float64->UintOption */ func MapUintOptionToFloat64Arr(m []float64, f func(float64) UintOption) []UintOption {
	acc := make([]UintOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float64: float64->Uint8Option */ func MapUint8OptionToFloat64Arr(m []float64, f func(float64) Uint8Option) []Uint8Option {
	acc := make([]Uint8Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float64: float64->Uint16Option */ func MapUint16OptionToFloat64Arr(m []float64, f func(float64) Uint16Option) []Uint16Option {
	acc := make([]Uint16Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float64: float64->Uint32Option */ func MapUint32OptionToFloat64Arr(m []float64, f func(float64) Uint32Option) []Uint32Option {
	acc := make([]Uint32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float64: float64->Uint64Option */ func MapUint64OptionToFloat64Arr(m []float64, f func(float64) Uint64Option) []Uint64Option {
	acc := make([]Uint64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float64: float64->UintptrOption */ func MapUintptrOptionToFloat64Arr(m []float64, f func(float64) UintptrOption) []UintptrOption {
	acc := make([]UintptrOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float64: float64->ByteOption */ func MapByteOptionToFloat64Arr(m []float64, f func(float64) ByteOption) []ByteOption {
	acc := make([]ByteOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float64: float64->RuneOption */ func MapRuneOptionToFloat64Arr(m []float64, f func(float64) RuneOption) []RuneOption {
	acc := make([]RuneOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float64: float64->Float32Option */ func MapFloat32OptionToFloat64Arr(m []float64, f func(float64) Float32Option) []Float32Option {
	acc := make([]Float32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float64: float64->Float64Option */ func MapFloat64OptionToFloat64Arr(m []float64, f func(float64) Float64Option) []Float64Option {
	acc := make([]Float64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float64: float64->Complex64Option */ func MapComplex64OptionToFloat64Arr(m []float64, f func(float64) Complex64Option) []Complex64Option {
	acc := make([]Complex64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float64: float64->Complex128Option */ func MapComplex128OptionToFloat64Arr(m []float64, f func(float64) Complex128Option) []Complex128Option {
	acc := make([]Complex128Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float64: float64->AnyOption */ func MapAnyOptionToFloat64Arr(m []float64, f func(float64) AnyOption) []AnyOption {
	acc := make([]AnyOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float64: float64->[]bool */ func MapBoolArrToFloat64Arr(m []float64, f func(float64) []bool) [][]bool {
	acc := make([][]bool, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float64: float64->[]string */ func MapStringArrToFloat64Arr(m []float64, f func(float64) []string) [][]string {
	acc := make([][]string, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float64: float64->[]int */ func MapIntArrToFloat64Arr(m []float64, f func(float64) []int) [][]int {
	acc := make([][]int, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float64: float64->[]int8 */ func MapInt8ArrToFloat64Arr(m []float64, f func(float64) []int8) [][]int8 {
	acc := make([][]int8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float64: float64->[]int16 */ func MapInt16ArrToFloat64Arr(m []float64, f func(float64) []int16) [][]int16 {
	acc := make([][]int16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float64: float64->[]int32 */ func MapInt32ArrToFloat64Arr(m []float64, f func(float64) []int32) [][]int32 {
	acc := make([][]int32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float64: float64->[]int64 */ func MapInt64ArrToFloat64Arr(m []float64, f func(float64) []int64) [][]int64 {
	acc := make([][]int64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float64: float64->[]uint */ func MapUintArrToFloat64Arr(m []float64, f func(float64) []uint) [][]uint {
	acc := make([][]uint, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float64: float64->[]uint8 */ func MapUint8ArrToFloat64Arr(m []float64, f func(float64) []uint8) [][]uint8 {
	acc := make([][]uint8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float64: float64->[]uint16 */ func MapUint16ArrToFloat64Arr(m []float64, f func(float64) []uint16) [][]uint16 {
	acc := make([][]uint16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float64: float64->[]uint32 */ func MapUint32ArrToFloat64Arr(m []float64, f func(float64) []uint32) [][]uint32 {
	acc := make([][]uint32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float64: float64->[]uint64 */ func MapUint64ArrToFloat64Arr(m []float64, f func(float64) []uint64) [][]uint64 {
	acc := make([][]uint64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float64: float64->[]uintptr */ func MapUintptrArrToFloat64Arr(m []float64, f func(float64) []uintptr) [][]uintptr {
	acc := make([][]uintptr, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float64: float64->[]byte */ func MapByteArrToFloat64Arr(m []float64, f func(float64) []byte) [][]byte {
	acc := make([][]byte, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float64: float64->[]rune */ func MapRuneArrToFloat64Arr(m []float64, f func(float64) []rune) [][]rune {
	acc := make([][]rune, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float64: float64->[]float32 */ func MapFloat32ArrToFloat64Arr(m []float64, f func(float64) []float32) [][]float32 {
	acc := make([][]float32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float64: float64->[]float64 */ func MapFloat64ArrToFloat64Arr(m []float64, f func(float64) []float64) [][]float64 {
	acc := make([][]float64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float64: float64->[]complex64 */ func MapComplex64ArrToFloat64Arr(m []float64, f func(float64) []complex64) [][]complex64 {
	acc := make([][]complex64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float64: float64->[]complex128 */ func MapComplex128ArrToFloat64Arr(m []float64, f func(float64) []complex128) [][]complex128 {
	acc := make([][]complex128, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float64: float64->[]Any */ func MapAnyArrToFloat64Arr(m []float64, f func(float64) []Any) [][]Any {
	acc := make([][]Any, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float64: float64->BoolList */ func MapBoolListToFloat64Arr(m []float64, f func(float64) BoolList) []BoolList {
	acc := make([]BoolList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float64: float64->StringList */ func MapStringListToFloat64Arr(m []float64, f func(float64) StringList) []StringList {
	acc := make([]StringList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float64: float64->IntList */ func MapIntListToFloat64Arr(m []float64, f func(float64) IntList) []IntList {
	acc := make([]IntList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float64: float64->Int8List */ func MapInt8ListToFloat64Arr(m []float64, f func(float64) Int8List) []Int8List {
	acc := make([]Int8List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float64: float64->Int16List */ func MapInt16ListToFloat64Arr(m []float64, f func(float64) Int16List) []Int16List {
	acc := make([]Int16List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float64: float64->Int32List */ func MapInt32ListToFloat64Arr(m []float64, f func(float64) Int32List) []Int32List {
	acc := make([]Int32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float64: float64->Int64List */ func MapInt64ListToFloat64Arr(m []float64, f func(float64) Int64List) []Int64List {
	acc := make([]Int64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float64: float64->UintList */ func MapUintListToFloat64Arr(m []float64, f func(float64) UintList) []UintList {
	acc := make([]UintList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float64: float64->Uint8List */ func MapUint8ListToFloat64Arr(m []float64, f func(float64) Uint8List) []Uint8List {
	acc := make([]Uint8List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float64: float64->Uint16List */ func MapUint16ListToFloat64Arr(m []float64, f func(float64) Uint16List) []Uint16List {
	acc := make([]Uint16List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float64: float64->Uint32List */ func MapUint32ListToFloat64Arr(m []float64, f func(float64) Uint32List) []Uint32List {
	acc := make([]Uint32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float64: float64->Uint64List */ func MapUint64ListToFloat64Arr(m []float64, f func(float64) Uint64List) []Uint64List {
	acc := make([]Uint64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float64: float64->UintptrList */ func MapUintptrListToFloat64Arr(m []float64, f func(float64) UintptrList) []UintptrList {
	acc := make([]UintptrList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float64: float64->ByteList */ func MapByteListToFloat64Arr(m []float64, f func(float64) ByteList) []ByteList {
	acc := make([]ByteList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float64: float64->RuneList */ func MapRuneListToFloat64Arr(m []float64, f func(float64) RuneList) []RuneList {
	acc := make([]RuneList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float64: float64->Float32List */ func MapFloat32ListToFloat64Arr(m []float64, f func(float64) Float32List) []Float32List {
	acc := make([]Float32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float64: float64->Float64List */ func MapFloat64ListToFloat64Arr(m []float64, f func(float64) Float64List) []Float64List {
	acc := make([]Float64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float64: float64->Complex64List */ func MapComplex64ListToFloat64Arr(m []float64, f func(float64) Complex64List) []Complex64List {
	acc := make([]Complex64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float64: float64->Complex128List */ func MapComplex128ListToFloat64Arr(m []float64, f func(float64) Complex128List) []Complex128List {
	acc := make([]Complex128List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []float64: float64->AnyList */ func MapAnyListToFloat64Arr(m []float64, f func(float64) AnyList) []AnyList {
	acc := make([]AnyList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex64: complex64->bool */ func MapBoolToComplex64Arr(m []complex64, f func(complex64) bool) []bool {
	acc := make([]bool, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex64: complex64->string */ func MapStringToComplex64Arr(m []complex64, f func(complex64) string) []string {
	acc := make([]string, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex64: complex64->int */ func MapIntToComplex64Arr(m []complex64, f func(complex64) int) []int {
	acc := make([]int, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex64: complex64->int8 */ func MapInt8ToComplex64Arr(m []complex64, f func(complex64) int8) []int8 {
	acc := make([]int8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex64: complex64->int16 */ func MapInt16ToComplex64Arr(m []complex64, f func(complex64) int16) []int16 {
	acc := make([]int16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex64: complex64->int32 */ func MapInt32ToComplex64Arr(m []complex64, f func(complex64) int32) []int32 {
	acc := make([]int32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex64: complex64->int64 */ func MapInt64ToComplex64Arr(m []complex64, f func(complex64) int64) []int64 {
	acc := make([]int64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex64: complex64->uint */ func MapUintToComplex64Arr(m []complex64, f func(complex64) uint) []uint {
	acc := make([]uint, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex64: complex64->uint8 */ func MapUint8ToComplex64Arr(m []complex64, f func(complex64) uint8) []uint8 {
	acc := make([]uint8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex64: complex64->uint16 */ func MapUint16ToComplex64Arr(m []complex64, f func(complex64) uint16) []uint16 {
	acc := make([]uint16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex64: complex64->uint32 */ func MapUint32ToComplex64Arr(m []complex64, f func(complex64) uint32) []uint32 {
	acc := make([]uint32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex64: complex64->uint64 */ func MapUint64ToComplex64Arr(m []complex64, f func(complex64) uint64) []uint64 {
	acc := make([]uint64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex64: complex64->uintptr */ func MapUintptrToComplex64Arr(m []complex64, f func(complex64) uintptr) []uintptr {
	acc := make([]uintptr, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex64: complex64->byte */ func MapByteToComplex64Arr(m []complex64, f func(complex64) byte) []byte {
	acc := make([]byte, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex64: complex64->rune */ func MapRuneToComplex64Arr(m []complex64, f func(complex64) rune) []rune {
	acc := make([]rune, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex64: complex64->float32 */ func MapFloat32ToComplex64Arr(m []complex64, f func(complex64) float32) []float32 {
	acc := make([]float32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex64: complex64->float64 */ func MapFloat64ToComplex64Arr(m []complex64, f func(complex64) float64) []float64 {
	acc := make([]float64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex64: complex64->complex64 */ func MapComplex64ToComplex64Arr(m []complex64, f func(complex64) complex64) []complex64 {
	acc := make([]complex64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex64: complex64->complex128 */ func MapComplex128ToComplex64Arr(m []complex64, f func(complex64) complex128) []complex128 {
	acc := make([]complex128, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex64: complex64->Any */ func MapAnyToComplex64Arr(m []complex64, f func(complex64) Any) []Any {
	acc := make([]Any, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex64: complex64->BoolOption */ func MapBoolOptionToComplex64Arr(m []complex64, f func(complex64) BoolOption) []BoolOption {
	acc := make([]BoolOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex64: complex64->StringOption */ func MapStringOptionToComplex64Arr(m []complex64, f func(complex64) StringOption) []StringOption {
	acc := make([]StringOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex64: complex64->IntOption */ func MapIntOptionToComplex64Arr(m []complex64, f func(complex64) IntOption) []IntOption {
	acc := make([]IntOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex64: complex64->Int8Option */ func MapInt8OptionToComplex64Arr(m []complex64, f func(complex64) Int8Option) []Int8Option {
	acc := make([]Int8Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex64: complex64->Int16Option */ func MapInt16OptionToComplex64Arr(m []complex64, f func(complex64) Int16Option) []Int16Option {
	acc := make([]Int16Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex64: complex64->Int32Option */ func MapInt32OptionToComplex64Arr(m []complex64, f func(complex64) Int32Option) []Int32Option {
	acc := make([]Int32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex64: complex64->Int64Option */ func MapInt64OptionToComplex64Arr(m []complex64, f func(complex64) Int64Option) []Int64Option {
	acc := make([]Int64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex64: complex64->UintOption */ func MapUintOptionToComplex64Arr(m []complex64, f func(complex64) UintOption) []UintOption {
	acc := make([]UintOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex64: complex64->Uint8Option */ func MapUint8OptionToComplex64Arr(m []complex64, f func(complex64) Uint8Option) []Uint8Option {
	acc := make([]Uint8Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex64: complex64->Uint16Option */ func MapUint16OptionToComplex64Arr(m []complex64, f func(complex64) Uint16Option) []Uint16Option {
	acc := make([]Uint16Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex64: complex64->Uint32Option */ func MapUint32OptionToComplex64Arr(m []complex64, f func(complex64) Uint32Option) []Uint32Option {
	acc := make([]Uint32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex64: complex64->Uint64Option */ func MapUint64OptionToComplex64Arr(m []complex64, f func(complex64) Uint64Option) []Uint64Option {
	acc := make([]Uint64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex64: complex64->UintptrOption */ func MapUintptrOptionToComplex64Arr(m []complex64, f func(complex64) UintptrOption) []UintptrOption {
	acc := make([]UintptrOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex64: complex64->ByteOption */ func MapByteOptionToComplex64Arr(m []complex64, f func(complex64) ByteOption) []ByteOption {
	acc := make([]ByteOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex64: complex64->RuneOption */ func MapRuneOptionToComplex64Arr(m []complex64, f func(complex64) RuneOption) []RuneOption {
	acc := make([]RuneOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex64: complex64->Float32Option */ func MapFloat32OptionToComplex64Arr(m []complex64, f func(complex64) Float32Option) []Float32Option {
	acc := make([]Float32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex64: complex64->Float64Option */ func MapFloat64OptionToComplex64Arr(m []complex64, f func(complex64) Float64Option) []Float64Option {
	acc := make([]Float64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex64: complex64->Complex64Option */ func MapComplex64OptionToComplex64Arr(m []complex64, f func(complex64) Complex64Option) []Complex64Option {
	acc := make([]Complex64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex64: complex64->Complex128Option */ func MapComplex128OptionToComplex64Arr(m []complex64, f func(complex64) Complex128Option) []Complex128Option {
	acc := make([]Complex128Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex64: complex64->AnyOption */ func MapAnyOptionToComplex64Arr(m []complex64, f func(complex64) AnyOption) []AnyOption {
	acc := make([]AnyOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex64: complex64->[]bool */ func MapBoolArrToComplex64Arr(m []complex64, f func(complex64) []bool) [][]bool {
	acc := make([][]bool, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex64: complex64->[]string */ func MapStringArrToComplex64Arr(m []complex64, f func(complex64) []string) [][]string {
	acc := make([][]string, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex64: complex64->[]int */ func MapIntArrToComplex64Arr(m []complex64, f func(complex64) []int) [][]int {
	acc := make([][]int, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex64: complex64->[]int8 */ func MapInt8ArrToComplex64Arr(m []complex64, f func(complex64) []int8) [][]int8 {
	acc := make([][]int8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex64: complex64->[]int16 */ func MapInt16ArrToComplex64Arr(m []complex64, f func(complex64) []int16) [][]int16 {
	acc := make([][]int16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex64: complex64->[]int32 */ func MapInt32ArrToComplex64Arr(m []complex64, f func(complex64) []int32) [][]int32 {
	acc := make([][]int32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex64: complex64->[]int64 */ func MapInt64ArrToComplex64Arr(m []complex64, f func(complex64) []int64) [][]int64 {
	acc := make([][]int64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex64: complex64->[]uint */ func MapUintArrToComplex64Arr(m []complex64, f func(complex64) []uint) [][]uint {
	acc := make([][]uint, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex64: complex64->[]uint8 */ func MapUint8ArrToComplex64Arr(m []complex64, f func(complex64) []uint8) [][]uint8 {
	acc := make([][]uint8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex64: complex64->[]uint16 */ func MapUint16ArrToComplex64Arr(m []complex64, f func(complex64) []uint16) [][]uint16 {
	acc := make([][]uint16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex64: complex64->[]uint32 */ func MapUint32ArrToComplex64Arr(m []complex64, f func(complex64) []uint32) [][]uint32 {
	acc := make([][]uint32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex64: complex64->[]uint64 */ func MapUint64ArrToComplex64Arr(m []complex64, f func(complex64) []uint64) [][]uint64 {
	acc := make([][]uint64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex64: complex64->[]uintptr */ func MapUintptrArrToComplex64Arr(m []complex64, f func(complex64) []uintptr) [][]uintptr {
	acc := make([][]uintptr, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex64: complex64->[]byte */ func MapByteArrToComplex64Arr(m []complex64, f func(complex64) []byte) [][]byte {
	acc := make([][]byte, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex64: complex64->[]rune */ func MapRuneArrToComplex64Arr(m []complex64, f func(complex64) []rune) [][]rune {
	acc := make([][]rune, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex64: complex64->[]float32 */ func MapFloat32ArrToComplex64Arr(m []complex64, f func(complex64) []float32) [][]float32 {
	acc := make([][]float32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex64: complex64->[]float64 */ func MapFloat64ArrToComplex64Arr(m []complex64, f func(complex64) []float64) [][]float64 {
	acc := make([][]float64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex64: complex64->[]complex64 */ func MapComplex64ArrToComplex64Arr(m []complex64, f func(complex64) []complex64) [][]complex64 {
	acc := make([][]complex64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex64: complex64->[]complex128 */ func MapComplex128ArrToComplex64Arr(m []complex64, f func(complex64) []complex128) [][]complex128 {
	acc := make([][]complex128, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex64: complex64->[]Any */ func MapAnyArrToComplex64Arr(m []complex64, f func(complex64) []Any) [][]Any {
	acc := make([][]Any, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex64: complex64->BoolList */ func MapBoolListToComplex64Arr(m []complex64, f func(complex64) BoolList) []BoolList {
	acc := make([]BoolList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex64: complex64->StringList */ func MapStringListToComplex64Arr(m []complex64, f func(complex64) StringList) []StringList {
	acc := make([]StringList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex64: complex64->IntList */ func MapIntListToComplex64Arr(m []complex64, f func(complex64) IntList) []IntList {
	acc := make([]IntList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex64: complex64->Int8List */ func MapInt8ListToComplex64Arr(m []complex64, f func(complex64) Int8List) []Int8List {
	acc := make([]Int8List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex64: complex64->Int16List */ func MapInt16ListToComplex64Arr(m []complex64, f func(complex64) Int16List) []Int16List {
	acc := make([]Int16List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex64: complex64->Int32List */ func MapInt32ListToComplex64Arr(m []complex64, f func(complex64) Int32List) []Int32List {
	acc := make([]Int32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex64: complex64->Int64List */ func MapInt64ListToComplex64Arr(m []complex64, f func(complex64) Int64List) []Int64List {
	acc := make([]Int64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex64: complex64->UintList */ func MapUintListToComplex64Arr(m []complex64, f func(complex64) UintList) []UintList {
	acc := make([]UintList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex64: complex64->Uint8List */ func MapUint8ListToComplex64Arr(m []complex64, f func(complex64) Uint8List) []Uint8List {
	acc := make([]Uint8List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex64: complex64->Uint16List */ func MapUint16ListToComplex64Arr(m []complex64, f func(complex64) Uint16List) []Uint16List {
	acc := make([]Uint16List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex64: complex64->Uint32List */ func MapUint32ListToComplex64Arr(m []complex64, f func(complex64) Uint32List) []Uint32List {
	acc := make([]Uint32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex64: complex64->Uint64List */ func MapUint64ListToComplex64Arr(m []complex64, f func(complex64) Uint64List) []Uint64List {
	acc := make([]Uint64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex64: complex64->UintptrList */ func MapUintptrListToComplex64Arr(m []complex64, f func(complex64) UintptrList) []UintptrList {
	acc := make([]UintptrList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex64: complex64->ByteList */ func MapByteListToComplex64Arr(m []complex64, f func(complex64) ByteList) []ByteList {
	acc := make([]ByteList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex64: complex64->RuneList */ func MapRuneListToComplex64Arr(m []complex64, f func(complex64) RuneList) []RuneList {
	acc := make([]RuneList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex64: complex64->Float32List */ func MapFloat32ListToComplex64Arr(m []complex64, f func(complex64) Float32List) []Float32List {
	acc := make([]Float32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex64: complex64->Float64List */ func MapFloat64ListToComplex64Arr(m []complex64, f func(complex64) Float64List) []Float64List {
	acc := make([]Float64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex64: complex64->Complex64List */ func MapComplex64ListToComplex64Arr(m []complex64, f func(complex64) Complex64List) []Complex64List {
	acc := make([]Complex64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex64: complex64->Complex128List */ func MapComplex128ListToComplex64Arr(m []complex64, f func(complex64) Complex128List) []Complex128List {
	acc := make([]Complex128List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex64: complex64->AnyList */ func MapAnyListToComplex64Arr(m []complex64, f func(complex64) AnyList) []AnyList {
	acc := make([]AnyList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex128: complex128->bool */ func MapBoolToComplex128Arr(m []complex128, f func(complex128) bool) []bool {
	acc := make([]bool, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex128: complex128->string */ func MapStringToComplex128Arr(m []complex128, f func(complex128) string) []string {
	acc := make([]string, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex128: complex128->int */ func MapIntToComplex128Arr(m []complex128, f func(complex128) int) []int {
	acc := make([]int, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex128: complex128->int8 */ func MapInt8ToComplex128Arr(m []complex128, f func(complex128) int8) []int8 {
	acc := make([]int8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex128: complex128->int16 */ func MapInt16ToComplex128Arr(m []complex128, f func(complex128) int16) []int16 {
	acc := make([]int16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex128: complex128->int32 */ func MapInt32ToComplex128Arr(m []complex128, f func(complex128) int32) []int32 {
	acc := make([]int32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex128: complex128->int64 */ func MapInt64ToComplex128Arr(m []complex128, f func(complex128) int64) []int64 {
	acc := make([]int64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex128: complex128->uint */ func MapUintToComplex128Arr(m []complex128, f func(complex128) uint) []uint {
	acc := make([]uint, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex128: complex128->uint8 */ func MapUint8ToComplex128Arr(m []complex128, f func(complex128) uint8) []uint8 {
	acc := make([]uint8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex128: complex128->uint16 */ func MapUint16ToComplex128Arr(m []complex128, f func(complex128) uint16) []uint16 {
	acc := make([]uint16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex128: complex128->uint32 */ func MapUint32ToComplex128Arr(m []complex128, f func(complex128) uint32) []uint32 {
	acc := make([]uint32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex128: complex128->uint64 */ func MapUint64ToComplex128Arr(m []complex128, f func(complex128) uint64) []uint64 {
	acc := make([]uint64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex128: complex128->uintptr */ func MapUintptrToComplex128Arr(m []complex128, f func(complex128) uintptr) []uintptr {
	acc := make([]uintptr, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex128: complex128->byte */ func MapByteToComplex128Arr(m []complex128, f func(complex128) byte) []byte {
	acc := make([]byte, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex128: complex128->rune */ func MapRuneToComplex128Arr(m []complex128, f func(complex128) rune) []rune {
	acc := make([]rune, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex128: complex128->float32 */ func MapFloat32ToComplex128Arr(m []complex128, f func(complex128) float32) []float32 {
	acc := make([]float32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex128: complex128->float64 */ func MapFloat64ToComplex128Arr(m []complex128, f func(complex128) float64) []float64 {
	acc := make([]float64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex128: complex128->complex64 */ func MapComplex64ToComplex128Arr(m []complex128, f func(complex128) complex64) []complex64 {
	acc := make([]complex64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex128: complex128->complex128 */ func MapComplex128ToComplex128Arr(m []complex128, f func(complex128) complex128) []complex128 {
	acc := make([]complex128, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex128: complex128->Any */ func MapAnyToComplex128Arr(m []complex128, f func(complex128) Any) []Any {
	acc := make([]Any, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex128: complex128->BoolOption */ func MapBoolOptionToComplex128Arr(m []complex128, f func(complex128) BoolOption) []BoolOption {
	acc := make([]BoolOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex128: complex128->StringOption */ func MapStringOptionToComplex128Arr(m []complex128, f func(complex128) StringOption) []StringOption {
	acc := make([]StringOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex128: complex128->IntOption */ func MapIntOptionToComplex128Arr(m []complex128, f func(complex128) IntOption) []IntOption {
	acc := make([]IntOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex128: complex128->Int8Option */ func MapInt8OptionToComplex128Arr(m []complex128, f func(complex128) Int8Option) []Int8Option {
	acc := make([]Int8Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex128: complex128->Int16Option */ func MapInt16OptionToComplex128Arr(m []complex128, f func(complex128) Int16Option) []Int16Option {
	acc := make([]Int16Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex128: complex128->Int32Option */ func MapInt32OptionToComplex128Arr(m []complex128, f func(complex128) Int32Option) []Int32Option {
	acc := make([]Int32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex128: complex128->Int64Option */ func MapInt64OptionToComplex128Arr(m []complex128, f func(complex128) Int64Option) []Int64Option {
	acc := make([]Int64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex128: complex128->UintOption */ func MapUintOptionToComplex128Arr(m []complex128, f func(complex128) UintOption) []UintOption {
	acc := make([]UintOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex128: complex128->Uint8Option */ func MapUint8OptionToComplex128Arr(m []complex128, f func(complex128) Uint8Option) []Uint8Option {
	acc := make([]Uint8Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex128: complex128->Uint16Option */ func MapUint16OptionToComplex128Arr(m []complex128, f func(complex128) Uint16Option) []Uint16Option {
	acc := make([]Uint16Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex128: complex128->Uint32Option */ func MapUint32OptionToComplex128Arr(m []complex128, f func(complex128) Uint32Option) []Uint32Option {
	acc := make([]Uint32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex128: complex128->Uint64Option */ func MapUint64OptionToComplex128Arr(m []complex128, f func(complex128) Uint64Option) []Uint64Option {
	acc := make([]Uint64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex128: complex128->UintptrOption */ func MapUintptrOptionToComplex128Arr(m []complex128, f func(complex128) UintptrOption) []UintptrOption {
	acc := make([]UintptrOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex128: complex128->ByteOption */ func MapByteOptionToComplex128Arr(m []complex128, f func(complex128) ByteOption) []ByteOption {
	acc := make([]ByteOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex128: complex128->RuneOption */ func MapRuneOptionToComplex128Arr(m []complex128, f func(complex128) RuneOption) []RuneOption {
	acc := make([]RuneOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex128: complex128->Float32Option */ func MapFloat32OptionToComplex128Arr(m []complex128, f func(complex128) Float32Option) []Float32Option {
	acc := make([]Float32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex128: complex128->Float64Option */ func MapFloat64OptionToComplex128Arr(m []complex128, f func(complex128) Float64Option) []Float64Option {
	acc := make([]Float64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex128: complex128->Complex64Option */ func MapComplex64OptionToComplex128Arr(m []complex128, f func(complex128) Complex64Option) []Complex64Option {
	acc := make([]Complex64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex128: complex128->Complex128Option */ func MapComplex128OptionToComplex128Arr(m []complex128, f func(complex128) Complex128Option) []Complex128Option {
	acc := make([]Complex128Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex128: complex128->AnyOption */ func MapAnyOptionToComplex128Arr(m []complex128, f func(complex128) AnyOption) []AnyOption {
	acc := make([]AnyOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex128: complex128->[]bool */ func MapBoolArrToComplex128Arr(m []complex128, f func(complex128) []bool) [][]bool {
	acc := make([][]bool, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex128: complex128->[]string */ func MapStringArrToComplex128Arr(m []complex128, f func(complex128) []string) [][]string {
	acc := make([][]string, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex128: complex128->[]int */ func MapIntArrToComplex128Arr(m []complex128, f func(complex128) []int) [][]int {
	acc := make([][]int, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex128: complex128->[]int8 */ func MapInt8ArrToComplex128Arr(m []complex128, f func(complex128) []int8) [][]int8 {
	acc := make([][]int8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex128: complex128->[]int16 */ func MapInt16ArrToComplex128Arr(m []complex128, f func(complex128) []int16) [][]int16 {
	acc := make([][]int16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex128: complex128->[]int32 */ func MapInt32ArrToComplex128Arr(m []complex128, f func(complex128) []int32) [][]int32 {
	acc := make([][]int32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex128: complex128->[]int64 */ func MapInt64ArrToComplex128Arr(m []complex128, f func(complex128) []int64) [][]int64 {
	acc := make([][]int64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex128: complex128->[]uint */ func MapUintArrToComplex128Arr(m []complex128, f func(complex128) []uint) [][]uint {
	acc := make([][]uint, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex128: complex128->[]uint8 */ func MapUint8ArrToComplex128Arr(m []complex128, f func(complex128) []uint8) [][]uint8 {
	acc := make([][]uint8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex128: complex128->[]uint16 */ func MapUint16ArrToComplex128Arr(m []complex128, f func(complex128) []uint16) [][]uint16 {
	acc := make([][]uint16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex128: complex128->[]uint32 */ func MapUint32ArrToComplex128Arr(m []complex128, f func(complex128) []uint32) [][]uint32 {
	acc := make([][]uint32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex128: complex128->[]uint64 */ func MapUint64ArrToComplex128Arr(m []complex128, f func(complex128) []uint64) [][]uint64 {
	acc := make([][]uint64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex128: complex128->[]uintptr */ func MapUintptrArrToComplex128Arr(m []complex128, f func(complex128) []uintptr) [][]uintptr {
	acc := make([][]uintptr, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex128: complex128->[]byte */ func MapByteArrToComplex128Arr(m []complex128, f func(complex128) []byte) [][]byte {
	acc := make([][]byte, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex128: complex128->[]rune */ func MapRuneArrToComplex128Arr(m []complex128, f func(complex128) []rune) [][]rune {
	acc := make([][]rune, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex128: complex128->[]float32 */ func MapFloat32ArrToComplex128Arr(m []complex128, f func(complex128) []float32) [][]float32 {
	acc := make([][]float32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex128: complex128->[]float64 */ func MapFloat64ArrToComplex128Arr(m []complex128, f func(complex128) []float64) [][]float64 {
	acc := make([][]float64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex128: complex128->[]complex64 */ func MapComplex64ArrToComplex128Arr(m []complex128, f func(complex128) []complex64) [][]complex64 {
	acc := make([][]complex64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex128: complex128->[]complex128 */ func MapComplex128ArrToComplex128Arr(m []complex128, f func(complex128) []complex128) [][]complex128 {
	acc := make([][]complex128, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex128: complex128->[]Any */ func MapAnyArrToComplex128Arr(m []complex128, f func(complex128) []Any) [][]Any {
	acc := make([][]Any, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex128: complex128->BoolList */ func MapBoolListToComplex128Arr(m []complex128, f func(complex128) BoolList) []BoolList {
	acc := make([]BoolList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex128: complex128->StringList */ func MapStringListToComplex128Arr(m []complex128, f func(complex128) StringList) []StringList {
	acc := make([]StringList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex128: complex128->IntList */ func MapIntListToComplex128Arr(m []complex128, f func(complex128) IntList) []IntList {
	acc := make([]IntList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex128: complex128->Int8List */ func MapInt8ListToComplex128Arr(m []complex128, f func(complex128) Int8List) []Int8List {
	acc := make([]Int8List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex128: complex128->Int16List */ func MapInt16ListToComplex128Arr(m []complex128, f func(complex128) Int16List) []Int16List {
	acc := make([]Int16List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex128: complex128->Int32List */ func MapInt32ListToComplex128Arr(m []complex128, f func(complex128) Int32List) []Int32List {
	acc := make([]Int32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex128: complex128->Int64List */ func MapInt64ListToComplex128Arr(m []complex128, f func(complex128) Int64List) []Int64List {
	acc := make([]Int64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex128: complex128->UintList */ func MapUintListToComplex128Arr(m []complex128, f func(complex128) UintList) []UintList {
	acc := make([]UintList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex128: complex128->Uint8List */ func MapUint8ListToComplex128Arr(m []complex128, f func(complex128) Uint8List) []Uint8List {
	acc := make([]Uint8List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex128: complex128->Uint16List */ func MapUint16ListToComplex128Arr(m []complex128, f func(complex128) Uint16List) []Uint16List {
	acc := make([]Uint16List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex128: complex128->Uint32List */ func MapUint32ListToComplex128Arr(m []complex128, f func(complex128) Uint32List) []Uint32List {
	acc := make([]Uint32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex128: complex128->Uint64List */ func MapUint64ListToComplex128Arr(m []complex128, f func(complex128) Uint64List) []Uint64List {
	acc := make([]Uint64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex128: complex128->UintptrList */ func MapUintptrListToComplex128Arr(m []complex128, f func(complex128) UintptrList) []UintptrList {
	acc := make([]UintptrList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex128: complex128->ByteList */ func MapByteListToComplex128Arr(m []complex128, f func(complex128) ByteList) []ByteList {
	acc := make([]ByteList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex128: complex128->RuneList */ func MapRuneListToComplex128Arr(m []complex128, f func(complex128) RuneList) []RuneList {
	acc := make([]RuneList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex128: complex128->Float32List */ func MapFloat32ListToComplex128Arr(m []complex128, f func(complex128) Float32List) []Float32List {
	acc := make([]Float32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex128: complex128->Float64List */ func MapFloat64ListToComplex128Arr(m []complex128, f func(complex128) Float64List) []Float64List {
	acc := make([]Float64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex128: complex128->Complex64List */ func MapComplex64ListToComplex128Arr(m []complex128, f func(complex128) Complex64List) []Complex64List {
	acc := make([]Complex64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex128: complex128->Complex128List */ func MapComplex128ListToComplex128Arr(m []complex128, f func(complex128) Complex128List) []Complex128List {
	acc := make([]Complex128List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []complex128: complex128->AnyList */ func MapAnyListToComplex128Arr(m []complex128, f func(complex128) AnyList) []AnyList {
	acc := make([]AnyList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Any: Any->bool */ func MapBoolToAnyArr(m []Any, f func(Any) bool) []bool {
	acc := make([]bool, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Any: Any->string */ func MapStringToAnyArr(m []Any, f func(Any) string) []string {
	acc := make([]string, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Any: Any->int */ func MapIntToAnyArr(m []Any, f func(Any) int) []int {
	acc := make([]int, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Any: Any->int8 */ func MapInt8ToAnyArr(m []Any, f func(Any) int8) []int8 {
	acc := make([]int8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Any: Any->int16 */ func MapInt16ToAnyArr(m []Any, f func(Any) int16) []int16 {
	acc := make([]int16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Any: Any->int32 */ func MapInt32ToAnyArr(m []Any, f func(Any) int32) []int32 {
	acc := make([]int32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Any: Any->int64 */ func MapInt64ToAnyArr(m []Any, f func(Any) int64) []int64 {
	acc := make([]int64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Any: Any->uint */ func MapUintToAnyArr(m []Any, f func(Any) uint) []uint {
	acc := make([]uint, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Any: Any->uint8 */ func MapUint8ToAnyArr(m []Any, f func(Any) uint8) []uint8 {
	acc := make([]uint8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Any: Any->uint16 */ func MapUint16ToAnyArr(m []Any, f func(Any) uint16) []uint16 {
	acc := make([]uint16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Any: Any->uint32 */ func MapUint32ToAnyArr(m []Any, f func(Any) uint32) []uint32 {
	acc := make([]uint32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Any: Any->uint64 */ func MapUint64ToAnyArr(m []Any, f func(Any) uint64) []uint64 {
	acc := make([]uint64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Any: Any->uintptr */ func MapUintptrToAnyArr(m []Any, f func(Any) uintptr) []uintptr {
	acc := make([]uintptr, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Any: Any->byte */ func MapByteToAnyArr(m []Any, f func(Any) byte) []byte {
	acc := make([]byte, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Any: Any->rune */ func MapRuneToAnyArr(m []Any, f func(Any) rune) []rune {
	acc := make([]rune, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Any: Any->float32 */ func MapFloat32ToAnyArr(m []Any, f func(Any) float32) []float32 {
	acc := make([]float32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Any: Any->float64 */ func MapFloat64ToAnyArr(m []Any, f func(Any) float64) []float64 {
	acc := make([]float64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Any: Any->complex64 */ func MapComplex64ToAnyArr(m []Any, f func(Any) complex64) []complex64 {
	acc := make([]complex64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Any: Any->complex128 */ func MapComplex128ToAnyArr(m []Any, f func(Any) complex128) []complex128 {
	acc := make([]complex128, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Any: Any->Any */ func MapAnyToAnyArr(m []Any, f func(Any) Any) []Any {
	acc := make([]Any, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Any: Any->BoolOption */ func MapBoolOptionToAnyArr(m []Any, f func(Any) BoolOption) []BoolOption {
	acc := make([]BoolOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Any: Any->StringOption */ func MapStringOptionToAnyArr(m []Any, f func(Any) StringOption) []StringOption {
	acc := make([]StringOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Any: Any->IntOption */ func MapIntOptionToAnyArr(m []Any, f func(Any) IntOption) []IntOption {
	acc := make([]IntOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Any: Any->Int8Option */ func MapInt8OptionToAnyArr(m []Any, f func(Any) Int8Option) []Int8Option {
	acc := make([]Int8Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Any: Any->Int16Option */ func MapInt16OptionToAnyArr(m []Any, f func(Any) Int16Option) []Int16Option {
	acc := make([]Int16Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Any: Any->Int32Option */ func MapInt32OptionToAnyArr(m []Any, f func(Any) Int32Option) []Int32Option {
	acc := make([]Int32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Any: Any->Int64Option */ func MapInt64OptionToAnyArr(m []Any, f func(Any) Int64Option) []Int64Option {
	acc := make([]Int64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Any: Any->UintOption */ func MapUintOptionToAnyArr(m []Any, f func(Any) UintOption) []UintOption {
	acc := make([]UintOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Any: Any->Uint8Option */ func MapUint8OptionToAnyArr(m []Any, f func(Any) Uint8Option) []Uint8Option {
	acc := make([]Uint8Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Any: Any->Uint16Option */ func MapUint16OptionToAnyArr(m []Any, f func(Any) Uint16Option) []Uint16Option {
	acc := make([]Uint16Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Any: Any->Uint32Option */ func MapUint32OptionToAnyArr(m []Any, f func(Any) Uint32Option) []Uint32Option {
	acc := make([]Uint32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Any: Any->Uint64Option */ func MapUint64OptionToAnyArr(m []Any, f func(Any) Uint64Option) []Uint64Option {
	acc := make([]Uint64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Any: Any->UintptrOption */ func MapUintptrOptionToAnyArr(m []Any, f func(Any) UintptrOption) []UintptrOption {
	acc := make([]UintptrOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Any: Any->ByteOption */ func MapByteOptionToAnyArr(m []Any, f func(Any) ByteOption) []ByteOption {
	acc := make([]ByteOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Any: Any->RuneOption */ func MapRuneOptionToAnyArr(m []Any, f func(Any) RuneOption) []RuneOption {
	acc := make([]RuneOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Any: Any->Float32Option */ func MapFloat32OptionToAnyArr(m []Any, f func(Any) Float32Option) []Float32Option {
	acc := make([]Float32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Any: Any->Float64Option */ func MapFloat64OptionToAnyArr(m []Any, f func(Any) Float64Option) []Float64Option {
	acc := make([]Float64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Any: Any->Complex64Option */ func MapComplex64OptionToAnyArr(m []Any, f func(Any) Complex64Option) []Complex64Option {
	acc := make([]Complex64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Any: Any->Complex128Option */ func MapComplex128OptionToAnyArr(m []Any, f func(Any) Complex128Option) []Complex128Option {
	acc := make([]Complex128Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Any: Any->AnyOption */ func MapAnyOptionToAnyArr(m []Any, f func(Any) AnyOption) []AnyOption {
	acc := make([]AnyOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Any: Any->[]bool */ func MapBoolArrToAnyArr(m []Any, f func(Any) []bool) [][]bool {
	acc := make([][]bool, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Any: Any->[]string */ func MapStringArrToAnyArr(m []Any, f func(Any) []string) [][]string {
	acc := make([][]string, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Any: Any->[]int */ func MapIntArrToAnyArr(m []Any, f func(Any) []int) [][]int {
	acc := make([][]int, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Any: Any->[]int8 */ func MapInt8ArrToAnyArr(m []Any, f func(Any) []int8) [][]int8 {
	acc := make([][]int8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Any: Any->[]int16 */ func MapInt16ArrToAnyArr(m []Any, f func(Any) []int16) [][]int16 {
	acc := make([][]int16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Any: Any->[]int32 */ func MapInt32ArrToAnyArr(m []Any, f func(Any) []int32) [][]int32 {
	acc := make([][]int32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Any: Any->[]int64 */ func MapInt64ArrToAnyArr(m []Any, f func(Any) []int64) [][]int64 {
	acc := make([][]int64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Any: Any->[]uint */ func MapUintArrToAnyArr(m []Any, f func(Any) []uint) [][]uint {
	acc := make([][]uint, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Any: Any->[]uint8 */ func MapUint8ArrToAnyArr(m []Any, f func(Any) []uint8) [][]uint8 {
	acc := make([][]uint8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Any: Any->[]uint16 */ func MapUint16ArrToAnyArr(m []Any, f func(Any) []uint16) [][]uint16 {
	acc := make([][]uint16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Any: Any->[]uint32 */ func MapUint32ArrToAnyArr(m []Any, f func(Any) []uint32) [][]uint32 {
	acc := make([][]uint32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Any: Any->[]uint64 */ func MapUint64ArrToAnyArr(m []Any, f func(Any) []uint64) [][]uint64 {
	acc := make([][]uint64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Any: Any->[]uintptr */ func MapUintptrArrToAnyArr(m []Any, f func(Any) []uintptr) [][]uintptr {
	acc := make([][]uintptr, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Any: Any->[]byte */ func MapByteArrToAnyArr(m []Any, f func(Any) []byte) [][]byte {
	acc := make([][]byte, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Any: Any->[]rune */ func MapRuneArrToAnyArr(m []Any, f func(Any) []rune) [][]rune {
	acc := make([][]rune, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Any: Any->[]float32 */ func MapFloat32ArrToAnyArr(m []Any, f func(Any) []float32) [][]float32 {
	acc := make([][]float32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Any: Any->[]float64 */ func MapFloat64ArrToAnyArr(m []Any, f func(Any) []float64) [][]float64 {
	acc := make([][]float64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Any: Any->[]complex64 */ func MapComplex64ArrToAnyArr(m []Any, f func(Any) []complex64) [][]complex64 {
	acc := make([][]complex64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Any: Any->[]complex128 */ func MapComplex128ArrToAnyArr(m []Any, f func(Any) []complex128) [][]complex128 {
	acc := make([][]complex128, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Any: Any->[]Any */ func MapAnyArrToAnyArr(m []Any, f func(Any) []Any) [][]Any {
	acc := make([][]Any, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Any: Any->BoolList */ func MapBoolListToAnyArr(m []Any, f func(Any) BoolList) []BoolList {
	acc := make([]BoolList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Any: Any->StringList */ func MapStringListToAnyArr(m []Any, f func(Any) StringList) []StringList {
	acc := make([]StringList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Any: Any->IntList */ func MapIntListToAnyArr(m []Any, f func(Any) IntList) []IntList {
	acc := make([]IntList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Any: Any->Int8List */ func MapInt8ListToAnyArr(m []Any, f func(Any) Int8List) []Int8List {
	acc := make([]Int8List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Any: Any->Int16List */ func MapInt16ListToAnyArr(m []Any, f func(Any) Int16List) []Int16List {
	acc := make([]Int16List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Any: Any->Int32List */ func MapInt32ListToAnyArr(m []Any, f func(Any) Int32List) []Int32List {
	acc := make([]Int32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Any: Any->Int64List */ func MapInt64ListToAnyArr(m []Any, f func(Any) Int64List) []Int64List {
	acc := make([]Int64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Any: Any->UintList */ func MapUintListToAnyArr(m []Any, f func(Any) UintList) []UintList {
	acc := make([]UintList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Any: Any->Uint8List */ func MapUint8ListToAnyArr(m []Any, f func(Any) Uint8List) []Uint8List {
	acc := make([]Uint8List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Any: Any->Uint16List */ func MapUint16ListToAnyArr(m []Any, f func(Any) Uint16List) []Uint16List {
	acc := make([]Uint16List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Any: Any->Uint32List */ func MapUint32ListToAnyArr(m []Any, f func(Any) Uint32List) []Uint32List {
	acc := make([]Uint32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Any: Any->Uint64List */ func MapUint64ListToAnyArr(m []Any, f func(Any) Uint64List) []Uint64List {
	acc := make([]Uint64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Any: Any->UintptrList */ func MapUintptrListToAnyArr(m []Any, f func(Any) UintptrList) []UintptrList {
	acc := make([]UintptrList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Any: Any->ByteList */ func MapByteListToAnyArr(m []Any, f func(Any) ByteList) []ByteList {
	acc := make([]ByteList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Any: Any->RuneList */ func MapRuneListToAnyArr(m []Any, f func(Any) RuneList) []RuneList {
	acc := make([]RuneList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Any: Any->Float32List */ func MapFloat32ListToAnyArr(m []Any, f func(Any) Float32List) []Float32List {
	acc := make([]Float32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Any: Any->Float64List */ func MapFloat64ListToAnyArr(m []Any, f func(Any) Float64List) []Float64List {
	acc := make([]Float64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Any: Any->Complex64List */ func MapComplex64ListToAnyArr(m []Any, f func(Any) Complex64List) []Complex64List {
	acc := make([]Complex64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Any: Any->Complex128List */ func MapComplex128ListToAnyArr(m []Any, f func(Any) Complex128List) []Complex128List {
	acc := make([]Complex128List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Any: Any->AnyList */ func MapAnyListToAnyArr(m []Any, f func(Any) AnyList) []AnyList {
	acc := make([]AnyList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]bool: []bool->bool */ func MapBoolToBoolArrArr(m [][]bool, f func([]bool) bool) []bool {
	acc := make([]bool, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]bool: []bool->string */ func MapStringToBoolArrArr(m [][]bool, f func([]bool) string) []string {
	acc := make([]string, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]bool: []bool->int */ func MapIntToBoolArrArr(m [][]bool, f func([]bool) int) []int {
	acc := make([]int, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]bool: []bool->int8 */ func MapInt8ToBoolArrArr(m [][]bool, f func([]bool) int8) []int8 {
	acc := make([]int8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]bool: []bool->int16 */ func MapInt16ToBoolArrArr(m [][]bool, f func([]bool) int16) []int16 {
	acc := make([]int16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]bool: []bool->int32 */ func MapInt32ToBoolArrArr(m [][]bool, f func([]bool) int32) []int32 {
	acc := make([]int32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]bool: []bool->int64 */ func MapInt64ToBoolArrArr(m [][]bool, f func([]bool) int64) []int64 {
	acc := make([]int64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]bool: []bool->uint */ func MapUintToBoolArrArr(m [][]bool, f func([]bool) uint) []uint {
	acc := make([]uint, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]bool: []bool->uint8 */ func MapUint8ToBoolArrArr(m [][]bool, f func([]bool) uint8) []uint8 {
	acc := make([]uint8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]bool: []bool->uint16 */ func MapUint16ToBoolArrArr(m [][]bool, f func([]bool) uint16) []uint16 {
	acc := make([]uint16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]bool: []bool->uint32 */ func MapUint32ToBoolArrArr(m [][]bool, f func([]bool) uint32) []uint32 {
	acc := make([]uint32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]bool: []bool->uint64 */ func MapUint64ToBoolArrArr(m [][]bool, f func([]bool) uint64) []uint64 {
	acc := make([]uint64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]bool: []bool->uintptr */ func MapUintptrToBoolArrArr(m [][]bool, f func([]bool) uintptr) []uintptr {
	acc := make([]uintptr, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]bool: []bool->byte */ func MapByteToBoolArrArr(m [][]bool, f func([]bool) byte) []byte {
	acc := make([]byte, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]bool: []bool->rune */ func MapRuneToBoolArrArr(m [][]bool, f func([]bool) rune) []rune {
	acc := make([]rune, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]bool: []bool->float32 */ func MapFloat32ToBoolArrArr(m [][]bool, f func([]bool) float32) []float32 {
	acc := make([]float32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]bool: []bool->float64 */ func MapFloat64ToBoolArrArr(m [][]bool, f func([]bool) float64) []float64 {
	acc := make([]float64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]bool: []bool->complex64 */ func MapComplex64ToBoolArrArr(m [][]bool, f func([]bool) complex64) []complex64 {
	acc := make([]complex64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]bool: []bool->complex128 */ func MapComplex128ToBoolArrArr(m [][]bool, f func([]bool) complex128) []complex128 {
	acc := make([]complex128, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]bool: []bool->Any */ func MapAnyToBoolArrArr(m [][]bool, f func([]bool) Any) []Any {
	acc := make([]Any, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]bool: []bool->BoolOption */ func MapBoolOptionToBoolArrArr(m [][]bool, f func([]bool) BoolOption) []BoolOption {
	acc := make([]BoolOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]bool: []bool->StringOption */ func MapStringOptionToBoolArrArr(m [][]bool, f func([]bool) StringOption) []StringOption {
	acc := make([]StringOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]bool: []bool->IntOption */ func MapIntOptionToBoolArrArr(m [][]bool, f func([]bool) IntOption) []IntOption {
	acc := make([]IntOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]bool: []bool->Int8Option */ func MapInt8OptionToBoolArrArr(m [][]bool, f func([]bool) Int8Option) []Int8Option {
	acc := make([]Int8Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]bool: []bool->Int16Option */ func MapInt16OptionToBoolArrArr(m [][]bool, f func([]bool) Int16Option) []Int16Option {
	acc := make([]Int16Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]bool: []bool->Int32Option */ func MapInt32OptionToBoolArrArr(m [][]bool, f func([]bool) Int32Option) []Int32Option {
	acc := make([]Int32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]bool: []bool->Int64Option */ func MapInt64OptionToBoolArrArr(m [][]bool, f func([]bool) Int64Option) []Int64Option {
	acc := make([]Int64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]bool: []bool->UintOption */ func MapUintOptionToBoolArrArr(m [][]bool, f func([]bool) UintOption) []UintOption {
	acc := make([]UintOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]bool: []bool->Uint8Option */ func MapUint8OptionToBoolArrArr(m [][]bool, f func([]bool) Uint8Option) []Uint8Option {
	acc := make([]Uint8Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]bool: []bool->Uint16Option */ func MapUint16OptionToBoolArrArr(m [][]bool, f func([]bool) Uint16Option) []Uint16Option {
	acc := make([]Uint16Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]bool: []bool->Uint32Option */ func MapUint32OptionToBoolArrArr(m [][]bool, f func([]bool) Uint32Option) []Uint32Option {
	acc := make([]Uint32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]bool: []bool->Uint64Option */ func MapUint64OptionToBoolArrArr(m [][]bool, f func([]bool) Uint64Option) []Uint64Option {
	acc := make([]Uint64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]bool: []bool->UintptrOption */ func MapUintptrOptionToBoolArrArr(m [][]bool, f func([]bool) UintptrOption) []UintptrOption {
	acc := make([]UintptrOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]bool: []bool->ByteOption */ func MapByteOptionToBoolArrArr(m [][]bool, f func([]bool) ByteOption) []ByteOption {
	acc := make([]ByteOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]bool: []bool->RuneOption */ func MapRuneOptionToBoolArrArr(m [][]bool, f func([]bool) RuneOption) []RuneOption {
	acc := make([]RuneOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]bool: []bool->Float32Option */ func MapFloat32OptionToBoolArrArr(m [][]bool, f func([]bool) Float32Option) []Float32Option {
	acc := make([]Float32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]bool: []bool->Float64Option */ func MapFloat64OptionToBoolArrArr(m [][]bool, f func([]bool) Float64Option) []Float64Option {
	acc := make([]Float64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]bool: []bool->Complex64Option */ func MapComplex64OptionToBoolArrArr(m [][]bool, f func([]bool) Complex64Option) []Complex64Option {
	acc := make([]Complex64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]bool: []bool->Complex128Option */ func MapComplex128OptionToBoolArrArr(m [][]bool, f func([]bool) Complex128Option) []Complex128Option {
	acc := make([]Complex128Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]bool: []bool->AnyOption */ func MapAnyOptionToBoolArrArr(m [][]bool, f func([]bool) AnyOption) []AnyOption {
	acc := make([]AnyOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]bool: []bool->[]bool */ func MapBoolArrToBoolArrArr(m [][]bool, f func([]bool) []bool) [][]bool {
	acc := make([][]bool, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]bool: []bool->[]string */ func MapStringArrToBoolArrArr(m [][]bool, f func([]bool) []string) [][]string {
	acc := make([][]string, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]bool: []bool->[]int */ func MapIntArrToBoolArrArr(m [][]bool, f func([]bool) []int) [][]int {
	acc := make([][]int, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]bool: []bool->[]int8 */ func MapInt8ArrToBoolArrArr(m [][]bool, f func([]bool) []int8) [][]int8 {
	acc := make([][]int8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]bool: []bool->[]int16 */ func MapInt16ArrToBoolArrArr(m [][]bool, f func([]bool) []int16) [][]int16 {
	acc := make([][]int16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]bool: []bool->[]int32 */ func MapInt32ArrToBoolArrArr(m [][]bool, f func([]bool) []int32) [][]int32 {
	acc := make([][]int32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]bool: []bool->[]int64 */ func MapInt64ArrToBoolArrArr(m [][]bool, f func([]bool) []int64) [][]int64 {
	acc := make([][]int64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]bool: []bool->[]uint */ func MapUintArrToBoolArrArr(m [][]bool, f func([]bool) []uint) [][]uint {
	acc := make([][]uint, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]bool: []bool->[]uint8 */ func MapUint8ArrToBoolArrArr(m [][]bool, f func([]bool) []uint8) [][]uint8 {
	acc := make([][]uint8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]bool: []bool->[]uint16 */ func MapUint16ArrToBoolArrArr(m [][]bool, f func([]bool) []uint16) [][]uint16 {
	acc := make([][]uint16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]bool: []bool->[]uint32 */ func MapUint32ArrToBoolArrArr(m [][]bool, f func([]bool) []uint32) [][]uint32 {
	acc := make([][]uint32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]bool: []bool->[]uint64 */ func MapUint64ArrToBoolArrArr(m [][]bool, f func([]bool) []uint64) [][]uint64 {
	acc := make([][]uint64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]bool: []bool->[]uintptr */ func MapUintptrArrToBoolArrArr(m [][]bool, f func([]bool) []uintptr) [][]uintptr {
	acc := make([][]uintptr, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]bool: []bool->[]byte */ func MapByteArrToBoolArrArr(m [][]bool, f func([]bool) []byte) [][]byte {
	acc := make([][]byte, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]bool: []bool->[]rune */ func MapRuneArrToBoolArrArr(m [][]bool, f func([]bool) []rune) [][]rune {
	acc := make([][]rune, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]bool: []bool->[]float32 */ func MapFloat32ArrToBoolArrArr(m [][]bool, f func([]bool) []float32) [][]float32 {
	acc := make([][]float32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]bool: []bool->[]float64 */ func MapFloat64ArrToBoolArrArr(m [][]bool, f func([]bool) []float64) [][]float64 {
	acc := make([][]float64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]bool: []bool->[]complex64 */ func MapComplex64ArrToBoolArrArr(m [][]bool, f func([]bool) []complex64) [][]complex64 {
	acc := make([][]complex64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]bool: []bool->[]complex128 */ func MapComplex128ArrToBoolArrArr(m [][]bool, f func([]bool) []complex128) [][]complex128 {
	acc := make([][]complex128, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]bool: []bool->[]Any */ func MapAnyArrToBoolArrArr(m [][]bool, f func([]bool) []Any) [][]Any {
	acc := make([][]Any, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]bool: []bool->BoolList */ func MapBoolListToBoolArrArr(m [][]bool, f func([]bool) BoolList) []BoolList {
	acc := make([]BoolList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]bool: []bool->StringList */ func MapStringListToBoolArrArr(m [][]bool, f func([]bool) StringList) []StringList {
	acc := make([]StringList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]bool: []bool->IntList */ func MapIntListToBoolArrArr(m [][]bool, f func([]bool) IntList) []IntList {
	acc := make([]IntList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]bool: []bool->Int8List */ func MapInt8ListToBoolArrArr(m [][]bool, f func([]bool) Int8List) []Int8List {
	acc := make([]Int8List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]bool: []bool->Int16List */ func MapInt16ListToBoolArrArr(m [][]bool, f func([]bool) Int16List) []Int16List {
	acc := make([]Int16List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]bool: []bool->Int32List */ func MapInt32ListToBoolArrArr(m [][]bool, f func([]bool) Int32List) []Int32List {
	acc := make([]Int32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]bool: []bool->Int64List */ func MapInt64ListToBoolArrArr(m [][]bool, f func([]bool) Int64List) []Int64List {
	acc := make([]Int64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]bool: []bool->UintList */ func MapUintListToBoolArrArr(m [][]bool, f func([]bool) UintList) []UintList {
	acc := make([]UintList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]bool: []bool->Uint8List */ func MapUint8ListToBoolArrArr(m [][]bool, f func([]bool) Uint8List) []Uint8List {
	acc := make([]Uint8List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]bool: []bool->Uint16List */ func MapUint16ListToBoolArrArr(m [][]bool, f func([]bool) Uint16List) []Uint16List {
	acc := make([]Uint16List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]bool: []bool->Uint32List */ func MapUint32ListToBoolArrArr(m [][]bool, f func([]bool) Uint32List) []Uint32List {
	acc := make([]Uint32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]bool: []bool->Uint64List */ func MapUint64ListToBoolArrArr(m [][]bool, f func([]bool) Uint64List) []Uint64List {
	acc := make([]Uint64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]bool: []bool->UintptrList */ func MapUintptrListToBoolArrArr(m [][]bool, f func([]bool) UintptrList) []UintptrList {
	acc := make([]UintptrList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]bool: []bool->ByteList */ func MapByteListToBoolArrArr(m [][]bool, f func([]bool) ByteList) []ByteList {
	acc := make([]ByteList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]bool: []bool->RuneList */ func MapRuneListToBoolArrArr(m [][]bool, f func([]bool) RuneList) []RuneList {
	acc := make([]RuneList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]bool: []bool->Float32List */ func MapFloat32ListToBoolArrArr(m [][]bool, f func([]bool) Float32List) []Float32List {
	acc := make([]Float32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]bool: []bool->Float64List */ func MapFloat64ListToBoolArrArr(m [][]bool, f func([]bool) Float64List) []Float64List {
	acc := make([]Float64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]bool: []bool->Complex64List */ func MapComplex64ListToBoolArrArr(m [][]bool, f func([]bool) Complex64List) []Complex64List {
	acc := make([]Complex64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]bool: []bool->Complex128List */ func MapComplex128ListToBoolArrArr(m [][]bool, f func([]bool) Complex128List) []Complex128List {
	acc := make([]Complex128List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]bool: []bool->AnyList */ func MapAnyListToBoolArrArr(m [][]bool, f func([]bool) AnyList) []AnyList {
	acc := make([]AnyList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]string: []string->bool */ func MapBoolToStringArrArr(m [][]string, f func([]string) bool) []bool {
	acc := make([]bool, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]string: []string->string */ func MapStringToStringArrArr(m [][]string, f func([]string) string) []string {
	acc := make([]string, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]string: []string->int */ func MapIntToStringArrArr(m [][]string, f func([]string) int) []int {
	acc := make([]int, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]string: []string->int8 */ func MapInt8ToStringArrArr(m [][]string, f func([]string) int8) []int8 {
	acc := make([]int8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]string: []string->int16 */ func MapInt16ToStringArrArr(m [][]string, f func([]string) int16) []int16 {
	acc := make([]int16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]string: []string->int32 */ func MapInt32ToStringArrArr(m [][]string, f func([]string) int32) []int32 {
	acc := make([]int32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]string: []string->int64 */ func MapInt64ToStringArrArr(m [][]string, f func([]string) int64) []int64 {
	acc := make([]int64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]string: []string->uint */ func MapUintToStringArrArr(m [][]string, f func([]string) uint) []uint {
	acc := make([]uint, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]string: []string->uint8 */ func MapUint8ToStringArrArr(m [][]string, f func([]string) uint8) []uint8 {
	acc := make([]uint8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]string: []string->uint16 */ func MapUint16ToStringArrArr(m [][]string, f func([]string) uint16) []uint16 {
	acc := make([]uint16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]string: []string->uint32 */ func MapUint32ToStringArrArr(m [][]string, f func([]string) uint32) []uint32 {
	acc := make([]uint32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]string: []string->uint64 */ func MapUint64ToStringArrArr(m [][]string, f func([]string) uint64) []uint64 {
	acc := make([]uint64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]string: []string->uintptr */ func MapUintptrToStringArrArr(m [][]string, f func([]string) uintptr) []uintptr {
	acc := make([]uintptr, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]string: []string->byte */ func MapByteToStringArrArr(m [][]string, f func([]string) byte) []byte {
	acc := make([]byte, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]string: []string->rune */ func MapRuneToStringArrArr(m [][]string, f func([]string) rune) []rune {
	acc := make([]rune, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]string: []string->float32 */ func MapFloat32ToStringArrArr(m [][]string, f func([]string) float32) []float32 {
	acc := make([]float32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]string: []string->float64 */ func MapFloat64ToStringArrArr(m [][]string, f func([]string) float64) []float64 {
	acc := make([]float64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]string: []string->complex64 */ func MapComplex64ToStringArrArr(m [][]string, f func([]string) complex64) []complex64 {
	acc := make([]complex64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]string: []string->complex128 */ func MapComplex128ToStringArrArr(m [][]string, f func([]string) complex128) []complex128 {
	acc := make([]complex128, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]string: []string->Any */ func MapAnyToStringArrArr(m [][]string, f func([]string) Any) []Any {
	acc := make([]Any, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]string: []string->BoolOption */ func MapBoolOptionToStringArrArr(m [][]string, f func([]string) BoolOption) []BoolOption {
	acc := make([]BoolOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]string: []string->StringOption */ func MapStringOptionToStringArrArr(m [][]string, f func([]string) StringOption) []StringOption {
	acc := make([]StringOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]string: []string->IntOption */ func MapIntOptionToStringArrArr(m [][]string, f func([]string) IntOption) []IntOption {
	acc := make([]IntOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]string: []string->Int8Option */ func MapInt8OptionToStringArrArr(m [][]string, f func([]string) Int8Option) []Int8Option {
	acc := make([]Int8Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]string: []string->Int16Option */ func MapInt16OptionToStringArrArr(m [][]string, f func([]string) Int16Option) []Int16Option {
	acc := make([]Int16Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]string: []string->Int32Option */ func MapInt32OptionToStringArrArr(m [][]string, f func([]string) Int32Option) []Int32Option {
	acc := make([]Int32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]string: []string->Int64Option */ func MapInt64OptionToStringArrArr(m [][]string, f func([]string) Int64Option) []Int64Option {
	acc := make([]Int64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]string: []string->UintOption */ func MapUintOptionToStringArrArr(m [][]string, f func([]string) UintOption) []UintOption {
	acc := make([]UintOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]string: []string->Uint8Option */ func MapUint8OptionToStringArrArr(m [][]string, f func([]string) Uint8Option) []Uint8Option {
	acc := make([]Uint8Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]string: []string->Uint16Option */ func MapUint16OptionToStringArrArr(m [][]string, f func([]string) Uint16Option) []Uint16Option {
	acc := make([]Uint16Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]string: []string->Uint32Option */ func MapUint32OptionToStringArrArr(m [][]string, f func([]string) Uint32Option) []Uint32Option {
	acc := make([]Uint32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]string: []string->Uint64Option */ func MapUint64OptionToStringArrArr(m [][]string, f func([]string) Uint64Option) []Uint64Option {
	acc := make([]Uint64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]string: []string->UintptrOption */ func MapUintptrOptionToStringArrArr(m [][]string, f func([]string) UintptrOption) []UintptrOption {
	acc := make([]UintptrOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]string: []string->ByteOption */ func MapByteOptionToStringArrArr(m [][]string, f func([]string) ByteOption) []ByteOption {
	acc := make([]ByteOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]string: []string->RuneOption */ func MapRuneOptionToStringArrArr(m [][]string, f func([]string) RuneOption) []RuneOption {
	acc := make([]RuneOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]string: []string->Float32Option */ func MapFloat32OptionToStringArrArr(m [][]string, f func([]string) Float32Option) []Float32Option {
	acc := make([]Float32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]string: []string->Float64Option */ func MapFloat64OptionToStringArrArr(m [][]string, f func([]string) Float64Option) []Float64Option {
	acc := make([]Float64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]string: []string->Complex64Option */ func MapComplex64OptionToStringArrArr(m [][]string, f func([]string) Complex64Option) []Complex64Option {
	acc := make([]Complex64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]string: []string->Complex128Option */ func MapComplex128OptionToStringArrArr(m [][]string, f func([]string) Complex128Option) []Complex128Option {
	acc := make([]Complex128Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]string: []string->AnyOption */ func MapAnyOptionToStringArrArr(m [][]string, f func([]string) AnyOption) []AnyOption {
	acc := make([]AnyOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]string: []string->[]bool */ func MapBoolArrToStringArrArr(m [][]string, f func([]string) []bool) [][]bool {
	acc := make([][]bool, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]string: []string->[]string */ func MapStringArrToStringArrArr(m [][]string, f func([]string) []string) [][]string {
	acc := make([][]string, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]string: []string->[]int */ func MapIntArrToStringArrArr(m [][]string, f func([]string) []int) [][]int {
	acc := make([][]int, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]string: []string->[]int8 */ func MapInt8ArrToStringArrArr(m [][]string, f func([]string) []int8) [][]int8 {
	acc := make([][]int8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]string: []string->[]int16 */ func MapInt16ArrToStringArrArr(m [][]string, f func([]string) []int16) [][]int16 {
	acc := make([][]int16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]string: []string->[]int32 */ func MapInt32ArrToStringArrArr(m [][]string, f func([]string) []int32) [][]int32 {
	acc := make([][]int32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]string: []string->[]int64 */ func MapInt64ArrToStringArrArr(m [][]string, f func([]string) []int64) [][]int64 {
	acc := make([][]int64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]string: []string->[]uint */ func MapUintArrToStringArrArr(m [][]string, f func([]string) []uint) [][]uint {
	acc := make([][]uint, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]string: []string->[]uint8 */ func MapUint8ArrToStringArrArr(m [][]string, f func([]string) []uint8) [][]uint8 {
	acc := make([][]uint8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]string: []string->[]uint16 */ func MapUint16ArrToStringArrArr(m [][]string, f func([]string) []uint16) [][]uint16 {
	acc := make([][]uint16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]string: []string->[]uint32 */ func MapUint32ArrToStringArrArr(m [][]string, f func([]string) []uint32) [][]uint32 {
	acc := make([][]uint32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]string: []string->[]uint64 */ func MapUint64ArrToStringArrArr(m [][]string, f func([]string) []uint64) [][]uint64 {
	acc := make([][]uint64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]string: []string->[]uintptr */ func MapUintptrArrToStringArrArr(m [][]string, f func([]string) []uintptr) [][]uintptr {
	acc := make([][]uintptr, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]string: []string->[]byte */ func MapByteArrToStringArrArr(m [][]string, f func([]string) []byte) [][]byte {
	acc := make([][]byte, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]string: []string->[]rune */ func MapRuneArrToStringArrArr(m [][]string, f func([]string) []rune) [][]rune {
	acc := make([][]rune, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]string: []string->[]float32 */ func MapFloat32ArrToStringArrArr(m [][]string, f func([]string) []float32) [][]float32 {
	acc := make([][]float32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]string: []string->[]float64 */ func MapFloat64ArrToStringArrArr(m [][]string, f func([]string) []float64) [][]float64 {
	acc := make([][]float64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]string: []string->[]complex64 */ func MapComplex64ArrToStringArrArr(m [][]string, f func([]string) []complex64) [][]complex64 {
	acc := make([][]complex64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]string: []string->[]complex128 */ func MapComplex128ArrToStringArrArr(m [][]string, f func([]string) []complex128) [][]complex128 {
	acc := make([][]complex128, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]string: []string->[]Any */ func MapAnyArrToStringArrArr(m [][]string, f func([]string) []Any) [][]Any {
	acc := make([][]Any, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]string: []string->BoolList */ func MapBoolListToStringArrArr(m [][]string, f func([]string) BoolList) []BoolList {
	acc := make([]BoolList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]string: []string->StringList */ func MapStringListToStringArrArr(m [][]string, f func([]string) StringList) []StringList {
	acc := make([]StringList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]string: []string->IntList */ func MapIntListToStringArrArr(m [][]string, f func([]string) IntList) []IntList {
	acc := make([]IntList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]string: []string->Int8List */ func MapInt8ListToStringArrArr(m [][]string, f func([]string) Int8List) []Int8List {
	acc := make([]Int8List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]string: []string->Int16List */ func MapInt16ListToStringArrArr(m [][]string, f func([]string) Int16List) []Int16List {
	acc := make([]Int16List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]string: []string->Int32List */ func MapInt32ListToStringArrArr(m [][]string, f func([]string) Int32List) []Int32List {
	acc := make([]Int32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]string: []string->Int64List */ func MapInt64ListToStringArrArr(m [][]string, f func([]string) Int64List) []Int64List {
	acc := make([]Int64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]string: []string->UintList */ func MapUintListToStringArrArr(m [][]string, f func([]string) UintList) []UintList {
	acc := make([]UintList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]string: []string->Uint8List */ func MapUint8ListToStringArrArr(m [][]string, f func([]string) Uint8List) []Uint8List {
	acc := make([]Uint8List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]string: []string->Uint16List */ func MapUint16ListToStringArrArr(m [][]string, f func([]string) Uint16List) []Uint16List {
	acc := make([]Uint16List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]string: []string->Uint32List */ func MapUint32ListToStringArrArr(m [][]string, f func([]string) Uint32List) []Uint32List {
	acc := make([]Uint32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]string: []string->Uint64List */ func MapUint64ListToStringArrArr(m [][]string, f func([]string) Uint64List) []Uint64List {
	acc := make([]Uint64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]string: []string->UintptrList */ func MapUintptrListToStringArrArr(m [][]string, f func([]string) UintptrList) []UintptrList {
	acc := make([]UintptrList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]string: []string->ByteList */ func MapByteListToStringArrArr(m [][]string, f func([]string) ByteList) []ByteList {
	acc := make([]ByteList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]string: []string->RuneList */ func MapRuneListToStringArrArr(m [][]string, f func([]string) RuneList) []RuneList {
	acc := make([]RuneList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]string: []string->Float32List */ func MapFloat32ListToStringArrArr(m [][]string, f func([]string) Float32List) []Float32List {
	acc := make([]Float32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]string: []string->Float64List */ func MapFloat64ListToStringArrArr(m [][]string, f func([]string) Float64List) []Float64List {
	acc := make([]Float64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]string: []string->Complex64List */ func MapComplex64ListToStringArrArr(m [][]string, f func([]string) Complex64List) []Complex64List {
	acc := make([]Complex64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]string: []string->Complex128List */ func MapComplex128ListToStringArrArr(m [][]string, f func([]string) Complex128List) []Complex128List {
	acc := make([]Complex128List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]string: []string->AnyList */ func MapAnyListToStringArrArr(m [][]string, f func([]string) AnyList) []AnyList {
	acc := make([]AnyList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int: []int->bool */ func MapBoolToIntArrArr(m [][]int, f func([]int) bool) []bool {
	acc := make([]bool, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int: []int->string */ func MapStringToIntArrArr(m [][]int, f func([]int) string) []string {
	acc := make([]string, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int: []int->int */ func MapIntToIntArrArr(m [][]int, f func([]int) int) []int {
	acc := make([]int, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int: []int->int8 */ func MapInt8ToIntArrArr(m [][]int, f func([]int) int8) []int8 {
	acc := make([]int8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int: []int->int16 */ func MapInt16ToIntArrArr(m [][]int, f func([]int) int16) []int16 {
	acc := make([]int16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int: []int->int32 */ func MapInt32ToIntArrArr(m [][]int, f func([]int) int32) []int32 {
	acc := make([]int32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int: []int->int64 */ func MapInt64ToIntArrArr(m [][]int, f func([]int) int64) []int64 {
	acc := make([]int64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int: []int->uint */ func MapUintToIntArrArr(m [][]int, f func([]int) uint) []uint {
	acc := make([]uint, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int: []int->uint8 */ func MapUint8ToIntArrArr(m [][]int, f func([]int) uint8) []uint8 {
	acc := make([]uint8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int: []int->uint16 */ func MapUint16ToIntArrArr(m [][]int, f func([]int) uint16) []uint16 {
	acc := make([]uint16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int: []int->uint32 */ func MapUint32ToIntArrArr(m [][]int, f func([]int) uint32) []uint32 {
	acc := make([]uint32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int: []int->uint64 */ func MapUint64ToIntArrArr(m [][]int, f func([]int) uint64) []uint64 {
	acc := make([]uint64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int: []int->uintptr */ func MapUintptrToIntArrArr(m [][]int, f func([]int) uintptr) []uintptr {
	acc := make([]uintptr, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int: []int->byte */ func MapByteToIntArrArr(m [][]int, f func([]int) byte) []byte {
	acc := make([]byte, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int: []int->rune */ func MapRuneToIntArrArr(m [][]int, f func([]int) rune) []rune {
	acc := make([]rune, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int: []int->float32 */ func MapFloat32ToIntArrArr(m [][]int, f func([]int) float32) []float32 {
	acc := make([]float32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int: []int->float64 */ func MapFloat64ToIntArrArr(m [][]int, f func([]int) float64) []float64 {
	acc := make([]float64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int: []int->complex64 */ func MapComplex64ToIntArrArr(m [][]int, f func([]int) complex64) []complex64 {
	acc := make([]complex64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int: []int->complex128 */ func MapComplex128ToIntArrArr(m [][]int, f func([]int) complex128) []complex128 {
	acc := make([]complex128, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int: []int->Any */ func MapAnyToIntArrArr(m [][]int, f func([]int) Any) []Any {
	acc := make([]Any, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int: []int->BoolOption */ func MapBoolOptionToIntArrArr(m [][]int, f func([]int) BoolOption) []BoolOption {
	acc := make([]BoolOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int: []int->StringOption */ func MapStringOptionToIntArrArr(m [][]int, f func([]int) StringOption) []StringOption {
	acc := make([]StringOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int: []int->IntOption */ func MapIntOptionToIntArrArr(m [][]int, f func([]int) IntOption) []IntOption {
	acc := make([]IntOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int: []int->Int8Option */ func MapInt8OptionToIntArrArr(m [][]int, f func([]int) Int8Option) []Int8Option {
	acc := make([]Int8Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int: []int->Int16Option */ func MapInt16OptionToIntArrArr(m [][]int, f func([]int) Int16Option) []Int16Option {
	acc := make([]Int16Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int: []int->Int32Option */ func MapInt32OptionToIntArrArr(m [][]int, f func([]int) Int32Option) []Int32Option {
	acc := make([]Int32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int: []int->Int64Option */ func MapInt64OptionToIntArrArr(m [][]int, f func([]int) Int64Option) []Int64Option {
	acc := make([]Int64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int: []int->UintOption */ func MapUintOptionToIntArrArr(m [][]int, f func([]int) UintOption) []UintOption {
	acc := make([]UintOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int: []int->Uint8Option */ func MapUint8OptionToIntArrArr(m [][]int, f func([]int) Uint8Option) []Uint8Option {
	acc := make([]Uint8Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int: []int->Uint16Option */ func MapUint16OptionToIntArrArr(m [][]int, f func([]int) Uint16Option) []Uint16Option {
	acc := make([]Uint16Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int: []int->Uint32Option */ func MapUint32OptionToIntArrArr(m [][]int, f func([]int) Uint32Option) []Uint32Option {
	acc := make([]Uint32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int: []int->Uint64Option */ func MapUint64OptionToIntArrArr(m [][]int, f func([]int) Uint64Option) []Uint64Option {
	acc := make([]Uint64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int: []int->UintptrOption */ func MapUintptrOptionToIntArrArr(m [][]int, f func([]int) UintptrOption) []UintptrOption {
	acc := make([]UintptrOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int: []int->ByteOption */ func MapByteOptionToIntArrArr(m [][]int, f func([]int) ByteOption) []ByteOption {
	acc := make([]ByteOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int: []int->RuneOption */ func MapRuneOptionToIntArrArr(m [][]int, f func([]int) RuneOption) []RuneOption {
	acc := make([]RuneOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int: []int->Float32Option */ func MapFloat32OptionToIntArrArr(m [][]int, f func([]int) Float32Option) []Float32Option {
	acc := make([]Float32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int: []int->Float64Option */ func MapFloat64OptionToIntArrArr(m [][]int, f func([]int) Float64Option) []Float64Option {
	acc := make([]Float64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int: []int->Complex64Option */ func MapComplex64OptionToIntArrArr(m [][]int, f func([]int) Complex64Option) []Complex64Option {
	acc := make([]Complex64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int: []int->Complex128Option */ func MapComplex128OptionToIntArrArr(m [][]int, f func([]int) Complex128Option) []Complex128Option {
	acc := make([]Complex128Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int: []int->AnyOption */ func MapAnyOptionToIntArrArr(m [][]int, f func([]int) AnyOption) []AnyOption {
	acc := make([]AnyOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int: []int->[]bool */ func MapBoolArrToIntArrArr(m [][]int, f func([]int) []bool) [][]bool {
	acc := make([][]bool, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int: []int->[]string */ func MapStringArrToIntArrArr(m [][]int, f func([]int) []string) [][]string {
	acc := make([][]string, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int: []int->[]int */ func MapIntArrToIntArrArr(m [][]int, f func([]int) []int) [][]int {
	acc := make([][]int, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int: []int->[]int8 */ func MapInt8ArrToIntArrArr(m [][]int, f func([]int) []int8) [][]int8 {
	acc := make([][]int8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int: []int->[]int16 */ func MapInt16ArrToIntArrArr(m [][]int, f func([]int) []int16) [][]int16 {
	acc := make([][]int16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int: []int->[]int32 */ func MapInt32ArrToIntArrArr(m [][]int, f func([]int) []int32) [][]int32 {
	acc := make([][]int32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int: []int->[]int64 */ func MapInt64ArrToIntArrArr(m [][]int, f func([]int) []int64) [][]int64 {
	acc := make([][]int64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int: []int->[]uint */ func MapUintArrToIntArrArr(m [][]int, f func([]int) []uint) [][]uint {
	acc := make([][]uint, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int: []int->[]uint8 */ func MapUint8ArrToIntArrArr(m [][]int, f func([]int) []uint8) [][]uint8 {
	acc := make([][]uint8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int: []int->[]uint16 */ func MapUint16ArrToIntArrArr(m [][]int, f func([]int) []uint16) [][]uint16 {
	acc := make([][]uint16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int: []int->[]uint32 */ func MapUint32ArrToIntArrArr(m [][]int, f func([]int) []uint32) [][]uint32 {
	acc := make([][]uint32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int: []int->[]uint64 */ func MapUint64ArrToIntArrArr(m [][]int, f func([]int) []uint64) [][]uint64 {
	acc := make([][]uint64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int: []int->[]uintptr */ func MapUintptrArrToIntArrArr(m [][]int, f func([]int) []uintptr) [][]uintptr {
	acc := make([][]uintptr, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int: []int->[]byte */ func MapByteArrToIntArrArr(m [][]int, f func([]int) []byte) [][]byte {
	acc := make([][]byte, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int: []int->[]rune */ func MapRuneArrToIntArrArr(m [][]int, f func([]int) []rune) [][]rune {
	acc := make([][]rune, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int: []int->[]float32 */ func MapFloat32ArrToIntArrArr(m [][]int, f func([]int) []float32) [][]float32 {
	acc := make([][]float32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int: []int->[]float64 */ func MapFloat64ArrToIntArrArr(m [][]int, f func([]int) []float64) [][]float64 {
	acc := make([][]float64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int: []int->[]complex64 */ func MapComplex64ArrToIntArrArr(m [][]int, f func([]int) []complex64) [][]complex64 {
	acc := make([][]complex64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int: []int->[]complex128 */ func MapComplex128ArrToIntArrArr(m [][]int, f func([]int) []complex128) [][]complex128 {
	acc := make([][]complex128, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int: []int->[]Any */ func MapAnyArrToIntArrArr(m [][]int, f func([]int) []Any) [][]Any {
	acc := make([][]Any, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int: []int->BoolList */ func MapBoolListToIntArrArr(m [][]int, f func([]int) BoolList) []BoolList {
	acc := make([]BoolList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int: []int->StringList */ func MapStringListToIntArrArr(m [][]int, f func([]int) StringList) []StringList {
	acc := make([]StringList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int: []int->IntList */ func MapIntListToIntArrArr(m [][]int, f func([]int) IntList) []IntList {
	acc := make([]IntList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int: []int->Int8List */ func MapInt8ListToIntArrArr(m [][]int, f func([]int) Int8List) []Int8List {
	acc := make([]Int8List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int: []int->Int16List */ func MapInt16ListToIntArrArr(m [][]int, f func([]int) Int16List) []Int16List {
	acc := make([]Int16List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int: []int->Int32List */ func MapInt32ListToIntArrArr(m [][]int, f func([]int) Int32List) []Int32List {
	acc := make([]Int32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int: []int->Int64List */ func MapInt64ListToIntArrArr(m [][]int, f func([]int) Int64List) []Int64List {
	acc := make([]Int64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int: []int->UintList */ func MapUintListToIntArrArr(m [][]int, f func([]int) UintList) []UintList {
	acc := make([]UintList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int: []int->Uint8List */ func MapUint8ListToIntArrArr(m [][]int, f func([]int) Uint8List) []Uint8List {
	acc := make([]Uint8List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int: []int->Uint16List */ func MapUint16ListToIntArrArr(m [][]int, f func([]int) Uint16List) []Uint16List {
	acc := make([]Uint16List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int: []int->Uint32List */ func MapUint32ListToIntArrArr(m [][]int, f func([]int) Uint32List) []Uint32List {
	acc := make([]Uint32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int: []int->Uint64List */ func MapUint64ListToIntArrArr(m [][]int, f func([]int) Uint64List) []Uint64List {
	acc := make([]Uint64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int: []int->UintptrList */ func MapUintptrListToIntArrArr(m [][]int, f func([]int) UintptrList) []UintptrList {
	acc := make([]UintptrList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int: []int->ByteList */ func MapByteListToIntArrArr(m [][]int, f func([]int) ByteList) []ByteList {
	acc := make([]ByteList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int: []int->RuneList */ func MapRuneListToIntArrArr(m [][]int, f func([]int) RuneList) []RuneList {
	acc := make([]RuneList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int: []int->Float32List */ func MapFloat32ListToIntArrArr(m [][]int, f func([]int) Float32List) []Float32List {
	acc := make([]Float32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int: []int->Float64List */ func MapFloat64ListToIntArrArr(m [][]int, f func([]int) Float64List) []Float64List {
	acc := make([]Float64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int: []int->Complex64List */ func MapComplex64ListToIntArrArr(m [][]int, f func([]int) Complex64List) []Complex64List {
	acc := make([]Complex64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int: []int->Complex128List */ func MapComplex128ListToIntArrArr(m [][]int, f func([]int) Complex128List) []Complex128List {
	acc := make([]Complex128List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int: []int->AnyList */ func MapAnyListToIntArrArr(m [][]int, f func([]int) AnyList) []AnyList {
	acc := make([]AnyList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int8: []int8->bool */ func MapBoolToInt8ArrArr(m [][]int8, f func([]int8) bool) []bool {
	acc := make([]bool, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int8: []int8->string */ func MapStringToInt8ArrArr(m [][]int8, f func([]int8) string) []string {
	acc := make([]string, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int8: []int8->int */ func MapIntToInt8ArrArr(m [][]int8, f func([]int8) int) []int {
	acc := make([]int, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int8: []int8->int8 */ func MapInt8ToInt8ArrArr(m [][]int8, f func([]int8) int8) []int8 {
	acc := make([]int8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int8: []int8->int16 */ func MapInt16ToInt8ArrArr(m [][]int8, f func([]int8) int16) []int16 {
	acc := make([]int16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int8: []int8->int32 */ func MapInt32ToInt8ArrArr(m [][]int8, f func([]int8) int32) []int32 {
	acc := make([]int32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int8: []int8->int64 */ func MapInt64ToInt8ArrArr(m [][]int8, f func([]int8) int64) []int64 {
	acc := make([]int64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int8: []int8->uint */ func MapUintToInt8ArrArr(m [][]int8, f func([]int8) uint) []uint {
	acc := make([]uint, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int8: []int8->uint8 */ func MapUint8ToInt8ArrArr(m [][]int8, f func([]int8) uint8) []uint8 {
	acc := make([]uint8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int8: []int8->uint16 */ func MapUint16ToInt8ArrArr(m [][]int8, f func([]int8) uint16) []uint16 {
	acc := make([]uint16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int8: []int8->uint32 */ func MapUint32ToInt8ArrArr(m [][]int8, f func([]int8) uint32) []uint32 {
	acc := make([]uint32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int8: []int8->uint64 */ func MapUint64ToInt8ArrArr(m [][]int8, f func([]int8) uint64) []uint64 {
	acc := make([]uint64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int8: []int8->uintptr */ func MapUintptrToInt8ArrArr(m [][]int8, f func([]int8) uintptr) []uintptr {
	acc := make([]uintptr, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int8: []int8->byte */ func MapByteToInt8ArrArr(m [][]int8, f func([]int8) byte) []byte {
	acc := make([]byte, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int8: []int8->rune */ func MapRuneToInt8ArrArr(m [][]int8, f func([]int8) rune) []rune {
	acc := make([]rune, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int8: []int8->float32 */ func MapFloat32ToInt8ArrArr(m [][]int8, f func([]int8) float32) []float32 {
	acc := make([]float32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int8: []int8->float64 */ func MapFloat64ToInt8ArrArr(m [][]int8, f func([]int8) float64) []float64 {
	acc := make([]float64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int8: []int8->complex64 */ func MapComplex64ToInt8ArrArr(m [][]int8, f func([]int8) complex64) []complex64 {
	acc := make([]complex64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int8: []int8->complex128 */ func MapComplex128ToInt8ArrArr(m [][]int8, f func([]int8) complex128) []complex128 {
	acc := make([]complex128, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int8: []int8->Any */ func MapAnyToInt8ArrArr(m [][]int8, f func([]int8) Any) []Any {
	acc := make([]Any, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int8: []int8->BoolOption */ func MapBoolOptionToInt8ArrArr(m [][]int8, f func([]int8) BoolOption) []BoolOption {
	acc := make([]BoolOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int8: []int8->StringOption */ func MapStringOptionToInt8ArrArr(m [][]int8, f func([]int8) StringOption) []StringOption {
	acc := make([]StringOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int8: []int8->IntOption */ func MapIntOptionToInt8ArrArr(m [][]int8, f func([]int8) IntOption) []IntOption {
	acc := make([]IntOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int8: []int8->Int8Option */ func MapInt8OptionToInt8ArrArr(m [][]int8, f func([]int8) Int8Option) []Int8Option {
	acc := make([]Int8Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int8: []int8->Int16Option */ func MapInt16OptionToInt8ArrArr(m [][]int8, f func([]int8) Int16Option) []Int16Option {
	acc := make([]Int16Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int8: []int8->Int32Option */ func MapInt32OptionToInt8ArrArr(m [][]int8, f func([]int8) Int32Option) []Int32Option {
	acc := make([]Int32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int8: []int8->Int64Option */ func MapInt64OptionToInt8ArrArr(m [][]int8, f func([]int8) Int64Option) []Int64Option {
	acc := make([]Int64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int8: []int8->UintOption */ func MapUintOptionToInt8ArrArr(m [][]int8, f func([]int8) UintOption) []UintOption {
	acc := make([]UintOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int8: []int8->Uint8Option */ func MapUint8OptionToInt8ArrArr(m [][]int8, f func([]int8) Uint8Option) []Uint8Option {
	acc := make([]Uint8Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int8: []int8->Uint16Option */ func MapUint16OptionToInt8ArrArr(m [][]int8, f func([]int8) Uint16Option) []Uint16Option {
	acc := make([]Uint16Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int8: []int8->Uint32Option */ func MapUint32OptionToInt8ArrArr(m [][]int8, f func([]int8) Uint32Option) []Uint32Option {
	acc := make([]Uint32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int8: []int8->Uint64Option */ func MapUint64OptionToInt8ArrArr(m [][]int8, f func([]int8) Uint64Option) []Uint64Option {
	acc := make([]Uint64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int8: []int8->UintptrOption */ func MapUintptrOptionToInt8ArrArr(m [][]int8, f func([]int8) UintptrOption) []UintptrOption {
	acc := make([]UintptrOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int8: []int8->ByteOption */ func MapByteOptionToInt8ArrArr(m [][]int8, f func([]int8) ByteOption) []ByteOption {
	acc := make([]ByteOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int8: []int8->RuneOption */ func MapRuneOptionToInt8ArrArr(m [][]int8, f func([]int8) RuneOption) []RuneOption {
	acc := make([]RuneOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int8: []int8->Float32Option */ func MapFloat32OptionToInt8ArrArr(m [][]int8, f func([]int8) Float32Option) []Float32Option {
	acc := make([]Float32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int8: []int8->Float64Option */ func MapFloat64OptionToInt8ArrArr(m [][]int8, f func([]int8) Float64Option) []Float64Option {
	acc := make([]Float64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int8: []int8->Complex64Option */ func MapComplex64OptionToInt8ArrArr(m [][]int8, f func([]int8) Complex64Option) []Complex64Option {
	acc := make([]Complex64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int8: []int8->Complex128Option */ func MapComplex128OptionToInt8ArrArr(m [][]int8, f func([]int8) Complex128Option) []Complex128Option {
	acc := make([]Complex128Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int8: []int8->AnyOption */ func MapAnyOptionToInt8ArrArr(m [][]int8, f func([]int8) AnyOption) []AnyOption {
	acc := make([]AnyOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int8: []int8->[]bool */ func MapBoolArrToInt8ArrArr(m [][]int8, f func([]int8) []bool) [][]bool {
	acc := make([][]bool, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int8: []int8->[]string */ func MapStringArrToInt8ArrArr(m [][]int8, f func([]int8) []string) [][]string {
	acc := make([][]string, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int8: []int8->[]int */ func MapIntArrToInt8ArrArr(m [][]int8, f func([]int8) []int) [][]int {
	acc := make([][]int, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int8: []int8->[]int8 */ func MapInt8ArrToInt8ArrArr(m [][]int8, f func([]int8) []int8) [][]int8 {
	acc := make([][]int8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int8: []int8->[]int16 */ func MapInt16ArrToInt8ArrArr(m [][]int8, f func([]int8) []int16) [][]int16 {
	acc := make([][]int16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int8: []int8->[]int32 */ func MapInt32ArrToInt8ArrArr(m [][]int8, f func([]int8) []int32) [][]int32 {
	acc := make([][]int32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int8: []int8->[]int64 */ func MapInt64ArrToInt8ArrArr(m [][]int8, f func([]int8) []int64) [][]int64 {
	acc := make([][]int64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int8: []int8->[]uint */ func MapUintArrToInt8ArrArr(m [][]int8, f func([]int8) []uint) [][]uint {
	acc := make([][]uint, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int8: []int8->[]uint8 */ func MapUint8ArrToInt8ArrArr(m [][]int8, f func([]int8) []uint8) [][]uint8 {
	acc := make([][]uint8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int8: []int8->[]uint16 */ func MapUint16ArrToInt8ArrArr(m [][]int8, f func([]int8) []uint16) [][]uint16 {
	acc := make([][]uint16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int8: []int8->[]uint32 */ func MapUint32ArrToInt8ArrArr(m [][]int8, f func([]int8) []uint32) [][]uint32 {
	acc := make([][]uint32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int8: []int8->[]uint64 */ func MapUint64ArrToInt8ArrArr(m [][]int8, f func([]int8) []uint64) [][]uint64 {
	acc := make([][]uint64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int8: []int8->[]uintptr */ func MapUintptrArrToInt8ArrArr(m [][]int8, f func([]int8) []uintptr) [][]uintptr {
	acc := make([][]uintptr, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int8: []int8->[]byte */ func MapByteArrToInt8ArrArr(m [][]int8, f func([]int8) []byte) [][]byte {
	acc := make([][]byte, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int8: []int8->[]rune */ func MapRuneArrToInt8ArrArr(m [][]int8, f func([]int8) []rune) [][]rune {
	acc := make([][]rune, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int8: []int8->[]float32 */ func MapFloat32ArrToInt8ArrArr(m [][]int8, f func([]int8) []float32) [][]float32 {
	acc := make([][]float32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int8: []int8->[]float64 */ func MapFloat64ArrToInt8ArrArr(m [][]int8, f func([]int8) []float64) [][]float64 {
	acc := make([][]float64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int8: []int8->[]complex64 */ func MapComplex64ArrToInt8ArrArr(m [][]int8, f func([]int8) []complex64) [][]complex64 {
	acc := make([][]complex64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int8: []int8->[]complex128 */ func MapComplex128ArrToInt8ArrArr(m [][]int8, f func([]int8) []complex128) [][]complex128 {
	acc := make([][]complex128, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int8: []int8->[]Any */ func MapAnyArrToInt8ArrArr(m [][]int8, f func([]int8) []Any) [][]Any {
	acc := make([][]Any, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int8: []int8->BoolList */ func MapBoolListToInt8ArrArr(m [][]int8, f func([]int8) BoolList) []BoolList {
	acc := make([]BoolList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int8: []int8->StringList */ func MapStringListToInt8ArrArr(m [][]int8, f func([]int8) StringList) []StringList {
	acc := make([]StringList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int8: []int8->IntList */ func MapIntListToInt8ArrArr(m [][]int8, f func([]int8) IntList) []IntList {
	acc := make([]IntList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int8: []int8->Int8List */ func MapInt8ListToInt8ArrArr(m [][]int8, f func([]int8) Int8List) []Int8List {
	acc := make([]Int8List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int8: []int8->Int16List */ func MapInt16ListToInt8ArrArr(m [][]int8, f func([]int8) Int16List) []Int16List {
	acc := make([]Int16List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int8: []int8->Int32List */ func MapInt32ListToInt8ArrArr(m [][]int8, f func([]int8) Int32List) []Int32List {
	acc := make([]Int32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int8: []int8->Int64List */ func MapInt64ListToInt8ArrArr(m [][]int8, f func([]int8) Int64List) []Int64List {
	acc := make([]Int64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int8: []int8->UintList */ func MapUintListToInt8ArrArr(m [][]int8, f func([]int8) UintList) []UintList {
	acc := make([]UintList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int8: []int8->Uint8List */ func MapUint8ListToInt8ArrArr(m [][]int8, f func([]int8) Uint8List) []Uint8List {
	acc := make([]Uint8List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int8: []int8->Uint16List */ func MapUint16ListToInt8ArrArr(m [][]int8, f func([]int8) Uint16List) []Uint16List {
	acc := make([]Uint16List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int8: []int8->Uint32List */ func MapUint32ListToInt8ArrArr(m [][]int8, f func([]int8) Uint32List) []Uint32List {
	acc := make([]Uint32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int8: []int8->Uint64List */ func MapUint64ListToInt8ArrArr(m [][]int8, f func([]int8) Uint64List) []Uint64List {
	acc := make([]Uint64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int8: []int8->UintptrList */ func MapUintptrListToInt8ArrArr(m [][]int8, f func([]int8) UintptrList) []UintptrList {
	acc := make([]UintptrList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int8: []int8->ByteList */ func MapByteListToInt8ArrArr(m [][]int8, f func([]int8) ByteList) []ByteList {
	acc := make([]ByteList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int8: []int8->RuneList */ func MapRuneListToInt8ArrArr(m [][]int8, f func([]int8) RuneList) []RuneList {
	acc := make([]RuneList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int8: []int8->Float32List */ func MapFloat32ListToInt8ArrArr(m [][]int8, f func([]int8) Float32List) []Float32List {
	acc := make([]Float32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int8: []int8->Float64List */ func MapFloat64ListToInt8ArrArr(m [][]int8, f func([]int8) Float64List) []Float64List {
	acc := make([]Float64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int8: []int8->Complex64List */ func MapComplex64ListToInt8ArrArr(m [][]int8, f func([]int8) Complex64List) []Complex64List {
	acc := make([]Complex64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int8: []int8->Complex128List */ func MapComplex128ListToInt8ArrArr(m [][]int8, f func([]int8) Complex128List) []Complex128List {
	acc := make([]Complex128List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int8: []int8->AnyList */ func MapAnyListToInt8ArrArr(m [][]int8, f func([]int8) AnyList) []AnyList {
	acc := make([]AnyList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int16: []int16->bool */ func MapBoolToInt16ArrArr(m [][]int16, f func([]int16) bool) []bool {
	acc := make([]bool, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int16: []int16->string */ func MapStringToInt16ArrArr(m [][]int16, f func([]int16) string) []string {
	acc := make([]string, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int16: []int16->int */ func MapIntToInt16ArrArr(m [][]int16, f func([]int16) int) []int {
	acc := make([]int, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int16: []int16->int8 */ func MapInt8ToInt16ArrArr(m [][]int16, f func([]int16) int8) []int8 {
	acc := make([]int8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int16: []int16->int16 */ func MapInt16ToInt16ArrArr(m [][]int16, f func([]int16) int16) []int16 {
	acc := make([]int16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int16: []int16->int32 */ func MapInt32ToInt16ArrArr(m [][]int16, f func([]int16) int32) []int32 {
	acc := make([]int32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int16: []int16->int64 */ func MapInt64ToInt16ArrArr(m [][]int16, f func([]int16) int64) []int64 {
	acc := make([]int64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int16: []int16->uint */ func MapUintToInt16ArrArr(m [][]int16, f func([]int16) uint) []uint {
	acc := make([]uint, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int16: []int16->uint8 */ func MapUint8ToInt16ArrArr(m [][]int16, f func([]int16) uint8) []uint8 {
	acc := make([]uint8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int16: []int16->uint16 */ func MapUint16ToInt16ArrArr(m [][]int16, f func([]int16) uint16) []uint16 {
	acc := make([]uint16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int16: []int16->uint32 */ func MapUint32ToInt16ArrArr(m [][]int16, f func([]int16) uint32) []uint32 {
	acc := make([]uint32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int16: []int16->uint64 */ func MapUint64ToInt16ArrArr(m [][]int16, f func([]int16) uint64) []uint64 {
	acc := make([]uint64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int16: []int16->uintptr */ func MapUintptrToInt16ArrArr(m [][]int16, f func([]int16) uintptr) []uintptr {
	acc := make([]uintptr, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int16: []int16->byte */ func MapByteToInt16ArrArr(m [][]int16, f func([]int16) byte) []byte {
	acc := make([]byte, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int16: []int16->rune */ func MapRuneToInt16ArrArr(m [][]int16, f func([]int16) rune) []rune {
	acc := make([]rune, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int16: []int16->float32 */ func MapFloat32ToInt16ArrArr(m [][]int16, f func([]int16) float32) []float32 {
	acc := make([]float32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int16: []int16->float64 */ func MapFloat64ToInt16ArrArr(m [][]int16, f func([]int16) float64) []float64 {
	acc := make([]float64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int16: []int16->complex64 */ func MapComplex64ToInt16ArrArr(m [][]int16, f func([]int16) complex64) []complex64 {
	acc := make([]complex64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int16: []int16->complex128 */ func MapComplex128ToInt16ArrArr(m [][]int16, f func([]int16) complex128) []complex128 {
	acc := make([]complex128, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int16: []int16->Any */ func MapAnyToInt16ArrArr(m [][]int16, f func([]int16) Any) []Any {
	acc := make([]Any, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int16: []int16->BoolOption */ func MapBoolOptionToInt16ArrArr(m [][]int16, f func([]int16) BoolOption) []BoolOption {
	acc := make([]BoolOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int16: []int16->StringOption */ func MapStringOptionToInt16ArrArr(m [][]int16, f func([]int16) StringOption) []StringOption {
	acc := make([]StringOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int16: []int16->IntOption */ func MapIntOptionToInt16ArrArr(m [][]int16, f func([]int16) IntOption) []IntOption {
	acc := make([]IntOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int16: []int16->Int8Option */ func MapInt8OptionToInt16ArrArr(m [][]int16, f func([]int16) Int8Option) []Int8Option {
	acc := make([]Int8Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int16: []int16->Int16Option */ func MapInt16OptionToInt16ArrArr(m [][]int16, f func([]int16) Int16Option) []Int16Option {
	acc := make([]Int16Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int16: []int16->Int32Option */ func MapInt32OptionToInt16ArrArr(m [][]int16, f func([]int16) Int32Option) []Int32Option {
	acc := make([]Int32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int16: []int16->Int64Option */ func MapInt64OptionToInt16ArrArr(m [][]int16, f func([]int16) Int64Option) []Int64Option {
	acc := make([]Int64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int16: []int16->UintOption */ func MapUintOptionToInt16ArrArr(m [][]int16, f func([]int16) UintOption) []UintOption {
	acc := make([]UintOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int16: []int16->Uint8Option */ func MapUint8OptionToInt16ArrArr(m [][]int16, f func([]int16) Uint8Option) []Uint8Option {
	acc := make([]Uint8Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int16: []int16->Uint16Option */ func MapUint16OptionToInt16ArrArr(m [][]int16, f func([]int16) Uint16Option) []Uint16Option {
	acc := make([]Uint16Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int16: []int16->Uint32Option */ func MapUint32OptionToInt16ArrArr(m [][]int16, f func([]int16) Uint32Option) []Uint32Option {
	acc := make([]Uint32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int16: []int16->Uint64Option */ func MapUint64OptionToInt16ArrArr(m [][]int16, f func([]int16) Uint64Option) []Uint64Option {
	acc := make([]Uint64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int16: []int16->UintptrOption */ func MapUintptrOptionToInt16ArrArr(m [][]int16, f func([]int16) UintptrOption) []UintptrOption {
	acc := make([]UintptrOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int16: []int16->ByteOption */ func MapByteOptionToInt16ArrArr(m [][]int16, f func([]int16) ByteOption) []ByteOption {
	acc := make([]ByteOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int16: []int16->RuneOption */ func MapRuneOptionToInt16ArrArr(m [][]int16, f func([]int16) RuneOption) []RuneOption {
	acc := make([]RuneOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int16: []int16->Float32Option */ func MapFloat32OptionToInt16ArrArr(m [][]int16, f func([]int16) Float32Option) []Float32Option {
	acc := make([]Float32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int16: []int16->Float64Option */ func MapFloat64OptionToInt16ArrArr(m [][]int16, f func([]int16) Float64Option) []Float64Option {
	acc := make([]Float64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int16: []int16->Complex64Option */ func MapComplex64OptionToInt16ArrArr(m [][]int16, f func([]int16) Complex64Option) []Complex64Option {
	acc := make([]Complex64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int16: []int16->Complex128Option */ func MapComplex128OptionToInt16ArrArr(m [][]int16, f func([]int16) Complex128Option) []Complex128Option {
	acc := make([]Complex128Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int16: []int16->AnyOption */ func MapAnyOptionToInt16ArrArr(m [][]int16, f func([]int16) AnyOption) []AnyOption {
	acc := make([]AnyOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int16: []int16->[]bool */ func MapBoolArrToInt16ArrArr(m [][]int16, f func([]int16) []bool) [][]bool {
	acc := make([][]bool, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int16: []int16->[]string */ func MapStringArrToInt16ArrArr(m [][]int16, f func([]int16) []string) [][]string {
	acc := make([][]string, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int16: []int16->[]int */ func MapIntArrToInt16ArrArr(m [][]int16, f func([]int16) []int) [][]int {
	acc := make([][]int, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int16: []int16->[]int8 */ func MapInt8ArrToInt16ArrArr(m [][]int16, f func([]int16) []int8) [][]int8 {
	acc := make([][]int8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int16: []int16->[]int16 */ func MapInt16ArrToInt16ArrArr(m [][]int16, f func([]int16) []int16) [][]int16 {
	acc := make([][]int16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int16: []int16->[]int32 */ func MapInt32ArrToInt16ArrArr(m [][]int16, f func([]int16) []int32) [][]int32 {
	acc := make([][]int32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int16: []int16->[]int64 */ func MapInt64ArrToInt16ArrArr(m [][]int16, f func([]int16) []int64) [][]int64 {
	acc := make([][]int64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int16: []int16->[]uint */ func MapUintArrToInt16ArrArr(m [][]int16, f func([]int16) []uint) [][]uint {
	acc := make([][]uint, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int16: []int16->[]uint8 */ func MapUint8ArrToInt16ArrArr(m [][]int16, f func([]int16) []uint8) [][]uint8 {
	acc := make([][]uint8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int16: []int16->[]uint16 */ func MapUint16ArrToInt16ArrArr(m [][]int16, f func([]int16) []uint16) [][]uint16 {
	acc := make([][]uint16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int16: []int16->[]uint32 */ func MapUint32ArrToInt16ArrArr(m [][]int16, f func([]int16) []uint32) [][]uint32 {
	acc := make([][]uint32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int16: []int16->[]uint64 */ func MapUint64ArrToInt16ArrArr(m [][]int16, f func([]int16) []uint64) [][]uint64 {
	acc := make([][]uint64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int16: []int16->[]uintptr */ func MapUintptrArrToInt16ArrArr(m [][]int16, f func([]int16) []uintptr) [][]uintptr {
	acc := make([][]uintptr, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int16: []int16->[]byte */ func MapByteArrToInt16ArrArr(m [][]int16, f func([]int16) []byte) [][]byte {
	acc := make([][]byte, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int16: []int16->[]rune */ func MapRuneArrToInt16ArrArr(m [][]int16, f func([]int16) []rune) [][]rune {
	acc := make([][]rune, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int16: []int16->[]float32 */ func MapFloat32ArrToInt16ArrArr(m [][]int16, f func([]int16) []float32) [][]float32 {
	acc := make([][]float32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int16: []int16->[]float64 */ func MapFloat64ArrToInt16ArrArr(m [][]int16, f func([]int16) []float64) [][]float64 {
	acc := make([][]float64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int16: []int16->[]complex64 */ func MapComplex64ArrToInt16ArrArr(m [][]int16, f func([]int16) []complex64) [][]complex64 {
	acc := make([][]complex64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int16: []int16->[]complex128 */ func MapComplex128ArrToInt16ArrArr(m [][]int16, f func([]int16) []complex128) [][]complex128 {
	acc := make([][]complex128, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int16: []int16->[]Any */ func MapAnyArrToInt16ArrArr(m [][]int16, f func([]int16) []Any) [][]Any {
	acc := make([][]Any, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int16: []int16->BoolList */ func MapBoolListToInt16ArrArr(m [][]int16, f func([]int16) BoolList) []BoolList {
	acc := make([]BoolList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int16: []int16->StringList */ func MapStringListToInt16ArrArr(m [][]int16, f func([]int16) StringList) []StringList {
	acc := make([]StringList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int16: []int16->IntList */ func MapIntListToInt16ArrArr(m [][]int16, f func([]int16) IntList) []IntList {
	acc := make([]IntList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int16: []int16->Int8List */ func MapInt8ListToInt16ArrArr(m [][]int16, f func([]int16) Int8List) []Int8List {
	acc := make([]Int8List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int16: []int16->Int16List */ func MapInt16ListToInt16ArrArr(m [][]int16, f func([]int16) Int16List) []Int16List {
	acc := make([]Int16List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int16: []int16->Int32List */ func MapInt32ListToInt16ArrArr(m [][]int16, f func([]int16) Int32List) []Int32List {
	acc := make([]Int32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int16: []int16->Int64List */ func MapInt64ListToInt16ArrArr(m [][]int16, f func([]int16) Int64List) []Int64List {
	acc := make([]Int64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int16: []int16->UintList */ func MapUintListToInt16ArrArr(m [][]int16, f func([]int16) UintList) []UintList {
	acc := make([]UintList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int16: []int16->Uint8List */ func MapUint8ListToInt16ArrArr(m [][]int16, f func([]int16) Uint8List) []Uint8List {
	acc := make([]Uint8List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int16: []int16->Uint16List */ func MapUint16ListToInt16ArrArr(m [][]int16, f func([]int16) Uint16List) []Uint16List {
	acc := make([]Uint16List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int16: []int16->Uint32List */ func MapUint32ListToInt16ArrArr(m [][]int16, f func([]int16) Uint32List) []Uint32List {
	acc := make([]Uint32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int16: []int16->Uint64List */ func MapUint64ListToInt16ArrArr(m [][]int16, f func([]int16) Uint64List) []Uint64List {
	acc := make([]Uint64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int16: []int16->UintptrList */ func MapUintptrListToInt16ArrArr(m [][]int16, f func([]int16) UintptrList) []UintptrList {
	acc := make([]UintptrList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int16: []int16->ByteList */ func MapByteListToInt16ArrArr(m [][]int16, f func([]int16) ByteList) []ByteList {
	acc := make([]ByteList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int16: []int16->RuneList */ func MapRuneListToInt16ArrArr(m [][]int16, f func([]int16) RuneList) []RuneList {
	acc := make([]RuneList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int16: []int16->Float32List */ func MapFloat32ListToInt16ArrArr(m [][]int16, f func([]int16) Float32List) []Float32List {
	acc := make([]Float32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int16: []int16->Float64List */ func MapFloat64ListToInt16ArrArr(m [][]int16, f func([]int16) Float64List) []Float64List {
	acc := make([]Float64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int16: []int16->Complex64List */ func MapComplex64ListToInt16ArrArr(m [][]int16, f func([]int16) Complex64List) []Complex64List {
	acc := make([]Complex64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int16: []int16->Complex128List */ func MapComplex128ListToInt16ArrArr(m [][]int16, f func([]int16) Complex128List) []Complex128List {
	acc := make([]Complex128List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int16: []int16->AnyList */ func MapAnyListToInt16ArrArr(m [][]int16, f func([]int16) AnyList) []AnyList {
	acc := make([]AnyList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int32: []int32->bool */ func MapBoolToInt32ArrArr(m [][]int32, f func([]int32) bool) []bool {
	acc := make([]bool, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int32: []int32->string */ func MapStringToInt32ArrArr(m [][]int32, f func([]int32) string) []string {
	acc := make([]string, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int32: []int32->int */ func MapIntToInt32ArrArr(m [][]int32, f func([]int32) int) []int {
	acc := make([]int, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int32: []int32->int8 */ func MapInt8ToInt32ArrArr(m [][]int32, f func([]int32) int8) []int8 {
	acc := make([]int8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int32: []int32->int16 */ func MapInt16ToInt32ArrArr(m [][]int32, f func([]int32) int16) []int16 {
	acc := make([]int16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int32: []int32->int32 */ func MapInt32ToInt32ArrArr(m [][]int32, f func([]int32) int32) []int32 {
	acc := make([]int32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int32: []int32->int64 */ func MapInt64ToInt32ArrArr(m [][]int32, f func([]int32) int64) []int64 {
	acc := make([]int64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int32: []int32->uint */ func MapUintToInt32ArrArr(m [][]int32, f func([]int32) uint) []uint {
	acc := make([]uint, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int32: []int32->uint8 */ func MapUint8ToInt32ArrArr(m [][]int32, f func([]int32) uint8) []uint8 {
	acc := make([]uint8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int32: []int32->uint16 */ func MapUint16ToInt32ArrArr(m [][]int32, f func([]int32) uint16) []uint16 {
	acc := make([]uint16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int32: []int32->uint32 */ func MapUint32ToInt32ArrArr(m [][]int32, f func([]int32) uint32) []uint32 {
	acc := make([]uint32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int32: []int32->uint64 */ func MapUint64ToInt32ArrArr(m [][]int32, f func([]int32) uint64) []uint64 {
	acc := make([]uint64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int32: []int32->uintptr */ func MapUintptrToInt32ArrArr(m [][]int32, f func([]int32) uintptr) []uintptr {
	acc := make([]uintptr, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int32: []int32->byte */ func MapByteToInt32ArrArr(m [][]int32, f func([]int32) byte) []byte {
	acc := make([]byte, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int32: []int32->rune */ func MapRuneToInt32ArrArr(m [][]int32, f func([]int32) rune) []rune {
	acc := make([]rune, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int32: []int32->float32 */ func MapFloat32ToInt32ArrArr(m [][]int32, f func([]int32) float32) []float32 {
	acc := make([]float32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int32: []int32->float64 */ func MapFloat64ToInt32ArrArr(m [][]int32, f func([]int32) float64) []float64 {
	acc := make([]float64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int32: []int32->complex64 */ func MapComplex64ToInt32ArrArr(m [][]int32, f func([]int32) complex64) []complex64 {
	acc := make([]complex64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int32: []int32->complex128 */ func MapComplex128ToInt32ArrArr(m [][]int32, f func([]int32) complex128) []complex128 {
	acc := make([]complex128, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int32: []int32->Any */ func MapAnyToInt32ArrArr(m [][]int32, f func([]int32) Any) []Any {
	acc := make([]Any, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int32: []int32->BoolOption */ func MapBoolOptionToInt32ArrArr(m [][]int32, f func([]int32) BoolOption) []BoolOption {
	acc := make([]BoolOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int32: []int32->StringOption */ func MapStringOptionToInt32ArrArr(m [][]int32, f func([]int32) StringOption) []StringOption {
	acc := make([]StringOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int32: []int32->IntOption */ func MapIntOptionToInt32ArrArr(m [][]int32, f func([]int32) IntOption) []IntOption {
	acc := make([]IntOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int32: []int32->Int8Option */ func MapInt8OptionToInt32ArrArr(m [][]int32, f func([]int32) Int8Option) []Int8Option {
	acc := make([]Int8Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int32: []int32->Int16Option */ func MapInt16OptionToInt32ArrArr(m [][]int32, f func([]int32) Int16Option) []Int16Option {
	acc := make([]Int16Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int32: []int32->Int32Option */ func MapInt32OptionToInt32ArrArr(m [][]int32, f func([]int32) Int32Option) []Int32Option {
	acc := make([]Int32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int32: []int32->Int64Option */ func MapInt64OptionToInt32ArrArr(m [][]int32, f func([]int32) Int64Option) []Int64Option {
	acc := make([]Int64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int32: []int32->UintOption */ func MapUintOptionToInt32ArrArr(m [][]int32, f func([]int32) UintOption) []UintOption {
	acc := make([]UintOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int32: []int32->Uint8Option */ func MapUint8OptionToInt32ArrArr(m [][]int32, f func([]int32) Uint8Option) []Uint8Option {
	acc := make([]Uint8Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int32: []int32->Uint16Option */ func MapUint16OptionToInt32ArrArr(m [][]int32, f func([]int32) Uint16Option) []Uint16Option {
	acc := make([]Uint16Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int32: []int32->Uint32Option */ func MapUint32OptionToInt32ArrArr(m [][]int32, f func([]int32) Uint32Option) []Uint32Option {
	acc := make([]Uint32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int32: []int32->Uint64Option */ func MapUint64OptionToInt32ArrArr(m [][]int32, f func([]int32) Uint64Option) []Uint64Option {
	acc := make([]Uint64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int32: []int32->UintptrOption */ func MapUintptrOptionToInt32ArrArr(m [][]int32, f func([]int32) UintptrOption) []UintptrOption {
	acc := make([]UintptrOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int32: []int32->ByteOption */ func MapByteOptionToInt32ArrArr(m [][]int32, f func([]int32) ByteOption) []ByteOption {
	acc := make([]ByteOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int32: []int32->RuneOption */ func MapRuneOptionToInt32ArrArr(m [][]int32, f func([]int32) RuneOption) []RuneOption {
	acc := make([]RuneOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int32: []int32->Float32Option */ func MapFloat32OptionToInt32ArrArr(m [][]int32, f func([]int32) Float32Option) []Float32Option {
	acc := make([]Float32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int32: []int32->Float64Option */ func MapFloat64OptionToInt32ArrArr(m [][]int32, f func([]int32) Float64Option) []Float64Option {
	acc := make([]Float64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int32: []int32->Complex64Option */ func MapComplex64OptionToInt32ArrArr(m [][]int32, f func([]int32) Complex64Option) []Complex64Option {
	acc := make([]Complex64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int32: []int32->Complex128Option */ func MapComplex128OptionToInt32ArrArr(m [][]int32, f func([]int32) Complex128Option) []Complex128Option {
	acc := make([]Complex128Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int32: []int32->AnyOption */ func MapAnyOptionToInt32ArrArr(m [][]int32, f func([]int32) AnyOption) []AnyOption {
	acc := make([]AnyOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int32: []int32->[]bool */ func MapBoolArrToInt32ArrArr(m [][]int32, f func([]int32) []bool) [][]bool {
	acc := make([][]bool, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int32: []int32->[]string */ func MapStringArrToInt32ArrArr(m [][]int32, f func([]int32) []string) [][]string {
	acc := make([][]string, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int32: []int32->[]int */ func MapIntArrToInt32ArrArr(m [][]int32, f func([]int32) []int) [][]int {
	acc := make([][]int, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int32: []int32->[]int8 */ func MapInt8ArrToInt32ArrArr(m [][]int32, f func([]int32) []int8) [][]int8 {
	acc := make([][]int8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int32: []int32->[]int16 */ func MapInt16ArrToInt32ArrArr(m [][]int32, f func([]int32) []int16) [][]int16 {
	acc := make([][]int16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int32: []int32->[]int32 */ func MapInt32ArrToInt32ArrArr(m [][]int32, f func([]int32) []int32) [][]int32 {
	acc := make([][]int32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int32: []int32->[]int64 */ func MapInt64ArrToInt32ArrArr(m [][]int32, f func([]int32) []int64) [][]int64 {
	acc := make([][]int64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int32: []int32->[]uint */ func MapUintArrToInt32ArrArr(m [][]int32, f func([]int32) []uint) [][]uint {
	acc := make([][]uint, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int32: []int32->[]uint8 */ func MapUint8ArrToInt32ArrArr(m [][]int32, f func([]int32) []uint8) [][]uint8 {
	acc := make([][]uint8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int32: []int32->[]uint16 */ func MapUint16ArrToInt32ArrArr(m [][]int32, f func([]int32) []uint16) [][]uint16 {
	acc := make([][]uint16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int32: []int32->[]uint32 */ func MapUint32ArrToInt32ArrArr(m [][]int32, f func([]int32) []uint32) [][]uint32 {
	acc := make([][]uint32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int32: []int32->[]uint64 */ func MapUint64ArrToInt32ArrArr(m [][]int32, f func([]int32) []uint64) [][]uint64 {
	acc := make([][]uint64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int32: []int32->[]uintptr */ func MapUintptrArrToInt32ArrArr(m [][]int32, f func([]int32) []uintptr) [][]uintptr {
	acc := make([][]uintptr, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int32: []int32->[]byte */ func MapByteArrToInt32ArrArr(m [][]int32, f func([]int32) []byte) [][]byte {
	acc := make([][]byte, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int32: []int32->[]rune */ func MapRuneArrToInt32ArrArr(m [][]int32, f func([]int32) []rune) [][]rune {
	acc := make([][]rune, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int32: []int32->[]float32 */ func MapFloat32ArrToInt32ArrArr(m [][]int32, f func([]int32) []float32) [][]float32 {
	acc := make([][]float32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int32: []int32->[]float64 */ func MapFloat64ArrToInt32ArrArr(m [][]int32, f func([]int32) []float64) [][]float64 {
	acc := make([][]float64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int32: []int32->[]complex64 */ func MapComplex64ArrToInt32ArrArr(m [][]int32, f func([]int32) []complex64) [][]complex64 {
	acc := make([][]complex64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int32: []int32->[]complex128 */ func MapComplex128ArrToInt32ArrArr(m [][]int32, f func([]int32) []complex128) [][]complex128 {
	acc := make([][]complex128, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int32: []int32->[]Any */ func MapAnyArrToInt32ArrArr(m [][]int32, f func([]int32) []Any) [][]Any {
	acc := make([][]Any, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int32: []int32->BoolList */ func MapBoolListToInt32ArrArr(m [][]int32, f func([]int32) BoolList) []BoolList {
	acc := make([]BoolList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int32: []int32->StringList */ func MapStringListToInt32ArrArr(m [][]int32, f func([]int32) StringList) []StringList {
	acc := make([]StringList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int32: []int32->IntList */ func MapIntListToInt32ArrArr(m [][]int32, f func([]int32) IntList) []IntList {
	acc := make([]IntList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int32: []int32->Int8List */ func MapInt8ListToInt32ArrArr(m [][]int32, f func([]int32) Int8List) []Int8List {
	acc := make([]Int8List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int32: []int32->Int16List */ func MapInt16ListToInt32ArrArr(m [][]int32, f func([]int32) Int16List) []Int16List {
	acc := make([]Int16List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int32: []int32->Int32List */ func MapInt32ListToInt32ArrArr(m [][]int32, f func([]int32) Int32List) []Int32List {
	acc := make([]Int32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int32: []int32->Int64List */ func MapInt64ListToInt32ArrArr(m [][]int32, f func([]int32) Int64List) []Int64List {
	acc := make([]Int64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int32: []int32->UintList */ func MapUintListToInt32ArrArr(m [][]int32, f func([]int32) UintList) []UintList {
	acc := make([]UintList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int32: []int32->Uint8List */ func MapUint8ListToInt32ArrArr(m [][]int32, f func([]int32) Uint8List) []Uint8List {
	acc := make([]Uint8List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int32: []int32->Uint16List */ func MapUint16ListToInt32ArrArr(m [][]int32, f func([]int32) Uint16List) []Uint16List {
	acc := make([]Uint16List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int32: []int32->Uint32List */ func MapUint32ListToInt32ArrArr(m [][]int32, f func([]int32) Uint32List) []Uint32List {
	acc := make([]Uint32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int32: []int32->Uint64List */ func MapUint64ListToInt32ArrArr(m [][]int32, f func([]int32) Uint64List) []Uint64List {
	acc := make([]Uint64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int32: []int32->UintptrList */ func MapUintptrListToInt32ArrArr(m [][]int32, f func([]int32) UintptrList) []UintptrList {
	acc := make([]UintptrList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int32: []int32->ByteList */ func MapByteListToInt32ArrArr(m [][]int32, f func([]int32) ByteList) []ByteList {
	acc := make([]ByteList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int32: []int32->RuneList */ func MapRuneListToInt32ArrArr(m [][]int32, f func([]int32) RuneList) []RuneList {
	acc := make([]RuneList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int32: []int32->Float32List */ func MapFloat32ListToInt32ArrArr(m [][]int32, f func([]int32) Float32List) []Float32List {
	acc := make([]Float32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int32: []int32->Float64List */ func MapFloat64ListToInt32ArrArr(m [][]int32, f func([]int32) Float64List) []Float64List {
	acc := make([]Float64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int32: []int32->Complex64List */ func MapComplex64ListToInt32ArrArr(m [][]int32, f func([]int32) Complex64List) []Complex64List {
	acc := make([]Complex64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int32: []int32->Complex128List */ func MapComplex128ListToInt32ArrArr(m [][]int32, f func([]int32) Complex128List) []Complex128List {
	acc := make([]Complex128List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int32: []int32->AnyList */ func MapAnyListToInt32ArrArr(m [][]int32, f func([]int32) AnyList) []AnyList {
	acc := make([]AnyList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int64: []int64->bool */ func MapBoolToInt64ArrArr(m [][]int64, f func([]int64) bool) []bool {
	acc := make([]bool, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int64: []int64->string */ func MapStringToInt64ArrArr(m [][]int64, f func([]int64) string) []string {
	acc := make([]string, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int64: []int64->int */ func MapIntToInt64ArrArr(m [][]int64, f func([]int64) int) []int {
	acc := make([]int, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int64: []int64->int8 */ func MapInt8ToInt64ArrArr(m [][]int64, f func([]int64) int8) []int8 {
	acc := make([]int8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int64: []int64->int16 */ func MapInt16ToInt64ArrArr(m [][]int64, f func([]int64) int16) []int16 {
	acc := make([]int16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int64: []int64->int32 */ func MapInt32ToInt64ArrArr(m [][]int64, f func([]int64) int32) []int32 {
	acc := make([]int32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int64: []int64->int64 */ func MapInt64ToInt64ArrArr(m [][]int64, f func([]int64) int64) []int64 {
	acc := make([]int64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int64: []int64->uint */ func MapUintToInt64ArrArr(m [][]int64, f func([]int64) uint) []uint {
	acc := make([]uint, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int64: []int64->uint8 */ func MapUint8ToInt64ArrArr(m [][]int64, f func([]int64) uint8) []uint8 {
	acc := make([]uint8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int64: []int64->uint16 */ func MapUint16ToInt64ArrArr(m [][]int64, f func([]int64) uint16) []uint16 {
	acc := make([]uint16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int64: []int64->uint32 */ func MapUint32ToInt64ArrArr(m [][]int64, f func([]int64) uint32) []uint32 {
	acc := make([]uint32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int64: []int64->uint64 */ func MapUint64ToInt64ArrArr(m [][]int64, f func([]int64) uint64) []uint64 {
	acc := make([]uint64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int64: []int64->uintptr */ func MapUintptrToInt64ArrArr(m [][]int64, f func([]int64) uintptr) []uintptr {
	acc := make([]uintptr, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int64: []int64->byte */ func MapByteToInt64ArrArr(m [][]int64, f func([]int64) byte) []byte {
	acc := make([]byte, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int64: []int64->rune */ func MapRuneToInt64ArrArr(m [][]int64, f func([]int64) rune) []rune {
	acc := make([]rune, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int64: []int64->float32 */ func MapFloat32ToInt64ArrArr(m [][]int64, f func([]int64) float32) []float32 {
	acc := make([]float32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int64: []int64->float64 */ func MapFloat64ToInt64ArrArr(m [][]int64, f func([]int64) float64) []float64 {
	acc := make([]float64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int64: []int64->complex64 */ func MapComplex64ToInt64ArrArr(m [][]int64, f func([]int64) complex64) []complex64 {
	acc := make([]complex64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int64: []int64->complex128 */ func MapComplex128ToInt64ArrArr(m [][]int64, f func([]int64) complex128) []complex128 {
	acc := make([]complex128, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int64: []int64->Any */ func MapAnyToInt64ArrArr(m [][]int64, f func([]int64) Any) []Any {
	acc := make([]Any, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int64: []int64->BoolOption */ func MapBoolOptionToInt64ArrArr(m [][]int64, f func([]int64) BoolOption) []BoolOption {
	acc := make([]BoolOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int64: []int64->StringOption */ func MapStringOptionToInt64ArrArr(m [][]int64, f func([]int64) StringOption) []StringOption {
	acc := make([]StringOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int64: []int64->IntOption */ func MapIntOptionToInt64ArrArr(m [][]int64, f func([]int64) IntOption) []IntOption {
	acc := make([]IntOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int64: []int64->Int8Option */ func MapInt8OptionToInt64ArrArr(m [][]int64, f func([]int64) Int8Option) []Int8Option {
	acc := make([]Int8Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int64: []int64->Int16Option */ func MapInt16OptionToInt64ArrArr(m [][]int64, f func([]int64) Int16Option) []Int16Option {
	acc := make([]Int16Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int64: []int64->Int32Option */ func MapInt32OptionToInt64ArrArr(m [][]int64, f func([]int64) Int32Option) []Int32Option {
	acc := make([]Int32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int64: []int64->Int64Option */ func MapInt64OptionToInt64ArrArr(m [][]int64, f func([]int64) Int64Option) []Int64Option {
	acc := make([]Int64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int64: []int64->UintOption */ func MapUintOptionToInt64ArrArr(m [][]int64, f func([]int64) UintOption) []UintOption {
	acc := make([]UintOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int64: []int64->Uint8Option */ func MapUint8OptionToInt64ArrArr(m [][]int64, f func([]int64) Uint8Option) []Uint8Option {
	acc := make([]Uint8Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int64: []int64->Uint16Option */ func MapUint16OptionToInt64ArrArr(m [][]int64, f func([]int64) Uint16Option) []Uint16Option {
	acc := make([]Uint16Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int64: []int64->Uint32Option */ func MapUint32OptionToInt64ArrArr(m [][]int64, f func([]int64) Uint32Option) []Uint32Option {
	acc := make([]Uint32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int64: []int64->Uint64Option */ func MapUint64OptionToInt64ArrArr(m [][]int64, f func([]int64) Uint64Option) []Uint64Option {
	acc := make([]Uint64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int64: []int64->UintptrOption */ func MapUintptrOptionToInt64ArrArr(m [][]int64, f func([]int64) UintptrOption) []UintptrOption {
	acc := make([]UintptrOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int64: []int64->ByteOption */ func MapByteOptionToInt64ArrArr(m [][]int64, f func([]int64) ByteOption) []ByteOption {
	acc := make([]ByteOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int64: []int64->RuneOption */ func MapRuneOptionToInt64ArrArr(m [][]int64, f func([]int64) RuneOption) []RuneOption {
	acc := make([]RuneOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int64: []int64->Float32Option */ func MapFloat32OptionToInt64ArrArr(m [][]int64, f func([]int64) Float32Option) []Float32Option {
	acc := make([]Float32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int64: []int64->Float64Option */ func MapFloat64OptionToInt64ArrArr(m [][]int64, f func([]int64) Float64Option) []Float64Option {
	acc := make([]Float64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int64: []int64->Complex64Option */ func MapComplex64OptionToInt64ArrArr(m [][]int64, f func([]int64) Complex64Option) []Complex64Option {
	acc := make([]Complex64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int64: []int64->Complex128Option */ func MapComplex128OptionToInt64ArrArr(m [][]int64, f func([]int64) Complex128Option) []Complex128Option {
	acc := make([]Complex128Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int64: []int64->AnyOption */ func MapAnyOptionToInt64ArrArr(m [][]int64, f func([]int64) AnyOption) []AnyOption {
	acc := make([]AnyOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int64: []int64->[]bool */ func MapBoolArrToInt64ArrArr(m [][]int64, f func([]int64) []bool) [][]bool {
	acc := make([][]bool, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int64: []int64->[]string */ func MapStringArrToInt64ArrArr(m [][]int64, f func([]int64) []string) [][]string {
	acc := make([][]string, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int64: []int64->[]int */ func MapIntArrToInt64ArrArr(m [][]int64, f func([]int64) []int) [][]int {
	acc := make([][]int, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int64: []int64->[]int8 */ func MapInt8ArrToInt64ArrArr(m [][]int64, f func([]int64) []int8) [][]int8 {
	acc := make([][]int8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int64: []int64->[]int16 */ func MapInt16ArrToInt64ArrArr(m [][]int64, f func([]int64) []int16) [][]int16 {
	acc := make([][]int16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int64: []int64->[]int32 */ func MapInt32ArrToInt64ArrArr(m [][]int64, f func([]int64) []int32) [][]int32 {
	acc := make([][]int32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int64: []int64->[]int64 */ func MapInt64ArrToInt64ArrArr(m [][]int64, f func([]int64) []int64) [][]int64 {
	acc := make([][]int64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int64: []int64->[]uint */ func MapUintArrToInt64ArrArr(m [][]int64, f func([]int64) []uint) [][]uint {
	acc := make([][]uint, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int64: []int64->[]uint8 */ func MapUint8ArrToInt64ArrArr(m [][]int64, f func([]int64) []uint8) [][]uint8 {
	acc := make([][]uint8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int64: []int64->[]uint16 */ func MapUint16ArrToInt64ArrArr(m [][]int64, f func([]int64) []uint16) [][]uint16 {
	acc := make([][]uint16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int64: []int64->[]uint32 */ func MapUint32ArrToInt64ArrArr(m [][]int64, f func([]int64) []uint32) [][]uint32 {
	acc := make([][]uint32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int64: []int64->[]uint64 */ func MapUint64ArrToInt64ArrArr(m [][]int64, f func([]int64) []uint64) [][]uint64 {
	acc := make([][]uint64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int64: []int64->[]uintptr */ func MapUintptrArrToInt64ArrArr(m [][]int64, f func([]int64) []uintptr) [][]uintptr {
	acc := make([][]uintptr, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int64: []int64->[]byte */ func MapByteArrToInt64ArrArr(m [][]int64, f func([]int64) []byte) [][]byte {
	acc := make([][]byte, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int64: []int64->[]rune */ func MapRuneArrToInt64ArrArr(m [][]int64, f func([]int64) []rune) [][]rune {
	acc := make([][]rune, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int64: []int64->[]float32 */ func MapFloat32ArrToInt64ArrArr(m [][]int64, f func([]int64) []float32) [][]float32 {
	acc := make([][]float32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int64: []int64->[]float64 */ func MapFloat64ArrToInt64ArrArr(m [][]int64, f func([]int64) []float64) [][]float64 {
	acc := make([][]float64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int64: []int64->[]complex64 */ func MapComplex64ArrToInt64ArrArr(m [][]int64, f func([]int64) []complex64) [][]complex64 {
	acc := make([][]complex64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int64: []int64->[]complex128 */ func MapComplex128ArrToInt64ArrArr(m [][]int64, f func([]int64) []complex128) [][]complex128 {
	acc := make([][]complex128, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int64: []int64->[]Any */ func MapAnyArrToInt64ArrArr(m [][]int64, f func([]int64) []Any) [][]Any {
	acc := make([][]Any, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int64: []int64->BoolList */ func MapBoolListToInt64ArrArr(m [][]int64, f func([]int64) BoolList) []BoolList {
	acc := make([]BoolList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int64: []int64->StringList */ func MapStringListToInt64ArrArr(m [][]int64, f func([]int64) StringList) []StringList {
	acc := make([]StringList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int64: []int64->IntList */ func MapIntListToInt64ArrArr(m [][]int64, f func([]int64) IntList) []IntList {
	acc := make([]IntList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int64: []int64->Int8List */ func MapInt8ListToInt64ArrArr(m [][]int64, f func([]int64) Int8List) []Int8List {
	acc := make([]Int8List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int64: []int64->Int16List */ func MapInt16ListToInt64ArrArr(m [][]int64, f func([]int64) Int16List) []Int16List {
	acc := make([]Int16List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int64: []int64->Int32List */ func MapInt32ListToInt64ArrArr(m [][]int64, f func([]int64) Int32List) []Int32List {
	acc := make([]Int32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int64: []int64->Int64List */ func MapInt64ListToInt64ArrArr(m [][]int64, f func([]int64) Int64List) []Int64List {
	acc := make([]Int64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int64: []int64->UintList */ func MapUintListToInt64ArrArr(m [][]int64, f func([]int64) UintList) []UintList {
	acc := make([]UintList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int64: []int64->Uint8List */ func MapUint8ListToInt64ArrArr(m [][]int64, f func([]int64) Uint8List) []Uint8List {
	acc := make([]Uint8List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int64: []int64->Uint16List */ func MapUint16ListToInt64ArrArr(m [][]int64, f func([]int64) Uint16List) []Uint16List {
	acc := make([]Uint16List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int64: []int64->Uint32List */ func MapUint32ListToInt64ArrArr(m [][]int64, f func([]int64) Uint32List) []Uint32List {
	acc := make([]Uint32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int64: []int64->Uint64List */ func MapUint64ListToInt64ArrArr(m [][]int64, f func([]int64) Uint64List) []Uint64List {
	acc := make([]Uint64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int64: []int64->UintptrList */ func MapUintptrListToInt64ArrArr(m [][]int64, f func([]int64) UintptrList) []UintptrList {
	acc := make([]UintptrList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int64: []int64->ByteList */ func MapByteListToInt64ArrArr(m [][]int64, f func([]int64) ByteList) []ByteList {
	acc := make([]ByteList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int64: []int64->RuneList */ func MapRuneListToInt64ArrArr(m [][]int64, f func([]int64) RuneList) []RuneList {
	acc := make([]RuneList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int64: []int64->Float32List */ func MapFloat32ListToInt64ArrArr(m [][]int64, f func([]int64) Float32List) []Float32List {
	acc := make([]Float32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int64: []int64->Float64List */ func MapFloat64ListToInt64ArrArr(m [][]int64, f func([]int64) Float64List) []Float64List {
	acc := make([]Float64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int64: []int64->Complex64List */ func MapComplex64ListToInt64ArrArr(m [][]int64, f func([]int64) Complex64List) []Complex64List {
	acc := make([]Complex64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int64: []int64->Complex128List */ func MapComplex128ListToInt64ArrArr(m [][]int64, f func([]int64) Complex128List) []Complex128List {
	acc := make([]Complex128List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]int64: []int64->AnyList */ func MapAnyListToInt64ArrArr(m [][]int64, f func([]int64) AnyList) []AnyList {
	acc := make([]AnyList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint: []uint->bool */ func MapBoolToUintArrArr(m [][]uint, f func([]uint) bool) []bool {
	acc := make([]bool, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint: []uint->string */ func MapStringToUintArrArr(m [][]uint, f func([]uint) string) []string {
	acc := make([]string, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint: []uint->int */ func MapIntToUintArrArr(m [][]uint, f func([]uint) int) []int {
	acc := make([]int, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint: []uint->int8 */ func MapInt8ToUintArrArr(m [][]uint, f func([]uint) int8) []int8 {
	acc := make([]int8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint: []uint->int16 */ func MapInt16ToUintArrArr(m [][]uint, f func([]uint) int16) []int16 {
	acc := make([]int16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint: []uint->int32 */ func MapInt32ToUintArrArr(m [][]uint, f func([]uint) int32) []int32 {
	acc := make([]int32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint: []uint->int64 */ func MapInt64ToUintArrArr(m [][]uint, f func([]uint) int64) []int64 {
	acc := make([]int64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint: []uint->uint */ func MapUintToUintArrArr(m [][]uint, f func([]uint) uint) []uint {
	acc := make([]uint, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint: []uint->uint8 */ func MapUint8ToUintArrArr(m [][]uint, f func([]uint) uint8) []uint8 {
	acc := make([]uint8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint: []uint->uint16 */ func MapUint16ToUintArrArr(m [][]uint, f func([]uint) uint16) []uint16 {
	acc := make([]uint16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint: []uint->uint32 */ func MapUint32ToUintArrArr(m [][]uint, f func([]uint) uint32) []uint32 {
	acc := make([]uint32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint: []uint->uint64 */ func MapUint64ToUintArrArr(m [][]uint, f func([]uint) uint64) []uint64 {
	acc := make([]uint64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint: []uint->uintptr */ func MapUintptrToUintArrArr(m [][]uint, f func([]uint) uintptr) []uintptr {
	acc := make([]uintptr, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint: []uint->byte */ func MapByteToUintArrArr(m [][]uint, f func([]uint) byte) []byte {
	acc := make([]byte, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint: []uint->rune */ func MapRuneToUintArrArr(m [][]uint, f func([]uint) rune) []rune {
	acc := make([]rune, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint: []uint->float32 */ func MapFloat32ToUintArrArr(m [][]uint, f func([]uint) float32) []float32 {
	acc := make([]float32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint: []uint->float64 */ func MapFloat64ToUintArrArr(m [][]uint, f func([]uint) float64) []float64 {
	acc := make([]float64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint: []uint->complex64 */ func MapComplex64ToUintArrArr(m [][]uint, f func([]uint) complex64) []complex64 {
	acc := make([]complex64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint: []uint->complex128 */ func MapComplex128ToUintArrArr(m [][]uint, f func([]uint) complex128) []complex128 {
	acc := make([]complex128, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint: []uint->Any */ func MapAnyToUintArrArr(m [][]uint, f func([]uint) Any) []Any {
	acc := make([]Any, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint: []uint->BoolOption */ func MapBoolOptionToUintArrArr(m [][]uint, f func([]uint) BoolOption) []BoolOption {
	acc := make([]BoolOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint: []uint->StringOption */ func MapStringOptionToUintArrArr(m [][]uint, f func([]uint) StringOption) []StringOption {
	acc := make([]StringOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint: []uint->IntOption */ func MapIntOptionToUintArrArr(m [][]uint, f func([]uint) IntOption) []IntOption {
	acc := make([]IntOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint: []uint->Int8Option */ func MapInt8OptionToUintArrArr(m [][]uint, f func([]uint) Int8Option) []Int8Option {
	acc := make([]Int8Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint: []uint->Int16Option */ func MapInt16OptionToUintArrArr(m [][]uint, f func([]uint) Int16Option) []Int16Option {
	acc := make([]Int16Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint: []uint->Int32Option */ func MapInt32OptionToUintArrArr(m [][]uint, f func([]uint) Int32Option) []Int32Option {
	acc := make([]Int32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint: []uint->Int64Option */ func MapInt64OptionToUintArrArr(m [][]uint, f func([]uint) Int64Option) []Int64Option {
	acc := make([]Int64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint: []uint->UintOption */ func MapUintOptionToUintArrArr(m [][]uint, f func([]uint) UintOption) []UintOption {
	acc := make([]UintOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint: []uint->Uint8Option */ func MapUint8OptionToUintArrArr(m [][]uint, f func([]uint) Uint8Option) []Uint8Option {
	acc := make([]Uint8Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint: []uint->Uint16Option */ func MapUint16OptionToUintArrArr(m [][]uint, f func([]uint) Uint16Option) []Uint16Option {
	acc := make([]Uint16Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint: []uint->Uint32Option */ func MapUint32OptionToUintArrArr(m [][]uint, f func([]uint) Uint32Option) []Uint32Option {
	acc := make([]Uint32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint: []uint->Uint64Option */ func MapUint64OptionToUintArrArr(m [][]uint, f func([]uint) Uint64Option) []Uint64Option {
	acc := make([]Uint64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint: []uint->UintptrOption */ func MapUintptrOptionToUintArrArr(m [][]uint, f func([]uint) UintptrOption) []UintptrOption {
	acc := make([]UintptrOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint: []uint->ByteOption */ func MapByteOptionToUintArrArr(m [][]uint, f func([]uint) ByteOption) []ByteOption {
	acc := make([]ByteOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint: []uint->RuneOption */ func MapRuneOptionToUintArrArr(m [][]uint, f func([]uint) RuneOption) []RuneOption {
	acc := make([]RuneOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint: []uint->Float32Option */ func MapFloat32OptionToUintArrArr(m [][]uint, f func([]uint) Float32Option) []Float32Option {
	acc := make([]Float32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint: []uint->Float64Option */ func MapFloat64OptionToUintArrArr(m [][]uint, f func([]uint) Float64Option) []Float64Option {
	acc := make([]Float64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint: []uint->Complex64Option */ func MapComplex64OptionToUintArrArr(m [][]uint, f func([]uint) Complex64Option) []Complex64Option {
	acc := make([]Complex64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint: []uint->Complex128Option */ func MapComplex128OptionToUintArrArr(m [][]uint, f func([]uint) Complex128Option) []Complex128Option {
	acc := make([]Complex128Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint: []uint->AnyOption */ func MapAnyOptionToUintArrArr(m [][]uint, f func([]uint) AnyOption) []AnyOption {
	acc := make([]AnyOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint: []uint->[]bool */ func MapBoolArrToUintArrArr(m [][]uint, f func([]uint) []bool) [][]bool {
	acc := make([][]bool, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint: []uint->[]string */ func MapStringArrToUintArrArr(m [][]uint, f func([]uint) []string) [][]string {
	acc := make([][]string, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint: []uint->[]int */ func MapIntArrToUintArrArr(m [][]uint, f func([]uint) []int) [][]int {
	acc := make([][]int, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint: []uint->[]int8 */ func MapInt8ArrToUintArrArr(m [][]uint, f func([]uint) []int8) [][]int8 {
	acc := make([][]int8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint: []uint->[]int16 */ func MapInt16ArrToUintArrArr(m [][]uint, f func([]uint) []int16) [][]int16 {
	acc := make([][]int16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint: []uint->[]int32 */ func MapInt32ArrToUintArrArr(m [][]uint, f func([]uint) []int32) [][]int32 {
	acc := make([][]int32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint: []uint->[]int64 */ func MapInt64ArrToUintArrArr(m [][]uint, f func([]uint) []int64) [][]int64 {
	acc := make([][]int64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint: []uint->[]uint */ func MapUintArrToUintArrArr(m [][]uint, f func([]uint) []uint) [][]uint {
	acc := make([][]uint, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint: []uint->[]uint8 */ func MapUint8ArrToUintArrArr(m [][]uint, f func([]uint) []uint8) [][]uint8 {
	acc := make([][]uint8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint: []uint->[]uint16 */ func MapUint16ArrToUintArrArr(m [][]uint, f func([]uint) []uint16) [][]uint16 {
	acc := make([][]uint16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint: []uint->[]uint32 */ func MapUint32ArrToUintArrArr(m [][]uint, f func([]uint) []uint32) [][]uint32 {
	acc := make([][]uint32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint: []uint->[]uint64 */ func MapUint64ArrToUintArrArr(m [][]uint, f func([]uint) []uint64) [][]uint64 {
	acc := make([][]uint64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint: []uint->[]uintptr */ func MapUintptrArrToUintArrArr(m [][]uint, f func([]uint) []uintptr) [][]uintptr {
	acc := make([][]uintptr, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint: []uint->[]byte */ func MapByteArrToUintArrArr(m [][]uint, f func([]uint) []byte) [][]byte {
	acc := make([][]byte, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint: []uint->[]rune */ func MapRuneArrToUintArrArr(m [][]uint, f func([]uint) []rune) [][]rune {
	acc := make([][]rune, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint: []uint->[]float32 */ func MapFloat32ArrToUintArrArr(m [][]uint, f func([]uint) []float32) [][]float32 {
	acc := make([][]float32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint: []uint->[]float64 */ func MapFloat64ArrToUintArrArr(m [][]uint, f func([]uint) []float64) [][]float64 {
	acc := make([][]float64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint: []uint->[]complex64 */ func MapComplex64ArrToUintArrArr(m [][]uint, f func([]uint) []complex64) [][]complex64 {
	acc := make([][]complex64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint: []uint->[]complex128 */ func MapComplex128ArrToUintArrArr(m [][]uint, f func([]uint) []complex128) [][]complex128 {
	acc := make([][]complex128, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint: []uint->[]Any */ func MapAnyArrToUintArrArr(m [][]uint, f func([]uint) []Any) [][]Any {
	acc := make([][]Any, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint: []uint->BoolList */ func MapBoolListToUintArrArr(m [][]uint, f func([]uint) BoolList) []BoolList {
	acc := make([]BoolList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint: []uint->StringList */ func MapStringListToUintArrArr(m [][]uint, f func([]uint) StringList) []StringList {
	acc := make([]StringList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint: []uint->IntList */ func MapIntListToUintArrArr(m [][]uint, f func([]uint) IntList) []IntList {
	acc := make([]IntList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint: []uint->Int8List */ func MapInt8ListToUintArrArr(m [][]uint, f func([]uint) Int8List) []Int8List {
	acc := make([]Int8List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint: []uint->Int16List */ func MapInt16ListToUintArrArr(m [][]uint, f func([]uint) Int16List) []Int16List {
	acc := make([]Int16List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint: []uint->Int32List */ func MapInt32ListToUintArrArr(m [][]uint, f func([]uint) Int32List) []Int32List {
	acc := make([]Int32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint: []uint->Int64List */ func MapInt64ListToUintArrArr(m [][]uint, f func([]uint) Int64List) []Int64List {
	acc := make([]Int64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint: []uint->UintList */ func MapUintListToUintArrArr(m [][]uint, f func([]uint) UintList) []UintList {
	acc := make([]UintList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint: []uint->Uint8List */ func MapUint8ListToUintArrArr(m [][]uint, f func([]uint) Uint8List) []Uint8List {
	acc := make([]Uint8List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint: []uint->Uint16List */ func MapUint16ListToUintArrArr(m [][]uint, f func([]uint) Uint16List) []Uint16List {
	acc := make([]Uint16List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint: []uint->Uint32List */ func MapUint32ListToUintArrArr(m [][]uint, f func([]uint) Uint32List) []Uint32List {
	acc := make([]Uint32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint: []uint->Uint64List */ func MapUint64ListToUintArrArr(m [][]uint, f func([]uint) Uint64List) []Uint64List {
	acc := make([]Uint64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint: []uint->UintptrList */ func MapUintptrListToUintArrArr(m [][]uint, f func([]uint) UintptrList) []UintptrList {
	acc := make([]UintptrList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint: []uint->ByteList */ func MapByteListToUintArrArr(m [][]uint, f func([]uint) ByteList) []ByteList {
	acc := make([]ByteList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint: []uint->RuneList */ func MapRuneListToUintArrArr(m [][]uint, f func([]uint) RuneList) []RuneList {
	acc := make([]RuneList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint: []uint->Float32List */ func MapFloat32ListToUintArrArr(m [][]uint, f func([]uint) Float32List) []Float32List {
	acc := make([]Float32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint: []uint->Float64List */ func MapFloat64ListToUintArrArr(m [][]uint, f func([]uint) Float64List) []Float64List {
	acc := make([]Float64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint: []uint->Complex64List */ func MapComplex64ListToUintArrArr(m [][]uint, f func([]uint) Complex64List) []Complex64List {
	acc := make([]Complex64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint: []uint->Complex128List */ func MapComplex128ListToUintArrArr(m [][]uint, f func([]uint) Complex128List) []Complex128List {
	acc := make([]Complex128List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint: []uint->AnyList */ func MapAnyListToUintArrArr(m [][]uint, f func([]uint) AnyList) []AnyList {
	acc := make([]AnyList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint8: []uint8->bool */ func MapBoolToUint8ArrArr(m [][]uint8, f func([]uint8) bool) []bool {
	acc := make([]bool, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint8: []uint8->string */ func MapStringToUint8ArrArr(m [][]uint8, f func([]uint8) string) []string {
	acc := make([]string, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint8: []uint8->int */ func MapIntToUint8ArrArr(m [][]uint8, f func([]uint8) int) []int {
	acc := make([]int, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint8: []uint8->int8 */ func MapInt8ToUint8ArrArr(m [][]uint8, f func([]uint8) int8) []int8 {
	acc := make([]int8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint8: []uint8->int16 */ func MapInt16ToUint8ArrArr(m [][]uint8, f func([]uint8) int16) []int16 {
	acc := make([]int16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint8: []uint8->int32 */ func MapInt32ToUint8ArrArr(m [][]uint8, f func([]uint8) int32) []int32 {
	acc := make([]int32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint8: []uint8->int64 */ func MapInt64ToUint8ArrArr(m [][]uint8, f func([]uint8) int64) []int64 {
	acc := make([]int64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint8: []uint8->uint */ func MapUintToUint8ArrArr(m [][]uint8, f func([]uint8) uint) []uint {
	acc := make([]uint, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint8: []uint8->uint8 */ func MapUint8ToUint8ArrArr(m [][]uint8, f func([]uint8) uint8) []uint8 {
	acc := make([]uint8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint8: []uint8->uint16 */ func MapUint16ToUint8ArrArr(m [][]uint8, f func([]uint8) uint16) []uint16 {
	acc := make([]uint16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint8: []uint8->uint32 */ func MapUint32ToUint8ArrArr(m [][]uint8, f func([]uint8) uint32) []uint32 {
	acc := make([]uint32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint8: []uint8->uint64 */ func MapUint64ToUint8ArrArr(m [][]uint8, f func([]uint8) uint64) []uint64 {
	acc := make([]uint64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint8: []uint8->uintptr */ func MapUintptrToUint8ArrArr(m [][]uint8, f func([]uint8) uintptr) []uintptr {
	acc := make([]uintptr, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint8: []uint8->byte */ func MapByteToUint8ArrArr(m [][]uint8, f func([]uint8) byte) []byte {
	acc := make([]byte, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint8: []uint8->rune */ func MapRuneToUint8ArrArr(m [][]uint8, f func([]uint8) rune) []rune {
	acc := make([]rune, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint8: []uint8->float32 */ func MapFloat32ToUint8ArrArr(m [][]uint8, f func([]uint8) float32) []float32 {
	acc := make([]float32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint8: []uint8->float64 */ func MapFloat64ToUint8ArrArr(m [][]uint8, f func([]uint8) float64) []float64 {
	acc := make([]float64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint8: []uint8->complex64 */ func MapComplex64ToUint8ArrArr(m [][]uint8, f func([]uint8) complex64) []complex64 {
	acc := make([]complex64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint8: []uint8->complex128 */ func MapComplex128ToUint8ArrArr(m [][]uint8, f func([]uint8) complex128) []complex128 {
	acc := make([]complex128, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint8: []uint8->Any */ func MapAnyToUint8ArrArr(m [][]uint8, f func([]uint8) Any) []Any {
	acc := make([]Any, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint8: []uint8->BoolOption */ func MapBoolOptionToUint8ArrArr(m [][]uint8, f func([]uint8) BoolOption) []BoolOption {
	acc := make([]BoolOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint8: []uint8->StringOption */ func MapStringOptionToUint8ArrArr(m [][]uint8, f func([]uint8) StringOption) []StringOption {
	acc := make([]StringOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint8: []uint8->IntOption */ func MapIntOptionToUint8ArrArr(m [][]uint8, f func([]uint8) IntOption) []IntOption {
	acc := make([]IntOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint8: []uint8->Int8Option */ func MapInt8OptionToUint8ArrArr(m [][]uint8, f func([]uint8) Int8Option) []Int8Option {
	acc := make([]Int8Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint8: []uint8->Int16Option */ func MapInt16OptionToUint8ArrArr(m [][]uint8, f func([]uint8) Int16Option) []Int16Option {
	acc := make([]Int16Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint8: []uint8->Int32Option */ func MapInt32OptionToUint8ArrArr(m [][]uint8, f func([]uint8) Int32Option) []Int32Option {
	acc := make([]Int32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint8: []uint8->Int64Option */ func MapInt64OptionToUint8ArrArr(m [][]uint8, f func([]uint8) Int64Option) []Int64Option {
	acc := make([]Int64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint8: []uint8->UintOption */ func MapUintOptionToUint8ArrArr(m [][]uint8, f func([]uint8) UintOption) []UintOption {
	acc := make([]UintOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint8: []uint8->Uint8Option */ func MapUint8OptionToUint8ArrArr(m [][]uint8, f func([]uint8) Uint8Option) []Uint8Option {
	acc := make([]Uint8Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint8: []uint8->Uint16Option */ func MapUint16OptionToUint8ArrArr(m [][]uint8, f func([]uint8) Uint16Option) []Uint16Option {
	acc := make([]Uint16Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint8: []uint8->Uint32Option */ func MapUint32OptionToUint8ArrArr(m [][]uint8, f func([]uint8) Uint32Option) []Uint32Option {
	acc := make([]Uint32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint8: []uint8->Uint64Option */ func MapUint64OptionToUint8ArrArr(m [][]uint8, f func([]uint8) Uint64Option) []Uint64Option {
	acc := make([]Uint64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint8: []uint8->UintptrOption */ func MapUintptrOptionToUint8ArrArr(m [][]uint8, f func([]uint8) UintptrOption) []UintptrOption {
	acc := make([]UintptrOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint8: []uint8->ByteOption */ func MapByteOptionToUint8ArrArr(m [][]uint8, f func([]uint8) ByteOption) []ByteOption {
	acc := make([]ByteOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint8: []uint8->RuneOption */ func MapRuneOptionToUint8ArrArr(m [][]uint8, f func([]uint8) RuneOption) []RuneOption {
	acc := make([]RuneOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint8: []uint8->Float32Option */ func MapFloat32OptionToUint8ArrArr(m [][]uint8, f func([]uint8) Float32Option) []Float32Option {
	acc := make([]Float32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint8: []uint8->Float64Option */ func MapFloat64OptionToUint8ArrArr(m [][]uint8, f func([]uint8) Float64Option) []Float64Option {
	acc := make([]Float64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint8: []uint8->Complex64Option */ func MapComplex64OptionToUint8ArrArr(m [][]uint8, f func([]uint8) Complex64Option) []Complex64Option {
	acc := make([]Complex64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint8: []uint8->Complex128Option */ func MapComplex128OptionToUint8ArrArr(m [][]uint8, f func([]uint8) Complex128Option) []Complex128Option {
	acc := make([]Complex128Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint8: []uint8->AnyOption */ func MapAnyOptionToUint8ArrArr(m [][]uint8, f func([]uint8) AnyOption) []AnyOption {
	acc := make([]AnyOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint8: []uint8->[]bool */ func MapBoolArrToUint8ArrArr(m [][]uint8, f func([]uint8) []bool) [][]bool {
	acc := make([][]bool, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint8: []uint8->[]string */ func MapStringArrToUint8ArrArr(m [][]uint8, f func([]uint8) []string) [][]string {
	acc := make([][]string, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint8: []uint8->[]int */ func MapIntArrToUint8ArrArr(m [][]uint8, f func([]uint8) []int) [][]int {
	acc := make([][]int, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint8: []uint8->[]int8 */ func MapInt8ArrToUint8ArrArr(m [][]uint8, f func([]uint8) []int8) [][]int8 {
	acc := make([][]int8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint8: []uint8->[]int16 */ func MapInt16ArrToUint8ArrArr(m [][]uint8, f func([]uint8) []int16) [][]int16 {
	acc := make([][]int16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint8: []uint8->[]int32 */ func MapInt32ArrToUint8ArrArr(m [][]uint8, f func([]uint8) []int32) [][]int32 {
	acc := make([][]int32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint8: []uint8->[]int64 */ func MapInt64ArrToUint8ArrArr(m [][]uint8, f func([]uint8) []int64) [][]int64 {
	acc := make([][]int64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint8: []uint8->[]uint */ func MapUintArrToUint8ArrArr(m [][]uint8, f func([]uint8) []uint) [][]uint {
	acc := make([][]uint, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint8: []uint8->[]uint8 */ func MapUint8ArrToUint8ArrArr(m [][]uint8, f func([]uint8) []uint8) [][]uint8 {
	acc := make([][]uint8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint8: []uint8->[]uint16 */ func MapUint16ArrToUint8ArrArr(m [][]uint8, f func([]uint8) []uint16) [][]uint16 {
	acc := make([][]uint16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint8: []uint8->[]uint32 */ func MapUint32ArrToUint8ArrArr(m [][]uint8, f func([]uint8) []uint32) [][]uint32 {
	acc := make([][]uint32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint8: []uint8->[]uint64 */ func MapUint64ArrToUint8ArrArr(m [][]uint8, f func([]uint8) []uint64) [][]uint64 {
	acc := make([][]uint64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint8: []uint8->[]uintptr */ func MapUintptrArrToUint8ArrArr(m [][]uint8, f func([]uint8) []uintptr) [][]uintptr {
	acc := make([][]uintptr, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint8: []uint8->[]byte */ func MapByteArrToUint8ArrArr(m [][]uint8, f func([]uint8) []byte) [][]byte {
	acc := make([][]byte, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint8: []uint8->[]rune */ func MapRuneArrToUint8ArrArr(m [][]uint8, f func([]uint8) []rune) [][]rune {
	acc := make([][]rune, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint8: []uint8->[]float32 */ func MapFloat32ArrToUint8ArrArr(m [][]uint8, f func([]uint8) []float32) [][]float32 {
	acc := make([][]float32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint8: []uint8->[]float64 */ func MapFloat64ArrToUint8ArrArr(m [][]uint8, f func([]uint8) []float64) [][]float64 {
	acc := make([][]float64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint8: []uint8->[]complex64 */ func MapComplex64ArrToUint8ArrArr(m [][]uint8, f func([]uint8) []complex64) [][]complex64 {
	acc := make([][]complex64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint8: []uint8->[]complex128 */ func MapComplex128ArrToUint8ArrArr(m [][]uint8, f func([]uint8) []complex128) [][]complex128 {
	acc := make([][]complex128, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint8: []uint8->[]Any */ func MapAnyArrToUint8ArrArr(m [][]uint8, f func([]uint8) []Any) [][]Any {
	acc := make([][]Any, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint8: []uint8->BoolList */ func MapBoolListToUint8ArrArr(m [][]uint8, f func([]uint8) BoolList) []BoolList {
	acc := make([]BoolList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint8: []uint8->StringList */ func MapStringListToUint8ArrArr(m [][]uint8, f func([]uint8) StringList) []StringList {
	acc := make([]StringList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint8: []uint8->IntList */ func MapIntListToUint8ArrArr(m [][]uint8, f func([]uint8) IntList) []IntList {
	acc := make([]IntList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint8: []uint8->Int8List */ func MapInt8ListToUint8ArrArr(m [][]uint8, f func([]uint8) Int8List) []Int8List {
	acc := make([]Int8List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint8: []uint8->Int16List */ func MapInt16ListToUint8ArrArr(m [][]uint8, f func([]uint8) Int16List) []Int16List {
	acc := make([]Int16List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint8: []uint8->Int32List */ func MapInt32ListToUint8ArrArr(m [][]uint8, f func([]uint8) Int32List) []Int32List {
	acc := make([]Int32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint8: []uint8->Int64List */ func MapInt64ListToUint8ArrArr(m [][]uint8, f func([]uint8) Int64List) []Int64List {
	acc := make([]Int64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint8: []uint8->UintList */ func MapUintListToUint8ArrArr(m [][]uint8, f func([]uint8) UintList) []UintList {
	acc := make([]UintList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint8: []uint8->Uint8List */ func MapUint8ListToUint8ArrArr(m [][]uint8, f func([]uint8) Uint8List) []Uint8List {
	acc := make([]Uint8List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint8: []uint8->Uint16List */ func MapUint16ListToUint8ArrArr(m [][]uint8, f func([]uint8) Uint16List) []Uint16List {
	acc := make([]Uint16List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint8: []uint8->Uint32List */ func MapUint32ListToUint8ArrArr(m [][]uint8, f func([]uint8) Uint32List) []Uint32List {
	acc := make([]Uint32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint8: []uint8->Uint64List */ func MapUint64ListToUint8ArrArr(m [][]uint8, f func([]uint8) Uint64List) []Uint64List {
	acc := make([]Uint64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint8: []uint8->UintptrList */ func MapUintptrListToUint8ArrArr(m [][]uint8, f func([]uint8) UintptrList) []UintptrList {
	acc := make([]UintptrList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint8: []uint8->ByteList */ func MapByteListToUint8ArrArr(m [][]uint8, f func([]uint8) ByteList) []ByteList {
	acc := make([]ByteList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint8: []uint8->RuneList */ func MapRuneListToUint8ArrArr(m [][]uint8, f func([]uint8) RuneList) []RuneList {
	acc := make([]RuneList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint8: []uint8->Float32List */ func MapFloat32ListToUint8ArrArr(m [][]uint8, f func([]uint8) Float32List) []Float32List {
	acc := make([]Float32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint8: []uint8->Float64List */ func MapFloat64ListToUint8ArrArr(m [][]uint8, f func([]uint8) Float64List) []Float64List {
	acc := make([]Float64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint8: []uint8->Complex64List */ func MapComplex64ListToUint8ArrArr(m [][]uint8, f func([]uint8) Complex64List) []Complex64List {
	acc := make([]Complex64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint8: []uint8->Complex128List */ func MapComplex128ListToUint8ArrArr(m [][]uint8, f func([]uint8) Complex128List) []Complex128List {
	acc := make([]Complex128List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint8: []uint8->AnyList */ func MapAnyListToUint8ArrArr(m [][]uint8, f func([]uint8) AnyList) []AnyList {
	acc := make([]AnyList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint16: []uint16->bool */ func MapBoolToUint16ArrArr(m [][]uint16, f func([]uint16) bool) []bool {
	acc := make([]bool, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint16: []uint16->string */ func MapStringToUint16ArrArr(m [][]uint16, f func([]uint16) string) []string {
	acc := make([]string, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint16: []uint16->int */ func MapIntToUint16ArrArr(m [][]uint16, f func([]uint16) int) []int {
	acc := make([]int, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint16: []uint16->int8 */ func MapInt8ToUint16ArrArr(m [][]uint16, f func([]uint16) int8) []int8 {
	acc := make([]int8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint16: []uint16->int16 */ func MapInt16ToUint16ArrArr(m [][]uint16, f func([]uint16) int16) []int16 {
	acc := make([]int16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint16: []uint16->int32 */ func MapInt32ToUint16ArrArr(m [][]uint16, f func([]uint16) int32) []int32 {
	acc := make([]int32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint16: []uint16->int64 */ func MapInt64ToUint16ArrArr(m [][]uint16, f func([]uint16) int64) []int64 {
	acc := make([]int64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint16: []uint16->uint */ func MapUintToUint16ArrArr(m [][]uint16, f func([]uint16) uint) []uint {
	acc := make([]uint, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint16: []uint16->uint8 */ func MapUint8ToUint16ArrArr(m [][]uint16, f func([]uint16) uint8) []uint8 {
	acc := make([]uint8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint16: []uint16->uint16 */ func MapUint16ToUint16ArrArr(m [][]uint16, f func([]uint16) uint16) []uint16 {
	acc := make([]uint16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint16: []uint16->uint32 */ func MapUint32ToUint16ArrArr(m [][]uint16, f func([]uint16) uint32) []uint32 {
	acc := make([]uint32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint16: []uint16->uint64 */ func MapUint64ToUint16ArrArr(m [][]uint16, f func([]uint16) uint64) []uint64 {
	acc := make([]uint64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint16: []uint16->uintptr */ func MapUintptrToUint16ArrArr(m [][]uint16, f func([]uint16) uintptr) []uintptr {
	acc := make([]uintptr, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint16: []uint16->byte */ func MapByteToUint16ArrArr(m [][]uint16, f func([]uint16) byte) []byte {
	acc := make([]byte, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint16: []uint16->rune */ func MapRuneToUint16ArrArr(m [][]uint16, f func([]uint16) rune) []rune {
	acc := make([]rune, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint16: []uint16->float32 */ func MapFloat32ToUint16ArrArr(m [][]uint16, f func([]uint16) float32) []float32 {
	acc := make([]float32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint16: []uint16->float64 */ func MapFloat64ToUint16ArrArr(m [][]uint16, f func([]uint16) float64) []float64 {
	acc := make([]float64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint16: []uint16->complex64 */ func MapComplex64ToUint16ArrArr(m [][]uint16, f func([]uint16) complex64) []complex64 {
	acc := make([]complex64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint16: []uint16->complex128 */ func MapComplex128ToUint16ArrArr(m [][]uint16, f func([]uint16) complex128) []complex128 {
	acc := make([]complex128, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint16: []uint16->Any */ func MapAnyToUint16ArrArr(m [][]uint16, f func([]uint16) Any) []Any {
	acc := make([]Any, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint16: []uint16->BoolOption */ func MapBoolOptionToUint16ArrArr(m [][]uint16, f func([]uint16) BoolOption) []BoolOption {
	acc := make([]BoolOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint16: []uint16->StringOption */ func MapStringOptionToUint16ArrArr(m [][]uint16, f func([]uint16) StringOption) []StringOption {
	acc := make([]StringOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint16: []uint16->IntOption */ func MapIntOptionToUint16ArrArr(m [][]uint16, f func([]uint16) IntOption) []IntOption {
	acc := make([]IntOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint16: []uint16->Int8Option */ func MapInt8OptionToUint16ArrArr(m [][]uint16, f func([]uint16) Int8Option) []Int8Option {
	acc := make([]Int8Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint16: []uint16->Int16Option */ func MapInt16OptionToUint16ArrArr(m [][]uint16, f func([]uint16) Int16Option) []Int16Option {
	acc := make([]Int16Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint16: []uint16->Int32Option */ func MapInt32OptionToUint16ArrArr(m [][]uint16, f func([]uint16) Int32Option) []Int32Option {
	acc := make([]Int32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint16: []uint16->Int64Option */ func MapInt64OptionToUint16ArrArr(m [][]uint16, f func([]uint16) Int64Option) []Int64Option {
	acc := make([]Int64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint16: []uint16->UintOption */ func MapUintOptionToUint16ArrArr(m [][]uint16, f func([]uint16) UintOption) []UintOption {
	acc := make([]UintOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint16: []uint16->Uint8Option */ func MapUint8OptionToUint16ArrArr(m [][]uint16, f func([]uint16) Uint8Option) []Uint8Option {
	acc := make([]Uint8Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint16: []uint16->Uint16Option */ func MapUint16OptionToUint16ArrArr(m [][]uint16, f func([]uint16) Uint16Option) []Uint16Option {
	acc := make([]Uint16Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint16: []uint16->Uint32Option */ func MapUint32OptionToUint16ArrArr(m [][]uint16, f func([]uint16) Uint32Option) []Uint32Option {
	acc := make([]Uint32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint16: []uint16->Uint64Option */ func MapUint64OptionToUint16ArrArr(m [][]uint16, f func([]uint16) Uint64Option) []Uint64Option {
	acc := make([]Uint64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint16: []uint16->UintptrOption */ func MapUintptrOptionToUint16ArrArr(m [][]uint16, f func([]uint16) UintptrOption) []UintptrOption {
	acc := make([]UintptrOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint16: []uint16->ByteOption */ func MapByteOptionToUint16ArrArr(m [][]uint16, f func([]uint16) ByteOption) []ByteOption {
	acc := make([]ByteOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint16: []uint16->RuneOption */ func MapRuneOptionToUint16ArrArr(m [][]uint16, f func([]uint16) RuneOption) []RuneOption {
	acc := make([]RuneOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint16: []uint16->Float32Option */ func MapFloat32OptionToUint16ArrArr(m [][]uint16, f func([]uint16) Float32Option) []Float32Option {
	acc := make([]Float32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint16: []uint16->Float64Option */ func MapFloat64OptionToUint16ArrArr(m [][]uint16, f func([]uint16) Float64Option) []Float64Option {
	acc := make([]Float64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint16: []uint16->Complex64Option */ func MapComplex64OptionToUint16ArrArr(m [][]uint16, f func([]uint16) Complex64Option) []Complex64Option {
	acc := make([]Complex64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint16: []uint16->Complex128Option */ func MapComplex128OptionToUint16ArrArr(m [][]uint16, f func([]uint16) Complex128Option) []Complex128Option {
	acc := make([]Complex128Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint16: []uint16->AnyOption */ func MapAnyOptionToUint16ArrArr(m [][]uint16, f func([]uint16) AnyOption) []AnyOption {
	acc := make([]AnyOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint16: []uint16->[]bool */ func MapBoolArrToUint16ArrArr(m [][]uint16, f func([]uint16) []bool) [][]bool {
	acc := make([][]bool, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint16: []uint16->[]string */ func MapStringArrToUint16ArrArr(m [][]uint16, f func([]uint16) []string) [][]string {
	acc := make([][]string, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint16: []uint16->[]int */ func MapIntArrToUint16ArrArr(m [][]uint16, f func([]uint16) []int) [][]int {
	acc := make([][]int, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint16: []uint16->[]int8 */ func MapInt8ArrToUint16ArrArr(m [][]uint16, f func([]uint16) []int8) [][]int8 {
	acc := make([][]int8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint16: []uint16->[]int16 */ func MapInt16ArrToUint16ArrArr(m [][]uint16, f func([]uint16) []int16) [][]int16 {
	acc := make([][]int16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint16: []uint16->[]int32 */ func MapInt32ArrToUint16ArrArr(m [][]uint16, f func([]uint16) []int32) [][]int32 {
	acc := make([][]int32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint16: []uint16->[]int64 */ func MapInt64ArrToUint16ArrArr(m [][]uint16, f func([]uint16) []int64) [][]int64 {
	acc := make([][]int64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint16: []uint16->[]uint */ func MapUintArrToUint16ArrArr(m [][]uint16, f func([]uint16) []uint) [][]uint {
	acc := make([][]uint, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint16: []uint16->[]uint8 */ func MapUint8ArrToUint16ArrArr(m [][]uint16, f func([]uint16) []uint8) [][]uint8 {
	acc := make([][]uint8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint16: []uint16->[]uint16 */ func MapUint16ArrToUint16ArrArr(m [][]uint16, f func([]uint16) []uint16) [][]uint16 {
	acc := make([][]uint16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint16: []uint16->[]uint32 */ func MapUint32ArrToUint16ArrArr(m [][]uint16, f func([]uint16) []uint32) [][]uint32 {
	acc := make([][]uint32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint16: []uint16->[]uint64 */ func MapUint64ArrToUint16ArrArr(m [][]uint16, f func([]uint16) []uint64) [][]uint64 {
	acc := make([][]uint64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint16: []uint16->[]uintptr */ func MapUintptrArrToUint16ArrArr(m [][]uint16, f func([]uint16) []uintptr) [][]uintptr {
	acc := make([][]uintptr, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint16: []uint16->[]byte */ func MapByteArrToUint16ArrArr(m [][]uint16, f func([]uint16) []byte) [][]byte {
	acc := make([][]byte, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint16: []uint16->[]rune */ func MapRuneArrToUint16ArrArr(m [][]uint16, f func([]uint16) []rune) [][]rune {
	acc := make([][]rune, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint16: []uint16->[]float32 */ func MapFloat32ArrToUint16ArrArr(m [][]uint16, f func([]uint16) []float32) [][]float32 {
	acc := make([][]float32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint16: []uint16->[]float64 */ func MapFloat64ArrToUint16ArrArr(m [][]uint16, f func([]uint16) []float64) [][]float64 {
	acc := make([][]float64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint16: []uint16->[]complex64 */ func MapComplex64ArrToUint16ArrArr(m [][]uint16, f func([]uint16) []complex64) [][]complex64 {
	acc := make([][]complex64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint16: []uint16->[]complex128 */ func MapComplex128ArrToUint16ArrArr(m [][]uint16, f func([]uint16) []complex128) [][]complex128 {
	acc := make([][]complex128, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint16: []uint16->[]Any */ func MapAnyArrToUint16ArrArr(m [][]uint16, f func([]uint16) []Any) [][]Any {
	acc := make([][]Any, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint16: []uint16->BoolList */ func MapBoolListToUint16ArrArr(m [][]uint16, f func([]uint16) BoolList) []BoolList {
	acc := make([]BoolList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint16: []uint16->StringList */ func MapStringListToUint16ArrArr(m [][]uint16, f func([]uint16) StringList) []StringList {
	acc := make([]StringList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint16: []uint16->IntList */ func MapIntListToUint16ArrArr(m [][]uint16, f func([]uint16) IntList) []IntList {
	acc := make([]IntList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint16: []uint16->Int8List */ func MapInt8ListToUint16ArrArr(m [][]uint16, f func([]uint16) Int8List) []Int8List {
	acc := make([]Int8List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint16: []uint16->Int16List */ func MapInt16ListToUint16ArrArr(m [][]uint16, f func([]uint16) Int16List) []Int16List {
	acc := make([]Int16List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint16: []uint16->Int32List */ func MapInt32ListToUint16ArrArr(m [][]uint16, f func([]uint16) Int32List) []Int32List {
	acc := make([]Int32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint16: []uint16->Int64List */ func MapInt64ListToUint16ArrArr(m [][]uint16, f func([]uint16) Int64List) []Int64List {
	acc := make([]Int64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint16: []uint16->UintList */ func MapUintListToUint16ArrArr(m [][]uint16, f func([]uint16) UintList) []UintList {
	acc := make([]UintList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint16: []uint16->Uint8List */ func MapUint8ListToUint16ArrArr(m [][]uint16, f func([]uint16) Uint8List) []Uint8List {
	acc := make([]Uint8List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint16: []uint16->Uint16List */ func MapUint16ListToUint16ArrArr(m [][]uint16, f func([]uint16) Uint16List) []Uint16List {
	acc := make([]Uint16List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint16: []uint16->Uint32List */ func MapUint32ListToUint16ArrArr(m [][]uint16, f func([]uint16) Uint32List) []Uint32List {
	acc := make([]Uint32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint16: []uint16->Uint64List */ func MapUint64ListToUint16ArrArr(m [][]uint16, f func([]uint16) Uint64List) []Uint64List {
	acc := make([]Uint64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint16: []uint16->UintptrList */ func MapUintptrListToUint16ArrArr(m [][]uint16, f func([]uint16) UintptrList) []UintptrList {
	acc := make([]UintptrList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint16: []uint16->ByteList */ func MapByteListToUint16ArrArr(m [][]uint16, f func([]uint16) ByteList) []ByteList {
	acc := make([]ByteList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint16: []uint16->RuneList */ func MapRuneListToUint16ArrArr(m [][]uint16, f func([]uint16) RuneList) []RuneList {
	acc := make([]RuneList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint16: []uint16->Float32List */ func MapFloat32ListToUint16ArrArr(m [][]uint16, f func([]uint16) Float32List) []Float32List {
	acc := make([]Float32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint16: []uint16->Float64List */ func MapFloat64ListToUint16ArrArr(m [][]uint16, f func([]uint16) Float64List) []Float64List {
	acc := make([]Float64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint16: []uint16->Complex64List */ func MapComplex64ListToUint16ArrArr(m [][]uint16, f func([]uint16) Complex64List) []Complex64List {
	acc := make([]Complex64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint16: []uint16->Complex128List */ func MapComplex128ListToUint16ArrArr(m [][]uint16, f func([]uint16) Complex128List) []Complex128List {
	acc := make([]Complex128List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint16: []uint16->AnyList */ func MapAnyListToUint16ArrArr(m [][]uint16, f func([]uint16) AnyList) []AnyList {
	acc := make([]AnyList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint32: []uint32->bool */ func MapBoolToUint32ArrArr(m [][]uint32, f func([]uint32) bool) []bool {
	acc := make([]bool, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint32: []uint32->string */ func MapStringToUint32ArrArr(m [][]uint32, f func([]uint32) string) []string {
	acc := make([]string, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint32: []uint32->int */ func MapIntToUint32ArrArr(m [][]uint32, f func([]uint32) int) []int {
	acc := make([]int, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint32: []uint32->int8 */ func MapInt8ToUint32ArrArr(m [][]uint32, f func([]uint32) int8) []int8 {
	acc := make([]int8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint32: []uint32->int16 */ func MapInt16ToUint32ArrArr(m [][]uint32, f func([]uint32) int16) []int16 {
	acc := make([]int16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint32: []uint32->int32 */ func MapInt32ToUint32ArrArr(m [][]uint32, f func([]uint32) int32) []int32 {
	acc := make([]int32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint32: []uint32->int64 */ func MapInt64ToUint32ArrArr(m [][]uint32, f func([]uint32) int64) []int64 {
	acc := make([]int64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint32: []uint32->uint */ func MapUintToUint32ArrArr(m [][]uint32, f func([]uint32) uint) []uint {
	acc := make([]uint, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint32: []uint32->uint8 */ func MapUint8ToUint32ArrArr(m [][]uint32, f func([]uint32) uint8) []uint8 {
	acc := make([]uint8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint32: []uint32->uint16 */ func MapUint16ToUint32ArrArr(m [][]uint32, f func([]uint32) uint16) []uint16 {
	acc := make([]uint16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint32: []uint32->uint32 */ func MapUint32ToUint32ArrArr(m [][]uint32, f func([]uint32) uint32) []uint32 {
	acc := make([]uint32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint32: []uint32->uint64 */ func MapUint64ToUint32ArrArr(m [][]uint32, f func([]uint32) uint64) []uint64 {
	acc := make([]uint64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint32: []uint32->uintptr */ func MapUintptrToUint32ArrArr(m [][]uint32, f func([]uint32) uintptr) []uintptr {
	acc := make([]uintptr, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint32: []uint32->byte */ func MapByteToUint32ArrArr(m [][]uint32, f func([]uint32) byte) []byte {
	acc := make([]byte, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint32: []uint32->rune */ func MapRuneToUint32ArrArr(m [][]uint32, f func([]uint32) rune) []rune {
	acc := make([]rune, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint32: []uint32->float32 */ func MapFloat32ToUint32ArrArr(m [][]uint32, f func([]uint32) float32) []float32 {
	acc := make([]float32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint32: []uint32->float64 */ func MapFloat64ToUint32ArrArr(m [][]uint32, f func([]uint32) float64) []float64 {
	acc := make([]float64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint32: []uint32->complex64 */ func MapComplex64ToUint32ArrArr(m [][]uint32, f func([]uint32) complex64) []complex64 {
	acc := make([]complex64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint32: []uint32->complex128 */ func MapComplex128ToUint32ArrArr(m [][]uint32, f func([]uint32) complex128) []complex128 {
	acc := make([]complex128, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint32: []uint32->Any */ func MapAnyToUint32ArrArr(m [][]uint32, f func([]uint32) Any) []Any {
	acc := make([]Any, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint32: []uint32->BoolOption */ func MapBoolOptionToUint32ArrArr(m [][]uint32, f func([]uint32) BoolOption) []BoolOption {
	acc := make([]BoolOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint32: []uint32->StringOption */ func MapStringOptionToUint32ArrArr(m [][]uint32, f func([]uint32) StringOption) []StringOption {
	acc := make([]StringOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint32: []uint32->IntOption */ func MapIntOptionToUint32ArrArr(m [][]uint32, f func([]uint32) IntOption) []IntOption {
	acc := make([]IntOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint32: []uint32->Int8Option */ func MapInt8OptionToUint32ArrArr(m [][]uint32, f func([]uint32) Int8Option) []Int8Option {
	acc := make([]Int8Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint32: []uint32->Int16Option */ func MapInt16OptionToUint32ArrArr(m [][]uint32, f func([]uint32) Int16Option) []Int16Option {
	acc := make([]Int16Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint32: []uint32->Int32Option */ func MapInt32OptionToUint32ArrArr(m [][]uint32, f func([]uint32) Int32Option) []Int32Option {
	acc := make([]Int32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint32: []uint32->Int64Option */ func MapInt64OptionToUint32ArrArr(m [][]uint32, f func([]uint32) Int64Option) []Int64Option {
	acc := make([]Int64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint32: []uint32->UintOption */ func MapUintOptionToUint32ArrArr(m [][]uint32, f func([]uint32) UintOption) []UintOption {
	acc := make([]UintOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint32: []uint32->Uint8Option */ func MapUint8OptionToUint32ArrArr(m [][]uint32, f func([]uint32) Uint8Option) []Uint8Option {
	acc := make([]Uint8Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint32: []uint32->Uint16Option */ func MapUint16OptionToUint32ArrArr(m [][]uint32, f func([]uint32) Uint16Option) []Uint16Option {
	acc := make([]Uint16Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint32: []uint32->Uint32Option */ func MapUint32OptionToUint32ArrArr(m [][]uint32, f func([]uint32) Uint32Option) []Uint32Option {
	acc := make([]Uint32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint32: []uint32->Uint64Option */ func MapUint64OptionToUint32ArrArr(m [][]uint32, f func([]uint32) Uint64Option) []Uint64Option {
	acc := make([]Uint64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint32: []uint32->UintptrOption */ func MapUintptrOptionToUint32ArrArr(m [][]uint32, f func([]uint32) UintptrOption) []UintptrOption {
	acc := make([]UintptrOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint32: []uint32->ByteOption */ func MapByteOptionToUint32ArrArr(m [][]uint32, f func([]uint32) ByteOption) []ByteOption {
	acc := make([]ByteOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint32: []uint32->RuneOption */ func MapRuneOptionToUint32ArrArr(m [][]uint32, f func([]uint32) RuneOption) []RuneOption {
	acc := make([]RuneOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint32: []uint32->Float32Option */ func MapFloat32OptionToUint32ArrArr(m [][]uint32, f func([]uint32) Float32Option) []Float32Option {
	acc := make([]Float32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint32: []uint32->Float64Option */ func MapFloat64OptionToUint32ArrArr(m [][]uint32, f func([]uint32) Float64Option) []Float64Option {
	acc := make([]Float64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint32: []uint32->Complex64Option */ func MapComplex64OptionToUint32ArrArr(m [][]uint32, f func([]uint32) Complex64Option) []Complex64Option {
	acc := make([]Complex64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint32: []uint32->Complex128Option */ func MapComplex128OptionToUint32ArrArr(m [][]uint32, f func([]uint32) Complex128Option) []Complex128Option {
	acc := make([]Complex128Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint32: []uint32->AnyOption */ func MapAnyOptionToUint32ArrArr(m [][]uint32, f func([]uint32) AnyOption) []AnyOption {
	acc := make([]AnyOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint32: []uint32->[]bool */ func MapBoolArrToUint32ArrArr(m [][]uint32, f func([]uint32) []bool) [][]bool {
	acc := make([][]bool, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint32: []uint32->[]string */ func MapStringArrToUint32ArrArr(m [][]uint32, f func([]uint32) []string) [][]string {
	acc := make([][]string, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint32: []uint32->[]int */ func MapIntArrToUint32ArrArr(m [][]uint32, f func([]uint32) []int) [][]int {
	acc := make([][]int, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint32: []uint32->[]int8 */ func MapInt8ArrToUint32ArrArr(m [][]uint32, f func([]uint32) []int8) [][]int8 {
	acc := make([][]int8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint32: []uint32->[]int16 */ func MapInt16ArrToUint32ArrArr(m [][]uint32, f func([]uint32) []int16) [][]int16 {
	acc := make([][]int16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint32: []uint32->[]int32 */ func MapInt32ArrToUint32ArrArr(m [][]uint32, f func([]uint32) []int32) [][]int32 {
	acc := make([][]int32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint32: []uint32->[]int64 */ func MapInt64ArrToUint32ArrArr(m [][]uint32, f func([]uint32) []int64) [][]int64 {
	acc := make([][]int64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint32: []uint32->[]uint */ func MapUintArrToUint32ArrArr(m [][]uint32, f func([]uint32) []uint) [][]uint {
	acc := make([][]uint, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint32: []uint32->[]uint8 */ func MapUint8ArrToUint32ArrArr(m [][]uint32, f func([]uint32) []uint8) [][]uint8 {
	acc := make([][]uint8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint32: []uint32->[]uint16 */ func MapUint16ArrToUint32ArrArr(m [][]uint32, f func([]uint32) []uint16) [][]uint16 {
	acc := make([][]uint16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint32: []uint32->[]uint32 */ func MapUint32ArrToUint32ArrArr(m [][]uint32, f func([]uint32) []uint32) [][]uint32 {
	acc := make([][]uint32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint32: []uint32->[]uint64 */ func MapUint64ArrToUint32ArrArr(m [][]uint32, f func([]uint32) []uint64) [][]uint64 {
	acc := make([][]uint64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint32: []uint32->[]uintptr */ func MapUintptrArrToUint32ArrArr(m [][]uint32, f func([]uint32) []uintptr) [][]uintptr {
	acc := make([][]uintptr, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint32: []uint32->[]byte */ func MapByteArrToUint32ArrArr(m [][]uint32, f func([]uint32) []byte) [][]byte {
	acc := make([][]byte, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint32: []uint32->[]rune */ func MapRuneArrToUint32ArrArr(m [][]uint32, f func([]uint32) []rune) [][]rune {
	acc := make([][]rune, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint32: []uint32->[]float32 */ func MapFloat32ArrToUint32ArrArr(m [][]uint32, f func([]uint32) []float32) [][]float32 {
	acc := make([][]float32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint32: []uint32->[]float64 */ func MapFloat64ArrToUint32ArrArr(m [][]uint32, f func([]uint32) []float64) [][]float64 {
	acc := make([][]float64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint32: []uint32->[]complex64 */ func MapComplex64ArrToUint32ArrArr(m [][]uint32, f func([]uint32) []complex64) [][]complex64 {
	acc := make([][]complex64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint32: []uint32->[]complex128 */ func MapComplex128ArrToUint32ArrArr(m [][]uint32, f func([]uint32) []complex128) [][]complex128 {
	acc := make([][]complex128, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint32: []uint32->[]Any */ func MapAnyArrToUint32ArrArr(m [][]uint32, f func([]uint32) []Any) [][]Any {
	acc := make([][]Any, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint32: []uint32->BoolList */ func MapBoolListToUint32ArrArr(m [][]uint32, f func([]uint32) BoolList) []BoolList {
	acc := make([]BoolList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint32: []uint32->StringList */ func MapStringListToUint32ArrArr(m [][]uint32, f func([]uint32) StringList) []StringList {
	acc := make([]StringList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint32: []uint32->IntList */ func MapIntListToUint32ArrArr(m [][]uint32, f func([]uint32) IntList) []IntList {
	acc := make([]IntList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint32: []uint32->Int8List */ func MapInt8ListToUint32ArrArr(m [][]uint32, f func([]uint32) Int8List) []Int8List {
	acc := make([]Int8List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint32: []uint32->Int16List */ func MapInt16ListToUint32ArrArr(m [][]uint32, f func([]uint32) Int16List) []Int16List {
	acc := make([]Int16List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint32: []uint32->Int32List */ func MapInt32ListToUint32ArrArr(m [][]uint32, f func([]uint32) Int32List) []Int32List {
	acc := make([]Int32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint32: []uint32->Int64List */ func MapInt64ListToUint32ArrArr(m [][]uint32, f func([]uint32) Int64List) []Int64List {
	acc := make([]Int64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint32: []uint32->UintList */ func MapUintListToUint32ArrArr(m [][]uint32, f func([]uint32) UintList) []UintList {
	acc := make([]UintList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint32: []uint32->Uint8List */ func MapUint8ListToUint32ArrArr(m [][]uint32, f func([]uint32) Uint8List) []Uint8List {
	acc := make([]Uint8List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint32: []uint32->Uint16List */ func MapUint16ListToUint32ArrArr(m [][]uint32, f func([]uint32) Uint16List) []Uint16List {
	acc := make([]Uint16List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint32: []uint32->Uint32List */ func MapUint32ListToUint32ArrArr(m [][]uint32, f func([]uint32) Uint32List) []Uint32List {
	acc := make([]Uint32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint32: []uint32->Uint64List */ func MapUint64ListToUint32ArrArr(m [][]uint32, f func([]uint32) Uint64List) []Uint64List {
	acc := make([]Uint64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint32: []uint32->UintptrList */ func MapUintptrListToUint32ArrArr(m [][]uint32, f func([]uint32) UintptrList) []UintptrList {
	acc := make([]UintptrList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint32: []uint32->ByteList */ func MapByteListToUint32ArrArr(m [][]uint32, f func([]uint32) ByteList) []ByteList {
	acc := make([]ByteList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint32: []uint32->RuneList */ func MapRuneListToUint32ArrArr(m [][]uint32, f func([]uint32) RuneList) []RuneList {
	acc := make([]RuneList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint32: []uint32->Float32List */ func MapFloat32ListToUint32ArrArr(m [][]uint32, f func([]uint32) Float32List) []Float32List {
	acc := make([]Float32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint32: []uint32->Float64List */ func MapFloat64ListToUint32ArrArr(m [][]uint32, f func([]uint32) Float64List) []Float64List {
	acc := make([]Float64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint32: []uint32->Complex64List */ func MapComplex64ListToUint32ArrArr(m [][]uint32, f func([]uint32) Complex64List) []Complex64List {
	acc := make([]Complex64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint32: []uint32->Complex128List */ func MapComplex128ListToUint32ArrArr(m [][]uint32, f func([]uint32) Complex128List) []Complex128List {
	acc := make([]Complex128List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint32: []uint32->AnyList */ func MapAnyListToUint32ArrArr(m [][]uint32, f func([]uint32) AnyList) []AnyList {
	acc := make([]AnyList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint64: []uint64->bool */ func MapBoolToUint64ArrArr(m [][]uint64, f func([]uint64) bool) []bool {
	acc := make([]bool, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint64: []uint64->string */ func MapStringToUint64ArrArr(m [][]uint64, f func([]uint64) string) []string {
	acc := make([]string, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint64: []uint64->int */ func MapIntToUint64ArrArr(m [][]uint64, f func([]uint64) int) []int {
	acc := make([]int, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint64: []uint64->int8 */ func MapInt8ToUint64ArrArr(m [][]uint64, f func([]uint64) int8) []int8 {
	acc := make([]int8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint64: []uint64->int16 */ func MapInt16ToUint64ArrArr(m [][]uint64, f func([]uint64) int16) []int16 {
	acc := make([]int16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint64: []uint64->int32 */ func MapInt32ToUint64ArrArr(m [][]uint64, f func([]uint64) int32) []int32 {
	acc := make([]int32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint64: []uint64->int64 */ func MapInt64ToUint64ArrArr(m [][]uint64, f func([]uint64) int64) []int64 {
	acc := make([]int64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint64: []uint64->uint */ func MapUintToUint64ArrArr(m [][]uint64, f func([]uint64) uint) []uint {
	acc := make([]uint, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint64: []uint64->uint8 */ func MapUint8ToUint64ArrArr(m [][]uint64, f func([]uint64) uint8) []uint8 {
	acc := make([]uint8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint64: []uint64->uint16 */ func MapUint16ToUint64ArrArr(m [][]uint64, f func([]uint64) uint16) []uint16 {
	acc := make([]uint16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint64: []uint64->uint32 */ func MapUint32ToUint64ArrArr(m [][]uint64, f func([]uint64) uint32) []uint32 {
	acc := make([]uint32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint64: []uint64->uint64 */ func MapUint64ToUint64ArrArr(m [][]uint64, f func([]uint64) uint64) []uint64 {
	acc := make([]uint64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint64: []uint64->uintptr */ func MapUintptrToUint64ArrArr(m [][]uint64, f func([]uint64) uintptr) []uintptr {
	acc := make([]uintptr, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint64: []uint64->byte */ func MapByteToUint64ArrArr(m [][]uint64, f func([]uint64) byte) []byte {
	acc := make([]byte, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint64: []uint64->rune */ func MapRuneToUint64ArrArr(m [][]uint64, f func([]uint64) rune) []rune {
	acc := make([]rune, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint64: []uint64->float32 */ func MapFloat32ToUint64ArrArr(m [][]uint64, f func([]uint64) float32) []float32 {
	acc := make([]float32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint64: []uint64->float64 */ func MapFloat64ToUint64ArrArr(m [][]uint64, f func([]uint64) float64) []float64 {
	acc := make([]float64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint64: []uint64->complex64 */ func MapComplex64ToUint64ArrArr(m [][]uint64, f func([]uint64) complex64) []complex64 {
	acc := make([]complex64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint64: []uint64->complex128 */ func MapComplex128ToUint64ArrArr(m [][]uint64, f func([]uint64) complex128) []complex128 {
	acc := make([]complex128, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint64: []uint64->Any */ func MapAnyToUint64ArrArr(m [][]uint64, f func([]uint64) Any) []Any {
	acc := make([]Any, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint64: []uint64->BoolOption */ func MapBoolOptionToUint64ArrArr(m [][]uint64, f func([]uint64) BoolOption) []BoolOption {
	acc := make([]BoolOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint64: []uint64->StringOption */ func MapStringOptionToUint64ArrArr(m [][]uint64, f func([]uint64) StringOption) []StringOption {
	acc := make([]StringOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint64: []uint64->IntOption */ func MapIntOptionToUint64ArrArr(m [][]uint64, f func([]uint64) IntOption) []IntOption {
	acc := make([]IntOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint64: []uint64->Int8Option */ func MapInt8OptionToUint64ArrArr(m [][]uint64, f func([]uint64) Int8Option) []Int8Option {
	acc := make([]Int8Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint64: []uint64->Int16Option */ func MapInt16OptionToUint64ArrArr(m [][]uint64, f func([]uint64) Int16Option) []Int16Option {
	acc := make([]Int16Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint64: []uint64->Int32Option */ func MapInt32OptionToUint64ArrArr(m [][]uint64, f func([]uint64) Int32Option) []Int32Option {
	acc := make([]Int32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint64: []uint64->Int64Option */ func MapInt64OptionToUint64ArrArr(m [][]uint64, f func([]uint64) Int64Option) []Int64Option {
	acc := make([]Int64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint64: []uint64->UintOption */ func MapUintOptionToUint64ArrArr(m [][]uint64, f func([]uint64) UintOption) []UintOption {
	acc := make([]UintOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint64: []uint64->Uint8Option */ func MapUint8OptionToUint64ArrArr(m [][]uint64, f func([]uint64) Uint8Option) []Uint8Option {
	acc := make([]Uint8Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint64: []uint64->Uint16Option */ func MapUint16OptionToUint64ArrArr(m [][]uint64, f func([]uint64) Uint16Option) []Uint16Option {
	acc := make([]Uint16Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint64: []uint64->Uint32Option */ func MapUint32OptionToUint64ArrArr(m [][]uint64, f func([]uint64) Uint32Option) []Uint32Option {
	acc := make([]Uint32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint64: []uint64->Uint64Option */ func MapUint64OptionToUint64ArrArr(m [][]uint64, f func([]uint64) Uint64Option) []Uint64Option {
	acc := make([]Uint64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint64: []uint64->UintptrOption */ func MapUintptrOptionToUint64ArrArr(m [][]uint64, f func([]uint64) UintptrOption) []UintptrOption {
	acc := make([]UintptrOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint64: []uint64->ByteOption */ func MapByteOptionToUint64ArrArr(m [][]uint64, f func([]uint64) ByteOption) []ByteOption {
	acc := make([]ByteOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint64: []uint64->RuneOption */ func MapRuneOptionToUint64ArrArr(m [][]uint64, f func([]uint64) RuneOption) []RuneOption {
	acc := make([]RuneOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint64: []uint64->Float32Option */ func MapFloat32OptionToUint64ArrArr(m [][]uint64, f func([]uint64) Float32Option) []Float32Option {
	acc := make([]Float32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint64: []uint64->Float64Option */ func MapFloat64OptionToUint64ArrArr(m [][]uint64, f func([]uint64) Float64Option) []Float64Option {
	acc := make([]Float64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint64: []uint64->Complex64Option */ func MapComplex64OptionToUint64ArrArr(m [][]uint64, f func([]uint64) Complex64Option) []Complex64Option {
	acc := make([]Complex64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint64: []uint64->Complex128Option */ func MapComplex128OptionToUint64ArrArr(m [][]uint64, f func([]uint64) Complex128Option) []Complex128Option {
	acc := make([]Complex128Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint64: []uint64->AnyOption */ func MapAnyOptionToUint64ArrArr(m [][]uint64, f func([]uint64) AnyOption) []AnyOption {
	acc := make([]AnyOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint64: []uint64->[]bool */ func MapBoolArrToUint64ArrArr(m [][]uint64, f func([]uint64) []bool) [][]bool {
	acc := make([][]bool, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint64: []uint64->[]string */ func MapStringArrToUint64ArrArr(m [][]uint64, f func([]uint64) []string) [][]string {
	acc := make([][]string, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint64: []uint64->[]int */ func MapIntArrToUint64ArrArr(m [][]uint64, f func([]uint64) []int) [][]int {
	acc := make([][]int, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint64: []uint64->[]int8 */ func MapInt8ArrToUint64ArrArr(m [][]uint64, f func([]uint64) []int8) [][]int8 {
	acc := make([][]int8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint64: []uint64->[]int16 */ func MapInt16ArrToUint64ArrArr(m [][]uint64, f func([]uint64) []int16) [][]int16 {
	acc := make([][]int16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint64: []uint64->[]int32 */ func MapInt32ArrToUint64ArrArr(m [][]uint64, f func([]uint64) []int32) [][]int32 {
	acc := make([][]int32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint64: []uint64->[]int64 */ func MapInt64ArrToUint64ArrArr(m [][]uint64, f func([]uint64) []int64) [][]int64 {
	acc := make([][]int64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint64: []uint64->[]uint */ func MapUintArrToUint64ArrArr(m [][]uint64, f func([]uint64) []uint) [][]uint {
	acc := make([][]uint, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint64: []uint64->[]uint8 */ func MapUint8ArrToUint64ArrArr(m [][]uint64, f func([]uint64) []uint8) [][]uint8 {
	acc := make([][]uint8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint64: []uint64->[]uint16 */ func MapUint16ArrToUint64ArrArr(m [][]uint64, f func([]uint64) []uint16) [][]uint16 {
	acc := make([][]uint16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint64: []uint64->[]uint32 */ func MapUint32ArrToUint64ArrArr(m [][]uint64, f func([]uint64) []uint32) [][]uint32 {
	acc := make([][]uint32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint64: []uint64->[]uint64 */ func MapUint64ArrToUint64ArrArr(m [][]uint64, f func([]uint64) []uint64) [][]uint64 {
	acc := make([][]uint64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint64: []uint64->[]uintptr */ func MapUintptrArrToUint64ArrArr(m [][]uint64, f func([]uint64) []uintptr) [][]uintptr {
	acc := make([][]uintptr, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint64: []uint64->[]byte */ func MapByteArrToUint64ArrArr(m [][]uint64, f func([]uint64) []byte) [][]byte {
	acc := make([][]byte, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint64: []uint64->[]rune */ func MapRuneArrToUint64ArrArr(m [][]uint64, f func([]uint64) []rune) [][]rune {
	acc := make([][]rune, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint64: []uint64->[]float32 */ func MapFloat32ArrToUint64ArrArr(m [][]uint64, f func([]uint64) []float32) [][]float32 {
	acc := make([][]float32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint64: []uint64->[]float64 */ func MapFloat64ArrToUint64ArrArr(m [][]uint64, f func([]uint64) []float64) [][]float64 {
	acc := make([][]float64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint64: []uint64->[]complex64 */ func MapComplex64ArrToUint64ArrArr(m [][]uint64, f func([]uint64) []complex64) [][]complex64 {
	acc := make([][]complex64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint64: []uint64->[]complex128 */ func MapComplex128ArrToUint64ArrArr(m [][]uint64, f func([]uint64) []complex128) [][]complex128 {
	acc := make([][]complex128, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint64: []uint64->[]Any */ func MapAnyArrToUint64ArrArr(m [][]uint64, f func([]uint64) []Any) [][]Any {
	acc := make([][]Any, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint64: []uint64->BoolList */ func MapBoolListToUint64ArrArr(m [][]uint64, f func([]uint64) BoolList) []BoolList {
	acc := make([]BoolList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint64: []uint64->StringList */ func MapStringListToUint64ArrArr(m [][]uint64, f func([]uint64) StringList) []StringList {
	acc := make([]StringList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint64: []uint64->IntList */ func MapIntListToUint64ArrArr(m [][]uint64, f func([]uint64) IntList) []IntList {
	acc := make([]IntList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint64: []uint64->Int8List */ func MapInt8ListToUint64ArrArr(m [][]uint64, f func([]uint64) Int8List) []Int8List {
	acc := make([]Int8List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint64: []uint64->Int16List */ func MapInt16ListToUint64ArrArr(m [][]uint64, f func([]uint64) Int16List) []Int16List {
	acc := make([]Int16List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint64: []uint64->Int32List */ func MapInt32ListToUint64ArrArr(m [][]uint64, f func([]uint64) Int32List) []Int32List {
	acc := make([]Int32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint64: []uint64->Int64List */ func MapInt64ListToUint64ArrArr(m [][]uint64, f func([]uint64) Int64List) []Int64List {
	acc := make([]Int64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint64: []uint64->UintList */ func MapUintListToUint64ArrArr(m [][]uint64, f func([]uint64) UintList) []UintList {
	acc := make([]UintList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint64: []uint64->Uint8List */ func MapUint8ListToUint64ArrArr(m [][]uint64, f func([]uint64) Uint8List) []Uint8List {
	acc := make([]Uint8List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint64: []uint64->Uint16List */ func MapUint16ListToUint64ArrArr(m [][]uint64, f func([]uint64) Uint16List) []Uint16List {
	acc := make([]Uint16List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint64: []uint64->Uint32List */ func MapUint32ListToUint64ArrArr(m [][]uint64, f func([]uint64) Uint32List) []Uint32List {
	acc := make([]Uint32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint64: []uint64->Uint64List */ func MapUint64ListToUint64ArrArr(m [][]uint64, f func([]uint64) Uint64List) []Uint64List {
	acc := make([]Uint64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint64: []uint64->UintptrList */ func MapUintptrListToUint64ArrArr(m [][]uint64, f func([]uint64) UintptrList) []UintptrList {
	acc := make([]UintptrList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint64: []uint64->ByteList */ func MapByteListToUint64ArrArr(m [][]uint64, f func([]uint64) ByteList) []ByteList {
	acc := make([]ByteList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint64: []uint64->RuneList */ func MapRuneListToUint64ArrArr(m [][]uint64, f func([]uint64) RuneList) []RuneList {
	acc := make([]RuneList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint64: []uint64->Float32List */ func MapFloat32ListToUint64ArrArr(m [][]uint64, f func([]uint64) Float32List) []Float32List {
	acc := make([]Float32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint64: []uint64->Float64List */ func MapFloat64ListToUint64ArrArr(m [][]uint64, f func([]uint64) Float64List) []Float64List {
	acc := make([]Float64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint64: []uint64->Complex64List */ func MapComplex64ListToUint64ArrArr(m [][]uint64, f func([]uint64) Complex64List) []Complex64List {
	acc := make([]Complex64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint64: []uint64->Complex128List */ func MapComplex128ListToUint64ArrArr(m [][]uint64, f func([]uint64) Complex128List) []Complex128List {
	acc := make([]Complex128List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uint64: []uint64->AnyList */ func MapAnyListToUint64ArrArr(m [][]uint64, f func([]uint64) AnyList) []AnyList {
	acc := make([]AnyList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uintptr: []uintptr->bool */ func MapBoolToUintptrArrArr(m [][]uintptr, f func([]uintptr) bool) []bool {
	acc := make([]bool, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uintptr: []uintptr->string */ func MapStringToUintptrArrArr(m [][]uintptr, f func([]uintptr) string) []string {
	acc := make([]string, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uintptr: []uintptr->int */ func MapIntToUintptrArrArr(m [][]uintptr, f func([]uintptr) int) []int {
	acc := make([]int, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uintptr: []uintptr->int8 */ func MapInt8ToUintptrArrArr(m [][]uintptr, f func([]uintptr) int8) []int8 {
	acc := make([]int8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uintptr: []uintptr->int16 */ func MapInt16ToUintptrArrArr(m [][]uintptr, f func([]uintptr) int16) []int16 {
	acc := make([]int16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uintptr: []uintptr->int32 */ func MapInt32ToUintptrArrArr(m [][]uintptr, f func([]uintptr) int32) []int32 {
	acc := make([]int32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uintptr: []uintptr->int64 */ func MapInt64ToUintptrArrArr(m [][]uintptr, f func([]uintptr) int64) []int64 {
	acc := make([]int64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uintptr: []uintptr->uint */ func MapUintToUintptrArrArr(m [][]uintptr, f func([]uintptr) uint) []uint {
	acc := make([]uint, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uintptr: []uintptr->uint8 */ func MapUint8ToUintptrArrArr(m [][]uintptr, f func([]uintptr) uint8) []uint8 {
	acc := make([]uint8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uintptr: []uintptr->uint16 */ func MapUint16ToUintptrArrArr(m [][]uintptr, f func([]uintptr) uint16) []uint16 {
	acc := make([]uint16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uintptr: []uintptr->uint32 */ func MapUint32ToUintptrArrArr(m [][]uintptr, f func([]uintptr) uint32) []uint32 {
	acc := make([]uint32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uintptr: []uintptr->uint64 */ func MapUint64ToUintptrArrArr(m [][]uintptr, f func([]uintptr) uint64) []uint64 {
	acc := make([]uint64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uintptr: []uintptr->uintptr */ func MapUintptrToUintptrArrArr(m [][]uintptr, f func([]uintptr) uintptr) []uintptr {
	acc := make([]uintptr, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uintptr: []uintptr->byte */ func MapByteToUintptrArrArr(m [][]uintptr, f func([]uintptr) byte) []byte {
	acc := make([]byte, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uintptr: []uintptr->rune */ func MapRuneToUintptrArrArr(m [][]uintptr, f func([]uintptr) rune) []rune {
	acc := make([]rune, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uintptr: []uintptr->float32 */ func MapFloat32ToUintptrArrArr(m [][]uintptr, f func([]uintptr) float32) []float32 {
	acc := make([]float32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uintptr: []uintptr->float64 */ func MapFloat64ToUintptrArrArr(m [][]uintptr, f func([]uintptr) float64) []float64 {
	acc := make([]float64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uintptr: []uintptr->complex64 */ func MapComplex64ToUintptrArrArr(m [][]uintptr, f func([]uintptr) complex64) []complex64 {
	acc := make([]complex64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uintptr: []uintptr->complex128 */ func MapComplex128ToUintptrArrArr(m [][]uintptr, f func([]uintptr) complex128) []complex128 {
	acc := make([]complex128, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uintptr: []uintptr->Any */ func MapAnyToUintptrArrArr(m [][]uintptr, f func([]uintptr) Any) []Any {
	acc := make([]Any, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uintptr: []uintptr->BoolOption */ func MapBoolOptionToUintptrArrArr(m [][]uintptr, f func([]uintptr) BoolOption) []BoolOption {
	acc := make([]BoolOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uintptr: []uintptr->StringOption */ func MapStringOptionToUintptrArrArr(m [][]uintptr, f func([]uintptr) StringOption) []StringOption {
	acc := make([]StringOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uintptr: []uintptr->IntOption */ func MapIntOptionToUintptrArrArr(m [][]uintptr, f func([]uintptr) IntOption) []IntOption {
	acc := make([]IntOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uintptr: []uintptr->Int8Option */ func MapInt8OptionToUintptrArrArr(m [][]uintptr, f func([]uintptr) Int8Option) []Int8Option {
	acc := make([]Int8Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uintptr: []uintptr->Int16Option */ func MapInt16OptionToUintptrArrArr(m [][]uintptr, f func([]uintptr) Int16Option) []Int16Option {
	acc := make([]Int16Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uintptr: []uintptr->Int32Option */ func MapInt32OptionToUintptrArrArr(m [][]uintptr, f func([]uintptr) Int32Option) []Int32Option {
	acc := make([]Int32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uintptr: []uintptr->Int64Option */ func MapInt64OptionToUintptrArrArr(m [][]uintptr, f func([]uintptr) Int64Option) []Int64Option {
	acc := make([]Int64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uintptr: []uintptr->UintOption */ func MapUintOptionToUintptrArrArr(m [][]uintptr, f func([]uintptr) UintOption) []UintOption {
	acc := make([]UintOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uintptr: []uintptr->Uint8Option */ func MapUint8OptionToUintptrArrArr(m [][]uintptr, f func([]uintptr) Uint8Option) []Uint8Option {
	acc := make([]Uint8Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uintptr: []uintptr->Uint16Option */ func MapUint16OptionToUintptrArrArr(m [][]uintptr, f func([]uintptr) Uint16Option) []Uint16Option {
	acc := make([]Uint16Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uintptr: []uintptr->Uint32Option */ func MapUint32OptionToUintptrArrArr(m [][]uintptr, f func([]uintptr) Uint32Option) []Uint32Option {
	acc := make([]Uint32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uintptr: []uintptr->Uint64Option */ func MapUint64OptionToUintptrArrArr(m [][]uintptr, f func([]uintptr) Uint64Option) []Uint64Option {
	acc := make([]Uint64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uintptr: []uintptr->UintptrOption */ func MapUintptrOptionToUintptrArrArr(m [][]uintptr, f func([]uintptr) UintptrOption) []UintptrOption {
	acc := make([]UintptrOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uintptr: []uintptr->ByteOption */ func MapByteOptionToUintptrArrArr(m [][]uintptr, f func([]uintptr) ByteOption) []ByteOption {
	acc := make([]ByteOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uintptr: []uintptr->RuneOption */ func MapRuneOptionToUintptrArrArr(m [][]uintptr, f func([]uintptr) RuneOption) []RuneOption {
	acc := make([]RuneOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uintptr: []uintptr->Float32Option */ func MapFloat32OptionToUintptrArrArr(m [][]uintptr, f func([]uintptr) Float32Option) []Float32Option {
	acc := make([]Float32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uintptr: []uintptr->Float64Option */ func MapFloat64OptionToUintptrArrArr(m [][]uintptr, f func([]uintptr) Float64Option) []Float64Option {
	acc := make([]Float64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uintptr: []uintptr->Complex64Option */ func MapComplex64OptionToUintptrArrArr(m [][]uintptr, f func([]uintptr) Complex64Option) []Complex64Option {
	acc := make([]Complex64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uintptr: []uintptr->Complex128Option */ func MapComplex128OptionToUintptrArrArr(m [][]uintptr, f func([]uintptr) Complex128Option) []Complex128Option {
	acc := make([]Complex128Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uintptr: []uintptr->AnyOption */ func MapAnyOptionToUintptrArrArr(m [][]uintptr, f func([]uintptr) AnyOption) []AnyOption {
	acc := make([]AnyOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uintptr: []uintptr->[]bool */ func MapBoolArrToUintptrArrArr(m [][]uintptr, f func([]uintptr) []bool) [][]bool {
	acc := make([][]bool, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uintptr: []uintptr->[]string */ func MapStringArrToUintptrArrArr(m [][]uintptr, f func([]uintptr) []string) [][]string {
	acc := make([][]string, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uintptr: []uintptr->[]int */ func MapIntArrToUintptrArrArr(m [][]uintptr, f func([]uintptr) []int) [][]int {
	acc := make([][]int, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uintptr: []uintptr->[]int8 */ func MapInt8ArrToUintptrArrArr(m [][]uintptr, f func([]uintptr) []int8) [][]int8 {
	acc := make([][]int8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uintptr: []uintptr->[]int16 */ func MapInt16ArrToUintptrArrArr(m [][]uintptr, f func([]uintptr) []int16) [][]int16 {
	acc := make([][]int16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uintptr: []uintptr->[]int32 */ func MapInt32ArrToUintptrArrArr(m [][]uintptr, f func([]uintptr) []int32) [][]int32 {
	acc := make([][]int32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uintptr: []uintptr->[]int64 */ func MapInt64ArrToUintptrArrArr(m [][]uintptr, f func([]uintptr) []int64) [][]int64 {
	acc := make([][]int64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uintptr: []uintptr->[]uint */ func MapUintArrToUintptrArrArr(m [][]uintptr, f func([]uintptr) []uint) [][]uint {
	acc := make([][]uint, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uintptr: []uintptr->[]uint8 */ func MapUint8ArrToUintptrArrArr(m [][]uintptr, f func([]uintptr) []uint8) [][]uint8 {
	acc := make([][]uint8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uintptr: []uintptr->[]uint16 */ func MapUint16ArrToUintptrArrArr(m [][]uintptr, f func([]uintptr) []uint16) [][]uint16 {
	acc := make([][]uint16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uintptr: []uintptr->[]uint32 */ func MapUint32ArrToUintptrArrArr(m [][]uintptr, f func([]uintptr) []uint32) [][]uint32 {
	acc := make([][]uint32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uintptr: []uintptr->[]uint64 */ func MapUint64ArrToUintptrArrArr(m [][]uintptr, f func([]uintptr) []uint64) [][]uint64 {
	acc := make([][]uint64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uintptr: []uintptr->[]uintptr */ func MapUintptrArrToUintptrArrArr(m [][]uintptr, f func([]uintptr) []uintptr) [][]uintptr {
	acc := make([][]uintptr, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uintptr: []uintptr->[]byte */ func MapByteArrToUintptrArrArr(m [][]uintptr, f func([]uintptr) []byte) [][]byte {
	acc := make([][]byte, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uintptr: []uintptr->[]rune */ func MapRuneArrToUintptrArrArr(m [][]uintptr, f func([]uintptr) []rune) [][]rune {
	acc := make([][]rune, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uintptr: []uintptr->[]float32 */ func MapFloat32ArrToUintptrArrArr(m [][]uintptr, f func([]uintptr) []float32) [][]float32 {
	acc := make([][]float32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uintptr: []uintptr->[]float64 */ func MapFloat64ArrToUintptrArrArr(m [][]uintptr, f func([]uintptr) []float64) [][]float64 {
	acc := make([][]float64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uintptr: []uintptr->[]complex64 */ func MapComplex64ArrToUintptrArrArr(m [][]uintptr, f func([]uintptr) []complex64) [][]complex64 {
	acc := make([][]complex64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uintptr: []uintptr->[]complex128 */ func MapComplex128ArrToUintptrArrArr(m [][]uintptr, f func([]uintptr) []complex128) [][]complex128 {
	acc := make([][]complex128, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uintptr: []uintptr->[]Any */ func MapAnyArrToUintptrArrArr(m [][]uintptr, f func([]uintptr) []Any) [][]Any {
	acc := make([][]Any, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uintptr: []uintptr->BoolList */ func MapBoolListToUintptrArrArr(m [][]uintptr, f func([]uintptr) BoolList) []BoolList {
	acc := make([]BoolList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uintptr: []uintptr->StringList */ func MapStringListToUintptrArrArr(m [][]uintptr, f func([]uintptr) StringList) []StringList {
	acc := make([]StringList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uintptr: []uintptr->IntList */ func MapIntListToUintptrArrArr(m [][]uintptr, f func([]uintptr) IntList) []IntList {
	acc := make([]IntList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uintptr: []uintptr->Int8List */ func MapInt8ListToUintptrArrArr(m [][]uintptr, f func([]uintptr) Int8List) []Int8List {
	acc := make([]Int8List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uintptr: []uintptr->Int16List */ func MapInt16ListToUintptrArrArr(m [][]uintptr, f func([]uintptr) Int16List) []Int16List {
	acc := make([]Int16List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uintptr: []uintptr->Int32List */ func MapInt32ListToUintptrArrArr(m [][]uintptr, f func([]uintptr) Int32List) []Int32List {
	acc := make([]Int32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uintptr: []uintptr->Int64List */ func MapInt64ListToUintptrArrArr(m [][]uintptr, f func([]uintptr) Int64List) []Int64List {
	acc := make([]Int64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uintptr: []uintptr->UintList */ func MapUintListToUintptrArrArr(m [][]uintptr, f func([]uintptr) UintList) []UintList {
	acc := make([]UintList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uintptr: []uintptr->Uint8List */ func MapUint8ListToUintptrArrArr(m [][]uintptr, f func([]uintptr) Uint8List) []Uint8List {
	acc := make([]Uint8List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uintptr: []uintptr->Uint16List */ func MapUint16ListToUintptrArrArr(m [][]uintptr, f func([]uintptr) Uint16List) []Uint16List {
	acc := make([]Uint16List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uintptr: []uintptr->Uint32List */ func MapUint32ListToUintptrArrArr(m [][]uintptr, f func([]uintptr) Uint32List) []Uint32List {
	acc := make([]Uint32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uintptr: []uintptr->Uint64List */ func MapUint64ListToUintptrArrArr(m [][]uintptr, f func([]uintptr) Uint64List) []Uint64List {
	acc := make([]Uint64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uintptr: []uintptr->UintptrList */ func MapUintptrListToUintptrArrArr(m [][]uintptr, f func([]uintptr) UintptrList) []UintptrList {
	acc := make([]UintptrList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uintptr: []uintptr->ByteList */ func MapByteListToUintptrArrArr(m [][]uintptr, f func([]uintptr) ByteList) []ByteList {
	acc := make([]ByteList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uintptr: []uintptr->RuneList */ func MapRuneListToUintptrArrArr(m [][]uintptr, f func([]uintptr) RuneList) []RuneList {
	acc := make([]RuneList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uintptr: []uintptr->Float32List */ func MapFloat32ListToUintptrArrArr(m [][]uintptr, f func([]uintptr) Float32List) []Float32List {
	acc := make([]Float32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uintptr: []uintptr->Float64List */ func MapFloat64ListToUintptrArrArr(m [][]uintptr, f func([]uintptr) Float64List) []Float64List {
	acc := make([]Float64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uintptr: []uintptr->Complex64List */ func MapComplex64ListToUintptrArrArr(m [][]uintptr, f func([]uintptr) Complex64List) []Complex64List {
	acc := make([]Complex64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uintptr: []uintptr->Complex128List */ func MapComplex128ListToUintptrArrArr(m [][]uintptr, f func([]uintptr) Complex128List) []Complex128List {
	acc := make([]Complex128List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]uintptr: []uintptr->AnyList */ func MapAnyListToUintptrArrArr(m [][]uintptr, f func([]uintptr) AnyList) []AnyList {
	acc := make([]AnyList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]byte: []byte->bool */ func MapBoolToByteArrArr(m [][]byte, f func([]byte) bool) []bool {
	acc := make([]bool, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]byte: []byte->string */ func MapStringToByteArrArr(m [][]byte, f func([]byte) string) []string {
	acc := make([]string, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]byte: []byte->int */ func MapIntToByteArrArr(m [][]byte, f func([]byte) int) []int {
	acc := make([]int, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]byte: []byte->int8 */ func MapInt8ToByteArrArr(m [][]byte, f func([]byte) int8) []int8 {
	acc := make([]int8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]byte: []byte->int16 */ func MapInt16ToByteArrArr(m [][]byte, f func([]byte) int16) []int16 {
	acc := make([]int16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]byte: []byte->int32 */ func MapInt32ToByteArrArr(m [][]byte, f func([]byte) int32) []int32 {
	acc := make([]int32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]byte: []byte->int64 */ func MapInt64ToByteArrArr(m [][]byte, f func([]byte) int64) []int64 {
	acc := make([]int64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]byte: []byte->uint */ func MapUintToByteArrArr(m [][]byte, f func([]byte) uint) []uint {
	acc := make([]uint, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]byte: []byte->uint8 */ func MapUint8ToByteArrArr(m [][]byte, f func([]byte) uint8) []uint8 {
	acc := make([]uint8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]byte: []byte->uint16 */ func MapUint16ToByteArrArr(m [][]byte, f func([]byte) uint16) []uint16 {
	acc := make([]uint16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]byte: []byte->uint32 */ func MapUint32ToByteArrArr(m [][]byte, f func([]byte) uint32) []uint32 {
	acc := make([]uint32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]byte: []byte->uint64 */ func MapUint64ToByteArrArr(m [][]byte, f func([]byte) uint64) []uint64 {
	acc := make([]uint64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]byte: []byte->uintptr */ func MapUintptrToByteArrArr(m [][]byte, f func([]byte) uintptr) []uintptr {
	acc := make([]uintptr, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]byte: []byte->byte */ func MapByteToByteArrArr(m [][]byte, f func([]byte) byte) []byte {
	acc := make([]byte, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]byte: []byte->rune */ func MapRuneToByteArrArr(m [][]byte, f func([]byte) rune) []rune {
	acc := make([]rune, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]byte: []byte->float32 */ func MapFloat32ToByteArrArr(m [][]byte, f func([]byte) float32) []float32 {
	acc := make([]float32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]byte: []byte->float64 */ func MapFloat64ToByteArrArr(m [][]byte, f func([]byte) float64) []float64 {
	acc := make([]float64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]byte: []byte->complex64 */ func MapComplex64ToByteArrArr(m [][]byte, f func([]byte) complex64) []complex64 {
	acc := make([]complex64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]byte: []byte->complex128 */ func MapComplex128ToByteArrArr(m [][]byte, f func([]byte) complex128) []complex128 {
	acc := make([]complex128, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]byte: []byte->Any */ func MapAnyToByteArrArr(m [][]byte, f func([]byte) Any) []Any {
	acc := make([]Any, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]byte: []byte->BoolOption */ func MapBoolOptionToByteArrArr(m [][]byte, f func([]byte) BoolOption) []BoolOption {
	acc := make([]BoolOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]byte: []byte->StringOption */ func MapStringOptionToByteArrArr(m [][]byte, f func([]byte) StringOption) []StringOption {
	acc := make([]StringOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]byte: []byte->IntOption */ func MapIntOptionToByteArrArr(m [][]byte, f func([]byte) IntOption) []IntOption {
	acc := make([]IntOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]byte: []byte->Int8Option */ func MapInt8OptionToByteArrArr(m [][]byte, f func([]byte) Int8Option) []Int8Option {
	acc := make([]Int8Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]byte: []byte->Int16Option */ func MapInt16OptionToByteArrArr(m [][]byte, f func([]byte) Int16Option) []Int16Option {
	acc := make([]Int16Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]byte: []byte->Int32Option */ func MapInt32OptionToByteArrArr(m [][]byte, f func([]byte) Int32Option) []Int32Option {
	acc := make([]Int32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]byte: []byte->Int64Option */ func MapInt64OptionToByteArrArr(m [][]byte, f func([]byte) Int64Option) []Int64Option {
	acc := make([]Int64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]byte: []byte->UintOption */ func MapUintOptionToByteArrArr(m [][]byte, f func([]byte) UintOption) []UintOption {
	acc := make([]UintOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]byte: []byte->Uint8Option */ func MapUint8OptionToByteArrArr(m [][]byte, f func([]byte) Uint8Option) []Uint8Option {
	acc := make([]Uint8Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]byte: []byte->Uint16Option */ func MapUint16OptionToByteArrArr(m [][]byte, f func([]byte) Uint16Option) []Uint16Option {
	acc := make([]Uint16Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]byte: []byte->Uint32Option */ func MapUint32OptionToByteArrArr(m [][]byte, f func([]byte) Uint32Option) []Uint32Option {
	acc := make([]Uint32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]byte: []byte->Uint64Option */ func MapUint64OptionToByteArrArr(m [][]byte, f func([]byte) Uint64Option) []Uint64Option {
	acc := make([]Uint64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]byte: []byte->UintptrOption */ func MapUintptrOptionToByteArrArr(m [][]byte, f func([]byte) UintptrOption) []UintptrOption {
	acc := make([]UintptrOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]byte: []byte->ByteOption */ func MapByteOptionToByteArrArr(m [][]byte, f func([]byte) ByteOption) []ByteOption {
	acc := make([]ByteOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]byte: []byte->RuneOption */ func MapRuneOptionToByteArrArr(m [][]byte, f func([]byte) RuneOption) []RuneOption {
	acc := make([]RuneOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]byte: []byte->Float32Option */ func MapFloat32OptionToByteArrArr(m [][]byte, f func([]byte) Float32Option) []Float32Option {
	acc := make([]Float32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]byte: []byte->Float64Option */ func MapFloat64OptionToByteArrArr(m [][]byte, f func([]byte) Float64Option) []Float64Option {
	acc := make([]Float64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]byte: []byte->Complex64Option */ func MapComplex64OptionToByteArrArr(m [][]byte, f func([]byte) Complex64Option) []Complex64Option {
	acc := make([]Complex64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]byte: []byte->Complex128Option */ func MapComplex128OptionToByteArrArr(m [][]byte, f func([]byte) Complex128Option) []Complex128Option {
	acc := make([]Complex128Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]byte: []byte->AnyOption */ func MapAnyOptionToByteArrArr(m [][]byte, f func([]byte) AnyOption) []AnyOption {
	acc := make([]AnyOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]byte: []byte->[]bool */ func MapBoolArrToByteArrArr(m [][]byte, f func([]byte) []bool) [][]bool {
	acc := make([][]bool, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]byte: []byte->[]string */ func MapStringArrToByteArrArr(m [][]byte, f func([]byte) []string) [][]string {
	acc := make([][]string, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]byte: []byte->[]int */ func MapIntArrToByteArrArr(m [][]byte, f func([]byte) []int) [][]int {
	acc := make([][]int, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]byte: []byte->[]int8 */ func MapInt8ArrToByteArrArr(m [][]byte, f func([]byte) []int8) [][]int8 {
	acc := make([][]int8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]byte: []byte->[]int16 */ func MapInt16ArrToByteArrArr(m [][]byte, f func([]byte) []int16) [][]int16 {
	acc := make([][]int16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]byte: []byte->[]int32 */ func MapInt32ArrToByteArrArr(m [][]byte, f func([]byte) []int32) [][]int32 {
	acc := make([][]int32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]byte: []byte->[]int64 */ func MapInt64ArrToByteArrArr(m [][]byte, f func([]byte) []int64) [][]int64 {
	acc := make([][]int64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]byte: []byte->[]uint */ func MapUintArrToByteArrArr(m [][]byte, f func([]byte) []uint) [][]uint {
	acc := make([][]uint, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]byte: []byte->[]uint8 */ func MapUint8ArrToByteArrArr(m [][]byte, f func([]byte) []uint8) [][]uint8 {
	acc := make([][]uint8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]byte: []byte->[]uint16 */ func MapUint16ArrToByteArrArr(m [][]byte, f func([]byte) []uint16) [][]uint16 {
	acc := make([][]uint16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]byte: []byte->[]uint32 */ func MapUint32ArrToByteArrArr(m [][]byte, f func([]byte) []uint32) [][]uint32 {
	acc := make([][]uint32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]byte: []byte->[]uint64 */ func MapUint64ArrToByteArrArr(m [][]byte, f func([]byte) []uint64) [][]uint64 {
	acc := make([][]uint64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]byte: []byte->[]uintptr */ func MapUintptrArrToByteArrArr(m [][]byte, f func([]byte) []uintptr) [][]uintptr {
	acc := make([][]uintptr, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]byte: []byte->[]byte */ func MapByteArrToByteArrArr(m [][]byte, f func([]byte) []byte) [][]byte {
	acc := make([][]byte, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]byte: []byte->[]rune */ func MapRuneArrToByteArrArr(m [][]byte, f func([]byte) []rune) [][]rune {
	acc := make([][]rune, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]byte: []byte->[]float32 */ func MapFloat32ArrToByteArrArr(m [][]byte, f func([]byte) []float32) [][]float32 {
	acc := make([][]float32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]byte: []byte->[]float64 */ func MapFloat64ArrToByteArrArr(m [][]byte, f func([]byte) []float64) [][]float64 {
	acc := make([][]float64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]byte: []byte->[]complex64 */ func MapComplex64ArrToByteArrArr(m [][]byte, f func([]byte) []complex64) [][]complex64 {
	acc := make([][]complex64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]byte: []byte->[]complex128 */ func MapComplex128ArrToByteArrArr(m [][]byte, f func([]byte) []complex128) [][]complex128 {
	acc := make([][]complex128, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]byte: []byte->[]Any */ func MapAnyArrToByteArrArr(m [][]byte, f func([]byte) []Any) [][]Any {
	acc := make([][]Any, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]byte: []byte->BoolList */ func MapBoolListToByteArrArr(m [][]byte, f func([]byte) BoolList) []BoolList {
	acc := make([]BoolList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]byte: []byte->StringList */ func MapStringListToByteArrArr(m [][]byte, f func([]byte) StringList) []StringList {
	acc := make([]StringList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]byte: []byte->IntList */ func MapIntListToByteArrArr(m [][]byte, f func([]byte) IntList) []IntList {
	acc := make([]IntList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]byte: []byte->Int8List */ func MapInt8ListToByteArrArr(m [][]byte, f func([]byte) Int8List) []Int8List {
	acc := make([]Int8List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]byte: []byte->Int16List */ func MapInt16ListToByteArrArr(m [][]byte, f func([]byte) Int16List) []Int16List {
	acc := make([]Int16List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]byte: []byte->Int32List */ func MapInt32ListToByteArrArr(m [][]byte, f func([]byte) Int32List) []Int32List {
	acc := make([]Int32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]byte: []byte->Int64List */ func MapInt64ListToByteArrArr(m [][]byte, f func([]byte) Int64List) []Int64List {
	acc := make([]Int64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]byte: []byte->UintList */ func MapUintListToByteArrArr(m [][]byte, f func([]byte) UintList) []UintList {
	acc := make([]UintList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]byte: []byte->Uint8List */ func MapUint8ListToByteArrArr(m [][]byte, f func([]byte) Uint8List) []Uint8List {
	acc := make([]Uint8List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]byte: []byte->Uint16List */ func MapUint16ListToByteArrArr(m [][]byte, f func([]byte) Uint16List) []Uint16List {
	acc := make([]Uint16List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]byte: []byte->Uint32List */ func MapUint32ListToByteArrArr(m [][]byte, f func([]byte) Uint32List) []Uint32List {
	acc := make([]Uint32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]byte: []byte->Uint64List */ func MapUint64ListToByteArrArr(m [][]byte, f func([]byte) Uint64List) []Uint64List {
	acc := make([]Uint64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]byte: []byte->UintptrList */ func MapUintptrListToByteArrArr(m [][]byte, f func([]byte) UintptrList) []UintptrList {
	acc := make([]UintptrList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]byte: []byte->ByteList */ func MapByteListToByteArrArr(m [][]byte, f func([]byte) ByteList) []ByteList {
	acc := make([]ByteList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]byte: []byte->RuneList */ func MapRuneListToByteArrArr(m [][]byte, f func([]byte) RuneList) []RuneList {
	acc := make([]RuneList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]byte: []byte->Float32List */ func MapFloat32ListToByteArrArr(m [][]byte, f func([]byte) Float32List) []Float32List {
	acc := make([]Float32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]byte: []byte->Float64List */ func MapFloat64ListToByteArrArr(m [][]byte, f func([]byte) Float64List) []Float64List {
	acc := make([]Float64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]byte: []byte->Complex64List */ func MapComplex64ListToByteArrArr(m [][]byte, f func([]byte) Complex64List) []Complex64List {
	acc := make([]Complex64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]byte: []byte->Complex128List */ func MapComplex128ListToByteArrArr(m [][]byte, f func([]byte) Complex128List) []Complex128List {
	acc := make([]Complex128List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]byte: []byte->AnyList */ func MapAnyListToByteArrArr(m [][]byte, f func([]byte) AnyList) []AnyList {
	acc := make([]AnyList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]rune: []rune->bool */ func MapBoolToRuneArrArr(m [][]rune, f func([]rune) bool) []bool {
	acc := make([]bool, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]rune: []rune->string */ func MapStringToRuneArrArr(m [][]rune, f func([]rune) string) []string {
	acc := make([]string, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]rune: []rune->int */ func MapIntToRuneArrArr(m [][]rune, f func([]rune) int) []int {
	acc := make([]int, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]rune: []rune->int8 */ func MapInt8ToRuneArrArr(m [][]rune, f func([]rune) int8) []int8 {
	acc := make([]int8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]rune: []rune->int16 */ func MapInt16ToRuneArrArr(m [][]rune, f func([]rune) int16) []int16 {
	acc := make([]int16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]rune: []rune->int32 */ func MapInt32ToRuneArrArr(m [][]rune, f func([]rune) int32) []int32 {
	acc := make([]int32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]rune: []rune->int64 */ func MapInt64ToRuneArrArr(m [][]rune, f func([]rune) int64) []int64 {
	acc := make([]int64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]rune: []rune->uint */ func MapUintToRuneArrArr(m [][]rune, f func([]rune) uint) []uint {
	acc := make([]uint, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]rune: []rune->uint8 */ func MapUint8ToRuneArrArr(m [][]rune, f func([]rune) uint8) []uint8 {
	acc := make([]uint8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]rune: []rune->uint16 */ func MapUint16ToRuneArrArr(m [][]rune, f func([]rune) uint16) []uint16 {
	acc := make([]uint16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]rune: []rune->uint32 */ func MapUint32ToRuneArrArr(m [][]rune, f func([]rune) uint32) []uint32 {
	acc := make([]uint32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]rune: []rune->uint64 */ func MapUint64ToRuneArrArr(m [][]rune, f func([]rune) uint64) []uint64 {
	acc := make([]uint64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]rune: []rune->uintptr */ func MapUintptrToRuneArrArr(m [][]rune, f func([]rune) uintptr) []uintptr {
	acc := make([]uintptr, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]rune: []rune->byte */ func MapByteToRuneArrArr(m [][]rune, f func([]rune) byte) []byte {
	acc := make([]byte, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]rune: []rune->rune */ func MapRuneToRuneArrArr(m [][]rune, f func([]rune) rune) []rune {
	acc := make([]rune, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]rune: []rune->float32 */ func MapFloat32ToRuneArrArr(m [][]rune, f func([]rune) float32) []float32 {
	acc := make([]float32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]rune: []rune->float64 */ func MapFloat64ToRuneArrArr(m [][]rune, f func([]rune) float64) []float64 {
	acc := make([]float64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]rune: []rune->complex64 */ func MapComplex64ToRuneArrArr(m [][]rune, f func([]rune) complex64) []complex64 {
	acc := make([]complex64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]rune: []rune->complex128 */ func MapComplex128ToRuneArrArr(m [][]rune, f func([]rune) complex128) []complex128 {
	acc := make([]complex128, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]rune: []rune->Any */ func MapAnyToRuneArrArr(m [][]rune, f func([]rune) Any) []Any {
	acc := make([]Any, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]rune: []rune->BoolOption */ func MapBoolOptionToRuneArrArr(m [][]rune, f func([]rune) BoolOption) []BoolOption {
	acc := make([]BoolOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]rune: []rune->StringOption */ func MapStringOptionToRuneArrArr(m [][]rune, f func([]rune) StringOption) []StringOption {
	acc := make([]StringOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]rune: []rune->IntOption */ func MapIntOptionToRuneArrArr(m [][]rune, f func([]rune) IntOption) []IntOption {
	acc := make([]IntOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]rune: []rune->Int8Option */ func MapInt8OptionToRuneArrArr(m [][]rune, f func([]rune) Int8Option) []Int8Option {
	acc := make([]Int8Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]rune: []rune->Int16Option */ func MapInt16OptionToRuneArrArr(m [][]rune, f func([]rune) Int16Option) []Int16Option {
	acc := make([]Int16Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]rune: []rune->Int32Option */ func MapInt32OptionToRuneArrArr(m [][]rune, f func([]rune) Int32Option) []Int32Option {
	acc := make([]Int32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]rune: []rune->Int64Option */ func MapInt64OptionToRuneArrArr(m [][]rune, f func([]rune) Int64Option) []Int64Option {
	acc := make([]Int64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]rune: []rune->UintOption */ func MapUintOptionToRuneArrArr(m [][]rune, f func([]rune) UintOption) []UintOption {
	acc := make([]UintOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]rune: []rune->Uint8Option */ func MapUint8OptionToRuneArrArr(m [][]rune, f func([]rune) Uint8Option) []Uint8Option {
	acc := make([]Uint8Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]rune: []rune->Uint16Option */ func MapUint16OptionToRuneArrArr(m [][]rune, f func([]rune) Uint16Option) []Uint16Option {
	acc := make([]Uint16Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]rune: []rune->Uint32Option */ func MapUint32OptionToRuneArrArr(m [][]rune, f func([]rune) Uint32Option) []Uint32Option {
	acc := make([]Uint32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]rune: []rune->Uint64Option */ func MapUint64OptionToRuneArrArr(m [][]rune, f func([]rune) Uint64Option) []Uint64Option {
	acc := make([]Uint64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]rune: []rune->UintptrOption */ func MapUintptrOptionToRuneArrArr(m [][]rune, f func([]rune) UintptrOption) []UintptrOption {
	acc := make([]UintptrOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]rune: []rune->ByteOption */ func MapByteOptionToRuneArrArr(m [][]rune, f func([]rune) ByteOption) []ByteOption {
	acc := make([]ByteOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]rune: []rune->RuneOption */ func MapRuneOptionToRuneArrArr(m [][]rune, f func([]rune) RuneOption) []RuneOption {
	acc := make([]RuneOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]rune: []rune->Float32Option */ func MapFloat32OptionToRuneArrArr(m [][]rune, f func([]rune) Float32Option) []Float32Option {
	acc := make([]Float32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]rune: []rune->Float64Option */ func MapFloat64OptionToRuneArrArr(m [][]rune, f func([]rune) Float64Option) []Float64Option {
	acc := make([]Float64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]rune: []rune->Complex64Option */ func MapComplex64OptionToRuneArrArr(m [][]rune, f func([]rune) Complex64Option) []Complex64Option {
	acc := make([]Complex64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]rune: []rune->Complex128Option */ func MapComplex128OptionToRuneArrArr(m [][]rune, f func([]rune) Complex128Option) []Complex128Option {
	acc := make([]Complex128Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]rune: []rune->AnyOption */ func MapAnyOptionToRuneArrArr(m [][]rune, f func([]rune) AnyOption) []AnyOption {
	acc := make([]AnyOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]rune: []rune->[]bool */ func MapBoolArrToRuneArrArr(m [][]rune, f func([]rune) []bool) [][]bool {
	acc := make([][]bool, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]rune: []rune->[]string */ func MapStringArrToRuneArrArr(m [][]rune, f func([]rune) []string) [][]string {
	acc := make([][]string, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]rune: []rune->[]int */ func MapIntArrToRuneArrArr(m [][]rune, f func([]rune) []int) [][]int {
	acc := make([][]int, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]rune: []rune->[]int8 */ func MapInt8ArrToRuneArrArr(m [][]rune, f func([]rune) []int8) [][]int8 {
	acc := make([][]int8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]rune: []rune->[]int16 */ func MapInt16ArrToRuneArrArr(m [][]rune, f func([]rune) []int16) [][]int16 {
	acc := make([][]int16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]rune: []rune->[]int32 */ func MapInt32ArrToRuneArrArr(m [][]rune, f func([]rune) []int32) [][]int32 {
	acc := make([][]int32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]rune: []rune->[]int64 */ func MapInt64ArrToRuneArrArr(m [][]rune, f func([]rune) []int64) [][]int64 {
	acc := make([][]int64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]rune: []rune->[]uint */ func MapUintArrToRuneArrArr(m [][]rune, f func([]rune) []uint) [][]uint {
	acc := make([][]uint, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]rune: []rune->[]uint8 */ func MapUint8ArrToRuneArrArr(m [][]rune, f func([]rune) []uint8) [][]uint8 {
	acc := make([][]uint8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]rune: []rune->[]uint16 */ func MapUint16ArrToRuneArrArr(m [][]rune, f func([]rune) []uint16) [][]uint16 {
	acc := make([][]uint16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]rune: []rune->[]uint32 */ func MapUint32ArrToRuneArrArr(m [][]rune, f func([]rune) []uint32) [][]uint32 {
	acc := make([][]uint32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]rune: []rune->[]uint64 */ func MapUint64ArrToRuneArrArr(m [][]rune, f func([]rune) []uint64) [][]uint64 {
	acc := make([][]uint64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]rune: []rune->[]uintptr */ func MapUintptrArrToRuneArrArr(m [][]rune, f func([]rune) []uintptr) [][]uintptr {
	acc := make([][]uintptr, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]rune: []rune->[]byte */ func MapByteArrToRuneArrArr(m [][]rune, f func([]rune) []byte) [][]byte {
	acc := make([][]byte, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]rune: []rune->[]rune */ func MapRuneArrToRuneArrArr(m [][]rune, f func([]rune) []rune) [][]rune {
	acc := make([][]rune, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]rune: []rune->[]float32 */ func MapFloat32ArrToRuneArrArr(m [][]rune, f func([]rune) []float32) [][]float32 {
	acc := make([][]float32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]rune: []rune->[]float64 */ func MapFloat64ArrToRuneArrArr(m [][]rune, f func([]rune) []float64) [][]float64 {
	acc := make([][]float64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]rune: []rune->[]complex64 */ func MapComplex64ArrToRuneArrArr(m [][]rune, f func([]rune) []complex64) [][]complex64 {
	acc := make([][]complex64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]rune: []rune->[]complex128 */ func MapComplex128ArrToRuneArrArr(m [][]rune, f func([]rune) []complex128) [][]complex128 {
	acc := make([][]complex128, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]rune: []rune->[]Any */ func MapAnyArrToRuneArrArr(m [][]rune, f func([]rune) []Any) [][]Any {
	acc := make([][]Any, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]rune: []rune->BoolList */ func MapBoolListToRuneArrArr(m [][]rune, f func([]rune) BoolList) []BoolList {
	acc := make([]BoolList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]rune: []rune->StringList */ func MapStringListToRuneArrArr(m [][]rune, f func([]rune) StringList) []StringList {
	acc := make([]StringList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]rune: []rune->IntList */ func MapIntListToRuneArrArr(m [][]rune, f func([]rune) IntList) []IntList {
	acc := make([]IntList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]rune: []rune->Int8List */ func MapInt8ListToRuneArrArr(m [][]rune, f func([]rune) Int8List) []Int8List {
	acc := make([]Int8List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]rune: []rune->Int16List */ func MapInt16ListToRuneArrArr(m [][]rune, f func([]rune) Int16List) []Int16List {
	acc := make([]Int16List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]rune: []rune->Int32List */ func MapInt32ListToRuneArrArr(m [][]rune, f func([]rune) Int32List) []Int32List {
	acc := make([]Int32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]rune: []rune->Int64List */ func MapInt64ListToRuneArrArr(m [][]rune, f func([]rune) Int64List) []Int64List {
	acc := make([]Int64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]rune: []rune->UintList */ func MapUintListToRuneArrArr(m [][]rune, f func([]rune) UintList) []UintList {
	acc := make([]UintList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]rune: []rune->Uint8List */ func MapUint8ListToRuneArrArr(m [][]rune, f func([]rune) Uint8List) []Uint8List {
	acc := make([]Uint8List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]rune: []rune->Uint16List */ func MapUint16ListToRuneArrArr(m [][]rune, f func([]rune) Uint16List) []Uint16List {
	acc := make([]Uint16List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]rune: []rune->Uint32List */ func MapUint32ListToRuneArrArr(m [][]rune, f func([]rune) Uint32List) []Uint32List {
	acc := make([]Uint32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]rune: []rune->Uint64List */ func MapUint64ListToRuneArrArr(m [][]rune, f func([]rune) Uint64List) []Uint64List {
	acc := make([]Uint64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]rune: []rune->UintptrList */ func MapUintptrListToRuneArrArr(m [][]rune, f func([]rune) UintptrList) []UintptrList {
	acc := make([]UintptrList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]rune: []rune->ByteList */ func MapByteListToRuneArrArr(m [][]rune, f func([]rune) ByteList) []ByteList {
	acc := make([]ByteList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]rune: []rune->RuneList */ func MapRuneListToRuneArrArr(m [][]rune, f func([]rune) RuneList) []RuneList {
	acc := make([]RuneList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]rune: []rune->Float32List */ func MapFloat32ListToRuneArrArr(m [][]rune, f func([]rune) Float32List) []Float32List {
	acc := make([]Float32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]rune: []rune->Float64List */ func MapFloat64ListToRuneArrArr(m [][]rune, f func([]rune) Float64List) []Float64List {
	acc := make([]Float64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]rune: []rune->Complex64List */ func MapComplex64ListToRuneArrArr(m [][]rune, f func([]rune) Complex64List) []Complex64List {
	acc := make([]Complex64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]rune: []rune->Complex128List */ func MapComplex128ListToRuneArrArr(m [][]rune, f func([]rune) Complex128List) []Complex128List {
	acc := make([]Complex128List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]rune: []rune->AnyList */ func MapAnyListToRuneArrArr(m [][]rune, f func([]rune) AnyList) []AnyList {
	acc := make([]AnyList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float32: []float32->bool */ func MapBoolToFloat32ArrArr(m [][]float32, f func([]float32) bool) []bool {
	acc := make([]bool, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float32: []float32->string */ func MapStringToFloat32ArrArr(m [][]float32, f func([]float32) string) []string {
	acc := make([]string, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float32: []float32->int */ func MapIntToFloat32ArrArr(m [][]float32, f func([]float32) int) []int {
	acc := make([]int, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float32: []float32->int8 */ func MapInt8ToFloat32ArrArr(m [][]float32, f func([]float32) int8) []int8 {
	acc := make([]int8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float32: []float32->int16 */ func MapInt16ToFloat32ArrArr(m [][]float32, f func([]float32) int16) []int16 {
	acc := make([]int16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float32: []float32->int32 */ func MapInt32ToFloat32ArrArr(m [][]float32, f func([]float32) int32) []int32 {
	acc := make([]int32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float32: []float32->int64 */ func MapInt64ToFloat32ArrArr(m [][]float32, f func([]float32) int64) []int64 {
	acc := make([]int64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float32: []float32->uint */ func MapUintToFloat32ArrArr(m [][]float32, f func([]float32) uint) []uint {
	acc := make([]uint, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float32: []float32->uint8 */ func MapUint8ToFloat32ArrArr(m [][]float32, f func([]float32) uint8) []uint8 {
	acc := make([]uint8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float32: []float32->uint16 */ func MapUint16ToFloat32ArrArr(m [][]float32, f func([]float32) uint16) []uint16 {
	acc := make([]uint16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float32: []float32->uint32 */ func MapUint32ToFloat32ArrArr(m [][]float32, f func([]float32) uint32) []uint32 {
	acc := make([]uint32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float32: []float32->uint64 */ func MapUint64ToFloat32ArrArr(m [][]float32, f func([]float32) uint64) []uint64 {
	acc := make([]uint64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float32: []float32->uintptr */ func MapUintptrToFloat32ArrArr(m [][]float32, f func([]float32) uintptr) []uintptr {
	acc := make([]uintptr, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float32: []float32->byte */ func MapByteToFloat32ArrArr(m [][]float32, f func([]float32) byte) []byte {
	acc := make([]byte, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float32: []float32->rune */ func MapRuneToFloat32ArrArr(m [][]float32, f func([]float32) rune) []rune {
	acc := make([]rune, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float32: []float32->float32 */ func MapFloat32ToFloat32ArrArr(m [][]float32, f func([]float32) float32) []float32 {
	acc := make([]float32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float32: []float32->float64 */ func MapFloat64ToFloat32ArrArr(m [][]float32, f func([]float32) float64) []float64 {
	acc := make([]float64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float32: []float32->complex64 */ func MapComplex64ToFloat32ArrArr(m [][]float32, f func([]float32) complex64) []complex64 {
	acc := make([]complex64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float32: []float32->complex128 */ func MapComplex128ToFloat32ArrArr(m [][]float32, f func([]float32) complex128) []complex128 {
	acc := make([]complex128, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float32: []float32->Any */ func MapAnyToFloat32ArrArr(m [][]float32, f func([]float32) Any) []Any {
	acc := make([]Any, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float32: []float32->BoolOption */ func MapBoolOptionToFloat32ArrArr(m [][]float32, f func([]float32) BoolOption) []BoolOption {
	acc := make([]BoolOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float32: []float32->StringOption */ func MapStringOptionToFloat32ArrArr(m [][]float32, f func([]float32) StringOption) []StringOption {
	acc := make([]StringOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float32: []float32->IntOption */ func MapIntOptionToFloat32ArrArr(m [][]float32, f func([]float32) IntOption) []IntOption {
	acc := make([]IntOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float32: []float32->Int8Option */ func MapInt8OptionToFloat32ArrArr(m [][]float32, f func([]float32) Int8Option) []Int8Option {
	acc := make([]Int8Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float32: []float32->Int16Option */ func MapInt16OptionToFloat32ArrArr(m [][]float32, f func([]float32) Int16Option) []Int16Option {
	acc := make([]Int16Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float32: []float32->Int32Option */ func MapInt32OptionToFloat32ArrArr(m [][]float32, f func([]float32) Int32Option) []Int32Option {
	acc := make([]Int32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float32: []float32->Int64Option */ func MapInt64OptionToFloat32ArrArr(m [][]float32, f func([]float32) Int64Option) []Int64Option {
	acc := make([]Int64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float32: []float32->UintOption */ func MapUintOptionToFloat32ArrArr(m [][]float32, f func([]float32) UintOption) []UintOption {
	acc := make([]UintOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float32: []float32->Uint8Option */ func MapUint8OptionToFloat32ArrArr(m [][]float32, f func([]float32) Uint8Option) []Uint8Option {
	acc := make([]Uint8Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float32: []float32->Uint16Option */ func MapUint16OptionToFloat32ArrArr(m [][]float32, f func([]float32) Uint16Option) []Uint16Option {
	acc := make([]Uint16Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float32: []float32->Uint32Option */ func MapUint32OptionToFloat32ArrArr(m [][]float32, f func([]float32) Uint32Option) []Uint32Option {
	acc := make([]Uint32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float32: []float32->Uint64Option */ func MapUint64OptionToFloat32ArrArr(m [][]float32, f func([]float32) Uint64Option) []Uint64Option {
	acc := make([]Uint64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float32: []float32->UintptrOption */ func MapUintptrOptionToFloat32ArrArr(m [][]float32, f func([]float32) UintptrOption) []UintptrOption {
	acc := make([]UintptrOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float32: []float32->ByteOption */ func MapByteOptionToFloat32ArrArr(m [][]float32, f func([]float32) ByteOption) []ByteOption {
	acc := make([]ByteOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float32: []float32->RuneOption */ func MapRuneOptionToFloat32ArrArr(m [][]float32, f func([]float32) RuneOption) []RuneOption {
	acc := make([]RuneOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float32: []float32->Float32Option */ func MapFloat32OptionToFloat32ArrArr(m [][]float32, f func([]float32) Float32Option) []Float32Option {
	acc := make([]Float32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float32: []float32->Float64Option */ func MapFloat64OptionToFloat32ArrArr(m [][]float32, f func([]float32) Float64Option) []Float64Option {
	acc := make([]Float64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float32: []float32->Complex64Option */ func MapComplex64OptionToFloat32ArrArr(m [][]float32, f func([]float32) Complex64Option) []Complex64Option {
	acc := make([]Complex64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float32: []float32->Complex128Option */ func MapComplex128OptionToFloat32ArrArr(m [][]float32, f func([]float32) Complex128Option) []Complex128Option {
	acc := make([]Complex128Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float32: []float32->AnyOption */ func MapAnyOptionToFloat32ArrArr(m [][]float32, f func([]float32) AnyOption) []AnyOption {
	acc := make([]AnyOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float32: []float32->[]bool */ func MapBoolArrToFloat32ArrArr(m [][]float32, f func([]float32) []bool) [][]bool {
	acc := make([][]bool, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float32: []float32->[]string */ func MapStringArrToFloat32ArrArr(m [][]float32, f func([]float32) []string) [][]string {
	acc := make([][]string, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float32: []float32->[]int */ func MapIntArrToFloat32ArrArr(m [][]float32, f func([]float32) []int) [][]int {
	acc := make([][]int, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float32: []float32->[]int8 */ func MapInt8ArrToFloat32ArrArr(m [][]float32, f func([]float32) []int8) [][]int8 {
	acc := make([][]int8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float32: []float32->[]int16 */ func MapInt16ArrToFloat32ArrArr(m [][]float32, f func([]float32) []int16) [][]int16 {
	acc := make([][]int16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float32: []float32->[]int32 */ func MapInt32ArrToFloat32ArrArr(m [][]float32, f func([]float32) []int32) [][]int32 {
	acc := make([][]int32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float32: []float32->[]int64 */ func MapInt64ArrToFloat32ArrArr(m [][]float32, f func([]float32) []int64) [][]int64 {
	acc := make([][]int64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float32: []float32->[]uint */ func MapUintArrToFloat32ArrArr(m [][]float32, f func([]float32) []uint) [][]uint {
	acc := make([][]uint, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float32: []float32->[]uint8 */ func MapUint8ArrToFloat32ArrArr(m [][]float32, f func([]float32) []uint8) [][]uint8 {
	acc := make([][]uint8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float32: []float32->[]uint16 */ func MapUint16ArrToFloat32ArrArr(m [][]float32, f func([]float32) []uint16) [][]uint16 {
	acc := make([][]uint16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float32: []float32->[]uint32 */ func MapUint32ArrToFloat32ArrArr(m [][]float32, f func([]float32) []uint32) [][]uint32 {
	acc := make([][]uint32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float32: []float32->[]uint64 */ func MapUint64ArrToFloat32ArrArr(m [][]float32, f func([]float32) []uint64) [][]uint64 {
	acc := make([][]uint64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float32: []float32->[]uintptr */ func MapUintptrArrToFloat32ArrArr(m [][]float32, f func([]float32) []uintptr) [][]uintptr {
	acc := make([][]uintptr, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float32: []float32->[]byte */ func MapByteArrToFloat32ArrArr(m [][]float32, f func([]float32) []byte) [][]byte {
	acc := make([][]byte, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float32: []float32->[]rune */ func MapRuneArrToFloat32ArrArr(m [][]float32, f func([]float32) []rune) [][]rune {
	acc := make([][]rune, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float32: []float32->[]float32 */ func MapFloat32ArrToFloat32ArrArr(m [][]float32, f func([]float32) []float32) [][]float32 {
	acc := make([][]float32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float32: []float32->[]float64 */ func MapFloat64ArrToFloat32ArrArr(m [][]float32, f func([]float32) []float64) [][]float64 {
	acc := make([][]float64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float32: []float32->[]complex64 */ func MapComplex64ArrToFloat32ArrArr(m [][]float32, f func([]float32) []complex64) [][]complex64 {
	acc := make([][]complex64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float32: []float32->[]complex128 */ func MapComplex128ArrToFloat32ArrArr(m [][]float32, f func([]float32) []complex128) [][]complex128 {
	acc := make([][]complex128, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float32: []float32->[]Any */ func MapAnyArrToFloat32ArrArr(m [][]float32, f func([]float32) []Any) [][]Any {
	acc := make([][]Any, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float32: []float32->BoolList */ func MapBoolListToFloat32ArrArr(m [][]float32, f func([]float32) BoolList) []BoolList {
	acc := make([]BoolList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float32: []float32->StringList */ func MapStringListToFloat32ArrArr(m [][]float32, f func([]float32) StringList) []StringList {
	acc := make([]StringList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float32: []float32->IntList */ func MapIntListToFloat32ArrArr(m [][]float32, f func([]float32) IntList) []IntList {
	acc := make([]IntList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float32: []float32->Int8List */ func MapInt8ListToFloat32ArrArr(m [][]float32, f func([]float32) Int8List) []Int8List {
	acc := make([]Int8List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float32: []float32->Int16List */ func MapInt16ListToFloat32ArrArr(m [][]float32, f func([]float32) Int16List) []Int16List {
	acc := make([]Int16List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float32: []float32->Int32List */ func MapInt32ListToFloat32ArrArr(m [][]float32, f func([]float32) Int32List) []Int32List {
	acc := make([]Int32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float32: []float32->Int64List */ func MapInt64ListToFloat32ArrArr(m [][]float32, f func([]float32) Int64List) []Int64List {
	acc := make([]Int64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float32: []float32->UintList */ func MapUintListToFloat32ArrArr(m [][]float32, f func([]float32) UintList) []UintList {
	acc := make([]UintList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float32: []float32->Uint8List */ func MapUint8ListToFloat32ArrArr(m [][]float32, f func([]float32) Uint8List) []Uint8List {
	acc := make([]Uint8List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float32: []float32->Uint16List */ func MapUint16ListToFloat32ArrArr(m [][]float32, f func([]float32) Uint16List) []Uint16List {
	acc := make([]Uint16List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float32: []float32->Uint32List */ func MapUint32ListToFloat32ArrArr(m [][]float32, f func([]float32) Uint32List) []Uint32List {
	acc := make([]Uint32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float32: []float32->Uint64List */ func MapUint64ListToFloat32ArrArr(m [][]float32, f func([]float32) Uint64List) []Uint64List {
	acc := make([]Uint64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float32: []float32->UintptrList */ func MapUintptrListToFloat32ArrArr(m [][]float32, f func([]float32) UintptrList) []UintptrList {
	acc := make([]UintptrList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float32: []float32->ByteList */ func MapByteListToFloat32ArrArr(m [][]float32, f func([]float32) ByteList) []ByteList {
	acc := make([]ByteList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float32: []float32->RuneList */ func MapRuneListToFloat32ArrArr(m [][]float32, f func([]float32) RuneList) []RuneList {
	acc := make([]RuneList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float32: []float32->Float32List */ func MapFloat32ListToFloat32ArrArr(m [][]float32, f func([]float32) Float32List) []Float32List {
	acc := make([]Float32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float32: []float32->Float64List */ func MapFloat64ListToFloat32ArrArr(m [][]float32, f func([]float32) Float64List) []Float64List {
	acc := make([]Float64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float32: []float32->Complex64List */ func MapComplex64ListToFloat32ArrArr(m [][]float32, f func([]float32) Complex64List) []Complex64List {
	acc := make([]Complex64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float32: []float32->Complex128List */ func MapComplex128ListToFloat32ArrArr(m [][]float32, f func([]float32) Complex128List) []Complex128List {
	acc := make([]Complex128List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float32: []float32->AnyList */ func MapAnyListToFloat32ArrArr(m [][]float32, f func([]float32) AnyList) []AnyList {
	acc := make([]AnyList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float64: []float64->bool */ func MapBoolToFloat64ArrArr(m [][]float64, f func([]float64) bool) []bool {
	acc := make([]bool, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float64: []float64->string */ func MapStringToFloat64ArrArr(m [][]float64, f func([]float64) string) []string {
	acc := make([]string, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float64: []float64->int */ func MapIntToFloat64ArrArr(m [][]float64, f func([]float64) int) []int {
	acc := make([]int, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float64: []float64->int8 */ func MapInt8ToFloat64ArrArr(m [][]float64, f func([]float64) int8) []int8 {
	acc := make([]int8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float64: []float64->int16 */ func MapInt16ToFloat64ArrArr(m [][]float64, f func([]float64) int16) []int16 {
	acc := make([]int16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float64: []float64->int32 */ func MapInt32ToFloat64ArrArr(m [][]float64, f func([]float64) int32) []int32 {
	acc := make([]int32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float64: []float64->int64 */ func MapInt64ToFloat64ArrArr(m [][]float64, f func([]float64) int64) []int64 {
	acc := make([]int64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float64: []float64->uint */ func MapUintToFloat64ArrArr(m [][]float64, f func([]float64) uint) []uint {
	acc := make([]uint, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float64: []float64->uint8 */ func MapUint8ToFloat64ArrArr(m [][]float64, f func([]float64) uint8) []uint8 {
	acc := make([]uint8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float64: []float64->uint16 */ func MapUint16ToFloat64ArrArr(m [][]float64, f func([]float64) uint16) []uint16 {
	acc := make([]uint16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float64: []float64->uint32 */ func MapUint32ToFloat64ArrArr(m [][]float64, f func([]float64) uint32) []uint32 {
	acc := make([]uint32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float64: []float64->uint64 */ func MapUint64ToFloat64ArrArr(m [][]float64, f func([]float64) uint64) []uint64 {
	acc := make([]uint64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float64: []float64->uintptr */ func MapUintptrToFloat64ArrArr(m [][]float64, f func([]float64) uintptr) []uintptr {
	acc := make([]uintptr, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float64: []float64->byte */ func MapByteToFloat64ArrArr(m [][]float64, f func([]float64) byte) []byte {
	acc := make([]byte, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float64: []float64->rune */ func MapRuneToFloat64ArrArr(m [][]float64, f func([]float64) rune) []rune {
	acc := make([]rune, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float64: []float64->float32 */ func MapFloat32ToFloat64ArrArr(m [][]float64, f func([]float64) float32) []float32 {
	acc := make([]float32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float64: []float64->float64 */ func MapFloat64ToFloat64ArrArr(m [][]float64, f func([]float64) float64) []float64 {
	acc := make([]float64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float64: []float64->complex64 */ func MapComplex64ToFloat64ArrArr(m [][]float64, f func([]float64) complex64) []complex64 {
	acc := make([]complex64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float64: []float64->complex128 */ func MapComplex128ToFloat64ArrArr(m [][]float64, f func([]float64) complex128) []complex128 {
	acc := make([]complex128, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float64: []float64->Any */ func MapAnyToFloat64ArrArr(m [][]float64, f func([]float64) Any) []Any {
	acc := make([]Any, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float64: []float64->BoolOption */ func MapBoolOptionToFloat64ArrArr(m [][]float64, f func([]float64) BoolOption) []BoolOption {
	acc := make([]BoolOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float64: []float64->StringOption */ func MapStringOptionToFloat64ArrArr(m [][]float64, f func([]float64) StringOption) []StringOption {
	acc := make([]StringOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float64: []float64->IntOption */ func MapIntOptionToFloat64ArrArr(m [][]float64, f func([]float64) IntOption) []IntOption {
	acc := make([]IntOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float64: []float64->Int8Option */ func MapInt8OptionToFloat64ArrArr(m [][]float64, f func([]float64) Int8Option) []Int8Option {
	acc := make([]Int8Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float64: []float64->Int16Option */ func MapInt16OptionToFloat64ArrArr(m [][]float64, f func([]float64) Int16Option) []Int16Option {
	acc := make([]Int16Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float64: []float64->Int32Option */ func MapInt32OptionToFloat64ArrArr(m [][]float64, f func([]float64) Int32Option) []Int32Option {
	acc := make([]Int32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float64: []float64->Int64Option */ func MapInt64OptionToFloat64ArrArr(m [][]float64, f func([]float64) Int64Option) []Int64Option {
	acc := make([]Int64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float64: []float64->UintOption */ func MapUintOptionToFloat64ArrArr(m [][]float64, f func([]float64) UintOption) []UintOption {
	acc := make([]UintOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float64: []float64->Uint8Option */ func MapUint8OptionToFloat64ArrArr(m [][]float64, f func([]float64) Uint8Option) []Uint8Option {
	acc := make([]Uint8Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float64: []float64->Uint16Option */ func MapUint16OptionToFloat64ArrArr(m [][]float64, f func([]float64) Uint16Option) []Uint16Option {
	acc := make([]Uint16Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float64: []float64->Uint32Option */ func MapUint32OptionToFloat64ArrArr(m [][]float64, f func([]float64) Uint32Option) []Uint32Option {
	acc := make([]Uint32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float64: []float64->Uint64Option */ func MapUint64OptionToFloat64ArrArr(m [][]float64, f func([]float64) Uint64Option) []Uint64Option {
	acc := make([]Uint64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float64: []float64->UintptrOption */ func MapUintptrOptionToFloat64ArrArr(m [][]float64, f func([]float64) UintptrOption) []UintptrOption {
	acc := make([]UintptrOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float64: []float64->ByteOption */ func MapByteOptionToFloat64ArrArr(m [][]float64, f func([]float64) ByteOption) []ByteOption {
	acc := make([]ByteOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float64: []float64->RuneOption */ func MapRuneOptionToFloat64ArrArr(m [][]float64, f func([]float64) RuneOption) []RuneOption {
	acc := make([]RuneOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float64: []float64->Float32Option */ func MapFloat32OptionToFloat64ArrArr(m [][]float64, f func([]float64) Float32Option) []Float32Option {
	acc := make([]Float32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float64: []float64->Float64Option */ func MapFloat64OptionToFloat64ArrArr(m [][]float64, f func([]float64) Float64Option) []Float64Option {
	acc := make([]Float64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float64: []float64->Complex64Option */ func MapComplex64OptionToFloat64ArrArr(m [][]float64, f func([]float64) Complex64Option) []Complex64Option {
	acc := make([]Complex64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float64: []float64->Complex128Option */ func MapComplex128OptionToFloat64ArrArr(m [][]float64, f func([]float64) Complex128Option) []Complex128Option {
	acc := make([]Complex128Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float64: []float64->AnyOption */ func MapAnyOptionToFloat64ArrArr(m [][]float64, f func([]float64) AnyOption) []AnyOption {
	acc := make([]AnyOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float64: []float64->[]bool */ func MapBoolArrToFloat64ArrArr(m [][]float64, f func([]float64) []bool) [][]bool {
	acc := make([][]bool, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float64: []float64->[]string */ func MapStringArrToFloat64ArrArr(m [][]float64, f func([]float64) []string) [][]string {
	acc := make([][]string, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float64: []float64->[]int */ func MapIntArrToFloat64ArrArr(m [][]float64, f func([]float64) []int) [][]int {
	acc := make([][]int, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float64: []float64->[]int8 */ func MapInt8ArrToFloat64ArrArr(m [][]float64, f func([]float64) []int8) [][]int8 {
	acc := make([][]int8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float64: []float64->[]int16 */ func MapInt16ArrToFloat64ArrArr(m [][]float64, f func([]float64) []int16) [][]int16 {
	acc := make([][]int16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float64: []float64->[]int32 */ func MapInt32ArrToFloat64ArrArr(m [][]float64, f func([]float64) []int32) [][]int32 {
	acc := make([][]int32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float64: []float64->[]int64 */ func MapInt64ArrToFloat64ArrArr(m [][]float64, f func([]float64) []int64) [][]int64 {
	acc := make([][]int64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float64: []float64->[]uint */ func MapUintArrToFloat64ArrArr(m [][]float64, f func([]float64) []uint) [][]uint {
	acc := make([][]uint, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float64: []float64->[]uint8 */ func MapUint8ArrToFloat64ArrArr(m [][]float64, f func([]float64) []uint8) [][]uint8 {
	acc := make([][]uint8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float64: []float64->[]uint16 */ func MapUint16ArrToFloat64ArrArr(m [][]float64, f func([]float64) []uint16) [][]uint16 {
	acc := make([][]uint16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float64: []float64->[]uint32 */ func MapUint32ArrToFloat64ArrArr(m [][]float64, f func([]float64) []uint32) [][]uint32 {
	acc := make([][]uint32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float64: []float64->[]uint64 */ func MapUint64ArrToFloat64ArrArr(m [][]float64, f func([]float64) []uint64) [][]uint64 {
	acc := make([][]uint64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float64: []float64->[]uintptr */ func MapUintptrArrToFloat64ArrArr(m [][]float64, f func([]float64) []uintptr) [][]uintptr {
	acc := make([][]uintptr, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float64: []float64->[]byte */ func MapByteArrToFloat64ArrArr(m [][]float64, f func([]float64) []byte) [][]byte {
	acc := make([][]byte, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float64: []float64->[]rune */ func MapRuneArrToFloat64ArrArr(m [][]float64, f func([]float64) []rune) [][]rune {
	acc := make([][]rune, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float64: []float64->[]float32 */ func MapFloat32ArrToFloat64ArrArr(m [][]float64, f func([]float64) []float32) [][]float32 {
	acc := make([][]float32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float64: []float64->[]float64 */ func MapFloat64ArrToFloat64ArrArr(m [][]float64, f func([]float64) []float64) [][]float64 {
	acc := make([][]float64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float64: []float64->[]complex64 */ func MapComplex64ArrToFloat64ArrArr(m [][]float64, f func([]float64) []complex64) [][]complex64 {
	acc := make([][]complex64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float64: []float64->[]complex128 */ func MapComplex128ArrToFloat64ArrArr(m [][]float64, f func([]float64) []complex128) [][]complex128 {
	acc := make([][]complex128, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float64: []float64->[]Any */ func MapAnyArrToFloat64ArrArr(m [][]float64, f func([]float64) []Any) [][]Any {
	acc := make([][]Any, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float64: []float64->BoolList */ func MapBoolListToFloat64ArrArr(m [][]float64, f func([]float64) BoolList) []BoolList {
	acc := make([]BoolList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float64: []float64->StringList */ func MapStringListToFloat64ArrArr(m [][]float64, f func([]float64) StringList) []StringList {
	acc := make([]StringList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float64: []float64->IntList */ func MapIntListToFloat64ArrArr(m [][]float64, f func([]float64) IntList) []IntList {
	acc := make([]IntList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float64: []float64->Int8List */ func MapInt8ListToFloat64ArrArr(m [][]float64, f func([]float64) Int8List) []Int8List {
	acc := make([]Int8List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float64: []float64->Int16List */ func MapInt16ListToFloat64ArrArr(m [][]float64, f func([]float64) Int16List) []Int16List {
	acc := make([]Int16List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float64: []float64->Int32List */ func MapInt32ListToFloat64ArrArr(m [][]float64, f func([]float64) Int32List) []Int32List {
	acc := make([]Int32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float64: []float64->Int64List */ func MapInt64ListToFloat64ArrArr(m [][]float64, f func([]float64) Int64List) []Int64List {
	acc := make([]Int64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float64: []float64->UintList */ func MapUintListToFloat64ArrArr(m [][]float64, f func([]float64) UintList) []UintList {
	acc := make([]UintList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float64: []float64->Uint8List */ func MapUint8ListToFloat64ArrArr(m [][]float64, f func([]float64) Uint8List) []Uint8List {
	acc := make([]Uint8List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float64: []float64->Uint16List */ func MapUint16ListToFloat64ArrArr(m [][]float64, f func([]float64) Uint16List) []Uint16List {
	acc := make([]Uint16List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float64: []float64->Uint32List */ func MapUint32ListToFloat64ArrArr(m [][]float64, f func([]float64) Uint32List) []Uint32List {
	acc := make([]Uint32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float64: []float64->Uint64List */ func MapUint64ListToFloat64ArrArr(m [][]float64, f func([]float64) Uint64List) []Uint64List {
	acc := make([]Uint64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float64: []float64->UintptrList */ func MapUintptrListToFloat64ArrArr(m [][]float64, f func([]float64) UintptrList) []UintptrList {
	acc := make([]UintptrList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float64: []float64->ByteList */ func MapByteListToFloat64ArrArr(m [][]float64, f func([]float64) ByteList) []ByteList {
	acc := make([]ByteList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float64: []float64->RuneList */ func MapRuneListToFloat64ArrArr(m [][]float64, f func([]float64) RuneList) []RuneList {
	acc := make([]RuneList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float64: []float64->Float32List */ func MapFloat32ListToFloat64ArrArr(m [][]float64, f func([]float64) Float32List) []Float32List {
	acc := make([]Float32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float64: []float64->Float64List */ func MapFloat64ListToFloat64ArrArr(m [][]float64, f func([]float64) Float64List) []Float64List {
	acc := make([]Float64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float64: []float64->Complex64List */ func MapComplex64ListToFloat64ArrArr(m [][]float64, f func([]float64) Complex64List) []Complex64List {
	acc := make([]Complex64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float64: []float64->Complex128List */ func MapComplex128ListToFloat64ArrArr(m [][]float64, f func([]float64) Complex128List) []Complex128List {
	acc := make([]Complex128List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]float64: []float64->AnyList */ func MapAnyListToFloat64ArrArr(m [][]float64, f func([]float64) AnyList) []AnyList {
	acc := make([]AnyList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex64: []complex64->bool */ func MapBoolToComplex64ArrArr(m [][]complex64, f func([]complex64) bool) []bool {
	acc := make([]bool, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex64: []complex64->string */ func MapStringToComplex64ArrArr(m [][]complex64, f func([]complex64) string) []string {
	acc := make([]string, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex64: []complex64->int */ func MapIntToComplex64ArrArr(m [][]complex64, f func([]complex64) int) []int {
	acc := make([]int, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex64: []complex64->int8 */ func MapInt8ToComplex64ArrArr(m [][]complex64, f func([]complex64) int8) []int8 {
	acc := make([]int8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex64: []complex64->int16 */ func MapInt16ToComplex64ArrArr(m [][]complex64, f func([]complex64) int16) []int16 {
	acc := make([]int16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex64: []complex64->int32 */ func MapInt32ToComplex64ArrArr(m [][]complex64, f func([]complex64) int32) []int32 {
	acc := make([]int32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex64: []complex64->int64 */ func MapInt64ToComplex64ArrArr(m [][]complex64, f func([]complex64) int64) []int64 {
	acc := make([]int64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex64: []complex64->uint */ func MapUintToComplex64ArrArr(m [][]complex64, f func([]complex64) uint) []uint {
	acc := make([]uint, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex64: []complex64->uint8 */ func MapUint8ToComplex64ArrArr(m [][]complex64, f func([]complex64) uint8) []uint8 {
	acc := make([]uint8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex64: []complex64->uint16 */ func MapUint16ToComplex64ArrArr(m [][]complex64, f func([]complex64) uint16) []uint16 {
	acc := make([]uint16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex64: []complex64->uint32 */ func MapUint32ToComplex64ArrArr(m [][]complex64, f func([]complex64) uint32) []uint32 {
	acc := make([]uint32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex64: []complex64->uint64 */ func MapUint64ToComplex64ArrArr(m [][]complex64, f func([]complex64) uint64) []uint64 {
	acc := make([]uint64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex64: []complex64->uintptr */ func MapUintptrToComplex64ArrArr(m [][]complex64, f func([]complex64) uintptr) []uintptr {
	acc := make([]uintptr, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex64: []complex64->byte */ func MapByteToComplex64ArrArr(m [][]complex64, f func([]complex64) byte) []byte {
	acc := make([]byte, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex64: []complex64->rune */ func MapRuneToComplex64ArrArr(m [][]complex64, f func([]complex64) rune) []rune {
	acc := make([]rune, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex64: []complex64->float32 */ func MapFloat32ToComplex64ArrArr(m [][]complex64, f func([]complex64) float32) []float32 {
	acc := make([]float32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex64: []complex64->float64 */ func MapFloat64ToComplex64ArrArr(m [][]complex64, f func([]complex64) float64) []float64 {
	acc := make([]float64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex64: []complex64->complex64 */ func MapComplex64ToComplex64ArrArr(m [][]complex64, f func([]complex64) complex64) []complex64 {
	acc := make([]complex64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex64: []complex64->complex128 */ func MapComplex128ToComplex64ArrArr(m [][]complex64, f func([]complex64) complex128) []complex128 {
	acc := make([]complex128, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex64: []complex64->Any */ func MapAnyToComplex64ArrArr(m [][]complex64, f func([]complex64) Any) []Any {
	acc := make([]Any, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex64: []complex64->BoolOption */ func MapBoolOptionToComplex64ArrArr(m [][]complex64, f func([]complex64) BoolOption) []BoolOption {
	acc := make([]BoolOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex64: []complex64->StringOption */ func MapStringOptionToComplex64ArrArr(m [][]complex64, f func([]complex64) StringOption) []StringOption {
	acc := make([]StringOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex64: []complex64->IntOption */ func MapIntOptionToComplex64ArrArr(m [][]complex64, f func([]complex64) IntOption) []IntOption {
	acc := make([]IntOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex64: []complex64->Int8Option */ func MapInt8OptionToComplex64ArrArr(m [][]complex64, f func([]complex64) Int8Option) []Int8Option {
	acc := make([]Int8Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex64: []complex64->Int16Option */ func MapInt16OptionToComplex64ArrArr(m [][]complex64, f func([]complex64) Int16Option) []Int16Option {
	acc := make([]Int16Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex64: []complex64->Int32Option */ func MapInt32OptionToComplex64ArrArr(m [][]complex64, f func([]complex64) Int32Option) []Int32Option {
	acc := make([]Int32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex64: []complex64->Int64Option */ func MapInt64OptionToComplex64ArrArr(m [][]complex64, f func([]complex64) Int64Option) []Int64Option {
	acc := make([]Int64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex64: []complex64->UintOption */ func MapUintOptionToComplex64ArrArr(m [][]complex64, f func([]complex64) UintOption) []UintOption {
	acc := make([]UintOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex64: []complex64->Uint8Option */ func MapUint8OptionToComplex64ArrArr(m [][]complex64, f func([]complex64) Uint8Option) []Uint8Option {
	acc := make([]Uint8Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex64: []complex64->Uint16Option */ func MapUint16OptionToComplex64ArrArr(m [][]complex64, f func([]complex64) Uint16Option) []Uint16Option {
	acc := make([]Uint16Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex64: []complex64->Uint32Option */ func MapUint32OptionToComplex64ArrArr(m [][]complex64, f func([]complex64) Uint32Option) []Uint32Option {
	acc := make([]Uint32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex64: []complex64->Uint64Option */ func MapUint64OptionToComplex64ArrArr(m [][]complex64, f func([]complex64) Uint64Option) []Uint64Option {
	acc := make([]Uint64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex64: []complex64->UintptrOption */ func MapUintptrOptionToComplex64ArrArr(m [][]complex64, f func([]complex64) UintptrOption) []UintptrOption {
	acc := make([]UintptrOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex64: []complex64->ByteOption */ func MapByteOptionToComplex64ArrArr(m [][]complex64, f func([]complex64) ByteOption) []ByteOption {
	acc := make([]ByteOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex64: []complex64->RuneOption */ func MapRuneOptionToComplex64ArrArr(m [][]complex64, f func([]complex64) RuneOption) []RuneOption {
	acc := make([]RuneOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex64: []complex64->Float32Option */ func MapFloat32OptionToComplex64ArrArr(m [][]complex64, f func([]complex64) Float32Option) []Float32Option {
	acc := make([]Float32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex64: []complex64->Float64Option */ func MapFloat64OptionToComplex64ArrArr(m [][]complex64, f func([]complex64) Float64Option) []Float64Option {
	acc := make([]Float64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex64: []complex64->Complex64Option */ func MapComplex64OptionToComplex64ArrArr(m [][]complex64, f func([]complex64) Complex64Option) []Complex64Option {
	acc := make([]Complex64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex64: []complex64->Complex128Option */ func MapComplex128OptionToComplex64ArrArr(m [][]complex64, f func([]complex64) Complex128Option) []Complex128Option {
	acc := make([]Complex128Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex64: []complex64->AnyOption */ func MapAnyOptionToComplex64ArrArr(m [][]complex64, f func([]complex64) AnyOption) []AnyOption {
	acc := make([]AnyOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex64: []complex64->[]bool */ func MapBoolArrToComplex64ArrArr(m [][]complex64, f func([]complex64) []bool) [][]bool {
	acc := make([][]bool, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex64: []complex64->[]string */ func MapStringArrToComplex64ArrArr(m [][]complex64, f func([]complex64) []string) [][]string {
	acc := make([][]string, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex64: []complex64->[]int */ func MapIntArrToComplex64ArrArr(m [][]complex64, f func([]complex64) []int) [][]int {
	acc := make([][]int, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex64: []complex64->[]int8 */ func MapInt8ArrToComplex64ArrArr(m [][]complex64, f func([]complex64) []int8) [][]int8 {
	acc := make([][]int8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex64: []complex64->[]int16 */ func MapInt16ArrToComplex64ArrArr(m [][]complex64, f func([]complex64) []int16) [][]int16 {
	acc := make([][]int16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex64: []complex64->[]int32 */ func MapInt32ArrToComplex64ArrArr(m [][]complex64, f func([]complex64) []int32) [][]int32 {
	acc := make([][]int32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex64: []complex64->[]int64 */ func MapInt64ArrToComplex64ArrArr(m [][]complex64, f func([]complex64) []int64) [][]int64 {
	acc := make([][]int64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex64: []complex64->[]uint */ func MapUintArrToComplex64ArrArr(m [][]complex64, f func([]complex64) []uint) [][]uint {
	acc := make([][]uint, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex64: []complex64->[]uint8 */ func MapUint8ArrToComplex64ArrArr(m [][]complex64, f func([]complex64) []uint8) [][]uint8 {
	acc := make([][]uint8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex64: []complex64->[]uint16 */ func MapUint16ArrToComplex64ArrArr(m [][]complex64, f func([]complex64) []uint16) [][]uint16 {
	acc := make([][]uint16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex64: []complex64->[]uint32 */ func MapUint32ArrToComplex64ArrArr(m [][]complex64, f func([]complex64) []uint32) [][]uint32 {
	acc := make([][]uint32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex64: []complex64->[]uint64 */ func MapUint64ArrToComplex64ArrArr(m [][]complex64, f func([]complex64) []uint64) [][]uint64 {
	acc := make([][]uint64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex64: []complex64->[]uintptr */ func MapUintptrArrToComplex64ArrArr(m [][]complex64, f func([]complex64) []uintptr) [][]uintptr {
	acc := make([][]uintptr, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex64: []complex64->[]byte */ func MapByteArrToComplex64ArrArr(m [][]complex64, f func([]complex64) []byte) [][]byte {
	acc := make([][]byte, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex64: []complex64->[]rune */ func MapRuneArrToComplex64ArrArr(m [][]complex64, f func([]complex64) []rune) [][]rune {
	acc := make([][]rune, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex64: []complex64->[]float32 */ func MapFloat32ArrToComplex64ArrArr(m [][]complex64, f func([]complex64) []float32) [][]float32 {
	acc := make([][]float32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex64: []complex64->[]float64 */ func MapFloat64ArrToComplex64ArrArr(m [][]complex64, f func([]complex64) []float64) [][]float64 {
	acc := make([][]float64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex64: []complex64->[]complex64 */ func MapComplex64ArrToComplex64ArrArr(m [][]complex64, f func([]complex64) []complex64) [][]complex64 {
	acc := make([][]complex64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex64: []complex64->[]complex128 */ func MapComplex128ArrToComplex64ArrArr(m [][]complex64, f func([]complex64) []complex128) [][]complex128 {
	acc := make([][]complex128, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex64: []complex64->[]Any */ func MapAnyArrToComplex64ArrArr(m [][]complex64, f func([]complex64) []Any) [][]Any {
	acc := make([][]Any, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex64: []complex64->BoolList */ func MapBoolListToComplex64ArrArr(m [][]complex64, f func([]complex64) BoolList) []BoolList {
	acc := make([]BoolList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex64: []complex64->StringList */ func MapStringListToComplex64ArrArr(m [][]complex64, f func([]complex64) StringList) []StringList {
	acc := make([]StringList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex64: []complex64->IntList */ func MapIntListToComplex64ArrArr(m [][]complex64, f func([]complex64) IntList) []IntList {
	acc := make([]IntList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex64: []complex64->Int8List */ func MapInt8ListToComplex64ArrArr(m [][]complex64, f func([]complex64) Int8List) []Int8List {
	acc := make([]Int8List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex64: []complex64->Int16List */ func MapInt16ListToComplex64ArrArr(m [][]complex64, f func([]complex64) Int16List) []Int16List {
	acc := make([]Int16List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex64: []complex64->Int32List */ func MapInt32ListToComplex64ArrArr(m [][]complex64, f func([]complex64) Int32List) []Int32List {
	acc := make([]Int32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex64: []complex64->Int64List */ func MapInt64ListToComplex64ArrArr(m [][]complex64, f func([]complex64) Int64List) []Int64List {
	acc := make([]Int64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex64: []complex64->UintList */ func MapUintListToComplex64ArrArr(m [][]complex64, f func([]complex64) UintList) []UintList {
	acc := make([]UintList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex64: []complex64->Uint8List */ func MapUint8ListToComplex64ArrArr(m [][]complex64, f func([]complex64) Uint8List) []Uint8List {
	acc := make([]Uint8List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex64: []complex64->Uint16List */ func MapUint16ListToComplex64ArrArr(m [][]complex64, f func([]complex64) Uint16List) []Uint16List {
	acc := make([]Uint16List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex64: []complex64->Uint32List */ func MapUint32ListToComplex64ArrArr(m [][]complex64, f func([]complex64) Uint32List) []Uint32List {
	acc := make([]Uint32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex64: []complex64->Uint64List */ func MapUint64ListToComplex64ArrArr(m [][]complex64, f func([]complex64) Uint64List) []Uint64List {
	acc := make([]Uint64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex64: []complex64->UintptrList */ func MapUintptrListToComplex64ArrArr(m [][]complex64, f func([]complex64) UintptrList) []UintptrList {
	acc := make([]UintptrList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex64: []complex64->ByteList */ func MapByteListToComplex64ArrArr(m [][]complex64, f func([]complex64) ByteList) []ByteList {
	acc := make([]ByteList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex64: []complex64->RuneList */ func MapRuneListToComplex64ArrArr(m [][]complex64, f func([]complex64) RuneList) []RuneList {
	acc := make([]RuneList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex64: []complex64->Float32List */ func MapFloat32ListToComplex64ArrArr(m [][]complex64, f func([]complex64) Float32List) []Float32List {
	acc := make([]Float32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex64: []complex64->Float64List */ func MapFloat64ListToComplex64ArrArr(m [][]complex64, f func([]complex64) Float64List) []Float64List {
	acc := make([]Float64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex64: []complex64->Complex64List */ func MapComplex64ListToComplex64ArrArr(m [][]complex64, f func([]complex64) Complex64List) []Complex64List {
	acc := make([]Complex64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex64: []complex64->Complex128List */ func MapComplex128ListToComplex64ArrArr(m [][]complex64, f func([]complex64) Complex128List) []Complex128List {
	acc := make([]Complex128List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex64: []complex64->AnyList */ func MapAnyListToComplex64ArrArr(m [][]complex64, f func([]complex64) AnyList) []AnyList {
	acc := make([]AnyList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex128: []complex128->bool */ func MapBoolToComplex128ArrArr(m [][]complex128, f func([]complex128) bool) []bool {
	acc := make([]bool, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex128: []complex128->string */ func MapStringToComplex128ArrArr(m [][]complex128, f func([]complex128) string) []string {
	acc := make([]string, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex128: []complex128->int */ func MapIntToComplex128ArrArr(m [][]complex128, f func([]complex128) int) []int {
	acc := make([]int, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex128: []complex128->int8 */ func MapInt8ToComplex128ArrArr(m [][]complex128, f func([]complex128) int8) []int8 {
	acc := make([]int8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex128: []complex128->int16 */ func MapInt16ToComplex128ArrArr(m [][]complex128, f func([]complex128) int16) []int16 {
	acc := make([]int16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex128: []complex128->int32 */ func MapInt32ToComplex128ArrArr(m [][]complex128, f func([]complex128) int32) []int32 {
	acc := make([]int32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex128: []complex128->int64 */ func MapInt64ToComplex128ArrArr(m [][]complex128, f func([]complex128) int64) []int64 {
	acc := make([]int64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex128: []complex128->uint */ func MapUintToComplex128ArrArr(m [][]complex128, f func([]complex128) uint) []uint {
	acc := make([]uint, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex128: []complex128->uint8 */ func MapUint8ToComplex128ArrArr(m [][]complex128, f func([]complex128) uint8) []uint8 {
	acc := make([]uint8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex128: []complex128->uint16 */ func MapUint16ToComplex128ArrArr(m [][]complex128, f func([]complex128) uint16) []uint16 {
	acc := make([]uint16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex128: []complex128->uint32 */ func MapUint32ToComplex128ArrArr(m [][]complex128, f func([]complex128) uint32) []uint32 {
	acc := make([]uint32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex128: []complex128->uint64 */ func MapUint64ToComplex128ArrArr(m [][]complex128, f func([]complex128) uint64) []uint64 {
	acc := make([]uint64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex128: []complex128->uintptr */ func MapUintptrToComplex128ArrArr(m [][]complex128, f func([]complex128) uintptr) []uintptr {
	acc := make([]uintptr, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex128: []complex128->byte */ func MapByteToComplex128ArrArr(m [][]complex128, f func([]complex128) byte) []byte {
	acc := make([]byte, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex128: []complex128->rune */ func MapRuneToComplex128ArrArr(m [][]complex128, f func([]complex128) rune) []rune {
	acc := make([]rune, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex128: []complex128->float32 */ func MapFloat32ToComplex128ArrArr(m [][]complex128, f func([]complex128) float32) []float32 {
	acc := make([]float32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex128: []complex128->float64 */ func MapFloat64ToComplex128ArrArr(m [][]complex128, f func([]complex128) float64) []float64 {
	acc := make([]float64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex128: []complex128->complex64 */ func MapComplex64ToComplex128ArrArr(m [][]complex128, f func([]complex128) complex64) []complex64 {
	acc := make([]complex64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex128: []complex128->complex128 */ func MapComplex128ToComplex128ArrArr(m [][]complex128, f func([]complex128) complex128) []complex128 {
	acc := make([]complex128, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex128: []complex128->Any */ func MapAnyToComplex128ArrArr(m [][]complex128, f func([]complex128) Any) []Any {
	acc := make([]Any, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex128: []complex128->BoolOption */ func MapBoolOptionToComplex128ArrArr(m [][]complex128, f func([]complex128) BoolOption) []BoolOption {
	acc := make([]BoolOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex128: []complex128->StringOption */ func MapStringOptionToComplex128ArrArr(m [][]complex128, f func([]complex128) StringOption) []StringOption {
	acc := make([]StringOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex128: []complex128->IntOption */ func MapIntOptionToComplex128ArrArr(m [][]complex128, f func([]complex128) IntOption) []IntOption {
	acc := make([]IntOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex128: []complex128->Int8Option */ func MapInt8OptionToComplex128ArrArr(m [][]complex128, f func([]complex128) Int8Option) []Int8Option {
	acc := make([]Int8Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex128: []complex128->Int16Option */ func MapInt16OptionToComplex128ArrArr(m [][]complex128, f func([]complex128) Int16Option) []Int16Option {
	acc := make([]Int16Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex128: []complex128->Int32Option */ func MapInt32OptionToComplex128ArrArr(m [][]complex128, f func([]complex128) Int32Option) []Int32Option {
	acc := make([]Int32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex128: []complex128->Int64Option */ func MapInt64OptionToComplex128ArrArr(m [][]complex128, f func([]complex128) Int64Option) []Int64Option {
	acc := make([]Int64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex128: []complex128->UintOption */ func MapUintOptionToComplex128ArrArr(m [][]complex128, f func([]complex128) UintOption) []UintOption {
	acc := make([]UintOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex128: []complex128->Uint8Option */ func MapUint8OptionToComplex128ArrArr(m [][]complex128, f func([]complex128) Uint8Option) []Uint8Option {
	acc := make([]Uint8Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex128: []complex128->Uint16Option */ func MapUint16OptionToComplex128ArrArr(m [][]complex128, f func([]complex128) Uint16Option) []Uint16Option {
	acc := make([]Uint16Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex128: []complex128->Uint32Option */ func MapUint32OptionToComplex128ArrArr(m [][]complex128, f func([]complex128) Uint32Option) []Uint32Option {
	acc := make([]Uint32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex128: []complex128->Uint64Option */ func MapUint64OptionToComplex128ArrArr(m [][]complex128, f func([]complex128) Uint64Option) []Uint64Option {
	acc := make([]Uint64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex128: []complex128->UintptrOption */ func MapUintptrOptionToComplex128ArrArr(m [][]complex128, f func([]complex128) UintptrOption) []UintptrOption {
	acc := make([]UintptrOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex128: []complex128->ByteOption */ func MapByteOptionToComplex128ArrArr(m [][]complex128, f func([]complex128) ByteOption) []ByteOption {
	acc := make([]ByteOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex128: []complex128->RuneOption */ func MapRuneOptionToComplex128ArrArr(m [][]complex128, f func([]complex128) RuneOption) []RuneOption {
	acc := make([]RuneOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex128: []complex128->Float32Option */ func MapFloat32OptionToComplex128ArrArr(m [][]complex128, f func([]complex128) Float32Option) []Float32Option {
	acc := make([]Float32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex128: []complex128->Float64Option */ func MapFloat64OptionToComplex128ArrArr(m [][]complex128, f func([]complex128) Float64Option) []Float64Option {
	acc := make([]Float64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex128: []complex128->Complex64Option */ func MapComplex64OptionToComplex128ArrArr(m [][]complex128, f func([]complex128) Complex64Option) []Complex64Option {
	acc := make([]Complex64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex128: []complex128->Complex128Option */ func MapComplex128OptionToComplex128ArrArr(m [][]complex128, f func([]complex128) Complex128Option) []Complex128Option {
	acc := make([]Complex128Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex128: []complex128->AnyOption */ func MapAnyOptionToComplex128ArrArr(m [][]complex128, f func([]complex128) AnyOption) []AnyOption {
	acc := make([]AnyOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex128: []complex128->[]bool */ func MapBoolArrToComplex128ArrArr(m [][]complex128, f func([]complex128) []bool) [][]bool {
	acc := make([][]bool, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex128: []complex128->[]string */ func MapStringArrToComplex128ArrArr(m [][]complex128, f func([]complex128) []string) [][]string {
	acc := make([][]string, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex128: []complex128->[]int */ func MapIntArrToComplex128ArrArr(m [][]complex128, f func([]complex128) []int) [][]int {
	acc := make([][]int, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex128: []complex128->[]int8 */ func MapInt8ArrToComplex128ArrArr(m [][]complex128, f func([]complex128) []int8) [][]int8 {
	acc := make([][]int8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex128: []complex128->[]int16 */ func MapInt16ArrToComplex128ArrArr(m [][]complex128, f func([]complex128) []int16) [][]int16 {
	acc := make([][]int16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex128: []complex128->[]int32 */ func MapInt32ArrToComplex128ArrArr(m [][]complex128, f func([]complex128) []int32) [][]int32 {
	acc := make([][]int32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex128: []complex128->[]int64 */ func MapInt64ArrToComplex128ArrArr(m [][]complex128, f func([]complex128) []int64) [][]int64 {
	acc := make([][]int64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex128: []complex128->[]uint */ func MapUintArrToComplex128ArrArr(m [][]complex128, f func([]complex128) []uint) [][]uint {
	acc := make([][]uint, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex128: []complex128->[]uint8 */ func MapUint8ArrToComplex128ArrArr(m [][]complex128, f func([]complex128) []uint8) [][]uint8 {
	acc := make([][]uint8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex128: []complex128->[]uint16 */ func MapUint16ArrToComplex128ArrArr(m [][]complex128, f func([]complex128) []uint16) [][]uint16 {
	acc := make([][]uint16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex128: []complex128->[]uint32 */ func MapUint32ArrToComplex128ArrArr(m [][]complex128, f func([]complex128) []uint32) [][]uint32 {
	acc := make([][]uint32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex128: []complex128->[]uint64 */ func MapUint64ArrToComplex128ArrArr(m [][]complex128, f func([]complex128) []uint64) [][]uint64 {
	acc := make([][]uint64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex128: []complex128->[]uintptr */ func MapUintptrArrToComplex128ArrArr(m [][]complex128, f func([]complex128) []uintptr) [][]uintptr {
	acc := make([][]uintptr, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex128: []complex128->[]byte */ func MapByteArrToComplex128ArrArr(m [][]complex128, f func([]complex128) []byte) [][]byte {
	acc := make([][]byte, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex128: []complex128->[]rune */ func MapRuneArrToComplex128ArrArr(m [][]complex128, f func([]complex128) []rune) [][]rune {
	acc := make([][]rune, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex128: []complex128->[]float32 */ func MapFloat32ArrToComplex128ArrArr(m [][]complex128, f func([]complex128) []float32) [][]float32 {
	acc := make([][]float32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex128: []complex128->[]float64 */ func MapFloat64ArrToComplex128ArrArr(m [][]complex128, f func([]complex128) []float64) [][]float64 {
	acc := make([][]float64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex128: []complex128->[]complex64 */ func MapComplex64ArrToComplex128ArrArr(m [][]complex128, f func([]complex128) []complex64) [][]complex64 {
	acc := make([][]complex64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex128: []complex128->[]complex128 */ func MapComplex128ArrToComplex128ArrArr(m [][]complex128, f func([]complex128) []complex128) [][]complex128 {
	acc := make([][]complex128, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex128: []complex128->[]Any */ func MapAnyArrToComplex128ArrArr(m [][]complex128, f func([]complex128) []Any) [][]Any {
	acc := make([][]Any, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex128: []complex128->BoolList */ func MapBoolListToComplex128ArrArr(m [][]complex128, f func([]complex128) BoolList) []BoolList {
	acc := make([]BoolList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex128: []complex128->StringList */ func MapStringListToComplex128ArrArr(m [][]complex128, f func([]complex128) StringList) []StringList {
	acc := make([]StringList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex128: []complex128->IntList */ func MapIntListToComplex128ArrArr(m [][]complex128, f func([]complex128) IntList) []IntList {
	acc := make([]IntList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex128: []complex128->Int8List */ func MapInt8ListToComplex128ArrArr(m [][]complex128, f func([]complex128) Int8List) []Int8List {
	acc := make([]Int8List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex128: []complex128->Int16List */ func MapInt16ListToComplex128ArrArr(m [][]complex128, f func([]complex128) Int16List) []Int16List {
	acc := make([]Int16List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex128: []complex128->Int32List */ func MapInt32ListToComplex128ArrArr(m [][]complex128, f func([]complex128) Int32List) []Int32List {
	acc := make([]Int32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex128: []complex128->Int64List */ func MapInt64ListToComplex128ArrArr(m [][]complex128, f func([]complex128) Int64List) []Int64List {
	acc := make([]Int64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex128: []complex128->UintList */ func MapUintListToComplex128ArrArr(m [][]complex128, f func([]complex128) UintList) []UintList {
	acc := make([]UintList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex128: []complex128->Uint8List */ func MapUint8ListToComplex128ArrArr(m [][]complex128, f func([]complex128) Uint8List) []Uint8List {
	acc := make([]Uint8List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex128: []complex128->Uint16List */ func MapUint16ListToComplex128ArrArr(m [][]complex128, f func([]complex128) Uint16List) []Uint16List {
	acc := make([]Uint16List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex128: []complex128->Uint32List */ func MapUint32ListToComplex128ArrArr(m [][]complex128, f func([]complex128) Uint32List) []Uint32List {
	acc := make([]Uint32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex128: []complex128->Uint64List */ func MapUint64ListToComplex128ArrArr(m [][]complex128, f func([]complex128) Uint64List) []Uint64List {
	acc := make([]Uint64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex128: []complex128->UintptrList */ func MapUintptrListToComplex128ArrArr(m [][]complex128, f func([]complex128) UintptrList) []UintptrList {
	acc := make([]UintptrList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex128: []complex128->ByteList */ func MapByteListToComplex128ArrArr(m [][]complex128, f func([]complex128) ByteList) []ByteList {
	acc := make([]ByteList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex128: []complex128->RuneList */ func MapRuneListToComplex128ArrArr(m [][]complex128, f func([]complex128) RuneList) []RuneList {
	acc := make([]RuneList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex128: []complex128->Float32List */ func MapFloat32ListToComplex128ArrArr(m [][]complex128, f func([]complex128) Float32List) []Float32List {
	acc := make([]Float32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex128: []complex128->Float64List */ func MapFloat64ListToComplex128ArrArr(m [][]complex128, f func([]complex128) Float64List) []Float64List {
	acc := make([]Float64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex128: []complex128->Complex64List */ func MapComplex64ListToComplex128ArrArr(m [][]complex128, f func([]complex128) Complex64List) []Complex64List {
	acc := make([]Complex64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex128: []complex128->Complex128List */ func MapComplex128ListToComplex128ArrArr(m [][]complex128, f func([]complex128) Complex128List) []Complex128List {
	acc := make([]Complex128List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]complex128: []complex128->AnyList */ func MapAnyListToComplex128ArrArr(m [][]complex128, f func([]complex128) AnyList) []AnyList {
	acc := make([]AnyList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]Any: []Any->bool */ func MapBoolToAnyArrArr(m [][]Any, f func([]Any) bool) []bool {
	acc := make([]bool, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]Any: []Any->string */ func MapStringToAnyArrArr(m [][]Any, f func([]Any) string) []string {
	acc := make([]string, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]Any: []Any->int */ func MapIntToAnyArrArr(m [][]Any, f func([]Any) int) []int {
	acc := make([]int, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]Any: []Any->int8 */ func MapInt8ToAnyArrArr(m [][]Any, f func([]Any) int8) []int8 {
	acc := make([]int8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]Any: []Any->int16 */ func MapInt16ToAnyArrArr(m [][]Any, f func([]Any) int16) []int16 {
	acc := make([]int16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]Any: []Any->int32 */ func MapInt32ToAnyArrArr(m [][]Any, f func([]Any) int32) []int32 {
	acc := make([]int32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]Any: []Any->int64 */ func MapInt64ToAnyArrArr(m [][]Any, f func([]Any) int64) []int64 {
	acc := make([]int64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]Any: []Any->uint */ func MapUintToAnyArrArr(m [][]Any, f func([]Any) uint) []uint {
	acc := make([]uint, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]Any: []Any->uint8 */ func MapUint8ToAnyArrArr(m [][]Any, f func([]Any) uint8) []uint8 {
	acc := make([]uint8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]Any: []Any->uint16 */ func MapUint16ToAnyArrArr(m [][]Any, f func([]Any) uint16) []uint16 {
	acc := make([]uint16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]Any: []Any->uint32 */ func MapUint32ToAnyArrArr(m [][]Any, f func([]Any) uint32) []uint32 {
	acc := make([]uint32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]Any: []Any->uint64 */ func MapUint64ToAnyArrArr(m [][]Any, f func([]Any) uint64) []uint64 {
	acc := make([]uint64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]Any: []Any->uintptr */ func MapUintptrToAnyArrArr(m [][]Any, f func([]Any) uintptr) []uintptr {
	acc := make([]uintptr, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]Any: []Any->byte */ func MapByteToAnyArrArr(m [][]Any, f func([]Any) byte) []byte {
	acc := make([]byte, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]Any: []Any->rune */ func MapRuneToAnyArrArr(m [][]Any, f func([]Any) rune) []rune {
	acc := make([]rune, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]Any: []Any->float32 */ func MapFloat32ToAnyArrArr(m [][]Any, f func([]Any) float32) []float32 {
	acc := make([]float32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]Any: []Any->float64 */ func MapFloat64ToAnyArrArr(m [][]Any, f func([]Any) float64) []float64 {
	acc := make([]float64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]Any: []Any->complex64 */ func MapComplex64ToAnyArrArr(m [][]Any, f func([]Any) complex64) []complex64 {
	acc := make([]complex64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]Any: []Any->complex128 */ func MapComplex128ToAnyArrArr(m [][]Any, f func([]Any) complex128) []complex128 {
	acc := make([]complex128, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]Any: []Any->Any */ func MapAnyToAnyArrArr(m [][]Any, f func([]Any) Any) []Any {
	acc := make([]Any, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]Any: []Any->BoolOption */ func MapBoolOptionToAnyArrArr(m [][]Any, f func([]Any) BoolOption) []BoolOption {
	acc := make([]BoolOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]Any: []Any->StringOption */ func MapStringOptionToAnyArrArr(m [][]Any, f func([]Any) StringOption) []StringOption {
	acc := make([]StringOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]Any: []Any->IntOption */ func MapIntOptionToAnyArrArr(m [][]Any, f func([]Any) IntOption) []IntOption {
	acc := make([]IntOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]Any: []Any->Int8Option */ func MapInt8OptionToAnyArrArr(m [][]Any, f func([]Any) Int8Option) []Int8Option {
	acc := make([]Int8Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]Any: []Any->Int16Option */ func MapInt16OptionToAnyArrArr(m [][]Any, f func([]Any) Int16Option) []Int16Option {
	acc := make([]Int16Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]Any: []Any->Int32Option */ func MapInt32OptionToAnyArrArr(m [][]Any, f func([]Any) Int32Option) []Int32Option {
	acc := make([]Int32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]Any: []Any->Int64Option */ func MapInt64OptionToAnyArrArr(m [][]Any, f func([]Any) Int64Option) []Int64Option {
	acc := make([]Int64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]Any: []Any->UintOption */ func MapUintOptionToAnyArrArr(m [][]Any, f func([]Any) UintOption) []UintOption {
	acc := make([]UintOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]Any: []Any->Uint8Option */ func MapUint8OptionToAnyArrArr(m [][]Any, f func([]Any) Uint8Option) []Uint8Option {
	acc := make([]Uint8Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]Any: []Any->Uint16Option */ func MapUint16OptionToAnyArrArr(m [][]Any, f func([]Any) Uint16Option) []Uint16Option {
	acc := make([]Uint16Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]Any: []Any->Uint32Option */ func MapUint32OptionToAnyArrArr(m [][]Any, f func([]Any) Uint32Option) []Uint32Option {
	acc := make([]Uint32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]Any: []Any->Uint64Option */ func MapUint64OptionToAnyArrArr(m [][]Any, f func([]Any) Uint64Option) []Uint64Option {
	acc := make([]Uint64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]Any: []Any->UintptrOption */ func MapUintptrOptionToAnyArrArr(m [][]Any, f func([]Any) UintptrOption) []UintptrOption {
	acc := make([]UintptrOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]Any: []Any->ByteOption */ func MapByteOptionToAnyArrArr(m [][]Any, f func([]Any) ByteOption) []ByteOption {
	acc := make([]ByteOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]Any: []Any->RuneOption */ func MapRuneOptionToAnyArrArr(m [][]Any, f func([]Any) RuneOption) []RuneOption {
	acc := make([]RuneOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]Any: []Any->Float32Option */ func MapFloat32OptionToAnyArrArr(m [][]Any, f func([]Any) Float32Option) []Float32Option {
	acc := make([]Float32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]Any: []Any->Float64Option */ func MapFloat64OptionToAnyArrArr(m [][]Any, f func([]Any) Float64Option) []Float64Option {
	acc := make([]Float64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]Any: []Any->Complex64Option */ func MapComplex64OptionToAnyArrArr(m [][]Any, f func([]Any) Complex64Option) []Complex64Option {
	acc := make([]Complex64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]Any: []Any->Complex128Option */ func MapComplex128OptionToAnyArrArr(m [][]Any, f func([]Any) Complex128Option) []Complex128Option {
	acc := make([]Complex128Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]Any: []Any->AnyOption */ func MapAnyOptionToAnyArrArr(m [][]Any, f func([]Any) AnyOption) []AnyOption {
	acc := make([]AnyOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]Any: []Any->[]bool */ func MapBoolArrToAnyArrArr(m [][]Any, f func([]Any) []bool) [][]bool {
	acc := make([][]bool, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]Any: []Any->[]string */ func MapStringArrToAnyArrArr(m [][]Any, f func([]Any) []string) [][]string {
	acc := make([][]string, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]Any: []Any->[]int */ func MapIntArrToAnyArrArr(m [][]Any, f func([]Any) []int) [][]int {
	acc := make([][]int, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]Any: []Any->[]int8 */ func MapInt8ArrToAnyArrArr(m [][]Any, f func([]Any) []int8) [][]int8 {
	acc := make([][]int8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]Any: []Any->[]int16 */ func MapInt16ArrToAnyArrArr(m [][]Any, f func([]Any) []int16) [][]int16 {
	acc := make([][]int16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]Any: []Any->[]int32 */ func MapInt32ArrToAnyArrArr(m [][]Any, f func([]Any) []int32) [][]int32 {
	acc := make([][]int32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]Any: []Any->[]int64 */ func MapInt64ArrToAnyArrArr(m [][]Any, f func([]Any) []int64) [][]int64 {
	acc := make([][]int64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]Any: []Any->[]uint */ func MapUintArrToAnyArrArr(m [][]Any, f func([]Any) []uint) [][]uint {
	acc := make([][]uint, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]Any: []Any->[]uint8 */ func MapUint8ArrToAnyArrArr(m [][]Any, f func([]Any) []uint8) [][]uint8 {
	acc := make([][]uint8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]Any: []Any->[]uint16 */ func MapUint16ArrToAnyArrArr(m [][]Any, f func([]Any) []uint16) [][]uint16 {
	acc := make([][]uint16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]Any: []Any->[]uint32 */ func MapUint32ArrToAnyArrArr(m [][]Any, f func([]Any) []uint32) [][]uint32 {
	acc := make([][]uint32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]Any: []Any->[]uint64 */ func MapUint64ArrToAnyArrArr(m [][]Any, f func([]Any) []uint64) [][]uint64 {
	acc := make([][]uint64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]Any: []Any->[]uintptr */ func MapUintptrArrToAnyArrArr(m [][]Any, f func([]Any) []uintptr) [][]uintptr {
	acc := make([][]uintptr, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]Any: []Any->[]byte */ func MapByteArrToAnyArrArr(m [][]Any, f func([]Any) []byte) [][]byte {
	acc := make([][]byte, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]Any: []Any->[]rune */ func MapRuneArrToAnyArrArr(m [][]Any, f func([]Any) []rune) [][]rune {
	acc := make([][]rune, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]Any: []Any->[]float32 */ func MapFloat32ArrToAnyArrArr(m [][]Any, f func([]Any) []float32) [][]float32 {
	acc := make([][]float32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]Any: []Any->[]float64 */ func MapFloat64ArrToAnyArrArr(m [][]Any, f func([]Any) []float64) [][]float64 {
	acc := make([][]float64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]Any: []Any->[]complex64 */ func MapComplex64ArrToAnyArrArr(m [][]Any, f func([]Any) []complex64) [][]complex64 {
	acc := make([][]complex64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]Any: []Any->[]complex128 */ func MapComplex128ArrToAnyArrArr(m [][]Any, f func([]Any) []complex128) [][]complex128 {
	acc := make([][]complex128, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]Any: []Any->[]Any */ func MapAnyArrToAnyArrArr(m [][]Any, f func([]Any) []Any) [][]Any {
	acc := make([][]Any, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]Any: []Any->BoolList */ func MapBoolListToAnyArrArr(m [][]Any, f func([]Any) BoolList) []BoolList {
	acc := make([]BoolList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]Any: []Any->StringList */ func MapStringListToAnyArrArr(m [][]Any, f func([]Any) StringList) []StringList {
	acc := make([]StringList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]Any: []Any->IntList */ func MapIntListToAnyArrArr(m [][]Any, f func([]Any) IntList) []IntList {
	acc := make([]IntList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]Any: []Any->Int8List */ func MapInt8ListToAnyArrArr(m [][]Any, f func([]Any) Int8List) []Int8List {
	acc := make([]Int8List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]Any: []Any->Int16List */ func MapInt16ListToAnyArrArr(m [][]Any, f func([]Any) Int16List) []Int16List {
	acc := make([]Int16List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]Any: []Any->Int32List */ func MapInt32ListToAnyArrArr(m [][]Any, f func([]Any) Int32List) []Int32List {
	acc := make([]Int32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]Any: []Any->Int64List */ func MapInt64ListToAnyArrArr(m [][]Any, f func([]Any) Int64List) []Int64List {
	acc := make([]Int64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]Any: []Any->UintList */ func MapUintListToAnyArrArr(m [][]Any, f func([]Any) UintList) []UintList {
	acc := make([]UintList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]Any: []Any->Uint8List */ func MapUint8ListToAnyArrArr(m [][]Any, f func([]Any) Uint8List) []Uint8List {
	acc := make([]Uint8List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]Any: []Any->Uint16List */ func MapUint16ListToAnyArrArr(m [][]Any, f func([]Any) Uint16List) []Uint16List {
	acc := make([]Uint16List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]Any: []Any->Uint32List */ func MapUint32ListToAnyArrArr(m [][]Any, f func([]Any) Uint32List) []Uint32List {
	acc := make([]Uint32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]Any: []Any->Uint64List */ func MapUint64ListToAnyArrArr(m [][]Any, f func([]Any) Uint64List) []Uint64List {
	acc := make([]Uint64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]Any: []Any->UintptrList */ func MapUintptrListToAnyArrArr(m [][]Any, f func([]Any) UintptrList) []UintptrList {
	acc := make([]UintptrList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]Any: []Any->ByteList */ func MapByteListToAnyArrArr(m [][]Any, f func([]Any) ByteList) []ByteList {
	acc := make([]ByteList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]Any: []Any->RuneList */ func MapRuneListToAnyArrArr(m [][]Any, f func([]Any) RuneList) []RuneList {
	acc := make([]RuneList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]Any: []Any->Float32List */ func MapFloat32ListToAnyArrArr(m [][]Any, f func([]Any) Float32List) []Float32List {
	acc := make([]Float32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]Any: []Any->Float64List */ func MapFloat64ListToAnyArrArr(m [][]Any, f func([]Any) Float64List) []Float64List {
	acc := make([]Float64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]Any: []Any->Complex64List */ func MapComplex64ListToAnyArrArr(m [][]Any, f func([]Any) Complex64List) []Complex64List {
	acc := make([]Complex64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]Any: []Any->Complex128List */ func MapComplex128ListToAnyArrArr(m [][]Any, f func([]Any) Complex128List) []Complex128List {
	acc := make([]Complex128List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* [][]Any: []Any->AnyList */ func MapAnyListToAnyArrArr(m [][]Any, f func([]Any) AnyList) []AnyList {
	acc := make([]AnyList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []BoolOption: BoolOption->bool */ func MapBoolToBoolOptionArr(m []BoolOption, f func(BoolOption) bool) []bool {
	acc := make([]bool, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []BoolOption: BoolOption->string */ func MapStringToBoolOptionArr(m []BoolOption, f func(BoolOption) string) []string {
	acc := make([]string, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []BoolOption: BoolOption->int */ func MapIntToBoolOptionArr(m []BoolOption, f func(BoolOption) int) []int {
	acc := make([]int, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []BoolOption: BoolOption->int8 */ func MapInt8ToBoolOptionArr(m []BoolOption, f func(BoolOption) int8) []int8 {
	acc := make([]int8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []BoolOption: BoolOption->int16 */ func MapInt16ToBoolOptionArr(m []BoolOption, f func(BoolOption) int16) []int16 {
	acc := make([]int16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []BoolOption: BoolOption->int32 */ func MapInt32ToBoolOptionArr(m []BoolOption, f func(BoolOption) int32) []int32 {
	acc := make([]int32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []BoolOption: BoolOption->int64 */ func MapInt64ToBoolOptionArr(m []BoolOption, f func(BoolOption) int64) []int64 {
	acc := make([]int64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []BoolOption: BoolOption->uint */ func MapUintToBoolOptionArr(m []BoolOption, f func(BoolOption) uint) []uint {
	acc := make([]uint, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []BoolOption: BoolOption->uint8 */ func MapUint8ToBoolOptionArr(m []BoolOption, f func(BoolOption) uint8) []uint8 {
	acc := make([]uint8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []BoolOption: BoolOption->uint16 */ func MapUint16ToBoolOptionArr(m []BoolOption, f func(BoolOption) uint16) []uint16 {
	acc := make([]uint16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []BoolOption: BoolOption->uint32 */ func MapUint32ToBoolOptionArr(m []BoolOption, f func(BoolOption) uint32) []uint32 {
	acc := make([]uint32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []BoolOption: BoolOption->uint64 */ func MapUint64ToBoolOptionArr(m []BoolOption, f func(BoolOption) uint64) []uint64 {
	acc := make([]uint64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []BoolOption: BoolOption->uintptr */ func MapUintptrToBoolOptionArr(m []BoolOption, f func(BoolOption) uintptr) []uintptr {
	acc := make([]uintptr, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []BoolOption: BoolOption->byte */ func MapByteToBoolOptionArr(m []BoolOption, f func(BoolOption) byte) []byte {
	acc := make([]byte, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []BoolOption: BoolOption->rune */ func MapRuneToBoolOptionArr(m []BoolOption, f func(BoolOption) rune) []rune {
	acc := make([]rune, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []BoolOption: BoolOption->float32 */ func MapFloat32ToBoolOptionArr(m []BoolOption, f func(BoolOption) float32) []float32 {
	acc := make([]float32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []BoolOption: BoolOption->float64 */ func MapFloat64ToBoolOptionArr(m []BoolOption, f func(BoolOption) float64) []float64 {
	acc := make([]float64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []BoolOption: BoolOption->complex64 */ func MapComplex64ToBoolOptionArr(m []BoolOption, f func(BoolOption) complex64) []complex64 {
	acc := make([]complex64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []BoolOption: BoolOption->complex128 */ func MapComplex128ToBoolOptionArr(m []BoolOption, f func(BoolOption) complex128) []complex128 {
	acc := make([]complex128, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []BoolOption: BoolOption->Any */ func MapAnyToBoolOptionArr(m []BoolOption, f func(BoolOption) Any) []Any {
	acc := make([]Any, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []BoolOption: BoolOption->BoolOption */ func MapBoolOptionToBoolOptionArr(m []BoolOption, f func(BoolOption) BoolOption) []BoolOption {
	acc := make([]BoolOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []BoolOption: BoolOption->StringOption */ func MapStringOptionToBoolOptionArr(m []BoolOption, f func(BoolOption) StringOption) []StringOption {
	acc := make([]StringOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []BoolOption: BoolOption->IntOption */ func MapIntOptionToBoolOptionArr(m []BoolOption, f func(BoolOption) IntOption) []IntOption {
	acc := make([]IntOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []BoolOption: BoolOption->Int8Option */ func MapInt8OptionToBoolOptionArr(m []BoolOption, f func(BoolOption) Int8Option) []Int8Option {
	acc := make([]Int8Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []BoolOption: BoolOption->Int16Option */ func MapInt16OptionToBoolOptionArr(m []BoolOption, f func(BoolOption) Int16Option) []Int16Option {
	acc := make([]Int16Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []BoolOption: BoolOption->Int32Option */ func MapInt32OptionToBoolOptionArr(m []BoolOption, f func(BoolOption) Int32Option) []Int32Option {
	acc := make([]Int32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []BoolOption: BoolOption->Int64Option */ func MapInt64OptionToBoolOptionArr(m []BoolOption, f func(BoolOption) Int64Option) []Int64Option {
	acc := make([]Int64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []BoolOption: BoolOption->UintOption */ func MapUintOptionToBoolOptionArr(m []BoolOption, f func(BoolOption) UintOption) []UintOption {
	acc := make([]UintOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []BoolOption: BoolOption->Uint8Option */ func MapUint8OptionToBoolOptionArr(m []BoolOption, f func(BoolOption) Uint8Option) []Uint8Option {
	acc := make([]Uint8Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []BoolOption: BoolOption->Uint16Option */ func MapUint16OptionToBoolOptionArr(m []BoolOption, f func(BoolOption) Uint16Option) []Uint16Option {
	acc := make([]Uint16Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []BoolOption: BoolOption->Uint32Option */ func MapUint32OptionToBoolOptionArr(m []BoolOption, f func(BoolOption) Uint32Option) []Uint32Option {
	acc := make([]Uint32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []BoolOption: BoolOption->Uint64Option */ func MapUint64OptionToBoolOptionArr(m []BoolOption, f func(BoolOption) Uint64Option) []Uint64Option {
	acc := make([]Uint64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []BoolOption: BoolOption->UintptrOption */ func MapUintptrOptionToBoolOptionArr(m []BoolOption, f func(BoolOption) UintptrOption) []UintptrOption {
	acc := make([]UintptrOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []BoolOption: BoolOption->ByteOption */ func MapByteOptionToBoolOptionArr(m []BoolOption, f func(BoolOption) ByteOption) []ByteOption {
	acc := make([]ByteOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []BoolOption: BoolOption->RuneOption */ func MapRuneOptionToBoolOptionArr(m []BoolOption, f func(BoolOption) RuneOption) []RuneOption {
	acc := make([]RuneOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []BoolOption: BoolOption->Float32Option */ func MapFloat32OptionToBoolOptionArr(m []BoolOption, f func(BoolOption) Float32Option) []Float32Option {
	acc := make([]Float32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []BoolOption: BoolOption->Float64Option */ func MapFloat64OptionToBoolOptionArr(m []BoolOption, f func(BoolOption) Float64Option) []Float64Option {
	acc := make([]Float64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []BoolOption: BoolOption->Complex64Option */ func MapComplex64OptionToBoolOptionArr(m []BoolOption, f func(BoolOption) Complex64Option) []Complex64Option {
	acc := make([]Complex64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []BoolOption: BoolOption->Complex128Option */ func MapComplex128OptionToBoolOptionArr(m []BoolOption, f func(BoolOption) Complex128Option) []Complex128Option {
	acc := make([]Complex128Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []BoolOption: BoolOption->AnyOption */ func MapAnyOptionToBoolOptionArr(m []BoolOption, f func(BoolOption) AnyOption) []AnyOption {
	acc := make([]AnyOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []BoolOption: BoolOption->[]bool */ func MapBoolArrToBoolOptionArr(m []BoolOption, f func(BoolOption) []bool) [][]bool {
	acc := make([][]bool, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []BoolOption: BoolOption->[]string */ func MapStringArrToBoolOptionArr(m []BoolOption, f func(BoolOption) []string) [][]string {
	acc := make([][]string, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []BoolOption: BoolOption->[]int */ func MapIntArrToBoolOptionArr(m []BoolOption, f func(BoolOption) []int) [][]int {
	acc := make([][]int, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []BoolOption: BoolOption->[]int8 */ func MapInt8ArrToBoolOptionArr(m []BoolOption, f func(BoolOption) []int8) [][]int8 {
	acc := make([][]int8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []BoolOption: BoolOption->[]int16 */ func MapInt16ArrToBoolOptionArr(m []BoolOption, f func(BoolOption) []int16) [][]int16 {
	acc := make([][]int16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []BoolOption: BoolOption->[]int32 */ func MapInt32ArrToBoolOptionArr(m []BoolOption, f func(BoolOption) []int32) [][]int32 {
	acc := make([][]int32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []BoolOption: BoolOption->[]int64 */ func MapInt64ArrToBoolOptionArr(m []BoolOption, f func(BoolOption) []int64) [][]int64 {
	acc := make([][]int64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []BoolOption: BoolOption->[]uint */ func MapUintArrToBoolOptionArr(m []BoolOption, f func(BoolOption) []uint) [][]uint {
	acc := make([][]uint, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []BoolOption: BoolOption->[]uint8 */ func MapUint8ArrToBoolOptionArr(m []BoolOption, f func(BoolOption) []uint8) [][]uint8 {
	acc := make([][]uint8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []BoolOption: BoolOption->[]uint16 */ func MapUint16ArrToBoolOptionArr(m []BoolOption, f func(BoolOption) []uint16) [][]uint16 {
	acc := make([][]uint16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []BoolOption: BoolOption->[]uint32 */ func MapUint32ArrToBoolOptionArr(m []BoolOption, f func(BoolOption) []uint32) [][]uint32 {
	acc := make([][]uint32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []BoolOption: BoolOption->[]uint64 */ func MapUint64ArrToBoolOptionArr(m []BoolOption, f func(BoolOption) []uint64) [][]uint64 {
	acc := make([][]uint64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []BoolOption: BoolOption->[]uintptr */ func MapUintptrArrToBoolOptionArr(m []BoolOption, f func(BoolOption) []uintptr) [][]uintptr {
	acc := make([][]uintptr, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []BoolOption: BoolOption->[]byte */ func MapByteArrToBoolOptionArr(m []BoolOption, f func(BoolOption) []byte) [][]byte {
	acc := make([][]byte, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []BoolOption: BoolOption->[]rune */ func MapRuneArrToBoolOptionArr(m []BoolOption, f func(BoolOption) []rune) [][]rune {
	acc := make([][]rune, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []BoolOption: BoolOption->[]float32 */ func MapFloat32ArrToBoolOptionArr(m []BoolOption, f func(BoolOption) []float32) [][]float32 {
	acc := make([][]float32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []BoolOption: BoolOption->[]float64 */ func MapFloat64ArrToBoolOptionArr(m []BoolOption, f func(BoolOption) []float64) [][]float64 {
	acc := make([][]float64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []BoolOption: BoolOption->[]complex64 */ func MapComplex64ArrToBoolOptionArr(m []BoolOption, f func(BoolOption) []complex64) [][]complex64 {
	acc := make([][]complex64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []BoolOption: BoolOption->[]complex128 */ func MapComplex128ArrToBoolOptionArr(m []BoolOption, f func(BoolOption) []complex128) [][]complex128 {
	acc := make([][]complex128, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []BoolOption: BoolOption->[]Any */ func MapAnyArrToBoolOptionArr(m []BoolOption, f func(BoolOption) []Any) [][]Any {
	acc := make([][]Any, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []BoolOption: BoolOption->BoolList */ func MapBoolListToBoolOptionArr(m []BoolOption, f func(BoolOption) BoolList) []BoolList {
	acc := make([]BoolList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []BoolOption: BoolOption->StringList */ func MapStringListToBoolOptionArr(m []BoolOption, f func(BoolOption) StringList) []StringList {
	acc := make([]StringList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []BoolOption: BoolOption->IntList */ func MapIntListToBoolOptionArr(m []BoolOption, f func(BoolOption) IntList) []IntList {
	acc := make([]IntList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []BoolOption: BoolOption->Int8List */ func MapInt8ListToBoolOptionArr(m []BoolOption, f func(BoolOption) Int8List) []Int8List {
	acc := make([]Int8List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []BoolOption: BoolOption->Int16List */ func MapInt16ListToBoolOptionArr(m []BoolOption, f func(BoolOption) Int16List) []Int16List {
	acc := make([]Int16List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []BoolOption: BoolOption->Int32List */ func MapInt32ListToBoolOptionArr(m []BoolOption, f func(BoolOption) Int32List) []Int32List {
	acc := make([]Int32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []BoolOption: BoolOption->Int64List */ func MapInt64ListToBoolOptionArr(m []BoolOption, f func(BoolOption) Int64List) []Int64List {
	acc := make([]Int64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []BoolOption: BoolOption->UintList */ func MapUintListToBoolOptionArr(m []BoolOption, f func(BoolOption) UintList) []UintList {
	acc := make([]UintList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []BoolOption: BoolOption->Uint8List */ func MapUint8ListToBoolOptionArr(m []BoolOption, f func(BoolOption) Uint8List) []Uint8List {
	acc := make([]Uint8List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []BoolOption: BoolOption->Uint16List */ func MapUint16ListToBoolOptionArr(m []BoolOption, f func(BoolOption) Uint16List) []Uint16List {
	acc := make([]Uint16List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []BoolOption: BoolOption->Uint32List */ func MapUint32ListToBoolOptionArr(m []BoolOption, f func(BoolOption) Uint32List) []Uint32List {
	acc := make([]Uint32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []BoolOption: BoolOption->Uint64List */ func MapUint64ListToBoolOptionArr(m []BoolOption, f func(BoolOption) Uint64List) []Uint64List {
	acc := make([]Uint64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []BoolOption: BoolOption->UintptrList */ func MapUintptrListToBoolOptionArr(m []BoolOption, f func(BoolOption) UintptrList) []UintptrList {
	acc := make([]UintptrList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []BoolOption: BoolOption->ByteList */ func MapByteListToBoolOptionArr(m []BoolOption, f func(BoolOption) ByteList) []ByteList {
	acc := make([]ByteList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []BoolOption: BoolOption->RuneList */ func MapRuneListToBoolOptionArr(m []BoolOption, f func(BoolOption) RuneList) []RuneList {
	acc := make([]RuneList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []BoolOption: BoolOption->Float32List */ func MapFloat32ListToBoolOptionArr(m []BoolOption, f func(BoolOption) Float32List) []Float32List {
	acc := make([]Float32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []BoolOption: BoolOption->Float64List */ func MapFloat64ListToBoolOptionArr(m []BoolOption, f func(BoolOption) Float64List) []Float64List {
	acc := make([]Float64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []BoolOption: BoolOption->Complex64List */ func MapComplex64ListToBoolOptionArr(m []BoolOption, f func(BoolOption) Complex64List) []Complex64List {
	acc := make([]Complex64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []BoolOption: BoolOption->Complex128List */ func MapComplex128ListToBoolOptionArr(m []BoolOption, f func(BoolOption) Complex128List) []Complex128List {
	acc := make([]Complex128List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []BoolOption: BoolOption->AnyList */ func MapAnyListToBoolOptionArr(m []BoolOption, f func(BoolOption) AnyList) []AnyList {
	acc := make([]AnyList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []StringOption: StringOption->bool */ func MapBoolToStringOptionArr(m []StringOption, f func(StringOption) bool) []bool {
	acc := make([]bool, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []StringOption: StringOption->string */ func MapStringToStringOptionArr(m []StringOption, f func(StringOption) string) []string {
	acc := make([]string, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []StringOption: StringOption->int */ func MapIntToStringOptionArr(m []StringOption, f func(StringOption) int) []int {
	acc := make([]int, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []StringOption: StringOption->int8 */ func MapInt8ToStringOptionArr(m []StringOption, f func(StringOption) int8) []int8 {
	acc := make([]int8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []StringOption: StringOption->int16 */ func MapInt16ToStringOptionArr(m []StringOption, f func(StringOption) int16) []int16 {
	acc := make([]int16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []StringOption: StringOption->int32 */ func MapInt32ToStringOptionArr(m []StringOption, f func(StringOption) int32) []int32 {
	acc := make([]int32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []StringOption: StringOption->int64 */ func MapInt64ToStringOptionArr(m []StringOption, f func(StringOption) int64) []int64 {
	acc := make([]int64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []StringOption: StringOption->uint */ func MapUintToStringOptionArr(m []StringOption, f func(StringOption) uint) []uint {
	acc := make([]uint, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []StringOption: StringOption->uint8 */ func MapUint8ToStringOptionArr(m []StringOption, f func(StringOption) uint8) []uint8 {
	acc := make([]uint8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []StringOption: StringOption->uint16 */ func MapUint16ToStringOptionArr(m []StringOption, f func(StringOption) uint16) []uint16 {
	acc := make([]uint16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []StringOption: StringOption->uint32 */ func MapUint32ToStringOptionArr(m []StringOption, f func(StringOption) uint32) []uint32 {
	acc := make([]uint32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []StringOption: StringOption->uint64 */ func MapUint64ToStringOptionArr(m []StringOption, f func(StringOption) uint64) []uint64 {
	acc := make([]uint64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []StringOption: StringOption->uintptr */ func MapUintptrToStringOptionArr(m []StringOption, f func(StringOption) uintptr) []uintptr {
	acc := make([]uintptr, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []StringOption: StringOption->byte */ func MapByteToStringOptionArr(m []StringOption, f func(StringOption) byte) []byte {
	acc := make([]byte, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []StringOption: StringOption->rune */ func MapRuneToStringOptionArr(m []StringOption, f func(StringOption) rune) []rune {
	acc := make([]rune, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []StringOption: StringOption->float32 */ func MapFloat32ToStringOptionArr(m []StringOption, f func(StringOption) float32) []float32 {
	acc := make([]float32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []StringOption: StringOption->float64 */ func MapFloat64ToStringOptionArr(m []StringOption, f func(StringOption) float64) []float64 {
	acc := make([]float64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []StringOption: StringOption->complex64 */ func MapComplex64ToStringOptionArr(m []StringOption, f func(StringOption) complex64) []complex64 {
	acc := make([]complex64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []StringOption: StringOption->complex128 */ func MapComplex128ToStringOptionArr(m []StringOption, f func(StringOption) complex128) []complex128 {
	acc := make([]complex128, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []StringOption: StringOption->Any */ func MapAnyToStringOptionArr(m []StringOption, f func(StringOption) Any) []Any {
	acc := make([]Any, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []StringOption: StringOption->BoolOption */ func MapBoolOptionToStringOptionArr(m []StringOption, f func(StringOption) BoolOption) []BoolOption {
	acc := make([]BoolOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []StringOption: StringOption->StringOption */ func MapStringOptionToStringOptionArr(m []StringOption, f func(StringOption) StringOption) []StringOption {
	acc := make([]StringOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []StringOption: StringOption->IntOption */ func MapIntOptionToStringOptionArr(m []StringOption, f func(StringOption) IntOption) []IntOption {
	acc := make([]IntOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []StringOption: StringOption->Int8Option */ func MapInt8OptionToStringOptionArr(m []StringOption, f func(StringOption) Int8Option) []Int8Option {
	acc := make([]Int8Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []StringOption: StringOption->Int16Option */ func MapInt16OptionToStringOptionArr(m []StringOption, f func(StringOption) Int16Option) []Int16Option {
	acc := make([]Int16Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []StringOption: StringOption->Int32Option */ func MapInt32OptionToStringOptionArr(m []StringOption, f func(StringOption) Int32Option) []Int32Option {
	acc := make([]Int32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []StringOption: StringOption->Int64Option */ func MapInt64OptionToStringOptionArr(m []StringOption, f func(StringOption) Int64Option) []Int64Option {
	acc := make([]Int64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []StringOption: StringOption->UintOption */ func MapUintOptionToStringOptionArr(m []StringOption, f func(StringOption) UintOption) []UintOption {
	acc := make([]UintOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []StringOption: StringOption->Uint8Option */ func MapUint8OptionToStringOptionArr(m []StringOption, f func(StringOption) Uint8Option) []Uint8Option {
	acc := make([]Uint8Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []StringOption: StringOption->Uint16Option */ func MapUint16OptionToStringOptionArr(m []StringOption, f func(StringOption) Uint16Option) []Uint16Option {
	acc := make([]Uint16Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []StringOption: StringOption->Uint32Option */ func MapUint32OptionToStringOptionArr(m []StringOption, f func(StringOption) Uint32Option) []Uint32Option {
	acc := make([]Uint32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []StringOption: StringOption->Uint64Option */ func MapUint64OptionToStringOptionArr(m []StringOption, f func(StringOption) Uint64Option) []Uint64Option {
	acc := make([]Uint64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []StringOption: StringOption->UintptrOption */ func MapUintptrOptionToStringOptionArr(m []StringOption, f func(StringOption) UintptrOption) []UintptrOption {
	acc := make([]UintptrOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []StringOption: StringOption->ByteOption */ func MapByteOptionToStringOptionArr(m []StringOption, f func(StringOption) ByteOption) []ByteOption {
	acc := make([]ByteOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []StringOption: StringOption->RuneOption */ func MapRuneOptionToStringOptionArr(m []StringOption, f func(StringOption) RuneOption) []RuneOption {
	acc := make([]RuneOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []StringOption: StringOption->Float32Option */ func MapFloat32OptionToStringOptionArr(m []StringOption, f func(StringOption) Float32Option) []Float32Option {
	acc := make([]Float32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []StringOption: StringOption->Float64Option */ func MapFloat64OptionToStringOptionArr(m []StringOption, f func(StringOption) Float64Option) []Float64Option {
	acc := make([]Float64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []StringOption: StringOption->Complex64Option */ func MapComplex64OptionToStringOptionArr(m []StringOption, f func(StringOption) Complex64Option) []Complex64Option {
	acc := make([]Complex64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []StringOption: StringOption->Complex128Option */ func MapComplex128OptionToStringOptionArr(m []StringOption, f func(StringOption) Complex128Option) []Complex128Option {
	acc := make([]Complex128Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []StringOption: StringOption->AnyOption */ func MapAnyOptionToStringOptionArr(m []StringOption, f func(StringOption) AnyOption) []AnyOption {
	acc := make([]AnyOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []StringOption: StringOption->[]bool */ func MapBoolArrToStringOptionArr(m []StringOption, f func(StringOption) []bool) [][]bool {
	acc := make([][]bool, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []StringOption: StringOption->[]string */ func MapStringArrToStringOptionArr(m []StringOption, f func(StringOption) []string) [][]string {
	acc := make([][]string, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []StringOption: StringOption->[]int */ func MapIntArrToStringOptionArr(m []StringOption, f func(StringOption) []int) [][]int {
	acc := make([][]int, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []StringOption: StringOption->[]int8 */ func MapInt8ArrToStringOptionArr(m []StringOption, f func(StringOption) []int8) [][]int8 {
	acc := make([][]int8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []StringOption: StringOption->[]int16 */ func MapInt16ArrToStringOptionArr(m []StringOption, f func(StringOption) []int16) [][]int16 {
	acc := make([][]int16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []StringOption: StringOption->[]int32 */ func MapInt32ArrToStringOptionArr(m []StringOption, f func(StringOption) []int32) [][]int32 {
	acc := make([][]int32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []StringOption: StringOption->[]int64 */ func MapInt64ArrToStringOptionArr(m []StringOption, f func(StringOption) []int64) [][]int64 {
	acc := make([][]int64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []StringOption: StringOption->[]uint */ func MapUintArrToStringOptionArr(m []StringOption, f func(StringOption) []uint) [][]uint {
	acc := make([][]uint, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []StringOption: StringOption->[]uint8 */ func MapUint8ArrToStringOptionArr(m []StringOption, f func(StringOption) []uint8) [][]uint8 {
	acc := make([][]uint8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []StringOption: StringOption->[]uint16 */ func MapUint16ArrToStringOptionArr(m []StringOption, f func(StringOption) []uint16) [][]uint16 {
	acc := make([][]uint16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []StringOption: StringOption->[]uint32 */ func MapUint32ArrToStringOptionArr(m []StringOption, f func(StringOption) []uint32) [][]uint32 {
	acc := make([][]uint32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []StringOption: StringOption->[]uint64 */ func MapUint64ArrToStringOptionArr(m []StringOption, f func(StringOption) []uint64) [][]uint64 {
	acc := make([][]uint64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []StringOption: StringOption->[]uintptr */ func MapUintptrArrToStringOptionArr(m []StringOption, f func(StringOption) []uintptr) [][]uintptr {
	acc := make([][]uintptr, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []StringOption: StringOption->[]byte */ func MapByteArrToStringOptionArr(m []StringOption, f func(StringOption) []byte) [][]byte {
	acc := make([][]byte, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []StringOption: StringOption->[]rune */ func MapRuneArrToStringOptionArr(m []StringOption, f func(StringOption) []rune) [][]rune {
	acc := make([][]rune, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []StringOption: StringOption->[]float32 */ func MapFloat32ArrToStringOptionArr(m []StringOption, f func(StringOption) []float32) [][]float32 {
	acc := make([][]float32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []StringOption: StringOption->[]float64 */ func MapFloat64ArrToStringOptionArr(m []StringOption, f func(StringOption) []float64) [][]float64 {
	acc := make([][]float64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []StringOption: StringOption->[]complex64 */ func MapComplex64ArrToStringOptionArr(m []StringOption, f func(StringOption) []complex64) [][]complex64 {
	acc := make([][]complex64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []StringOption: StringOption->[]complex128 */ func MapComplex128ArrToStringOptionArr(m []StringOption, f func(StringOption) []complex128) [][]complex128 {
	acc := make([][]complex128, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []StringOption: StringOption->[]Any */ func MapAnyArrToStringOptionArr(m []StringOption, f func(StringOption) []Any) [][]Any {
	acc := make([][]Any, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []StringOption: StringOption->BoolList */ func MapBoolListToStringOptionArr(m []StringOption, f func(StringOption) BoolList) []BoolList {
	acc := make([]BoolList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []StringOption: StringOption->StringList */ func MapStringListToStringOptionArr(m []StringOption, f func(StringOption) StringList) []StringList {
	acc := make([]StringList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []StringOption: StringOption->IntList */ func MapIntListToStringOptionArr(m []StringOption, f func(StringOption) IntList) []IntList {
	acc := make([]IntList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []StringOption: StringOption->Int8List */ func MapInt8ListToStringOptionArr(m []StringOption, f func(StringOption) Int8List) []Int8List {
	acc := make([]Int8List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []StringOption: StringOption->Int16List */ func MapInt16ListToStringOptionArr(m []StringOption, f func(StringOption) Int16List) []Int16List {
	acc := make([]Int16List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []StringOption: StringOption->Int32List */ func MapInt32ListToStringOptionArr(m []StringOption, f func(StringOption) Int32List) []Int32List {
	acc := make([]Int32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []StringOption: StringOption->Int64List */ func MapInt64ListToStringOptionArr(m []StringOption, f func(StringOption) Int64List) []Int64List {
	acc := make([]Int64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []StringOption: StringOption->UintList */ func MapUintListToStringOptionArr(m []StringOption, f func(StringOption) UintList) []UintList {
	acc := make([]UintList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []StringOption: StringOption->Uint8List */ func MapUint8ListToStringOptionArr(m []StringOption, f func(StringOption) Uint8List) []Uint8List {
	acc := make([]Uint8List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []StringOption: StringOption->Uint16List */ func MapUint16ListToStringOptionArr(m []StringOption, f func(StringOption) Uint16List) []Uint16List {
	acc := make([]Uint16List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []StringOption: StringOption->Uint32List */ func MapUint32ListToStringOptionArr(m []StringOption, f func(StringOption) Uint32List) []Uint32List {
	acc := make([]Uint32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []StringOption: StringOption->Uint64List */ func MapUint64ListToStringOptionArr(m []StringOption, f func(StringOption) Uint64List) []Uint64List {
	acc := make([]Uint64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []StringOption: StringOption->UintptrList */ func MapUintptrListToStringOptionArr(m []StringOption, f func(StringOption) UintptrList) []UintptrList {
	acc := make([]UintptrList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []StringOption: StringOption->ByteList */ func MapByteListToStringOptionArr(m []StringOption, f func(StringOption) ByteList) []ByteList {
	acc := make([]ByteList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []StringOption: StringOption->RuneList */ func MapRuneListToStringOptionArr(m []StringOption, f func(StringOption) RuneList) []RuneList {
	acc := make([]RuneList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []StringOption: StringOption->Float32List */ func MapFloat32ListToStringOptionArr(m []StringOption, f func(StringOption) Float32List) []Float32List {
	acc := make([]Float32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []StringOption: StringOption->Float64List */ func MapFloat64ListToStringOptionArr(m []StringOption, f func(StringOption) Float64List) []Float64List {
	acc := make([]Float64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []StringOption: StringOption->Complex64List */ func MapComplex64ListToStringOptionArr(m []StringOption, f func(StringOption) Complex64List) []Complex64List {
	acc := make([]Complex64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []StringOption: StringOption->Complex128List */ func MapComplex128ListToStringOptionArr(m []StringOption, f func(StringOption) Complex128List) []Complex128List {
	acc := make([]Complex128List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []StringOption: StringOption->AnyList */ func MapAnyListToStringOptionArr(m []StringOption, f func(StringOption) AnyList) []AnyList {
	acc := make([]AnyList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []IntOption: IntOption->bool */ func MapBoolToIntOptionArr(m []IntOption, f func(IntOption) bool) []bool {
	acc := make([]bool, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []IntOption: IntOption->string */ func MapStringToIntOptionArr(m []IntOption, f func(IntOption) string) []string {
	acc := make([]string, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []IntOption: IntOption->int */ func MapIntToIntOptionArr(m []IntOption, f func(IntOption) int) []int {
	acc := make([]int, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []IntOption: IntOption->int8 */ func MapInt8ToIntOptionArr(m []IntOption, f func(IntOption) int8) []int8 {
	acc := make([]int8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []IntOption: IntOption->int16 */ func MapInt16ToIntOptionArr(m []IntOption, f func(IntOption) int16) []int16 {
	acc := make([]int16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []IntOption: IntOption->int32 */ func MapInt32ToIntOptionArr(m []IntOption, f func(IntOption) int32) []int32 {
	acc := make([]int32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []IntOption: IntOption->int64 */ func MapInt64ToIntOptionArr(m []IntOption, f func(IntOption) int64) []int64 {
	acc := make([]int64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []IntOption: IntOption->uint */ func MapUintToIntOptionArr(m []IntOption, f func(IntOption) uint) []uint {
	acc := make([]uint, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []IntOption: IntOption->uint8 */ func MapUint8ToIntOptionArr(m []IntOption, f func(IntOption) uint8) []uint8 {
	acc := make([]uint8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []IntOption: IntOption->uint16 */ func MapUint16ToIntOptionArr(m []IntOption, f func(IntOption) uint16) []uint16 {
	acc := make([]uint16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []IntOption: IntOption->uint32 */ func MapUint32ToIntOptionArr(m []IntOption, f func(IntOption) uint32) []uint32 {
	acc := make([]uint32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []IntOption: IntOption->uint64 */ func MapUint64ToIntOptionArr(m []IntOption, f func(IntOption) uint64) []uint64 {
	acc := make([]uint64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []IntOption: IntOption->uintptr */ func MapUintptrToIntOptionArr(m []IntOption, f func(IntOption) uintptr) []uintptr {
	acc := make([]uintptr, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []IntOption: IntOption->byte */ func MapByteToIntOptionArr(m []IntOption, f func(IntOption) byte) []byte {
	acc := make([]byte, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []IntOption: IntOption->rune */ func MapRuneToIntOptionArr(m []IntOption, f func(IntOption) rune) []rune {
	acc := make([]rune, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []IntOption: IntOption->float32 */ func MapFloat32ToIntOptionArr(m []IntOption, f func(IntOption) float32) []float32 {
	acc := make([]float32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []IntOption: IntOption->float64 */ func MapFloat64ToIntOptionArr(m []IntOption, f func(IntOption) float64) []float64 {
	acc := make([]float64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []IntOption: IntOption->complex64 */ func MapComplex64ToIntOptionArr(m []IntOption, f func(IntOption) complex64) []complex64 {
	acc := make([]complex64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []IntOption: IntOption->complex128 */ func MapComplex128ToIntOptionArr(m []IntOption, f func(IntOption) complex128) []complex128 {
	acc := make([]complex128, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []IntOption: IntOption->Any */ func MapAnyToIntOptionArr(m []IntOption, f func(IntOption) Any) []Any {
	acc := make([]Any, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []IntOption: IntOption->BoolOption */ func MapBoolOptionToIntOptionArr(m []IntOption, f func(IntOption) BoolOption) []BoolOption {
	acc := make([]BoolOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []IntOption: IntOption->StringOption */ func MapStringOptionToIntOptionArr(m []IntOption, f func(IntOption) StringOption) []StringOption {
	acc := make([]StringOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []IntOption: IntOption->IntOption */ func MapIntOptionToIntOptionArr(m []IntOption, f func(IntOption) IntOption) []IntOption {
	acc := make([]IntOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []IntOption: IntOption->Int8Option */ func MapInt8OptionToIntOptionArr(m []IntOption, f func(IntOption) Int8Option) []Int8Option {
	acc := make([]Int8Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []IntOption: IntOption->Int16Option */ func MapInt16OptionToIntOptionArr(m []IntOption, f func(IntOption) Int16Option) []Int16Option {
	acc := make([]Int16Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []IntOption: IntOption->Int32Option */ func MapInt32OptionToIntOptionArr(m []IntOption, f func(IntOption) Int32Option) []Int32Option {
	acc := make([]Int32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []IntOption: IntOption->Int64Option */ func MapInt64OptionToIntOptionArr(m []IntOption, f func(IntOption) Int64Option) []Int64Option {
	acc := make([]Int64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []IntOption: IntOption->UintOption */ func MapUintOptionToIntOptionArr(m []IntOption, f func(IntOption) UintOption) []UintOption {
	acc := make([]UintOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []IntOption: IntOption->Uint8Option */ func MapUint8OptionToIntOptionArr(m []IntOption, f func(IntOption) Uint8Option) []Uint8Option {
	acc := make([]Uint8Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []IntOption: IntOption->Uint16Option */ func MapUint16OptionToIntOptionArr(m []IntOption, f func(IntOption) Uint16Option) []Uint16Option {
	acc := make([]Uint16Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []IntOption: IntOption->Uint32Option */ func MapUint32OptionToIntOptionArr(m []IntOption, f func(IntOption) Uint32Option) []Uint32Option {
	acc := make([]Uint32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []IntOption: IntOption->Uint64Option */ func MapUint64OptionToIntOptionArr(m []IntOption, f func(IntOption) Uint64Option) []Uint64Option {
	acc := make([]Uint64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []IntOption: IntOption->UintptrOption */ func MapUintptrOptionToIntOptionArr(m []IntOption, f func(IntOption) UintptrOption) []UintptrOption {
	acc := make([]UintptrOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []IntOption: IntOption->ByteOption */ func MapByteOptionToIntOptionArr(m []IntOption, f func(IntOption) ByteOption) []ByteOption {
	acc := make([]ByteOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []IntOption: IntOption->RuneOption */ func MapRuneOptionToIntOptionArr(m []IntOption, f func(IntOption) RuneOption) []RuneOption {
	acc := make([]RuneOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []IntOption: IntOption->Float32Option */ func MapFloat32OptionToIntOptionArr(m []IntOption, f func(IntOption) Float32Option) []Float32Option {
	acc := make([]Float32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []IntOption: IntOption->Float64Option */ func MapFloat64OptionToIntOptionArr(m []IntOption, f func(IntOption) Float64Option) []Float64Option {
	acc := make([]Float64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []IntOption: IntOption->Complex64Option */ func MapComplex64OptionToIntOptionArr(m []IntOption, f func(IntOption) Complex64Option) []Complex64Option {
	acc := make([]Complex64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []IntOption: IntOption->Complex128Option */ func MapComplex128OptionToIntOptionArr(m []IntOption, f func(IntOption) Complex128Option) []Complex128Option {
	acc := make([]Complex128Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []IntOption: IntOption->AnyOption */ func MapAnyOptionToIntOptionArr(m []IntOption, f func(IntOption) AnyOption) []AnyOption {
	acc := make([]AnyOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []IntOption: IntOption->[]bool */ func MapBoolArrToIntOptionArr(m []IntOption, f func(IntOption) []bool) [][]bool {
	acc := make([][]bool, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []IntOption: IntOption->[]string */ func MapStringArrToIntOptionArr(m []IntOption, f func(IntOption) []string) [][]string {
	acc := make([][]string, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []IntOption: IntOption->[]int */ func MapIntArrToIntOptionArr(m []IntOption, f func(IntOption) []int) [][]int {
	acc := make([][]int, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []IntOption: IntOption->[]int8 */ func MapInt8ArrToIntOptionArr(m []IntOption, f func(IntOption) []int8) [][]int8 {
	acc := make([][]int8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []IntOption: IntOption->[]int16 */ func MapInt16ArrToIntOptionArr(m []IntOption, f func(IntOption) []int16) [][]int16 {
	acc := make([][]int16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []IntOption: IntOption->[]int32 */ func MapInt32ArrToIntOptionArr(m []IntOption, f func(IntOption) []int32) [][]int32 {
	acc := make([][]int32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []IntOption: IntOption->[]int64 */ func MapInt64ArrToIntOptionArr(m []IntOption, f func(IntOption) []int64) [][]int64 {
	acc := make([][]int64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []IntOption: IntOption->[]uint */ func MapUintArrToIntOptionArr(m []IntOption, f func(IntOption) []uint) [][]uint {
	acc := make([][]uint, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []IntOption: IntOption->[]uint8 */ func MapUint8ArrToIntOptionArr(m []IntOption, f func(IntOption) []uint8) [][]uint8 {
	acc := make([][]uint8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []IntOption: IntOption->[]uint16 */ func MapUint16ArrToIntOptionArr(m []IntOption, f func(IntOption) []uint16) [][]uint16 {
	acc := make([][]uint16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []IntOption: IntOption->[]uint32 */ func MapUint32ArrToIntOptionArr(m []IntOption, f func(IntOption) []uint32) [][]uint32 {
	acc := make([][]uint32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []IntOption: IntOption->[]uint64 */ func MapUint64ArrToIntOptionArr(m []IntOption, f func(IntOption) []uint64) [][]uint64 {
	acc := make([][]uint64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []IntOption: IntOption->[]uintptr */ func MapUintptrArrToIntOptionArr(m []IntOption, f func(IntOption) []uintptr) [][]uintptr {
	acc := make([][]uintptr, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []IntOption: IntOption->[]byte */ func MapByteArrToIntOptionArr(m []IntOption, f func(IntOption) []byte) [][]byte {
	acc := make([][]byte, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []IntOption: IntOption->[]rune */ func MapRuneArrToIntOptionArr(m []IntOption, f func(IntOption) []rune) [][]rune {
	acc := make([][]rune, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []IntOption: IntOption->[]float32 */ func MapFloat32ArrToIntOptionArr(m []IntOption, f func(IntOption) []float32) [][]float32 {
	acc := make([][]float32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []IntOption: IntOption->[]float64 */ func MapFloat64ArrToIntOptionArr(m []IntOption, f func(IntOption) []float64) [][]float64 {
	acc := make([][]float64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []IntOption: IntOption->[]complex64 */ func MapComplex64ArrToIntOptionArr(m []IntOption, f func(IntOption) []complex64) [][]complex64 {
	acc := make([][]complex64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []IntOption: IntOption->[]complex128 */ func MapComplex128ArrToIntOptionArr(m []IntOption, f func(IntOption) []complex128) [][]complex128 {
	acc := make([][]complex128, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []IntOption: IntOption->[]Any */ func MapAnyArrToIntOptionArr(m []IntOption, f func(IntOption) []Any) [][]Any {
	acc := make([][]Any, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []IntOption: IntOption->BoolList */ func MapBoolListToIntOptionArr(m []IntOption, f func(IntOption) BoolList) []BoolList {
	acc := make([]BoolList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []IntOption: IntOption->StringList */ func MapStringListToIntOptionArr(m []IntOption, f func(IntOption) StringList) []StringList {
	acc := make([]StringList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []IntOption: IntOption->IntList */ func MapIntListToIntOptionArr(m []IntOption, f func(IntOption) IntList) []IntList {
	acc := make([]IntList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []IntOption: IntOption->Int8List */ func MapInt8ListToIntOptionArr(m []IntOption, f func(IntOption) Int8List) []Int8List {
	acc := make([]Int8List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []IntOption: IntOption->Int16List */ func MapInt16ListToIntOptionArr(m []IntOption, f func(IntOption) Int16List) []Int16List {
	acc := make([]Int16List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []IntOption: IntOption->Int32List */ func MapInt32ListToIntOptionArr(m []IntOption, f func(IntOption) Int32List) []Int32List {
	acc := make([]Int32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []IntOption: IntOption->Int64List */ func MapInt64ListToIntOptionArr(m []IntOption, f func(IntOption) Int64List) []Int64List {
	acc := make([]Int64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []IntOption: IntOption->UintList */ func MapUintListToIntOptionArr(m []IntOption, f func(IntOption) UintList) []UintList {
	acc := make([]UintList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []IntOption: IntOption->Uint8List */ func MapUint8ListToIntOptionArr(m []IntOption, f func(IntOption) Uint8List) []Uint8List {
	acc := make([]Uint8List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []IntOption: IntOption->Uint16List */ func MapUint16ListToIntOptionArr(m []IntOption, f func(IntOption) Uint16List) []Uint16List {
	acc := make([]Uint16List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []IntOption: IntOption->Uint32List */ func MapUint32ListToIntOptionArr(m []IntOption, f func(IntOption) Uint32List) []Uint32List {
	acc := make([]Uint32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []IntOption: IntOption->Uint64List */ func MapUint64ListToIntOptionArr(m []IntOption, f func(IntOption) Uint64List) []Uint64List {
	acc := make([]Uint64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []IntOption: IntOption->UintptrList */ func MapUintptrListToIntOptionArr(m []IntOption, f func(IntOption) UintptrList) []UintptrList {
	acc := make([]UintptrList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []IntOption: IntOption->ByteList */ func MapByteListToIntOptionArr(m []IntOption, f func(IntOption) ByteList) []ByteList {
	acc := make([]ByteList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []IntOption: IntOption->RuneList */ func MapRuneListToIntOptionArr(m []IntOption, f func(IntOption) RuneList) []RuneList {
	acc := make([]RuneList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []IntOption: IntOption->Float32List */ func MapFloat32ListToIntOptionArr(m []IntOption, f func(IntOption) Float32List) []Float32List {
	acc := make([]Float32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []IntOption: IntOption->Float64List */ func MapFloat64ListToIntOptionArr(m []IntOption, f func(IntOption) Float64List) []Float64List {
	acc := make([]Float64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []IntOption: IntOption->Complex64List */ func MapComplex64ListToIntOptionArr(m []IntOption, f func(IntOption) Complex64List) []Complex64List {
	acc := make([]Complex64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []IntOption: IntOption->Complex128List */ func MapComplex128ListToIntOptionArr(m []IntOption, f func(IntOption) Complex128List) []Complex128List {
	acc := make([]Complex128List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []IntOption: IntOption->AnyList */ func MapAnyListToIntOptionArr(m []IntOption, f func(IntOption) AnyList) []AnyList {
	acc := make([]AnyList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int8Option: Int8Option->bool */ func MapBoolToInt8OptionArr(m []Int8Option, f func(Int8Option) bool) []bool {
	acc := make([]bool, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int8Option: Int8Option->string */ func MapStringToInt8OptionArr(m []Int8Option, f func(Int8Option) string) []string {
	acc := make([]string, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int8Option: Int8Option->int */ func MapIntToInt8OptionArr(m []Int8Option, f func(Int8Option) int) []int {
	acc := make([]int, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int8Option: Int8Option->int8 */ func MapInt8ToInt8OptionArr(m []Int8Option, f func(Int8Option) int8) []int8 {
	acc := make([]int8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int8Option: Int8Option->int16 */ func MapInt16ToInt8OptionArr(m []Int8Option, f func(Int8Option) int16) []int16 {
	acc := make([]int16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int8Option: Int8Option->int32 */ func MapInt32ToInt8OptionArr(m []Int8Option, f func(Int8Option) int32) []int32 {
	acc := make([]int32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int8Option: Int8Option->int64 */ func MapInt64ToInt8OptionArr(m []Int8Option, f func(Int8Option) int64) []int64 {
	acc := make([]int64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int8Option: Int8Option->uint */ func MapUintToInt8OptionArr(m []Int8Option, f func(Int8Option) uint) []uint {
	acc := make([]uint, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int8Option: Int8Option->uint8 */ func MapUint8ToInt8OptionArr(m []Int8Option, f func(Int8Option) uint8) []uint8 {
	acc := make([]uint8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int8Option: Int8Option->uint16 */ func MapUint16ToInt8OptionArr(m []Int8Option, f func(Int8Option) uint16) []uint16 {
	acc := make([]uint16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int8Option: Int8Option->uint32 */ func MapUint32ToInt8OptionArr(m []Int8Option, f func(Int8Option) uint32) []uint32 {
	acc := make([]uint32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int8Option: Int8Option->uint64 */ func MapUint64ToInt8OptionArr(m []Int8Option, f func(Int8Option) uint64) []uint64 {
	acc := make([]uint64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int8Option: Int8Option->uintptr */ func MapUintptrToInt8OptionArr(m []Int8Option, f func(Int8Option) uintptr) []uintptr {
	acc := make([]uintptr, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int8Option: Int8Option->byte */ func MapByteToInt8OptionArr(m []Int8Option, f func(Int8Option) byte) []byte {
	acc := make([]byte, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int8Option: Int8Option->rune */ func MapRuneToInt8OptionArr(m []Int8Option, f func(Int8Option) rune) []rune {
	acc := make([]rune, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int8Option: Int8Option->float32 */ func MapFloat32ToInt8OptionArr(m []Int8Option, f func(Int8Option) float32) []float32 {
	acc := make([]float32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int8Option: Int8Option->float64 */ func MapFloat64ToInt8OptionArr(m []Int8Option, f func(Int8Option) float64) []float64 {
	acc := make([]float64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int8Option: Int8Option->complex64 */ func MapComplex64ToInt8OptionArr(m []Int8Option, f func(Int8Option) complex64) []complex64 {
	acc := make([]complex64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int8Option: Int8Option->complex128 */ func MapComplex128ToInt8OptionArr(m []Int8Option, f func(Int8Option) complex128) []complex128 {
	acc := make([]complex128, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int8Option: Int8Option->Any */ func MapAnyToInt8OptionArr(m []Int8Option, f func(Int8Option) Any) []Any {
	acc := make([]Any, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int8Option: Int8Option->BoolOption */ func MapBoolOptionToInt8OptionArr(m []Int8Option, f func(Int8Option) BoolOption) []BoolOption {
	acc := make([]BoolOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int8Option: Int8Option->StringOption */ func MapStringOptionToInt8OptionArr(m []Int8Option, f func(Int8Option) StringOption) []StringOption {
	acc := make([]StringOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int8Option: Int8Option->IntOption */ func MapIntOptionToInt8OptionArr(m []Int8Option, f func(Int8Option) IntOption) []IntOption {
	acc := make([]IntOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int8Option: Int8Option->Int8Option */ func MapInt8OptionToInt8OptionArr(m []Int8Option, f func(Int8Option) Int8Option) []Int8Option {
	acc := make([]Int8Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int8Option: Int8Option->Int16Option */ func MapInt16OptionToInt8OptionArr(m []Int8Option, f func(Int8Option) Int16Option) []Int16Option {
	acc := make([]Int16Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int8Option: Int8Option->Int32Option */ func MapInt32OptionToInt8OptionArr(m []Int8Option, f func(Int8Option) Int32Option) []Int32Option {
	acc := make([]Int32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int8Option: Int8Option->Int64Option */ func MapInt64OptionToInt8OptionArr(m []Int8Option, f func(Int8Option) Int64Option) []Int64Option {
	acc := make([]Int64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int8Option: Int8Option->UintOption */ func MapUintOptionToInt8OptionArr(m []Int8Option, f func(Int8Option) UintOption) []UintOption {
	acc := make([]UintOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int8Option: Int8Option->Uint8Option */ func MapUint8OptionToInt8OptionArr(m []Int8Option, f func(Int8Option) Uint8Option) []Uint8Option {
	acc := make([]Uint8Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int8Option: Int8Option->Uint16Option */ func MapUint16OptionToInt8OptionArr(m []Int8Option, f func(Int8Option) Uint16Option) []Uint16Option {
	acc := make([]Uint16Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int8Option: Int8Option->Uint32Option */ func MapUint32OptionToInt8OptionArr(m []Int8Option, f func(Int8Option) Uint32Option) []Uint32Option {
	acc := make([]Uint32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int8Option: Int8Option->Uint64Option */ func MapUint64OptionToInt8OptionArr(m []Int8Option, f func(Int8Option) Uint64Option) []Uint64Option {
	acc := make([]Uint64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int8Option: Int8Option->UintptrOption */ func MapUintptrOptionToInt8OptionArr(m []Int8Option, f func(Int8Option) UintptrOption) []UintptrOption {
	acc := make([]UintptrOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int8Option: Int8Option->ByteOption */ func MapByteOptionToInt8OptionArr(m []Int8Option, f func(Int8Option) ByteOption) []ByteOption {
	acc := make([]ByteOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int8Option: Int8Option->RuneOption */ func MapRuneOptionToInt8OptionArr(m []Int8Option, f func(Int8Option) RuneOption) []RuneOption {
	acc := make([]RuneOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int8Option: Int8Option->Float32Option */ func MapFloat32OptionToInt8OptionArr(m []Int8Option, f func(Int8Option) Float32Option) []Float32Option {
	acc := make([]Float32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int8Option: Int8Option->Float64Option */ func MapFloat64OptionToInt8OptionArr(m []Int8Option, f func(Int8Option) Float64Option) []Float64Option {
	acc := make([]Float64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int8Option: Int8Option->Complex64Option */ func MapComplex64OptionToInt8OptionArr(m []Int8Option, f func(Int8Option) Complex64Option) []Complex64Option {
	acc := make([]Complex64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int8Option: Int8Option->Complex128Option */ func MapComplex128OptionToInt8OptionArr(m []Int8Option, f func(Int8Option) Complex128Option) []Complex128Option {
	acc := make([]Complex128Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int8Option: Int8Option->AnyOption */ func MapAnyOptionToInt8OptionArr(m []Int8Option, f func(Int8Option) AnyOption) []AnyOption {
	acc := make([]AnyOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int8Option: Int8Option->[]bool */ func MapBoolArrToInt8OptionArr(m []Int8Option, f func(Int8Option) []bool) [][]bool {
	acc := make([][]bool, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int8Option: Int8Option->[]string */ func MapStringArrToInt8OptionArr(m []Int8Option, f func(Int8Option) []string) [][]string {
	acc := make([][]string, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int8Option: Int8Option->[]int */ func MapIntArrToInt8OptionArr(m []Int8Option, f func(Int8Option) []int) [][]int {
	acc := make([][]int, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int8Option: Int8Option->[]int8 */ func MapInt8ArrToInt8OptionArr(m []Int8Option, f func(Int8Option) []int8) [][]int8 {
	acc := make([][]int8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int8Option: Int8Option->[]int16 */ func MapInt16ArrToInt8OptionArr(m []Int8Option, f func(Int8Option) []int16) [][]int16 {
	acc := make([][]int16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int8Option: Int8Option->[]int32 */ func MapInt32ArrToInt8OptionArr(m []Int8Option, f func(Int8Option) []int32) [][]int32 {
	acc := make([][]int32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int8Option: Int8Option->[]int64 */ func MapInt64ArrToInt8OptionArr(m []Int8Option, f func(Int8Option) []int64) [][]int64 {
	acc := make([][]int64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int8Option: Int8Option->[]uint */ func MapUintArrToInt8OptionArr(m []Int8Option, f func(Int8Option) []uint) [][]uint {
	acc := make([][]uint, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int8Option: Int8Option->[]uint8 */ func MapUint8ArrToInt8OptionArr(m []Int8Option, f func(Int8Option) []uint8) [][]uint8 {
	acc := make([][]uint8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int8Option: Int8Option->[]uint16 */ func MapUint16ArrToInt8OptionArr(m []Int8Option, f func(Int8Option) []uint16) [][]uint16 {
	acc := make([][]uint16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int8Option: Int8Option->[]uint32 */ func MapUint32ArrToInt8OptionArr(m []Int8Option, f func(Int8Option) []uint32) [][]uint32 {
	acc := make([][]uint32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int8Option: Int8Option->[]uint64 */ func MapUint64ArrToInt8OptionArr(m []Int8Option, f func(Int8Option) []uint64) [][]uint64 {
	acc := make([][]uint64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int8Option: Int8Option->[]uintptr */ func MapUintptrArrToInt8OptionArr(m []Int8Option, f func(Int8Option) []uintptr) [][]uintptr {
	acc := make([][]uintptr, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int8Option: Int8Option->[]byte */ func MapByteArrToInt8OptionArr(m []Int8Option, f func(Int8Option) []byte) [][]byte {
	acc := make([][]byte, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int8Option: Int8Option->[]rune */ func MapRuneArrToInt8OptionArr(m []Int8Option, f func(Int8Option) []rune) [][]rune {
	acc := make([][]rune, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int8Option: Int8Option->[]float32 */ func MapFloat32ArrToInt8OptionArr(m []Int8Option, f func(Int8Option) []float32) [][]float32 {
	acc := make([][]float32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int8Option: Int8Option->[]float64 */ func MapFloat64ArrToInt8OptionArr(m []Int8Option, f func(Int8Option) []float64) [][]float64 {
	acc := make([][]float64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int8Option: Int8Option->[]complex64 */ func MapComplex64ArrToInt8OptionArr(m []Int8Option, f func(Int8Option) []complex64) [][]complex64 {
	acc := make([][]complex64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int8Option: Int8Option->[]complex128 */ func MapComplex128ArrToInt8OptionArr(m []Int8Option, f func(Int8Option) []complex128) [][]complex128 {
	acc := make([][]complex128, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int8Option: Int8Option->[]Any */ func MapAnyArrToInt8OptionArr(m []Int8Option, f func(Int8Option) []Any) [][]Any {
	acc := make([][]Any, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int8Option: Int8Option->BoolList */ func MapBoolListToInt8OptionArr(m []Int8Option, f func(Int8Option) BoolList) []BoolList {
	acc := make([]BoolList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int8Option: Int8Option->StringList */ func MapStringListToInt8OptionArr(m []Int8Option, f func(Int8Option) StringList) []StringList {
	acc := make([]StringList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int8Option: Int8Option->IntList */ func MapIntListToInt8OptionArr(m []Int8Option, f func(Int8Option) IntList) []IntList {
	acc := make([]IntList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int8Option: Int8Option->Int8List */ func MapInt8ListToInt8OptionArr(m []Int8Option, f func(Int8Option) Int8List) []Int8List {
	acc := make([]Int8List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int8Option: Int8Option->Int16List */ func MapInt16ListToInt8OptionArr(m []Int8Option, f func(Int8Option) Int16List) []Int16List {
	acc := make([]Int16List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int8Option: Int8Option->Int32List */ func MapInt32ListToInt8OptionArr(m []Int8Option, f func(Int8Option) Int32List) []Int32List {
	acc := make([]Int32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int8Option: Int8Option->Int64List */ func MapInt64ListToInt8OptionArr(m []Int8Option, f func(Int8Option) Int64List) []Int64List {
	acc := make([]Int64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int8Option: Int8Option->UintList */ func MapUintListToInt8OptionArr(m []Int8Option, f func(Int8Option) UintList) []UintList {
	acc := make([]UintList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int8Option: Int8Option->Uint8List */ func MapUint8ListToInt8OptionArr(m []Int8Option, f func(Int8Option) Uint8List) []Uint8List {
	acc := make([]Uint8List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int8Option: Int8Option->Uint16List */ func MapUint16ListToInt8OptionArr(m []Int8Option, f func(Int8Option) Uint16List) []Uint16List {
	acc := make([]Uint16List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int8Option: Int8Option->Uint32List */ func MapUint32ListToInt8OptionArr(m []Int8Option, f func(Int8Option) Uint32List) []Uint32List {
	acc := make([]Uint32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int8Option: Int8Option->Uint64List */ func MapUint64ListToInt8OptionArr(m []Int8Option, f func(Int8Option) Uint64List) []Uint64List {
	acc := make([]Uint64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int8Option: Int8Option->UintptrList */ func MapUintptrListToInt8OptionArr(m []Int8Option, f func(Int8Option) UintptrList) []UintptrList {
	acc := make([]UintptrList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int8Option: Int8Option->ByteList */ func MapByteListToInt8OptionArr(m []Int8Option, f func(Int8Option) ByteList) []ByteList {
	acc := make([]ByteList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int8Option: Int8Option->RuneList */ func MapRuneListToInt8OptionArr(m []Int8Option, f func(Int8Option) RuneList) []RuneList {
	acc := make([]RuneList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int8Option: Int8Option->Float32List */ func MapFloat32ListToInt8OptionArr(m []Int8Option, f func(Int8Option) Float32List) []Float32List {
	acc := make([]Float32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int8Option: Int8Option->Float64List */ func MapFloat64ListToInt8OptionArr(m []Int8Option, f func(Int8Option) Float64List) []Float64List {
	acc := make([]Float64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int8Option: Int8Option->Complex64List */ func MapComplex64ListToInt8OptionArr(m []Int8Option, f func(Int8Option) Complex64List) []Complex64List {
	acc := make([]Complex64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int8Option: Int8Option->Complex128List */ func MapComplex128ListToInt8OptionArr(m []Int8Option, f func(Int8Option) Complex128List) []Complex128List {
	acc := make([]Complex128List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int8Option: Int8Option->AnyList */ func MapAnyListToInt8OptionArr(m []Int8Option, f func(Int8Option) AnyList) []AnyList {
	acc := make([]AnyList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int16Option: Int16Option->bool */ func MapBoolToInt16OptionArr(m []Int16Option, f func(Int16Option) bool) []bool {
	acc := make([]bool, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int16Option: Int16Option->string */ func MapStringToInt16OptionArr(m []Int16Option, f func(Int16Option) string) []string {
	acc := make([]string, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int16Option: Int16Option->int */ func MapIntToInt16OptionArr(m []Int16Option, f func(Int16Option) int) []int {
	acc := make([]int, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int16Option: Int16Option->int8 */ func MapInt8ToInt16OptionArr(m []Int16Option, f func(Int16Option) int8) []int8 {
	acc := make([]int8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int16Option: Int16Option->int16 */ func MapInt16ToInt16OptionArr(m []Int16Option, f func(Int16Option) int16) []int16 {
	acc := make([]int16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int16Option: Int16Option->int32 */ func MapInt32ToInt16OptionArr(m []Int16Option, f func(Int16Option) int32) []int32 {
	acc := make([]int32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int16Option: Int16Option->int64 */ func MapInt64ToInt16OptionArr(m []Int16Option, f func(Int16Option) int64) []int64 {
	acc := make([]int64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int16Option: Int16Option->uint */ func MapUintToInt16OptionArr(m []Int16Option, f func(Int16Option) uint) []uint {
	acc := make([]uint, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int16Option: Int16Option->uint8 */ func MapUint8ToInt16OptionArr(m []Int16Option, f func(Int16Option) uint8) []uint8 {
	acc := make([]uint8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int16Option: Int16Option->uint16 */ func MapUint16ToInt16OptionArr(m []Int16Option, f func(Int16Option) uint16) []uint16 {
	acc := make([]uint16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int16Option: Int16Option->uint32 */ func MapUint32ToInt16OptionArr(m []Int16Option, f func(Int16Option) uint32) []uint32 {
	acc := make([]uint32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int16Option: Int16Option->uint64 */ func MapUint64ToInt16OptionArr(m []Int16Option, f func(Int16Option) uint64) []uint64 {
	acc := make([]uint64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int16Option: Int16Option->uintptr */ func MapUintptrToInt16OptionArr(m []Int16Option, f func(Int16Option) uintptr) []uintptr {
	acc := make([]uintptr, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int16Option: Int16Option->byte */ func MapByteToInt16OptionArr(m []Int16Option, f func(Int16Option) byte) []byte {
	acc := make([]byte, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int16Option: Int16Option->rune */ func MapRuneToInt16OptionArr(m []Int16Option, f func(Int16Option) rune) []rune {
	acc := make([]rune, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int16Option: Int16Option->float32 */ func MapFloat32ToInt16OptionArr(m []Int16Option, f func(Int16Option) float32) []float32 {
	acc := make([]float32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int16Option: Int16Option->float64 */ func MapFloat64ToInt16OptionArr(m []Int16Option, f func(Int16Option) float64) []float64 {
	acc := make([]float64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int16Option: Int16Option->complex64 */ func MapComplex64ToInt16OptionArr(m []Int16Option, f func(Int16Option) complex64) []complex64 {
	acc := make([]complex64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int16Option: Int16Option->complex128 */ func MapComplex128ToInt16OptionArr(m []Int16Option, f func(Int16Option) complex128) []complex128 {
	acc := make([]complex128, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int16Option: Int16Option->Any */ func MapAnyToInt16OptionArr(m []Int16Option, f func(Int16Option) Any) []Any {
	acc := make([]Any, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int16Option: Int16Option->BoolOption */ func MapBoolOptionToInt16OptionArr(m []Int16Option, f func(Int16Option) BoolOption) []BoolOption {
	acc := make([]BoolOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int16Option: Int16Option->StringOption */ func MapStringOptionToInt16OptionArr(m []Int16Option, f func(Int16Option) StringOption) []StringOption {
	acc := make([]StringOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int16Option: Int16Option->IntOption */ func MapIntOptionToInt16OptionArr(m []Int16Option, f func(Int16Option) IntOption) []IntOption {
	acc := make([]IntOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int16Option: Int16Option->Int8Option */ func MapInt8OptionToInt16OptionArr(m []Int16Option, f func(Int16Option) Int8Option) []Int8Option {
	acc := make([]Int8Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int16Option: Int16Option->Int16Option */ func MapInt16OptionToInt16OptionArr(m []Int16Option, f func(Int16Option) Int16Option) []Int16Option {
	acc := make([]Int16Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int16Option: Int16Option->Int32Option */ func MapInt32OptionToInt16OptionArr(m []Int16Option, f func(Int16Option) Int32Option) []Int32Option {
	acc := make([]Int32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int16Option: Int16Option->Int64Option */ func MapInt64OptionToInt16OptionArr(m []Int16Option, f func(Int16Option) Int64Option) []Int64Option {
	acc := make([]Int64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int16Option: Int16Option->UintOption */ func MapUintOptionToInt16OptionArr(m []Int16Option, f func(Int16Option) UintOption) []UintOption {
	acc := make([]UintOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int16Option: Int16Option->Uint8Option */ func MapUint8OptionToInt16OptionArr(m []Int16Option, f func(Int16Option) Uint8Option) []Uint8Option {
	acc := make([]Uint8Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int16Option: Int16Option->Uint16Option */ func MapUint16OptionToInt16OptionArr(m []Int16Option, f func(Int16Option) Uint16Option) []Uint16Option {
	acc := make([]Uint16Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int16Option: Int16Option->Uint32Option */ func MapUint32OptionToInt16OptionArr(m []Int16Option, f func(Int16Option) Uint32Option) []Uint32Option {
	acc := make([]Uint32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int16Option: Int16Option->Uint64Option */ func MapUint64OptionToInt16OptionArr(m []Int16Option, f func(Int16Option) Uint64Option) []Uint64Option {
	acc := make([]Uint64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int16Option: Int16Option->UintptrOption */ func MapUintptrOptionToInt16OptionArr(m []Int16Option, f func(Int16Option) UintptrOption) []UintptrOption {
	acc := make([]UintptrOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int16Option: Int16Option->ByteOption */ func MapByteOptionToInt16OptionArr(m []Int16Option, f func(Int16Option) ByteOption) []ByteOption {
	acc := make([]ByteOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int16Option: Int16Option->RuneOption */ func MapRuneOptionToInt16OptionArr(m []Int16Option, f func(Int16Option) RuneOption) []RuneOption {
	acc := make([]RuneOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int16Option: Int16Option->Float32Option */ func MapFloat32OptionToInt16OptionArr(m []Int16Option, f func(Int16Option) Float32Option) []Float32Option {
	acc := make([]Float32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int16Option: Int16Option->Float64Option */ func MapFloat64OptionToInt16OptionArr(m []Int16Option, f func(Int16Option) Float64Option) []Float64Option {
	acc := make([]Float64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int16Option: Int16Option->Complex64Option */ func MapComplex64OptionToInt16OptionArr(m []Int16Option, f func(Int16Option) Complex64Option) []Complex64Option {
	acc := make([]Complex64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int16Option: Int16Option->Complex128Option */ func MapComplex128OptionToInt16OptionArr(m []Int16Option, f func(Int16Option) Complex128Option) []Complex128Option {
	acc := make([]Complex128Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int16Option: Int16Option->AnyOption */ func MapAnyOptionToInt16OptionArr(m []Int16Option, f func(Int16Option) AnyOption) []AnyOption {
	acc := make([]AnyOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int16Option: Int16Option->[]bool */ func MapBoolArrToInt16OptionArr(m []Int16Option, f func(Int16Option) []bool) [][]bool {
	acc := make([][]bool, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int16Option: Int16Option->[]string */ func MapStringArrToInt16OptionArr(m []Int16Option, f func(Int16Option) []string) [][]string {
	acc := make([][]string, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int16Option: Int16Option->[]int */ func MapIntArrToInt16OptionArr(m []Int16Option, f func(Int16Option) []int) [][]int {
	acc := make([][]int, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int16Option: Int16Option->[]int8 */ func MapInt8ArrToInt16OptionArr(m []Int16Option, f func(Int16Option) []int8) [][]int8 {
	acc := make([][]int8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int16Option: Int16Option->[]int16 */ func MapInt16ArrToInt16OptionArr(m []Int16Option, f func(Int16Option) []int16) [][]int16 {
	acc := make([][]int16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int16Option: Int16Option->[]int32 */ func MapInt32ArrToInt16OptionArr(m []Int16Option, f func(Int16Option) []int32) [][]int32 {
	acc := make([][]int32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int16Option: Int16Option->[]int64 */ func MapInt64ArrToInt16OptionArr(m []Int16Option, f func(Int16Option) []int64) [][]int64 {
	acc := make([][]int64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int16Option: Int16Option->[]uint */ func MapUintArrToInt16OptionArr(m []Int16Option, f func(Int16Option) []uint) [][]uint {
	acc := make([][]uint, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int16Option: Int16Option->[]uint8 */ func MapUint8ArrToInt16OptionArr(m []Int16Option, f func(Int16Option) []uint8) [][]uint8 {
	acc := make([][]uint8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int16Option: Int16Option->[]uint16 */ func MapUint16ArrToInt16OptionArr(m []Int16Option, f func(Int16Option) []uint16) [][]uint16 {
	acc := make([][]uint16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int16Option: Int16Option->[]uint32 */ func MapUint32ArrToInt16OptionArr(m []Int16Option, f func(Int16Option) []uint32) [][]uint32 {
	acc := make([][]uint32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int16Option: Int16Option->[]uint64 */ func MapUint64ArrToInt16OptionArr(m []Int16Option, f func(Int16Option) []uint64) [][]uint64 {
	acc := make([][]uint64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int16Option: Int16Option->[]uintptr */ func MapUintptrArrToInt16OptionArr(m []Int16Option, f func(Int16Option) []uintptr) [][]uintptr {
	acc := make([][]uintptr, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int16Option: Int16Option->[]byte */ func MapByteArrToInt16OptionArr(m []Int16Option, f func(Int16Option) []byte) [][]byte {
	acc := make([][]byte, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int16Option: Int16Option->[]rune */ func MapRuneArrToInt16OptionArr(m []Int16Option, f func(Int16Option) []rune) [][]rune {
	acc := make([][]rune, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int16Option: Int16Option->[]float32 */ func MapFloat32ArrToInt16OptionArr(m []Int16Option, f func(Int16Option) []float32) [][]float32 {
	acc := make([][]float32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int16Option: Int16Option->[]float64 */ func MapFloat64ArrToInt16OptionArr(m []Int16Option, f func(Int16Option) []float64) [][]float64 {
	acc := make([][]float64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int16Option: Int16Option->[]complex64 */ func MapComplex64ArrToInt16OptionArr(m []Int16Option, f func(Int16Option) []complex64) [][]complex64 {
	acc := make([][]complex64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int16Option: Int16Option->[]complex128 */ func MapComplex128ArrToInt16OptionArr(m []Int16Option, f func(Int16Option) []complex128) [][]complex128 {
	acc := make([][]complex128, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int16Option: Int16Option->[]Any */ func MapAnyArrToInt16OptionArr(m []Int16Option, f func(Int16Option) []Any) [][]Any {
	acc := make([][]Any, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int16Option: Int16Option->BoolList */ func MapBoolListToInt16OptionArr(m []Int16Option, f func(Int16Option) BoolList) []BoolList {
	acc := make([]BoolList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int16Option: Int16Option->StringList */ func MapStringListToInt16OptionArr(m []Int16Option, f func(Int16Option) StringList) []StringList {
	acc := make([]StringList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int16Option: Int16Option->IntList */ func MapIntListToInt16OptionArr(m []Int16Option, f func(Int16Option) IntList) []IntList {
	acc := make([]IntList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int16Option: Int16Option->Int8List */ func MapInt8ListToInt16OptionArr(m []Int16Option, f func(Int16Option) Int8List) []Int8List {
	acc := make([]Int8List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int16Option: Int16Option->Int16List */ func MapInt16ListToInt16OptionArr(m []Int16Option, f func(Int16Option) Int16List) []Int16List {
	acc := make([]Int16List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int16Option: Int16Option->Int32List */ func MapInt32ListToInt16OptionArr(m []Int16Option, f func(Int16Option) Int32List) []Int32List {
	acc := make([]Int32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int16Option: Int16Option->Int64List */ func MapInt64ListToInt16OptionArr(m []Int16Option, f func(Int16Option) Int64List) []Int64List {
	acc := make([]Int64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int16Option: Int16Option->UintList */ func MapUintListToInt16OptionArr(m []Int16Option, f func(Int16Option) UintList) []UintList {
	acc := make([]UintList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int16Option: Int16Option->Uint8List */ func MapUint8ListToInt16OptionArr(m []Int16Option, f func(Int16Option) Uint8List) []Uint8List {
	acc := make([]Uint8List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int16Option: Int16Option->Uint16List */ func MapUint16ListToInt16OptionArr(m []Int16Option, f func(Int16Option) Uint16List) []Uint16List {
	acc := make([]Uint16List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int16Option: Int16Option->Uint32List */ func MapUint32ListToInt16OptionArr(m []Int16Option, f func(Int16Option) Uint32List) []Uint32List {
	acc := make([]Uint32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int16Option: Int16Option->Uint64List */ func MapUint64ListToInt16OptionArr(m []Int16Option, f func(Int16Option) Uint64List) []Uint64List {
	acc := make([]Uint64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int16Option: Int16Option->UintptrList */ func MapUintptrListToInt16OptionArr(m []Int16Option, f func(Int16Option) UintptrList) []UintptrList {
	acc := make([]UintptrList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int16Option: Int16Option->ByteList */ func MapByteListToInt16OptionArr(m []Int16Option, f func(Int16Option) ByteList) []ByteList {
	acc := make([]ByteList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int16Option: Int16Option->RuneList */ func MapRuneListToInt16OptionArr(m []Int16Option, f func(Int16Option) RuneList) []RuneList {
	acc := make([]RuneList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int16Option: Int16Option->Float32List */ func MapFloat32ListToInt16OptionArr(m []Int16Option, f func(Int16Option) Float32List) []Float32List {
	acc := make([]Float32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int16Option: Int16Option->Float64List */ func MapFloat64ListToInt16OptionArr(m []Int16Option, f func(Int16Option) Float64List) []Float64List {
	acc := make([]Float64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int16Option: Int16Option->Complex64List */ func MapComplex64ListToInt16OptionArr(m []Int16Option, f func(Int16Option) Complex64List) []Complex64List {
	acc := make([]Complex64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int16Option: Int16Option->Complex128List */ func MapComplex128ListToInt16OptionArr(m []Int16Option, f func(Int16Option) Complex128List) []Complex128List {
	acc := make([]Complex128List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int16Option: Int16Option->AnyList */ func MapAnyListToInt16OptionArr(m []Int16Option, f func(Int16Option) AnyList) []AnyList {
	acc := make([]AnyList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int32Option: Int32Option->bool */ func MapBoolToInt32OptionArr(m []Int32Option, f func(Int32Option) bool) []bool {
	acc := make([]bool, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int32Option: Int32Option->string */ func MapStringToInt32OptionArr(m []Int32Option, f func(Int32Option) string) []string {
	acc := make([]string, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int32Option: Int32Option->int */ func MapIntToInt32OptionArr(m []Int32Option, f func(Int32Option) int) []int {
	acc := make([]int, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int32Option: Int32Option->int8 */ func MapInt8ToInt32OptionArr(m []Int32Option, f func(Int32Option) int8) []int8 {
	acc := make([]int8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int32Option: Int32Option->int16 */ func MapInt16ToInt32OptionArr(m []Int32Option, f func(Int32Option) int16) []int16 {
	acc := make([]int16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int32Option: Int32Option->int32 */ func MapInt32ToInt32OptionArr(m []Int32Option, f func(Int32Option) int32) []int32 {
	acc := make([]int32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int32Option: Int32Option->int64 */ func MapInt64ToInt32OptionArr(m []Int32Option, f func(Int32Option) int64) []int64 {
	acc := make([]int64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int32Option: Int32Option->uint */ func MapUintToInt32OptionArr(m []Int32Option, f func(Int32Option) uint) []uint {
	acc := make([]uint, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int32Option: Int32Option->uint8 */ func MapUint8ToInt32OptionArr(m []Int32Option, f func(Int32Option) uint8) []uint8 {
	acc := make([]uint8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int32Option: Int32Option->uint16 */ func MapUint16ToInt32OptionArr(m []Int32Option, f func(Int32Option) uint16) []uint16 {
	acc := make([]uint16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int32Option: Int32Option->uint32 */ func MapUint32ToInt32OptionArr(m []Int32Option, f func(Int32Option) uint32) []uint32 {
	acc := make([]uint32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int32Option: Int32Option->uint64 */ func MapUint64ToInt32OptionArr(m []Int32Option, f func(Int32Option) uint64) []uint64 {
	acc := make([]uint64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int32Option: Int32Option->uintptr */ func MapUintptrToInt32OptionArr(m []Int32Option, f func(Int32Option) uintptr) []uintptr {
	acc := make([]uintptr, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int32Option: Int32Option->byte */ func MapByteToInt32OptionArr(m []Int32Option, f func(Int32Option) byte) []byte {
	acc := make([]byte, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int32Option: Int32Option->rune */ func MapRuneToInt32OptionArr(m []Int32Option, f func(Int32Option) rune) []rune {
	acc := make([]rune, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int32Option: Int32Option->float32 */ func MapFloat32ToInt32OptionArr(m []Int32Option, f func(Int32Option) float32) []float32 {
	acc := make([]float32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int32Option: Int32Option->float64 */ func MapFloat64ToInt32OptionArr(m []Int32Option, f func(Int32Option) float64) []float64 {
	acc := make([]float64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int32Option: Int32Option->complex64 */ func MapComplex64ToInt32OptionArr(m []Int32Option, f func(Int32Option) complex64) []complex64 {
	acc := make([]complex64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int32Option: Int32Option->complex128 */ func MapComplex128ToInt32OptionArr(m []Int32Option, f func(Int32Option) complex128) []complex128 {
	acc := make([]complex128, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int32Option: Int32Option->Any */ func MapAnyToInt32OptionArr(m []Int32Option, f func(Int32Option) Any) []Any {
	acc := make([]Any, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int32Option: Int32Option->BoolOption */ func MapBoolOptionToInt32OptionArr(m []Int32Option, f func(Int32Option) BoolOption) []BoolOption {
	acc := make([]BoolOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int32Option: Int32Option->StringOption */ func MapStringOptionToInt32OptionArr(m []Int32Option, f func(Int32Option) StringOption) []StringOption {
	acc := make([]StringOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int32Option: Int32Option->IntOption */ func MapIntOptionToInt32OptionArr(m []Int32Option, f func(Int32Option) IntOption) []IntOption {
	acc := make([]IntOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int32Option: Int32Option->Int8Option */ func MapInt8OptionToInt32OptionArr(m []Int32Option, f func(Int32Option) Int8Option) []Int8Option {
	acc := make([]Int8Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int32Option: Int32Option->Int16Option */ func MapInt16OptionToInt32OptionArr(m []Int32Option, f func(Int32Option) Int16Option) []Int16Option {
	acc := make([]Int16Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int32Option: Int32Option->Int32Option */ func MapInt32OptionToInt32OptionArr(m []Int32Option, f func(Int32Option) Int32Option) []Int32Option {
	acc := make([]Int32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int32Option: Int32Option->Int64Option */ func MapInt64OptionToInt32OptionArr(m []Int32Option, f func(Int32Option) Int64Option) []Int64Option {
	acc := make([]Int64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int32Option: Int32Option->UintOption */ func MapUintOptionToInt32OptionArr(m []Int32Option, f func(Int32Option) UintOption) []UintOption {
	acc := make([]UintOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int32Option: Int32Option->Uint8Option */ func MapUint8OptionToInt32OptionArr(m []Int32Option, f func(Int32Option) Uint8Option) []Uint8Option {
	acc := make([]Uint8Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int32Option: Int32Option->Uint16Option */ func MapUint16OptionToInt32OptionArr(m []Int32Option, f func(Int32Option) Uint16Option) []Uint16Option {
	acc := make([]Uint16Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int32Option: Int32Option->Uint32Option */ func MapUint32OptionToInt32OptionArr(m []Int32Option, f func(Int32Option) Uint32Option) []Uint32Option {
	acc := make([]Uint32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int32Option: Int32Option->Uint64Option */ func MapUint64OptionToInt32OptionArr(m []Int32Option, f func(Int32Option) Uint64Option) []Uint64Option {
	acc := make([]Uint64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int32Option: Int32Option->UintptrOption */ func MapUintptrOptionToInt32OptionArr(m []Int32Option, f func(Int32Option) UintptrOption) []UintptrOption {
	acc := make([]UintptrOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int32Option: Int32Option->ByteOption */ func MapByteOptionToInt32OptionArr(m []Int32Option, f func(Int32Option) ByteOption) []ByteOption {
	acc := make([]ByteOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int32Option: Int32Option->RuneOption */ func MapRuneOptionToInt32OptionArr(m []Int32Option, f func(Int32Option) RuneOption) []RuneOption {
	acc := make([]RuneOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int32Option: Int32Option->Float32Option */ func MapFloat32OptionToInt32OptionArr(m []Int32Option, f func(Int32Option) Float32Option) []Float32Option {
	acc := make([]Float32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int32Option: Int32Option->Float64Option */ func MapFloat64OptionToInt32OptionArr(m []Int32Option, f func(Int32Option) Float64Option) []Float64Option {
	acc := make([]Float64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int32Option: Int32Option->Complex64Option */ func MapComplex64OptionToInt32OptionArr(m []Int32Option, f func(Int32Option) Complex64Option) []Complex64Option {
	acc := make([]Complex64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int32Option: Int32Option->Complex128Option */ func MapComplex128OptionToInt32OptionArr(m []Int32Option, f func(Int32Option) Complex128Option) []Complex128Option {
	acc := make([]Complex128Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int32Option: Int32Option->AnyOption */ func MapAnyOptionToInt32OptionArr(m []Int32Option, f func(Int32Option) AnyOption) []AnyOption {
	acc := make([]AnyOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int32Option: Int32Option->[]bool */ func MapBoolArrToInt32OptionArr(m []Int32Option, f func(Int32Option) []bool) [][]bool {
	acc := make([][]bool, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int32Option: Int32Option->[]string */ func MapStringArrToInt32OptionArr(m []Int32Option, f func(Int32Option) []string) [][]string {
	acc := make([][]string, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int32Option: Int32Option->[]int */ func MapIntArrToInt32OptionArr(m []Int32Option, f func(Int32Option) []int) [][]int {
	acc := make([][]int, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int32Option: Int32Option->[]int8 */ func MapInt8ArrToInt32OptionArr(m []Int32Option, f func(Int32Option) []int8) [][]int8 {
	acc := make([][]int8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int32Option: Int32Option->[]int16 */ func MapInt16ArrToInt32OptionArr(m []Int32Option, f func(Int32Option) []int16) [][]int16 {
	acc := make([][]int16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int32Option: Int32Option->[]int32 */ func MapInt32ArrToInt32OptionArr(m []Int32Option, f func(Int32Option) []int32) [][]int32 {
	acc := make([][]int32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int32Option: Int32Option->[]int64 */ func MapInt64ArrToInt32OptionArr(m []Int32Option, f func(Int32Option) []int64) [][]int64 {
	acc := make([][]int64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int32Option: Int32Option->[]uint */ func MapUintArrToInt32OptionArr(m []Int32Option, f func(Int32Option) []uint) [][]uint {
	acc := make([][]uint, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int32Option: Int32Option->[]uint8 */ func MapUint8ArrToInt32OptionArr(m []Int32Option, f func(Int32Option) []uint8) [][]uint8 {
	acc := make([][]uint8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int32Option: Int32Option->[]uint16 */ func MapUint16ArrToInt32OptionArr(m []Int32Option, f func(Int32Option) []uint16) [][]uint16 {
	acc := make([][]uint16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int32Option: Int32Option->[]uint32 */ func MapUint32ArrToInt32OptionArr(m []Int32Option, f func(Int32Option) []uint32) [][]uint32 {
	acc := make([][]uint32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int32Option: Int32Option->[]uint64 */ func MapUint64ArrToInt32OptionArr(m []Int32Option, f func(Int32Option) []uint64) [][]uint64 {
	acc := make([][]uint64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int32Option: Int32Option->[]uintptr */ func MapUintptrArrToInt32OptionArr(m []Int32Option, f func(Int32Option) []uintptr) [][]uintptr {
	acc := make([][]uintptr, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int32Option: Int32Option->[]byte */ func MapByteArrToInt32OptionArr(m []Int32Option, f func(Int32Option) []byte) [][]byte {
	acc := make([][]byte, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int32Option: Int32Option->[]rune */ func MapRuneArrToInt32OptionArr(m []Int32Option, f func(Int32Option) []rune) [][]rune {
	acc := make([][]rune, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int32Option: Int32Option->[]float32 */ func MapFloat32ArrToInt32OptionArr(m []Int32Option, f func(Int32Option) []float32) [][]float32 {
	acc := make([][]float32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int32Option: Int32Option->[]float64 */ func MapFloat64ArrToInt32OptionArr(m []Int32Option, f func(Int32Option) []float64) [][]float64 {
	acc := make([][]float64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int32Option: Int32Option->[]complex64 */ func MapComplex64ArrToInt32OptionArr(m []Int32Option, f func(Int32Option) []complex64) [][]complex64 {
	acc := make([][]complex64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int32Option: Int32Option->[]complex128 */ func MapComplex128ArrToInt32OptionArr(m []Int32Option, f func(Int32Option) []complex128) [][]complex128 {
	acc := make([][]complex128, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int32Option: Int32Option->[]Any */ func MapAnyArrToInt32OptionArr(m []Int32Option, f func(Int32Option) []Any) [][]Any {
	acc := make([][]Any, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int32Option: Int32Option->BoolList */ func MapBoolListToInt32OptionArr(m []Int32Option, f func(Int32Option) BoolList) []BoolList {
	acc := make([]BoolList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int32Option: Int32Option->StringList */ func MapStringListToInt32OptionArr(m []Int32Option, f func(Int32Option) StringList) []StringList {
	acc := make([]StringList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int32Option: Int32Option->IntList */ func MapIntListToInt32OptionArr(m []Int32Option, f func(Int32Option) IntList) []IntList {
	acc := make([]IntList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int32Option: Int32Option->Int8List */ func MapInt8ListToInt32OptionArr(m []Int32Option, f func(Int32Option) Int8List) []Int8List {
	acc := make([]Int8List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int32Option: Int32Option->Int16List */ func MapInt16ListToInt32OptionArr(m []Int32Option, f func(Int32Option) Int16List) []Int16List {
	acc := make([]Int16List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int32Option: Int32Option->Int32List */ func MapInt32ListToInt32OptionArr(m []Int32Option, f func(Int32Option) Int32List) []Int32List {
	acc := make([]Int32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int32Option: Int32Option->Int64List */ func MapInt64ListToInt32OptionArr(m []Int32Option, f func(Int32Option) Int64List) []Int64List {
	acc := make([]Int64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int32Option: Int32Option->UintList */ func MapUintListToInt32OptionArr(m []Int32Option, f func(Int32Option) UintList) []UintList {
	acc := make([]UintList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int32Option: Int32Option->Uint8List */ func MapUint8ListToInt32OptionArr(m []Int32Option, f func(Int32Option) Uint8List) []Uint8List {
	acc := make([]Uint8List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int32Option: Int32Option->Uint16List */ func MapUint16ListToInt32OptionArr(m []Int32Option, f func(Int32Option) Uint16List) []Uint16List {
	acc := make([]Uint16List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int32Option: Int32Option->Uint32List */ func MapUint32ListToInt32OptionArr(m []Int32Option, f func(Int32Option) Uint32List) []Uint32List {
	acc := make([]Uint32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int32Option: Int32Option->Uint64List */ func MapUint64ListToInt32OptionArr(m []Int32Option, f func(Int32Option) Uint64List) []Uint64List {
	acc := make([]Uint64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int32Option: Int32Option->UintptrList */ func MapUintptrListToInt32OptionArr(m []Int32Option, f func(Int32Option) UintptrList) []UintptrList {
	acc := make([]UintptrList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int32Option: Int32Option->ByteList */ func MapByteListToInt32OptionArr(m []Int32Option, f func(Int32Option) ByteList) []ByteList {
	acc := make([]ByteList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int32Option: Int32Option->RuneList */ func MapRuneListToInt32OptionArr(m []Int32Option, f func(Int32Option) RuneList) []RuneList {
	acc := make([]RuneList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int32Option: Int32Option->Float32List */ func MapFloat32ListToInt32OptionArr(m []Int32Option, f func(Int32Option) Float32List) []Float32List {
	acc := make([]Float32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int32Option: Int32Option->Float64List */ func MapFloat64ListToInt32OptionArr(m []Int32Option, f func(Int32Option) Float64List) []Float64List {
	acc := make([]Float64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int32Option: Int32Option->Complex64List */ func MapComplex64ListToInt32OptionArr(m []Int32Option, f func(Int32Option) Complex64List) []Complex64List {
	acc := make([]Complex64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int32Option: Int32Option->Complex128List */ func MapComplex128ListToInt32OptionArr(m []Int32Option, f func(Int32Option) Complex128List) []Complex128List {
	acc := make([]Complex128List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int32Option: Int32Option->AnyList */ func MapAnyListToInt32OptionArr(m []Int32Option, f func(Int32Option) AnyList) []AnyList {
	acc := make([]AnyList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int64Option: Int64Option->bool */ func MapBoolToInt64OptionArr(m []Int64Option, f func(Int64Option) bool) []bool {
	acc := make([]bool, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int64Option: Int64Option->string */ func MapStringToInt64OptionArr(m []Int64Option, f func(Int64Option) string) []string {
	acc := make([]string, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int64Option: Int64Option->int */ func MapIntToInt64OptionArr(m []Int64Option, f func(Int64Option) int) []int {
	acc := make([]int, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int64Option: Int64Option->int8 */ func MapInt8ToInt64OptionArr(m []Int64Option, f func(Int64Option) int8) []int8 {
	acc := make([]int8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int64Option: Int64Option->int16 */ func MapInt16ToInt64OptionArr(m []Int64Option, f func(Int64Option) int16) []int16 {
	acc := make([]int16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int64Option: Int64Option->int32 */ func MapInt32ToInt64OptionArr(m []Int64Option, f func(Int64Option) int32) []int32 {
	acc := make([]int32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int64Option: Int64Option->int64 */ func MapInt64ToInt64OptionArr(m []Int64Option, f func(Int64Option) int64) []int64 {
	acc := make([]int64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int64Option: Int64Option->uint */ func MapUintToInt64OptionArr(m []Int64Option, f func(Int64Option) uint) []uint {
	acc := make([]uint, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int64Option: Int64Option->uint8 */ func MapUint8ToInt64OptionArr(m []Int64Option, f func(Int64Option) uint8) []uint8 {
	acc := make([]uint8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int64Option: Int64Option->uint16 */ func MapUint16ToInt64OptionArr(m []Int64Option, f func(Int64Option) uint16) []uint16 {
	acc := make([]uint16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int64Option: Int64Option->uint32 */ func MapUint32ToInt64OptionArr(m []Int64Option, f func(Int64Option) uint32) []uint32 {
	acc := make([]uint32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int64Option: Int64Option->uint64 */ func MapUint64ToInt64OptionArr(m []Int64Option, f func(Int64Option) uint64) []uint64 {
	acc := make([]uint64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int64Option: Int64Option->uintptr */ func MapUintptrToInt64OptionArr(m []Int64Option, f func(Int64Option) uintptr) []uintptr {
	acc := make([]uintptr, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int64Option: Int64Option->byte */ func MapByteToInt64OptionArr(m []Int64Option, f func(Int64Option) byte) []byte {
	acc := make([]byte, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int64Option: Int64Option->rune */ func MapRuneToInt64OptionArr(m []Int64Option, f func(Int64Option) rune) []rune {
	acc := make([]rune, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int64Option: Int64Option->float32 */ func MapFloat32ToInt64OptionArr(m []Int64Option, f func(Int64Option) float32) []float32 {
	acc := make([]float32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int64Option: Int64Option->float64 */ func MapFloat64ToInt64OptionArr(m []Int64Option, f func(Int64Option) float64) []float64 {
	acc := make([]float64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int64Option: Int64Option->complex64 */ func MapComplex64ToInt64OptionArr(m []Int64Option, f func(Int64Option) complex64) []complex64 {
	acc := make([]complex64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int64Option: Int64Option->complex128 */ func MapComplex128ToInt64OptionArr(m []Int64Option, f func(Int64Option) complex128) []complex128 {
	acc := make([]complex128, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int64Option: Int64Option->Any */ func MapAnyToInt64OptionArr(m []Int64Option, f func(Int64Option) Any) []Any {
	acc := make([]Any, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int64Option: Int64Option->BoolOption */ func MapBoolOptionToInt64OptionArr(m []Int64Option, f func(Int64Option) BoolOption) []BoolOption {
	acc := make([]BoolOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int64Option: Int64Option->StringOption */ func MapStringOptionToInt64OptionArr(m []Int64Option, f func(Int64Option) StringOption) []StringOption {
	acc := make([]StringOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int64Option: Int64Option->IntOption */ func MapIntOptionToInt64OptionArr(m []Int64Option, f func(Int64Option) IntOption) []IntOption {
	acc := make([]IntOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int64Option: Int64Option->Int8Option */ func MapInt8OptionToInt64OptionArr(m []Int64Option, f func(Int64Option) Int8Option) []Int8Option {
	acc := make([]Int8Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int64Option: Int64Option->Int16Option */ func MapInt16OptionToInt64OptionArr(m []Int64Option, f func(Int64Option) Int16Option) []Int16Option {
	acc := make([]Int16Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int64Option: Int64Option->Int32Option */ func MapInt32OptionToInt64OptionArr(m []Int64Option, f func(Int64Option) Int32Option) []Int32Option {
	acc := make([]Int32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int64Option: Int64Option->Int64Option */ func MapInt64OptionToInt64OptionArr(m []Int64Option, f func(Int64Option) Int64Option) []Int64Option {
	acc := make([]Int64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int64Option: Int64Option->UintOption */ func MapUintOptionToInt64OptionArr(m []Int64Option, f func(Int64Option) UintOption) []UintOption {
	acc := make([]UintOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int64Option: Int64Option->Uint8Option */ func MapUint8OptionToInt64OptionArr(m []Int64Option, f func(Int64Option) Uint8Option) []Uint8Option {
	acc := make([]Uint8Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int64Option: Int64Option->Uint16Option */ func MapUint16OptionToInt64OptionArr(m []Int64Option, f func(Int64Option) Uint16Option) []Uint16Option {
	acc := make([]Uint16Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int64Option: Int64Option->Uint32Option */ func MapUint32OptionToInt64OptionArr(m []Int64Option, f func(Int64Option) Uint32Option) []Uint32Option {
	acc := make([]Uint32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int64Option: Int64Option->Uint64Option */ func MapUint64OptionToInt64OptionArr(m []Int64Option, f func(Int64Option) Uint64Option) []Uint64Option {
	acc := make([]Uint64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int64Option: Int64Option->UintptrOption */ func MapUintptrOptionToInt64OptionArr(m []Int64Option, f func(Int64Option) UintptrOption) []UintptrOption {
	acc := make([]UintptrOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int64Option: Int64Option->ByteOption */ func MapByteOptionToInt64OptionArr(m []Int64Option, f func(Int64Option) ByteOption) []ByteOption {
	acc := make([]ByteOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int64Option: Int64Option->RuneOption */ func MapRuneOptionToInt64OptionArr(m []Int64Option, f func(Int64Option) RuneOption) []RuneOption {
	acc := make([]RuneOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int64Option: Int64Option->Float32Option */ func MapFloat32OptionToInt64OptionArr(m []Int64Option, f func(Int64Option) Float32Option) []Float32Option {
	acc := make([]Float32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int64Option: Int64Option->Float64Option */ func MapFloat64OptionToInt64OptionArr(m []Int64Option, f func(Int64Option) Float64Option) []Float64Option {
	acc := make([]Float64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int64Option: Int64Option->Complex64Option */ func MapComplex64OptionToInt64OptionArr(m []Int64Option, f func(Int64Option) Complex64Option) []Complex64Option {
	acc := make([]Complex64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int64Option: Int64Option->Complex128Option */ func MapComplex128OptionToInt64OptionArr(m []Int64Option, f func(Int64Option) Complex128Option) []Complex128Option {
	acc := make([]Complex128Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int64Option: Int64Option->AnyOption */ func MapAnyOptionToInt64OptionArr(m []Int64Option, f func(Int64Option) AnyOption) []AnyOption {
	acc := make([]AnyOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int64Option: Int64Option->[]bool */ func MapBoolArrToInt64OptionArr(m []Int64Option, f func(Int64Option) []bool) [][]bool {
	acc := make([][]bool, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int64Option: Int64Option->[]string */ func MapStringArrToInt64OptionArr(m []Int64Option, f func(Int64Option) []string) [][]string {
	acc := make([][]string, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int64Option: Int64Option->[]int */ func MapIntArrToInt64OptionArr(m []Int64Option, f func(Int64Option) []int) [][]int {
	acc := make([][]int, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int64Option: Int64Option->[]int8 */ func MapInt8ArrToInt64OptionArr(m []Int64Option, f func(Int64Option) []int8) [][]int8 {
	acc := make([][]int8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int64Option: Int64Option->[]int16 */ func MapInt16ArrToInt64OptionArr(m []Int64Option, f func(Int64Option) []int16) [][]int16 {
	acc := make([][]int16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int64Option: Int64Option->[]int32 */ func MapInt32ArrToInt64OptionArr(m []Int64Option, f func(Int64Option) []int32) [][]int32 {
	acc := make([][]int32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int64Option: Int64Option->[]int64 */ func MapInt64ArrToInt64OptionArr(m []Int64Option, f func(Int64Option) []int64) [][]int64 {
	acc := make([][]int64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int64Option: Int64Option->[]uint */ func MapUintArrToInt64OptionArr(m []Int64Option, f func(Int64Option) []uint) [][]uint {
	acc := make([][]uint, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int64Option: Int64Option->[]uint8 */ func MapUint8ArrToInt64OptionArr(m []Int64Option, f func(Int64Option) []uint8) [][]uint8 {
	acc := make([][]uint8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int64Option: Int64Option->[]uint16 */ func MapUint16ArrToInt64OptionArr(m []Int64Option, f func(Int64Option) []uint16) [][]uint16 {
	acc := make([][]uint16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int64Option: Int64Option->[]uint32 */ func MapUint32ArrToInt64OptionArr(m []Int64Option, f func(Int64Option) []uint32) [][]uint32 {
	acc := make([][]uint32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int64Option: Int64Option->[]uint64 */ func MapUint64ArrToInt64OptionArr(m []Int64Option, f func(Int64Option) []uint64) [][]uint64 {
	acc := make([][]uint64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int64Option: Int64Option->[]uintptr */ func MapUintptrArrToInt64OptionArr(m []Int64Option, f func(Int64Option) []uintptr) [][]uintptr {
	acc := make([][]uintptr, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int64Option: Int64Option->[]byte */ func MapByteArrToInt64OptionArr(m []Int64Option, f func(Int64Option) []byte) [][]byte {
	acc := make([][]byte, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int64Option: Int64Option->[]rune */ func MapRuneArrToInt64OptionArr(m []Int64Option, f func(Int64Option) []rune) [][]rune {
	acc := make([][]rune, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int64Option: Int64Option->[]float32 */ func MapFloat32ArrToInt64OptionArr(m []Int64Option, f func(Int64Option) []float32) [][]float32 {
	acc := make([][]float32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int64Option: Int64Option->[]float64 */ func MapFloat64ArrToInt64OptionArr(m []Int64Option, f func(Int64Option) []float64) [][]float64 {
	acc := make([][]float64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int64Option: Int64Option->[]complex64 */ func MapComplex64ArrToInt64OptionArr(m []Int64Option, f func(Int64Option) []complex64) [][]complex64 {
	acc := make([][]complex64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int64Option: Int64Option->[]complex128 */ func MapComplex128ArrToInt64OptionArr(m []Int64Option, f func(Int64Option) []complex128) [][]complex128 {
	acc := make([][]complex128, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int64Option: Int64Option->[]Any */ func MapAnyArrToInt64OptionArr(m []Int64Option, f func(Int64Option) []Any) [][]Any {
	acc := make([][]Any, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int64Option: Int64Option->BoolList */ func MapBoolListToInt64OptionArr(m []Int64Option, f func(Int64Option) BoolList) []BoolList {
	acc := make([]BoolList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int64Option: Int64Option->StringList */ func MapStringListToInt64OptionArr(m []Int64Option, f func(Int64Option) StringList) []StringList {
	acc := make([]StringList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int64Option: Int64Option->IntList */ func MapIntListToInt64OptionArr(m []Int64Option, f func(Int64Option) IntList) []IntList {
	acc := make([]IntList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int64Option: Int64Option->Int8List */ func MapInt8ListToInt64OptionArr(m []Int64Option, f func(Int64Option) Int8List) []Int8List {
	acc := make([]Int8List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int64Option: Int64Option->Int16List */ func MapInt16ListToInt64OptionArr(m []Int64Option, f func(Int64Option) Int16List) []Int16List {
	acc := make([]Int16List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int64Option: Int64Option->Int32List */ func MapInt32ListToInt64OptionArr(m []Int64Option, f func(Int64Option) Int32List) []Int32List {
	acc := make([]Int32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int64Option: Int64Option->Int64List */ func MapInt64ListToInt64OptionArr(m []Int64Option, f func(Int64Option) Int64List) []Int64List {
	acc := make([]Int64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int64Option: Int64Option->UintList */ func MapUintListToInt64OptionArr(m []Int64Option, f func(Int64Option) UintList) []UintList {
	acc := make([]UintList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int64Option: Int64Option->Uint8List */ func MapUint8ListToInt64OptionArr(m []Int64Option, f func(Int64Option) Uint8List) []Uint8List {
	acc := make([]Uint8List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int64Option: Int64Option->Uint16List */ func MapUint16ListToInt64OptionArr(m []Int64Option, f func(Int64Option) Uint16List) []Uint16List {
	acc := make([]Uint16List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int64Option: Int64Option->Uint32List */ func MapUint32ListToInt64OptionArr(m []Int64Option, f func(Int64Option) Uint32List) []Uint32List {
	acc := make([]Uint32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int64Option: Int64Option->Uint64List */ func MapUint64ListToInt64OptionArr(m []Int64Option, f func(Int64Option) Uint64List) []Uint64List {
	acc := make([]Uint64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int64Option: Int64Option->UintptrList */ func MapUintptrListToInt64OptionArr(m []Int64Option, f func(Int64Option) UintptrList) []UintptrList {
	acc := make([]UintptrList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int64Option: Int64Option->ByteList */ func MapByteListToInt64OptionArr(m []Int64Option, f func(Int64Option) ByteList) []ByteList {
	acc := make([]ByteList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int64Option: Int64Option->RuneList */ func MapRuneListToInt64OptionArr(m []Int64Option, f func(Int64Option) RuneList) []RuneList {
	acc := make([]RuneList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int64Option: Int64Option->Float32List */ func MapFloat32ListToInt64OptionArr(m []Int64Option, f func(Int64Option) Float32List) []Float32List {
	acc := make([]Float32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int64Option: Int64Option->Float64List */ func MapFloat64ListToInt64OptionArr(m []Int64Option, f func(Int64Option) Float64List) []Float64List {
	acc := make([]Float64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int64Option: Int64Option->Complex64List */ func MapComplex64ListToInt64OptionArr(m []Int64Option, f func(Int64Option) Complex64List) []Complex64List {
	acc := make([]Complex64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int64Option: Int64Option->Complex128List */ func MapComplex128ListToInt64OptionArr(m []Int64Option, f func(Int64Option) Complex128List) []Complex128List {
	acc := make([]Complex128List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Int64Option: Int64Option->AnyList */ func MapAnyListToInt64OptionArr(m []Int64Option, f func(Int64Option) AnyList) []AnyList {
	acc := make([]AnyList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintOption: UintOption->bool */ func MapBoolToUintOptionArr(m []UintOption, f func(UintOption) bool) []bool {
	acc := make([]bool, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintOption: UintOption->string */ func MapStringToUintOptionArr(m []UintOption, f func(UintOption) string) []string {
	acc := make([]string, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintOption: UintOption->int */ func MapIntToUintOptionArr(m []UintOption, f func(UintOption) int) []int {
	acc := make([]int, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintOption: UintOption->int8 */ func MapInt8ToUintOptionArr(m []UintOption, f func(UintOption) int8) []int8 {
	acc := make([]int8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintOption: UintOption->int16 */ func MapInt16ToUintOptionArr(m []UintOption, f func(UintOption) int16) []int16 {
	acc := make([]int16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintOption: UintOption->int32 */ func MapInt32ToUintOptionArr(m []UintOption, f func(UintOption) int32) []int32 {
	acc := make([]int32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintOption: UintOption->int64 */ func MapInt64ToUintOptionArr(m []UintOption, f func(UintOption) int64) []int64 {
	acc := make([]int64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintOption: UintOption->uint */ func MapUintToUintOptionArr(m []UintOption, f func(UintOption) uint) []uint {
	acc := make([]uint, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintOption: UintOption->uint8 */ func MapUint8ToUintOptionArr(m []UintOption, f func(UintOption) uint8) []uint8 {
	acc := make([]uint8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintOption: UintOption->uint16 */ func MapUint16ToUintOptionArr(m []UintOption, f func(UintOption) uint16) []uint16 {
	acc := make([]uint16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintOption: UintOption->uint32 */ func MapUint32ToUintOptionArr(m []UintOption, f func(UintOption) uint32) []uint32 {
	acc := make([]uint32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintOption: UintOption->uint64 */ func MapUint64ToUintOptionArr(m []UintOption, f func(UintOption) uint64) []uint64 {
	acc := make([]uint64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintOption: UintOption->uintptr */ func MapUintptrToUintOptionArr(m []UintOption, f func(UintOption) uintptr) []uintptr {
	acc := make([]uintptr, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintOption: UintOption->byte */ func MapByteToUintOptionArr(m []UintOption, f func(UintOption) byte) []byte {
	acc := make([]byte, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintOption: UintOption->rune */ func MapRuneToUintOptionArr(m []UintOption, f func(UintOption) rune) []rune {
	acc := make([]rune, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintOption: UintOption->float32 */ func MapFloat32ToUintOptionArr(m []UintOption, f func(UintOption) float32) []float32 {
	acc := make([]float32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintOption: UintOption->float64 */ func MapFloat64ToUintOptionArr(m []UintOption, f func(UintOption) float64) []float64 {
	acc := make([]float64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintOption: UintOption->complex64 */ func MapComplex64ToUintOptionArr(m []UintOption, f func(UintOption) complex64) []complex64 {
	acc := make([]complex64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintOption: UintOption->complex128 */ func MapComplex128ToUintOptionArr(m []UintOption, f func(UintOption) complex128) []complex128 {
	acc := make([]complex128, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintOption: UintOption->Any */ func MapAnyToUintOptionArr(m []UintOption, f func(UintOption) Any) []Any {
	acc := make([]Any, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintOption: UintOption->BoolOption */ func MapBoolOptionToUintOptionArr(m []UintOption, f func(UintOption) BoolOption) []BoolOption {
	acc := make([]BoolOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintOption: UintOption->StringOption */ func MapStringOptionToUintOptionArr(m []UintOption, f func(UintOption) StringOption) []StringOption {
	acc := make([]StringOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintOption: UintOption->IntOption */ func MapIntOptionToUintOptionArr(m []UintOption, f func(UintOption) IntOption) []IntOption {
	acc := make([]IntOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintOption: UintOption->Int8Option */ func MapInt8OptionToUintOptionArr(m []UintOption, f func(UintOption) Int8Option) []Int8Option {
	acc := make([]Int8Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintOption: UintOption->Int16Option */ func MapInt16OptionToUintOptionArr(m []UintOption, f func(UintOption) Int16Option) []Int16Option {
	acc := make([]Int16Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintOption: UintOption->Int32Option */ func MapInt32OptionToUintOptionArr(m []UintOption, f func(UintOption) Int32Option) []Int32Option {
	acc := make([]Int32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintOption: UintOption->Int64Option */ func MapInt64OptionToUintOptionArr(m []UintOption, f func(UintOption) Int64Option) []Int64Option {
	acc := make([]Int64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintOption: UintOption->UintOption */ func MapUintOptionToUintOptionArr(m []UintOption, f func(UintOption) UintOption) []UintOption {
	acc := make([]UintOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintOption: UintOption->Uint8Option */ func MapUint8OptionToUintOptionArr(m []UintOption, f func(UintOption) Uint8Option) []Uint8Option {
	acc := make([]Uint8Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintOption: UintOption->Uint16Option */ func MapUint16OptionToUintOptionArr(m []UintOption, f func(UintOption) Uint16Option) []Uint16Option {
	acc := make([]Uint16Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintOption: UintOption->Uint32Option */ func MapUint32OptionToUintOptionArr(m []UintOption, f func(UintOption) Uint32Option) []Uint32Option {
	acc := make([]Uint32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintOption: UintOption->Uint64Option */ func MapUint64OptionToUintOptionArr(m []UintOption, f func(UintOption) Uint64Option) []Uint64Option {
	acc := make([]Uint64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintOption: UintOption->UintptrOption */ func MapUintptrOptionToUintOptionArr(m []UintOption, f func(UintOption) UintptrOption) []UintptrOption {
	acc := make([]UintptrOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintOption: UintOption->ByteOption */ func MapByteOptionToUintOptionArr(m []UintOption, f func(UintOption) ByteOption) []ByteOption {
	acc := make([]ByteOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintOption: UintOption->RuneOption */ func MapRuneOptionToUintOptionArr(m []UintOption, f func(UintOption) RuneOption) []RuneOption {
	acc := make([]RuneOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintOption: UintOption->Float32Option */ func MapFloat32OptionToUintOptionArr(m []UintOption, f func(UintOption) Float32Option) []Float32Option {
	acc := make([]Float32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintOption: UintOption->Float64Option */ func MapFloat64OptionToUintOptionArr(m []UintOption, f func(UintOption) Float64Option) []Float64Option {
	acc := make([]Float64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintOption: UintOption->Complex64Option */ func MapComplex64OptionToUintOptionArr(m []UintOption, f func(UintOption) Complex64Option) []Complex64Option {
	acc := make([]Complex64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintOption: UintOption->Complex128Option */ func MapComplex128OptionToUintOptionArr(m []UintOption, f func(UintOption) Complex128Option) []Complex128Option {
	acc := make([]Complex128Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintOption: UintOption->AnyOption */ func MapAnyOptionToUintOptionArr(m []UintOption, f func(UintOption) AnyOption) []AnyOption {
	acc := make([]AnyOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintOption: UintOption->[]bool */ func MapBoolArrToUintOptionArr(m []UintOption, f func(UintOption) []bool) [][]bool {
	acc := make([][]bool, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintOption: UintOption->[]string */ func MapStringArrToUintOptionArr(m []UintOption, f func(UintOption) []string) [][]string {
	acc := make([][]string, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintOption: UintOption->[]int */ func MapIntArrToUintOptionArr(m []UintOption, f func(UintOption) []int) [][]int {
	acc := make([][]int, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintOption: UintOption->[]int8 */ func MapInt8ArrToUintOptionArr(m []UintOption, f func(UintOption) []int8) [][]int8 {
	acc := make([][]int8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintOption: UintOption->[]int16 */ func MapInt16ArrToUintOptionArr(m []UintOption, f func(UintOption) []int16) [][]int16 {
	acc := make([][]int16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintOption: UintOption->[]int32 */ func MapInt32ArrToUintOptionArr(m []UintOption, f func(UintOption) []int32) [][]int32 {
	acc := make([][]int32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintOption: UintOption->[]int64 */ func MapInt64ArrToUintOptionArr(m []UintOption, f func(UintOption) []int64) [][]int64 {
	acc := make([][]int64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintOption: UintOption->[]uint */ func MapUintArrToUintOptionArr(m []UintOption, f func(UintOption) []uint) [][]uint {
	acc := make([][]uint, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintOption: UintOption->[]uint8 */ func MapUint8ArrToUintOptionArr(m []UintOption, f func(UintOption) []uint8) [][]uint8 {
	acc := make([][]uint8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintOption: UintOption->[]uint16 */ func MapUint16ArrToUintOptionArr(m []UintOption, f func(UintOption) []uint16) [][]uint16 {
	acc := make([][]uint16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintOption: UintOption->[]uint32 */ func MapUint32ArrToUintOptionArr(m []UintOption, f func(UintOption) []uint32) [][]uint32 {
	acc := make([][]uint32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintOption: UintOption->[]uint64 */ func MapUint64ArrToUintOptionArr(m []UintOption, f func(UintOption) []uint64) [][]uint64 {
	acc := make([][]uint64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintOption: UintOption->[]uintptr */ func MapUintptrArrToUintOptionArr(m []UintOption, f func(UintOption) []uintptr) [][]uintptr {
	acc := make([][]uintptr, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintOption: UintOption->[]byte */ func MapByteArrToUintOptionArr(m []UintOption, f func(UintOption) []byte) [][]byte {
	acc := make([][]byte, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintOption: UintOption->[]rune */ func MapRuneArrToUintOptionArr(m []UintOption, f func(UintOption) []rune) [][]rune {
	acc := make([][]rune, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintOption: UintOption->[]float32 */ func MapFloat32ArrToUintOptionArr(m []UintOption, f func(UintOption) []float32) [][]float32 {
	acc := make([][]float32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintOption: UintOption->[]float64 */ func MapFloat64ArrToUintOptionArr(m []UintOption, f func(UintOption) []float64) [][]float64 {
	acc := make([][]float64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintOption: UintOption->[]complex64 */ func MapComplex64ArrToUintOptionArr(m []UintOption, f func(UintOption) []complex64) [][]complex64 {
	acc := make([][]complex64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintOption: UintOption->[]complex128 */ func MapComplex128ArrToUintOptionArr(m []UintOption, f func(UintOption) []complex128) [][]complex128 {
	acc := make([][]complex128, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintOption: UintOption->[]Any */ func MapAnyArrToUintOptionArr(m []UintOption, f func(UintOption) []Any) [][]Any {
	acc := make([][]Any, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintOption: UintOption->BoolList */ func MapBoolListToUintOptionArr(m []UintOption, f func(UintOption) BoolList) []BoolList {
	acc := make([]BoolList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintOption: UintOption->StringList */ func MapStringListToUintOptionArr(m []UintOption, f func(UintOption) StringList) []StringList {
	acc := make([]StringList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintOption: UintOption->IntList */ func MapIntListToUintOptionArr(m []UintOption, f func(UintOption) IntList) []IntList {
	acc := make([]IntList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintOption: UintOption->Int8List */ func MapInt8ListToUintOptionArr(m []UintOption, f func(UintOption) Int8List) []Int8List {
	acc := make([]Int8List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintOption: UintOption->Int16List */ func MapInt16ListToUintOptionArr(m []UintOption, f func(UintOption) Int16List) []Int16List {
	acc := make([]Int16List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintOption: UintOption->Int32List */ func MapInt32ListToUintOptionArr(m []UintOption, f func(UintOption) Int32List) []Int32List {
	acc := make([]Int32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintOption: UintOption->Int64List */ func MapInt64ListToUintOptionArr(m []UintOption, f func(UintOption) Int64List) []Int64List {
	acc := make([]Int64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintOption: UintOption->UintList */ func MapUintListToUintOptionArr(m []UintOption, f func(UintOption) UintList) []UintList {
	acc := make([]UintList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintOption: UintOption->Uint8List */ func MapUint8ListToUintOptionArr(m []UintOption, f func(UintOption) Uint8List) []Uint8List {
	acc := make([]Uint8List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintOption: UintOption->Uint16List */ func MapUint16ListToUintOptionArr(m []UintOption, f func(UintOption) Uint16List) []Uint16List {
	acc := make([]Uint16List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintOption: UintOption->Uint32List */ func MapUint32ListToUintOptionArr(m []UintOption, f func(UintOption) Uint32List) []Uint32List {
	acc := make([]Uint32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintOption: UintOption->Uint64List */ func MapUint64ListToUintOptionArr(m []UintOption, f func(UintOption) Uint64List) []Uint64List {
	acc := make([]Uint64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintOption: UintOption->UintptrList */ func MapUintptrListToUintOptionArr(m []UintOption, f func(UintOption) UintptrList) []UintptrList {
	acc := make([]UintptrList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintOption: UintOption->ByteList */ func MapByteListToUintOptionArr(m []UintOption, f func(UintOption) ByteList) []ByteList {
	acc := make([]ByteList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintOption: UintOption->RuneList */ func MapRuneListToUintOptionArr(m []UintOption, f func(UintOption) RuneList) []RuneList {
	acc := make([]RuneList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintOption: UintOption->Float32List */ func MapFloat32ListToUintOptionArr(m []UintOption, f func(UintOption) Float32List) []Float32List {
	acc := make([]Float32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintOption: UintOption->Float64List */ func MapFloat64ListToUintOptionArr(m []UintOption, f func(UintOption) Float64List) []Float64List {
	acc := make([]Float64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintOption: UintOption->Complex64List */ func MapComplex64ListToUintOptionArr(m []UintOption, f func(UintOption) Complex64List) []Complex64List {
	acc := make([]Complex64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintOption: UintOption->Complex128List */ func MapComplex128ListToUintOptionArr(m []UintOption, f func(UintOption) Complex128List) []Complex128List {
	acc := make([]Complex128List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintOption: UintOption->AnyList */ func MapAnyListToUintOptionArr(m []UintOption, f func(UintOption) AnyList) []AnyList {
	acc := make([]AnyList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint8Option: Uint8Option->bool */ func MapBoolToUint8OptionArr(m []Uint8Option, f func(Uint8Option) bool) []bool {
	acc := make([]bool, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint8Option: Uint8Option->string */ func MapStringToUint8OptionArr(m []Uint8Option, f func(Uint8Option) string) []string {
	acc := make([]string, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint8Option: Uint8Option->int */ func MapIntToUint8OptionArr(m []Uint8Option, f func(Uint8Option) int) []int {
	acc := make([]int, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint8Option: Uint8Option->int8 */ func MapInt8ToUint8OptionArr(m []Uint8Option, f func(Uint8Option) int8) []int8 {
	acc := make([]int8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint8Option: Uint8Option->int16 */ func MapInt16ToUint8OptionArr(m []Uint8Option, f func(Uint8Option) int16) []int16 {
	acc := make([]int16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint8Option: Uint8Option->int32 */ func MapInt32ToUint8OptionArr(m []Uint8Option, f func(Uint8Option) int32) []int32 {
	acc := make([]int32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint8Option: Uint8Option->int64 */ func MapInt64ToUint8OptionArr(m []Uint8Option, f func(Uint8Option) int64) []int64 {
	acc := make([]int64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint8Option: Uint8Option->uint */ func MapUintToUint8OptionArr(m []Uint8Option, f func(Uint8Option) uint) []uint {
	acc := make([]uint, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint8Option: Uint8Option->uint8 */ func MapUint8ToUint8OptionArr(m []Uint8Option, f func(Uint8Option) uint8) []uint8 {
	acc := make([]uint8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint8Option: Uint8Option->uint16 */ func MapUint16ToUint8OptionArr(m []Uint8Option, f func(Uint8Option) uint16) []uint16 {
	acc := make([]uint16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint8Option: Uint8Option->uint32 */ func MapUint32ToUint8OptionArr(m []Uint8Option, f func(Uint8Option) uint32) []uint32 {
	acc := make([]uint32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint8Option: Uint8Option->uint64 */ func MapUint64ToUint8OptionArr(m []Uint8Option, f func(Uint8Option) uint64) []uint64 {
	acc := make([]uint64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint8Option: Uint8Option->uintptr */ func MapUintptrToUint8OptionArr(m []Uint8Option, f func(Uint8Option) uintptr) []uintptr {
	acc := make([]uintptr, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint8Option: Uint8Option->byte */ func MapByteToUint8OptionArr(m []Uint8Option, f func(Uint8Option) byte) []byte {
	acc := make([]byte, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint8Option: Uint8Option->rune */ func MapRuneToUint8OptionArr(m []Uint8Option, f func(Uint8Option) rune) []rune {
	acc := make([]rune, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint8Option: Uint8Option->float32 */ func MapFloat32ToUint8OptionArr(m []Uint8Option, f func(Uint8Option) float32) []float32 {
	acc := make([]float32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint8Option: Uint8Option->float64 */ func MapFloat64ToUint8OptionArr(m []Uint8Option, f func(Uint8Option) float64) []float64 {
	acc := make([]float64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint8Option: Uint8Option->complex64 */ func MapComplex64ToUint8OptionArr(m []Uint8Option, f func(Uint8Option) complex64) []complex64 {
	acc := make([]complex64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint8Option: Uint8Option->complex128 */ func MapComplex128ToUint8OptionArr(m []Uint8Option, f func(Uint8Option) complex128) []complex128 {
	acc := make([]complex128, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint8Option: Uint8Option->Any */ func MapAnyToUint8OptionArr(m []Uint8Option, f func(Uint8Option) Any) []Any {
	acc := make([]Any, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint8Option: Uint8Option->BoolOption */ func MapBoolOptionToUint8OptionArr(m []Uint8Option, f func(Uint8Option) BoolOption) []BoolOption {
	acc := make([]BoolOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint8Option: Uint8Option->StringOption */ func MapStringOptionToUint8OptionArr(m []Uint8Option, f func(Uint8Option) StringOption) []StringOption {
	acc := make([]StringOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint8Option: Uint8Option->IntOption */ func MapIntOptionToUint8OptionArr(m []Uint8Option, f func(Uint8Option) IntOption) []IntOption {
	acc := make([]IntOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint8Option: Uint8Option->Int8Option */ func MapInt8OptionToUint8OptionArr(m []Uint8Option, f func(Uint8Option) Int8Option) []Int8Option {
	acc := make([]Int8Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint8Option: Uint8Option->Int16Option */ func MapInt16OptionToUint8OptionArr(m []Uint8Option, f func(Uint8Option) Int16Option) []Int16Option {
	acc := make([]Int16Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint8Option: Uint8Option->Int32Option */ func MapInt32OptionToUint8OptionArr(m []Uint8Option, f func(Uint8Option) Int32Option) []Int32Option {
	acc := make([]Int32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint8Option: Uint8Option->Int64Option */ func MapInt64OptionToUint8OptionArr(m []Uint8Option, f func(Uint8Option) Int64Option) []Int64Option {
	acc := make([]Int64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint8Option: Uint8Option->UintOption */ func MapUintOptionToUint8OptionArr(m []Uint8Option, f func(Uint8Option) UintOption) []UintOption {
	acc := make([]UintOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint8Option: Uint8Option->Uint8Option */ func MapUint8OptionToUint8OptionArr(m []Uint8Option, f func(Uint8Option) Uint8Option) []Uint8Option {
	acc := make([]Uint8Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint8Option: Uint8Option->Uint16Option */ func MapUint16OptionToUint8OptionArr(m []Uint8Option, f func(Uint8Option) Uint16Option) []Uint16Option {
	acc := make([]Uint16Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint8Option: Uint8Option->Uint32Option */ func MapUint32OptionToUint8OptionArr(m []Uint8Option, f func(Uint8Option) Uint32Option) []Uint32Option {
	acc := make([]Uint32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint8Option: Uint8Option->Uint64Option */ func MapUint64OptionToUint8OptionArr(m []Uint8Option, f func(Uint8Option) Uint64Option) []Uint64Option {
	acc := make([]Uint64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint8Option: Uint8Option->UintptrOption */ func MapUintptrOptionToUint8OptionArr(m []Uint8Option, f func(Uint8Option) UintptrOption) []UintptrOption {
	acc := make([]UintptrOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint8Option: Uint8Option->ByteOption */ func MapByteOptionToUint8OptionArr(m []Uint8Option, f func(Uint8Option) ByteOption) []ByteOption {
	acc := make([]ByteOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint8Option: Uint8Option->RuneOption */ func MapRuneOptionToUint8OptionArr(m []Uint8Option, f func(Uint8Option) RuneOption) []RuneOption {
	acc := make([]RuneOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint8Option: Uint8Option->Float32Option */ func MapFloat32OptionToUint8OptionArr(m []Uint8Option, f func(Uint8Option) Float32Option) []Float32Option {
	acc := make([]Float32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint8Option: Uint8Option->Float64Option */ func MapFloat64OptionToUint8OptionArr(m []Uint8Option, f func(Uint8Option) Float64Option) []Float64Option {
	acc := make([]Float64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint8Option: Uint8Option->Complex64Option */ func MapComplex64OptionToUint8OptionArr(m []Uint8Option, f func(Uint8Option) Complex64Option) []Complex64Option {
	acc := make([]Complex64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint8Option: Uint8Option->Complex128Option */ func MapComplex128OptionToUint8OptionArr(m []Uint8Option, f func(Uint8Option) Complex128Option) []Complex128Option {
	acc := make([]Complex128Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint8Option: Uint8Option->AnyOption */ func MapAnyOptionToUint8OptionArr(m []Uint8Option, f func(Uint8Option) AnyOption) []AnyOption {
	acc := make([]AnyOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint8Option: Uint8Option->[]bool */ func MapBoolArrToUint8OptionArr(m []Uint8Option, f func(Uint8Option) []bool) [][]bool {
	acc := make([][]bool, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint8Option: Uint8Option->[]string */ func MapStringArrToUint8OptionArr(m []Uint8Option, f func(Uint8Option) []string) [][]string {
	acc := make([][]string, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint8Option: Uint8Option->[]int */ func MapIntArrToUint8OptionArr(m []Uint8Option, f func(Uint8Option) []int) [][]int {
	acc := make([][]int, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint8Option: Uint8Option->[]int8 */ func MapInt8ArrToUint8OptionArr(m []Uint8Option, f func(Uint8Option) []int8) [][]int8 {
	acc := make([][]int8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint8Option: Uint8Option->[]int16 */ func MapInt16ArrToUint8OptionArr(m []Uint8Option, f func(Uint8Option) []int16) [][]int16 {
	acc := make([][]int16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint8Option: Uint8Option->[]int32 */ func MapInt32ArrToUint8OptionArr(m []Uint8Option, f func(Uint8Option) []int32) [][]int32 {
	acc := make([][]int32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint8Option: Uint8Option->[]int64 */ func MapInt64ArrToUint8OptionArr(m []Uint8Option, f func(Uint8Option) []int64) [][]int64 {
	acc := make([][]int64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint8Option: Uint8Option->[]uint */ func MapUintArrToUint8OptionArr(m []Uint8Option, f func(Uint8Option) []uint) [][]uint {
	acc := make([][]uint, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint8Option: Uint8Option->[]uint8 */ func MapUint8ArrToUint8OptionArr(m []Uint8Option, f func(Uint8Option) []uint8) [][]uint8 {
	acc := make([][]uint8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint8Option: Uint8Option->[]uint16 */ func MapUint16ArrToUint8OptionArr(m []Uint8Option, f func(Uint8Option) []uint16) [][]uint16 {
	acc := make([][]uint16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint8Option: Uint8Option->[]uint32 */ func MapUint32ArrToUint8OptionArr(m []Uint8Option, f func(Uint8Option) []uint32) [][]uint32 {
	acc := make([][]uint32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint8Option: Uint8Option->[]uint64 */ func MapUint64ArrToUint8OptionArr(m []Uint8Option, f func(Uint8Option) []uint64) [][]uint64 {
	acc := make([][]uint64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint8Option: Uint8Option->[]uintptr */ func MapUintptrArrToUint8OptionArr(m []Uint8Option, f func(Uint8Option) []uintptr) [][]uintptr {
	acc := make([][]uintptr, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint8Option: Uint8Option->[]byte */ func MapByteArrToUint8OptionArr(m []Uint8Option, f func(Uint8Option) []byte) [][]byte {
	acc := make([][]byte, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint8Option: Uint8Option->[]rune */ func MapRuneArrToUint8OptionArr(m []Uint8Option, f func(Uint8Option) []rune) [][]rune {
	acc := make([][]rune, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint8Option: Uint8Option->[]float32 */ func MapFloat32ArrToUint8OptionArr(m []Uint8Option, f func(Uint8Option) []float32) [][]float32 {
	acc := make([][]float32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint8Option: Uint8Option->[]float64 */ func MapFloat64ArrToUint8OptionArr(m []Uint8Option, f func(Uint8Option) []float64) [][]float64 {
	acc := make([][]float64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint8Option: Uint8Option->[]complex64 */ func MapComplex64ArrToUint8OptionArr(m []Uint8Option, f func(Uint8Option) []complex64) [][]complex64 {
	acc := make([][]complex64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint8Option: Uint8Option->[]complex128 */ func MapComplex128ArrToUint8OptionArr(m []Uint8Option, f func(Uint8Option) []complex128) [][]complex128 {
	acc := make([][]complex128, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint8Option: Uint8Option->[]Any */ func MapAnyArrToUint8OptionArr(m []Uint8Option, f func(Uint8Option) []Any) [][]Any {
	acc := make([][]Any, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint8Option: Uint8Option->BoolList */ func MapBoolListToUint8OptionArr(m []Uint8Option, f func(Uint8Option) BoolList) []BoolList {
	acc := make([]BoolList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint8Option: Uint8Option->StringList */ func MapStringListToUint8OptionArr(m []Uint8Option, f func(Uint8Option) StringList) []StringList {
	acc := make([]StringList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint8Option: Uint8Option->IntList */ func MapIntListToUint8OptionArr(m []Uint8Option, f func(Uint8Option) IntList) []IntList {
	acc := make([]IntList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint8Option: Uint8Option->Int8List */ func MapInt8ListToUint8OptionArr(m []Uint8Option, f func(Uint8Option) Int8List) []Int8List {
	acc := make([]Int8List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint8Option: Uint8Option->Int16List */ func MapInt16ListToUint8OptionArr(m []Uint8Option, f func(Uint8Option) Int16List) []Int16List {
	acc := make([]Int16List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint8Option: Uint8Option->Int32List */ func MapInt32ListToUint8OptionArr(m []Uint8Option, f func(Uint8Option) Int32List) []Int32List {
	acc := make([]Int32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint8Option: Uint8Option->Int64List */ func MapInt64ListToUint8OptionArr(m []Uint8Option, f func(Uint8Option) Int64List) []Int64List {
	acc := make([]Int64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint8Option: Uint8Option->UintList */ func MapUintListToUint8OptionArr(m []Uint8Option, f func(Uint8Option) UintList) []UintList {
	acc := make([]UintList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint8Option: Uint8Option->Uint8List */ func MapUint8ListToUint8OptionArr(m []Uint8Option, f func(Uint8Option) Uint8List) []Uint8List {
	acc := make([]Uint8List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint8Option: Uint8Option->Uint16List */ func MapUint16ListToUint8OptionArr(m []Uint8Option, f func(Uint8Option) Uint16List) []Uint16List {
	acc := make([]Uint16List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint8Option: Uint8Option->Uint32List */ func MapUint32ListToUint8OptionArr(m []Uint8Option, f func(Uint8Option) Uint32List) []Uint32List {
	acc := make([]Uint32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint8Option: Uint8Option->Uint64List */ func MapUint64ListToUint8OptionArr(m []Uint8Option, f func(Uint8Option) Uint64List) []Uint64List {
	acc := make([]Uint64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint8Option: Uint8Option->UintptrList */ func MapUintptrListToUint8OptionArr(m []Uint8Option, f func(Uint8Option) UintptrList) []UintptrList {
	acc := make([]UintptrList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint8Option: Uint8Option->ByteList */ func MapByteListToUint8OptionArr(m []Uint8Option, f func(Uint8Option) ByteList) []ByteList {
	acc := make([]ByteList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint8Option: Uint8Option->RuneList */ func MapRuneListToUint8OptionArr(m []Uint8Option, f func(Uint8Option) RuneList) []RuneList {
	acc := make([]RuneList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint8Option: Uint8Option->Float32List */ func MapFloat32ListToUint8OptionArr(m []Uint8Option, f func(Uint8Option) Float32List) []Float32List {
	acc := make([]Float32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint8Option: Uint8Option->Float64List */ func MapFloat64ListToUint8OptionArr(m []Uint8Option, f func(Uint8Option) Float64List) []Float64List {
	acc := make([]Float64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint8Option: Uint8Option->Complex64List */ func MapComplex64ListToUint8OptionArr(m []Uint8Option, f func(Uint8Option) Complex64List) []Complex64List {
	acc := make([]Complex64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint8Option: Uint8Option->Complex128List */ func MapComplex128ListToUint8OptionArr(m []Uint8Option, f func(Uint8Option) Complex128List) []Complex128List {
	acc := make([]Complex128List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint8Option: Uint8Option->AnyList */ func MapAnyListToUint8OptionArr(m []Uint8Option, f func(Uint8Option) AnyList) []AnyList {
	acc := make([]AnyList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint16Option: Uint16Option->bool */ func MapBoolToUint16OptionArr(m []Uint16Option, f func(Uint16Option) bool) []bool {
	acc := make([]bool, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint16Option: Uint16Option->string */ func MapStringToUint16OptionArr(m []Uint16Option, f func(Uint16Option) string) []string {
	acc := make([]string, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint16Option: Uint16Option->int */ func MapIntToUint16OptionArr(m []Uint16Option, f func(Uint16Option) int) []int {
	acc := make([]int, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint16Option: Uint16Option->int8 */ func MapInt8ToUint16OptionArr(m []Uint16Option, f func(Uint16Option) int8) []int8 {
	acc := make([]int8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint16Option: Uint16Option->int16 */ func MapInt16ToUint16OptionArr(m []Uint16Option, f func(Uint16Option) int16) []int16 {
	acc := make([]int16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint16Option: Uint16Option->int32 */ func MapInt32ToUint16OptionArr(m []Uint16Option, f func(Uint16Option) int32) []int32 {
	acc := make([]int32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint16Option: Uint16Option->int64 */ func MapInt64ToUint16OptionArr(m []Uint16Option, f func(Uint16Option) int64) []int64 {
	acc := make([]int64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint16Option: Uint16Option->uint */ func MapUintToUint16OptionArr(m []Uint16Option, f func(Uint16Option) uint) []uint {
	acc := make([]uint, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint16Option: Uint16Option->uint8 */ func MapUint8ToUint16OptionArr(m []Uint16Option, f func(Uint16Option) uint8) []uint8 {
	acc := make([]uint8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint16Option: Uint16Option->uint16 */ func MapUint16ToUint16OptionArr(m []Uint16Option, f func(Uint16Option) uint16) []uint16 {
	acc := make([]uint16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint16Option: Uint16Option->uint32 */ func MapUint32ToUint16OptionArr(m []Uint16Option, f func(Uint16Option) uint32) []uint32 {
	acc := make([]uint32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint16Option: Uint16Option->uint64 */ func MapUint64ToUint16OptionArr(m []Uint16Option, f func(Uint16Option) uint64) []uint64 {
	acc := make([]uint64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint16Option: Uint16Option->uintptr */ func MapUintptrToUint16OptionArr(m []Uint16Option, f func(Uint16Option) uintptr) []uintptr {
	acc := make([]uintptr, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint16Option: Uint16Option->byte */ func MapByteToUint16OptionArr(m []Uint16Option, f func(Uint16Option) byte) []byte {
	acc := make([]byte, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint16Option: Uint16Option->rune */ func MapRuneToUint16OptionArr(m []Uint16Option, f func(Uint16Option) rune) []rune {
	acc := make([]rune, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint16Option: Uint16Option->float32 */ func MapFloat32ToUint16OptionArr(m []Uint16Option, f func(Uint16Option) float32) []float32 {
	acc := make([]float32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint16Option: Uint16Option->float64 */ func MapFloat64ToUint16OptionArr(m []Uint16Option, f func(Uint16Option) float64) []float64 {
	acc := make([]float64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint16Option: Uint16Option->complex64 */ func MapComplex64ToUint16OptionArr(m []Uint16Option, f func(Uint16Option) complex64) []complex64 {
	acc := make([]complex64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint16Option: Uint16Option->complex128 */ func MapComplex128ToUint16OptionArr(m []Uint16Option, f func(Uint16Option) complex128) []complex128 {
	acc := make([]complex128, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint16Option: Uint16Option->Any */ func MapAnyToUint16OptionArr(m []Uint16Option, f func(Uint16Option) Any) []Any {
	acc := make([]Any, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint16Option: Uint16Option->BoolOption */ func MapBoolOptionToUint16OptionArr(m []Uint16Option, f func(Uint16Option) BoolOption) []BoolOption {
	acc := make([]BoolOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint16Option: Uint16Option->StringOption */ func MapStringOptionToUint16OptionArr(m []Uint16Option, f func(Uint16Option) StringOption) []StringOption {
	acc := make([]StringOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint16Option: Uint16Option->IntOption */ func MapIntOptionToUint16OptionArr(m []Uint16Option, f func(Uint16Option) IntOption) []IntOption {
	acc := make([]IntOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint16Option: Uint16Option->Int8Option */ func MapInt8OptionToUint16OptionArr(m []Uint16Option, f func(Uint16Option) Int8Option) []Int8Option {
	acc := make([]Int8Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint16Option: Uint16Option->Int16Option */ func MapInt16OptionToUint16OptionArr(m []Uint16Option, f func(Uint16Option) Int16Option) []Int16Option {
	acc := make([]Int16Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint16Option: Uint16Option->Int32Option */ func MapInt32OptionToUint16OptionArr(m []Uint16Option, f func(Uint16Option) Int32Option) []Int32Option {
	acc := make([]Int32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint16Option: Uint16Option->Int64Option */ func MapInt64OptionToUint16OptionArr(m []Uint16Option, f func(Uint16Option) Int64Option) []Int64Option {
	acc := make([]Int64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint16Option: Uint16Option->UintOption */ func MapUintOptionToUint16OptionArr(m []Uint16Option, f func(Uint16Option) UintOption) []UintOption {
	acc := make([]UintOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint16Option: Uint16Option->Uint8Option */ func MapUint8OptionToUint16OptionArr(m []Uint16Option, f func(Uint16Option) Uint8Option) []Uint8Option {
	acc := make([]Uint8Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint16Option: Uint16Option->Uint16Option */ func MapUint16OptionToUint16OptionArr(m []Uint16Option, f func(Uint16Option) Uint16Option) []Uint16Option {
	acc := make([]Uint16Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint16Option: Uint16Option->Uint32Option */ func MapUint32OptionToUint16OptionArr(m []Uint16Option, f func(Uint16Option) Uint32Option) []Uint32Option {
	acc := make([]Uint32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint16Option: Uint16Option->Uint64Option */ func MapUint64OptionToUint16OptionArr(m []Uint16Option, f func(Uint16Option) Uint64Option) []Uint64Option {
	acc := make([]Uint64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint16Option: Uint16Option->UintptrOption */ func MapUintptrOptionToUint16OptionArr(m []Uint16Option, f func(Uint16Option) UintptrOption) []UintptrOption {
	acc := make([]UintptrOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint16Option: Uint16Option->ByteOption */ func MapByteOptionToUint16OptionArr(m []Uint16Option, f func(Uint16Option) ByteOption) []ByteOption {
	acc := make([]ByteOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint16Option: Uint16Option->RuneOption */ func MapRuneOptionToUint16OptionArr(m []Uint16Option, f func(Uint16Option) RuneOption) []RuneOption {
	acc := make([]RuneOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint16Option: Uint16Option->Float32Option */ func MapFloat32OptionToUint16OptionArr(m []Uint16Option, f func(Uint16Option) Float32Option) []Float32Option {
	acc := make([]Float32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint16Option: Uint16Option->Float64Option */ func MapFloat64OptionToUint16OptionArr(m []Uint16Option, f func(Uint16Option) Float64Option) []Float64Option {
	acc := make([]Float64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint16Option: Uint16Option->Complex64Option */ func MapComplex64OptionToUint16OptionArr(m []Uint16Option, f func(Uint16Option) Complex64Option) []Complex64Option {
	acc := make([]Complex64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint16Option: Uint16Option->Complex128Option */ func MapComplex128OptionToUint16OptionArr(m []Uint16Option, f func(Uint16Option) Complex128Option) []Complex128Option {
	acc := make([]Complex128Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint16Option: Uint16Option->AnyOption */ func MapAnyOptionToUint16OptionArr(m []Uint16Option, f func(Uint16Option) AnyOption) []AnyOption {
	acc := make([]AnyOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint16Option: Uint16Option->[]bool */ func MapBoolArrToUint16OptionArr(m []Uint16Option, f func(Uint16Option) []bool) [][]bool {
	acc := make([][]bool, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint16Option: Uint16Option->[]string */ func MapStringArrToUint16OptionArr(m []Uint16Option, f func(Uint16Option) []string) [][]string {
	acc := make([][]string, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint16Option: Uint16Option->[]int */ func MapIntArrToUint16OptionArr(m []Uint16Option, f func(Uint16Option) []int) [][]int {
	acc := make([][]int, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint16Option: Uint16Option->[]int8 */ func MapInt8ArrToUint16OptionArr(m []Uint16Option, f func(Uint16Option) []int8) [][]int8 {
	acc := make([][]int8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint16Option: Uint16Option->[]int16 */ func MapInt16ArrToUint16OptionArr(m []Uint16Option, f func(Uint16Option) []int16) [][]int16 {
	acc := make([][]int16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint16Option: Uint16Option->[]int32 */ func MapInt32ArrToUint16OptionArr(m []Uint16Option, f func(Uint16Option) []int32) [][]int32 {
	acc := make([][]int32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint16Option: Uint16Option->[]int64 */ func MapInt64ArrToUint16OptionArr(m []Uint16Option, f func(Uint16Option) []int64) [][]int64 {
	acc := make([][]int64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint16Option: Uint16Option->[]uint */ func MapUintArrToUint16OptionArr(m []Uint16Option, f func(Uint16Option) []uint) [][]uint {
	acc := make([][]uint, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint16Option: Uint16Option->[]uint8 */ func MapUint8ArrToUint16OptionArr(m []Uint16Option, f func(Uint16Option) []uint8) [][]uint8 {
	acc := make([][]uint8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint16Option: Uint16Option->[]uint16 */ func MapUint16ArrToUint16OptionArr(m []Uint16Option, f func(Uint16Option) []uint16) [][]uint16 {
	acc := make([][]uint16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint16Option: Uint16Option->[]uint32 */ func MapUint32ArrToUint16OptionArr(m []Uint16Option, f func(Uint16Option) []uint32) [][]uint32 {
	acc := make([][]uint32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint16Option: Uint16Option->[]uint64 */ func MapUint64ArrToUint16OptionArr(m []Uint16Option, f func(Uint16Option) []uint64) [][]uint64 {
	acc := make([][]uint64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint16Option: Uint16Option->[]uintptr */ func MapUintptrArrToUint16OptionArr(m []Uint16Option, f func(Uint16Option) []uintptr) [][]uintptr {
	acc := make([][]uintptr, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint16Option: Uint16Option->[]byte */ func MapByteArrToUint16OptionArr(m []Uint16Option, f func(Uint16Option) []byte) [][]byte {
	acc := make([][]byte, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint16Option: Uint16Option->[]rune */ func MapRuneArrToUint16OptionArr(m []Uint16Option, f func(Uint16Option) []rune) [][]rune {
	acc := make([][]rune, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint16Option: Uint16Option->[]float32 */ func MapFloat32ArrToUint16OptionArr(m []Uint16Option, f func(Uint16Option) []float32) [][]float32 {
	acc := make([][]float32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint16Option: Uint16Option->[]float64 */ func MapFloat64ArrToUint16OptionArr(m []Uint16Option, f func(Uint16Option) []float64) [][]float64 {
	acc := make([][]float64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint16Option: Uint16Option->[]complex64 */ func MapComplex64ArrToUint16OptionArr(m []Uint16Option, f func(Uint16Option) []complex64) [][]complex64 {
	acc := make([][]complex64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint16Option: Uint16Option->[]complex128 */ func MapComplex128ArrToUint16OptionArr(m []Uint16Option, f func(Uint16Option) []complex128) [][]complex128 {
	acc := make([][]complex128, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint16Option: Uint16Option->[]Any */ func MapAnyArrToUint16OptionArr(m []Uint16Option, f func(Uint16Option) []Any) [][]Any {
	acc := make([][]Any, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint16Option: Uint16Option->BoolList */ func MapBoolListToUint16OptionArr(m []Uint16Option, f func(Uint16Option) BoolList) []BoolList {
	acc := make([]BoolList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint16Option: Uint16Option->StringList */ func MapStringListToUint16OptionArr(m []Uint16Option, f func(Uint16Option) StringList) []StringList {
	acc := make([]StringList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint16Option: Uint16Option->IntList */ func MapIntListToUint16OptionArr(m []Uint16Option, f func(Uint16Option) IntList) []IntList {
	acc := make([]IntList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint16Option: Uint16Option->Int8List */ func MapInt8ListToUint16OptionArr(m []Uint16Option, f func(Uint16Option) Int8List) []Int8List {
	acc := make([]Int8List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint16Option: Uint16Option->Int16List */ func MapInt16ListToUint16OptionArr(m []Uint16Option, f func(Uint16Option) Int16List) []Int16List {
	acc := make([]Int16List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint16Option: Uint16Option->Int32List */ func MapInt32ListToUint16OptionArr(m []Uint16Option, f func(Uint16Option) Int32List) []Int32List {
	acc := make([]Int32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint16Option: Uint16Option->Int64List */ func MapInt64ListToUint16OptionArr(m []Uint16Option, f func(Uint16Option) Int64List) []Int64List {
	acc := make([]Int64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint16Option: Uint16Option->UintList */ func MapUintListToUint16OptionArr(m []Uint16Option, f func(Uint16Option) UintList) []UintList {
	acc := make([]UintList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint16Option: Uint16Option->Uint8List */ func MapUint8ListToUint16OptionArr(m []Uint16Option, f func(Uint16Option) Uint8List) []Uint8List {
	acc := make([]Uint8List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint16Option: Uint16Option->Uint16List */ func MapUint16ListToUint16OptionArr(m []Uint16Option, f func(Uint16Option) Uint16List) []Uint16List {
	acc := make([]Uint16List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint16Option: Uint16Option->Uint32List */ func MapUint32ListToUint16OptionArr(m []Uint16Option, f func(Uint16Option) Uint32List) []Uint32List {
	acc := make([]Uint32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint16Option: Uint16Option->Uint64List */ func MapUint64ListToUint16OptionArr(m []Uint16Option, f func(Uint16Option) Uint64List) []Uint64List {
	acc := make([]Uint64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint16Option: Uint16Option->UintptrList */ func MapUintptrListToUint16OptionArr(m []Uint16Option, f func(Uint16Option) UintptrList) []UintptrList {
	acc := make([]UintptrList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint16Option: Uint16Option->ByteList */ func MapByteListToUint16OptionArr(m []Uint16Option, f func(Uint16Option) ByteList) []ByteList {
	acc := make([]ByteList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint16Option: Uint16Option->RuneList */ func MapRuneListToUint16OptionArr(m []Uint16Option, f func(Uint16Option) RuneList) []RuneList {
	acc := make([]RuneList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint16Option: Uint16Option->Float32List */ func MapFloat32ListToUint16OptionArr(m []Uint16Option, f func(Uint16Option) Float32List) []Float32List {
	acc := make([]Float32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint16Option: Uint16Option->Float64List */ func MapFloat64ListToUint16OptionArr(m []Uint16Option, f func(Uint16Option) Float64List) []Float64List {
	acc := make([]Float64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint16Option: Uint16Option->Complex64List */ func MapComplex64ListToUint16OptionArr(m []Uint16Option, f func(Uint16Option) Complex64List) []Complex64List {
	acc := make([]Complex64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint16Option: Uint16Option->Complex128List */ func MapComplex128ListToUint16OptionArr(m []Uint16Option, f func(Uint16Option) Complex128List) []Complex128List {
	acc := make([]Complex128List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint16Option: Uint16Option->AnyList */ func MapAnyListToUint16OptionArr(m []Uint16Option, f func(Uint16Option) AnyList) []AnyList {
	acc := make([]AnyList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint32Option: Uint32Option->bool */ func MapBoolToUint32OptionArr(m []Uint32Option, f func(Uint32Option) bool) []bool {
	acc := make([]bool, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint32Option: Uint32Option->string */ func MapStringToUint32OptionArr(m []Uint32Option, f func(Uint32Option) string) []string {
	acc := make([]string, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint32Option: Uint32Option->int */ func MapIntToUint32OptionArr(m []Uint32Option, f func(Uint32Option) int) []int {
	acc := make([]int, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint32Option: Uint32Option->int8 */ func MapInt8ToUint32OptionArr(m []Uint32Option, f func(Uint32Option) int8) []int8 {
	acc := make([]int8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint32Option: Uint32Option->int16 */ func MapInt16ToUint32OptionArr(m []Uint32Option, f func(Uint32Option) int16) []int16 {
	acc := make([]int16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint32Option: Uint32Option->int32 */ func MapInt32ToUint32OptionArr(m []Uint32Option, f func(Uint32Option) int32) []int32 {
	acc := make([]int32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint32Option: Uint32Option->int64 */ func MapInt64ToUint32OptionArr(m []Uint32Option, f func(Uint32Option) int64) []int64 {
	acc := make([]int64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint32Option: Uint32Option->uint */ func MapUintToUint32OptionArr(m []Uint32Option, f func(Uint32Option) uint) []uint {
	acc := make([]uint, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint32Option: Uint32Option->uint8 */ func MapUint8ToUint32OptionArr(m []Uint32Option, f func(Uint32Option) uint8) []uint8 {
	acc := make([]uint8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint32Option: Uint32Option->uint16 */ func MapUint16ToUint32OptionArr(m []Uint32Option, f func(Uint32Option) uint16) []uint16 {
	acc := make([]uint16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint32Option: Uint32Option->uint32 */ func MapUint32ToUint32OptionArr(m []Uint32Option, f func(Uint32Option) uint32) []uint32 {
	acc := make([]uint32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint32Option: Uint32Option->uint64 */ func MapUint64ToUint32OptionArr(m []Uint32Option, f func(Uint32Option) uint64) []uint64 {
	acc := make([]uint64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint32Option: Uint32Option->uintptr */ func MapUintptrToUint32OptionArr(m []Uint32Option, f func(Uint32Option) uintptr) []uintptr {
	acc := make([]uintptr, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint32Option: Uint32Option->byte */ func MapByteToUint32OptionArr(m []Uint32Option, f func(Uint32Option) byte) []byte {
	acc := make([]byte, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint32Option: Uint32Option->rune */ func MapRuneToUint32OptionArr(m []Uint32Option, f func(Uint32Option) rune) []rune {
	acc := make([]rune, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint32Option: Uint32Option->float32 */ func MapFloat32ToUint32OptionArr(m []Uint32Option, f func(Uint32Option) float32) []float32 {
	acc := make([]float32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint32Option: Uint32Option->float64 */ func MapFloat64ToUint32OptionArr(m []Uint32Option, f func(Uint32Option) float64) []float64 {
	acc := make([]float64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint32Option: Uint32Option->complex64 */ func MapComplex64ToUint32OptionArr(m []Uint32Option, f func(Uint32Option) complex64) []complex64 {
	acc := make([]complex64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint32Option: Uint32Option->complex128 */ func MapComplex128ToUint32OptionArr(m []Uint32Option, f func(Uint32Option) complex128) []complex128 {
	acc := make([]complex128, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint32Option: Uint32Option->Any */ func MapAnyToUint32OptionArr(m []Uint32Option, f func(Uint32Option) Any) []Any {
	acc := make([]Any, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint32Option: Uint32Option->BoolOption */ func MapBoolOptionToUint32OptionArr(m []Uint32Option, f func(Uint32Option) BoolOption) []BoolOption {
	acc := make([]BoolOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint32Option: Uint32Option->StringOption */ func MapStringOptionToUint32OptionArr(m []Uint32Option, f func(Uint32Option) StringOption) []StringOption {
	acc := make([]StringOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint32Option: Uint32Option->IntOption */ func MapIntOptionToUint32OptionArr(m []Uint32Option, f func(Uint32Option) IntOption) []IntOption {
	acc := make([]IntOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint32Option: Uint32Option->Int8Option */ func MapInt8OptionToUint32OptionArr(m []Uint32Option, f func(Uint32Option) Int8Option) []Int8Option {
	acc := make([]Int8Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint32Option: Uint32Option->Int16Option */ func MapInt16OptionToUint32OptionArr(m []Uint32Option, f func(Uint32Option) Int16Option) []Int16Option {
	acc := make([]Int16Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint32Option: Uint32Option->Int32Option */ func MapInt32OptionToUint32OptionArr(m []Uint32Option, f func(Uint32Option) Int32Option) []Int32Option {
	acc := make([]Int32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint32Option: Uint32Option->Int64Option */ func MapInt64OptionToUint32OptionArr(m []Uint32Option, f func(Uint32Option) Int64Option) []Int64Option {
	acc := make([]Int64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint32Option: Uint32Option->UintOption */ func MapUintOptionToUint32OptionArr(m []Uint32Option, f func(Uint32Option) UintOption) []UintOption {
	acc := make([]UintOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint32Option: Uint32Option->Uint8Option */ func MapUint8OptionToUint32OptionArr(m []Uint32Option, f func(Uint32Option) Uint8Option) []Uint8Option {
	acc := make([]Uint8Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint32Option: Uint32Option->Uint16Option */ func MapUint16OptionToUint32OptionArr(m []Uint32Option, f func(Uint32Option) Uint16Option) []Uint16Option {
	acc := make([]Uint16Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint32Option: Uint32Option->Uint32Option */ func MapUint32OptionToUint32OptionArr(m []Uint32Option, f func(Uint32Option) Uint32Option) []Uint32Option {
	acc := make([]Uint32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint32Option: Uint32Option->Uint64Option */ func MapUint64OptionToUint32OptionArr(m []Uint32Option, f func(Uint32Option) Uint64Option) []Uint64Option {
	acc := make([]Uint64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint32Option: Uint32Option->UintptrOption */ func MapUintptrOptionToUint32OptionArr(m []Uint32Option, f func(Uint32Option) UintptrOption) []UintptrOption {
	acc := make([]UintptrOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint32Option: Uint32Option->ByteOption */ func MapByteOptionToUint32OptionArr(m []Uint32Option, f func(Uint32Option) ByteOption) []ByteOption {
	acc := make([]ByteOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint32Option: Uint32Option->RuneOption */ func MapRuneOptionToUint32OptionArr(m []Uint32Option, f func(Uint32Option) RuneOption) []RuneOption {
	acc := make([]RuneOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint32Option: Uint32Option->Float32Option */ func MapFloat32OptionToUint32OptionArr(m []Uint32Option, f func(Uint32Option) Float32Option) []Float32Option {
	acc := make([]Float32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint32Option: Uint32Option->Float64Option */ func MapFloat64OptionToUint32OptionArr(m []Uint32Option, f func(Uint32Option) Float64Option) []Float64Option {
	acc := make([]Float64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint32Option: Uint32Option->Complex64Option */ func MapComplex64OptionToUint32OptionArr(m []Uint32Option, f func(Uint32Option) Complex64Option) []Complex64Option {
	acc := make([]Complex64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint32Option: Uint32Option->Complex128Option */ func MapComplex128OptionToUint32OptionArr(m []Uint32Option, f func(Uint32Option) Complex128Option) []Complex128Option {
	acc := make([]Complex128Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint32Option: Uint32Option->AnyOption */ func MapAnyOptionToUint32OptionArr(m []Uint32Option, f func(Uint32Option) AnyOption) []AnyOption {
	acc := make([]AnyOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint32Option: Uint32Option->[]bool */ func MapBoolArrToUint32OptionArr(m []Uint32Option, f func(Uint32Option) []bool) [][]bool {
	acc := make([][]bool, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint32Option: Uint32Option->[]string */ func MapStringArrToUint32OptionArr(m []Uint32Option, f func(Uint32Option) []string) [][]string {
	acc := make([][]string, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint32Option: Uint32Option->[]int */ func MapIntArrToUint32OptionArr(m []Uint32Option, f func(Uint32Option) []int) [][]int {
	acc := make([][]int, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint32Option: Uint32Option->[]int8 */ func MapInt8ArrToUint32OptionArr(m []Uint32Option, f func(Uint32Option) []int8) [][]int8 {
	acc := make([][]int8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint32Option: Uint32Option->[]int16 */ func MapInt16ArrToUint32OptionArr(m []Uint32Option, f func(Uint32Option) []int16) [][]int16 {
	acc := make([][]int16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint32Option: Uint32Option->[]int32 */ func MapInt32ArrToUint32OptionArr(m []Uint32Option, f func(Uint32Option) []int32) [][]int32 {
	acc := make([][]int32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint32Option: Uint32Option->[]int64 */ func MapInt64ArrToUint32OptionArr(m []Uint32Option, f func(Uint32Option) []int64) [][]int64 {
	acc := make([][]int64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint32Option: Uint32Option->[]uint */ func MapUintArrToUint32OptionArr(m []Uint32Option, f func(Uint32Option) []uint) [][]uint {
	acc := make([][]uint, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint32Option: Uint32Option->[]uint8 */ func MapUint8ArrToUint32OptionArr(m []Uint32Option, f func(Uint32Option) []uint8) [][]uint8 {
	acc := make([][]uint8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint32Option: Uint32Option->[]uint16 */ func MapUint16ArrToUint32OptionArr(m []Uint32Option, f func(Uint32Option) []uint16) [][]uint16 {
	acc := make([][]uint16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint32Option: Uint32Option->[]uint32 */ func MapUint32ArrToUint32OptionArr(m []Uint32Option, f func(Uint32Option) []uint32) [][]uint32 {
	acc := make([][]uint32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint32Option: Uint32Option->[]uint64 */ func MapUint64ArrToUint32OptionArr(m []Uint32Option, f func(Uint32Option) []uint64) [][]uint64 {
	acc := make([][]uint64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint32Option: Uint32Option->[]uintptr */ func MapUintptrArrToUint32OptionArr(m []Uint32Option, f func(Uint32Option) []uintptr) [][]uintptr {
	acc := make([][]uintptr, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint32Option: Uint32Option->[]byte */ func MapByteArrToUint32OptionArr(m []Uint32Option, f func(Uint32Option) []byte) [][]byte {
	acc := make([][]byte, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint32Option: Uint32Option->[]rune */ func MapRuneArrToUint32OptionArr(m []Uint32Option, f func(Uint32Option) []rune) [][]rune {
	acc := make([][]rune, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint32Option: Uint32Option->[]float32 */ func MapFloat32ArrToUint32OptionArr(m []Uint32Option, f func(Uint32Option) []float32) [][]float32 {
	acc := make([][]float32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint32Option: Uint32Option->[]float64 */ func MapFloat64ArrToUint32OptionArr(m []Uint32Option, f func(Uint32Option) []float64) [][]float64 {
	acc := make([][]float64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint32Option: Uint32Option->[]complex64 */ func MapComplex64ArrToUint32OptionArr(m []Uint32Option, f func(Uint32Option) []complex64) [][]complex64 {
	acc := make([][]complex64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint32Option: Uint32Option->[]complex128 */ func MapComplex128ArrToUint32OptionArr(m []Uint32Option, f func(Uint32Option) []complex128) [][]complex128 {
	acc := make([][]complex128, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint32Option: Uint32Option->[]Any */ func MapAnyArrToUint32OptionArr(m []Uint32Option, f func(Uint32Option) []Any) [][]Any {
	acc := make([][]Any, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint32Option: Uint32Option->BoolList */ func MapBoolListToUint32OptionArr(m []Uint32Option, f func(Uint32Option) BoolList) []BoolList {
	acc := make([]BoolList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint32Option: Uint32Option->StringList */ func MapStringListToUint32OptionArr(m []Uint32Option, f func(Uint32Option) StringList) []StringList {
	acc := make([]StringList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint32Option: Uint32Option->IntList */ func MapIntListToUint32OptionArr(m []Uint32Option, f func(Uint32Option) IntList) []IntList {
	acc := make([]IntList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint32Option: Uint32Option->Int8List */ func MapInt8ListToUint32OptionArr(m []Uint32Option, f func(Uint32Option) Int8List) []Int8List {
	acc := make([]Int8List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint32Option: Uint32Option->Int16List */ func MapInt16ListToUint32OptionArr(m []Uint32Option, f func(Uint32Option) Int16List) []Int16List {
	acc := make([]Int16List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint32Option: Uint32Option->Int32List */ func MapInt32ListToUint32OptionArr(m []Uint32Option, f func(Uint32Option) Int32List) []Int32List {
	acc := make([]Int32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint32Option: Uint32Option->Int64List */ func MapInt64ListToUint32OptionArr(m []Uint32Option, f func(Uint32Option) Int64List) []Int64List {
	acc := make([]Int64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint32Option: Uint32Option->UintList */ func MapUintListToUint32OptionArr(m []Uint32Option, f func(Uint32Option) UintList) []UintList {
	acc := make([]UintList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint32Option: Uint32Option->Uint8List */ func MapUint8ListToUint32OptionArr(m []Uint32Option, f func(Uint32Option) Uint8List) []Uint8List {
	acc := make([]Uint8List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint32Option: Uint32Option->Uint16List */ func MapUint16ListToUint32OptionArr(m []Uint32Option, f func(Uint32Option) Uint16List) []Uint16List {
	acc := make([]Uint16List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint32Option: Uint32Option->Uint32List */ func MapUint32ListToUint32OptionArr(m []Uint32Option, f func(Uint32Option) Uint32List) []Uint32List {
	acc := make([]Uint32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint32Option: Uint32Option->Uint64List */ func MapUint64ListToUint32OptionArr(m []Uint32Option, f func(Uint32Option) Uint64List) []Uint64List {
	acc := make([]Uint64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint32Option: Uint32Option->UintptrList */ func MapUintptrListToUint32OptionArr(m []Uint32Option, f func(Uint32Option) UintptrList) []UintptrList {
	acc := make([]UintptrList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint32Option: Uint32Option->ByteList */ func MapByteListToUint32OptionArr(m []Uint32Option, f func(Uint32Option) ByteList) []ByteList {
	acc := make([]ByteList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint32Option: Uint32Option->RuneList */ func MapRuneListToUint32OptionArr(m []Uint32Option, f func(Uint32Option) RuneList) []RuneList {
	acc := make([]RuneList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint32Option: Uint32Option->Float32List */ func MapFloat32ListToUint32OptionArr(m []Uint32Option, f func(Uint32Option) Float32List) []Float32List {
	acc := make([]Float32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint32Option: Uint32Option->Float64List */ func MapFloat64ListToUint32OptionArr(m []Uint32Option, f func(Uint32Option) Float64List) []Float64List {
	acc := make([]Float64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint32Option: Uint32Option->Complex64List */ func MapComplex64ListToUint32OptionArr(m []Uint32Option, f func(Uint32Option) Complex64List) []Complex64List {
	acc := make([]Complex64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint32Option: Uint32Option->Complex128List */ func MapComplex128ListToUint32OptionArr(m []Uint32Option, f func(Uint32Option) Complex128List) []Complex128List {
	acc := make([]Complex128List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint32Option: Uint32Option->AnyList */ func MapAnyListToUint32OptionArr(m []Uint32Option, f func(Uint32Option) AnyList) []AnyList {
	acc := make([]AnyList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint64Option: Uint64Option->bool */ func MapBoolToUint64OptionArr(m []Uint64Option, f func(Uint64Option) bool) []bool {
	acc := make([]bool, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint64Option: Uint64Option->string */ func MapStringToUint64OptionArr(m []Uint64Option, f func(Uint64Option) string) []string {
	acc := make([]string, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint64Option: Uint64Option->int */ func MapIntToUint64OptionArr(m []Uint64Option, f func(Uint64Option) int) []int {
	acc := make([]int, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint64Option: Uint64Option->int8 */ func MapInt8ToUint64OptionArr(m []Uint64Option, f func(Uint64Option) int8) []int8 {
	acc := make([]int8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint64Option: Uint64Option->int16 */ func MapInt16ToUint64OptionArr(m []Uint64Option, f func(Uint64Option) int16) []int16 {
	acc := make([]int16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint64Option: Uint64Option->int32 */ func MapInt32ToUint64OptionArr(m []Uint64Option, f func(Uint64Option) int32) []int32 {
	acc := make([]int32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint64Option: Uint64Option->int64 */ func MapInt64ToUint64OptionArr(m []Uint64Option, f func(Uint64Option) int64) []int64 {
	acc := make([]int64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint64Option: Uint64Option->uint */ func MapUintToUint64OptionArr(m []Uint64Option, f func(Uint64Option) uint) []uint {
	acc := make([]uint, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint64Option: Uint64Option->uint8 */ func MapUint8ToUint64OptionArr(m []Uint64Option, f func(Uint64Option) uint8) []uint8 {
	acc := make([]uint8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint64Option: Uint64Option->uint16 */ func MapUint16ToUint64OptionArr(m []Uint64Option, f func(Uint64Option) uint16) []uint16 {
	acc := make([]uint16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint64Option: Uint64Option->uint32 */ func MapUint32ToUint64OptionArr(m []Uint64Option, f func(Uint64Option) uint32) []uint32 {
	acc := make([]uint32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint64Option: Uint64Option->uint64 */ func MapUint64ToUint64OptionArr(m []Uint64Option, f func(Uint64Option) uint64) []uint64 {
	acc := make([]uint64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint64Option: Uint64Option->uintptr */ func MapUintptrToUint64OptionArr(m []Uint64Option, f func(Uint64Option) uintptr) []uintptr {
	acc := make([]uintptr, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint64Option: Uint64Option->byte */ func MapByteToUint64OptionArr(m []Uint64Option, f func(Uint64Option) byte) []byte {
	acc := make([]byte, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint64Option: Uint64Option->rune */ func MapRuneToUint64OptionArr(m []Uint64Option, f func(Uint64Option) rune) []rune {
	acc := make([]rune, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint64Option: Uint64Option->float32 */ func MapFloat32ToUint64OptionArr(m []Uint64Option, f func(Uint64Option) float32) []float32 {
	acc := make([]float32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint64Option: Uint64Option->float64 */ func MapFloat64ToUint64OptionArr(m []Uint64Option, f func(Uint64Option) float64) []float64 {
	acc := make([]float64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint64Option: Uint64Option->complex64 */ func MapComplex64ToUint64OptionArr(m []Uint64Option, f func(Uint64Option) complex64) []complex64 {
	acc := make([]complex64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint64Option: Uint64Option->complex128 */ func MapComplex128ToUint64OptionArr(m []Uint64Option, f func(Uint64Option) complex128) []complex128 {
	acc := make([]complex128, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint64Option: Uint64Option->Any */ func MapAnyToUint64OptionArr(m []Uint64Option, f func(Uint64Option) Any) []Any {
	acc := make([]Any, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint64Option: Uint64Option->BoolOption */ func MapBoolOptionToUint64OptionArr(m []Uint64Option, f func(Uint64Option) BoolOption) []BoolOption {
	acc := make([]BoolOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint64Option: Uint64Option->StringOption */ func MapStringOptionToUint64OptionArr(m []Uint64Option, f func(Uint64Option) StringOption) []StringOption {
	acc := make([]StringOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint64Option: Uint64Option->IntOption */ func MapIntOptionToUint64OptionArr(m []Uint64Option, f func(Uint64Option) IntOption) []IntOption {
	acc := make([]IntOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint64Option: Uint64Option->Int8Option */ func MapInt8OptionToUint64OptionArr(m []Uint64Option, f func(Uint64Option) Int8Option) []Int8Option {
	acc := make([]Int8Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint64Option: Uint64Option->Int16Option */ func MapInt16OptionToUint64OptionArr(m []Uint64Option, f func(Uint64Option) Int16Option) []Int16Option {
	acc := make([]Int16Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint64Option: Uint64Option->Int32Option */ func MapInt32OptionToUint64OptionArr(m []Uint64Option, f func(Uint64Option) Int32Option) []Int32Option {
	acc := make([]Int32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint64Option: Uint64Option->Int64Option */ func MapInt64OptionToUint64OptionArr(m []Uint64Option, f func(Uint64Option) Int64Option) []Int64Option {
	acc := make([]Int64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint64Option: Uint64Option->UintOption */ func MapUintOptionToUint64OptionArr(m []Uint64Option, f func(Uint64Option) UintOption) []UintOption {
	acc := make([]UintOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint64Option: Uint64Option->Uint8Option */ func MapUint8OptionToUint64OptionArr(m []Uint64Option, f func(Uint64Option) Uint8Option) []Uint8Option {
	acc := make([]Uint8Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint64Option: Uint64Option->Uint16Option */ func MapUint16OptionToUint64OptionArr(m []Uint64Option, f func(Uint64Option) Uint16Option) []Uint16Option {
	acc := make([]Uint16Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint64Option: Uint64Option->Uint32Option */ func MapUint32OptionToUint64OptionArr(m []Uint64Option, f func(Uint64Option) Uint32Option) []Uint32Option {
	acc := make([]Uint32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint64Option: Uint64Option->Uint64Option */ func MapUint64OptionToUint64OptionArr(m []Uint64Option, f func(Uint64Option) Uint64Option) []Uint64Option {
	acc := make([]Uint64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint64Option: Uint64Option->UintptrOption */ func MapUintptrOptionToUint64OptionArr(m []Uint64Option, f func(Uint64Option) UintptrOption) []UintptrOption {
	acc := make([]UintptrOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint64Option: Uint64Option->ByteOption */ func MapByteOptionToUint64OptionArr(m []Uint64Option, f func(Uint64Option) ByteOption) []ByteOption {
	acc := make([]ByteOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint64Option: Uint64Option->RuneOption */ func MapRuneOptionToUint64OptionArr(m []Uint64Option, f func(Uint64Option) RuneOption) []RuneOption {
	acc := make([]RuneOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint64Option: Uint64Option->Float32Option */ func MapFloat32OptionToUint64OptionArr(m []Uint64Option, f func(Uint64Option) Float32Option) []Float32Option {
	acc := make([]Float32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint64Option: Uint64Option->Float64Option */ func MapFloat64OptionToUint64OptionArr(m []Uint64Option, f func(Uint64Option) Float64Option) []Float64Option {
	acc := make([]Float64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint64Option: Uint64Option->Complex64Option */ func MapComplex64OptionToUint64OptionArr(m []Uint64Option, f func(Uint64Option) Complex64Option) []Complex64Option {
	acc := make([]Complex64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint64Option: Uint64Option->Complex128Option */ func MapComplex128OptionToUint64OptionArr(m []Uint64Option, f func(Uint64Option) Complex128Option) []Complex128Option {
	acc := make([]Complex128Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint64Option: Uint64Option->AnyOption */ func MapAnyOptionToUint64OptionArr(m []Uint64Option, f func(Uint64Option) AnyOption) []AnyOption {
	acc := make([]AnyOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint64Option: Uint64Option->[]bool */ func MapBoolArrToUint64OptionArr(m []Uint64Option, f func(Uint64Option) []bool) [][]bool {
	acc := make([][]bool, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint64Option: Uint64Option->[]string */ func MapStringArrToUint64OptionArr(m []Uint64Option, f func(Uint64Option) []string) [][]string {
	acc := make([][]string, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint64Option: Uint64Option->[]int */ func MapIntArrToUint64OptionArr(m []Uint64Option, f func(Uint64Option) []int) [][]int {
	acc := make([][]int, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint64Option: Uint64Option->[]int8 */ func MapInt8ArrToUint64OptionArr(m []Uint64Option, f func(Uint64Option) []int8) [][]int8 {
	acc := make([][]int8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint64Option: Uint64Option->[]int16 */ func MapInt16ArrToUint64OptionArr(m []Uint64Option, f func(Uint64Option) []int16) [][]int16 {
	acc := make([][]int16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint64Option: Uint64Option->[]int32 */ func MapInt32ArrToUint64OptionArr(m []Uint64Option, f func(Uint64Option) []int32) [][]int32 {
	acc := make([][]int32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint64Option: Uint64Option->[]int64 */ func MapInt64ArrToUint64OptionArr(m []Uint64Option, f func(Uint64Option) []int64) [][]int64 {
	acc := make([][]int64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint64Option: Uint64Option->[]uint */ func MapUintArrToUint64OptionArr(m []Uint64Option, f func(Uint64Option) []uint) [][]uint {
	acc := make([][]uint, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint64Option: Uint64Option->[]uint8 */ func MapUint8ArrToUint64OptionArr(m []Uint64Option, f func(Uint64Option) []uint8) [][]uint8 {
	acc := make([][]uint8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint64Option: Uint64Option->[]uint16 */ func MapUint16ArrToUint64OptionArr(m []Uint64Option, f func(Uint64Option) []uint16) [][]uint16 {
	acc := make([][]uint16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint64Option: Uint64Option->[]uint32 */ func MapUint32ArrToUint64OptionArr(m []Uint64Option, f func(Uint64Option) []uint32) [][]uint32 {
	acc := make([][]uint32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint64Option: Uint64Option->[]uint64 */ func MapUint64ArrToUint64OptionArr(m []Uint64Option, f func(Uint64Option) []uint64) [][]uint64 {
	acc := make([][]uint64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint64Option: Uint64Option->[]uintptr */ func MapUintptrArrToUint64OptionArr(m []Uint64Option, f func(Uint64Option) []uintptr) [][]uintptr {
	acc := make([][]uintptr, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint64Option: Uint64Option->[]byte */ func MapByteArrToUint64OptionArr(m []Uint64Option, f func(Uint64Option) []byte) [][]byte {
	acc := make([][]byte, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint64Option: Uint64Option->[]rune */ func MapRuneArrToUint64OptionArr(m []Uint64Option, f func(Uint64Option) []rune) [][]rune {
	acc := make([][]rune, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint64Option: Uint64Option->[]float32 */ func MapFloat32ArrToUint64OptionArr(m []Uint64Option, f func(Uint64Option) []float32) [][]float32 {
	acc := make([][]float32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint64Option: Uint64Option->[]float64 */ func MapFloat64ArrToUint64OptionArr(m []Uint64Option, f func(Uint64Option) []float64) [][]float64 {
	acc := make([][]float64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint64Option: Uint64Option->[]complex64 */ func MapComplex64ArrToUint64OptionArr(m []Uint64Option, f func(Uint64Option) []complex64) [][]complex64 {
	acc := make([][]complex64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint64Option: Uint64Option->[]complex128 */ func MapComplex128ArrToUint64OptionArr(m []Uint64Option, f func(Uint64Option) []complex128) [][]complex128 {
	acc := make([][]complex128, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint64Option: Uint64Option->[]Any */ func MapAnyArrToUint64OptionArr(m []Uint64Option, f func(Uint64Option) []Any) [][]Any {
	acc := make([][]Any, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint64Option: Uint64Option->BoolList */ func MapBoolListToUint64OptionArr(m []Uint64Option, f func(Uint64Option) BoolList) []BoolList {
	acc := make([]BoolList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint64Option: Uint64Option->StringList */ func MapStringListToUint64OptionArr(m []Uint64Option, f func(Uint64Option) StringList) []StringList {
	acc := make([]StringList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint64Option: Uint64Option->IntList */ func MapIntListToUint64OptionArr(m []Uint64Option, f func(Uint64Option) IntList) []IntList {
	acc := make([]IntList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint64Option: Uint64Option->Int8List */ func MapInt8ListToUint64OptionArr(m []Uint64Option, f func(Uint64Option) Int8List) []Int8List {
	acc := make([]Int8List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint64Option: Uint64Option->Int16List */ func MapInt16ListToUint64OptionArr(m []Uint64Option, f func(Uint64Option) Int16List) []Int16List {
	acc := make([]Int16List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint64Option: Uint64Option->Int32List */ func MapInt32ListToUint64OptionArr(m []Uint64Option, f func(Uint64Option) Int32List) []Int32List {
	acc := make([]Int32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint64Option: Uint64Option->Int64List */ func MapInt64ListToUint64OptionArr(m []Uint64Option, f func(Uint64Option) Int64List) []Int64List {
	acc := make([]Int64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint64Option: Uint64Option->UintList */ func MapUintListToUint64OptionArr(m []Uint64Option, f func(Uint64Option) UintList) []UintList {
	acc := make([]UintList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint64Option: Uint64Option->Uint8List */ func MapUint8ListToUint64OptionArr(m []Uint64Option, f func(Uint64Option) Uint8List) []Uint8List {
	acc := make([]Uint8List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint64Option: Uint64Option->Uint16List */ func MapUint16ListToUint64OptionArr(m []Uint64Option, f func(Uint64Option) Uint16List) []Uint16List {
	acc := make([]Uint16List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint64Option: Uint64Option->Uint32List */ func MapUint32ListToUint64OptionArr(m []Uint64Option, f func(Uint64Option) Uint32List) []Uint32List {
	acc := make([]Uint32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint64Option: Uint64Option->Uint64List */ func MapUint64ListToUint64OptionArr(m []Uint64Option, f func(Uint64Option) Uint64List) []Uint64List {
	acc := make([]Uint64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint64Option: Uint64Option->UintptrList */ func MapUintptrListToUint64OptionArr(m []Uint64Option, f func(Uint64Option) UintptrList) []UintptrList {
	acc := make([]UintptrList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint64Option: Uint64Option->ByteList */ func MapByteListToUint64OptionArr(m []Uint64Option, f func(Uint64Option) ByteList) []ByteList {
	acc := make([]ByteList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint64Option: Uint64Option->RuneList */ func MapRuneListToUint64OptionArr(m []Uint64Option, f func(Uint64Option) RuneList) []RuneList {
	acc := make([]RuneList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint64Option: Uint64Option->Float32List */ func MapFloat32ListToUint64OptionArr(m []Uint64Option, f func(Uint64Option) Float32List) []Float32List {
	acc := make([]Float32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint64Option: Uint64Option->Float64List */ func MapFloat64ListToUint64OptionArr(m []Uint64Option, f func(Uint64Option) Float64List) []Float64List {
	acc := make([]Float64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint64Option: Uint64Option->Complex64List */ func MapComplex64ListToUint64OptionArr(m []Uint64Option, f func(Uint64Option) Complex64List) []Complex64List {
	acc := make([]Complex64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint64Option: Uint64Option->Complex128List */ func MapComplex128ListToUint64OptionArr(m []Uint64Option, f func(Uint64Option) Complex128List) []Complex128List {
	acc := make([]Complex128List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Uint64Option: Uint64Option->AnyList */ func MapAnyListToUint64OptionArr(m []Uint64Option, f func(Uint64Option) AnyList) []AnyList {
	acc := make([]AnyList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintptrOption: UintptrOption->bool */ func MapBoolToUintptrOptionArr(m []UintptrOption, f func(UintptrOption) bool) []bool {
	acc := make([]bool, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintptrOption: UintptrOption->string */ func MapStringToUintptrOptionArr(m []UintptrOption, f func(UintptrOption) string) []string {
	acc := make([]string, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintptrOption: UintptrOption->int */ func MapIntToUintptrOptionArr(m []UintptrOption, f func(UintptrOption) int) []int {
	acc := make([]int, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintptrOption: UintptrOption->int8 */ func MapInt8ToUintptrOptionArr(m []UintptrOption, f func(UintptrOption) int8) []int8 {
	acc := make([]int8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintptrOption: UintptrOption->int16 */ func MapInt16ToUintptrOptionArr(m []UintptrOption, f func(UintptrOption) int16) []int16 {
	acc := make([]int16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintptrOption: UintptrOption->int32 */ func MapInt32ToUintptrOptionArr(m []UintptrOption, f func(UintptrOption) int32) []int32 {
	acc := make([]int32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintptrOption: UintptrOption->int64 */ func MapInt64ToUintptrOptionArr(m []UintptrOption, f func(UintptrOption) int64) []int64 {
	acc := make([]int64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintptrOption: UintptrOption->uint */ func MapUintToUintptrOptionArr(m []UintptrOption, f func(UintptrOption) uint) []uint {
	acc := make([]uint, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintptrOption: UintptrOption->uint8 */ func MapUint8ToUintptrOptionArr(m []UintptrOption, f func(UintptrOption) uint8) []uint8 {
	acc := make([]uint8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintptrOption: UintptrOption->uint16 */ func MapUint16ToUintptrOptionArr(m []UintptrOption, f func(UintptrOption) uint16) []uint16 {
	acc := make([]uint16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintptrOption: UintptrOption->uint32 */ func MapUint32ToUintptrOptionArr(m []UintptrOption, f func(UintptrOption) uint32) []uint32 {
	acc := make([]uint32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintptrOption: UintptrOption->uint64 */ func MapUint64ToUintptrOptionArr(m []UintptrOption, f func(UintptrOption) uint64) []uint64 {
	acc := make([]uint64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintptrOption: UintptrOption->uintptr */ func MapUintptrToUintptrOptionArr(m []UintptrOption, f func(UintptrOption) uintptr) []uintptr {
	acc := make([]uintptr, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintptrOption: UintptrOption->byte */ func MapByteToUintptrOptionArr(m []UintptrOption, f func(UintptrOption) byte) []byte {
	acc := make([]byte, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintptrOption: UintptrOption->rune */ func MapRuneToUintptrOptionArr(m []UintptrOption, f func(UintptrOption) rune) []rune {
	acc := make([]rune, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintptrOption: UintptrOption->float32 */ func MapFloat32ToUintptrOptionArr(m []UintptrOption, f func(UintptrOption) float32) []float32 {
	acc := make([]float32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintptrOption: UintptrOption->float64 */ func MapFloat64ToUintptrOptionArr(m []UintptrOption, f func(UintptrOption) float64) []float64 {
	acc := make([]float64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintptrOption: UintptrOption->complex64 */ func MapComplex64ToUintptrOptionArr(m []UintptrOption, f func(UintptrOption) complex64) []complex64 {
	acc := make([]complex64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintptrOption: UintptrOption->complex128 */ func MapComplex128ToUintptrOptionArr(m []UintptrOption, f func(UintptrOption) complex128) []complex128 {
	acc := make([]complex128, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintptrOption: UintptrOption->Any */ func MapAnyToUintptrOptionArr(m []UintptrOption, f func(UintptrOption) Any) []Any {
	acc := make([]Any, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintptrOption: UintptrOption->BoolOption */ func MapBoolOptionToUintptrOptionArr(m []UintptrOption, f func(UintptrOption) BoolOption) []BoolOption {
	acc := make([]BoolOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintptrOption: UintptrOption->StringOption */ func MapStringOptionToUintptrOptionArr(m []UintptrOption, f func(UintptrOption) StringOption) []StringOption {
	acc := make([]StringOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintptrOption: UintptrOption->IntOption */ func MapIntOptionToUintptrOptionArr(m []UintptrOption, f func(UintptrOption) IntOption) []IntOption {
	acc := make([]IntOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintptrOption: UintptrOption->Int8Option */ func MapInt8OptionToUintptrOptionArr(m []UintptrOption, f func(UintptrOption) Int8Option) []Int8Option {
	acc := make([]Int8Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintptrOption: UintptrOption->Int16Option */ func MapInt16OptionToUintptrOptionArr(m []UintptrOption, f func(UintptrOption) Int16Option) []Int16Option {
	acc := make([]Int16Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintptrOption: UintptrOption->Int32Option */ func MapInt32OptionToUintptrOptionArr(m []UintptrOption, f func(UintptrOption) Int32Option) []Int32Option {
	acc := make([]Int32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintptrOption: UintptrOption->Int64Option */ func MapInt64OptionToUintptrOptionArr(m []UintptrOption, f func(UintptrOption) Int64Option) []Int64Option {
	acc := make([]Int64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintptrOption: UintptrOption->UintOption */ func MapUintOptionToUintptrOptionArr(m []UintptrOption, f func(UintptrOption) UintOption) []UintOption {
	acc := make([]UintOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintptrOption: UintptrOption->Uint8Option */ func MapUint8OptionToUintptrOptionArr(m []UintptrOption, f func(UintptrOption) Uint8Option) []Uint8Option {
	acc := make([]Uint8Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintptrOption: UintptrOption->Uint16Option */ func MapUint16OptionToUintptrOptionArr(m []UintptrOption, f func(UintptrOption) Uint16Option) []Uint16Option {
	acc := make([]Uint16Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintptrOption: UintptrOption->Uint32Option */ func MapUint32OptionToUintptrOptionArr(m []UintptrOption, f func(UintptrOption) Uint32Option) []Uint32Option {
	acc := make([]Uint32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintptrOption: UintptrOption->Uint64Option */ func MapUint64OptionToUintptrOptionArr(m []UintptrOption, f func(UintptrOption) Uint64Option) []Uint64Option {
	acc := make([]Uint64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintptrOption: UintptrOption->UintptrOption */ func MapUintptrOptionToUintptrOptionArr(m []UintptrOption, f func(UintptrOption) UintptrOption) []UintptrOption {
	acc := make([]UintptrOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintptrOption: UintptrOption->ByteOption */ func MapByteOptionToUintptrOptionArr(m []UintptrOption, f func(UintptrOption) ByteOption) []ByteOption {
	acc := make([]ByteOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintptrOption: UintptrOption->RuneOption */ func MapRuneOptionToUintptrOptionArr(m []UintptrOption, f func(UintptrOption) RuneOption) []RuneOption {
	acc := make([]RuneOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintptrOption: UintptrOption->Float32Option */ func MapFloat32OptionToUintptrOptionArr(m []UintptrOption, f func(UintptrOption) Float32Option) []Float32Option {
	acc := make([]Float32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintptrOption: UintptrOption->Float64Option */ func MapFloat64OptionToUintptrOptionArr(m []UintptrOption, f func(UintptrOption) Float64Option) []Float64Option {
	acc := make([]Float64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintptrOption: UintptrOption->Complex64Option */ func MapComplex64OptionToUintptrOptionArr(m []UintptrOption, f func(UintptrOption) Complex64Option) []Complex64Option {
	acc := make([]Complex64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintptrOption: UintptrOption->Complex128Option */ func MapComplex128OptionToUintptrOptionArr(m []UintptrOption, f func(UintptrOption) Complex128Option) []Complex128Option {
	acc := make([]Complex128Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintptrOption: UintptrOption->AnyOption */ func MapAnyOptionToUintptrOptionArr(m []UintptrOption, f func(UintptrOption) AnyOption) []AnyOption {
	acc := make([]AnyOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintptrOption: UintptrOption->[]bool */ func MapBoolArrToUintptrOptionArr(m []UintptrOption, f func(UintptrOption) []bool) [][]bool {
	acc := make([][]bool, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintptrOption: UintptrOption->[]string */ func MapStringArrToUintptrOptionArr(m []UintptrOption, f func(UintptrOption) []string) [][]string {
	acc := make([][]string, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintptrOption: UintptrOption->[]int */ func MapIntArrToUintptrOptionArr(m []UintptrOption, f func(UintptrOption) []int) [][]int {
	acc := make([][]int, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintptrOption: UintptrOption->[]int8 */ func MapInt8ArrToUintptrOptionArr(m []UintptrOption, f func(UintptrOption) []int8) [][]int8 {
	acc := make([][]int8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintptrOption: UintptrOption->[]int16 */ func MapInt16ArrToUintptrOptionArr(m []UintptrOption, f func(UintptrOption) []int16) [][]int16 {
	acc := make([][]int16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintptrOption: UintptrOption->[]int32 */ func MapInt32ArrToUintptrOptionArr(m []UintptrOption, f func(UintptrOption) []int32) [][]int32 {
	acc := make([][]int32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintptrOption: UintptrOption->[]int64 */ func MapInt64ArrToUintptrOptionArr(m []UintptrOption, f func(UintptrOption) []int64) [][]int64 {
	acc := make([][]int64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintptrOption: UintptrOption->[]uint */ func MapUintArrToUintptrOptionArr(m []UintptrOption, f func(UintptrOption) []uint) [][]uint {
	acc := make([][]uint, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintptrOption: UintptrOption->[]uint8 */ func MapUint8ArrToUintptrOptionArr(m []UintptrOption, f func(UintptrOption) []uint8) [][]uint8 {
	acc := make([][]uint8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintptrOption: UintptrOption->[]uint16 */ func MapUint16ArrToUintptrOptionArr(m []UintptrOption, f func(UintptrOption) []uint16) [][]uint16 {
	acc := make([][]uint16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintptrOption: UintptrOption->[]uint32 */ func MapUint32ArrToUintptrOptionArr(m []UintptrOption, f func(UintptrOption) []uint32) [][]uint32 {
	acc := make([][]uint32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintptrOption: UintptrOption->[]uint64 */ func MapUint64ArrToUintptrOptionArr(m []UintptrOption, f func(UintptrOption) []uint64) [][]uint64 {
	acc := make([][]uint64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintptrOption: UintptrOption->[]uintptr */ func MapUintptrArrToUintptrOptionArr(m []UintptrOption, f func(UintptrOption) []uintptr) [][]uintptr {
	acc := make([][]uintptr, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintptrOption: UintptrOption->[]byte */ func MapByteArrToUintptrOptionArr(m []UintptrOption, f func(UintptrOption) []byte) [][]byte {
	acc := make([][]byte, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintptrOption: UintptrOption->[]rune */ func MapRuneArrToUintptrOptionArr(m []UintptrOption, f func(UintptrOption) []rune) [][]rune {
	acc := make([][]rune, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintptrOption: UintptrOption->[]float32 */ func MapFloat32ArrToUintptrOptionArr(m []UintptrOption, f func(UintptrOption) []float32) [][]float32 {
	acc := make([][]float32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintptrOption: UintptrOption->[]float64 */ func MapFloat64ArrToUintptrOptionArr(m []UintptrOption, f func(UintptrOption) []float64) [][]float64 {
	acc := make([][]float64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintptrOption: UintptrOption->[]complex64 */ func MapComplex64ArrToUintptrOptionArr(m []UintptrOption, f func(UintptrOption) []complex64) [][]complex64 {
	acc := make([][]complex64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintptrOption: UintptrOption->[]complex128 */ func MapComplex128ArrToUintptrOptionArr(m []UintptrOption, f func(UintptrOption) []complex128) [][]complex128 {
	acc := make([][]complex128, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintptrOption: UintptrOption->[]Any */ func MapAnyArrToUintptrOptionArr(m []UintptrOption, f func(UintptrOption) []Any) [][]Any {
	acc := make([][]Any, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintptrOption: UintptrOption->BoolList */ func MapBoolListToUintptrOptionArr(m []UintptrOption, f func(UintptrOption) BoolList) []BoolList {
	acc := make([]BoolList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintptrOption: UintptrOption->StringList */ func MapStringListToUintptrOptionArr(m []UintptrOption, f func(UintptrOption) StringList) []StringList {
	acc := make([]StringList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintptrOption: UintptrOption->IntList */ func MapIntListToUintptrOptionArr(m []UintptrOption, f func(UintptrOption) IntList) []IntList {
	acc := make([]IntList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintptrOption: UintptrOption->Int8List */ func MapInt8ListToUintptrOptionArr(m []UintptrOption, f func(UintptrOption) Int8List) []Int8List {
	acc := make([]Int8List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintptrOption: UintptrOption->Int16List */ func MapInt16ListToUintptrOptionArr(m []UintptrOption, f func(UintptrOption) Int16List) []Int16List {
	acc := make([]Int16List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintptrOption: UintptrOption->Int32List */ func MapInt32ListToUintptrOptionArr(m []UintptrOption, f func(UintptrOption) Int32List) []Int32List {
	acc := make([]Int32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintptrOption: UintptrOption->Int64List */ func MapInt64ListToUintptrOptionArr(m []UintptrOption, f func(UintptrOption) Int64List) []Int64List {
	acc := make([]Int64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintptrOption: UintptrOption->UintList */ func MapUintListToUintptrOptionArr(m []UintptrOption, f func(UintptrOption) UintList) []UintList {
	acc := make([]UintList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintptrOption: UintptrOption->Uint8List */ func MapUint8ListToUintptrOptionArr(m []UintptrOption, f func(UintptrOption) Uint8List) []Uint8List {
	acc := make([]Uint8List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintptrOption: UintptrOption->Uint16List */ func MapUint16ListToUintptrOptionArr(m []UintptrOption, f func(UintptrOption) Uint16List) []Uint16List {
	acc := make([]Uint16List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintptrOption: UintptrOption->Uint32List */ func MapUint32ListToUintptrOptionArr(m []UintptrOption, f func(UintptrOption) Uint32List) []Uint32List {
	acc := make([]Uint32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintptrOption: UintptrOption->Uint64List */ func MapUint64ListToUintptrOptionArr(m []UintptrOption, f func(UintptrOption) Uint64List) []Uint64List {
	acc := make([]Uint64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintptrOption: UintptrOption->UintptrList */ func MapUintptrListToUintptrOptionArr(m []UintptrOption, f func(UintptrOption) UintptrList) []UintptrList {
	acc := make([]UintptrList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintptrOption: UintptrOption->ByteList */ func MapByteListToUintptrOptionArr(m []UintptrOption, f func(UintptrOption) ByteList) []ByteList {
	acc := make([]ByteList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintptrOption: UintptrOption->RuneList */ func MapRuneListToUintptrOptionArr(m []UintptrOption, f func(UintptrOption) RuneList) []RuneList {
	acc := make([]RuneList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintptrOption: UintptrOption->Float32List */ func MapFloat32ListToUintptrOptionArr(m []UintptrOption, f func(UintptrOption) Float32List) []Float32List {
	acc := make([]Float32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintptrOption: UintptrOption->Float64List */ func MapFloat64ListToUintptrOptionArr(m []UintptrOption, f func(UintptrOption) Float64List) []Float64List {
	acc := make([]Float64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintptrOption: UintptrOption->Complex64List */ func MapComplex64ListToUintptrOptionArr(m []UintptrOption, f func(UintptrOption) Complex64List) []Complex64List {
	acc := make([]Complex64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintptrOption: UintptrOption->Complex128List */ func MapComplex128ListToUintptrOptionArr(m []UintptrOption, f func(UintptrOption) Complex128List) []Complex128List {
	acc := make([]Complex128List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []UintptrOption: UintptrOption->AnyList */ func MapAnyListToUintptrOptionArr(m []UintptrOption, f func(UintptrOption) AnyList) []AnyList {
	acc := make([]AnyList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []ByteOption: ByteOption->bool */ func MapBoolToByteOptionArr(m []ByteOption, f func(ByteOption) bool) []bool {
	acc := make([]bool, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []ByteOption: ByteOption->string */ func MapStringToByteOptionArr(m []ByteOption, f func(ByteOption) string) []string {
	acc := make([]string, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []ByteOption: ByteOption->int */ func MapIntToByteOptionArr(m []ByteOption, f func(ByteOption) int) []int {
	acc := make([]int, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []ByteOption: ByteOption->int8 */ func MapInt8ToByteOptionArr(m []ByteOption, f func(ByteOption) int8) []int8 {
	acc := make([]int8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []ByteOption: ByteOption->int16 */ func MapInt16ToByteOptionArr(m []ByteOption, f func(ByteOption) int16) []int16 {
	acc := make([]int16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []ByteOption: ByteOption->int32 */ func MapInt32ToByteOptionArr(m []ByteOption, f func(ByteOption) int32) []int32 {
	acc := make([]int32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []ByteOption: ByteOption->int64 */ func MapInt64ToByteOptionArr(m []ByteOption, f func(ByteOption) int64) []int64 {
	acc := make([]int64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []ByteOption: ByteOption->uint */ func MapUintToByteOptionArr(m []ByteOption, f func(ByteOption) uint) []uint {
	acc := make([]uint, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []ByteOption: ByteOption->uint8 */ func MapUint8ToByteOptionArr(m []ByteOption, f func(ByteOption) uint8) []uint8 {
	acc := make([]uint8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []ByteOption: ByteOption->uint16 */ func MapUint16ToByteOptionArr(m []ByteOption, f func(ByteOption) uint16) []uint16 {
	acc := make([]uint16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []ByteOption: ByteOption->uint32 */ func MapUint32ToByteOptionArr(m []ByteOption, f func(ByteOption) uint32) []uint32 {
	acc := make([]uint32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []ByteOption: ByteOption->uint64 */ func MapUint64ToByteOptionArr(m []ByteOption, f func(ByteOption) uint64) []uint64 {
	acc := make([]uint64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []ByteOption: ByteOption->uintptr */ func MapUintptrToByteOptionArr(m []ByteOption, f func(ByteOption) uintptr) []uintptr {
	acc := make([]uintptr, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []ByteOption: ByteOption->byte */ func MapByteToByteOptionArr(m []ByteOption, f func(ByteOption) byte) []byte {
	acc := make([]byte, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []ByteOption: ByteOption->rune */ func MapRuneToByteOptionArr(m []ByteOption, f func(ByteOption) rune) []rune {
	acc := make([]rune, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []ByteOption: ByteOption->float32 */ func MapFloat32ToByteOptionArr(m []ByteOption, f func(ByteOption) float32) []float32 {
	acc := make([]float32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []ByteOption: ByteOption->float64 */ func MapFloat64ToByteOptionArr(m []ByteOption, f func(ByteOption) float64) []float64 {
	acc := make([]float64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []ByteOption: ByteOption->complex64 */ func MapComplex64ToByteOptionArr(m []ByteOption, f func(ByteOption) complex64) []complex64 {
	acc := make([]complex64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []ByteOption: ByteOption->complex128 */ func MapComplex128ToByteOptionArr(m []ByteOption, f func(ByteOption) complex128) []complex128 {
	acc := make([]complex128, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []ByteOption: ByteOption->Any */ func MapAnyToByteOptionArr(m []ByteOption, f func(ByteOption) Any) []Any {
	acc := make([]Any, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []ByteOption: ByteOption->BoolOption */ func MapBoolOptionToByteOptionArr(m []ByteOption, f func(ByteOption) BoolOption) []BoolOption {
	acc := make([]BoolOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []ByteOption: ByteOption->StringOption */ func MapStringOptionToByteOptionArr(m []ByteOption, f func(ByteOption) StringOption) []StringOption {
	acc := make([]StringOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []ByteOption: ByteOption->IntOption */ func MapIntOptionToByteOptionArr(m []ByteOption, f func(ByteOption) IntOption) []IntOption {
	acc := make([]IntOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []ByteOption: ByteOption->Int8Option */ func MapInt8OptionToByteOptionArr(m []ByteOption, f func(ByteOption) Int8Option) []Int8Option {
	acc := make([]Int8Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []ByteOption: ByteOption->Int16Option */ func MapInt16OptionToByteOptionArr(m []ByteOption, f func(ByteOption) Int16Option) []Int16Option {
	acc := make([]Int16Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []ByteOption: ByteOption->Int32Option */ func MapInt32OptionToByteOptionArr(m []ByteOption, f func(ByteOption) Int32Option) []Int32Option {
	acc := make([]Int32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []ByteOption: ByteOption->Int64Option */ func MapInt64OptionToByteOptionArr(m []ByteOption, f func(ByteOption) Int64Option) []Int64Option {
	acc := make([]Int64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []ByteOption: ByteOption->UintOption */ func MapUintOptionToByteOptionArr(m []ByteOption, f func(ByteOption) UintOption) []UintOption {
	acc := make([]UintOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []ByteOption: ByteOption->Uint8Option */ func MapUint8OptionToByteOptionArr(m []ByteOption, f func(ByteOption) Uint8Option) []Uint8Option {
	acc := make([]Uint8Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []ByteOption: ByteOption->Uint16Option */ func MapUint16OptionToByteOptionArr(m []ByteOption, f func(ByteOption) Uint16Option) []Uint16Option {
	acc := make([]Uint16Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []ByteOption: ByteOption->Uint32Option */ func MapUint32OptionToByteOptionArr(m []ByteOption, f func(ByteOption) Uint32Option) []Uint32Option {
	acc := make([]Uint32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []ByteOption: ByteOption->Uint64Option */ func MapUint64OptionToByteOptionArr(m []ByteOption, f func(ByteOption) Uint64Option) []Uint64Option {
	acc := make([]Uint64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []ByteOption: ByteOption->UintptrOption */ func MapUintptrOptionToByteOptionArr(m []ByteOption, f func(ByteOption) UintptrOption) []UintptrOption {
	acc := make([]UintptrOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []ByteOption: ByteOption->ByteOption */ func MapByteOptionToByteOptionArr(m []ByteOption, f func(ByteOption) ByteOption) []ByteOption {
	acc := make([]ByteOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []ByteOption: ByteOption->RuneOption */ func MapRuneOptionToByteOptionArr(m []ByteOption, f func(ByteOption) RuneOption) []RuneOption {
	acc := make([]RuneOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []ByteOption: ByteOption->Float32Option */ func MapFloat32OptionToByteOptionArr(m []ByteOption, f func(ByteOption) Float32Option) []Float32Option {
	acc := make([]Float32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []ByteOption: ByteOption->Float64Option */ func MapFloat64OptionToByteOptionArr(m []ByteOption, f func(ByteOption) Float64Option) []Float64Option {
	acc := make([]Float64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []ByteOption: ByteOption->Complex64Option */ func MapComplex64OptionToByteOptionArr(m []ByteOption, f func(ByteOption) Complex64Option) []Complex64Option {
	acc := make([]Complex64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []ByteOption: ByteOption->Complex128Option */ func MapComplex128OptionToByteOptionArr(m []ByteOption, f func(ByteOption) Complex128Option) []Complex128Option {
	acc := make([]Complex128Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []ByteOption: ByteOption->AnyOption */ func MapAnyOptionToByteOptionArr(m []ByteOption, f func(ByteOption) AnyOption) []AnyOption {
	acc := make([]AnyOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []ByteOption: ByteOption->[]bool */ func MapBoolArrToByteOptionArr(m []ByteOption, f func(ByteOption) []bool) [][]bool {
	acc := make([][]bool, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []ByteOption: ByteOption->[]string */ func MapStringArrToByteOptionArr(m []ByteOption, f func(ByteOption) []string) [][]string {
	acc := make([][]string, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []ByteOption: ByteOption->[]int */ func MapIntArrToByteOptionArr(m []ByteOption, f func(ByteOption) []int) [][]int {
	acc := make([][]int, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []ByteOption: ByteOption->[]int8 */ func MapInt8ArrToByteOptionArr(m []ByteOption, f func(ByteOption) []int8) [][]int8 {
	acc := make([][]int8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []ByteOption: ByteOption->[]int16 */ func MapInt16ArrToByteOptionArr(m []ByteOption, f func(ByteOption) []int16) [][]int16 {
	acc := make([][]int16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []ByteOption: ByteOption->[]int32 */ func MapInt32ArrToByteOptionArr(m []ByteOption, f func(ByteOption) []int32) [][]int32 {
	acc := make([][]int32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []ByteOption: ByteOption->[]int64 */ func MapInt64ArrToByteOptionArr(m []ByteOption, f func(ByteOption) []int64) [][]int64 {
	acc := make([][]int64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []ByteOption: ByteOption->[]uint */ func MapUintArrToByteOptionArr(m []ByteOption, f func(ByteOption) []uint) [][]uint {
	acc := make([][]uint, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []ByteOption: ByteOption->[]uint8 */ func MapUint8ArrToByteOptionArr(m []ByteOption, f func(ByteOption) []uint8) [][]uint8 {
	acc := make([][]uint8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []ByteOption: ByteOption->[]uint16 */ func MapUint16ArrToByteOptionArr(m []ByteOption, f func(ByteOption) []uint16) [][]uint16 {
	acc := make([][]uint16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []ByteOption: ByteOption->[]uint32 */ func MapUint32ArrToByteOptionArr(m []ByteOption, f func(ByteOption) []uint32) [][]uint32 {
	acc := make([][]uint32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []ByteOption: ByteOption->[]uint64 */ func MapUint64ArrToByteOptionArr(m []ByteOption, f func(ByteOption) []uint64) [][]uint64 {
	acc := make([][]uint64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []ByteOption: ByteOption->[]uintptr */ func MapUintptrArrToByteOptionArr(m []ByteOption, f func(ByteOption) []uintptr) [][]uintptr {
	acc := make([][]uintptr, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []ByteOption: ByteOption->[]byte */ func MapByteArrToByteOptionArr(m []ByteOption, f func(ByteOption) []byte) [][]byte {
	acc := make([][]byte, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []ByteOption: ByteOption->[]rune */ func MapRuneArrToByteOptionArr(m []ByteOption, f func(ByteOption) []rune) [][]rune {
	acc := make([][]rune, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []ByteOption: ByteOption->[]float32 */ func MapFloat32ArrToByteOptionArr(m []ByteOption, f func(ByteOption) []float32) [][]float32 {
	acc := make([][]float32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []ByteOption: ByteOption->[]float64 */ func MapFloat64ArrToByteOptionArr(m []ByteOption, f func(ByteOption) []float64) [][]float64 {
	acc := make([][]float64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []ByteOption: ByteOption->[]complex64 */ func MapComplex64ArrToByteOptionArr(m []ByteOption, f func(ByteOption) []complex64) [][]complex64 {
	acc := make([][]complex64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []ByteOption: ByteOption->[]complex128 */ func MapComplex128ArrToByteOptionArr(m []ByteOption, f func(ByteOption) []complex128) [][]complex128 {
	acc := make([][]complex128, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []ByteOption: ByteOption->[]Any */ func MapAnyArrToByteOptionArr(m []ByteOption, f func(ByteOption) []Any) [][]Any {
	acc := make([][]Any, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []ByteOption: ByteOption->BoolList */ func MapBoolListToByteOptionArr(m []ByteOption, f func(ByteOption) BoolList) []BoolList {
	acc := make([]BoolList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []ByteOption: ByteOption->StringList */ func MapStringListToByteOptionArr(m []ByteOption, f func(ByteOption) StringList) []StringList {
	acc := make([]StringList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []ByteOption: ByteOption->IntList */ func MapIntListToByteOptionArr(m []ByteOption, f func(ByteOption) IntList) []IntList {
	acc := make([]IntList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []ByteOption: ByteOption->Int8List */ func MapInt8ListToByteOptionArr(m []ByteOption, f func(ByteOption) Int8List) []Int8List {
	acc := make([]Int8List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []ByteOption: ByteOption->Int16List */ func MapInt16ListToByteOptionArr(m []ByteOption, f func(ByteOption) Int16List) []Int16List {
	acc := make([]Int16List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []ByteOption: ByteOption->Int32List */ func MapInt32ListToByteOptionArr(m []ByteOption, f func(ByteOption) Int32List) []Int32List {
	acc := make([]Int32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []ByteOption: ByteOption->Int64List */ func MapInt64ListToByteOptionArr(m []ByteOption, f func(ByteOption) Int64List) []Int64List {
	acc := make([]Int64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []ByteOption: ByteOption->UintList */ func MapUintListToByteOptionArr(m []ByteOption, f func(ByteOption) UintList) []UintList {
	acc := make([]UintList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []ByteOption: ByteOption->Uint8List */ func MapUint8ListToByteOptionArr(m []ByteOption, f func(ByteOption) Uint8List) []Uint8List {
	acc := make([]Uint8List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []ByteOption: ByteOption->Uint16List */ func MapUint16ListToByteOptionArr(m []ByteOption, f func(ByteOption) Uint16List) []Uint16List {
	acc := make([]Uint16List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []ByteOption: ByteOption->Uint32List */ func MapUint32ListToByteOptionArr(m []ByteOption, f func(ByteOption) Uint32List) []Uint32List {
	acc := make([]Uint32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []ByteOption: ByteOption->Uint64List */ func MapUint64ListToByteOptionArr(m []ByteOption, f func(ByteOption) Uint64List) []Uint64List {
	acc := make([]Uint64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []ByteOption: ByteOption->UintptrList */ func MapUintptrListToByteOptionArr(m []ByteOption, f func(ByteOption) UintptrList) []UintptrList {
	acc := make([]UintptrList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []ByteOption: ByteOption->ByteList */ func MapByteListToByteOptionArr(m []ByteOption, f func(ByteOption) ByteList) []ByteList {
	acc := make([]ByteList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []ByteOption: ByteOption->RuneList */ func MapRuneListToByteOptionArr(m []ByteOption, f func(ByteOption) RuneList) []RuneList {
	acc := make([]RuneList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []ByteOption: ByteOption->Float32List */ func MapFloat32ListToByteOptionArr(m []ByteOption, f func(ByteOption) Float32List) []Float32List {
	acc := make([]Float32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []ByteOption: ByteOption->Float64List */ func MapFloat64ListToByteOptionArr(m []ByteOption, f func(ByteOption) Float64List) []Float64List {
	acc := make([]Float64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []ByteOption: ByteOption->Complex64List */ func MapComplex64ListToByteOptionArr(m []ByteOption, f func(ByteOption) Complex64List) []Complex64List {
	acc := make([]Complex64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []ByteOption: ByteOption->Complex128List */ func MapComplex128ListToByteOptionArr(m []ByteOption, f func(ByteOption) Complex128List) []Complex128List {
	acc := make([]Complex128List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []ByteOption: ByteOption->AnyList */ func MapAnyListToByteOptionArr(m []ByteOption, f func(ByteOption) AnyList) []AnyList {
	acc := make([]AnyList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []RuneOption: RuneOption->bool */ func MapBoolToRuneOptionArr(m []RuneOption, f func(RuneOption) bool) []bool {
	acc := make([]bool, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []RuneOption: RuneOption->string */ func MapStringToRuneOptionArr(m []RuneOption, f func(RuneOption) string) []string {
	acc := make([]string, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []RuneOption: RuneOption->int */ func MapIntToRuneOptionArr(m []RuneOption, f func(RuneOption) int) []int {
	acc := make([]int, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []RuneOption: RuneOption->int8 */ func MapInt8ToRuneOptionArr(m []RuneOption, f func(RuneOption) int8) []int8 {
	acc := make([]int8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []RuneOption: RuneOption->int16 */ func MapInt16ToRuneOptionArr(m []RuneOption, f func(RuneOption) int16) []int16 {
	acc := make([]int16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []RuneOption: RuneOption->int32 */ func MapInt32ToRuneOptionArr(m []RuneOption, f func(RuneOption) int32) []int32 {
	acc := make([]int32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []RuneOption: RuneOption->int64 */ func MapInt64ToRuneOptionArr(m []RuneOption, f func(RuneOption) int64) []int64 {
	acc := make([]int64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []RuneOption: RuneOption->uint */ func MapUintToRuneOptionArr(m []RuneOption, f func(RuneOption) uint) []uint {
	acc := make([]uint, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []RuneOption: RuneOption->uint8 */ func MapUint8ToRuneOptionArr(m []RuneOption, f func(RuneOption) uint8) []uint8 {
	acc := make([]uint8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []RuneOption: RuneOption->uint16 */ func MapUint16ToRuneOptionArr(m []RuneOption, f func(RuneOption) uint16) []uint16 {
	acc := make([]uint16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []RuneOption: RuneOption->uint32 */ func MapUint32ToRuneOptionArr(m []RuneOption, f func(RuneOption) uint32) []uint32 {
	acc := make([]uint32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []RuneOption: RuneOption->uint64 */ func MapUint64ToRuneOptionArr(m []RuneOption, f func(RuneOption) uint64) []uint64 {
	acc := make([]uint64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []RuneOption: RuneOption->uintptr */ func MapUintptrToRuneOptionArr(m []RuneOption, f func(RuneOption) uintptr) []uintptr {
	acc := make([]uintptr, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []RuneOption: RuneOption->byte */ func MapByteToRuneOptionArr(m []RuneOption, f func(RuneOption) byte) []byte {
	acc := make([]byte, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []RuneOption: RuneOption->rune */ func MapRuneToRuneOptionArr(m []RuneOption, f func(RuneOption) rune) []rune {
	acc := make([]rune, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []RuneOption: RuneOption->float32 */ func MapFloat32ToRuneOptionArr(m []RuneOption, f func(RuneOption) float32) []float32 {
	acc := make([]float32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []RuneOption: RuneOption->float64 */ func MapFloat64ToRuneOptionArr(m []RuneOption, f func(RuneOption) float64) []float64 {
	acc := make([]float64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []RuneOption: RuneOption->complex64 */ func MapComplex64ToRuneOptionArr(m []RuneOption, f func(RuneOption) complex64) []complex64 {
	acc := make([]complex64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []RuneOption: RuneOption->complex128 */ func MapComplex128ToRuneOptionArr(m []RuneOption, f func(RuneOption) complex128) []complex128 {
	acc := make([]complex128, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []RuneOption: RuneOption->Any */ func MapAnyToRuneOptionArr(m []RuneOption, f func(RuneOption) Any) []Any {
	acc := make([]Any, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []RuneOption: RuneOption->BoolOption */ func MapBoolOptionToRuneOptionArr(m []RuneOption, f func(RuneOption) BoolOption) []BoolOption {
	acc := make([]BoolOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []RuneOption: RuneOption->StringOption */ func MapStringOptionToRuneOptionArr(m []RuneOption, f func(RuneOption) StringOption) []StringOption {
	acc := make([]StringOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []RuneOption: RuneOption->IntOption */ func MapIntOptionToRuneOptionArr(m []RuneOption, f func(RuneOption) IntOption) []IntOption {
	acc := make([]IntOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []RuneOption: RuneOption->Int8Option */ func MapInt8OptionToRuneOptionArr(m []RuneOption, f func(RuneOption) Int8Option) []Int8Option {
	acc := make([]Int8Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []RuneOption: RuneOption->Int16Option */ func MapInt16OptionToRuneOptionArr(m []RuneOption, f func(RuneOption) Int16Option) []Int16Option {
	acc := make([]Int16Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []RuneOption: RuneOption->Int32Option */ func MapInt32OptionToRuneOptionArr(m []RuneOption, f func(RuneOption) Int32Option) []Int32Option {
	acc := make([]Int32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []RuneOption: RuneOption->Int64Option */ func MapInt64OptionToRuneOptionArr(m []RuneOption, f func(RuneOption) Int64Option) []Int64Option {
	acc := make([]Int64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []RuneOption: RuneOption->UintOption */ func MapUintOptionToRuneOptionArr(m []RuneOption, f func(RuneOption) UintOption) []UintOption {
	acc := make([]UintOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []RuneOption: RuneOption->Uint8Option */ func MapUint8OptionToRuneOptionArr(m []RuneOption, f func(RuneOption) Uint8Option) []Uint8Option {
	acc := make([]Uint8Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []RuneOption: RuneOption->Uint16Option */ func MapUint16OptionToRuneOptionArr(m []RuneOption, f func(RuneOption) Uint16Option) []Uint16Option {
	acc := make([]Uint16Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []RuneOption: RuneOption->Uint32Option */ func MapUint32OptionToRuneOptionArr(m []RuneOption, f func(RuneOption) Uint32Option) []Uint32Option {
	acc := make([]Uint32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []RuneOption: RuneOption->Uint64Option */ func MapUint64OptionToRuneOptionArr(m []RuneOption, f func(RuneOption) Uint64Option) []Uint64Option {
	acc := make([]Uint64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []RuneOption: RuneOption->UintptrOption */ func MapUintptrOptionToRuneOptionArr(m []RuneOption, f func(RuneOption) UintptrOption) []UintptrOption {
	acc := make([]UintptrOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []RuneOption: RuneOption->ByteOption */ func MapByteOptionToRuneOptionArr(m []RuneOption, f func(RuneOption) ByteOption) []ByteOption {
	acc := make([]ByteOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []RuneOption: RuneOption->RuneOption */ func MapRuneOptionToRuneOptionArr(m []RuneOption, f func(RuneOption) RuneOption) []RuneOption {
	acc := make([]RuneOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []RuneOption: RuneOption->Float32Option */ func MapFloat32OptionToRuneOptionArr(m []RuneOption, f func(RuneOption) Float32Option) []Float32Option {
	acc := make([]Float32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []RuneOption: RuneOption->Float64Option */ func MapFloat64OptionToRuneOptionArr(m []RuneOption, f func(RuneOption) Float64Option) []Float64Option {
	acc := make([]Float64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []RuneOption: RuneOption->Complex64Option */ func MapComplex64OptionToRuneOptionArr(m []RuneOption, f func(RuneOption) Complex64Option) []Complex64Option {
	acc := make([]Complex64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []RuneOption: RuneOption->Complex128Option */ func MapComplex128OptionToRuneOptionArr(m []RuneOption, f func(RuneOption) Complex128Option) []Complex128Option {
	acc := make([]Complex128Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []RuneOption: RuneOption->AnyOption */ func MapAnyOptionToRuneOptionArr(m []RuneOption, f func(RuneOption) AnyOption) []AnyOption {
	acc := make([]AnyOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []RuneOption: RuneOption->[]bool */ func MapBoolArrToRuneOptionArr(m []RuneOption, f func(RuneOption) []bool) [][]bool {
	acc := make([][]bool, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []RuneOption: RuneOption->[]string */ func MapStringArrToRuneOptionArr(m []RuneOption, f func(RuneOption) []string) [][]string {
	acc := make([][]string, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []RuneOption: RuneOption->[]int */ func MapIntArrToRuneOptionArr(m []RuneOption, f func(RuneOption) []int) [][]int {
	acc := make([][]int, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []RuneOption: RuneOption->[]int8 */ func MapInt8ArrToRuneOptionArr(m []RuneOption, f func(RuneOption) []int8) [][]int8 {
	acc := make([][]int8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []RuneOption: RuneOption->[]int16 */ func MapInt16ArrToRuneOptionArr(m []RuneOption, f func(RuneOption) []int16) [][]int16 {
	acc := make([][]int16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []RuneOption: RuneOption->[]int32 */ func MapInt32ArrToRuneOptionArr(m []RuneOption, f func(RuneOption) []int32) [][]int32 {
	acc := make([][]int32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []RuneOption: RuneOption->[]int64 */ func MapInt64ArrToRuneOptionArr(m []RuneOption, f func(RuneOption) []int64) [][]int64 {
	acc := make([][]int64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []RuneOption: RuneOption->[]uint */ func MapUintArrToRuneOptionArr(m []RuneOption, f func(RuneOption) []uint) [][]uint {
	acc := make([][]uint, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []RuneOption: RuneOption->[]uint8 */ func MapUint8ArrToRuneOptionArr(m []RuneOption, f func(RuneOption) []uint8) [][]uint8 {
	acc := make([][]uint8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []RuneOption: RuneOption->[]uint16 */ func MapUint16ArrToRuneOptionArr(m []RuneOption, f func(RuneOption) []uint16) [][]uint16 {
	acc := make([][]uint16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []RuneOption: RuneOption->[]uint32 */ func MapUint32ArrToRuneOptionArr(m []RuneOption, f func(RuneOption) []uint32) [][]uint32 {
	acc := make([][]uint32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []RuneOption: RuneOption->[]uint64 */ func MapUint64ArrToRuneOptionArr(m []RuneOption, f func(RuneOption) []uint64) [][]uint64 {
	acc := make([][]uint64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []RuneOption: RuneOption->[]uintptr */ func MapUintptrArrToRuneOptionArr(m []RuneOption, f func(RuneOption) []uintptr) [][]uintptr {
	acc := make([][]uintptr, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []RuneOption: RuneOption->[]byte */ func MapByteArrToRuneOptionArr(m []RuneOption, f func(RuneOption) []byte) [][]byte {
	acc := make([][]byte, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []RuneOption: RuneOption->[]rune */ func MapRuneArrToRuneOptionArr(m []RuneOption, f func(RuneOption) []rune) [][]rune {
	acc := make([][]rune, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []RuneOption: RuneOption->[]float32 */ func MapFloat32ArrToRuneOptionArr(m []RuneOption, f func(RuneOption) []float32) [][]float32 {
	acc := make([][]float32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []RuneOption: RuneOption->[]float64 */ func MapFloat64ArrToRuneOptionArr(m []RuneOption, f func(RuneOption) []float64) [][]float64 {
	acc := make([][]float64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []RuneOption: RuneOption->[]complex64 */ func MapComplex64ArrToRuneOptionArr(m []RuneOption, f func(RuneOption) []complex64) [][]complex64 {
	acc := make([][]complex64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []RuneOption: RuneOption->[]complex128 */ func MapComplex128ArrToRuneOptionArr(m []RuneOption, f func(RuneOption) []complex128) [][]complex128 {
	acc := make([][]complex128, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []RuneOption: RuneOption->[]Any */ func MapAnyArrToRuneOptionArr(m []RuneOption, f func(RuneOption) []Any) [][]Any {
	acc := make([][]Any, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []RuneOption: RuneOption->BoolList */ func MapBoolListToRuneOptionArr(m []RuneOption, f func(RuneOption) BoolList) []BoolList {
	acc := make([]BoolList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []RuneOption: RuneOption->StringList */ func MapStringListToRuneOptionArr(m []RuneOption, f func(RuneOption) StringList) []StringList {
	acc := make([]StringList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []RuneOption: RuneOption->IntList */ func MapIntListToRuneOptionArr(m []RuneOption, f func(RuneOption) IntList) []IntList {
	acc := make([]IntList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []RuneOption: RuneOption->Int8List */ func MapInt8ListToRuneOptionArr(m []RuneOption, f func(RuneOption) Int8List) []Int8List {
	acc := make([]Int8List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []RuneOption: RuneOption->Int16List */ func MapInt16ListToRuneOptionArr(m []RuneOption, f func(RuneOption) Int16List) []Int16List {
	acc := make([]Int16List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []RuneOption: RuneOption->Int32List */ func MapInt32ListToRuneOptionArr(m []RuneOption, f func(RuneOption) Int32List) []Int32List {
	acc := make([]Int32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []RuneOption: RuneOption->Int64List */ func MapInt64ListToRuneOptionArr(m []RuneOption, f func(RuneOption) Int64List) []Int64List {
	acc := make([]Int64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []RuneOption: RuneOption->UintList */ func MapUintListToRuneOptionArr(m []RuneOption, f func(RuneOption) UintList) []UintList {
	acc := make([]UintList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []RuneOption: RuneOption->Uint8List */ func MapUint8ListToRuneOptionArr(m []RuneOption, f func(RuneOption) Uint8List) []Uint8List {
	acc := make([]Uint8List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []RuneOption: RuneOption->Uint16List */ func MapUint16ListToRuneOptionArr(m []RuneOption, f func(RuneOption) Uint16List) []Uint16List {
	acc := make([]Uint16List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []RuneOption: RuneOption->Uint32List */ func MapUint32ListToRuneOptionArr(m []RuneOption, f func(RuneOption) Uint32List) []Uint32List {
	acc := make([]Uint32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []RuneOption: RuneOption->Uint64List */ func MapUint64ListToRuneOptionArr(m []RuneOption, f func(RuneOption) Uint64List) []Uint64List {
	acc := make([]Uint64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []RuneOption: RuneOption->UintptrList */ func MapUintptrListToRuneOptionArr(m []RuneOption, f func(RuneOption) UintptrList) []UintptrList {
	acc := make([]UintptrList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []RuneOption: RuneOption->ByteList */ func MapByteListToRuneOptionArr(m []RuneOption, f func(RuneOption) ByteList) []ByteList {
	acc := make([]ByteList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []RuneOption: RuneOption->RuneList */ func MapRuneListToRuneOptionArr(m []RuneOption, f func(RuneOption) RuneList) []RuneList {
	acc := make([]RuneList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []RuneOption: RuneOption->Float32List */ func MapFloat32ListToRuneOptionArr(m []RuneOption, f func(RuneOption) Float32List) []Float32List {
	acc := make([]Float32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []RuneOption: RuneOption->Float64List */ func MapFloat64ListToRuneOptionArr(m []RuneOption, f func(RuneOption) Float64List) []Float64List {
	acc := make([]Float64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []RuneOption: RuneOption->Complex64List */ func MapComplex64ListToRuneOptionArr(m []RuneOption, f func(RuneOption) Complex64List) []Complex64List {
	acc := make([]Complex64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []RuneOption: RuneOption->Complex128List */ func MapComplex128ListToRuneOptionArr(m []RuneOption, f func(RuneOption) Complex128List) []Complex128List {
	acc := make([]Complex128List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []RuneOption: RuneOption->AnyList */ func MapAnyListToRuneOptionArr(m []RuneOption, f func(RuneOption) AnyList) []AnyList {
	acc := make([]AnyList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float32Option: Float32Option->bool */ func MapBoolToFloat32OptionArr(m []Float32Option, f func(Float32Option) bool) []bool {
	acc := make([]bool, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float32Option: Float32Option->string */ func MapStringToFloat32OptionArr(m []Float32Option, f func(Float32Option) string) []string {
	acc := make([]string, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float32Option: Float32Option->int */ func MapIntToFloat32OptionArr(m []Float32Option, f func(Float32Option) int) []int {
	acc := make([]int, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float32Option: Float32Option->int8 */ func MapInt8ToFloat32OptionArr(m []Float32Option, f func(Float32Option) int8) []int8 {
	acc := make([]int8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float32Option: Float32Option->int16 */ func MapInt16ToFloat32OptionArr(m []Float32Option, f func(Float32Option) int16) []int16 {
	acc := make([]int16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float32Option: Float32Option->int32 */ func MapInt32ToFloat32OptionArr(m []Float32Option, f func(Float32Option) int32) []int32 {
	acc := make([]int32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float32Option: Float32Option->int64 */ func MapInt64ToFloat32OptionArr(m []Float32Option, f func(Float32Option) int64) []int64 {
	acc := make([]int64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float32Option: Float32Option->uint */ func MapUintToFloat32OptionArr(m []Float32Option, f func(Float32Option) uint) []uint {
	acc := make([]uint, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float32Option: Float32Option->uint8 */ func MapUint8ToFloat32OptionArr(m []Float32Option, f func(Float32Option) uint8) []uint8 {
	acc := make([]uint8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float32Option: Float32Option->uint16 */ func MapUint16ToFloat32OptionArr(m []Float32Option, f func(Float32Option) uint16) []uint16 {
	acc := make([]uint16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float32Option: Float32Option->uint32 */ func MapUint32ToFloat32OptionArr(m []Float32Option, f func(Float32Option) uint32) []uint32 {
	acc := make([]uint32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float32Option: Float32Option->uint64 */ func MapUint64ToFloat32OptionArr(m []Float32Option, f func(Float32Option) uint64) []uint64 {
	acc := make([]uint64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float32Option: Float32Option->uintptr */ func MapUintptrToFloat32OptionArr(m []Float32Option, f func(Float32Option) uintptr) []uintptr {
	acc := make([]uintptr, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float32Option: Float32Option->byte */ func MapByteToFloat32OptionArr(m []Float32Option, f func(Float32Option) byte) []byte {
	acc := make([]byte, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float32Option: Float32Option->rune */ func MapRuneToFloat32OptionArr(m []Float32Option, f func(Float32Option) rune) []rune {
	acc := make([]rune, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float32Option: Float32Option->float32 */ func MapFloat32ToFloat32OptionArr(m []Float32Option, f func(Float32Option) float32) []float32 {
	acc := make([]float32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float32Option: Float32Option->float64 */ func MapFloat64ToFloat32OptionArr(m []Float32Option, f func(Float32Option) float64) []float64 {
	acc := make([]float64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float32Option: Float32Option->complex64 */ func MapComplex64ToFloat32OptionArr(m []Float32Option, f func(Float32Option) complex64) []complex64 {
	acc := make([]complex64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float32Option: Float32Option->complex128 */ func MapComplex128ToFloat32OptionArr(m []Float32Option, f func(Float32Option) complex128) []complex128 {
	acc := make([]complex128, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float32Option: Float32Option->Any */ func MapAnyToFloat32OptionArr(m []Float32Option, f func(Float32Option) Any) []Any {
	acc := make([]Any, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float32Option: Float32Option->BoolOption */ func MapBoolOptionToFloat32OptionArr(m []Float32Option, f func(Float32Option) BoolOption) []BoolOption {
	acc := make([]BoolOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float32Option: Float32Option->StringOption */ func MapStringOptionToFloat32OptionArr(m []Float32Option, f func(Float32Option) StringOption) []StringOption {
	acc := make([]StringOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float32Option: Float32Option->IntOption */ func MapIntOptionToFloat32OptionArr(m []Float32Option, f func(Float32Option) IntOption) []IntOption {
	acc := make([]IntOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float32Option: Float32Option->Int8Option */ func MapInt8OptionToFloat32OptionArr(m []Float32Option, f func(Float32Option) Int8Option) []Int8Option {
	acc := make([]Int8Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float32Option: Float32Option->Int16Option */ func MapInt16OptionToFloat32OptionArr(m []Float32Option, f func(Float32Option) Int16Option) []Int16Option {
	acc := make([]Int16Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float32Option: Float32Option->Int32Option */ func MapInt32OptionToFloat32OptionArr(m []Float32Option, f func(Float32Option) Int32Option) []Int32Option {
	acc := make([]Int32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float32Option: Float32Option->Int64Option */ func MapInt64OptionToFloat32OptionArr(m []Float32Option, f func(Float32Option) Int64Option) []Int64Option {
	acc := make([]Int64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float32Option: Float32Option->UintOption */ func MapUintOptionToFloat32OptionArr(m []Float32Option, f func(Float32Option) UintOption) []UintOption {
	acc := make([]UintOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float32Option: Float32Option->Uint8Option */ func MapUint8OptionToFloat32OptionArr(m []Float32Option, f func(Float32Option) Uint8Option) []Uint8Option {
	acc := make([]Uint8Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float32Option: Float32Option->Uint16Option */ func MapUint16OptionToFloat32OptionArr(m []Float32Option, f func(Float32Option) Uint16Option) []Uint16Option {
	acc := make([]Uint16Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float32Option: Float32Option->Uint32Option */ func MapUint32OptionToFloat32OptionArr(m []Float32Option, f func(Float32Option) Uint32Option) []Uint32Option {
	acc := make([]Uint32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float32Option: Float32Option->Uint64Option */ func MapUint64OptionToFloat32OptionArr(m []Float32Option, f func(Float32Option) Uint64Option) []Uint64Option {
	acc := make([]Uint64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float32Option: Float32Option->UintptrOption */ func MapUintptrOptionToFloat32OptionArr(m []Float32Option, f func(Float32Option) UintptrOption) []UintptrOption {
	acc := make([]UintptrOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float32Option: Float32Option->ByteOption */ func MapByteOptionToFloat32OptionArr(m []Float32Option, f func(Float32Option) ByteOption) []ByteOption {
	acc := make([]ByteOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float32Option: Float32Option->RuneOption */ func MapRuneOptionToFloat32OptionArr(m []Float32Option, f func(Float32Option) RuneOption) []RuneOption {
	acc := make([]RuneOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float32Option: Float32Option->Float32Option */ func MapFloat32OptionToFloat32OptionArr(m []Float32Option, f func(Float32Option) Float32Option) []Float32Option {
	acc := make([]Float32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float32Option: Float32Option->Float64Option */ func MapFloat64OptionToFloat32OptionArr(m []Float32Option, f func(Float32Option) Float64Option) []Float64Option {
	acc := make([]Float64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float32Option: Float32Option->Complex64Option */ func MapComplex64OptionToFloat32OptionArr(m []Float32Option, f func(Float32Option) Complex64Option) []Complex64Option {
	acc := make([]Complex64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float32Option: Float32Option->Complex128Option */ func MapComplex128OptionToFloat32OptionArr(m []Float32Option, f func(Float32Option) Complex128Option) []Complex128Option {
	acc := make([]Complex128Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float32Option: Float32Option->AnyOption */ func MapAnyOptionToFloat32OptionArr(m []Float32Option, f func(Float32Option) AnyOption) []AnyOption {
	acc := make([]AnyOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float32Option: Float32Option->[]bool */ func MapBoolArrToFloat32OptionArr(m []Float32Option, f func(Float32Option) []bool) [][]bool {
	acc := make([][]bool, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float32Option: Float32Option->[]string */ func MapStringArrToFloat32OptionArr(m []Float32Option, f func(Float32Option) []string) [][]string {
	acc := make([][]string, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float32Option: Float32Option->[]int */ func MapIntArrToFloat32OptionArr(m []Float32Option, f func(Float32Option) []int) [][]int {
	acc := make([][]int, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float32Option: Float32Option->[]int8 */ func MapInt8ArrToFloat32OptionArr(m []Float32Option, f func(Float32Option) []int8) [][]int8 {
	acc := make([][]int8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float32Option: Float32Option->[]int16 */ func MapInt16ArrToFloat32OptionArr(m []Float32Option, f func(Float32Option) []int16) [][]int16 {
	acc := make([][]int16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float32Option: Float32Option->[]int32 */ func MapInt32ArrToFloat32OptionArr(m []Float32Option, f func(Float32Option) []int32) [][]int32 {
	acc := make([][]int32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float32Option: Float32Option->[]int64 */ func MapInt64ArrToFloat32OptionArr(m []Float32Option, f func(Float32Option) []int64) [][]int64 {
	acc := make([][]int64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float32Option: Float32Option->[]uint */ func MapUintArrToFloat32OptionArr(m []Float32Option, f func(Float32Option) []uint) [][]uint {
	acc := make([][]uint, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float32Option: Float32Option->[]uint8 */ func MapUint8ArrToFloat32OptionArr(m []Float32Option, f func(Float32Option) []uint8) [][]uint8 {
	acc := make([][]uint8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float32Option: Float32Option->[]uint16 */ func MapUint16ArrToFloat32OptionArr(m []Float32Option, f func(Float32Option) []uint16) [][]uint16 {
	acc := make([][]uint16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float32Option: Float32Option->[]uint32 */ func MapUint32ArrToFloat32OptionArr(m []Float32Option, f func(Float32Option) []uint32) [][]uint32 {
	acc := make([][]uint32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float32Option: Float32Option->[]uint64 */ func MapUint64ArrToFloat32OptionArr(m []Float32Option, f func(Float32Option) []uint64) [][]uint64 {
	acc := make([][]uint64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float32Option: Float32Option->[]uintptr */ func MapUintptrArrToFloat32OptionArr(m []Float32Option, f func(Float32Option) []uintptr) [][]uintptr {
	acc := make([][]uintptr, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float32Option: Float32Option->[]byte */ func MapByteArrToFloat32OptionArr(m []Float32Option, f func(Float32Option) []byte) [][]byte {
	acc := make([][]byte, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float32Option: Float32Option->[]rune */ func MapRuneArrToFloat32OptionArr(m []Float32Option, f func(Float32Option) []rune) [][]rune {
	acc := make([][]rune, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float32Option: Float32Option->[]float32 */ func MapFloat32ArrToFloat32OptionArr(m []Float32Option, f func(Float32Option) []float32) [][]float32 {
	acc := make([][]float32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float32Option: Float32Option->[]float64 */ func MapFloat64ArrToFloat32OptionArr(m []Float32Option, f func(Float32Option) []float64) [][]float64 {
	acc := make([][]float64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float32Option: Float32Option->[]complex64 */ func MapComplex64ArrToFloat32OptionArr(m []Float32Option, f func(Float32Option) []complex64) [][]complex64 {
	acc := make([][]complex64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float32Option: Float32Option->[]complex128 */ func MapComplex128ArrToFloat32OptionArr(m []Float32Option, f func(Float32Option) []complex128) [][]complex128 {
	acc := make([][]complex128, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float32Option: Float32Option->[]Any */ func MapAnyArrToFloat32OptionArr(m []Float32Option, f func(Float32Option) []Any) [][]Any {
	acc := make([][]Any, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float32Option: Float32Option->BoolList */ func MapBoolListToFloat32OptionArr(m []Float32Option, f func(Float32Option) BoolList) []BoolList {
	acc := make([]BoolList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float32Option: Float32Option->StringList */ func MapStringListToFloat32OptionArr(m []Float32Option, f func(Float32Option) StringList) []StringList {
	acc := make([]StringList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float32Option: Float32Option->IntList */ func MapIntListToFloat32OptionArr(m []Float32Option, f func(Float32Option) IntList) []IntList {
	acc := make([]IntList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float32Option: Float32Option->Int8List */ func MapInt8ListToFloat32OptionArr(m []Float32Option, f func(Float32Option) Int8List) []Int8List {
	acc := make([]Int8List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float32Option: Float32Option->Int16List */ func MapInt16ListToFloat32OptionArr(m []Float32Option, f func(Float32Option) Int16List) []Int16List {
	acc := make([]Int16List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float32Option: Float32Option->Int32List */ func MapInt32ListToFloat32OptionArr(m []Float32Option, f func(Float32Option) Int32List) []Int32List {
	acc := make([]Int32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float32Option: Float32Option->Int64List */ func MapInt64ListToFloat32OptionArr(m []Float32Option, f func(Float32Option) Int64List) []Int64List {
	acc := make([]Int64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float32Option: Float32Option->UintList */ func MapUintListToFloat32OptionArr(m []Float32Option, f func(Float32Option) UintList) []UintList {
	acc := make([]UintList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float32Option: Float32Option->Uint8List */ func MapUint8ListToFloat32OptionArr(m []Float32Option, f func(Float32Option) Uint8List) []Uint8List {
	acc := make([]Uint8List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float32Option: Float32Option->Uint16List */ func MapUint16ListToFloat32OptionArr(m []Float32Option, f func(Float32Option) Uint16List) []Uint16List {
	acc := make([]Uint16List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float32Option: Float32Option->Uint32List */ func MapUint32ListToFloat32OptionArr(m []Float32Option, f func(Float32Option) Uint32List) []Uint32List {
	acc := make([]Uint32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float32Option: Float32Option->Uint64List */ func MapUint64ListToFloat32OptionArr(m []Float32Option, f func(Float32Option) Uint64List) []Uint64List {
	acc := make([]Uint64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float32Option: Float32Option->UintptrList */ func MapUintptrListToFloat32OptionArr(m []Float32Option, f func(Float32Option) UintptrList) []UintptrList {
	acc := make([]UintptrList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float32Option: Float32Option->ByteList */ func MapByteListToFloat32OptionArr(m []Float32Option, f func(Float32Option) ByteList) []ByteList {
	acc := make([]ByteList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float32Option: Float32Option->RuneList */ func MapRuneListToFloat32OptionArr(m []Float32Option, f func(Float32Option) RuneList) []RuneList {
	acc := make([]RuneList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float32Option: Float32Option->Float32List */ func MapFloat32ListToFloat32OptionArr(m []Float32Option, f func(Float32Option) Float32List) []Float32List {
	acc := make([]Float32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float32Option: Float32Option->Float64List */ func MapFloat64ListToFloat32OptionArr(m []Float32Option, f func(Float32Option) Float64List) []Float64List {
	acc := make([]Float64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float32Option: Float32Option->Complex64List */ func MapComplex64ListToFloat32OptionArr(m []Float32Option, f func(Float32Option) Complex64List) []Complex64List {
	acc := make([]Complex64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float32Option: Float32Option->Complex128List */ func MapComplex128ListToFloat32OptionArr(m []Float32Option, f func(Float32Option) Complex128List) []Complex128List {
	acc := make([]Complex128List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float32Option: Float32Option->AnyList */ func MapAnyListToFloat32OptionArr(m []Float32Option, f func(Float32Option) AnyList) []AnyList {
	acc := make([]AnyList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float64Option: Float64Option->bool */ func MapBoolToFloat64OptionArr(m []Float64Option, f func(Float64Option) bool) []bool {
	acc := make([]bool, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float64Option: Float64Option->string */ func MapStringToFloat64OptionArr(m []Float64Option, f func(Float64Option) string) []string {
	acc := make([]string, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float64Option: Float64Option->int */ func MapIntToFloat64OptionArr(m []Float64Option, f func(Float64Option) int) []int {
	acc := make([]int, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float64Option: Float64Option->int8 */ func MapInt8ToFloat64OptionArr(m []Float64Option, f func(Float64Option) int8) []int8 {
	acc := make([]int8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float64Option: Float64Option->int16 */ func MapInt16ToFloat64OptionArr(m []Float64Option, f func(Float64Option) int16) []int16 {
	acc := make([]int16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float64Option: Float64Option->int32 */ func MapInt32ToFloat64OptionArr(m []Float64Option, f func(Float64Option) int32) []int32 {
	acc := make([]int32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float64Option: Float64Option->int64 */ func MapInt64ToFloat64OptionArr(m []Float64Option, f func(Float64Option) int64) []int64 {
	acc := make([]int64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float64Option: Float64Option->uint */ func MapUintToFloat64OptionArr(m []Float64Option, f func(Float64Option) uint) []uint {
	acc := make([]uint, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float64Option: Float64Option->uint8 */ func MapUint8ToFloat64OptionArr(m []Float64Option, f func(Float64Option) uint8) []uint8 {
	acc := make([]uint8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float64Option: Float64Option->uint16 */ func MapUint16ToFloat64OptionArr(m []Float64Option, f func(Float64Option) uint16) []uint16 {
	acc := make([]uint16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float64Option: Float64Option->uint32 */ func MapUint32ToFloat64OptionArr(m []Float64Option, f func(Float64Option) uint32) []uint32 {
	acc := make([]uint32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float64Option: Float64Option->uint64 */ func MapUint64ToFloat64OptionArr(m []Float64Option, f func(Float64Option) uint64) []uint64 {
	acc := make([]uint64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float64Option: Float64Option->uintptr */ func MapUintptrToFloat64OptionArr(m []Float64Option, f func(Float64Option) uintptr) []uintptr {
	acc := make([]uintptr, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float64Option: Float64Option->byte */ func MapByteToFloat64OptionArr(m []Float64Option, f func(Float64Option) byte) []byte {
	acc := make([]byte, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float64Option: Float64Option->rune */ func MapRuneToFloat64OptionArr(m []Float64Option, f func(Float64Option) rune) []rune {
	acc := make([]rune, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float64Option: Float64Option->float32 */ func MapFloat32ToFloat64OptionArr(m []Float64Option, f func(Float64Option) float32) []float32 {
	acc := make([]float32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float64Option: Float64Option->float64 */ func MapFloat64ToFloat64OptionArr(m []Float64Option, f func(Float64Option) float64) []float64 {
	acc := make([]float64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float64Option: Float64Option->complex64 */ func MapComplex64ToFloat64OptionArr(m []Float64Option, f func(Float64Option) complex64) []complex64 {
	acc := make([]complex64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float64Option: Float64Option->complex128 */ func MapComplex128ToFloat64OptionArr(m []Float64Option, f func(Float64Option) complex128) []complex128 {
	acc := make([]complex128, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float64Option: Float64Option->Any */ func MapAnyToFloat64OptionArr(m []Float64Option, f func(Float64Option) Any) []Any {
	acc := make([]Any, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float64Option: Float64Option->BoolOption */ func MapBoolOptionToFloat64OptionArr(m []Float64Option, f func(Float64Option) BoolOption) []BoolOption {
	acc := make([]BoolOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float64Option: Float64Option->StringOption */ func MapStringOptionToFloat64OptionArr(m []Float64Option, f func(Float64Option) StringOption) []StringOption {
	acc := make([]StringOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float64Option: Float64Option->IntOption */ func MapIntOptionToFloat64OptionArr(m []Float64Option, f func(Float64Option) IntOption) []IntOption {
	acc := make([]IntOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float64Option: Float64Option->Int8Option */ func MapInt8OptionToFloat64OptionArr(m []Float64Option, f func(Float64Option) Int8Option) []Int8Option {
	acc := make([]Int8Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float64Option: Float64Option->Int16Option */ func MapInt16OptionToFloat64OptionArr(m []Float64Option, f func(Float64Option) Int16Option) []Int16Option {
	acc := make([]Int16Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float64Option: Float64Option->Int32Option */ func MapInt32OptionToFloat64OptionArr(m []Float64Option, f func(Float64Option) Int32Option) []Int32Option {
	acc := make([]Int32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float64Option: Float64Option->Int64Option */ func MapInt64OptionToFloat64OptionArr(m []Float64Option, f func(Float64Option) Int64Option) []Int64Option {
	acc := make([]Int64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float64Option: Float64Option->UintOption */ func MapUintOptionToFloat64OptionArr(m []Float64Option, f func(Float64Option) UintOption) []UintOption {
	acc := make([]UintOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float64Option: Float64Option->Uint8Option */ func MapUint8OptionToFloat64OptionArr(m []Float64Option, f func(Float64Option) Uint8Option) []Uint8Option {
	acc := make([]Uint8Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float64Option: Float64Option->Uint16Option */ func MapUint16OptionToFloat64OptionArr(m []Float64Option, f func(Float64Option) Uint16Option) []Uint16Option {
	acc := make([]Uint16Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float64Option: Float64Option->Uint32Option */ func MapUint32OptionToFloat64OptionArr(m []Float64Option, f func(Float64Option) Uint32Option) []Uint32Option {
	acc := make([]Uint32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float64Option: Float64Option->Uint64Option */ func MapUint64OptionToFloat64OptionArr(m []Float64Option, f func(Float64Option) Uint64Option) []Uint64Option {
	acc := make([]Uint64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float64Option: Float64Option->UintptrOption */ func MapUintptrOptionToFloat64OptionArr(m []Float64Option, f func(Float64Option) UintptrOption) []UintptrOption {
	acc := make([]UintptrOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float64Option: Float64Option->ByteOption */ func MapByteOptionToFloat64OptionArr(m []Float64Option, f func(Float64Option) ByteOption) []ByteOption {
	acc := make([]ByteOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float64Option: Float64Option->RuneOption */ func MapRuneOptionToFloat64OptionArr(m []Float64Option, f func(Float64Option) RuneOption) []RuneOption {
	acc := make([]RuneOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float64Option: Float64Option->Float32Option */ func MapFloat32OptionToFloat64OptionArr(m []Float64Option, f func(Float64Option) Float32Option) []Float32Option {
	acc := make([]Float32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float64Option: Float64Option->Float64Option */ func MapFloat64OptionToFloat64OptionArr(m []Float64Option, f func(Float64Option) Float64Option) []Float64Option {
	acc := make([]Float64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float64Option: Float64Option->Complex64Option */ func MapComplex64OptionToFloat64OptionArr(m []Float64Option, f func(Float64Option) Complex64Option) []Complex64Option {
	acc := make([]Complex64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float64Option: Float64Option->Complex128Option */ func MapComplex128OptionToFloat64OptionArr(m []Float64Option, f func(Float64Option) Complex128Option) []Complex128Option {
	acc := make([]Complex128Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float64Option: Float64Option->AnyOption */ func MapAnyOptionToFloat64OptionArr(m []Float64Option, f func(Float64Option) AnyOption) []AnyOption {
	acc := make([]AnyOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float64Option: Float64Option->[]bool */ func MapBoolArrToFloat64OptionArr(m []Float64Option, f func(Float64Option) []bool) [][]bool {
	acc := make([][]bool, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float64Option: Float64Option->[]string */ func MapStringArrToFloat64OptionArr(m []Float64Option, f func(Float64Option) []string) [][]string {
	acc := make([][]string, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float64Option: Float64Option->[]int */ func MapIntArrToFloat64OptionArr(m []Float64Option, f func(Float64Option) []int) [][]int {
	acc := make([][]int, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float64Option: Float64Option->[]int8 */ func MapInt8ArrToFloat64OptionArr(m []Float64Option, f func(Float64Option) []int8) [][]int8 {
	acc := make([][]int8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float64Option: Float64Option->[]int16 */ func MapInt16ArrToFloat64OptionArr(m []Float64Option, f func(Float64Option) []int16) [][]int16 {
	acc := make([][]int16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float64Option: Float64Option->[]int32 */ func MapInt32ArrToFloat64OptionArr(m []Float64Option, f func(Float64Option) []int32) [][]int32 {
	acc := make([][]int32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float64Option: Float64Option->[]int64 */ func MapInt64ArrToFloat64OptionArr(m []Float64Option, f func(Float64Option) []int64) [][]int64 {
	acc := make([][]int64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float64Option: Float64Option->[]uint */ func MapUintArrToFloat64OptionArr(m []Float64Option, f func(Float64Option) []uint) [][]uint {
	acc := make([][]uint, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float64Option: Float64Option->[]uint8 */ func MapUint8ArrToFloat64OptionArr(m []Float64Option, f func(Float64Option) []uint8) [][]uint8 {
	acc := make([][]uint8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float64Option: Float64Option->[]uint16 */ func MapUint16ArrToFloat64OptionArr(m []Float64Option, f func(Float64Option) []uint16) [][]uint16 {
	acc := make([][]uint16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float64Option: Float64Option->[]uint32 */ func MapUint32ArrToFloat64OptionArr(m []Float64Option, f func(Float64Option) []uint32) [][]uint32 {
	acc := make([][]uint32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float64Option: Float64Option->[]uint64 */ func MapUint64ArrToFloat64OptionArr(m []Float64Option, f func(Float64Option) []uint64) [][]uint64 {
	acc := make([][]uint64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float64Option: Float64Option->[]uintptr */ func MapUintptrArrToFloat64OptionArr(m []Float64Option, f func(Float64Option) []uintptr) [][]uintptr {
	acc := make([][]uintptr, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float64Option: Float64Option->[]byte */ func MapByteArrToFloat64OptionArr(m []Float64Option, f func(Float64Option) []byte) [][]byte {
	acc := make([][]byte, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float64Option: Float64Option->[]rune */ func MapRuneArrToFloat64OptionArr(m []Float64Option, f func(Float64Option) []rune) [][]rune {
	acc := make([][]rune, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float64Option: Float64Option->[]float32 */ func MapFloat32ArrToFloat64OptionArr(m []Float64Option, f func(Float64Option) []float32) [][]float32 {
	acc := make([][]float32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float64Option: Float64Option->[]float64 */ func MapFloat64ArrToFloat64OptionArr(m []Float64Option, f func(Float64Option) []float64) [][]float64 {
	acc := make([][]float64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float64Option: Float64Option->[]complex64 */ func MapComplex64ArrToFloat64OptionArr(m []Float64Option, f func(Float64Option) []complex64) [][]complex64 {
	acc := make([][]complex64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float64Option: Float64Option->[]complex128 */ func MapComplex128ArrToFloat64OptionArr(m []Float64Option, f func(Float64Option) []complex128) [][]complex128 {
	acc := make([][]complex128, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float64Option: Float64Option->[]Any */ func MapAnyArrToFloat64OptionArr(m []Float64Option, f func(Float64Option) []Any) [][]Any {
	acc := make([][]Any, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float64Option: Float64Option->BoolList */ func MapBoolListToFloat64OptionArr(m []Float64Option, f func(Float64Option) BoolList) []BoolList {
	acc := make([]BoolList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float64Option: Float64Option->StringList */ func MapStringListToFloat64OptionArr(m []Float64Option, f func(Float64Option) StringList) []StringList {
	acc := make([]StringList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float64Option: Float64Option->IntList */ func MapIntListToFloat64OptionArr(m []Float64Option, f func(Float64Option) IntList) []IntList {
	acc := make([]IntList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float64Option: Float64Option->Int8List */ func MapInt8ListToFloat64OptionArr(m []Float64Option, f func(Float64Option) Int8List) []Int8List {
	acc := make([]Int8List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float64Option: Float64Option->Int16List */ func MapInt16ListToFloat64OptionArr(m []Float64Option, f func(Float64Option) Int16List) []Int16List {
	acc := make([]Int16List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float64Option: Float64Option->Int32List */ func MapInt32ListToFloat64OptionArr(m []Float64Option, f func(Float64Option) Int32List) []Int32List {
	acc := make([]Int32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float64Option: Float64Option->Int64List */ func MapInt64ListToFloat64OptionArr(m []Float64Option, f func(Float64Option) Int64List) []Int64List {
	acc := make([]Int64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float64Option: Float64Option->UintList */ func MapUintListToFloat64OptionArr(m []Float64Option, f func(Float64Option) UintList) []UintList {
	acc := make([]UintList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float64Option: Float64Option->Uint8List */ func MapUint8ListToFloat64OptionArr(m []Float64Option, f func(Float64Option) Uint8List) []Uint8List {
	acc := make([]Uint8List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float64Option: Float64Option->Uint16List */ func MapUint16ListToFloat64OptionArr(m []Float64Option, f func(Float64Option) Uint16List) []Uint16List {
	acc := make([]Uint16List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float64Option: Float64Option->Uint32List */ func MapUint32ListToFloat64OptionArr(m []Float64Option, f func(Float64Option) Uint32List) []Uint32List {
	acc := make([]Uint32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float64Option: Float64Option->Uint64List */ func MapUint64ListToFloat64OptionArr(m []Float64Option, f func(Float64Option) Uint64List) []Uint64List {
	acc := make([]Uint64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float64Option: Float64Option->UintptrList */ func MapUintptrListToFloat64OptionArr(m []Float64Option, f func(Float64Option) UintptrList) []UintptrList {
	acc := make([]UintptrList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float64Option: Float64Option->ByteList */ func MapByteListToFloat64OptionArr(m []Float64Option, f func(Float64Option) ByteList) []ByteList {
	acc := make([]ByteList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float64Option: Float64Option->RuneList */ func MapRuneListToFloat64OptionArr(m []Float64Option, f func(Float64Option) RuneList) []RuneList {
	acc := make([]RuneList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float64Option: Float64Option->Float32List */ func MapFloat32ListToFloat64OptionArr(m []Float64Option, f func(Float64Option) Float32List) []Float32List {
	acc := make([]Float32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float64Option: Float64Option->Float64List */ func MapFloat64ListToFloat64OptionArr(m []Float64Option, f func(Float64Option) Float64List) []Float64List {
	acc := make([]Float64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float64Option: Float64Option->Complex64List */ func MapComplex64ListToFloat64OptionArr(m []Float64Option, f func(Float64Option) Complex64List) []Complex64List {
	acc := make([]Complex64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float64Option: Float64Option->Complex128List */ func MapComplex128ListToFloat64OptionArr(m []Float64Option, f func(Float64Option) Complex128List) []Complex128List {
	acc := make([]Complex128List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Float64Option: Float64Option->AnyList */ func MapAnyListToFloat64OptionArr(m []Float64Option, f func(Float64Option) AnyList) []AnyList {
	acc := make([]AnyList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex64Option: Complex64Option->bool */ func MapBoolToComplex64OptionArr(m []Complex64Option, f func(Complex64Option) bool) []bool {
	acc := make([]bool, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex64Option: Complex64Option->string */ func MapStringToComplex64OptionArr(m []Complex64Option, f func(Complex64Option) string) []string {
	acc := make([]string, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex64Option: Complex64Option->int */ func MapIntToComplex64OptionArr(m []Complex64Option, f func(Complex64Option) int) []int {
	acc := make([]int, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex64Option: Complex64Option->int8 */ func MapInt8ToComplex64OptionArr(m []Complex64Option, f func(Complex64Option) int8) []int8 {
	acc := make([]int8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex64Option: Complex64Option->int16 */ func MapInt16ToComplex64OptionArr(m []Complex64Option, f func(Complex64Option) int16) []int16 {
	acc := make([]int16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex64Option: Complex64Option->int32 */ func MapInt32ToComplex64OptionArr(m []Complex64Option, f func(Complex64Option) int32) []int32 {
	acc := make([]int32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex64Option: Complex64Option->int64 */ func MapInt64ToComplex64OptionArr(m []Complex64Option, f func(Complex64Option) int64) []int64 {
	acc := make([]int64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex64Option: Complex64Option->uint */ func MapUintToComplex64OptionArr(m []Complex64Option, f func(Complex64Option) uint) []uint {
	acc := make([]uint, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex64Option: Complex64Option->uint8 */ func MapUint8ToComplex64OptionArr(m []Complex64Option, f func(Complex64Option) uint8) []uint8 {
	acc := make([]uint8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex64Option: Complex64Option->uint16 */ func MapUint16ToComplex64OptionArr(m []Complex64Option, f func(Complex64Option) uint16) []uint16 {
	acc := make([]uint16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex64Option: Complex64Option->uint32 */ func MapUint32ToComplex64OptionArr(m []Complex64Option, f func(Complex64Option) uint32) []uint32 {
	acc := make([]uint32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex64Option: Complex64Option->uint64 */ func MapUint64ToComplex64OptionArr(m []Complex64Option, f func(Complex64Option) uint64) []uint64 {
	acc := make([]uint64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex64Option: Complex64Option->uintptr */ func MapUintptrToComplex64OptionArr(m []Complex64Option, f func(Complex64Option) uintptr) []uintptr {
	acc := make([]uintptr, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex64Option: Complex64Option->byte */ func MapByteToComplex64OptionArr(m []Complex64Option, f func(Complex64Option) byte) []byte {
	acc := make([]byte, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex64Option: Complex64Option->rune */ func MapRuneToComplex64OptionArr(m []Complex64Option, f func(Complex64Option) rune) []rune {
	acc := make([]rune, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex64Option: Complex64Option->float32 */ func MapFloat32ToComplex64OptionArr(m []Complex64Option, f func(Complex64Option) float32) []float32 {
	acc := make([]float32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex64Option: Complex64Option->float64 */ func MapFloat64ToComplex64OptionArr(m []Complex64Option, f func(Complex64Option) float64) []float64 {
	acc := make([]float64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex64Option: Complex64Option->complex64 */ func MapComplex64ToComplex64OptionArr(m []Complex64Option, f func(Complex64Option) complex64) []complex64 {
	acc := make([]complex64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex64Option: Complex64Option->complex128 */ func MapComplex128ToComplex64OptionArr(m []Complex64Option, f func(Complex64Option) complex128) []complex128 {
	acc := make([]complex128, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex64Option: Complex64Option->Any */ func MapAnyToComplex64OptionArr(m []Complex64Option, f func(Complex64Option) Any) []Any {
	acc := make([]Any, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex64Option: Complex64Option->BoolOption */ func MapBoolOptionToComplex64OptionArr(m []Complex64Option, f func(Complex64Option) BoolOption) []BoolOption {
	acc := make([]BoolOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex64Option: Complex64Option->StringOption */ func MapStringOptionToComplex64OptionArr(m []Complex64Option, f func(Complex64Option) StringOption) []StringOption {
	acc := make([]StringOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex64Option: Complex64Option->IntOption */ func MapIntOptionToComplex64OptionArr(m []Complex64Option, f func(Complex64Option) IntOption) []IntOption {
	acc := make([]IntOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex64Option: Complex64Option->Int8Option */ func MapInt8OptionToComplex64OptionArr(m []Complex64Option, f func(Complex64Option) Int8Option) []Int8Option {
	acc := make([]Int8Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex64Option: Complex64Option->Int16Option */ func MapInt16OptionToComplex64OptionArr(m []Complex64Option, f func(Complex64Option) Int16Option) []Int16Option {
	acc := make([]Int16Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex64Option: Complex64Option->Int32Option */ func MapInt32OptionToComplex64OptionArr(m []Complex64Option, f func(Complex64Option) Int32Option) []Int32Option {
	acc := make([]Int32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex64Option: Complex64Option->Int64Option */ func MapInt64OptionToComplex64OptionArr(m []Complex64Option, f func(Complex64Option) Int64Option) []Int64Option {
	acc := make([]Int64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex64Option: Complex64Option->UintOption */ func MapUintOptionToComplex64OptionArr(m []Complex64Option, f func(Complex64Option) UintOption) []UintOption {
	acc := make([]UintOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex64Option: Complex64Option->Uint8Option */ func MapUint8OptionToComplex64OptionArr(m []Complex64Option, f func(Complex64Option) Uint8Option) []Uint8Option {
	acc := make([]Uint8Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex64Option: Complex64Option->Uint16Option */ func MapUint16OptionToComplex64OptionArr(m []Complex64Option, f func(Complex64Option) Uint16Option) []Uint16Option {
	acc := make([]Uint16Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex64Option: Complex64Option->Uint32Option */ func MapUint32OptionToComplex64OptionArr(m []Complex64Option, f func(Complex64Option) Uint32Option) []Uint32Option {
	acc := make([]Uint32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex64Option: Complex64Option->Uint64Option */ func MapUint64OptionToComplex64OptionArr(m []Complex64Option, f func(Complex64Option) Uint64Option) []Uint64Option {
	acc := make([]Uint64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex64Option: Complex64Option->UintptrOption */ func MapUintptrOptionToComplex64OptionArr(m []Complex64Option, f func(Complex64Option) UintptrOption) []UintptrOption {
	acc := make([]UintptrOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex64Option: Complex64Option->ByteOption */ func MapByteOptionToComplex64OptionArr(m []Complex64Option, f func(Complex64Option) ByteOption) []ByteOption {
	acc := make([]ByteOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex64Option: Complex64Option->RuneOption */ func MapRuneOptionToComplex64OptionArr(m []Complex64Option, f func(Complex64Option) RuneOption) []RuneOption {
	acc := make([]RuneOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex64Option: Complex64Option->Float32Option */ func MapFloat32OptionToComplex64OptionArr(m []Complex64Option, f func(Complex64Option) Float32Option) []Float32Option {
	acc := make([]Float32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex64Option: Complex64Option->Float64Option */ func MapFloat64OptionToComplex64OptionArr(m []Complex64Option, f func(Complex64Option) Float64Option) []Float64Option {
	acc := make([]Float64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex64Option: Complex64Option->Complex64Option */ func MapComplex64OptionToComplex64OptionArr(m []Complex64Option, f func(Complex64Option) Complex64Option) []Complex64Option {
	acc := make([]Complex64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex64Option: Complex64Option->Complex128Option */ func MapComplex128OptionToComplex64OptionArr(m []Complex64Option, f func(Complex64Option) Complex128Option) []Complex128Option {
	acc := make([]Complex128Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex64Option: Complex64Option->AnyOption */ func MapAnyOptionToComplex64OptionArr(m []Complex64Option, f func(Complex64Option) AnyOption) []AnyOption {
	acc := make([]AnyOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex64Option: Complex64Option->[]bool */ func MapBoolArrToComplex64OptionArr(m []Complex64Option, f func(Complex64Option) []bool) [][]bool {
	acc := make([][]bool, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex64Option: Complex64Option->[]string */ func MapStringArrToComplex64OptionArr(m []Complex64Option, f func(Complex64Option) []string) [][]string {
	acc := make([][]string, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex64Option: Complex64Option->[]int */ func MapIntArrToComplex64OptionArr(m []Complex64Option, f func(Complex64Option) []int) [][]int {
	acc := make([][]int, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex64Option: Complex64Option->[]int8 */ func MapInt8ArrToComplex64OptionArr(m []Complex64Option, f func(Complex64Option) []int8) [][]int8 {
	acc := make([][]int8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex64Option: Complex64Option->[]int16 */ func MapInt16ArrToComplex64OptionArr(m []Complex64Option, f func(Complex64Option) []int16) [][]int16 {
	acc := make([][]int16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex64Option: Complex64Option->[]int32 */ func MapInt32ArrToComplex64OptionArr(m []Complex64Option, f func(Complex64Option) []int32) [][]int32 {
	acc := make([][]int32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex64Option: Complex64Option->[]int64 */ func MapInt64ArrToComplex64OptionArr(m []Complex64Option, f func(Complex64Option) []int64) [][]int64 {
	acc := make([][]int64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex64Option: Complex64Option->[]uint */ func MapUintArrToComplex64OptionArr(m []Complex64Option, f func(Complex64Option) []uint) [][]uint {
	acc := make([][]uint, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex64Option: Complex64Option->[]uint8 */ func MapUint8ArrToComplex64OptionArr(m []Complex64Option, f func(Complex64Option) []uint8) [][]uint8 {
	acc := make([][]uint8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex64Option: Complex64Option->[]uint16 */ func MapUint16ArrToComplex64OptionArr(m []Complex64Option, f func(Complex64Option) []uint16) [][]uint16 {
	acc := make([][]uint16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex64Option: Complex64Option->[]uint32 */ func MapUint32ArrToComplex64OptionArr(m []Complex64Option, f func(Complex64Option) []uint32) [][]uint32 {
	acc := make([][]uint32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex64Option: Complex64Option->[]uint64 */ func MapUint64ArrToComplex64OptionArr(m []Complex64Option, f func(Complex64Option) []uint64) [][]uint64 {
	acc := make([][]uint64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex64Option: Complex64Option->[]uintptr */ func MapUintptrArrToComplex64OptionArr(m []Complex64Option, f func(Complex64Option) []uintptr) [][]uintptr {
	acc := make([][]uintptr, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex64Option: Complex64Option->[]byte */ func MapByteArrToComplex64OptionArr(m []Complex64Option, f func(Complex64Option) []byte) [][]byte {
	acc := make([][]byte, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex64Option: Complex64Option->[]rune */ func MapRuneArrToComplex64OptionArr(m []Complex64Option, f func(Complex64Option) []rune) [][]rune {
	acc := make([][]rune, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex64Option: Complex64Option->[]float32 */ func MapFloat32ArrToComplex64OptionArr(m []Complex64Option, f func(Complex64Option) []float32) [][]float32 {
	acc := make([][]float32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex64Option: Complex64Option->[]float64 */ func MapFloat64ArrToComplex64OptionArr(m []Complex64Option, f func(Complex64Option) []float64) [][]float64 {
	acc := make([][]float64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex64Option: Complex64Option->[]complex64 */ func MapComplex64ArrToComplex64OptionArr(m []Complex64Option, f func(Complex64Option) []complex64) [][]complex64 {
	acc := make([][]complex64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex64Option: Complex64Option->[]complex128 */ func MapComplex128ArrToComplex64OptionArr(m []Complex64Option, f func(Complex64Option) []complex128) [][]complex128 {
	acc := make([][]complex128, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex64Option: Complex64Option->[]Any */ func MapAnyArrToComplex64OptionArr(m []Complex64Option, f func(Complex64Option) []Any) [][]Any {
	acc := make([][]Any, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex64Option: Complex64Option->BoolList */ func MapBoolListToComplex64OptionArr(m []Complex64Option, f func(Complex64Option) BoolList) []BoolList {
	acc := make([]BoolList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex64Option: Complex64Option->StringList */ func MapStringListToComplex64OptionArr(m []Complex64Option, f func(Complex64Option) StringList) []StringList {
	acc := make([]StringList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex64Option: Complex64Option->IntList */ func MapIntListToComplex64OptionArr(m []Complex64Option, f func(Complex64Option) IntList) []IntList {
	acc := make([]IntList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex64Option: Complex64Option->Int8List */ func MapInt8ListToComplex64OptionArr(m []Complex64Option, f func(Complex64Option) Int8List) []Int8List {
	acc := make([]Int8List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex64Option: Complex64Option->Int16List */ func MapInt16ListToComplex64OptionArr(m []Complex64Option, f func(Complex64Option) Int16List) []Int16List {
	acc := make([]Int16List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex64Option: Complex64Option->Int32List */ func MapInt32ListToComplex64OptionArr(m []Complex64Option, f func(Complex64Option) Int32List) []Int32List {
	acc := make([]Int32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex64Option: Complex64Option->Int64List */ func MapInt64ListToComplex64OptionArr(m []Complex64Option, f func(Complex64Option) Int64List) []Int64List {
	acc := make([]Int64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex64Option: Complex64Option->UintList */ func MapUintListToComplex64OptionArr(m []Complex64Option, f func(Complex64Option) UintList) []UintList {
	acc := make([]UintList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex64Option: Complex64Option->Uint8List */ func MapUint8ListToComplex64OptionArr(m []Complex64Option, f func(Complex64Option) Uint8List) []Uint8List {
	acc := make([]Uint8List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex64Option: Complex64Option->Uint16List */ func MapUint16ListToComplex64OptionArr(m []Complex64Option, f func(Complex64Option) Uint16List) []Uint16List {
	acc := make([]Uint16List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex64Option: Complex64Option->Uint32List */ func MapUint32ListToComplex64OptionArr(m []Complex64Option, f func(Complex64Option) Uint32List) []Uint32List {
	acc := make([]Uint32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex64Option: Complex64Option->Uint64List */ func MapUint64ListToComplex64OptionArr(m []Complex64Option, f func(Complex64Option) Uint64List) []Uint64List {
	acc := make([]Uint64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex64Option: Complex64Option->UintptrList */ func MapUintptrListToComplex64OptionArr(m []Complex64Option, f func(Complex64Option) UintptrList) []UintptrList {
	acc := make([]UintptrList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex64Option: Complex64Option->ByteList */ func MapByteListToComplex64OptionArr(m []Complex64Option, f func(Complex64Option) ByteList) []ByteList {
	acc := make([]ByteList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex64Option: Complex64Option->RuneList */ func MapRuneListToComplex64OptionArr(m []Complex64Option, f func(Complex64Option) RuneList) []RuneList {
	acc := make([]RuneList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex64Option: Complex64Option->Float32List */ func MapFloat32ListToComplex64OptionArr(m []Complex64Option, f func(Complex64Option) Float32List) []Float32List {
	acc := make([]Float32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex64Option: Complex64Option->Float64List */ func MapFloat64ListToComplex64OptionArr(m []Complex64Option, f func(Complex64Option) Float64List) []Float64List {
	acc := make([]Float64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex64Option: Complex64Option->Complex64List */ func MapComplex64ListToComplex64OptionArr(m []Complex64Option, f func(Complex64Option) Complex64List) []Complex64List {
	acc := make([]Complex64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex64Option: Complex64Option->Complex128List */ func MapComplex128ListToComplex64OptionArr(m []Complex64Option, f func(Complex64Option) Complex128List) []Complex128List {
	acc := make([]Complex128List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex64Option: Complex64Option->AnyList */ func MapAnyListToComplex64OptionArr(m []Complex64Option, f func(Complex64Option) AnyList) []AnyList {
	acc := make([]AnyList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex128Option: Complex128Option->bool */ func MapBoolToComplex128OptionArr(m []Complex128Option, f func(Complex128Option) bool) []bool {
	acc := make([]bool, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex128Option: Complex128Option->string */ func MapStringToComplex128OptionArr(m []Complex128Option, f func(Complex128Option) string) []string {
	acc := make([]string, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex128Option: Complex128Option->int */ func MapIntToComplex128OptionArr(m []Complex128Option, f func(Complex128Option) int) []int {
	acc := make([]int, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex128Option: Complex128Option->int8 */ func MapInt8ToComplex128OptionArr(m []Complex128Option, f func(Complex128Option) int8) []int8 {
	acc := make([]int8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex128Option: Complex128Option->int16 */ func MapInt16ToComplex128OptionArr(m []Complex128Option, f func(Complex128Option) int16) []int16 {
	acc := make([]int16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex128Option: Complex128Option->int32 */ func MapInt32ToComplex128OptionArr(m []Complex128Option, f func(Complex128Option) int32) []int32 {
	acc := make([]int32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex128Option: Complex128Option->int64 */ func MapInt64ToComplex128OptionArr(m []Complex128Option, f func(Complex128Option) int64) []int64 {
	acc := make([]int64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex128Option: Complex128Option->uint */ func MapUintToComplex128OptionArr(m []Complex128Option, f func(Complex128Option) uint) []uint {
	acc := make([]uint, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex128Option: Complex128Option->uint8 */ func MapUint8ToComplex128OptionArr(m []Complex128Option, f func(Complex128Option) uint8) []uint8 {
	acc := make([]uint8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex128Option: Complex128Option->uint16 */ func MapUint16ToComplex128OptionArr(m []Complex128Option, f func(Complex128Option) uint16) []uint16 {
	acc := make([]uint16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex128Option: Complex128Option->uint32 */ func MapUint32ToComplex128OptionArr(m []Complex128Option, f func(Complex128Option) uint32) []uint32 {
	acc := make([]uint32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex128Option: Complex128Option->uint64 */ func MapUint64ToComplex128OptionArr(m []Complex128Option, f func(Complex128Option) uint64) []uint64 {
	acc := make([]uint64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex128Option: Complex128Option->uintptr */ func MapUintptrToComplex128OptionArr(m []Complex128Option, f func(Complex128Option) uintptr) []uintptr {
	acc := make([]uintptr, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex128Option: Complex128Option->byte */ func MapByteToComplex128OptionArr(m []Complex128Option, f func(Complex128Option) byte) []byte {
	acc := make([]byte, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex128Option: Complex128Option->rune */ func MapRuneToComplex128OptionArr(m []Complex128Option, f func(Complex128Option) rune) []rune {
	acc := make([]rune, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex128Option: Complex128Option->float32 */ func MapFloat32ToComplex128OptionArr(m []Complex128Option, f func(Complex128Option) float32) []float32 {
	acc := make([]float32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex128Option: Complex128Option->float64 */ func MapFloat64ToComplex128OptionArr(m []Complex128Option, f func(Complex128Option) float64) []float64 {
	acc := make([]float64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex128Option: Complex128Option->complex64 */ func MapComplex64ToComplex128OptionArr(m []Complex128Option, f func(Complex128Option) complex64) []complex64 {
	acc := make([]complex64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex128Option: Complex128Option->complex128 */ func MapComplex128ToComplex128OptionArr(m []Complex128Option, f func(Complex128Option) complex128) []complex128 {
	acc := make([]complex128, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex128Option: Complex128Option->Any */ func MapAnyToComplex128OptionArr(m []Complex128Option, f func(Complex128Option) Any) []Any {
	acc := make([]Any, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex128Option: Complex128Option->BoolOption */ func MapBoolOptionToComplex128OptionArr(m []Complex128Option, f func(Complex128Option) BoolOption) []BoolOption {
	acc := make([]BoolOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex128Option: Complex128Option->StringOption */ func MapStringOptionToComplex128OptionArr(m []Complex128Option, f func(Complex128Option) StringOption) []StringOption {
	acc := make([]StringOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex128Option: Complex128Option->IntOption */ func MapIntOptionToComplex128OptionArr(m []Complex128Option, f func(Complex128Option) IntOption) []IntOption {
	acc := make([]IntOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex128Option: Complex128Option->Int8Option */ func MapInt8OptionToComplex128OptionArr(m []Complex128Option, f func(Complex128Option) Int8Option) []Int8Option {
	acc := make([]Int8Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex128Option: Complex128Option->Int16Option */ func MapInt16OptionToComplex128OptionArr(m []Complex128Option, f func(Complex128Option) Int16Option) []Int16Option {
	acc := make([]Int16Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex128Option: Complex128Option->Int32Option */ func MapInt32OptionToComplex128OptionArr(m []Complex128Option, f func(Complex128Option) Int32Option) []Int32Option {
	acc := make([]Int32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex128Option: Complex128Option->Int64Option */ func MapInt64OptionToComplex128OptionArr(m []Complex128Option, f func(Complex128Option) Int64Option) []Int64Option {
	acc := make([]Int64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex128Option: Complex128Option->UintOption */ func MapUintOptionToComplex128OptionArr(m []Complex128Option, f func(Complex128Option) UintOption) []UintOption {
	acc := make([]UintOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex128Option: Complex128Option->Uint8Option */ func MapUint8OptionToComplex128OptionArr(m []Complex128Option, f func(Complex128Option) Uint8Option) []Uint8Option {
	acc := make([]Uint8Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex128Option: Complex128Option->Uint16Option */ func MapUint16OptionToComplex128OptionArr(m []Complex128Option, f func(Complex128Option) Uint16Option) []Uint16Option {
	acc := make([]Uint16Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex128Option: Complex128Option->Uint32Option */ func MapUint32OptionToComplex128OptionArr(m []Complex128Option, f func(Complex128Option) Uint32Option) []Uint32Option {
	acc := make([]Uint32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex128Option: Complex128Option->Uint64Option */ func MapUint64OptionToComplex128OptionArr(m []Complex128Option, f func(Complex128Option) Uint64Option) []Uint64Option {
	acc := make([]Uint64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex128Option: Complex128Option->UintptrOption */ func MapUintptrOptionToComplex128OptionArr(m []Complex128Option, f func(Complex128Option) UintptrOption) []UintptrOption {
	acc := make([]UintptrOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex128Option: Complex128Option->ByteOption */ func MapByteOptionToComplex128OptionArr(m []Complex128Option, f func(Complex128Option) ByteOption) []ByteOption {
	acc := make([]ByteOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex128Option: Complex128Option->RuneOption */ func MapRuneOptionToComplex128OptionArr(m []Complex128Option, f func(Complex128Option) RuneOption) []RuneOption {
	acc := make([]RuneOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex128Option: Complex128Option->Float32Option */ func MapFloat32OptionToComplex128OptionArr(m []Complex128Option, f func(Complex128Option) Float32Option) []Float32Option {
	acc := make([]Float32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex128Option: Complex128Option->Float64Option */ func MapFloat64OptionToComplex128OptionArr(m []Complex128Option, f func(Complex128Option) Float64Option) []Float64Option {
	acc := make([]Float64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex128Option: Complex128Option->Complex64Option */ func MapComplex64OptionToComplex128OptionArr(m []Complex128Option, f func(Complex128Option) Complex64Option) []Complex64Option {
	acc := make([]Complex64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex128Option: Complex128Option->Complex128Option */ func MapComplex128OptionToComplex128OptionArr(m []Complex128Option, f func(Complex128Option) Complex128Option) []Complex128Option {
	acc := make([]Complex128Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex128Option: Complex128Option->AnyOption */ func MapAnyOptionToComplex128OptionArr(m []Complex128Option, f func(Complex128Option) AnyOption) []AnyOption {
	acc := make([]AnyOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex128Option: Complex128Option->[]bool */ func MapBoolArrToComplex128OptionArr(m []Complex128Option, f func(Complex128Option) []bool) [][]bool {
	acc := make([][]bool, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex128Option: Complex128Option->[]string */ func MapStringArrToComplex128OptionArr(m []Complex128Option, f func(Complex128Option) []string) [][]string {
	acc := make([][]string, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex128Option: Complex128Option->[]int */ func MapIntArrToComplex128OptionArr(m []Complex128Option, f func(Complex128Option) []int) [][]int {
	acc := make([][]int, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex128Option: Complex128Option->[]int8 */ func MapInt8ArrToComplex128OptionArr(m []Complex128Option, f func(Complex128Option) []int8) [][]int8 {
	acc := make([][]int8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex128Option: Complex128Option->[]int16 */ func MapInt16ArrToComplex128OptionArr(m []Complex128Option, f func(Complex128Option) []int16) [][]int16 {
	acc := make([][]int16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex128Option: Complex128Option->[]int32 */ func MapInt32ArrToComplex128OptionArr(m []Complex128Option, f func(Complex128Option) []int32) [][]int32 {
	acc := make([][]int32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex128Option: Complex128Option->[]int64 */ func MapInt64ArrToComplex128OptionArr(m []Complex128Option, f func(Complex128Option) []int64) [][]int64 {
	acc := make([][]int64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex128Option: Complex128Option->[]uint */ func MapUintArrToComplex128OptionArr(m []Complex128Option, f func(Complex128Option) []uint) [][]uint {
	acc := make([][]uint, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex128Option: Complex128Option->[]uint8 */ func MapUint8ArrToComplex128OptionArr(m []Complex128Option, f func(Complex128Option) []uint8) [][]uint8 {
	acc := make([][]uint8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex128Option: Complex128Option->[]uint16 */ func MapUint16ArrToComplex128OptionArr(m []Complex128Option, f func(Complex128Option) []uint16) [][]uint16 {
	acc := make([][]uint16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex128Option: Complex128Option->[]uint32 */ func MapUint32ArrToComplex128OptionArr(m []Complex128Option, f func(Complex128Option) []uint32) [][]uint32 {
	acc := make([][]uint32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex128Option: Complex128Option->[]uint64 */ func MapUint64ArrToComplex128OptionArr(m []Complex128Option, f func(Complex128Option) []uint64) [][]uint64 {
	acc := make([][]uint64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex128Option: Complex128Option->[]uintptr */ func MapUintptrArrToComplex128OptionArr(m []Complex128Option, f func(Complex128Option) []uintptr) [][]uintptr {
	acc := make([][]uintptr, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex128Option: Complex128Option->[]byte */ func MapByteArrToComplex128OptionArr(m []Complex128Option, f func(Complex128Option) []byte) [][]byte {
	acc := make([][]byte, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex128Option: Complex128Option->[]rune */ func MapRuneArrToComplex128OptionArr(m []Complex128Option, f func(Complex128Option) []rune) [][]rune {
	acc := make([][]rune, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex128Option: Complex128Option->[]float32 */ func MapFloat32ArrToComplex128OptionArr(m []Complex128Option, f func(Complex128Option) []float32) [][]float32 {
	acc := make([][]float32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex128Option: Complex128Option->[]float64 */ func MapFloat64ArrToComplex128OptionArr(m []Complex128Option, f func(Complex128Option) []float64) [][]float64 {
	acc := make([][]float64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex128Option: Complex128Option->[]complex64 */ func MapComplex64ArrToComplex128OptionArr(m []Complex128Option, f func(Complex128Option) []complex64) [][]complex64 {
	acc := make([][]complex64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex128Option: Complex128Option->[]complex128 */ func MapComplex128ArrToComplex128OptionArr(m []Complex128Option, f func(Complex128Option) []complex128) [][]complex128 {
	acc := make([][]complex128, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex128Option: Complex128Option->[]Any */ func MapAnyArrToComplex128OptionArr(m []Complex128Option, f func(Complex128Option) []Any) [][]Any {
	acc := make([][]Any, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex128Option: Complex128Option->BoolList */ func MapBoolListToComplex128OptionArr(m []Complex128Option, f func(Complex128Option) BoolList) []BoolList {
	acc := make([]BoolList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex128Option: Complex128Option->StringList */ func MapStringListToComplex128OptionArr(m []Complex128Option, f func(Complex128Option) StringList) []StringList {
	acc := make([]StringList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex128Option: Complex128Option->IntList */ func MapIntListToComplex128OptionArr(m []Complex128Option, f func(Complex128Option) IntList) []IntList {
	acc := make([]IntList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex128Option: Complex128Option->Int8List */ func MapInt8ListToComplex128OptionArr(m []Complex128Option, f func(Complex128Option) Int8List) []Int8List {
	acc := make([]Int8List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex128Option: Complex128Option->Int16List */ func MapInt16ListToComplex128OptionArr(m []Complex128Option, f func(Complex128Option) Int16List) []Int16List {
	acc := make([]Int16List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex128Option: Complex128Option->Int32List */ func MapInt32ListToComplex128OptionArr(m []Complex128Option, f func(Complex128Option) Int32List) []Int32List {
	acc := make([]Int32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex128Option: Complex128Option->Int64List */ func MapInt64ListToComplex128OptionArr(m []Complex128Option, f func(Complex128Option) Int64List) []Int64List {
	acc := make([]Int64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex128Option: Complex128Option->UintList */ func MapUintListToComplex128OptionArr(m []Complex128Option, f func(Complex128Option) UintList) []UintList {
	acc := make([]UintList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex128Option: Complex128Option->Uint8List */ func MapUint8ListToComplex128OptionArr(m []Complex128Option, f func(Complex128Option) Uint8List) []Uint8List {
	acc := make([]Uint8List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex128Option: Complex128Option->Uint16List */ func MapUint16ListToComplex128OptionArr(m []Complex128Option, f func(Complex128Option) Uint16List) []Uint16List {
	acc := make([]Uint16List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex128Option: Complex128Option->Uint32List */ func MapUint32ListToComplex128OptionArr(m []Complex128Option, f func(Complex128Option) Uint32List) []Uint32List {
	acc := make([]Uint32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex128Option: Complex128Option->Uint64List */ func MapUint64ListToComplex128OptionArr(m []Complex128Option, f func(Complex128Option) Uint64List) []Uint64List {
	acc := make([]Uint64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex128Option: Complex128Option->UintptrList */ func MapUintptrListToComplex128OptionArr(m []Complex128Option, f func(Complex128Option) UintptrList) []UintptrList {
	acc := make([]UintptrList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex128Option: Complex128Option->ByteList */ func MapByteListToComplex128OptionArr(m []Complex128Option, f func(Complex128Option) ByteList) []ByteList {
	acc := make([]ByteList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex128Option: Complex128Option->RuneList */ func MapRuneListToComplex128OptionArr(m []Complex128Option, f func(Complex128Option) RuneList) []RuneList {
	acc := make([]RuneList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex128Option: Complex128Option->Float32List */ func MapFloat32ListToComplex128OptionArr(m []Complex128Option, f func(Complex128Option) Float32List) []Float32List {
	acc := make([]Float32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex128Option: Complex128Option->Float64List */ func MapFloat64ListToComplex128OptionArr(m []Complex128Option, f func(Complex128Option) Float64List) []Float64List {
	acc := make([]Float64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex128Option: Complex128Option->Complex64List */ func MapComplex64ListToComplex128OptionArr(m []Complex128Option, f func(Complex128Option) Complex64List) []Complex64List {
	acc := make([]Complex64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex128Option: Complex128Option->Complex128List */ func MapComplex128ListToComplex128OptionArr(m []Complex128Option, f func(Complex128Option) Complex128List) []Complex128List {
	acc := make([]Complex128List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []Complex128Option: Complex128Option->AnyList */ func MapAnyListToComplex128OptionArr(m []Complex128Option, f func(Complex128Option) AnyList) []AnyList {
	acc := make([]AnyList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []AnyOption: AnyOption->bool */ func MapBoolToAnyOptionArr(m []AnyOption, f func(AnyOption) bool) []bool {
	acc := make([]bool, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []AnyOption: AnyOption->string */ func MapStringToAnyOptionArr(m []AnyOption, f func(AnyOption) string) []string {
	acc := make([]string, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []AnyOption: AnyOption->int */ func MapIntToAnyOptionArr(m []AnyOption, f func(AnyOption) int) []int {
	acc := make([]int, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []AnyOption: AnyOption->int8 */ func MapInt8ToAnyOptionArr(m []AnyOption, f func(AnyOption) int8) []int8 {
	acc := make([]int8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []AnyOption: AnyOption->int16 */ func MapInt16ToAnyOptionArr(m []AnyOption, f func(AnyOption) int16) []int16 {
	acc := make([]int16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []AnyOption: AnyOption->int32 */ func MapInt32ToAnyOptionArr(m []AnyOption, f func(AnyOption) int32) []int32 {
	acc := make([]int32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []AnyOption: AnyOption->int64 */ func MapInt64ToAnyOptionArr(m []AnyOption, f func(AnyOption) int64) []int64 {
	acc := make([]int64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []AnyOption: AnyOption->uint */ func MapUintToAnyOptionArr(m []AnyOption, f func(AnyOption) uint) []uint {
	acc := make([]uint, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []AnyOption: AnyOption->uint8 */ func MapUint8ToAnyOptionArr(m []AnyOption, f func(AnyOption) uint8) []uint8 {
	acc := make([]uint8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []AnyOption: AnyOption->uint16 */ func MapUint16ToAnyOptionArr(m []AnyOption, f func(AnyOption) uint16) []uint16 {
	acc := make([]uint16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []AnyOption: AnyOption->uint32 */ func MapUint32ToAnyOptionArr(m []AnyOption, f func(AnyOption) uint32) []uint32 {
	acc := make([]uint32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []AnyOption: AnyOption->uint64 */ func MapUint64ToAnyOptionArr(m []AnyOption, f func(AnyOption) uint64) []uint64 {
	acc := make([]uint64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []AnyOption: AnyOption->uintptr */ func MapUintptrToAnyOptionArr(m []AnyOption, f func(AnyOption) uintptr) []uintptr {
	acc := make([]uintptr, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []AnyOption: AnyOption->byte */ func MapByteToAnyOptionArr(m []AnyOption, f func(AnyOption) byte) []byte {
	acc := make([]byte, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []AnyOption: AnyOption->rune */ func MapRuneToAnyOptionArr(m []AnyOption, f func(AnyOption) rune) []rune {
	acc := make([]rune, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []AnyOption: AnyOption->float32 */ func MapFloat32ToAnyOptionArr(m []AnyOption, f func(AnyOption) float32) []float32 {
	acc := make([]float32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []AnyOption: AnyOption->float64 */ func MapFloat64ToAnyOptionArr(m []AnyOption, f func(AnyOption) float64) []float64 {
	acc := make([]float64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []AnyOption: AnyOption->complex64 */ func MapComplex64ToAnyOptionArr(m []AnyOption, f func(AnyOption) complex64) []complex64 {
	acc := make([]complex64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []AnyOption: AnyOption->complex128 */ func MapComplex128ToAnyOptionArr(m []AnyOption, f func(AnyOption) complex128) []complex128 {
	acc := make([]complex128, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []AnyOption: AnyOption->Any */ func MapAnyToAnyOptionArr(m []AnyOption, f func(AnyOption) Any) []Any {
	acc := make([]Any, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []AnyOption: AnyOption->BoolOption */ func MapBoolOptionToAnyOptionArr(m []AnyOption, f func(AnyOption) BoolOption) []BoolOption {
	acc := make([]BoolOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []AnyOption: AnyOption->StringOption */ func MapStringOptionToAnyOptionArr(m []AnyOption, f func(AnyOption) StringOption) []StringOption {
	acc := make([]StringOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []AnyOption: AnyOption->IntOption */ func MapIntOptionToAnyOptionArr(m []AnyOption, f func(AnyOption) IntOption) []IntOption {
	acc := make([]IntOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []AnyOption: AnyOption->Int8Option */ func MapInt8OptionToAnyOptionArr(m []AnyOption, f func(AnyOption) Int8Option) []Int8Option {
	acc := make([]Int8Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []AnyOption: AnyOption->Int16Option */ func MapInt16OptionToAnyOptionArr(m []AnyOption, f func(AnyOption) Int16Option) []Int16Option {
	acc := make([]Int16Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []AnyOption: AnyOption->Int32Option */ func MapInt32OptionToAnyOptionArr(m []AnyOption, f func(AnyOption) Int32Option) []Int32Option {
	acc := make([]Int32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []AnyOption: AnyOption->Int64Option */ func MapInt64OptionToAnyOptionArr(m []AnyOption, f func(AnyOption) Int64Option) []Int64Option {
	acc := make([]Int64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []AnyOption: AnyOption->UintOption */ func MapUintOptionToAnyOptionArr(m []AnyOption, f func(AnyOption) UintOption) []UintOption {
	acc := make([]UintOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []AnyOption: AnyOption->Uint8Option */ func MapUint8OptionToAnyOptionArr(m []AnyOption, f func(AnyOption) Uint8Option) []Uint8Option {
	acc := make([]Uint8Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []AnyOption: AnyOption->Uint16Option */ func MapUint16OptionToAnyOptionArr(m []AnyOption, f func(AnyOption) Uint16Option) []Uint16Option {
	acc := make([]Uint16Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []AnyOption: AnyOption->Uint32Option */ func MapUint32OptionToAnyOptionArr(m []AnyOption, f func(AnyOption) Uint32Option) []Uint32Option {
	acc := make([]Uint32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []AnyOption: AnyOption->Uint64Option */ func MapUint64OptionToAnyOptionArr(m []AnyOption, f func(AnyOption) Uint64Option) []Uint64Option {
	acc := make([]Uint64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []AnyOption: AnyOption->UintptrOption */ func MapUintptrOptionToAnyOptionArr(m []AnyOption, f func(AnyOption) UintptrOption) []UintptrOption {
	acc := make([]UintptrOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []AnyOption: AnyOption->ByteOption */ func MapByteOptionToAnyOptionArr(m []AnyOption, f func(AnyOption) ByteOption) []ByteOption {
	acc := make([]ByteOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []AnyOption: AnyOption->RuneOption */ func MapRuneOptionToAnyOptionArr(m []AnyOption, f func(AnyOption) RuneOption) []RuneOption {
	acc := make([]RuneOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []AnyOption: AnyOption->Float32Option */ func MapFloat32OptionToAnyOptionArr(m []AnyOption, f func(AnyOption) Float32Option) []Float32Option {
	acc := make([]Float32Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []AnyOption: AnyOption->Float64Option */ func MapFloat64OptionToAnyOptionArr(m []AnyOption, f func(AnyOption) Float64Option) []Float64Option {
	acc := make([]Float64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []AnyOption: AnyOption->Complex64Option */ func MapComplex64OptionToAnyOptionArr(m []AnyOption, f func(AnyOption) Complex64Option) []Complex64Option {
	acc := make([]Complex64Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []AnyOption: AnyOption->Complex128Option */ func MapComplex128OptionToAnyOptionArr(m []AnyOption, f func(AnyOption) Complex128Option) []Complex128Option {
	acc := make([]Complex128Option, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []AnyOption: AnyOption->AnyOption */ func MapAnyOptionToAnyOptionArr(m []AnyOption, f func(AnyOption) AnyOption) []AnyOption {
	acc := make([]AnyOption, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []AnyOption: AnyOption->[]bool */ func MapBoolArrToAnyOptionArr(m []AnyOption, f func(AnyOption) []bool) [][]bool {
	acc := make([][]bool, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []AnyOption: AnyOption->[]string */ func MapStringArrToAnyOptionArr(m []AnyOption, f func(AnyOption) []string) [][]string {
	acc := make([][]string, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []AnyOption: AnyOption->[]int */ func MapIntArrToAnyOptionArr(m []AnyOption, f func(AnyOption) []int) [][]int {
	acc := make([][]int, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []AnyOption: AnyOption->[]int8 */ func MapInt8ArrToAnyOptionArr(m []AnyOption, f func(AnyOption) []int8) [][]int8 {
	acc := make([][]int8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []AnyOption: AnyOption->[]int16 */ func MapInt16ArrToAnyOptionArr(m []AnyOption, f func(AnyOption) []int16) [][]int16 {
	acc := make([][]int16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []AnyOption: AnyOption->[]int32 */ func MapInt32ArrToAnyOptionArr(m []AnyOption, f func(AnyOption) []int32) [][]int32 {
	acc := make([][]int32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []AnyOption: AnyOption->[]int64 */ func MapInt64ArrToAnyOptionArr(m []AnyOption, f func(AnyOption) []int64) [][]int64 {
	acc := make([][]int64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []AnyOption: AnyOption->[]uint */ func MapUintArrToAnyOptionArr(m []AnyOption, f func(AnyOption) []uint) [][]uint {
	acc := make([][]uint, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []AnyOption: AnyOption->[]uint8 */ func MapUint8ArrToAnyOptionArr(m []AnyOption, f func(AnyOption) []uint8) [][]uint8 {
	acc := make([][]uint8, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []AnyOption: AnyOption->[]uint16 */ func MapUint16ArrToAnyOptionArr(m []AnyOption, f func(AnyOption) []uint16) [][]uint16 {
	acc := make([][]uint16, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []AnyOption: AnyOption->[]uint32 */ func MapUint32ArrToAnyOptionArr(m []AnyOption, f func(AnyOption) []uint32) [][]uint32 {
	acc := make([][]uint32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []AnyOption: AnyOption->[]uint64 */ func MapUint64ArrToAnyOptionArr(m []AnyOption, f func(AnyOption) []uint64) [][]uint64 {
	acc := make([][]uint64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []AnyOption: AnyOption->[]uintptr */ func MapUintptrArrToAnyOptionArr(m []AnyOption, f func(AnyOption) []uintptr) [][]uintptr {
	acc := make([][]uintptr, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []AnyOption: AnyOption->[]byte */ func MapByteArrToAnyOptionArr(m []AnyOption, f func(AnyOption) []byte) [][]byte {
	acc := make([][]byte, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []AnyOption: AnyOption->[]rune */ func MapRuneArrToAnyOptionArr(m []AnyOption, f func(AnyOption) []rune) [][]rune {
	acc := make([][]rune, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []AnyOption: AnyOption->[]float32 */ func MapFloat32ArrToAnyOptionArr(m []AnyOption, f func(AnyOption) []float32) [][]float32 {
	acc := make([][]float32, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []AnyOption: AnyOption->[]float64 */ func MapFloat64ArrToAnyOptionArr(m []AnyOption, f func(AnyOption) []float64) [][]float64 {
	acc := make([][]float64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []AnyOption: AnyOption->[]complex64 */ func MapComplex64ArrToAnyOptionArr(m []AnyOption, f func(AnyOption) []complex64) [][]complex64 {
	acc := make([][]complex64, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []AnyOption: AnyOption->[]complex128 */ func MapComplex128ArrToAnyOptionArr(m []AnyOption, f func(AnyOption) []complex128) [][]complex128 {
	acc := make([][]complex128, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []AnyOption: AnyOption->[]Any */ func MapAnyArrToAnyOptionArr(m []AnyOption, f func(AnyOption) []Any) [][]Any {
	acc := make([][]Any, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []AnyOption: AnyOption->BoolList */ func MapBoolListToAnyOptionArr(m []AnyOption, f func(AnyOption) BoolList) []BoolList {
	acc := make([]BoolList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []AnyOption: AnyOption->StringList */ func MapStringListToAnyOptionArr(m []AnyOption, f func(AnyOption) StringList) []StringList {
	acc := make([]StringList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []AnyOption: AnyOption->IntList */ func MapIntListToAnyOptionArr(m []AnyOption, f func(AnyOption) IntList) []IntList {
	acc := make([]IntList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []AnyOption: AnyOption->Int8List */ func MapInt8ListToAnyOptionArr(m []AnyOption, f func(AnyOption) Int8List) []Int8List {
	acc := make([]Int8List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []AnyOption: AnyOption->Int16List */ func MapInt16ListToAnyOptionArr(m []AnyOption, f func(AnyOption) Int16List) []Int16List {
	acc := make([]Int16List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []AnyOption: AnyOption->Int32List */ func MapInt32ListToAnyOptionArr(m []AnyOption, f func(AnyOption) Int32List) []Int32List {
	acc := make([]Int32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []AnyOption: AnyOption->Int64List */ func MapInt64ListToAnyOptionArr(m []AnyOption, f func(AnyOption) Int64List) []Int64List {
	acc := make([]Int64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []AnyOption: AnyOption->UintList */ func MapUintListToAnyOptionArr(m []AnyOption, f func(AnyOption) UintList) []UintList {
	acc := make([]UintList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []AnyOption: AnyOption->Uint8List */ func MapUint8ListToAnyOptionArr(m []AnyOption, f func(AnyOption) Uint8List) []Uint8List {
	acc := make([]Uint8List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []AnyOption: AnyOption->Uint16List */ func MapUint16ListToAnyOptionArr(m []AnyOption, f func(AnyOption) Uint16List) []Uint16List {
	acc := make([]Uint16List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []AnyOption: AnyOption->Uint32List */ func MapUint32ListToAnyOptionArr(m []AnyOption, f func(AnyOption) Uint32List) []Uint32List {
	acc := make([]Uint32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []AnyOption: AnyOption->Uint64List */ func MapUint64ListToAnyOptionArr(m []AnyOption, f func(AnyOption) Uint64List) []Uint64List {
	acc := make([]Uint64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []AnyOption: AnyOption->UintptrList */ func MapUintptrListToAnyOptionArr(m []AnyOption, f func(AnyOption) UintptrList) []UintptrList {
	acc := make([]UintptrList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []AnyOption: AnyOption->ByteList */ func MapByteListToAnyOptionArr(m []AnyOption, f func(AnyOption) ByteList) []ByteList {
	acc := make([]ByteList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []AnyOption: AnyOption->RuneList */ func MapRuneListToAnyOptionArr(m []AnyOption, f func(AnyOption) RuneList) []RuneList {
	acc := make([]RuneList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []AnyOption: AnyOption->Float32List */ func MapFloat32ListToAnyOptionArr(m []AnyOption, f func(AnyOption) Float32List) []Float32List {
	acc := make([]Float32List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []AnyOption: AnyOption->Float64List */ func MapFloat64ListToAnyOptionArr(m []AnyOption, f func(AnyOption) Float64List) []Float64List {
	acc := make([]Float64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []AnyOption: AnyOption->Complex64List */ func MapComplex64ListToAnyOptionArr(m []AnyOption, f func(AnyOption) Complex64List) []Complex64List {
	acc := make([]Complex64List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []AnyOption: AnyOption->Complex128List */ func MapComplex128ListToAnyOptionArr(m []AnyOption, f func(AnyOption) Complex128List) []Complex128List {
	acc := make([]Complex128List, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}

/* []AnyOption: AnyOption->AnyList */ func MapAnyListToAnyOptionArr(m []AnyOption, f func(AnyOption) AnyList) []AnyList {
	acc := make([]AnyList, len(m))
	for i, e := range m {
		acc[i] = f(e)
	}
	return acc
}
