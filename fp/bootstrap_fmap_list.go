// bootstrap_fmap_list.go
// DO NOT EDIT THIS FILE WAS GENERATED AUTOMATICALLY BY https://github.com/zx80live/gofp-bootstrap

package fp


/* BoolList: bool->bool */ func MapBoolToBoolList(m BoolList, f func(bool) bool) BoolList { acc := NilBoolList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolList: bool->string */ func MapStringToBoolList(m BoolList, f func(bool) string) StringList { acc := NilStringList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolList: bool->int */ func MapIntToBoolList(m BoolList, f func(bool) int) IntList { acc := NilIntList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolList: bool->int8 */ func MapInt8ToBoolList(m BoolList, f func(bool) int8) Int8List { acc := NilInt8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolList: bool->int16 */ func MapInt16ToBoolList(m BoolList, f func(bool) int16) Int16List { acc := NilInt16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolList: bool->int32 */ func MapInt32ToBoolList(m BoolList, f func(bool) int32) Int32List { acc := NilInt32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolList: bool->int64 */ func MapInt64ToBoolList(m BoolList, f func(bool) int64) Int64List { acc := NilInt64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolList: bool->uint */ func MapUintToBoolList(m BoolList, f func(bool) uint) UintList { acc := NilUintList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolList: bool->uint8 */ func MapUint8ToBoolList(m BoolList, f func(bool) uint8) Uint8List { acc := NilUint8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolList: bool->uint16 */ func MapUint16ToBoolList(m BoolList, f func(bool) uint16) Uint16List { acc := NilUint16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolList: bool->uint32 */ func MapUint32ToBoolList(m BoolList, f func(bool) uint32) Uint32List { acc := NilUint32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolList: bool->uint64 */ func MapUint64ToBoolList(m BoolList, f func(bool) uint64) Uint64List { acc := NilUint64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolList: bool->uintptr */ func MapUintptrToBoolList(m BoolList, f func(bool) uintptr) UintptrList { acc := NilUintptrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolList: bool->byte */ func MapByteToBoolList(m BoolList, f func(bool) byte) ByteList { acc := NilByteList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolList: bool->rune */ func MapRuneToBoolList(m BoolList, f func(bool) rune) RuneList { acc := NilRuneList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolList: bool->float32 */ func MapFloat32ToBoolList(m BoolList, f func(bool) float32) Float32List { acc := NilFloat32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolList: bool->float64 */ func MapFloat64ToBoolList(m BoolList, f func(bool) float64) Float64List { acc := NilFloat64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolList: bool->complex64 */ func MapComplex64ToBoolList(m BoolList, f func(bool) complex64) Complex64List { acc := NilComplex64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolList: bool->complex128 */ func MapComplex128ToBoolList(m BoolList, f func(bool) complex128) Complex128List { acc := NilComplex128List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolList: bool->Any */ func MapAnyToBoolList(m BoolList, f func(bool) Any) AnyList { acc := NilAnyList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolList: bool->BoolOption */ func MapBoolOptionToBoolList(m BoolList, f func(bool) BoolOption) BoolOptionList { acc := NilBoolOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolList: bool->StringOption */ func MapStringOptionToBoolList(m BoolList, f func(bool) StringOption) StringOptionList { acc := NilStringOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolList: bool->IntOption */ func MapIntOptionToBoolList(m BoolList, f func(bool) IntOption) IntOptionList { acc := NilIntOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolList: bool->Int8Option */ func MapInt8OptionToBoolList(m BoolList, f func(bool) Int8Option) Int8OptionList { acc := NilInt8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolList: bool->Int16Option */ func MapInt16OptionToBoolList(m BoolList, f func(bool) Int16Option) Int16OptionList { acc := NilInt16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolList: bool->Int32Option */ func MapInt32OptionToBoolList(m BoolList, f func(bool) Int32Option) Int32OptionList { acc := NilInt32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolList: bool->Int64Option */ func MapInt64OptionToBoolList(m BoolList, f func(bool) Int64Option) Int64OptionList { acc := NilInt64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolList: bool->UintOption */ func MapUintOptionToBoolList(m BoolList, f func(bool) UintOption) UintOptionList { acc := NilUintOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolList: bool->Uint8Option */ func MapUint8OptionToBoolList(m BoolList, f func(bool) Uint8Option) Uint8OptionList { acc := NilUint8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolList: bool->Uint16Option */ func MapUint16OptionToBoolList(m BoolList, f func(bool) Uint16Option) Uint16OptionList { acc := NilUint16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolList: bool->Uint32Option */ func MapUint32OptionToBoolList(m BoolList, f func(bool) Uint32Option) Uint32OptionList { acc := NilUint32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolList: bool->Uint64Option */ func MapUint64OptionToBoolList(m BoolList, f func(bool) Uint64Option) Uint64OptionList { acc := NilUint64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolList: bool->UintptrOption */ func MapUintptrOptionToBoolList(m BoolList, f func(bool) UintptrOption) UintptrOptionList { acc := NilUintptrOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolList: bool->ByteOption */ func MapByteOptionToBoolList(m BoolList, f func(bool) ByteOption) ByteOptionList { acc := NilByteOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolList: bool->RuneOption */ func MapRuneOptionToBoolList(m BoolList, f func(bool) RuneOption) RuneOptionList { acc := NilRuneOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolList: bool->Float32Option */ func MapFloat32OptionToBoolList(m BoolList, f func(bool) Float32Option) Float32OptionList { acc := NilFloat32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolList: bool->Float64Option */ func MapFloat64OptionToBoolList(m BoolList, f func(bool) Float64Option) Float64OptionList { acc := NilFloat64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolList: bool->Complex64Option */ func MapComplex64OptionToBoolList(m BoolList, f func(bool) Complex64Option) Complex64OptionList { acc := NilComplex64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolList: bool->Complex128Option */ func MapComplex128OptionToBoolList(m BoolList, f func(bool) Complex128Option) Complex128OptionList { acc := NilComplex128OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolList: bool->AnyOption */ func MapAnyOptionToBoolList(m BoolList, f func(bool) AnyOption) AnyOptionList { acc := NilAnyOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolList: bool->[]bool */ func MapBoolArrToBoolList(m BoolList, f func(bool) []bool) BoolArrList { acc := NilBoolArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolList: bool->[]string */ func MapStringArrToBoolList(m BoolList, f func(bool) []string) StringArrList { acc := NilStringArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolList: bool->[]int */ func MapIntArrToBoolList(m BoolList, f func(bool) []int) IntArrList { acc := NilIntArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolList: bool->[]int8 */ func MapInt8ArrToBoolList(m BoolList, f func(bool) []int8) Int8ArrList { acc := NilInt8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolList: bool->[]int16 */ func MapInt16ArrToBoolList(m BoolList, f func(bool) []int16) Int16ArrList { acc := NilInt16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolList: bool->[]int32 */ func MapInt32ArrToBoolList(m BoolList, f func(bool) []int32) Int32ArrList { acc := NilInt32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolList: bool->[]int64 */ func MapInt64ArrToBoolList(m BoolList, f func(bool) []int64) Int64ArrList { acc := NilInt64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolList: bool->[]uint */ func MapUintArrToBoolList(m BoolList, f func(bool) []uint) UintArrList { acc := NilUintArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolList: bool->[]uint8 */ func MapUint8ArrToBoolList(m BoolList, f func(bool) []uint8) Uint8ArrList { acc := NilUint8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolList: bool->[]uint16 */ func MapUint16ArrToBoolList(m BoolList, f func(bool) []uint16) Uint16ArrList { acc := NilUint16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolList: bool->[]uint32 */ func MapUint32ArrToBoolList(m BoolList, f func(bool) []uint32) Uint32ArrList { acc := NilUint32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolList: bool->[]uint64 */ func MapUint64ArrToBoolList(m BoolList, f func(bool) []uint64) Uint64ArrList { acc := NilUint64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolList: bool->[]uintptr */ func MapUintptrArrToBoolList(m BoolList, f func(bool) []uintptr) UintptrArrList { acc := NilUintptrArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolList: bool->[]byte */ func MapByteArrToBoolList(m BoolList, f func(bool) []byte) ByteArrList { acc := NilByteArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolList: bool->[]rune */ func MapRuneArrToBoolList(m BoolList, f func(bool) []rune) RuneArrList { acc := NilRuneArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolList: bool->[]float32 */ func MapFloat32ArrToBoolList(m BoolList, f func(bool) []float32) Float32ArrList { acc := NilFloat32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolList: bool->[]float64 */ func MapFloat64ArrToBoolList(m BoolList, f func(bool) []float64) Float64ArrList { acc := NilFloat64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolList: bool->[]complex64 */ func MapComplex64ArrToBoolList(m BoolList, f func(bool) []complex64) Complex64ArrList { acc := NilComplex64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolList: bool->[]complex128 */ func MapComplex128ArrToBoolList(m BoolList, f func(bool) []complex128) Complex128ArrList { acc := NilComplex128ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolList: bool->[]Any */ func MapAnyArrToBoolList(m BoolList, f func(bool) []Any) AnyArrList { acc := NilAnyArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolList: bool->BoolList */ func MapBoolListToBoolList(m BoolList, f func(bool) BoolList) BoolListList { acc := NilBoolListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolList: bool->StringList */ func MapStringListToBoolList(m BoolList, f func(bool) StringList) StringListList { acc := NilStringListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolList: bool->IntList */ func MapIntListToBoolList(m BoolList, f func(bool) IntList) IntListList { acc := NilIntListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolList: bool->Int8List */ func MapInt8ListToBoolList(m BoolList, f func(bool) Int8List) Int8ListList { acc := NilInt8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolList: bool->Int16List */ func MapInt16ListToBoolList(m BoolList, f func(bool) Int16List) Int16ListList { acc := NilInt16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolList: bool->Int32List */ func MapInt32ListToBoolList(m BoolList, f func(bool) Int32List) Int32ListList { acc := NilInt32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolList: bool->Int64List */ func MapInt64ListToBoolList(m BoolList, f func(bool) Int64List) Int64ListList { acc := NilInt64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolList: bool->UintList */ func MapUintListToBoolList(m BoolList, f func(bool) UintList) UintListList { acc := NilUintListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolList: bool->Uint8List */ func MapUint8ListToBoolList(m BoolList, f func(bool) Uint8List) Uint8ListList { acc := NilUint8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolList: bool->Uint16List */ func MapUint16ListToBoolList(m BoolList, f func(bool) Uint16List) Uint16ListList { acc := NilUint16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolList: bool->Uint32List */ func MapUint32ListToBoolList(m BoolList, f func(bool) Uint32List) Uint32ListList { acc := NilUint32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolList: bool->Uint64List */ func MapUint64ListToBoolList(m BoolList, f func(bool) Uint64List) Uint64ListList { acc := NilUint64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolList: bool->UintptrList */ func MapUintptrListToBoolList(m BoolList, f func(bool) UintptrList) UintptrListList { acc := NilUintptrListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolList: bool->ByteList */ func MapByteListToBoolList(m BoolList, f func(bool) ByteList) ByteListList { acc := NilByteListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolList: bool->RuneList */ func MapRuneListToBoolList(m BoolList, f func(bool) RuneList) RuneListList { acc := NilRuneListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolList: bool->Float32List */ func MapFloat32ListToBoolList(m BoolList, f func(bool) Float32List) Float32ListList { acc := NilFloat32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolList: bool->Float64List */ func MapFloat64ListToBoolList(m BoolList, f func(bool) Float64List) Float64ListList { acc := NilFloat64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolList: bool->Complex64List */ func MapComplex64ListToBoolList(m BoolList, f func(bool) Complex64List) Complex64ListList { acc := NilComplex64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolList: bool->Complex128List */ func MapComplex128ListToBoolList(m BoolList, f func(bool) Complex128List) Complex128ListList { acc := NilComplex128ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolList: bool->AnyList */ func MapAnyListToBoolList(m BoolList, f func(bool) AnyList) AnyListList { acc := NilAnyListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringList: string->bool */ func MapBoolToStringList(m StringList, f func(string) bool) BoolList { acc := NilBoolList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringList: string->string */ func MapStringToStringList(m StringList, f func(string) string) StringList { acc := NilStringList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringList: string->int */ func MapIntToStringList(m StringList, f func(string) int) IntList { acc := NilIntList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringList: string->int8 */ func MapInt8ToStringList(m StringList, f func(string) int8) Int8List { acc := NilInt8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringList: string->int16 */ func MapInt16ToStringList(m StringList, f func(string) int16) Int16List { acc := NilInt16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringList: string->int32 */ func MapInt32ToStringList(m StringList, f func(string) int32) Int32List { acc := NilInt32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringList: string->int64 */ func MapInt64ToStringList(m StringList, f func(string) int64) Int64List { acc := NilInt64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringList: string->uint */ func MapUintToStringList(m StringList, f func(string) uint) UintList { acc := NilUintList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringList: string->uint8 */ func MapUint8ToStringList(m StringList, f func(string) uint8) Uint8List { acc := NilUint8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringList: string->uint16 */ func MapUint16ToStringList(m StringList, f func(string) uint16) Uint16List { acc := NilUint16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringList: string->uint32 */ func MapUint32ToStringList(m StringList, f func(string) uint32) Uint32List { acc := NilUint32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringList: string->uint64 */ func MapUint64ToStringList(m StringList, f func(string) uint64) Uint64List { acc := NilUint64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringList: string->uintptr */ func MapUintptrToStringList(m StringList, f func(string) uintptr) UintptrList { acc := NilUintptrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringList: string->byte */ func MapByteToStringList(m StringList, f func(string) byte) ByteList { acc := NilByteList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringList: string->rune */ func MapRuneToStringList(m StringList, f func(string) rune) RuneList { acc := NilRuneList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringList: string->float32 */ func MapFloat32ToStringList(m StringList, f func(string) float32) Float32List { acc := NilFloat32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringList: string->float64 */ func MapFloat64ToStringList(m StringList, f func(string) float64) Float64List { acc := NilFloat64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringList: string->complex64 */ func MapComplex64ToStringList(m StringList, f func(string) complex64) Complex64List { acc := NilComplex64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringList: string->complex128 */ func MapComplex128ToStringList(m StringList, f func(string) complex128) Complex128List { acc := NilComplex128List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringList: string->Any */ func MapAnyToStringList(m StringList, f func(string) Any) AnyList { acc := NilAnyList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringList: string->BoolOption */ func MapBoolOptionToStringList(m StringList, f func(string) BoolOption) BoolOptionList { acc := NilBoolOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringList: string->StringOption */ func MapStringOptionToStringList(m StringList, f func(string) StringOption) StringOptionList { acc := NilStringOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringList: string->IntOption */ func MapIntOptionToStringList(m StringList, f func(string) IntOption) IntOptionList { acc := NilIntOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringList: string->Int8Option */ func MapInt8OptionToStringList(m StringList, f func(string) Int8Option) Int8OptionList { acc := NilInt8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringList: string->Int16Option */ func MapInt16OptionToStringList(m StringList, f func(string) Int16Option) Int16OptionList { acc := NilInt16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringList: string->Int32Option */ func MapInt32OptionToStringList(m StringList, f func(string) Int32Option) Int32OptionList { acc := NilInt32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringList: string->Int64Option */ func MapInt64OptionToStringList(m StringList, f func(string) Int64Option) Int64OptionList { acc := NilInt64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringList: string->UintOption */ func MapUintOptionToStringList(m StringList, f func(string) UintOption) UintOptionList { acc := NilUintOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringList: string->Uint8Option */ func MapUint8OptionToStringList(m StringList, f func(string) Uint8Option) Uint8OptionList { acc := NilUint8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringList: string->Uint16Option */ func MapUint16OptionToStringList(m StringList, f func(string) Uint16Option) Uint16OptionList { acc := NilUint16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringList: string->Uint32Option */ func MapUint32OptionToStringList(m StringList, f func(string) Uint32Option) Uint32OptionList { acc := NilUint32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringList: string->Uint64Option */ func MapUint64OptionToStringList(m StringList, f func(string) Uint64Option) Uint64OptionList { acc := NilUint64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringList: string->UintptrOption */ func MapUintptrOptionToStringList(m StringList, f func(string) UintptrOption) UintptrOptionList { acc := NilUintptrOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringList: string->ByteOption */ func MapByteOptionToStringList(m StringList, f func(string) ByteOption) ByteOptionList { acc := NilByteOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringList: string->RuneOption */ func MapRuneOptionToStringList(m StringList, f func(string) RuneOption) RuneOptionList { acc := NilRuneOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringList: string->Float32Option */ func MapFloat32OptionToStringList(m StringList, f func(string) Float32Option) Float32OptionList { acc := NilFloat32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringList: string->Float64Option */ func MapFloat64OptionToStringList(m StringList, f func(string) Float64Option) Float64OptionList { acc := NilFloat64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringList: string->Complex64Option */ func MapComplex64OptionToStringList(m StringList, f func(string) Complex64Option) Complex64OptionList { acc := NilComplex64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringList: string->Complex128Option */ func MapComplex128OptionToStringList(m StringList, f func(string) Complex128Option) Complex128OptionList { acc := NilComplex128OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringList: string->AnyOption */ func MapAnyOptionToStringList(m StringList, f func(string) AnyOption) AnyOptionList { acc := NilAnyOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringList: string->[]bool */ func MapBoolArrToStringList(m StringList, f func(string) []bool) BoolArrList { acc := NilBoolArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringList: string->[]string */ func MapStringArrToStringList(m StringList, f func(string) []string) StringArrList { acc := NilStringArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringList: string->[]int */ func MapIntArrToStringList(m StringList, f func(string) []int) IntArrList { acc := NilIntArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringList: string->[]int8 */ func MapInt8ArrToStringList(m StringList, f func(string) []int8) Int8ArrList { acc := NilInt8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringList: string->[]int16 */ func MapInt16ArrToStringList(m StringList, f func(string) []int16) Int16ArrList { acc := NilInt16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringList: string->[]int32 */ func MapInt32ArrToStringList(m StringList, f func(string) []int32) Int32ArrList { acc := NilInt32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringList: string->[]int64 */ func MapInt64ArrToStringList(m StringList, f func(string) []int64) Int64ArrList { acc := NilInt64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringList: string->[]uint */ func MapUintArrToStringList(m StringList, f func(string) []uint) UintArrList { acc := NilUintArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringList: string->[]uint8 */ func MapUint8ArrToStringList(m StringList, f func(string) []uint8) Uint8ArrList { acc := NilUint8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringList: string->[]uint16 */ func MapUint16ArrToStringList(m StringList, f func(string) []uint16) Uint16ArrList { acc := NilUint16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringList: string->[]uint32 */ func MapUint32ArrToStringList(m StringList, f func(string) []uint32) Uint32ArrList { acc := NilUint32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringList: string->[]uint64 */ func MapUint64ArrToStringList(m StringList, f func(string) []uint64) Uint64ArrList { acc := NilUint64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringList: string->[]uintptr */ func MapUintptrArrToStringList(m StringList, f func(string) []uintptr) UintptrArrList { acc := NilUintptrArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringList: string->[]byte */ func MapByteArrToStringList(m StringList, f func(string) []byte) ByteArrList { acc := NilByteArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringList: string->[]rune */ func MapRuneArrToStringList(m StringList, f func(string) []rune) RuneArrList { acc := NilRuneArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringList: string->[]float32 */ func MapFloat32ArrToStringList(m StringList, f func(string) []float32) Float32ArrList { acc := NilFloat32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringList: string->[]float64 */ func MapFloat64ArrToStringList(m StringList, f func(string) []float64) Float64ArrList { acc := NilFloat64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringList: string->[]complex64 */ func MapComplex64ArrToStringList(m StringList, f func(string) []complex64) Complex64ArrList { acc := NilComplex64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringList: string->[]complex128 */ func MapComplex128ArrToStringList(m StringList, f func(string) []complex128) Complex128ArrList { acc := NilComplex128ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringList: string->[]Any */ func MapAnyArrToStringList(m StringList, f func(string) []Any) AnyArrList { acc := NilAnyArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringList: string->BoolList */ func MapBoolListToStringList(m StringList, f func(string) BoolList) BoolListList { acc := NilBoolListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringList: string->StringList */ func MapStringListToStringList(m StringList, f func(string) StringList) StringListList { acc := NilStringListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringList: string->IntList */ func MapIntListToStringList(m StringList, f func(string) IntList) IntListList { acc := NilIntListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringList: string->Int8List */ func MapInt8ListToStringList(m StringList, f func(string) Int8List) Int8ListList { acc := NilInt8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringList: string->Int16List */ func MapInt16ListToStringList(m StringList, f func(string) Int16List) Int16ListList { acc := NilInt16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringList: string->Int32List */ func MapInt32ListToStringList(m StringList, f func(string) Int32List) Int32ListList { acc := NilInt32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringList: string->Int64List */ func MapInt64ListToStringList(m StringList, f func(string) Int64List) Int64ListList { acc := NilInt64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringList: string->UintList */ func MapUintListToStringList(m StringList, f func(string) UintList) UintListList { acc := NilUintListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringList: string->Uint8List */ func MapUint8ListToStringList(m StringList, f func(string) Uint8List) Uint8ListList { acc := NilUint8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringList: string->Uint16List */ func MapUint16ListToStringList(m StringList, f func(string) Uint16List) Uint16ListList { acc := NilUint16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringList: string->Uint32List */ func MapUint32ListToStringList(m StringList, f func(string) Uint32List) Uint32ListList { acc := NilUint32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringList: string->Uint64List */ func MapUint64ListToStringList(m StringList, f func(string) Uint64List) Uint64ListList { acc := NilUint64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringList: string->UintptrList */ func MapUintptrListToStringList(m StringList, f func(string) UintptrList) UintptrListList { acc := NilUintptrListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringList: string->ByteList */ func MapByteListToStringList(m StringList, f func(string) ByteList) ByteListList { acc := NilByteListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringList: string->RuneList */ func MapRuneListToStringList(m StringList, f func(string) RuneList) RuneListList { acc := NilRuneListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringList: string->Float32List */ func MapFloat32ListToStringList(m StringList, f func(string) Float32List) Float32ListList { acc := NilFloat32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringList: string->Float64List */ func MapFloat64ListToStringList(m StringList, f func(string) Float64List) Float64ListList { acc := NilFloat64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringList: string->Complex64List */ func MapComplex64ListToStringList(m StringList, f func(string) Complex64List) Complex64ListList { acc := NilComplex64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringList: string->Complex128List */ func MapComplex128ListToStringList(m StringList, f func(string) Complex128List) Complex128ListList { acc := NilComplex128ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringList: string->AnyList */ func MapAnyListToStringList(m StringList, f func(string) AnyList) AnyListList { acc := NilAnyListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntList: int->bool */ func MapBoolToIntList(m IntList, f func(int) bool) BoolList { acc := NilBoolList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntList: int->string */ func MapStringToIntList(m IntList, f func(int) string) StringList { acc := NilStringList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntList: int->int */ func MapIntToIntList(m IntList, f func(int) int) IntList { acc := NilIntList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntList: int->int8 */ func MapInt8ToIntList(m IntList, f func(int) int8) Int8List { acc := NilInt8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntList: int->int16 */ func MapInt16ToIntList(m IntList, f func(int) int16) Int16List { acc := NilInt16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntList: int->int32 */ func MapInt32ToIntList(m IntList, f func(int) int32) Int32List { acc := NilInt32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntList: int->int64 */ func MapInt64ToIntList(m IntList, f func(int) int64) Int64List { acc := NilInt64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntList: int->uint */ func MapUintToIntList(m IntList, f func(int) uint) UintList { acc := NilUintList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntList: int->uint8 */ func MapUint8ToIntList(m IntList, f func(int) uint8) Uint8List { acc := NilUint8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntList: int->uint16 */ func MapUint16ToIntList(m IntList, f func(int) uint16) Uint16List { acc := NilUint16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntList: int->uint32 */ func MapUint32ToIntList(m IntList, f func(int) uint32) Uint32List { acc := NilUint32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntList: int->uint64 */ func MapUint64ToIntList(m IntList, f func(int) uint64) Uint64List { acc := NilUint64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntList: int->uintptr */ func MapUintptrToIntList(m IntList, f func(int) uintptr) UintptrList { acc := NilUintptrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntList: int->byte */ func MapByteToIntList(m IntList, f func(int) byte) ByteList { acc := NilByteList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntList: int->rune */ func MapRuneToIntList(m IntList, f func(int) rune) RuneList { acc := NilRuneList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntList: int->float32 */ func MapFloat32ToIntList(m IntList, f func(int) float32) Float32List { acc := NilFloat32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntList: int->float64 */ func MapFloat64ToIntList(m IntList, f func(int) float64) Float64List { acc := NilFloat64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntList: int->complex64 */ func MapComplex64ToIntList(m IntList, f func(int) complex64) Complex64List { acc := NilComplex64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntList: int->complex128 */ func MapComplex128ToIntList(m IntList, f func(int) complex128) Complex128List { acc := NilComplex128List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntList: int->Any */ func MapAnyToIntList(m IntList, f func(int) Any) AnyList { acc := NilAnyList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntList: int->BoolOption */ func MapBoolOptionToIntList(m IntList, f func(int) BoolOption) BoolOptionList { acc := NilBoolOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntList: int->StringOption */ func MapStringOptionToIntList(m IntList, f func(int) StringOption) StringOptionList { acc := NilStringOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntList: int->IntOption */ func MapIntOptionToIntList(m IntList, f func(int) IntOption) IntOptionList { acc := NilIntOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntList: int->Int8Option */ func MapInt8OptionToIntList(m IntList, f func(int) Int8Option) Int8OptionList { acc := NilInt8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntList: int->Int16Option */ func MapInt16OptionToIntList(m IntList, f func(int) Int16Option) Int16OptionList { acc := NilInt16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntList: int->Int32Option */ func MapInt32OptionToIntList(m IntList, f func(int) Int32Option) Int32OptionList { acc := NilInt32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntList: int->Int64Option */ func MapInt64OptionToIntList(m IntList, f func(int) Int64Option) Int64OptionList { acc := NilInt64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntList: int->UintOption */ func MapUintOptionToIntList(m IntList, f func(int) UintOption) UintOptionList { acc := NilUintOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntList: int->Uint8Option */ func MapUint8OptionToIntList(m IntList, f func(int) Uint8Option) Uint8OptionList { acc := NilUint8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntList: int->Uint16Option */ func MapUint16OptionToIntList(m IntList, f func(int) Uint16Option) Uint16OptionList { acc := NilUint16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntList: int->Uint32Option */ func MapUint32OptionToIntList(m IntList, f func(int) Uint32Option) Uint32OptionList { acc := NilUint32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntList: int->Uint64Option */ func MapUint64OptionToIntList(m IntList, f func(int) Uint64Option) Uint64OptionList { acc := NilUint64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntList: int->UintptrOption */ func MapUintptrOptionToIntList(m IntList, f func(int) UintptrOption) UintptrOptionList { acc := NilUintptrOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntList: int->ByteOption */ func MapByteOptionToIntList(m IntList, f func(int) ByteOption) ByteOptionList { acc := NilByteOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntList: int->RuneOption */ func MapRuneOptionToIntList(m IntList, f func(int) RuneOption) RuneOptionList { acc := NilRuneOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntList: int->Float32Option */ func MapFloat32OptionToIntList(m IntList, f func(int) Float32Option) Float32OptionList { acc := NilFloat32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntList: int->Float64Option */ func MapFloat64OptionToIntList(m IntList, f func(int) Float64Option) Float64OptionList { acc := NilFloat64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntList: int->Complex64Option */ func MapComplex64OptionToIntList(m IntList, f func(int) Complex64Option) Complex64OptionList { acc := NilComplex64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntList: int->Complex128Option */ func MapComplex128OptionToIntList(m IntList, f func(int) Complex128Option) Complex128OptionList { acc := NilComplex128OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntList: int->AnyOption */ func MapAnyOptionToIntList(m IntList, f func(int) AnyOption) AnyOptionList { acc := NilAnyOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntList: int->[]bool */ func MapBoolArrToIntList(m IntList, f func(int) []bool) BoolArrList { acc := NilBoolArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntList: int->[]string */ func MapStringArrToIntList(m IntList, f func(int) []string) StringArrList { acc := NilStringArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntList: int->[]int */ func MapIntArrToIntList(m IntList, f func(int) []int) IntArrList { acc := NilIntArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntList: int->[]int8 */ func MapInt8ArrToIntList(m IntList, f func(int) []int8) Int8ArrList { acc := NilInt8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntList: int->[]int16 */ func MapInt16ArrToIntList(m IntList, f func(int) []int16) Int16ArrList { acc := NilInt16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntList: int->[]int32 */ func MapInt32ArrToIntList(m IntList, f func(int) []int32) Int32ArrList { acc := NilInt32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntList: int->[]int64 */ func MapInt64ArrToIntList(m IntList, f func(int) []int64) Int64ArrList { acc := NilInt64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntList: int->[]uint */ func MapUintArrToIntList(m IntList, f func(int) []uint) UintArrList { acc := NilUintArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntList: int->[]uint8 */ func MapUint8ArrToIntList(m IntList, f func(int) []uint8) Uint8ArrList { acc := NilUint8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntList: int->[]uint16 */ func MapUint16ArrToIntList(m IntList, f func(int) []uint16) Uint16ArrList { acc := NilUint16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntList: int->[]uint32 */ func MapUint32ArrToIntList(m IntList, f func(int) []uint32) Uint32ArrList { acc := NilUint32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntList: int->[]uint64 */ func MapUint64ArrToIntList(m IntList, f func(int) []uint64) Uint64ArrList { acc := NilUint64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntList: int->[]uintptr */ func MapUintptrArrToIntList(m IntList, f func(int) []uintptr) UintptrArrList { acc := NilUintptrArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntList: int->[]byte */ func MapByteArrToIntList(m IntList, f func(int) []byte) ByteArrList { acc := NilByteArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntList: int->[]rune */ func MapRuneArrToIntList(m IntList, f func(int) []rune) RuneArrList { acc := NilRuneArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntList: int->[]float32 */ func MapFloat32ArrToIntList(m IntList, f func(int) []float32) Float32ArrList { acc := NilFloat32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntList: int->[]float64 */ func MapFloat64ArrToIntList(m IntList, f func(int) []float64) Float64ArrList { acc := NilFloat64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntList: int->[]complex64 */ func MapComplex64ArrToIntList(m IntList, f func(int) []complex64) Complex64ArrList { acc := NilComplex64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntList: int->[]complex128 */ func MapComplex128ArrToIntList(m IntList, f func(int) []complex128) Complex128ArrList { acc := NilComplex128ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntList: int->[]Any */ func MapAnyArrToIntList(m IntList, f func(int) []Any) AnyArrList { acc := NilAnyArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntList: int->BoolList */ func MapBoolListToIntList(m IntList, f func(int) BoolList) BoolListList { acc := NilBoolListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntList: int->StringList */ func MapStringListToIntList(m IntList, f func(int) StringList) StringListList { acc := NilStringListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntList: int->IntList */ func MapIntListToIntList(m IntList, f func(int) IntList) IntListList { acc := NilIntListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntList: int->Int8List */ func MapInt8ListToIntList(m IntList, f func(int) Int8List) Int8ListList { acc := NilInt8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntList: int->Int16List */ func MapInt16ListToIntList(m IntList, f func(int) Int16List) Int16ListList { acc := NilInt16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntList: int->Int32List */ func MapInt32ListToIntList(m IntList, f func(int) Int32List) Int32ListList { acc := NilInt32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntList: int->Int64List */ func MapInt64ListToIntList(m IntList, f func(int) Int64List) Int64ListList { acc := NilInt64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntList: int->UintList */ func MapUintListToIntList(m IntList, f func(int) UintList) UintListList { acc := NilUintListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntList: int->Uint8List */ func MapUint8ListToIntList(m IntList, f func(int) Uint8List) Uint8ListList { acc := NilUint8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntList: int->Uint16List */ func MapUint16ListToIntList(m IntList, f func(int) Uint16List) Uint16ListList { acc := NilUint16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntList: int->Uint32List */ func MapUint32ListToIntList(m IntList, f func(int) Uint32List) Uint32ListList { acc := NilUint32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntList: int->Uint64List */ func MapUint64ListToIntList(m IntList, f func(int) Uint64List) Uint64ListList { acc := NilUint64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntList: int->UintptrList */ func MapUintptrListToIntList(m IntList, f func(int) UintptrList) UintptrListList { acc := NilUintptrListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntList: int->ByteList */ func MapByteListToIntList(m IntList, f func(int) ByteList) ByteListList { acc := NilByteListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntList: int->RuneList */ func MapRuneListToIntList(m IntList, f func(int) RuneList) RuneListList { acc := NilRuneListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntList: int->Float32List */ func MapFloat32ListToIntList(m IntList, f func(int) Float32List) Float32ListList { acc := NilFloat32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntList: int->Float64List */ func MapFloat64ListToIntList(m IntList, f func(int) Float64List) Float64ListList { acc := NilFloat64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntList: int->Complex64List */ func MapComplex64ListToIntList(m IntList, f func(int) Complex64List) Complex64ListList { acc := NilComplex64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntList: int->Complex128List */ func MapComplex128ListToIntList(m IntList, f func(int) Complex128List) Complex128ListList { acc := NilComplex128ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntList: int->AnyList */ func MapAnyListToIntList(m IntList, f func(int) AnyList) AnyListList { acc := NilAnyListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8List: int8->bool */ func MapBoolToInt8List(m Int8List, f func(int8) bool) BoolList { acc := NilBoolList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8List: int8->string */ func MapStringToInt8List(m Int8List, f func(int8) string) StringList { acc := NilStringList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8List: int8->int */ func MapIntToInt8List(m Int8List, f func(int8) int) IntList { acc := NilIntList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8List: int8->int8 */ func MapInt8ToInt8List(m Int8List, f func(int8) int8) Int8List { acc := NilInt8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8List: int8->int16 */ func MapInt16ToInt8List(m Int8List, f func(int8) int16) Int16List { acc := NilInt16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8List: int8->int32 */ func MapInt32ToInt8List(m Int8List, f func(int8) int32) Int32List { acc := NilInt32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8List: int8->int64 */ func MapInt64ToInt8List(m Int8List, f func(int8) int64) Int64List { acc := NilInt64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8List: int8->uint */ func MapUintToInt8List(m Int8List, f func(int8) uint) UintList { acc := NilUintList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8List: int8->uint8 */ func MapUint8ToInt8List(m Int8List, f func(int8) uint8) Uint8List { acc := NilUint8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8List: int8->uint16 */ func MapUint16ToInt8List(m Int8List, f func(int8) uint16) Uint16List { acc := NilUint16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8List: int8->uint32 */ func MapUint32ToInt8List(m Int8List, f func(int8) uint32) Uint32List { acc := NilUint32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8List: int8->uint64 */ func MapUint64ToInt8List(m Int8List, f func(int8) uint64) Uint64List { acc := NilUint64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8List: int8->uintptr */ func MapUintptrToInt8List(m Int8List, f func(int8) uintptr) UintptrList { acc := NilUintptrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8List: int8->byte */ func MapByteToInt8List(m Int8List, f func(int8) byte) ByteList { acc := NilByteList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8List: int8->rune */ func MapRuneToInt8List(m Int8List, f func(int8) rune) RuneList { acc := NilRuneList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8List: int8->float32 */ func MapFloat32ToInt8List(m Int8List, f func(int8) float32) Float32List { acc := NilFloat32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8List: int8->float64 */ func MapFloat64ToInt8List(m Int8List, f func(int8) float64) Float64List { acc := NilFloat64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8List: int8->complex64 */ func MapComplex64ToInt8List(m Int8List, f func(int8) complex64) Complex64List { acc := NilComplex64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8List: int8->complex128 */ func MapComplex128ToInt8List(m Int8List, f func(int8) complex128) Complex128List { acc := NilComplex128List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8List: int8->Any */ func MapAnyToInt8List(m Int8List, f func(int8) Any) AnyList { acc := NilAnyList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8List: int8->BoolOption */ func MapBoolOptionToInt8List(m Int8List, f func(int8) BoolOption) BoolOptionList { acc := NilBoolOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8List: int8->StringOption */ func MapStringOptionToInt8List(m Int8List, f func(int8) StringOption) StringOptionList { acc := NilStringOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8List: int8->IntOption */ func MapIntOptionToInt8List(m Int8List, f func(int8) IntOption) IntOptionList { acc := NilIntOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8List: int8->Int8Option */ func MapInt8OptionToInt8List(m Int8List, f func(int8) Int8Option) Int8OptionList { acc := NilInt8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8List: int8->Int16Option */ func MapInt16OptionToInt8List(m Int8List, f func(int8) Int16Option) Int16OptionList { acc := NilInt16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8List: int8->Int32Option */ func MapInt32OptionToInt8List(m Int8List, f func(int8) Int32Option) Int32OptionList { acc := NilInt32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8List: int8->Int64Option */ func MapInt64OptionToInt8List(m Int8List, f func(int8) Int64Option) Int64OptionList { acc := NilInt64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8List: int8->UintOption */ func MapUintOptionToInt8List(m Int8List, f func(int8) UintOption) UintOptionList { acc := NilUintOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8List: int8->Uint8Option */ func MapUint8OptionToInt8List(m Int8List, f func(int8) Uint8Option) Uint8OptionList { acc := NilUint8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8List: int8->Uint16Option */ func MapUint16OptionToInt8List(m Int8List, f func(int8) Uint16Option) Uint16OptionList { acc := NilUint16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8List: int8->Uint32Option */ func MapUint32OptionToInt8List(m Int8List, f func(int8) Uint32Option) Uint32OptionList { acc := NilUint32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8List: int8->Uint64Option */ func MapUint64OptionToInt8List(m Int8List, f func(int8) Uint64Option) Uint64OptionList { acc := NilUint64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8List: int8->UintptrOption */ func MapUintptrOptionToInt8List(m Int8List, f func(int8) UintptrOption) UintptrOptionList { acc := NilUintptrOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8List: int8->ByteOption */ func MapByteOptionToInt8List(m Int8List, f func(int8) ByteOption) ByteOptionList { acc := NilByteOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8List: int8->RuneOption */ func MapRuneOptionToInt8List(m Int8List, f func(int8) RuneOption) RuneOptionList { acc := NilRuneOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8List: int8->Float32Option */ func MapFloat32OptionToInt8List(m Int8List, f func(int8) Float32Option) Float32OptionList { acc := NilFloat32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8List: int8->Float64Option */ func MapFloat64OptionToInt8List(m Int8List, f func(int8) Float64Option) Float64OptionList { acc := NilFloat64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8List: int8->Complex64Option */ func MapComplex64OptionToInt8List(m Int8List, f func(int8) Complex64Option) Complex64OptionList { acc := NilComplex64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8List: int8->Complex128Option */ func MapComplex128OptionToInt8List(m Int8List, f func(int8) Complex128Option) Complex128OptionList { acc := NilComplex128OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8List: int8->AnyOption */ func MapAnyOptionToInt8List(m Int8List, f func(int8) AnyOption) AnyOptionList { acc := NilAnyOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8List: int8->[]bool */ func MapBoolArrToInt8List(m Int8List, f func(int8) []bool) BoolArrList { acc := NilBoolArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8List: int8->[]string */ func MapStringArrToInt8List(m Int8List, f func(int8) []string) StringArrList { acc := NilStringArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8List: int8->[]int */ func MapIntArrToInt8List(m Int8List, f func(int8) []int) IntArrList { acc := NilIntArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8List: int8->[]int8 */ func MapInt8ArrToInt8List(m Int8List, f func(int8) []int8) Int8ArrList { acc := NilInt8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8List: int8->[]int16 */ func MapInt16ArrToInt8List(m Int8List, f func(int8) []int16) Int16ArrList { acc := NilInt16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8List: int8->[]int32 */ func MapInt32ArrToInt8List(m Int8List, f func(int8) []int32) Int32ArrList { acc := NilInt32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8List: int8->[]int64 */ func MapInt64ArrToInt8List(m Int8List, f func(int8) []int64) Int64ArrList { acc := NilInt64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8List: int8->[]uint */ func MapUintArrToInt8List(m Int8List, f func(int8) []uint) UintArrList { acc := NilUintArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8List: int8->[]uint8 */ func MapUint8ArrToInt8List(m Int8List, f func(int8) []uint8) Uint8ArrList { acc := NilUint8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8List: int8->[]uint16 */ func MapUint16ArrToInt8List(m Int8List, f func(int8) []uint16) Uint16ArrList { acc := NilUint16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8List: int8->[]uint32 */ func MapUint32ArrToInt8List(m Int8List, f func(int8) []uint32) Uint32ArrList { acc := NilUint32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8List: int8->[]uint64 */ func MapUint64ArrToInt8List(m Int8List, f func(int8) []uint64) Uint64ArrList { acc := NilUint64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8List: int8->[]uintptr */ func MapUintptrArrToInt8List(m Int8List, f func(int8) []uintptr) UintptrArrList { acc := NilUintptrArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8List: int8->[]byte */ func MapByteArrToInt8List(m Int8List, f func(int8) []byte) ByteArrList { acc := NilByteArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8List: int8->[]rune */ func MapRuneArrToInt8List(m Int8List, f func(int8) []rune) RuneArrList { acc := NilRuneArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8List: int8->[]float32 */ func MapFloat32ArrToInt8List(m Int8List, f func(int8) []float32) Float32ArrList { acc := NilFloat32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8List: int8->[]float64 */ func MapFloat64ArrToInt8List(m Int8List, f func(int8) []float64) Float64ArrList { acc := NilFloat64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8List: int8->[]complex64 */ func MapComplex64ArrToInt8List(m Int8List, f func(int8) []complex64) Complex64ArrList { acc := NilComplex64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8List: int8->[]complex128 */ func MapComplex128ArrToInt8List(m Int8List, f func(int8) []complex128) Complex128ArrList { acc := NilComplex128ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8List: int8->[]Any */ func MapAnyArrToInt8List(m Int8List, f func(int8) []Any) AnyArrList { acc := NilAnyArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8List: int8->BoolList */ func MapBoolListToInt8List(m Int8List, f func(int8) BoolList) BoolListList { acc := NilBoolListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8List: int8->StringList */ func MapStringListToInt8List(m Int8List, f func(int8) StringList) StringListList { acc := NilStringListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8List: int8->IntList */ func MapIntListToInt8List(m Int8List, f func(int8) IntList) IntListList { acc := NilIntListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8List: int8->Int8List */ func MapInt8ListToInt8List(m Int8List, f func(int8) Int8List) Int8ListList { acc := NilInt8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8List: int8->Int16List */ func MapInt16ListToInt8List(m Int8List, f func(int8) Int16List) Int16ListList { acc := NilInt16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8List: int8->Int32List */ func MapInt32ListToInt8List(m Int8List, f func(int8) Int32List) Int32ListList { acc := NilInt32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8List: int8->Int64List */ func MapInt64ListToInt8List(m Int8List, f func(int8) Int64List) Int64ListList { acc := NilInt64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8List: int8->UintList */ func MapUintListToInt8List(m Int8List, f func(int8) UintList) UintListList { acc := NilUintListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8List: int8->Uint8List */ func MapUint8ListToInt8List(m Int8List, f func(int8) Uint8List) Uint8ListList { acc := NilUint8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8List: int8->Uint16List */ func MapUint16ListToInt8List(m Int8List, f func(int8) Uint16List) Uint16ListList { acc := NilUint16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8List: int8->Uint32List */ func MapUint32ListToInt8List(m Int8List, f func(int8) Uint32List) Uint32ListList { acc := NilUint32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8List: int8->Uint64List */ func MapUint64ListToInt8List(m Int8List, f func(int8) Uint64List) Uint64ListList { acc := NilUint64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8List: int8->UintptrList */ func MapUintptrListToInt8List(m Int8List, f func(int8) UintptrList) UintptrListList { acc := NilUintptrListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8List: int8->ByteList */ func MapByteListToInt8List(m Int8List, f func(int8) ByteList) ByteListList { acc := NilByteListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8List: int8->RuneList */ func MapRuneListToInt8List(m Int8List, f func(int8) RuneList) RuneListList { acc := NilRuneListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8List: int8->Float32List */ func MapFloat32ListToInt8List(m Int8List, f func(int8) Float32List) Float32ListList { acc := NilFloat32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8List: int8->Float64List */ func MapFloat64ListToInt8List(m Int8List, f func(int8) Float64List) Float64ListList { acc := NilFloat64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8List: int8->Complex64List */ func MapComplex64ListToInt8List(m Int8List, f func(int8) Complex64List) Complex64ListList { acc := NilComplex64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8List: int8->Complex128List */ func MapComplex128ListToInt8List(m Int8List, f func(int8) Complex128List) Complex128ListList { acc := NilComplex128ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8List: int8->AnyList */ func MapAnyListToInt8List(m Int8List, f func(int8) AnyList) AnyListList { acc := NilAnyListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16List: int16->bool */ func MapBoolToInt16List(m Int16List, f func(int16) bool) BoolList { acc := NilBoolList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16List: int16->string */ func MapStringToInt16List(m Int16List, f func(int16) string) StringList { acc := NilStringList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16List: int16->int */ func MapIntToInt16List(m Int16List, f func(int16) int) IntList { acc := NilIntList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16List: int16->int8 */ func MapInt8ToInt16List(m Int16List, f func(int16) int8) Int8List { acc := NilInt8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16List: int16->int16 */ func MapInt16ToInt16List(m Int16List, f func(int16) int16) Int16List { acc := NilInt16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16List: int16->int32 */ func MapInt32ToInt16List(m Int16List, f func(int16) int32) Int32List { acc := NilInt32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16List: int16->int64 */ func MapInt64ToInt16List(m Int16List, f func(int16) int64) Int64List { acc := NilInt64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16List: int16->uint */ func MapUintToInt16List(m Int16List, f func(int16) uint) UintList { acc := NilUintList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16List: int16->uint8 */ func MapUint8ToInt16List(m Int16List, f func(int16) uint8) Uint8List { acc := NilUint8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16List: int16->uint16 */ func MapUint16ToInt16List(m Int16List, f func(int16) uint16) Uint16List { acc := NilUint16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16List: int16->uint32 */ func MapUint32ToInt16List(m Int16List, f func(int16) uint32) Uint32List { acc := NilUint32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16List: int16->uint64 */ func MapUint64ToInt16List(m Int16List, f func(int16) uint64) Uint64List { acc := NilUint64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16List: int16->uintptr */ func MapUintptrToInt16List(m Int16List, f func(int16) uintptr) UintptrList { acc := NilUintptrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16List: int16->byte */ func MapByteToInt16List(m Int16List, f func(int16) byte) ByteList { acc := NilByteList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16List: int16->rune */ func MapRuneToInt16List(m Int16List, f func(int16) rune) RuneList { acc := NilRuneList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16List: int16->float32 */ func MapFloat32ToInt16List(m Int16List, f func(int16) float32) Float32List { acc := NilFloat32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16List: int16->float64 */ func MapFloat64ToInt16List(m Int16List, f func(int16) float64) Float64List { acc := NilFloat64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16List: int16->complex64 */ func MapComplex64ToInt16List(m Int16List, f func(int16) complex64) Complex64List { acc := NilComplex64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16List: int16->complex128 */ func MapComplex128ToInt16List(m Int16List, f func(int16) complex128) Complex128List { acc := NilComplex128List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16List: int16->Any */ func MapAnyToInt16List(m Int16List, f func(int16) Any) AnyList { acc := NilAnyList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16List: int16->BoolOption */ func MapBoolOptionToInt16List(m Int16List, f func(int16) BoolOption) BoolOptionList { acc := NilBoolOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16List: int16->StringOption */ func MapStringOptionToInt16List(m Int16List, f func(int16) StringOption) StringOptionList { acc := NilStringOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16List: int16->IntOption */ func MapIntOptionToInt16List(m Int16List, f func(int16) IntOption) IntOptionList { acc := NilIntOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16List: int16->Int8Option */ func MapInt8OptionToInt16List(m Int16List, f func(int16) Int8Option) Int8OptionList { acc := NilInt8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16List: int16->Int16Option */ func MapInt16OptionToInt16List(m Int16List, f func(int16) Int16Option) Int16OptionList { acc := NilInt16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16List: int16->Int32Option */ func MapInt32OptionToInt16List(m Int16List, f func(int16) Int32Option) Int32OptionList { acc := NilInt32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16List: int16->Int64Option */ func MapInt64OptionToInt16List(m Int16List, f func(int16) Int64Option) Int64OptionList { acc := NilInt64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16List: int16->UintOption */ func MapUintOptionToInt16List(m Int16List, f func(int16) UintOption) UintOptionList { acc := NilUintOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16List: int16->Uint8Option */ func MapUint8OptionToInt16List(m Int16List, f func(int16) Uint8Option) Uint8OptionList { acc := NilUint8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16List: int16->Uint16Option */ func MapUint16OptionToInt16List(m Int16List, f func(int16) Uint16Option) Uint16OptionList { acc := NilUint16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16List: int16->Uint32Option */ func MapUint32OptionToInt16List(m Int16List, f func(int16) Uint32Option) Uint32OptionList { acc := NilUint32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16List: int16->Uint64Option */ func MapUint64OptionToInt16List(m Int16List, f func(int16) Uint64Option) Uint64OptionList { acc := NilUint64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16List: int16->UintptrOption */ func MapUintptrOptionToInt16List(m Int16List, f func(int16) UintptrOption) UintptrOptionList { acc := NilUintptrOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16List: int16->ByteOption */ func MapByteOptionToInt16List(m Int16List, f func(int16) ByteOption) ByteOptionList { acc := NilByteOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16List: int16->RuneOption */ func MapRuneOptionToInt16List(m Int16List, f func(int16) RuneOption) RuneOptionList { acc := NilRuneOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16List: int16->Float32Option */ func MapFloat32OptionToInt16List(m Int16List, f func(int16) Float32Option) Float32OptionList { acc := NilFloat32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16List: int16->Float64Option */ func MapFloat64OptionToInt16List(m Int16List, f func(int16) Float64Option) Float64OptionList { acc := NilFloat64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16List: int16->Complex64Option */ func MapComplex64OptionToInt16List(m Int16List, f func(int16) Complex64Option) Complex64OptionList { acc := NilComplex64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16List: int16->Complex128Option */ func MapComplex128OptionToInt16List(m Int16List, f func(int16) Complex128Option) Complex128OptionList { acc := NilComplex128OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16List: int16->AnyOption */ func MapAnyOptionToInt16List(m Int16List, f func(int16) AnyOption) AnyOptionList { acc := NilAnyOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16List: int16->[]bool */ func MapBoolArrToInt16List(m Int16List, f func(int16) []bool) BoolArrList { acc := NilBoolArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16List: int16->[]string */ func MapStringArrToInt16List(m Int16List, f func(int16) []string) StringArrList { acc := NilStringArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16List: int16->[]int */ func MapIntArrToInt16List(m Int16List, f func(int16) []int) IntArrList { acc := NilIntArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16List: int16->[]int8 */ func MapInt8ArrToInt16List(m Int16List, f func(int16) []int8) Int8ArrList { acc := NilInt8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16List: int16->[]int16 */ func MapInt16ArrToInt16List(m Int16List, f func(int16) []int16) Int16ArrList { acc := NilInt16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16List: int16->[]int32 */ func MapInt32ArrToInt16List(m Int16List, f func(int16) []int32) Int32ArrList { acc := NilInt32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16List: int16->[]int64 */ func MapInt64ArrToInt16List(m Int16List, f func(int16) []int64) Int64ArrList { acc := NilInt64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16List: int16->[]uint */ func MapUintArrToInt16List(m Int16List, f func(int16) []uint) UintArrList { acc := NilUintArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16List: int16->[]uint8 */ func MapUint8ArrToInt16List(m Int16List, f func(int16) []uint8) Uint8ArrList { acc := NilUint8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16List: int16->[]uint16 */ func MapUint16ArrToInt16List(m Int16List, f func(int16) []uint16) Uint16ArrList { acc := NilUint16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16List: int16->[]uint32 */ func MapUint32ArrToInt16List(m Int16List, f func(int16) []uint32) Uint32ArrList { acc := NilUint32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16List: int16->[]uint64 */ func MapUint64ArrToInt16List(m Int16List, f func(int16) []uint64) Uint64ArrList { acc := NilUint64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16List: int16->[]uintptr */ func MapUintptrArrToInt16List(m Int16List, f func(int16) []uintptr) UintptrArrList { acc := NilUintptrArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16List: int16->[]byte */ func MapByteArrToInt16List(m Int16List, f func(int16) []byte) ByteArrList { acc := NilByteArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16List: int16->[]rune */ func MapRuneArrToInt16List(m Int16List, f func(int16) []rune) RuneArrList { acc := NilRuneArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16List: int16->[]float32 */ func MapFloat32ArrToInt16List(m Int16List, f func(int16) []float32) Float32ArrList { acc := NilFloat32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16List: int16->[]float64 */ func MapFloat64ArrToInt16List(m Int16List, f func(int16) []float64) Float64ArrList { acc := NilFloat64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16List: int16->[]complex64 */ func MapComplex64ArrToInt16List(m Int16List, f func(int16) []complex64) Complex64ArrList { acc := NilComplex64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16List: int16->[]complex128 */ func MapComplex128ArrToInt16List(m Int16List, f func(int16) []complex128) Complex128ArrList { acc := NilComplex128ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16List: int16->[]Any */ func MapAnyArrToInt16List(m Int16List, f func(int16) []Any) AnyArrList { acc := NilAnyArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16List: int16->BoolList */ func MapBoolListToInt16List(m Int16List, f func(int16) BoolList) BoolListList { acc := NilBoolListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16List: int16->StringList */ func MapStringListToInt16List(m Int16List, f func(int16) StringList) StringListList { acc := NilStringListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16List: int16->IntList */ func MapIntListToInt16List(m Int16List, f func(int16) IntList) IntListList { acc := NilIntListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16List: int16->Int8List */ func MapInt8ListToInt16List(m Int16List, f func(int16) Int8List) Int8ListList { acc := NilInt8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16List: int16->Int16List */ func MapInt16ListToInt16List(m Int16List, f func(int16) Int16List) Int16ListList { acc := NilInt16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16List: int16->Int32List */ func MapInt32ListToInt16List(m Int16List, f func(int16) Int32List) Int32ListList { acc := NilInt32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16List: int16->Int64List */ func MapInt64ListToInt16List(m Int16List, f func(int16) Int64List) Int64ListList { acc := NilInt64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16List: int16->UintList */ func MapUintListToInt16List(m Int16List, f func(int16) UintList) UintListList { acc := NilUintListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16List: int16->Uint8List */ func MapUint8ListToInt16List(m Int16List, f func(int16) Uint8List) Uint8ListList { acc := NilUint8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16List: int16->Uint16List */ func MapUint16ListToInt16List(m Int16List, f func(int16) Uint16List) Uint16ListList { acc := NilUint16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16List: int16->Uint32List */ func MapUint32ListToInt16List(m Int16List, f func(int16) Uint32List) Uint32ListList { acc := NilUint32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16List: int16->Uint64List */ func MapUint64ListToInt16List(m Int16List, f func(int16) Uint64List) Uint64ListList { acc := NilUint64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16List: int16->UintptrList */ func MapUintptrListToInt16List(m Int16List, f func(int16) UintptrList) UintptrListList { acc := NilUintptrListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16List: int16->ByteList */ func MapByteListToInt16List(m Int16List, f func(int16) ByteList) ByteListList { acc := NilByteListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16List: int16->RuneList */ func MapRuneListToInt16List(m Int16List, f func(int16) RuneList) RuneListList { acc := NilRuneListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16List: int16->Float32List */ func MapFloat32ListToInt16List(m Int16List, f func(int16) Float32List) Float32ListList { acc := NilFloat32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16List: int16->Float64List */ func MapFloat64ListToInt16List(m Int16List, f func(int16) Float64List) Float64ListList { acc := NilFloat64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16List: int16->Complex64List */ func MapComplex64ListToInt16List(m Int16List, f func(int16) Complex64List) Complex64ListList { acc := NilComplex64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16List: int16->Complex128List */ func MapComplex128ListToInt16List(m Int16List, f func(int16) Complex128List) Complex128ListList { acc := NilComplex128ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16List: int16->AnyList */ func MapAnyListToInt16List(m Int16List, f func(int16) AnyList) AnyListList { acc := NilAnyListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32List: int32->bool */ func MapBoolToInt32List(m Int32List, f func(int32) bool) BoolList { acc := NilBoolList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32List: int32->string */ func MapStringToInt32List(m Int32List, f func(int32) string) StringList { acc := NilStringList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32List: int32->int */ func MapIntToInt32List(m Int32List, f func(int32) int) IntList { acc := NilIntList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32List: int32->int8 */ func MapInt8ToInt32List(m Int32List, f func(int32) int8) Int8List { acc := NilInt8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32List: int32->int16 */ func MapInt16ToInt32List(m Int32List, f func(int32) int16) Int16List { acc := NilInt16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32List: int32->int32 */ func MapInt32ToInt32List(m Int32List, f func(int32) int32) Int32List { acc := NilInt32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32List: int32->int64 */ func MapInt64ToInt32List(m Int32List, f func(int32) int64) Int64List { acc := NilInt64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32List: int32->uint */ func MapUintToInt32List(m Int32List, f func(int32) uint) UintList { acc := NilUintList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32List: int32->uint8 */ func MapUint8ToInt32List(m Int32List, f func(int32) uint8) Uint8List { acc := NilUint8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32List: int32->uint16 */ func MapUint16ToInt32List(m Int32List, f func(int32) uint16) Uint16List { acc := NilUint16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32List: int32->uint32 */ func MapUint32ToInt32List(m Int32List, f func(int32) uint32) Uint32List { acc := NilUint32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32List: int32->uint64 */ func MapUint64ToInt32List(m Int32List, f func(int32) uint64) Uint64List { acc := NilUint64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32List: int32->uintptr */ func MapUintptrToInt32List(m Int32List, f func(int32) uintptr) UintptrList { acc := NilUintptrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32List: int32->byte */ func MapByteToInt32List(m Int32List, f func(int32) byte) ByteList { acc := NilByteList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32List: int32->rune */ func MapRuneToInt32List(m Int32List, f func(int32) rune) RuneList { acc := NilRuneList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32List: int32->float32 */ func MapFloat32ToInt32List(m Int32List, f func(int32) float32) Float32List { acc := NilFloat32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32List: int32->float64 */ func MapFloat64ToInt32List(m Int32List, f func(int32) float64) Float64List { acc := NilFloat64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32List: int32->complex64 */ func MapComplex64ToInt32List(m Int32List, f func(int32) complex64) Complex64List { acc := NilComplex64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32List: int32->complex128 */ func MapComplex128ToInt32List(m Int32List, f func(int32) complex128) Complex128List { acc := NilComplex128List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32List: int32->Any */ func MapAnyToInt32List(m Int32List, f func(int32) Any) AnyList { acc := NilAnyList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32List: int32->BoolOption */ func MapBoolOptionToInt32List(m Int32List, f func(int32) BoolOption) BoolOptionList { acc := NilBoolOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32List: int32->StringOption */ func MapStringOptionToInt32List(m Int32List, f func(int32) StringOption) StringOptionList { acc := NilStringOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32List: int32->IntOption */ func MapIntOptionToInt32List(m Int32List, f func(int32) IntOption) IntOptionList { acc := NilIntOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32List: int32->Int8Option */ func MapInt8OptionToInt32List(m Int32List, f func(int32) Int8Option) Int8OptionList { acc := NilInt8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32List: int32->Int16Option */ func MapInt16OptionToInt32List(m Int32List, f func(int32) Int16Option) Int16OptionList { acc := NilInt16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32List: int32->Int32Option */ func MapInt32OptionToInt32List(m Int32List, f func(int32) Int32Option) Int32OptionList { acc := NilInt32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32List: int32->Int64Option */ func MapInt64OptionToInt32List(m Int32List, f func(int32) Int64Option) Int64OptionList { acc := NilInt64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32List: int32->UintOption */ func MapUintOptionToInt32List(m Int32List, f func(int32) UintOption) UintOptionList { acc := NilUintOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32List: int32->Uint8Option */ func MapUint8OptionToInt32List(m Int32List, f func(int32) Uint8Option) Uint8OptionList { acc := NilUint8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32List: int32->Uint16Option */ func MapUint16OptionToInt32List(m Int32List, f func(int32) Uint16Option) Uint16OptionList { acc := NilUint16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32List: int32->Uint32Option */ func MapUint32OptionToInt32List(m Int32List, f func(int32) Uint32Option) Uint32OptionList { acc := NilUint32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32List: int32->Uint64Option */ func MapUint64OptionToInt32List(m Int32List, f func(int32) Uint64Option) Uint64OptionList { acc := NilUint64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32List: int32->UintptrOption */ func MapUintptrOptionToInt32List(m Int32List, f func(int32) UintptrOption) UintptrOptionList { acc := NilUintptrOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32List: int32->ByteOption */ func MapByteOptionToInt32List(m Int32List, f func(int32) ByteOption) ByteOptionList { acc := NilByteOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32List: int32->RuneOption */ func MapRuneOptionToInt32List(m Int32List, f func(int32) RuneOption) RuneOptionList { acc := NilRuneOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32List: int32->Float32Option */ func MapFloat32OptionToInt32List(m Int32List, f func(int32) Float32Option) Float32OptionList { acc := NilFloat32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32List: int32->Float64Option */ func MapFloat64OptionToInt32List(m Int32List, f func(int32) Float64Option) Float64OptionList { acc := NilFloat64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32List: int32->Complex64Option */ func MapComplex64OptionToInt32List(m Int32List, f func(int32) Complex64Option) Complex64OptionList { acc := NilComplex64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32List: int32->Complex128Option */ func MapComplex128OptionToInt32List(m Int32List, f func(int32) Complex128Option) Complex128OptionList { acc := NilComplex128OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32List: int32->AnyOption */ func MapAnyOptionToInt32List(m Int32List, f func(int32) AnyOption) AnyOptionList { acc := NilAnyOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32List: int32->[]bool */ func MapBoolArrToInt32List(m Int32List, f func(int32) []bool) BoolArrList { acc := NilBoolArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32List: int32->[]string */ func MapStringArrToInt32List(m Int32List, f func(int32) []string) StringArrList { acc := NilStringArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32List: int32->[]int */ func MapIntArrToInt32List(m Int32List, f func(int32) []int) IntArrList { acc := NilIntArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32List: int32->[]int8 */ func MapInt8ArrToInt32List(m Int32List, f func(int32) []int8) Int8ArrList { acc := NilInt8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32List: int32->[]int16 */ func MapInt16ArrToInt32List(m Int32List, f func(int32) []int16) Int16ArrList { acc := NilInt16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32List: int32->[]int32 */ func MapInt32ArrToInt32List(m Int32List, f func(int32) []int32) Int32ArrList { acc := NilInt32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32List: int32->[]int64 */ func MapInt64ArrToInt32List(m Int32List, f func(int32) []int64) Int64ArrList { acc := NilInt64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32List: int32->[]uint */ func MapUintArrToInt32List(m Int32List, f func(int32) []uint) UintArrList { acc := NilUintArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32List: int32->[]uint8 */ func MapUint8ArrToInt32List(m Int32List, f func(int32) []uint8) Uint8ArrList { acc := NilUint8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32List: int32->[]uint16 */ func MapUint16ArrToInt32List(m Int32List, f func(int32) []uint16) Uint16ArrList { acc := NilUint16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32List: int32->[]uint32 */ func MapUint32ArrToInt32List(m Int32List, f func(int32) []uint32) Uint32ArrList { acc := NilUint32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32List: int32->[]uint64 */ func MapUint64ArrToInt32List(m Int32List, f func(int32) []uint64) Uint64ArrList { acc := NilUint64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32List: int32->[]uintptr */ func MapUintptrArrToInt32List(m Int32List, f func(int32) []uintptr) UintptrArrList { acc := NilUintptrArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32List: int32->[]byte */ func MapByteArrToInt32List(m Int32List, f func(int32) []byte) ByteArrList { acc := NilByteArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32List: int32->[]rune */ func MapRuneArrToInt32List(m Int32List, f func(int32) []rune) RuneArrList { acc := NilRuneArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32List: int32->[]float32 */ func MapFloat32ArrToInt32List(m Int32List, f func(int32) []float32) Float32ArrList { acc := NilFloat32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32List: int32->[]float64 */ func MapFloat64ArrToInt32List(m Int32List, f func(int32) []float64) Float64ArrList { acc := NilFloat64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32List: int32->[]complex64 */ func MapComplex64ArrToInt32List(m Int32List, f func(int32) []complex64) Complex64ArrList { acc := NilComplex64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32List: int32->[]complex128 */ func MapComplex128ArrToInt32List(m Int32List, f func(int32) []complex128) Complex128ArrList { acc := NilComplex128ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32List: int32->[]Any */ func MapAnyArrToInt32List(m Int32List, f func(int32) []Any) AnyArrList { acc := NilAnyArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32List: int32->BoolList */ func MapBoolListToInt32List(m Int32List, f func(int32) BoolList) BoolListList { acc := NilBoolListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32List: int32->StringList */ func MapStringListToInt32List(m Int32List, f func(int32) StringList) StringListList { acc := NilStringListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32List: int32->IntList */ func MapIntListToInt32List(m Int32List, f func(int32) IntList) IntListList { acc := NilIntListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32List: int32->Int8List */ func MapInt8ListToInt32List(m Int32List, f func(int32) Int8List) Int8ListList { acc := NilInt8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32List: int32->Int16List */ func MapInt16ListToInt32List(m Int32List, f func(int32) Int16List) Int16ListList { acc := NilInt16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32List: int32->Int32List */ func MapInt32ListToInt32List(m Int32List, f func(int32) Int32List) Int32ListList { acc := NilInt32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32List: int32->Int64List */ func MapInt64ListToInt32List(m Int32List, f func(int32) Int64List) Int64ListList { acc := NilInt64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32List: int32->UintList */ func MapUintListToInt32List(m Int32List, f func(int32) UintList) UintListList { acc := NilUintListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32List: int32->Uint8List */ func MapUint8ListToInt32List(m Int32List, f func(int32) Uint8List) Uint8ListList { acc := NilUint8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32List: int32->Uint16List */ func MapUint16ListToInt32List(m Int32List, f func(int32) Uint16List) Uint16ListList { acc := NilUint16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32List: int32->Uint32List */ func MapUint32ListToInt32List(m Int32List, f func(int32) Uint32List) Uint32ListList { acc := NilUint32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32List: int32->Uint64List */ func MapUint64ListToInt32List(m Int32List, f func(int32) Uint64List) Uint64ListList { acc := NilUint64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32List: int32->UintptrList */ func MapUintptrListToInt32List(m Int32List, f func(int32) UintptrList) UintptrListList { acc := NilUintptrListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32List: int32->ByteList */ func MapByteListToInt32List(m Int32List, f func(int32) ByteList) ByteListList { acc := NilByteListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32List: int32->RuneList */ func MapRuneListToInt32List(m Int32List, f func(int32) RuneList) RuneListList { acc := NilRuneListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32List: int32->Float32List */ func MapFloat32ListToInt32List(m Int32List, f func(int32) Float32List) Float32ListList { acc := NilFloat32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32List: int32->Float64List */ func MapFloat64ListToInt32List(m Int32List, f func(int32) Float64List) Float64ListList { acc := NilFloat64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32List: int32->Complex64List */ func MapComplex64ListToInt32List(m Int32List, f func(int32) Complex64List) Complex64ListList { acc := NilComplex64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32List: int32->Complex128List */ func MapComplex128ListToInt32List(m Int32List, f func(int32) Complex128List) Complex128ListList { acc := NilComplex128ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32List: int32->AnyList */ func MapAnyListToInt32List(m Int32List, f func(int32) AnyList) AnyListList { acc := NilAnyListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64List: int64->bool */ func MapBoolToInt64List(m Int64List, f func(int64) bool) BoolList { acc := NilBoolList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64List: int64->string */ func MapStringToInt64List(m Int64List, f func(int64) string) StringList { acc := NilStringList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64List: int64->int */ func MapIntToInt64List(m Int64List, f func(int64) int) IntList { acc := NilIntList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64List: int64->int8 */ func MapInt8ToInt64List(m Int64List, f func(int64) int8) Int8List { acc := NilInt8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64List: int64->int16 */ func MapInt16ToInt64List(m Int64List, f func(int64) int16) Int16List { acc := NilInt16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64List: int64->int32 */ func MapInt32ToInt64List(m Int64List, f func(int64) int32) Int32List { acc := NilInt32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64List: int64->int64 */ func MapInt64ToInt64List(m Int64List, f func(int64) int64) Int64List { acc := NilInt64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64List: int64->uint */ func MapUintToInt64List(m Int64List, f func(int64) uint) UintList { acc := NilUintList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64List: int64->uint8 */ func MapUint8ToInt64List(m Int64List, f func(int64) uint8) Uint8List { acc := NilUint8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64List: int64->uint16 */ func MapUint16ToInt64List(m Int64List, f func(int64) uint16) Uint16List { acc := NilUint16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64List: int64->uint32 */ func MapUint32ToInt64List(m Int64List, f func(int64) uint32) Uint32List { acc := NilUint32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64List: int64->uint64 */ func MapUint64ToInt64List(m Int64List, f func(int64) uint64) Uint64List { acc := NilUint64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64List: int64->uintptr */ func MapUintptrToInt64List(m Int64List, f func(int64) uintptr) UintptrList { acc := NilUintptrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64List: int64->byte */ func MapByteToInt64List(m Int64List, f func(int64) byte) ByteList { acc := NilByteList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64List: int64->rune */ func MapRuneToInt64List(m Int64List, f func(int64) rune) RuneList { acc := NilRuneList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64List: int64->float32 */ func MapFloat32ToInt64List(m Int64List, f func(int64) float32) Float32List { acc := NilFloat32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64List: int64->float64 */ func MapFloat64ToInt64List(m Int64List, f func(int64) float64) Float64List { acc := NilFloat64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64List: int64->complex64 */ func MapComplex64ToInt64List(m Int64List, f func(int64) complex64) Complex64List { acc := NilComplex64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64List: int64->complex128 */ func MapComplex128ToInt64List(m Int64List, f func(int64) complex128) Complex128List { acc := NilComplex128List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64List: int64->Any */ func MapAnyToInt64List(m Int64List, f func(int64) Any) AnyList { acc := NilAnyList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64List: int64->BoolOption */ func MapBoolOptionToInt64List(m Int64List, f func(int64) BoolOption) BoolOptionList { acc := NilBoolOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64List: int64->StringOption */ func MapStringOptionToInt64List(m Int64List, f func(int64) StringOption) StringOptionList { acc := NilStringOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64List: int64->IntOption */ func MapIntOptionToInt64List(m Int64List, f func(int64) IntOption) IntOptionList { acc := NilIntOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64List: int64->Int8Option */ func MapInt8OptionToInt64List(m Int64List, f func(int64) Int8Option) Int8OptionList { acc := NilInt8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64List: int64->Int16Option */ func MapInt16OptionToInt64List(m Int64List, f func(int64) Int16Option) Int16OptionList { acc := NilInt16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64List: int64->Int32Option */ func MapInt32OptionToInt64List(m Int64List, f func(int64) Int32Option) Int32OptionList { acc := NilInt32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64List: int64->Int64Option */ func MapInt64OptionToInt64List(m Int64List, f func(int64) Int64Option) Int64OptionList { acc := NilInt64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64List: int64->UintOption */ func MapUintOptionToInt64List(m Int64List, f func(int64) UintOption) UintOptionList { acc := NilUintOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64List: int64->Uint8Option */ func MapUint8OptionToInt64List(m Int64List, f func(int64) Uint8Option) Uint8OptionList { acc := NilUint8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64List: int64->Uint16Option */ func MapUint16OptionToInt64List(m Int64List, f func(int64) Uint16Option) Uint16OptionList { acc := NilUint16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64List: int64->Uint32Option */ func MapUint32OptionToInt64List(m Int64List, f func(int64) Uint32Option) Uint32OptionList { acc := NilUint32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64List: int64->Uint64Option */ func MapUint64OptionToInt64List(m Int64List, f func(int64) Uint64Option) Uint64OptionList { acc := NilUint64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64List: int64->UintptrOption */ func MapUintptrOptionToInt64List(m Int64List, f func(int64) UintptrOption) UintptrOptionList { acc := NilUintptrOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64List: int64->ByteOption */ func MapByteOptionToInt64List(m Int64List, f func(int64) ByteOption) ByteOptionList { acc := NilByteOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64List: int64->RuneOption */ func MapRuneOptionToInt64List(m Int64List, f func(int64) RuneOption) RuneOptionList { acc := NilRuneOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64List: int64->Float32Option */ func MapFloat32OptionToInt64List(m Int64List, f func(int64) Float32Option) Float32OptionList { acc := NilFloat32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64List: int64->Float64Option */ func MapFloat64OptionToInt64List(m Int64List, f func(int64) Float64Option) Float64OptionList { acc := NilFloat64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64List: int64->Complex64Option */ func MapComplex64OptionToInt64List(m Int64List, f func(int64) Complex64Option) Complex64OptionList { acc := NilComplex64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64List: int64->Complex128Option */ func MapComplex128OptionToInt64List(m Int64List, f func(int64) Complex128Option) Complex128OptionList { acc := NilComplex128OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64List: int64->AnyOption */ func MapAnyOptionToInt64List(m Int64List, f func(int64) AnyOption) AnyOptionList { acc := NilAnyOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64List: int64->[]bool */ func MapBoolArrToInt64List(m Int64List, f func(int64) []bool) BoolArrList { acc := NilBoolArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64List: int64->[]string */ func MapStringArrToInt64List(m Int64List, f func(int64) []string) StringArrList { acc := NilStringArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64List: int64->[]int */ func MapIntArrToInt64List(m Int64List, f func(int64) []int) IntArrList { acc := NilIntArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64List: int64->[]int8 */ func MapInt8ArrToInt64List(m Int64List, f func(int64) []int8) Int8ArrList { acc := NilInt8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64List: int64->[]int16 */ func MapInt16ArrToInt64List(m Int64List, f func(int64) []int16) Int16ArrList { acc := NilInt16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64List: int64->[]int32 */ func MapInt32ArrToInt64List(m Int64List, f func(int64) []int32) Int32ArrList { acc := NilInt32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64List: int64->[]int64 */ func MapInt64ArrToInt64List(m Int64List, f func(int64) []int64) Int64ArrList { acc := NilInt64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64List: int64->[]uint */ func MapUintArrToInt64List(m Int64List, f func(int64) []uint) UintArrList { acc := NilUintArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64List: int64->[]uint8 */ func MapUint8ArrToInt64List(m Int64List, f func(int64) []uint8) Uint8ArrList { acc := NilUint8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64List: int64->[]uint16 */ func MapUint16ArrToInt64List(m Int64List, f func(int64) []uint16) Uint16ArrList { acc := NilUint16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64List: int64->[]uint32 */ func MapUint32ArrToInt64List(m Int64List, f func(int64) []uint32) Uint32ArrList { acc := NilUint32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64List: int64->[]uint64 */ func MapUint64ArrToInt64List(m Int64List, f func(int64) []uint64) Uint64ArrList { acc := NilUint64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64List: int64->[]uintptr */ func MapUintptrArrToInt64List(m Int64List, f func(int64) []uintptr) UintptrArrList { acc := NilUintptrArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64List: int64->[]byte */ func MapByteArrToInt64List(m Int64List, f func(int64) []byte) ByteArrList { acc := NilByteArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64List: int64->[]rune */ func MapRuneArrToInt64List(m Int64List, f func(int64) []rune) RuneArrList { acc := NilRuneArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64List: int64->[]float32 */ func MapFloat32ArrToInt64List(m Int64List, f func(int64) []float32) Float32ArrList { acc := NilFloat32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64List: int64->[]float64 */ func MapFloat64ArrToInt64List(m Int64List, f func(int64) []float64) Float64ArrList { acc := NilFloat64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64List: int64->[]complex64 */ func MapComplex64ArrToInt64List(m Int64List, f func(int64) []complex64) Complex64ArrList { acc := NilComplex64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64List: int64->[]complex128 */ func MapComplex128ArrToInt64List(m Int64List, f func(int64) []complex128) Complex128ArrList { acc := NilComplex128ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64List: int64->[]Any */ func MapAnyArrToInt64List(m Int64List, f func(int64) []Any) AnyArrList { acc := NilAnyArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64List: int64->BoolList */ func MapBoolListToInt64List(m Int64List, f func(int64) BoolList) BoolListList { acc := NilBoolListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64List: int64->StringList */ func MapStringListToInt64List(m Int64List, f func(int64) StringList) StringListList { acc := NilStringListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64List: int64->IntList */ func MapIntListToInt64List(m Int64List, f func(int64) IntList) IntListList { acc := NilIntListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64List: int64->Int8List */ func MapInt8ListToInt64List(m Int64List, f func(int64) Int8List) Int8ListList { acc := NilInt8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64List: int64->Int16List */ func MapInt16ListToInt64List(m Int64List, f func(int64) Int16List) Int16ListList { acc := NilInt16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64List: int64->Int32List */ func MapInt32ListToInt64List(m Int64List, f func(int64) Int32List) Int32ListList { acc := NilInt32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64List: int64->Int64List */ func MapInt64ListToInt64List(m Int64List, f func(int64) Int64List) Int64ListList { acc := NilInt64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64List: int64->UintList */ func MapUintListToInt64List(m Int64List, f func(int64) UintList) UintListList { acc := NilUintListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64List: int64->Uint8List */ func MapUint8ListToInt64List(m Int64List, f func(int64) Uint8List) Uint8ListList { acc := NilUint8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64List: int64->Uint16List */ func MapUint16ListToInt64List(m Int64List, f func(int64) Uint16List) Uint16ListList { acc := NilUint16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64List: int64->Uint32List */ func MapUint32ListToInt64List(m Int64List, f func(int64) Uint32List) Uint32ListList { acc := NilUint32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64List: int64->Uint64List */ func MapUint64ListToInt64List(m Int64List, f func(int64) Uint64List) Uint64ListList { acc := NilUint64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64List: int64->UintptrList */ func MapUintptrListToInt64List(m Int64List, f func(int64) UintptrList) UintptrListList { acc := NilUintptrListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64List: int64->ByteList */ func MapByteListToInt64List(m Int64List, f func(int64) ByteList) ByteListList { acc := NilByteListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64List: int64->RuneList */ func MapRuneListToInt64List(m Int64List, f func(int64) RuneList) RuneListList { acc := NilRuneListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64List: int64->Float32List */ func MapFloat32ListToInt64List(m Int64List, f func(int64) Float32List) Float32ListList { acc := NilFloat32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64List: int64->Float64List */ func MapFloat64ListToInt64List(m Int64List, f func(int64) Float64List) Float64ListList { acc := NilFloat64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64List: int64->Complex64List */ func MapComplex64ListToInt64List(m Int64List, f func(int64) Complex64List) Complex64ListList { acc := NilComplex64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64List: int64->Complex128List */ func MapComplex128ListToInt64List(m Int64List, f func(int64) Complex128List) Complex128ListList { acc := NilComplex128ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64List: int64->AnyList */ func MapAnyListToInt64List(m Int64List, f func(int64) AnyList) AnyListList { acc := NilAnyListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintList: uint->bool */ func MapBoolToUintList(m UintList, f func(uint) bool) BoolList { acc := NilBoolList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintList: uint->string */ func MapStringToUintList(m UintList, f func(uint) string) StringList { acc := NilStringList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintList: uint->int */ func MapIntToUintList(m UintList, f func(uint) int) IntList { acc := NilIntList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintList: uint->int8 */ func MapInt8ToUintList(m UintList, f func(uint) int8) Int8List { acc := NilInt8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintList: uint->int16 */ func MapInt16ToUintList(m UintList, f func(uint) int16) Int16List { acc := NilInt16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintList: uint->int32 */ func MapInt32ToUintList(m UintList, f func(uint) int32) Int32List { acc := NilInt32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintList: uint->int64 */ func MapInt64ToUintList(m UintList, f func(uint) int64) Int64List { acc := NilInt64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintList: uint->uint */ func MapUintToUintList(m UintList, f func(uint) uint) UintList { acc := NilUintList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintList: uint->uint8 */ func MapUint8ToUintList(m UintList, f func(uint) uint8) Uint8List { acc := NilUint8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintList: uint->uint16 */ func MapUint16ToUintList(m UintList, f func(uint) uint16) Uint16List { acc := NilUint16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintList: uint->uint32 */ func MapUint32ToUintList(m UintList, f func(uint) uint32) Uint32List { acc := NilUint32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintList: uint->uint64 */ func MapUint64ToUintList(m UintList, f func(uint) uint64) Uint64List { acc := NilUint64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintList: uint->uintptr */ func MapUintptrToUintList(m UintList, f func(uint) uintptr) UintptrList { acc := NilUintptrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintList: uint->byte */ func MapByteToUintList(m UintList, f func(uint) byte) ByteList { acc := NilByteList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintList: uint->rune */ func MapRuneToUintList(m UintList, f func(uint) rune) RuneList { acc := NilRuneList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintList: uint->float32 */ func MapFloat32ToUintList(m UintList, f func(uint) float32) Float32List { acc := NilFloat32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintList: uint->float64 */ func MapFloat64ToUintList(m UintList, f func(uint) float64) Float64List { acc := NilFloat64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintList: uint->complex64 */ func MapComplex64ToUintList(m UintList, f func(uint) complex64) Complex64List { acc := NilComplex64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintList: uint->complex128 */ func MapComplex128ToUintList(m UintList, f func(uint) complex128) Complex128List { acc := NilComplex128List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintList: uint->Any */ func MapAnyToUintList(m UintList, f func(uint) Any) AnyList { acc := NilAnyList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintList: uint->BoolOption */ func MapBoolOptionToUintList(m UintList, f func(uint) BoolOption) BoolOptionList { acc := NilBoolOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintList: uint->StringOption */ func MapStringOptionToUintList(m UintList, f func(uint) StringOption) StringOptionList { acc := NilStringOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintList: uint->IntOption */ func MapIntOptionToUintList(m UintList, f func(uint) IntOption) IntOptionList { acc := NilIntOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintList: uint->Int8Option */ func MapInt8OptionToUintList(m UintList, f func(uint) Int8Option) Int8OptionList { acc := NilInt8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintList: uint->Int16Option */ func MapInt16OptionToUintList(m UintList, f func(uint) Int16Option) Int16OptionList { acc := NilInt16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintList: uint->Int32Option */ func MapInt32OptionToUintList(m UintList, f func(uint) Int32Option) Int32OptionList { acc := NilInt32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintList: uint->Int64Option */ func MapInt64OptionToUintList(m UintList, f func(uint) Int64Option) Int64OptionList { acc := NilInt64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintList: uint->UintOption */ func MapUintOptionToUintList(m UintList, f func(uint) UintOption) UintOptionList { acc := NilUintOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintList: uint->Uint8Option */ func MapUint8OptionToUintList(m UintList, f func(uint) Uint8Option) Uint8OptionList { acc := NilUint8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintList: uint->Uint16Option */ func MapUint16OptionToUintList(m UintList, f func(uint) Uint16Option) Uint16OptionList { acc := NilUint16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintList: uint->Uint32Option */ func MapUint32OptionToUintList(m UintList, f func(uint) Uint32Option) Uint32OptionList { acc := NilUint32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintList: uint->Uint64Option */ func MapUint64OptionToUintList(m UintList, f func(uint) Uint64Option) Uint64OptionList { acc := NilUint64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintList: uint->UintptrOption */ func MapUintptrOptionToUintList(m UintList, f func(uint) UintptrOption) UintptrOptionList { acc := NilUintptrOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintList: uint->ByteOption */ func MapByteOptionToUintList(m UintList, f func(uint) ByteOption) ByteOptionList { acc := NilByteOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintList: uint->RuneOption */ func MapRuneOptionToUintList(m UintList, f func(uint) RuneOption) RuneOptionList { acc := NilRuneOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintList: uint->Float32Option */ func MapFloat32OptionToUintList(m UintList, f func(uint) Float32Option) Float32OptionList { acc := NilFloat32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintList: uint->Float64Option */ func MapFloat64OptionToUintList(m UintList, f func(uint) Float64Option) Float64OptionList { acc := NilFloat64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintList: uint->Complex64Option */ func MapComplex64OptionToUintList(m UintList, f func(uint) Complex64Option) Complex64OptionList { acc := NilComplex64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintList: uint->Complex128Option */ func MapComplex128OptionToUintList(m UintList, f func(uint) Complex128Option) Complex128OptionList { acc := NilComplex128OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintList: uint->AnyOption */ func MapAnyOptionToUintList(m UintList, f func(uint) AnyOption) AnyOptionList { acc := NilAnyOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintList: uint->[]bool */ func MapBoolArrToUintList(m UintList, f func(uint) []bool) BoolArrList { acc := NilBoolArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintList: uint->[]string */ func MapStringArrToUintList(m UintList, f func(uint) []string) StringArrList { acc := NilStringArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintList: uint->[]int */ func MapIntArrToUintList(m UintList, f func(uint) []int) IntArrList { acc := NilIntArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintList: uint->[]int8 */ func MapInt8ArrToUintList(m UintList, f func(uint) []int8) Int8ArrList { acc := NilInt8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintList: uint->[]int16 */ func MapInt16ArrToUintList(m UintList, f func(uint) []int16) Int16ArrList { acc := NilInt16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintList: uint->[]int32 */ func MapInt32ArrToUintList(m UintList, f func(uint) []int32) Int32ArrList { acc := NilInt32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintList: uint->[]int64 */ func MapInt64ArrToUintList(m UintList, f func(uint) []int64) Int64ArrList { acc := NilInt64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintList: uint->[]uint */ func MapUintArrToUintList(m UintList, f func(uint) []uint) UintArrList { acc := NilUintArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintList: uint->[]uint8 */ func MapUint8ArrToUintList(m UintList, f func(uint) []uint8) Uint8ArrList { acc := NilUint8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintList: uint->[]uint16 */ func MapUint16ArrToUintList(m UintList, f func(uint) []uint16) Uint16ArrList { acc := NilUint16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintList: uint->[]uint32 */ func MapUint32ArrToUintList(m UintList, f func(uint) []uint32) Uint32ArrList { acc := NilUint32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintList: uint->[]uint64 */ func MapUint64ArrToUintList(m UintList, f func(uint) []uint64) Uint64ArrList { acc := NilUint64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintList: uint->[]uintptr */ func MapUintptrArrToUintList(m UintList, f func(uint) []uintptr) UintptrArrList { acc := NilUintptrArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintList: uint->[]byte */ func MapByteArrToUintList(m UintList, f func(uint) []byte) ByteArrList { acc := NilByteArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintList: uint->[]rune */ func MapRuneArrToUintList(m UintList, f func(uint) []rune) RuneArrList { acc := NilRuneArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintList: uint->[]float32 */ func MapFloat32ArrToUintList(m UintList, f func(uint) []float32) Float32ArrList { acc := NilFloat32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintList: uint->[]float64 */ func MapFloat64ArrToUintList(m UintList, f func(uint) []float64) Float64ArrList { acc := NilFloat64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintList: uint->[]complex64 */ func MapComplex64ArrToUintList(m UintList, f func(uint) []complex64) Complex64ArrList { acc := NilComplex64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintList: uint->[]complex128 */ func MapComplex128ArrToUintList(m UintList, f func(uint) []complex128) Complex128ArrList { acc := NilComplex128ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintList: uint->[]Any */ func MapAnyArrToUintList(m UintList, f func(uint) []Any) AnyArrList { acc := NilAnyArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintList: uint->BoolList */ func MapBoolListToUintList(m UintList, f func(uint) BoolList) BoolListList { acc := NilBoolListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintList: uint->StringList */ func MapStringListToUintList(m UintList, f func(uint) StringList) StringListList { acc := NilStringListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintList: uint->IntList */ func MapIntListToUintList(m UintList, f func(uint) IntList) IntListList { acc := NilIntListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintList: uint->Int8List */ func MapInt8ListToUintList(m UintList, f func(uint) Int8List) Int8ListList { acc := NilInt8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintList: uint->Int16List */ func MapInt16ListToUintList(m UintList, f func(uint) Int16List) Int16ListList { acc := NilInt16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintList: uint->Int32List */ func MapInt32ListToUintList(m UintList, f func(uint) Int32List) Int32ListList { acc := NilInt32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintList: uint->Int64List */ func MapInt64ListToUintList(m UintList, f func(uint) Int64List) Int64ListList { acc := NilInt64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintList: uint->UintList */ func MapUintListToUintList(m UintList, f func(uint) UintList) UintListList { acc := NilUintListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintList: uint->Uint8List */ func MapUint8ListToUintList(m UintList, f func(uint) Uint8List) Uint8ListList { acc := NilUint8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintList: uint->Uint16List */ func MapUint16ListToUintList(m UintList, f func(uint) Uint16List) Uint16ListList { acc := NilUint16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintList: uint->Uint32List */ func MapUint32ListToUintList(m UintList, f func(uint) Uint32List) Uint32ListList { acc := NilUint32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintList: uint->Uint64List */ func MapUint64ListToUintList(m UintList, f func(uint) Uint64List) Uint64ListList { acc := NilUint64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintList: uint->UintptrList */ func MapUintptrListToUintList(m UintList, f func(uint) UintptrList) UintptrListList { acc := NilUintptrListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintList: uint->ByteList */ func MapByteListToUintList(m UintList, f func(uint) ByteList) ByteListList { acc := NilByteListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintList: uint->RuneList */ func MapRuneListToUintList(m UintList, f func(uint) RuneList) RuneListList { acc := NilRuneListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintList: uint->Float32List */ func MapFloat32ListToUintList(m UintList, f func(uint) Float32List) Float32ListList { acc := NilFloat32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintList: uint->Float64List */ func MapFloat64ListToUintList(m UintList, f func(uint) Float64List) Float64ListList { acc := NilFloat64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintList: uint->Complex64List */ func MapComplex64ListToUintList(m UintList, f func(uint) Complex64List) Complex64ListList { acc := NilComplex64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintList: uint->Complex128List */ func MapComplex128ListToUintList(m UintList, f func(uint) Complex128List) Complex128ListList { acc := NilComplex128ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintList: uint->AnyList */ func MapAnyListToUintList(m UintList, f func(uint) AnyList) AnyListList { acc := NilAnyListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8List: uint8->bool */ func MapBoolToUint8List(m Uint8List, f func(uint8) bool) BoolList { acc := NilBoolList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8List: uint8->string */ func MapStringToUint8List(m Uint8List, f func(uint8) string) StringList { acc := NilStringList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8List: uint8->int */ func MapIntToUint8List(m Uint8List, f func(uint8) int) IntList { acc := NilIntList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8List: uint8->int8 */ func MapInt8ToUint8List(m Uint8List, f func(uint8) int8) Int8List { acc := NilInt8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8List: uint8->int16 */ func MapInt16ToUint8List(m Uint8List, f func(uint8) int16) Int16List { acc := NilInt16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8List: uint8->int32 */ func MapInt32ToUint8List(m Uint8List, f func(uint8) int32) Int32List { acc := NilInt32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8List: uint8->int64 */ func MapInt64ToUint8List(m Uint8List, f func(uint8) int64) Int64List { acc := NilInt64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8List: uint8->uint */ func MapUintToUint8List(m Uint8List, f func(uint8) uint) UintList { acc := NilUintList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8List: uint8->uint8 */ func MapUint8ToUint8List(m Uint8List, f func(uint8) uint8) Uint8List { acc := NilUint8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8List: uint8->uint16 */ func MapUint16ToUint8List(m Uint8List, f func(uint8) uint16) Uint16List { acc := NilUint16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8List: uint8->uint32 */ func MapUint32ToUint8List(m Uint8List, f func(uint8) uint32) Uint32List { acc := NilUint32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8List: uint8->uint64 */ func MapUint64ToUint8List(m Uint8List, f func(uint8) uint64) Uint64List { acc := NilUint64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8List: uint8->uintptr */ func MapUintptrToUint8List(m Uint8List, f func(uint8) uintptr) UintptrList { acc := NilUintptrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8List: uint8->byte */ func MapByteToUint8List(m Uint8List, f func(uint8) byte) ByteList { acc := NilByteList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8List: uint8->rune */ func MapRuneToUint8List(m Uint8List, f func(uint8) rune) RuneList { acc := NilRuneList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8List: uint8->float32 */ func MapFloat32ToUint8List(m Uint8List, f func(uint8) float32) Float32List { acc := NilFloat32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8List: uint8->float64 */ func MapFloat64ToUint8List(m Uint8List, f func(uint8) float64) Float64List { acc := NilFloat64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8List: uint8->complex64 */ func MapComplex64ToUint8List(m Uint8List, f func(uint8) complex64) Complex64List { acc := NilComplex64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8List: uint8->complex128 */ func MapComplex128ToUint8List(m Uint8List, f func(uint8) complex128) Complex128List { acc := NilComplex128List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8List: uint8->Any */ func MapAnyToUint8List(m Uint8List, f func(uint8) Any) AnyList { acc := NilAnyList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8List: uint8->BoolOption */ func MapBoolOptionToUint8List(m Uint8List, f func(uint8) BoolOption) BoolOptionList { acc := NilBoolOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8List: uint8->StringOption */ func MapStringOptionToUint8List(m Uint8List, f func(uint8) StringOption) StringOptionList { acc := NilStringOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8List: uint8->IntOption */ func MapIntOptionToUint8List(m Uint8List, f func(uint8) IntOption) IntOptionList { acc := NilIntOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8List: uint8->Int8Option */ func MapInt8OptionToUint8List(m Uint8List, f func(uint8) Int8Option) Int8OptionList { acc := NilInt8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8List: uint8->Int16Option */ func MapInt16OptionToUint8List(m Uint8List, f func(uint8) Int16Option) Int16OptionList { acc := NilInt16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8List: uint8->Int32Option */ func MapInt32OptionToUint8List(m Uint8List, f func(uint8) Int32Option) Int32OptionList { acc := NilInt32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8List: uint8->Int64Option */ func MapInt64OptionToUint8List(m Uint8List, f func(uint8) Int64Option) Int64OptionList { acc := NilInt64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8List: uint8->UintOption */ func MapUintOptionToUint8List(m Uint8List, f func(uint8) UintOption) UintOptionList { acc := NilUintOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8List: uint8->Uint8Option */ func MapUint8OptionToUint8List(m Uint8List, f func(uint8) Uint8Option) Uint8OptionList { acc := NilUint8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8List: uint8->Uint16Option */ func MapUint16OptionToUint8List(m Uint8List, f func(uint8) Uint16Option) Uint16OptionList { acc := NilUint16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8List: uint8->Uint32Option */ func MapUint32OptionToUint8List(m Uint8List, f func(uint8) Uint32Option) Uint32OptionList { acc := NilUint32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8List: uint8->Uint64Option */ func MapUint64OptionToUint8List(m Uint8List, f func(uint8) Uint64Option) Uint64OptionList { acc := NilUint64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8List: uint8->UintptrOption */ func MapUintptrOptionToUint8List(m Uint8List, f func(uint8) UintptrOption) UintptrOptionList { acc := NilUintptrOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8List: uint8->ByteOption */ func MapByteOptionToUint8List(m Uint8List, f func(uint8) ByteOption) ByteOptionList { acc := NilByteOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8List: uint8->RuneOption */ func MapRuneOptionToUint8List(m Uint8List, f func(uint8) RuneOption) RuneOptionList { acc := NilRuneOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8List: uint8->Float32Option */ func MapFloat32OptionToUint8List(m Uint8List, f func(uint8) Float32Option) Float32OptionList { acc := NilFloat32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8List: uint8->Float64Option */ func MapFloat64OptionToUint8List(m Uint8List, f func(uint8) Float64Option) Float64OptionList { acc := NilFloat64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8List: uint8->Complex64Option */ func MapComplex64OptionToUint8List(m Uint8List, f func(uint8) Complex64Option) Complex64OptionList { acc := NilComplex64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8List: uint8->Complex128Option */ func MapComplex128OptionToUint8List(m Uint8List, f func(uint8) Complex128Option) Complex128OptionList { acc := NilComplex128OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8List: uint8->AnyOption */ func MapAnyOptionToUint8List(m Uint8List, f func(uint8) AnyOption) AnyOptionList { acc := NilAnyOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8List: uint8->[]bool */ func MapBoolArrToUint8List(m Uint8List, f func(uint8) []bool) BoolArrList { acc := NilBoolArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8List: uint8->[]string */ func MapStringArrToUint8List(m Uint8List, f func(uint8) []string) StringArrList { acc := NilStringArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8List: uint8->[]int */ func MapIntArrToUint8List(m Uint8List, f func(uint8) []int) IntArrList { acc := NilIntArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8List: uint8->[]int8 */ func MapInt8ArrToUint8List(m Uint8List, f func(uint8) []int8) Int8ArrList { acc := NilInt8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8List: uint8->[]int16 */ func MapInt16ArrToUint8List(m Uint8List, f func(uint8) []int16) Int16ArrList { acc := NilInt16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8List: uint8->[]int32 */ func MapInt32ArrToUint8List(m Uint8List, f func(uint8) []int32) Int32ArrList { acc := NilInt32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8List: uint8->[]int64 */ func MapInt64ArrToUint8List(m Uint8List, f func(uint8) []int64) Int64ArrList { acc := NilInt64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8List: uint8->[]uint */ func MapUintArrToUint8List(m Uint8List, f func(uint8) []uint) UintArrList { acc := NilUintArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8List: uint8->[]uint8 */ func MapUint8ArrToUint8List(m Uint8List, f func(uint8) []uint8) Uint8ArrList { acc := NilUint8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8List: uint8->[]uint16 */ func MapUint16ArrToUint8List(m Uint8List, f func(uint8) []uint16) Uint16ArrList { acc := NilUint16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8List: uint8->[]uint32 */ func MapUint32ArrToUint8List(m Uint8List, f func(uint8) []uint32) Uint32ArrList { acc := NilUint32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8List: uint8->[]uint64 */ func MapUint64ArrToUint8List(m Uint8List, f func(uint8) []uint64) Uint64ArrList { acc := NilUint64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8List: uint8->[]uintptr */ func MapUintptrArrToUint8List(m Uint8List, f func(uint8) []uintptr) UintptrArrList { acc := NilUintptrArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8List: uint8->[]byte */ func MapByteArrToUint8List(m Uint8List, f func(uint8) []byte) ByteArrList { acc := NilByteArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8List: uint8->[]rune */ func MapRuneArrToUint8List(m Uint8List, f func(uint8) []rune) RuneArrList { acc := NilRuneArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8List: uint8->[]float32 */ func MapFloat32ArrToUint8List(m Uint8List, f func(uint8) []float32) Float32ArrList { acc := NilFloat32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8List: uint8->[]float64 */ func MapFloat64ArrToUint8List(m Uint8List, f func(uint8) []float64) Float64ArrList { acc := NilFloat64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8List: uint8->[]complex64 */ func MapComplex64ArrToUint8List(m Uint8List, f func(uint8) []complex64) Complex64ArrList { acc := NilComplex64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8List: uint8->[]complex128 */ func MapComplex128ArrToUint8List(m Uint8List, f func(uint8) []complex128) Complex128ArrList { acc := NilComplex128ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8List: uint8->[]Any */ func MapAnyArrToUint8List(m Uint8List, f func(uint8) []Any) AnyArrList { acc := NilAnyArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8List: uint8->BoolList */ func MapBoolListToUint8List(m Uint8List, f func(uint8) BoolList) BoolListList { acc := NilBoolListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8List: uint8->StringList */ func MapStringListToUint8List(m Uint8List, f func(uint8) StringList) StringListList { acc := NilStringListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8List: uint8->IntList */ func MapIntListToUint8List(m Uint8List, f func(uint8) IntList) IntListList { acc := NilIntListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8List: uint8->Int8List */ func MapInt8ListToUint8List(m Uint8List, f func(uint8) Int8List) Int8ListList { acc := NilInt8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8List: uint8->Int16List */ func MapInt16ListToUint8List(m Uint8List, f func(uint8) Int16List) Int16ListList { acc := NilInt16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8List: uint8->Int32List */ func MapInt32ListToUint8List(m Uint8List, f func(uint8) Int32List) Int32ListList { acc := NilInt32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8List: uint8->Int64List */ func MapInt64ListToUint8List(m Uint8List, f func(uint8) Int64List) Int64ListList { acc := NilInt64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8List: uint8->UintList */ func MapUintListToUint8List(m Uint8List, f func(uint8) UintList) UintListList { acc := NilUintListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8List: uint8->Uint8List */ func MapUint8ListToUint8List(m Uint8List, f func(uint8) Uint8List) Uint8ListList { acc := NilUint8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8List: uint8->Uint16List */ func MapUint16ListToUint8List(m Uint8List, f func(uint8) Uint16List) Uint16ListList { acc := NilUint16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8List: uint8->Uint32List */ func MapUint32ListToUint8List(m Uint8List, f func(uint8) Uint32List) Uint32ListList { acc := NilUint32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8List: uint8->Uint64List */ func MapUint64ListToUint8List(m Uint8List, f func(uint8) Uint64List) Uint64ListList { acc := NilUint64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8List: uint8->UintptrList */ func MapUintptrListToUint8List(m Uint8List, f func(uint8) UintptrList) UintptrListList { acc := NilUintptrListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8List: uint8->ByteList */ func MapByteListToUint8List(m Uint8List, f func(uint8) ByteList) ByteListList { acc := NilByteListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8List: uint8->RuneList */ func MapRuneListToUint8List(m Uint8List, f func(uint8) RuneList) RuneListList { acc := NilRuneListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8List: uint8->Float32List */ func MapFloat32ListToUint8List(m Uint8List, f func(uint8) Float32List) Float32ListList { acc := NilFloat32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8List: uint8->Float64List */ func MapFloat64ListToUint8List(m Uint8List, f func(uint8) Float64List) Float64ListList { acc := NilFloat64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8List: uint8->Complex64List */ func MapComplex64ListToUint8List(m Uint8List, f func(uint8) Complex64List) Complex64ListList { acc := NilComplex64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8List: uint8->Complex128List */ func MapComplex128ListToUint8List(m Uint8List, f func(uint8) Complex128List) Complex128ListList { acc := NilComplex128ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8List: uint8->AnyList */ func MapAnyListToUint8List(m Uint8List, f func(uint8) AnyList) AnyListList { acc := NilAnyListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16List: uint16->bool */ func MapBoolToUint16List(m Uint16List, f func(uint16) bool) BoolList { acc := NilBoolList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16List: uint16->string */ func MapStringToUint16List(m Uint16List, f func(uint16) string) StringList { acc := NilStringList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16List: uint16->int */ func MapIntToUint16List(m Uint16List, f func(uint16) int) IntList { acc := NilIntList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16List: uint16->int8 */ func MapInt8ToUint16List(m Uint16List, f func(uint16) int8) Int8List { acc := NilInt8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16List: uint16->int16 */ func MapInt16ToUint16List(m Uint16List, f func(uint16) int16) Int16List { acc := NilInt16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16List: uint16->int32 */ func MapInt32ToUint16List(m Uint16List, f func(uint16) int32) Int32List { acc := NilInt32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16List: uint16->int64 */ func MapInt64ToUint16List(m Uint16List, f func(uint16) int64) Int64List { acc := NilInt64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16List: uint16->uint */ func MapUintToUint16List(m Uint16List, f func(uint16) uint) UintList { acc := NilUintList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16List: uint16->uint8 */ func MapUint8ToUint16List(m Uint16List, f func(uint16) uint8) Uint8List { acc := NilUint8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16List: uint16->uint16 */ func MapUint16ToUint16List(m Uint16List, f func(uint16) uint16) Uint16List { acc := NilUint16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16List: uint16->uint32 */ func MapUint32ToUint16List(m Uint16List, f func(uint16) uint32) Uint32List { acc := NilUint32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16List: uint16->uint64 */ func MapUint64ToUint16List(m Uint16List, f func(uint16) uint64) Uint64List { acc := NilUint64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16List: uint16->uintptr */ func MapUintptrToUint16List(m Uint16List, f func(uint16) uintptr) UintptrList { acc := NilUintptrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16List: uint16->byte */ func MapByteToUint16List(m Uint16List, f func(uint16) byte) ByteList { acc := NilByteList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16List: uint16->rune */ func MapRuneToUint16List(m Uint16List, f func(uint16) rune) RuneList { acc := NilRuneList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16List: uint16->float32 */ func MapFloat32ToUint16List(m Uint16List, f func(uint16) float32) Float32List { acc := NilFloat32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16List: uint16->float64 */ func MapFloat64ToUint16List(m Uint16List, f func(uint16) float64) Float64List { acc := NilFloat64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16List: uint16->complex64 */ func MapComplex64ToUint16List(m Uint16List, f func(uint16) complex64) Complex64List { acc := NilComplex64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16List: uint16->complex128 */ func MapComplex128ToUint16List(m Uint16List, f func(uint16) complex128) Complex128List { acc := NilComplex128List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16List: uint16->Any */ func MapAnyToUint16List(m Uint16List, f func(uint16) Any) AnyList { acc := NilAnyList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16List: uint16->BoolOption */ func MapBoolOptionToUint16List(m Uint16List, f func(uint16) BoolOption) BoolOptionList { acc := NilBoolOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16List: uint16->StringOption */ func MapStringOptionToUint16List(m Uint16List, f func(uint16) StringOption) StringOptionList { acc := NilStringOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16List: uint16->IntOption */ func MapIntOptionToUint16List(m Uint16List, f func(uint16) IntOption) IntOptionList { acc := NilIntOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16List: uint16->Int8Option */ func MapInt8OptionToUint16List(m Uint16List, f func(uint16) Int8Option) Int8OptionList { acc := NilInt8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16List: uint16->Int16Option */ func MapInt16OptionToUint16List(m Uint16List, f func(uint16) Int16Option) Int16OptionList { acc := NilInt16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16List: uint16->Int32Option */ func MapInt32OptionToUint16List(m Uint16List, f func(uint16) Int32Option) Int32OptionList { acc := NilInt32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16List: uint16->Int64Option */ func MapInt64OptionToUint16List(m Uint16List, f func(uint16) Int64Option) Int64OptionList { acc := NilInt64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16List: uint16->UintOption */ func MapUintOptionToUint16List(m Uint16List, f func(uint16) UintOption) UintOptionList { acc := NilUintOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16List: uint16->Uint8Option */ func MapUint8OptionToUint16List(m Uint16List, f func(uint16) Uint8Option) Uint8OptionList { acc := NilUint8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16List: uint16->Uint16Option */ func MapUint16OptionToUint16List(m Uint16List, f func(uint16) Uint16Option) Uint16OptionList { acc := NilUint16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16List: uint16->Uint32Option */ func MapUint32OptionToUint16List(m Uint16List, f func(uint16) Uint32Option) Uint32OptionList { acc := NilUint32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16List: uint16->Uint64Option */ func MapUint64OptionToUint16List(m Uint16List, f func(uint16) Uint64Option) Uint64OptionList { acc := NilUint64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16List: uint16->UintptrOption */ func MapUintptrOptionToUint16List(m Uint16List, f func(uint16) UintptrOption) UintptrOptionList { acc := NilUintptrOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16List: uint16->ByteOption */ func MapByteOptionToUint16List(m Uint16List, f func(uint16) ByteOption) ByteOptionList { acc := NilByteOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16List: uint16->RuneOption */ func MapRuneOptionToUint16List(m Uint16List, f func(uint16) RuneOption) RuneOptionList { acc := NilRuneOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16List: uint16->Float32Option */ func MapFloat32OptionToUint16List(m Uint16List, f func(uint16) Float32Option) Float32OptionList { acc := NilFloat32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16List: uint16->Float64Option */ func MapFloat64OptionToUint16List(m Uint16List, f func(uint16) Float64Option) Float64OptionList { acc := NilFloat64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16List: uint16->Complex64Option */ func MapComplex64OptionToUint16List(m Uint16List, f func(uint16) Complex64Option) Complex64OptionList { acc := NilComplex64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16List: uint16->Complex128Option */ func MapComplex128OptionToUint16List(m Uint16List, f func(uint16) Complex128Option) Complex128OptionList { acc := NilComplex128OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16List: uint16->AnyOption */ func MapAnyOptionToUint16List(m Uint16List, f func(uint16) AnyOption) AnyOptionList { acc := NilAnyOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16List: uint16->[]bool */ func MapBoolArrToUint16List(m Uint16List, f func(uint16) []bool) BoolArrList { acc := NilBoolArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16List: uint16->[]string */ func MapStringArrToUint16List(m Uint16List, f func(uint16) []string) StringArrList { acc := NilStringArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16List: uint16->[]int */ func MapIntArrToUint16List(m Uint16List, f func(uint16) []int) IntArrList { acc := NilIntArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16List: uint16->[]int8 */ func MapInt8ArrToUint16List(m Uint16List, f func(uint16) []int8) Int8ArrList { acc := NilInt8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16List: uint16->[]int16 */ func MapInt16ArrToUint16List(m Uint16List, f func(uint16) []int16) Int16ArrList { acc := NilInt16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16List: uint16->[]int32 */ func MapInt32ArrToUint16List(m Uint16List, f func(uint16) []int32) Int32ArrList { acc := NilInt32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16List: uint16->[]int64 */ func MapInt64ArrToUint16List(m Uint16List, f func(uint16) []int64) Int64ArrList { acc := NilInt64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16List: uint16->[]uint */ func MapUintArrToUint16List(m Uint16List, f func(uint16) []uint) UintArrList { acc := NilUintArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16List: uint16->[]uint8 */ func MapUint8ArrToUint16List(m Uint16List, f func(uint16) []uint8) Uint8ArrList { acc := NilUint8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16List: uint16->[]uint16 */ func MapUint16ArrToUint16List(m Uint16List, f func(uint16) []uint16) Uint16ArrList { acc := NilUint16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16List: uint16->[]uint32 */ func MapUint32ArrToUint16List(m Uint16List, f func(uint16) []uint32) Uint32ArrList { acc := NilUint32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16List: uint16->[]uint64 */ func MapUint64ArrToUint16List(m Uint16List, f func(uint16) []uint64) Uint64ArrList { acc := NilUint64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16List: uint16->[]uintptr */ func MapUintptrArrToUint16List(m Uint16List, f func(uint16) []uintptr) UintptrArrList { acc := NilUintptrArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16List: uint16->[]byte */ func MapByteArrToUint16List(m Uint16List, f func(uint16) []byte) ByteArrList { acc := NilByteArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16List: uint16->[]rune */ func MapRuneArrToUint16List(m Uint16List, f func(uint16) []rune) RuneArrList { acc := NilRuneArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16List: uint16->[]float32 */ func MapFloat32ArrToUint16List(m Uint16List, f func(uint16) []float32) Float32ArrList { acc := NilFloat32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16List: uint16->[]float64 */ func MapFloat64ArrToUint16List(m Uint16List, f func(uint16) []float64) Float64ArrList { acc := NilFloat64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16List: uint16->[]complex64 */ func MapComplex64ArrToUint16List(m Uint16List, f func(uint16) []complex64) Complex64ArrList { acc := NilComplex64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16List: uint16->[]complex128 */ func MapComplex128ArrToUint16List(m Uint16List, f func(uint16) []complex128) Complex128ArrList { acc := NilComplex128ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16List: uint16->[]Any */ func MapAnyArrToUint16List(m Uint16List, f func(uint16) []Any) AnyArrList { acc := NilAnyArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16List: uint16->BoolList */ func MapBoolListToUint16List(m Uint16List, f func(uint16) BoolList) BoolListList { acc := NilBoolListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16List: uint16->StringList */ func MapStringListToUint16List(m Uint16List, f func(uint16) StringList) StringListList { acc := NilStringListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16List: uint16->IntList */ func MapIntListToUint16List(m Uint16List, f func(uint16) IntList) IntListList { acc := NilIntListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16List: uint16->Int8List */ func MapInt8ListToUint16List(m Uint16List, f func(uint16) Int8List) Int8ListList { acc := NilInt8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16List: uint16->Int16List */ func MapInt16ListToUint16List(m Uint16List, f func(uint16) Int16List) Int16ListList { acc := NilInt16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16List: uint16->Int32List */ func MapInt32ListToUint16List(m Uint16List, f func(uint16) Int32List) Int32ListList { acc := NilInt32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16List: uint16->Int64List */ func MapInt64ListToUint16List(m Uint16List, f func(uint16) Int64List) Int64ListList { acc := NilInt64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16List: uint16->UintList */ func MapUintListToUint16List(m Uint16List, f func(uint16) UintList) UintListList { acc := NilUintListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16List: uint16->Uint8List */ func MapUint8ListToUint16List(m Uint16List, f func(uint16) Uint8List) Uint8ListList { acc := NilUint8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16List: uint16->Uint16List */ func MapUint16ListToUint16List(m Uint16List, f func(uint16) Uint16List) Uint16ListList { acc := NilUint16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16List: uint16->Uint32List */ func MapUint32ListToUint16List(m Uint16List, f func(uint16) Uint32List) Uint32ListList { acc := NilUint32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16List: uint16->Uint64List */ func MapUint64ListToUint16List(m Uint16List, f func(uint16) Uint64List) Uint64ListList { acc := NilUint64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16List: uint16->UintptrList */ func MapUintptrListToUint16List(m Uint16List, f func(uint16) UintptrList) UintptrListList { acc := NilUintptrListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16List: uint16->ByteList */ func MapByteListToUint16List(m Uint16List, f func(uint16) ByteList) ByteListList { acc := NilByteListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16List: uint16->RuneList */ func MapRuneListToUint16List(m Uint16List, f func(uint16) RuneList) RuneListList { acc := NilRuneListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16List: uint16->Float32List */ func MapFloat32ListToUint16List(m Uint16List, f func(uint16) Float32List) Float32ListList { acc := NilFloat32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16List: uint16->Float64List */ func MapFloat64ListToUint16List(m Uint16List, f func(uint16) Float64List) Float64ListList { acc := NilFloat64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16List: uint16->Complex64List */ func MapComplex64ListToUint16List(m Uint16List, f func(uint16) Complex64List) Complex64ListList { acc := NilComplex64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16List: uint16->Complex128List */ func MapComplex128ListToUint16List(m Uint16List, f func(uint16) Complex128List) Complex128ListList { acc := NilComplex128ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16List: uint16->AnyList */ func MapAnyListToUint16List(m Uint16List, f func(uint16) AnyList) AnyListList { acc := NilAnyListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32List: uint32->bool */ func MapBoolToUint32List(m Uint32List, f func(uint32) bool) BoolList { acc := NilBoolList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32List: uint32->string */ func MapStringToUint32List(m Uint32List, f func(uint32) string) StringList { acc := NilStringList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32List: uint32->int */ func MapIntToUint32List(m Uint32List, f func(uint32) int) IntList { acc := NilIntList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32List: uint32->int8 */ func MapInt8ToUint32List(m Uint32List, f func(uint32) int8) Int8List { acc := NilInt8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32List: uint32->int16 */ func MapInt16ToUint32List(m Uint32List, f func(uint32) int16) Int16List { acc := NilInt16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32List: uint32->int32 */ func MapInt32ToUint32List(m Uint32List, f func(uint32) int32) Int32List { acc := NilInt32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32List: uint32->int64 */ func MapInt64ToUint32List(m Uint32List, f func(uint32) int64) Int64List { acc := NilInt64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32List: uint32->uint */ func MapUintToUint32List(m Uint32List, f func(uint32) uint) UintList { acc := NilUintList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32List: uint32->uint8 */ func MapUint8ToUint32List(m Uint32List, f func(uint32) uint8) Uint8List { acc := NilUint8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32List: uint32->uint16 */ func MapUint16ToUint32List(m Uint32List, f func(uint32) uint16) Uint16List { acc := NilUint16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32List: uint32->uint32 */ func MapUint32ToUint32List(m Uint32List, f func(uint32) uint32) Uint32List { acc := NilUint32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32List: uint32->uint64 */ func MapUint64ToUint32List(m Uint32List, f func(uint32) uint64) Uint64List { acc := NilUint64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32List: uint32->uintptr */ func MapUintptrToUint32List(m Uint32List, f func(uint32) uintptr) UintptrList { acc := NilUintptrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32List: uint32->byte */ func MapByteToUint32List(m Uint32List, f func(uint32) byte) ByteList { acc := NilByteList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32List: uint32->rune */ func MapRuneToUint32List(m Uint32List, f func(uint32) rune) RuneList { acc := NilRuneList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32List: uint32->float32 */ func MapFloat32ToUint32List(m Uint32List, f func(uint32) float32) Float32List { acc := NilFloat32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32List: uint32->float64 */ func MapFloat64ToUint32List(m Uint32List, f func(uint32) float64) Float64List { acc := NilFloat64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32List: uint32->complex64 */ func MapComplex64ToUint32List(m Uint32List, f func(uint32) complex64) Complex64List { acc := NilComplex64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32List: uint32->complex128 */ func MapComplex128ToUint32List(m Uint32List, f func(uint32) complex128) Complex128List { acc := NilComplex128List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32List: uint32->Any */ func MapAnyToUint32List(m Uint32List, f func(uint32) Any) AnyList { acc := NilAnyList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32List: uint32->BoolOption */ func MapBoolOptionToUint32List(m Uint32List, f func(uint32) BoolOption) BoolOptionList { acc := NilBoolOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32List: uint32->StringOption */ func MapStringOptionToUint32List(m Uint32List, f func(uint32) StringOption) StringOptionList { acc := NilStringOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32List: uint32->IntOption */ func MapIntOptionToUint32List(m Uint32List, f func(uint32) IntOption) IntOptionList { acc := NilIntOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32List: uint32->Int8Option */ func MapInt8OptionToUint32List(m Uint32List, f func(uint32) Int8Option) Int8OptionList { acc := NilInt8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32List: uint32->Int16Option */ func MapInt16OptionToUint32List(m Uint32List, f func(uint32) Int16Option) Int16OptionList { acc := NilInt16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32List: uint32->Int32Option */ func MapInt32OptionToUint32List(m Uint32List, f func(uint32) Int32Option) Int32OptionList { acc := NilInt32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32List: uint32->Int64Option */ func MapInt64OptionToUint32List(m Uint32List, f func(uint32) Int64Option) Int64OptionList { acc := NilInt64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32List: uint32->UintOption */ func MapUintOptionToUint32List(m Uint32List, f func(uint32) UintOption) UintOptionList { acc := NilUintOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32List: uint32->Uint8Option */ func MapUint8OptionToUint32List(m Uint32List, f func(uint32) Uint8Option) Uint8OptionList { acc := NilUint8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32List: uint32->Uint16Option */ func MapUint16OptionToUint32List(m Uint32List, f func(uint32) Uint16Option) Uint16OptionList { acc := NilUint16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32List: uint32->Uint32Option */ func MapUint32OptionToUint32List(m Uint32List, f func(uint32) Uint32Option) Uint32OptionList { acc := NilUint32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32List: uint32->Uint64Option */ func MapUint64OptionToUint32List(m Uint32List, f func(uint32) Uint64Option) Uint64OptionList { acc := NilUint64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32List: uint32->UintptrOption */ func MapUintptrOptionToUint32List(m Uint32List, f func(uint32) UintptrOption) UintptrOptionList { acc := NilUintptrOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32List: uint32->ByteOption */ func MapByteOptionToUint32List(m Uint32List, f func(uint32) ByteOption) ByteOptionList { acc := NilByteOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32List: uint32->RuneOption */ func MapRuneOptionToUint32List(m Uint32List, f func(uint32) RuneOption) RuneOptionList { acc := NilRuneOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32List: uint32->Float32Option */ func MapFloat32OptionToUint32List(m Uint32List, f func(uint32) Float32Option) Float32OptionList { acc := NilFloat32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32List: uint32->Float64Option */ func MapFloat64OptionToUint32List(m Uint32List, f func(uint32) Float64Option) Float64OptionList { acc := NilFloat64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32List: uint32->Complex64Option */ func MapComplex64OptionToUint32List(m Uint32List, f func(uint32) Complex64Option) Complex64OptionList { acc := NilComplex64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32List: uint32->Complex128Option */ func MapComplex128OptionToUint32List(m Uint32List, f func(uint32) Complex128Option) Complex128OptionList { acc := NilComplex128OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32List: uint32->AnyOption */ func MapAnyOptionToUint32List(m Uint32List, f func(uint32) AnyOption) AnyOptionList { acc := NilAnyOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32List: uint32->[]bool */ func MapBoolArrToUint32List(m Uint32List, f func(uint32) []bool) BoolArrList { acc := NilBoolArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32List: uint32->[]string */ func MapStringArrToUint32List(m Uint32List, f func(uint32) []string) StringArrList { acc := NilStringArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32List: uint32->[]int */ func MapIntArrToUint32List(m Uint32List, f func(uint32) []int) IntArrList { acc := NilIntArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32List: uint32->[]int8 */ func MapInt8ArrToUint32List(m Uint32List, f func(uint32) []int8) Int8ArrList { acc := NilInt8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32List: uint32->[]int16 */ func MapInt16ArrToUint32List(m Uint32List, f func(uint32) []int16) Int16ArrList { acc := NilInt16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32List: uint32->[]int32 */ func MapInt32ArrToUint32List(m Uint32List, f func(uint32) []int32) Int32ArrList { acc := NilInt32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32List: uint32->[]int64 */ func MapInt64ArrToUint32List(m Uint32List, f func(uint32) []int64) Int64ArrList { acc := NilInt64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32List: uint32->[]uint */ func MapUintArrToUint32List(m Uint32List, f func(uint32) []uint) UintArrList { acc := NilUintArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32List: uint32->[]uint8 */ func MapUint8ArrToUint32List(m Uint32List, f func(uint32) []uint8) Uint8ArrList { acc := NilUint8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32List: uint32->[]uint16 */ func MapUint16ArrToUint32List(m Uint32List, f func(uint32) []uint16) Uint16ArrList { acc := NilUint16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32List: uint32->[]uint32 */ func MapUint32ArrToUint32List(m Uint32List, f func(uint32) []uint32) Uint32ArrList { acc := NilUint32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32List: uint32->[]uint64 */ func MapUint64ArrToUint32List(m Uint32List, f func(uint32) []uint64) Uint64ArrList { acc := NilUint64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32List: uint32->[]uintptr */ func MapUintptrArrToUint32List(m Uint32List, f func(uint32) []uintptr) UintptrArrList { acc := NilUintptrArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32List: uint32->[]byte */ func MapByteArrToUint32List(m Uint32List, f func(uint32) []byte) ByteArrList { acc := NilByteArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32List: uint32->[]rune */ func MapRuneArrToUint32List(m Uint32List, f func(uint32) []rune) RuneArrList { acc := NilRuneArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32List: uint32->[]float32 */ func MapFloat32ArrToUint32List(m Uint32List, f func(uint32) []float32) Float32ArrList { acc := NilFloat32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32List: uint32->[]float64 */ func MapFloat64ArrToUint32List(m Uint32List, f func(uint32) []float64) Float64ArrList { acc := NilFloat64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32List: uint32->[]complex64 */ func MapComplex64ArrToUint32List(m Uint32List, f func(uint32) []complex64) Complex64ArrList { acc := NilComplex64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32List: uint32->[]complex128 */ func MapComplex128ArrToUint32List(m Uint32List, f func(uint32) []complex128) Complex128ArrList { acc := NilComplex128ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32List: uint32->[]Any */ func MapAnyArrToUint32List(m Uint32List, f func(uint32) []Any) AnyArrList { acc := NilAnyArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32List: uint32->BoolList */ func MapBoolListToUint32List(m Uint32List, f func(uint32) BoolList) BoolListList { acc := NilBoolListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32List: uint32->StringList */ func MapStringListToUint32List(m Uint32List, f func(uint32) StringList) StringListList { acc := NilStringListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32List: uint32->IntList */ func MapIntListToUint32List(m Uint32List, f func(uint32) IntList) IntListList { acc := NilIntListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32List: uint32->Int8List */ func MapInt8ListToUint32List(m Uint32List, f func(uint32) Int8List) Int8ListList { acc := NilInt8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32List: uint32->Int16List */ func MapInt16ListToUint32List(m Uint32List, f func(uint32) Int16List) Int16ListList { acc := NilInt16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32List: uint32->Int32List */ func MapInt32ListToUint32List(m Uint32List, f func(uint32) Int32List) Int32ListList { acc := NilInt32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32List: uint32->Int64List */ func MapInt64ListToUint32List(m Uint32List, f func(uint32) Int64List) Int64ListList { acc := NilInt64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32List: uint32->UintList */ func MapUintListToUint32List(m Uint32List, f func(uint32) UintList) UintListList { acc := NilUintListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32List: uint32->Uint8List */ func MapUint8ListToUint32List(m Uint32List, f func(uint32) Uint8List) Uint8ListList { acc := NilUint8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32List: uint32->Uint16List */ func MapUint16ListToUint32List(m Uint32List, f func(uint32) Uint16List) Uint16ListList { acc := NilUint16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32List: uint32->Uint32List */ func MapUint32ListToUint32List(m Uint32List, f func(uint32) Uint32List) Uint32ListList { acc := NilUint32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32List: uint32->Uint64List */ func MapUint64ListToUint32List(m Uint32List, f func(uint32) Uint64List) Uint64ListList { acc := NilUint64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32List: uint32->UintptrList */ func MapUintptrListToUint32List(m Uint32List, f func(uint32) UintptrList) UintptrListList { acc := NilUintptrListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32List: uint32->ByteList */ func MapByteListToUint32List(m Uint32List, f func(uint32) ByteList) ByteListList { acc := NilByteListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32List: uint32->RuneList */ func MapRuneListToUint32List(m Uint32List, f func(uint32) RuneList) RuneListList { acc := NilRuneListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32List: uint32->Float32List */ func MapFloat32ListToUint32List(m Uint32List, f func(uint32) Float32List) Float32ListList { acc := NilFloat32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32List: uint32->Float64List */ func MapFloat64ListToUint32List(m Uint32List, f func(uint32) Float64List) Float64ListList { acc := NilFloat64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32List: uint32->Complex64List */ func MapComplex64ListToUint32List(m Uint32List, f func(uint32) Complex64List) Complex64ListList { acc := NilComplex64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32List: uint32->Complex128List */ func MapComplex128ListToUint32List(m Uint32List, f func(uint32) Complex128List) Complex128ListList { acc := NilComplex128ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32List: uint32->AnyList */ func MapAnyListToUint32List(m Uint32List, f func(uint32) AnyList) AnyListList { acc := NilAnyListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64List: uint64->bool */ func MapBoolToUint64List(m Uint64List, f func(uint64) bool) BoolList { acc := NilBoolList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64List: uint64->string */ func MapStringToUint64List(m Uint64List, f func(uint64) string) StringList { acc := NilStringList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64List: uint64->int */ func MapIntToUint64List(m Uint64List, f func(uint64) int) IntList { acc := NilIntList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64List: uint64->int8 */ func MapInt8ToUint64List(m Uint64List, f func(uint64) int8) Int8List { acc := NilInt8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64List: uint64->int16 */ func MapInt16ToUint64List(m Uint64List, f func(uint64) int16) Int16List { acc := NilInt16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64List: uint64->int32 */ func MapInt32ToUint64List(m Uint64List, f func(uint64) int32) Int32List { acc := NilInt32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64List: uint64->int64 */ func MapInt64ToUint64List(m Uint64List, f func(uint64) int64) Int64List { acc := NilInt64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64List: uint64->uint */ func MapUintToUint64List(m Uint64List, f func(uint64) uint) UintList { acc := NilUintList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64List: uint64->uint8 */ func MapUint8ToUint64List(m Uint64List, f func(uint64) uint8) Uint8List { acc := NilUint8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64List: uint64->uint16 */ func MapUint16ToUint64List(m Uint64List, f func(uint64) uint16) Uint16List { acc := NilUint16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64List: uint64->uint32 */ func MapUint32ToUint64List(m Uint64List, f func(uint64) uint32) Uint32List { acc := NilUint32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64List: uint64->uint64 */ func MapUint64ToUint64List(m Uint64List, f func(uint64) uint64) Uint64List { acc := NilUint64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64List: uint64->uintptr */ func MapUintptrToUint64List(m Uint64List, f func(uint64) uintptr) UintptrList { acc := NilUintptrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64List: uint64->byte */ func MapByteToUint64List(m Uint64List, f func(uint64) byte) ByteList { acc := NilByteList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64List: uint64->rune */ func MapRuneToUint64List(m Uint64List, f func(uint64) rune) RuneList { acc := NilRuneList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64List: uint64->float32 */ func MapFloat32ToUint64List(m Uint64List, f func(uint64) float32) Float32List { acc := NilFloat32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64List: uint64->float64 */ func MapFloat64ToUint64List(m Uint64List, f func(uint64) float64) Float64List { acc := NilFloat64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64List: uint64->complex64 */ func MapComplex64ToUint64List(m Uint64List, f func(uint64) complex64) Complex64List { acc := NilComplex64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64List: uint64->complex128 */ func MapComplex128ToUint64List(m Uint64List, f func(uint64) complex128) Complex128List { acc := NilComplex128List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64List: uint64->Any */ func MapAnyToUint64List(m Uint64List, f func(uint64) Any) AnyList { acc := NilAnyList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64List: uint64->BoolOption */ func MapBoolOptionToUint64List(m Uint64List, f func(uint64) BoolOption) BoolOptionList { acc := NilBoolOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64List: uint64->StringOption */ func MapStringOptionToUint64List(m Uint64List, f func(uint64) StringOption) StringOptionList { acc := NilStringOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64List: uint64->IntOption */ func MapIntOptionToUint64List(m Uint64List, f func(uint64) IntOption) IntOptionList { acc := NilIntOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64List: uint64->Int8Option */ func MapInt8OptionToUint64List(m Uint64List, f func(uint64) Int8Option) Int8OptionList { acc := NilInt8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64List: uint64->Int16Option */ func MapInt16OptionToUint64List(m Uint64List, f func(uint64) Int16Option) Int16OptionList { acc := NilInt16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64List: uint64->Int32Option */ func MapInt32OptionToUint64List(m Uint64List, f func(uint64) Int32Option) Int32OptionList { acc := NilInt32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64List: uint64->Int64Option */ func MapInt64OptionToUint64List(m Uint64List, f func(uint64) Int64Option) Int64OptionList { acc := NilInt64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64List: uint64->UintOption */ func MapUintOptionToUint64List(m Uint64List, f func(uint64) UintOption) UintOptionList { acc := NilUintOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64List: uint64->Uint8Option */ func MapUint8OptionToUint64List(m Uint64List, f func(uint64) Uint8Option) Uint8OptionList { acc := NilUint8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64List: uint64->Uint16Option */ func MapUint16OptionToUint64List(m Uint64List, f func(uint64) Uint16Option) Uint16OptionList { acc := NilUint16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64List: uint64->Uint32Option */ func MapUint32OptionToUint64List(m Uint64List, f func(uint64) Uint32Option) Uint32OptionList { acc := NilUint32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64List: uint64->Uint64Option */ func MapUint64OptionToUint64List(m Uint64List, f func(uint64) Uint64Option) Uint64OptionList { acc := NilUint64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64List: uint64->UintptrOption */ func MapUintptrOptionToUint64List(m Uint64List, f func(uint64) UintptrOption) UintptrOptionList { acc := NilUintptrOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64List: uint64->ByteOption */ func MapByteOptionToUint64List(m Uint64List, f func(uint64) ByteOption) ByteOptionList { acc := NilByteOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64List: uint64->RuneOption */ func MapRuneOptionToUint64List(m Uint64List, f func(uint64) RuneOption) RuneOptionList { acc := NilRuneOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64List: uint64->Float32Option */ func MapFloat32OptionToUint64List(m Uint64List, f func(uint64) Float32Option) Float32OptionList { acc := NilFloat32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64List: uint64->Float64Option */ func MapFloat64OptionToUint64List(m Uint64List, f func(uint64) Float64Option) Float64OptionList { acc := NilFloat64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64List: uint64->Complex64Option */ func MapComplex64OptionToUint64List(m Uint64List, f func(uint64) Complex64Option) Complex64OptionList { acc := NilComplex64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64List: uint64->Complex128Option */ func MapComplex128OptionToUint64List(m Uint64List, f func(uint64) Complex128Option) Complex128OptionList { acc := NilComplex128OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64List: uint64->AnyOption */ func MapAnyOptionToUint64List(m Uint64List, f func(uint64) AnyOption) AnyOptionList { acc := NilAnyOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64List: uint64->[]bool */ func MapBoolArrToUint64List(m Uint64List, f func(uint64) []bool) BoolArrList { acc := NilBoolArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64List: uint64->[]string */ func MapStringArrToUint64List(m Uint64List, f func(uint64) []string) StringArrList { acc := NilStringArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64List: uint64->[]int */ func MapIntArrToUint64List(m Uint64List, f func(uint64) []int) IntArrList { acc := NilIntArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64List: uint64->[]int8 */ func MapInt8ArrToUint64List(m Uint64List, f func(uint64) []int8) Int8ArrList { acc := NilInt8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64List: uint64->[]int16 */ func MapInt16ArrToUint64List(m Uint64List, f func(uint64) []int16) Int16ArrList { acc := NilInt16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64List: uint64->[]int32 */ func MapInt32ArrToUint64List(m Uint64List, f func(uint64) []int32) Int32ArrList { acc := NilInt32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64List: uint64->[]int64 */ func MapInt64ArrToUint64List(m Uint64List, f func(uint64) []int64) Int64ArrList { acc := NilInt64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64List: uint64->[]uint */ func MapUintArrToUint64List(m Uint64List, f func(uint64) []uint) UintArrList { acc := NilUintArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64List: uint64->[]uint8 */ func MapUint8ArrToUint64List(m Uint64List, f func(uint64) []uint8) Uint8ArrList { acc := NilUint8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64List: uint64->[]uint16 */ func MapUint16ArrToUint64List(m Uint64List, f func(uint64) []uint16) Uint16ArrList { acc := NilUint16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64List: uint64->[]uint32 */ func MapUint32ArrToUint64List(m Uint64List, f func(uint64) []uint32) Uint32ArrList { acc := NilUint32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64List: uint64->[]uint64 */ func MapUint64ArrToUint64List(m Uint64List, f func(uint64) []uint64) Uint64ArrList { acc := NilUint64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64List: uint64->[]uintptr */ func MapUintptrArrToUint64List(m Uint64List, f func(uint64) []uintptr) UintptrArrList { acc := NilUintptrArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64List: uint64->[]byte */ func MapByteArrToUint64List(m Uint64List, f func(uint64) []byte) ByteArrList { acc := NilByteArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64List: uint64->[]rune */ func MapRuneArrToUint64List(m Uint64List, f func(uint64) []rune) RuneArrList { acc := NilRuneArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64List: uint64->[]float32 */ func MapFloat32ArrToUint64List(m Uint64List, f func(uint64) []float32) Float32ArrList { acc := NilFloat32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64List: uint64->[]float64 */ func MapFloat64ArrToUint64List(m Uint64List, f func(uint64) []float64) Float64ArrList { acc := NilFloat64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64List: uint64->[]complex64 */ func MapComplex64ArrToUint64List(m Uint64List, f func(uint64) []complex64) Complex64ArrList { acc := NilComplex64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64List: uint64->[]complex128 */ func MapComplex128ArrToUint64List(m Uint64List, f func(uint64) []complex128) Complex128ArrList { acc := NilComplex128ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64List: uint64->[]Any */ func MapAnyArrToUint64List(m Uint64List, f func(uint64) []Any) AnyArrList { acc := NilAnyArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64List: uint64->BoolList */ func MapBoolListToUint64List(m Uint64List, f func(uint64) BoolList) BoolListList { acc := NilBoolListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64List: uint64->StringList */ func MapStringListToUint64List(m Uint64List, f func(uint64) StringList) StringListList { acc := NilStringListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64List: uint64->IntList */ func MapIntListToUint64List(m Uint64List, f func(uint64) IntList) IntListList { acc := NilIntListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64List: uint64->Int8List */ func MapInt8ListToUint64List(m Uint64List, f func(uint64) Int8List) Int8ListList { acc := NilInt8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64List: uint64->Int16List */ func MapInt16ListToUint64List(m Uint64List, f func(uint64) Int16List) Int16ListList { acc := NilInt16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64List: uint64->Int32List */ func MapInt32ListToUint64List(m Uint64List, f func(uint64) Int32List) Int32ListList { acc := NilInt32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64List: uint64->Int64List */ func MapInt64ListToUint64List(m Uint64List, f func(uint64) Int64List) Int64ListList { acc := NilInt64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64List: uint64->UintList */ func MapUintListToUint64List(m Uint64List, f func(uint64) UintList) UintListList { acc := NilUintListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64List: uint64->Uint8List */ func MapUint8ListToUint64List(m Uint64List, f func(uint64) Uint8List) Uint8ListList { acc := NilUint8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64List: uint64->Uint16List */ func MapUint16ListToUint64List(m Uint64List, f func(uint64) Uint16List) Uint16ListList { acc := NilUint16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64List: uint64->Uint32List */ func MapUint32ListToUint64List(m Uint64List, f func(uint64) Uint32List) Uint32ListList { acc := NilUint32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64List: uint64->Uint64List */ func MapUint64ListToUint64List(m Uint64List, f func(uint64) Uint64List) Uint64ListList { acc := NilUint64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64List: uint64->UintptrList */ func MapUintptrListToUint64List(m Uint64List, f func(uint64) UintptrList) UintptrListList { acc := NilUintptrListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64List: uint64->ByteList */ func MapByteListToUint64List(m Uint64List, f func(uint64) ByteList) ByteListList { acc := NilByteListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64List: uint64->RuneList */ func MapRuneListToUint64List(m Uint64List, f func(uint64) RuneList) RuneListList { acc := NilRuneListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64List: uint64->Float32List */ func MapFloat32ListToUint64List(m Uint64List, f func(uint64) Float32List) Float32ListList { acc := NilFloat32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64List: uint64->Float64List */ func MapFloat64ListToUint64List(m Uint64List, f func(uint64) Float64List) Float64ListList { acc := NilFloat64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64List: uint64->Complex64List */ func MapComplex64ListToUint64List(m Uint64List, f func(uint64) Complex64List) Complex64ListList { acc := NilComplex64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64List: uint64->Complex128List */ func MapComplex128ListToUint64List(m Uint64List, f func(uint64) Complex128List) Complex128ListList { acc := NilComplex128ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64List: uint64->AnyList */ func MapAnyListToUint64List(m Uint64List, f func(uint64) AnyList) AnyListList { acc := NilAnyListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrList: uintptr->bool */ func MapBoolToUintptrList(m UintptrList, f func(uintptr) bool) BoolList { acc := NilBoolList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrList: uintptr->string */ func MapStringToUintptrList(m UintptrList, f func(uintptr) string) StringList { acc := NilStringList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrList: uintptr->int */ func MapIntToUintptrList(m UintptrList, f func(uintptr) int) IntList { acc := NilIntList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrList: uintptr->int8 */ func MapInt8ToUintptrList(m UintptrList, f func(uintptr) int8) Int8List { acc := NilInt8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrList: uintptr->int16 */ func MapInt16ToUintptrList(m UintptrList, f func(uintptr) int16) Int16List { acc := NilInt16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrList: uintptr->int32 */ func MapInt32ToUintptrList(m UintptrList, f func(uintptr) int32) Int32List { acc := NilInt32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrList: uintptr->int64 */ func MapInt64ToUintptrList(m UintptrList, f func(uintptr) int64) Int64List { acc := NilInt64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrList: uintptr->uint */ func MapUintToUintptrList(m UintptrList, f func(uintptr) uint) UintList { acc := NilUintList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrList: uintptr->uint8 */ func MapUint8ToUintptrList(m UintptrList, f func(uintptr) uint8) Uint8List { acc := NilUint8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrList: uintptr->uint16 */ func MapUint16ToUintptrList(m UintptrList, f func(uintptr) uint16) Uint16List { acc := NilUint16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrList: uintptr->uint32 */ func MapUint32ToUintptrList(m UintptrList, f func(uintptr) uint32) Uint32List { acc := NilUint32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrList: uintptr->uint64 */ func MapUint64ToUintptrList(m UintptrList, f func(uintptr) uint64) Uint64List { acc := NilUint64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrList: uintptr->uintptr */ func MapUintptrToUintptrList(m UintptrList, f func(uintptr) uintptr) UintptrList { acc := NilUintptrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrList: uintptr->byte */ func MapByteToUintptrList(m UintptrList, f func(uintptr) byte) ByteList { acc := NilByteList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrList: uintptr->rune */ func MapRuneToUintptrList(m UintptrList, f func(uintptr) rune) RuneList { acc := NilRuneList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrList: uintptr->float32 */ func MapFloat32ToUintptrList(m UintptrList, f func(uintptr) float32) Float32List { acc := NilFloat32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrList: uintptr->float64 */ func MapFloat64ToUintptrList(m UintptrList, f func(uintptr) float64) Float64List { acc := NilFloat64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrList: uintptr->complex64 */ func MapComplex64ToUintptrList(m UintptrList, f func(uintptr) complex64) Complex64List { acc := NilComplex64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrList: uintptr->complex128 */ func MapComplex128ToUintptrList(m UintptrList, f func(uintptr) complex128) Complex128List { acc := NilComplex128List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrList: uintptr->Any */ func MapAnyToUintptrList(m UintptrList, f func(uintptr) Any) AnyList { acc := NilAnyList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrList: uintptr->BoolOption */ func MapBoolOptionToUintptrList(m UintptrList, f func(uintptr) BoolOption) BoolOptionList { acc := NilBoolOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrList: uintptr->StringOption */ func MapStringOptionToUintptrList(m UintptrList, f func(uintptr) StringOption) StringOptionList { acc := NilStringOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrList: uintptr->IntOption */ func MapIntOptionToUintptrList(m UintptrList, f func(uintptr) IntOption) IntOptionList { acc := NilIntOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrList: uintptr->Int8Option */ func MapInt8OptionToUintptrList(m UintptrList, f func(uintptr) Int8Option) Int8OptionList { acc := NilInt8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrList: uintptr->Int16Option */ func MapInt16OptionToUintptrList(m UintptrList, f func(uintptr) Int16Option) Int16OptionList { acc := NilInt16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrList: uintptr->Int32Option */ func MapInt32OptionToUintptrList(m UintptrList, f func(uintptr) Int32Option) Int32OptionList { acc := NilInt32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrList: uintptr->Int64Option */ func MapInt64OptionToUintptrList(m UintptrList, f func(uintptr) Int64Option) Int64OptionList { acc := NilInt64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrList: uintptr->UintOption */ func MapUintOptionToUintptrList(m UintptrList, f func(uintptr) UintOption) UintOptionList { acc := NilUintOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrList: uintptr->Uint8Option */ func MapUint8OptionToUintptrList(m UintptrList, f func(uintptr) Uint8Option) Uint8OptionList { acc := NilUint8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrList: uintptr->Uint16Option */ func MapUint16OptionToUintptrList(m UintptrList, f func(uintptr) Uint16Option) Uint16OptionList { acc := NilUint16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrList: uintptr->Uint32Option */ func MapUint32OptionToUintptrList(m UintptrList, f func(uintptr) Uint32Option) Uint32OptionList { acc := NilUint32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrList: uintptr->Uint64Option */ func MapUint64OptionToUintptrList(m UintptrList, f func(uintptr) Uint64Option) Uint64OptionList { acc := NilUint64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrList: uintptr->UintptrOption */ func MapUintptrOptionToUintptrList(m UintptrList, f func(uintptr) UintptrOption) UintptrOptionList { acc := NilUintptrOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrList: uintptr->ByteOption */ func MapByteOptionToUintptrList(m UintptrList, f func(uintptr) ByteOption) ByteOptionList { acc := NilByteOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrList: uintptr->RuneOption */ func MapRuneOptionToUintptrList(m UintptrList, f func(uintptr) RuneOption) RuneOptionList { acc := NilRuneOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrList: uintptr->Float32Option */ func MapFloat32OptionToUintptrList(m UintptrList, f func(uintptr) Float32Option) Float32OptionList { acc := NilFloat32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrList: uintptr->Float64Option */ func MapFloat64OptionToUintptrList(m UintptrList, f func(uintptr) Float64Option) Float64OptionList { acc := NilFloat64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrList: uintptr->Complex64Option */ func MapComplex64OptionToUintptrList(m UintptrList, f func(uintptr) Complex64Option) Complex64OptionList { acc := NilComplex64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrList: uintptr->Complex128Option */ func MapComplex128OptionToUintptrList(m UintptrList, f func(uintptr) Complex128Option) Complex128OptionList { acc := NilComplex128OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrList: uintptr->AnyOption */ func MapAnyOptionToUintptrList(m UintptrList, f func(uintptr) AnyOption) AnyOptionList { acc := NilAnyOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrList: uintptr->[]bool */ func MapBoolArrToUintptrList(m UintptrList, f func(uintptr) []bool) BoolArrList { acc := NilBoolArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrList: uintptr->[]string */ func MapStringArrToUintptrList(m UintptrList, f func(uintptr) []string) StringArrList { acc := NilStringArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrList: uintptr->[]int */ func MapIntArrToUintptrList(m UintptrList, f func(uintptr) []int) IntArrList { acc := NilIntArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrList: uintptr->[]int8 */ func MapInt8ArrToUintptrList(m UintptrList, f func(uintptr) []int8) Int8ArrList { acc := NilInt8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrList: uintptr->[]int16 */ func MapInt16ArrToUintptrList(m UintptrList, f func(uintptr) []int16) Int16ArrList { acc := NilInt16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrList: uintptr->[]int32 */ func MapInt32ArrToUintptrList(m UintptrList, f func(uintptr) []int32) Int32ArrList { acc := NilInt32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrList: uintptr->[]int64 */ func MapInt64ArrToUintptrList(m UintptrList, f func(uintptr) []int64) Int64ArrList { acc := NilInt64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrList: uintptr->[]uint */ func MapUintArrToUintptrList(m UintptrList, f func(uintptr) []uint) UintArrList { acc := NilUintArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrList: uintptr->[]uint8 */ func MapUint8ArrToUintptrList(m UintptrList, f func(uintptr) []uint8) Uint8ArrList { acc := NilUint8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrList: uintptr->[]uint16 */ func MapUint16ArrToUintptrList(m UintptrList, f func(uintptr) []uint16) Uint16ArrList { acc := NilUint16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrList: uintptr->[]uint32 */ func MapUint32ArrToUintptrList(m UintptrList, f func(uintptr) []uint32) Uint32ArrList { acc := NilUint32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrList: uintptr->[]uint64 */ func MapUint64ArrToUintptrList(m UintptrList, f func(uintptr) []uint64) Uint64ArrList { acc := NilUint64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrList: uintptr->[]uintptr */ func MapUintptrArrToUintptrList(m UintptrList, f func(uintptr) []uintptr) UintptrArrList { acc := NilUintptrArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrList: uintptr->[]byte */ func MapByteArrToUintptrList(m UintptrList, f func(uintptr) []byte) ByteArrList { acc := NilByteArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrList: uintptr->[]rune */ func MapRuneArrToUintptrList(m UintptrList, f func(uintptr) []rune) RuneArrList { acc := NilRuneArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrList: uintptr->[]float32 */ func MapFloat32ArrToUintptrList(m UintptrList, f func(uintptr) []float32) Float32ArrList { acc := NilFloat32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrList: uintptr->[]float64 */ func MapFloat64ArrToUintptrList(m UintptrList, f func(uintptr) []float64) Float64ArrList { acc := NilFloat64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrList: uintptr->[]complex64 */ func MapComplex64ArrToUintptrList(m UintptrList, f func(uintptr) []complex64) Complex64ArrList { acc := NilComplex64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrList: uintptr->[]complex128 */ func MapComplex128ArrToUintptrList(m UintptrList, f func(uintptr) []complex128) Complex128ArrList { acc := NilComplex128ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrList: uintptr->[]Any */ func MapAnyArrToUintptrList(m UintptrList, f func(uintptr) []Any) AnyArrList { acc := NilAnyArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrList: uintptr->BoolList */ func MapBoolListToUintptrList(m UintptrList, f func(uintptr) BoolList) BoolListList { acc := NilBoolListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrList: uintptr->StringList */ func MapStringListToUintptrList(m UintptrList, f func(uintptr) StringList) StringListList { acc := NilStringListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrList: uintptr->IntList */ func MapIntListToUintptrList(m UintptrList, f func(uintptr) IntList) IntListList { acc := NilIntListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrList: uintptr->Int8List */ func MapInt8ListToUintptrList(m UintptrList, f func(uintptr) Int8List) Int8ListList { acc := NilInt8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrList: uintptr->Int16List */ func MapInt16ListToUintptrList(m UintptrList, f func(uintptr) Int16List) Int16ListList { acc := NilInt16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrList: uintptr->Int32List */ func MapInt32ListToUintptrList(m UintptrList, f func(uintptr) Int32List) Int32ListList { acc := NilInt32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrList: uintptr->Int64List */ func MapInt64ListToUintptrList(m UintptrList, f func(uintptr) Int64List) Int64ListList { acc := NilInt64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrList: uintptr->UintList */ func MapUintListToUintptrList(m UintptrList, f func(uintptr) UintList) UintListList { acc := NilUintListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrList: uintptr->Uint8List */ func MapUint8ListToUintptrList(m UintptrList, f func(uintptr) Uint8List) Uint8ListList { acc := NilUint8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrList: uintptr->Uint16List */ func MapUint16ListToUintptrList(m UintptrList, f func(uintptr) Uint16List) Uint16ListList { acc := NilUint16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrList: uintptr->Uint32List */ func MapUint32ListToUintptrList(m UintptrList, f func(uintptr) Uint32List) Uint32ListList { acc := NilUint32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrList: uintptr->Uint64List */ func MapUint64ListToUintptrList(m UintptrList, f func(uintptr) Uint64List) Uint64ListList { acc := NilUint64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrList: uintptr->UintptrList */ func MapUintptrListToUintptrList(m UintptrList, f func(uintptr) UintptrList) UintptrListList { acc := NilUintptrListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrList: uintptr->ByteList */ func MapByteListToUintptrList(m UintptrList, f func(uintptr) ByteList) ByteListList { acc := NilByteListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrList: uintptr->RuneList */ func MapRuneListToUintptrList(m UintptrList, f func(uintptr) RuneList) RuneListList { acc := NilRuneListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrList: uintptr->Float32List */ func MapFloat32ListToUintptrList(m UintptrList, f func(uintptr) Float32List) Float32ListList { acc := NilFloat32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrList: uintptr->Float64List */ func MapFloat64ListToUintptrList(m UintptrList, f func(uintptr) Float64List) Float64ListList { acc := NilFloat64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrList: uintptr->Complex64List */ func MapComplex64ListToUintptrList(m UintptrList, f func(uintptr) Complex64List) Complex64ListList { acc := NilComplex64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrList: uintptr->Complex128List */ func MapComplex128ListToUintptrList(m UintptrList, f func(uintptr) Complex128List) Complex128ListList { acc := NilComplex128ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrList: uintptr->AnyList */ func MapAnyListToUintptrList(m UintptrList, f func(uintptr) AnyList) AnyListList { acc := NilAnyListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteList: byte->bool */ func MapBoolToByteList(m ByteList, f func(byte) bool) BoolList { acc := NilBoolList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteList: byte->string */ func MapStringToByteList(m ByteList, f func(byte) string) StringList { acc := NilStringList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteList: byte->int */ func MapIntToByteList(m ByteList, f func(byte) int) IntList { acc := NilIntList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteList: byte->int8 */ func MapInt8ToByteList(m ByteList, f func(byte) int8) Int8List { acc := NilInt8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteList: byte->int16 */ func MapInt16ToByteList(m ByteList, f func(byte) int16) Int16List { acc := NilInt16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteList: byte->int32 */ func MapInt32ToByteList(m ByteList, f func(byte) int32) Int32List { acc := NilInt32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteList: byte->int64 */ func MapInt64ToByteList(m ByteList, f func(byte) int64) Int64List { acc := NilInt64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteList: byte->uint */ func MapUintToByteList(m ByteList, f func(byte) uint) UintList { acc := NilUintList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteList: byte->uint8 */ func MapUint8ToByteList(m ByteList, f func(byte) uint8) Uint8List { acc := NilUint8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteList: byte->uint16 */ func MapUint16ToByteList(m ByteList, f func(byte) uint16) Uint16List { acc := NilUint16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteList: byte->uint32 */ func MapUint32ToByteList(m ByteList, f func(byte) uint32) Uint32List { acc := NilUint32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteList: byte->uint64 */ func MapUint64ToByteList(m ByteList, f func(byte) uint64) Uint64List { acc := NilUint64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteList: byte->uintptr */ func MapUintptrToByteList(m ByteList, f func(byte) uintptr) UintptrList { acc := NilUintptrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteList: byte->byte */ func MapByteToByteList(m ByteList, f func(byte) byte) ByteList { acc := NilByteList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteList: byte->rune */ func MapRuneToByteList(m ByteList, f func(byte) rune) RuneList { acc := NilRuneList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteList: byte->float32 */ func MapFloat32ToByteList(m ByteList, f func(byte) float32) Float32List { acc := NilFloat32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteList: byte->float64 */ func MapFloat64ToByteList(m ByteList, f func(byte) float64) Float64List { acc := NilFloat64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteList: byte->complex64 */ func MapComplex64ToByteList(m ByteList, f func(byte) complex64) Complex64List { acc := NilComplex64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteList: byte->complex128 */ func MapComplex128ToByteList(m ByteList, f func(byte) complex128) Complex128List { acc := NilComplex128List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteList: byte->Any */ func MapAnyToByteList(m ByteList, f func(byte) Any) AnyList { acc := NilAnyList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteList: byte->BoolOption */ func MapBoolOptionToByteList(m ByteList, f func(byte) BoolOption) BoolOptionList { acc := NilBoolOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteList: byte->StringOption */ func MapStringOptionToByteList(m ByteList, f func(byte) StringOption) StringOptionList { acc := NilStringOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteList: byte->IntOption */ func MapIntOptionToByteList(m ByteList, f func(byte) IntOption) IntOptionList { acc := NilIntOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteList: byte->Int8Option */ func MapInt8OptionToByteList(m ByteList, f func(byte) Int8Option) Int8OptionList { acc := NilInt8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteList: byte->Int16Option */ func MapInt16OptionToByteList(m ByteList, f func(byte) Int16Option) Int16OptionList { acc := NilInt16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteList: byte->Int32Option */ func MapInt32OptionToByteList(m ByteList, f func(byte) Int32Option) Int32OptionList { acc := NilInt32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteList: byte->Int64Option */ func MapInt64OptionToByteList(m ByteList, f func(byte) Int64Option) Int64OptionList { acc := NilInt64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteList: byte->UintOption */ func MapUintOptionToByteList(m ByteList, f func(byte) UintOption) UintOptionList { acc := NilUintOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteList: byte->Uint8Option */ func MapUint8OptionToByteList(m ByteList, f func(byte) Uint8Option) Uint8OptionList { acc := NilUint8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteList: byte->Uint16Option */ func MapUint16OptionToByteList(m ByteList, f func(byte) Uint16Option) Uint16OptionList { acc := NilUint16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteList: byte->Uint32Option */ func MapUint32OptionToByteList(m ByteList, f func(byte) Uint32Option) Uint32OptionList { acc := NilUint32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteList: byte->Uint64Option */ func MapUint64OptionToByteList(m ByteList, f func(byte) Uint64Option) Uint64OptionList { acc := NilUint64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteList: byte->UintptrOption */ func MapUintptrOptionToByteList(m ByteList, f func(byte) UintptrOption) UintptrOptionList { acc := NilUintptrOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteList: byte->ByteOption */ func MapByteOptionToByteList(m ByteList, f func(byte) ByteOption) ByteOptionList { acc := NilByteOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteList: byte->RuneOption */ func MapRuneOptionToByteList(m ByteList, f func(byte) RuneOption) RuneOptionList { acc := NilRuneOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteList: byte->Float32Option */ func MapFloat32OptionToByteList(m ByteList, f func(byte) Float32Option) Float32OptionList { acc := NilFloat32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteList: byte->Float64Option */ func MapFloat64OptionToByteList(m ByteList, f func(byte) Float64Option) Float64OptionList { acc := NilFloat64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteList: byte->Complex64Option */ func MapComplex64OptionToByteList(m ByteList, f func(byte) Complex64Option) Complex64OptionList { acc := NilComplex64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteList: byte->Complex128Option */ func MapComplex128OptionToByteList(m ByteList, f func(byte) Complex128Option) Complex128OptionList { acc := NilComplex128OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteList: byte->AnyOption */ func MapAnyOptionToByteList(m ByteList, f func(byte) AnyOption) AnyOptionList { acc := NilAnyOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteList: byte->[]bool */ func MapBoolArrToByteList(m ByteList, f func(byte) []bool) BoolArrList { acc := NilBoolArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteList: byte->[]string */ func MapStringArrToByteList(m ByteList, f func(byte) []string) StringArrList { acc := NilStringArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteList: byte->[]int */ func MapIntArrToByteList(m ByteList, f func(byte) []int) IntArrList { acc := NilIntArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteList: byte->[]int8 */ func MapInt8ArrToByteList(m ByteList, f func(byte) []int8) Int8ArrList { acc := NilInt8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteList: byte->[]int16 */ func MapInt16ArrToByteList(m ByteList, f func(byte) []int16) Int16ArrList { acc := NilInt16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteList: byte->[]int32 */ func MapInt32ArrToByteList(m ByteList, f func(byte) []int32) Int32ArrList { acc := NilInt32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteList: byte->[]int64 */ func MapInt64ArrToByteList(m ByteList, f func(byte) []int64) Int64ArrList { acc := NilInt64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteList: byte->[]uint */ func MapUintArrToByteList(m ByteList, f func(byte) []uint) UintArrList { acc := NilUintArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteList: byte->[]uint8 */ func MapUint8ArrToByteList(m ByteList, f func(byte) []uint8) Uint8ArrList { acc := NilUint8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteList: byte->[]uint16 */ func MapUint16ArrToByteList(m ByteList, f func(byte) []uint16) Uint16ArrList { acc := NilUint16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteList: byte->[]uint32 */ func MapUint32ArrToByteList(m ByteList, f func(byte) []uint32) Uint32ArrList { acc := NilUint32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteList: byte->[]uint64 */ func MapUint64ArrToByteList(m ByteList, f func(byte) []uint64) Uint64ArrList { acc := NilUint64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteList: byte->[]uintptr */ func MapUintptrArrToByteList(m ByteList, f func(byte) []uintptr) UintptrArrList { acc := NilUintptrArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteList: byte->[]byte */ func MapByteArrToByteList(m ByteList, f func(byte) []byte) ByteArrList { acc := NilByteArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteList: byte->[]rune */ func MapRuneArrToByteList(m ByteList, f func(byte) []rune) RuneArrList { acc := NilRuneArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteList: byte->[]float32 */ func MapFloat32ArrToByteList(m ByteList, f func(byte) []float32) Float32ArrList { acc := NilFloat32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteList: byte->[]float64 */ func MapFloat64ArrToByteList(m ByteList, f func(byte) []float64) Float64ArrList { acc := NilFloat64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteList: byte->[]complex64 */ func MapComplex64ArrToByteList(m ByteList, f func(byte) []complex64) Complex64ArrList { acc := NilComplex64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteList: byte->[]complex128 */ func MapComplex128ArrToByteList(m ByteList, f func(byte) []complex128) Complex128ArrList { acc := NilComplex128ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteList: byte->[]Any */ func MapAnyArrToByteList(m ByteList, f func(byte) []Any) AnyArrList { acc := NilAnyArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteList: byte->BoolList */ func MapBoolListToByteList(m ByteList, f func(byte) BoolList) BoolListList { acc := NilBoolListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteList: byte->StringList */ func MapStringListToByteList(m ByteList, f func(byte) StringList) StringListList { acc := NilStringListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteList: byte->IntList */ func MapIntListToByteList(m ByteList, f func(byte) IntList) IntListList { acc := NilIntListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteList: byte->Int8List */ func MapInt8ListToByteList(m ByteList, f func(byte) Int8List) Int8ListList { acc := NilInt8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteList: byte->Int16List */ func MapInt16ListToByteList(m ByteList, f func(byte) Int16List) Int16ListList { acc := NilInt16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteList: byte->Int32List */ func MapInt32ListToByteList(m ByteList, f func(byte) Int32List) Int32ListList { acc := NilInt32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteList: byte->Int64List */ func MapInt64ListToByteList(m ByteList, f func(byte) Int64List) Int64ListList { acc := NilInt64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteList: byte->UintList */ func MapUintListToByteList(m ByteList, f func(byte) UintList) UintListList { acc := NilUintListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteList: byte->Uint8List */ func MapUint8ListToByteList(m ByteList, f func(byte) Uint8List) Uint8ListList { acc := NilUint8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteList: byte->Uint16List */ func MapUint16ListToByteList(m ByteList, f func(byte) Uint16List) Uint16ListList { acc := NilUint16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteList: byte->Uint32List */ func MapUint32ListToByteList(m ByteList, f func(byte) Uint32List) Uint32ListList { acc := NilUint32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteList: byte->Uint64List */ func MapUint64ListToByteList(m ByteList, f func(byte) Uint64List) Uint64ListList { acc := NilUint64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteList: byte->UintptrList */ func MapUintptrListToByteList(m ByteList, f func(byte) UintptrList) UintptrListList { acc := NilUintptrListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteList: byte->ByteList */ func MapByteListToByteList(m ByteList, f func(byte) ByteList) ByteListList { acc := NilByteListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteList: byte->RuneList */ func MapRuneListToByteList(m ByteList, f func(byte) RuneList) RuneListList { acc := NilRuneListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteList: byte->Float32List */ func MapFloat32ListToByteList(m ByteList, f func(byte) Float32List) Float32ListList { acc := NilFloat32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteList: byte->Float64List */ func MapFloat64ListToByteList(m ByteList, f func(byte) Float64List) Float64ListList { acc := NilFloat64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteList: byte->Complex64List */ func MapComplex64ListToByteList(m ByteList, f func(byte) Complex64List) Complex64ListList { acc := NilComplex64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteList: byte->Complex128List */ func MapComplex128ListToByteList(m ByteList, f func(byte) Complex128List) Complex128ListList { acc := NilComplex128ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteList: byte->AnyList */ func MapAnyListToByteList(m ByteList, f func(byte) AnyList) AnyListList { acc := NilAnyListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneList: rune->bool */ func MapBoolToRuneList(m RuneList, f func(rune) bool) BoolList { acc := NilBoolList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneList: rune->string */ func MapStringToRuneList(m RuneList, f func(rune) string) StringList { acc := NilStringList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneList: rune->int */ func MapIntToRuneList(m RuneList, f func(rune) int) IntList { acc := NilIntList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneList: rune->int8 */ func MapInt8ToRuneList(m RuneList, f func(rune) int8) Int8List { acc := NilInt8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneList: rune->int16 */ func MapInt16ToRuneList(m RuneList, f func(rune) int16) Int16List { acc := NilInt16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneList: rune->int32 */ func MapInt32ToRuneList(m RuneList, f func(rune) int32) Int32List { acc := NilInt32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneList: rune->int64 */ func MapInt64ToRuneList(m RuneList, f func(rune) int64) Int64List { acc := NilInt64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneList: rune->uint */ func MapUintToRuneList(m RuneList, f func(rune) uint) UintList { acc := NilUintList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneList: rune->uint8 */ func MapUint8ToRuneList(m RuneList, f func(rune) uint8) Uint8List { acc := NilUint8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneList: rune->uint16 */ func MapUint16ToRuneList(m RuneList, f func(rune) uint16) Uint16List { acc := NilUint16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneList: rune->uint32 */ func MapUint32ToRuneList(m RuneList, f func(rune) uint32) Uint32List { acc := NilUint32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneList: rune->uint64 */ func MapUint64ToRuneList(m RuneList, f func(rune) uint64) Uint64List { acc := NilUint64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneList: rune->uintptr */ func MapUintptrToRuneList(m RuneList, f func(rune) uintptr) UintptrList { acc := NilUintptrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneList: rune->byte */ func MapByteToRuneList(m RuneList, f func(rune) byte) ByteList { acc := NilByteList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneList: rune->rune */ func MapRuneToRuneList(m RuneList, f func(rune) rune) RuneList { acc := NilRuneList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneList: rune->float32 */ func MapFloat32ToRuneList(m RuneList, f func(rune) float32) Float32List { acc := NilFloat32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneList: rune->float64 */ func MapFloat64ToRuneList(m RuneList, f func(rune) float64) Float64List { acc := NilFloat64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneList: rune->complex64 */ func MapComplex64ToRuneList(m RuneList, f func(rune) complex64) Complex64List { acc := NilComplex64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneList: rune->complex128 */ func MapComplex128ToRuneList(m RuneList, f func(rune) complex128) Complex128List { acc := NilComplex128List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneList: rune->Any */ func MapAnyToRuneList(m RuneList, f func(rune) Any) AnyList { acc := NilAnyList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneList: rune->BoolOption */ func MapBoolOptionToRuneList(m RuneList, f func(rune) BoolOption) BoolOptionList { acc := NilBoolOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneList: rune->StringOption */ func MapStringOptionToRuneList(m RuneList, f func(rune) StringOption) StringOptionList { acc := NilStringOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneList: rune->IntOption */ func MapIntOptionToRuneList(m RuneList, f func(rune) IntOption) IntOptionList { acc := NilIntOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneList: rune->Int8Option */ func MapInt8OptionToRuneList(m RuneList, f func(rune) Int8Option) Int8OptionList { acc := NilInt8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneList: rune->Int16Option */ func MapInt16OptionToRuneList(m RuneList, f func(rune) Int16Option) Int16OptionList { acc := NilInt16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneList: rune->Int32Option */ func MapInt32OptionToRuneList(m RuneList, f func(rune) Int32Option) Int32OptionList { acc := NilInt32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneList: rune->Int64Option */ func MapInt64OptionToRuneList(m RuneList, f func(rune) Int64Option) Int64OptionList { acc := NilInt64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneList: rune->UintOption */ func MapUintOptionToRuneList(m RuneList, f func(rune) UintOption) UintOptionList { acc := NilUintOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneList: rune->Uint8Option */ func MapUint8OptionToRuneList(m RuneList, f func(rune) Uint8Option) Uint8OptionList { acc := NilUint8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneList: rune->Uint16Option */ func MapUint16OptionToRuneList(m RuneList, f func(rune) Uint16Option) Uint16OptionList { acc := NilUint16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneList: rune->Uint32Option */ func MapUint32OptionToRuneList(m RuneList, f func(rune) Uint32Option) Uint32OptionList { acc := NilUint32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneList: rune->Uint64Option */ func MapUint64OptionToRuneList(m RuneList, f func(rune) Uint64Option) Uint64OptionList { acc := NilUint64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneList: rune->UintptrOption */ func MapUintptrOptionToRuneList(m RuneList, f func(rune) UintptrOption) UintptrOptionList { acc := NilUintptrOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneList: rune->ByteOption */ func MapByteOptionToRuneList(m RuneList, f func(rune) ByteOption) ByteOptionList { acc := NilByteOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneList: rune->RuneOption */ func MapRuneOptionToRuneList(m RuneList, f func(rune) RuneOption) RuneOptionList { acc := NilRuneOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneList: rune->Float32Option */ func MapFloat32OptionToRuneList(m RuneList, f func(rune) Float32Option) Float32OptionList { acc := NilFloat32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneList: rune->Float64Option */ func MapFloat64OptionToRuneList(m RuneList, f func(rune) Float64Option) Float64OptionList { acc := NilFloat64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneList: rune->Complex64Option */ func MapComplex64OptionToRuneList(m RuneList, f func(rune) Complex64Option) Complex64OptionList { acc := NilComplex64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneList: rune->Complex128Option */ func MapComplex128OptionToRuneList(m RuneList, f func(rune) Complex128Option) Complex128OptionList { acc := NilComplex128OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneList: rune->AnyOption */ func MapAnyOptionToRuneList(m RuneList, f func(rune) AnyOption) AnyOptionList { acc := NilAnyOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneList: rune->[]bool */ func MapBoolArrToRuneList(m RuneList, f func(rune) []bool) BoolArrList { acc := NilBoolArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneList: rune->[]string */ func MapStringArrToRuneList(m RuneList, f func(rune) []string) StringArrList { acc := NilStringArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneList: rune->[]int */ func MapIntArrToRuneList(m RuneList, f func(rune) []int) IntArrList { acc := NilIntArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneList: rune->[]int8 */ func MapInt8ArrToRuneList(m RuneList, f func(rune) []int8) Int8ArrList { acc := NilInt8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneList: rune->[]int16 */ func MapInt16ArrToRuneList(m RuneList, f func(rune) []int16) Int16ArrList { acc := NilInt16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneList: rune->[]int32 */ func MapInt32ArrToRuneList(m RuneList, f func(rune) []int32) Int32ArrList { acc := NilInt32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneList: rune->[]int64 */ func MapInt64ArrToRuneList(m RuneList, f func(rune) []int64) Int64ArrList { acc := NilInt64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneList: rune->[]uint */ func MapUintArrToRuneList(m RuneList, f func(rune) []uint) UintArrList { acc := NilUintArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneList: rune->[]uint8 */ func MapUint8ArrToRuneList(m RuneList, f func(rune) []uint8) Uint8ArrList { acc := NilUint8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneList: rune->[]uint16 */ func MapUint16ArrToRuneList(m RuneList, f func(rune) []uint16) Uint16ArrList { acc := NilUint16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneList: rune->[]uint32 */ func MapUint32ArrToRuneList(m RuneList, f func(rune) []uint32) Uint32ArrList { acc := NilUint32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneList: rune->[]uint64 */ func MapUint64ArrToRuneList(m RuneList, f func(rune) []uint64) Uint64ArrList { acc := NilUint64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneList: rune->[]uintptr */ func MapUintptrArrToRuneList(m RuneList, f func(rune) []uintptr) UintptrArrList { acc := NilUintptrArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneList: rune->[]byte */ func MapByteArrToRuneList(m RuneList, f func(rune) []byte) ByteArrList { acc := NilByteArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneList: rune->[]rune */ func MapRuneArrToRuneList(m RuneList, f func(rune) []rune) RuneArrList { acc := NilRuneArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneList: rune->[]float32 */ func MapFloat32ArrToRuneList(m RuneList, f func(rune) []float32) Float32ArrList { acc := NilFloat32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneList: rune->[]float64 */ func MapFloat64ArrToRuneList(m RuneList, f func(rune) []float64) Float64ArrList { acc := NilFloat64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneList: rune->[]complex64 */ func MapComplex64ArrToRuneList(m RuneList, f func(rune) []complex64) Complex64ArrList { acc := NilComplex64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneList: rune->[]complex128 */ func MapComplex128ArrToRuneList(m RuneList, f func(rune) []complex128) Complex128ArrList { acc := NilComplex128ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneList: rune->[]Any */ func MapAnyArrToRuneList(m RuneList, f func(rune) []Any) AnyArrList { acc := NilAnyArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneList: rune->BoolList */ func MapBoolListToRuneList(m RuneList, f func(rune) BoolList) BoolListList { acc := NilBoolListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneList: rune->StringList */ func MapStringListToRuneList(m RuneList, f func(rune) StringList) StringListList { acc := NilStringListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneList: rune->IntList */ func MapIntListToRuneList(m RuneList, f func(rune) IntList) IntListList { acc := NilIntListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneList: rune->Int8List */ func MapInt8ListToRuneList(m RuneList, f func(rune) Int8List) Int8ListList { acc := NilInt8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneList: rune->Int16List */ func MapInt16ListToRuneList(m RuneList, f func(rune) Int16List) Int16ListList { acc := NilInt16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneList: rune->Int32List */ func MapInt32ListToRuneList(m RuneList, f func(rune) Int32List) Int32ListList { acc := NilInt32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneList: rune->Int64List */ func MapInt64ListToRuneList(m RuneList, f func(rune) Int64List) Int64ListList { acc := NilInt64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneList: rune->UintList */ func MapUintListToRuneList(m RuneList, f func(rune) UintList) UintListList { acc := NilUintListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneList: rune->Uint8List */ func MapUint8ListToRuneList(m RuneList, f func(rune) Uint8List) Uint8ListList { acc := NilUint8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneList: rune->Uint16List */ func MapUint16ListToRuneList(m RuneList, f func(rune) Uint16List) Uint16ListList { acc := NilUint16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneList: rune->Uint32List */ func MapUint32ListToRuneList(m RuneList, f func(rune) Uint32List) Uint32ListList { acc := NilUint32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneList: rune->Uint64List */ func MapUint64ListToRuneList(m RuneList, f func(rune) Uint64List) Uint64ListList { acc := NilUint64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneList: rune->UintptrList */ func MapUintptrListToRuneList(m RuneList, f func(rune) UintptrList) UintptrListList { acc := NilUintptrListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneList: rune->ByteList */ func MapByteListToRuneList(m RuneList, f func(rune) ByteList) ByteListList { acc := NilByteListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneList: rune->RuneList */ func MapRuneListToRuneList(m RuneList, f func(rune) RuneList) RuneListList { acc := NilRuneListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneList: rune->Float32List */ func MapFloat32ListToRuneList(m RuneList, f func(rune) Float32List) Float32ListList { acc := NilFloat32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneList: rune->Float64List */ func MapFloat64ListToRuneList(m RuneList, f func(rune) Float64List) Float64ListList { acc := NilFloat64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneList: rune->Complex64List */ func MapComplex64ListToRuneList(m RuneList, f func(rune) Complex64List) Complex64ListList { acc := NilComplex64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneList: rune->Complex128List */ func MapComplex128ListToRuneList(m RuneList, f func(rune) Complex128List) Complex128ListList { acc := NilComplex128ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneList: rune->AnyList */ func MapAnyListToRuneList(m RuneList, f func(rune) AnyList) AnyListList { acc := NilAnyListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32List: float32->bool */ func MapBoolToFloat32List(m Float32List, f func(float32) bool) BoolList { acc := NilBoolList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32List: float32->string */ func MapStringToFloat32List(m Float32List, f func(float32) string) StringList { acc := NilStringList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32List: float32->int */ func MapIntToFloat32List(m Float32List, f func(float32) int) IntList { acc := NilIntList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32List: float32->int8 */ func MapInt8ToFloat32List(m Float32List, f func(float32) int8) Int8List { acc := NilInt8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32List: float32->int16 */ func MapInt16ToFloat32List(m Float32List, f func(float32) int16) Int16List { acc := NilInt16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32List: float32->int32 */ func MapInt32ToFloat32List(m Float32List, f func(float32) int32) Int32List { acc := NilInt32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32List: float32->int64 */ func MapInt64ToFloat32List(m Float32List, f func(float32) int64) Int64List { acc := NilInt64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32List: float32->uint */ func MapUintToFloat32List(m Float32List, f func(float32) uint) UintList { acc := NilUintList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32List: float32->uint8 */ func MapUint8ToFloat32List(m Float32List, f func(float32) uint8) Uint8List { acc := NilUint8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32List: float32->uint16 */ func MapUint16ToFloat32List(m Float32List, f func(float32) uint16) Uint16List { acc := NilUint16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32List: float32->uint32 */ func MapUint32ToFloat32List(m Float32List, f func(float32) uint32) Uint32List { acc := NilUint32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32List: float32->uint64 */ func MapUint64ToFloat32List(m Float32List, f func(float32) uint64) Uint64List { acc := NilUint64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32List: float32->uintptr */ func MapUintptrToFloat32List(m Float32List, f func(float32) uintptr) UintptrList { acc := NilUintptrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32List: float32->byte */ func MapByteToFloat32List(m Float32List, f func(float32) byte) ByteList { acc := NilByteList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32List: float32->rune */ func MapRuneToFloat32List(m Float32List, f func(float32) rune) RuneList { acc := NilRuneList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32List: float32->float32 */ func MapFloat32ToFloat32List(m Float32List, f func(float32) float32) Float32List { acc := NilFloat32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32List: float32->float64 */ func MapFloat64ToFloat32List(m Float32List, f func(float32) float64) Float64List { acc := NilFloat64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32List: float32->complex64 */ func MapComplex64ToFloat32List(m Float32List, f func(float32) complex64) Complex64List { acc := NilComplex64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32List: float32->complex128 */ func MapComplex128ToFloat32List(m Float32List, f func(float32) complex128) Complex128List { acc := NilComplex128List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32List: float32->Any */ func MapAnyToFloat32List(m Float32List, f func(float32) Any) AnyList { acc := NilAnyList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32List: float32->BoolOption */ func MapBoolOptionToFloat32List(m Float32List, f func(float32) BoolOption) BoolOptionList { acc := NilBoolOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32List: float32->StringOption */ func MapStringOptionToFloat32List(m Float32List, f func(float32) StringOption) StringOptionList { acc := NilStringOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32List: float32->IntOption */ func MapIntOptionToFloat32List(m Float32List, f func(float32) IntOption) IntOptionList { acc := NilIntOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32List: float32->Int8Option */ func MapInt8OptionToFloat32List(m Float32List, f func(float32) Int8Option) Int8OptionList { acc := NilInt8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32List: float32->Int16Option */ func MapInt16OptionToFloat32List(m Float32List, f func(float32) Int16Option) Int16OptionList { acc := NilInt16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32List: float32->Int32Option */ func MapInt32OptionToFloat32List(m Float32List, f func(float32) Int32Option) Int32OptionList { acc := NilInt32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32List: float32->Int64Option */ func MapInt64OptionToFloat32List(m Float32List, f func(float32) Int64Option) Int64OptionList { acc := NilInt64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32List: float32->UintOption */ func MapUintOptionToFloat32List(m Float32List, f func(float32) UintOption) UintOptionList { acc := NilUintOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32List: float32->Uint8Option */ func MapUint8OptionToFloat32List(m Float32List, f func(float32) Uint8Option) Uint8OptionList { acc := NilUint8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32List: float32->Uint16Option */ func MapUint16OptionToFloat32List(m Float32List, f func(float32) Uint16Option) Uint16OptionList { acc := NilUint16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32List: float32->Uint32Option */ func MapUint32OptionToFloat32List(m Float32List, f func(float32) Uint32Option) Uint32OptionList { acc := NilUint32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32List: float32->Uint64Option */ func MapUint64OptionToFloat32List(m Float32List, f func(float32) Uint64Option) Uint64OptionList { acc := NilUint64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32List: float32->UintptrOption */ func MapUintptrOptionToFloat32List(m Float32List, f func(float32) UintptrOption) UintptrOptionList { acc := NilUintptrOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32List: float32->ByteOption */ func MapByteOptionToFloat32List(m Float32List, f func(float32) ByteOption) ByteOptionList { acc := NilByteOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32List: float32->RuneOption */ func MapRuneOptionToFloat32List(m Float32List, f func(float32) RuneOption) RuneOptionList { acc := NilRuneOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32List: float32->Float32Option */ func MapFloat32OptionToFloat32List(m Float32List, f func(float32) Float32Option) Float32OptionList { acc := NilFloat32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32List: float32->Float64Option */ func MapFloat64OptionToFloat32List(m Float32List, f func(float32) Float64Option) Float64OptionList { acc := NilFloat64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32List: float32->Complex64Option */ func MapComplex64OptionToFloat32List(m Float32List, f func(float32) Complex64Option) Complex64OptionList { acc := NilComplex64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32List: float32->Complex128Option */ func MapComplex128OptionToFloat32List(m Float32List, f func(float32) Complex128Option) Complex128OptionList { acc := NilComplex128OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32List: float32->AnyOption */ func MapAnyOptionToFloat32List(m Float32List, f func(float32) AnyOption) AnyOptionList { acc := NilAnyOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32List: float32->[]bool */ func MapBoolArrToFloat32List(m Float32List, f func(float32) []bool) BoolArrList { acc := NilBoolArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32List: float32->[]string */ func MapStringArrToFloat32List(m Float32List, f func(float32) []string) StringArrList { acc := NilStringArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32List: float32->[]int */ func MapIntArrToFloat32List(m Float32List, f func(float32) []int) IntArrList { acc := NilIntArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32List: float32->[]int8 */ func MapInt8ArrToFloat32List(m Float32List, f func(float32) []int8) Int8ArrList { acc := NilInt8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32List: float32->[]int16 */ func MapInt16ArrToFloat32List(m Float32List, f func(float32) []int16) Int16ArrList { acc := NilInt16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32List: float32->[]int32 */ func MapInt32ArrToFloat32List(m Float32List, f func(float32) []int32) Int32ArrList { acc := NilInt32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32List: float32->[]int64 */ func MapInt64ArrToFloat32List(m Float32List, f func(float32) []int64) Int64ArrList { acc := NilInt64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32List: float32->[]uint */ func MapUintArrToFloat32List(m Float32List, f func(float32) []uint) UintArrList { acc := NilUintArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32List: float32->[]uint8 */ func MapUint8ArrToFloat32List(m Float32List, f func(float32) []uint8) Uint8ArrList { acc := NilUint8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32List: float32->[]uint16 */ func MapUint16ArrToFloat32List(m Float32List, f func(float32) []uint16) Uint16ArrList { acc := NilUint16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32List: float32->[]uint32 */ func MapUint32ArrToFloat32List(m Float32List, f func(float32) []uint32) Uint32ArrList { acc := NilUint32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32List: float32->[]uint64 */ func MapUint64ArrToFloat32List(m Float32List, f func(float32) []uint64) Uint64ArrList { acc := NilUint64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32List: float32->[]uintptr */ func MapUintptrArrToFloat32List(m Float32List, f func(float32) []uintptr) UintptrArrList { acc := NilUintptrArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32List: float32->[]byte */ func MapByteArrToFloat32List(m Float32List, f func(float32) []byte) ByteArrList { acc := NilByteArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32List: float32->[]rune */ func MapRuneArrToFloat32List(m Float32List, f func(float32) []rune) RuneArrList { acc := NilRuneArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32List: float32->[]float32 */ func MapFloat32ArrToFloat32List(m Float32List, f func(float32) []float32) Float32ArrList { acc := NilFloat32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32List: float32->[]float64 */ func MapFloat64ArrToFloat32List(m Float32List, f func(float32) []float64) Float64ArrList { acc := NilFloat64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32List: float32->[]complex64 */ func MapComplex64ArrToFloat32List(m Float32List, f func(float32) []complex64) Complex64ArrList { acc := NilComplex64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32List: float32->[]complex128 */ func MapComplex128ArrToFloat32List(m Float32List, f func(float32) []complex128) Complex128ArrList { acc := NilComplex128ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32List: float32->[]Any */ func MapAnyArrToFloat32List(m Float32List, f func(float32) []Any) AnyArrList { acc := NilAnyArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32List: float32->BoolList */ func MapBoolListToFloat32List(m Float32List, f func(float32) BoolList) BoolListList { acc := NilBoolListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32List: float32->StringList */ func MapStringListToFloat32List(m Float32List, f func(float32) StringList) StringListList { acc := NilStringListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32List: float32->IntList */ func MapIntListToFloat32List(m Float32List, f func(float32) IntList) IntListList { acc := NilIntListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32List: float32->Int8List */ func MapInt8ListToFloat32List(m Float32List, f func(float32) Int8List) Int8ListList { acc := NilInt8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32List: float32->Int16List */ func MapInt16ListToFloat32List(m Float32List, f func(float32) Int16List) Int16ListList { acc := NilInt16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32List: float32->Int32List */ func MapInt32ListToFloat32List(m Float32List, f func(float32) Int32List) Int32ListList { acc := NilInt32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32List: float32->Int64List */ func MapInt64ListToFloat32List(m Float32List, f func(float32) Int64List) Int64ListList { acc := NilInt64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32List: float32->UintList */ func MapUintListToFloat32List(m Float32List, f func(float32) UintList) UintListList { acc := NilUintListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32List: float32->Uint8List */ func MapUint8ListToFloat32List(m Float32List, f func(float32) Uint8List) Uint8ListList { acc := NilUint8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32List: float32->Uint16List */ func MapUint16ListToFloat32List(m Float32List, f func(float32) Uint16List) Uint16ListList { acc := NilUint16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32List: float32->Uint32List */ func MapUint32ListToFloat32List(m Float32List, f func(float32) Uint32List) Uint32ListList { acc := NilUint32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32List: float32->Uint64List */ func MapUint64ListToFloat32List(m Float32List, f func(float32) Uint64List) Uint64ListList { acc := NilUint64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32List: float32->UintptrList */ func MapUintptrListToFloat32List(m Float32List, f func(float32) UintptrList) UintptrListList { acc := NilUintptrListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32List: float32->ByteList */ func MapByteListToFloat32List(m Float32List, f func(float32) ByteList) ByteListList { acc := NilByteListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32List: float32->RuneList */ func MapRuneListToFloat32List(m Float32List, f func(float32) RuneList) RuneListList { acc := NilRuneListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32List: float32->Float32List */ func MapFloat32ListToFloat32List(m Float32List, f func(float32) Float32List) Float32ListList { acc := NilFloat32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32List: float32->Float64List */ func MapFloat64ListToFloat32List(m Float32List, f func(float32) Float64List) Float64ListList { acc := NilFloat64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32List: float32->Complex64List */ func MapComplex64ListToFloat32List(m Float32List, f func(float32) Complex64List) Complex64ListList { acc := NilComplex64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32List: float32->Complex128List */ func MapComplex128ListToFloat32List(m Float32List, f func(float32) Complex128List) Complex128ListList { acc := NilComplex128ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32List: float32->AnyList */ func MapAnyListToFloat32List(m Float32List, f func(float32) AnyList) AnyListList { acc := NilAnyListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64List: float64->bool */ func MapBoolToFloat64List(m Float64List, f func(float64) bool) BoolList { acc := NilBoolList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64List: float64->string */ func MapStringToFloat64List(m Float64List, f func(float64) string) StringList { acc := NilStringList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64List: float64->int */ func MapIntToFloat64List(m Float64List, f func(float64) int) IntList { acc := NilIntList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64List: float64->int8 */ func MapInt8ToFloat64List(m Float64List, f func(float64) int8) Int8List { acc := NilInt8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64List: float64->int16 */ func MapInt16ToFloat64List(m Float64List, f func(float64) int16) Int16List { acc := NilInt16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64List: float64->int32 */ func MapInt32ToFloat64List(m Float64List, f func(float64) int32) Int32List { acc := NilInt32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64List: float64->int64 */ func MapInt64ToFloat64List(m Float64List, f func(float64) int64) Int64List { acc := NilInt64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64List: float64->uint */ func MapUintToFloat64List(m Float64List, f func(float64) uint) UintList { acc := NilUintList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64List: float64->uint8 */ func MapUint8ToFloat64List(m Float64List, f func(float64) uint8) Uint8List { acc := NilUint8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64List: float64->uint16 */ func MapUint16ToFloat64List(m Float64List, f func(float64) uint16) Uint16List { acc := NilUint16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64List: float64->uint32 */ func MapUint32ToFloat64List(m Float64List, f func(float64) uint32) Uint32List { acc := NilUint32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64List: float64->uint64 */ func MapUint64ToFloat64List(m Float64List, f func(float64) uint64) Uint64List { acc := NilUint64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64List: float64->uintptr */ func MapUintptrToFloat64List(m Float64List, f func(float64) uintptr) UintptrList { acc := NilUintptrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64List: float64->byte */ func MapByteToFloat64List(m Float64List, f func(float64) byte) ByteList { acc := NilByteList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64List: float64->rune */ func MapRuneToFloat64List(m Float64List, f func(float64) rune) RuneList { acc := NilRuneList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64List: float64->float32 */ func MapFloat32ToFloat64List(m Float64List, f func(float64) float32) Float32List { acc := NilFloat32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64List: float64->float64 */ func MapFloat64ToFloat64List(m Float64List, f func(float64) float64) Float64List { acc := NilFloat64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64List: float64->complex64 */ func MapComplex64ToFloat64List(m Float64List, f func(float64) complex64) Complex64List { acc := NilComplex64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64List: float64->complex128 */ func MapComplex128ToFloat64List(m Float64List, f func(float64) complex128) Complex128List { acc := NilComplex128List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64List: float64->Any */ func MapAnyToFloat64List(m Float64List, f func(float64) Any) AnyList { acc := NilAnyList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64List: float64->BoolOption */ func MapBoolOptionToFloat64List(m Float64List, f func(float64) BoolOption) BoolOptionList { acc := NilBoolOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64List: float64->StringOption */ func MapStringOptionToFloat64List(m Float64List, f func(float64) StringOption) StringOptionList { acc := NilStringOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64List: float64->IntOption */ func MapIntOptionToFloat64List(m Float64List, f func(float64) IntOption) IntOptionList { acc := NilIntOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64List: float64->Int8Option */ func MapInt8OptionToFloat64List(m Float64List, f func(float64) Int8Option) Int8OptionList { acc := NilInt8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64List: float64->Int16Option */ func MapInt16OptionToFloat64List(m Float64List, f func(float64) Int16Option) Int16OptionList { acc := NilInt16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64List: float64->Int32Option */ func MapInt32OptionToFloat64List(m Float64List, f func(float64) Int32Option) Int32OptionList { acc := NilInt32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64List: float64->Int64Option */ func MapInt64OptionToFloat64List(m Float64List, f func(float64) Int64Option) Int64OptionList { acc := NilInt64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64List: float64->UintOption */ func MapUintOptionToFloat64List(m Float64List, f func(float64) UintOption) UintOptionList { acc := NilUintOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64List: float64->Uint8Option */ func MapUint8OptionToFloat64List(m Float64List, f func(float64) Uint8Option) Uint8OptionList { acc := NilUint8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64List: float64->Uint16Option */ func MapUint16OptionToFloat64List(m Float64List, f func(float64) Uint16Option) Uint16OptionList { acc := NilUint16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64List: float64->Uint32Option */ func MapUint32OptionToFloat64List(m Float64List, f func(float64) Uint32Option) Uint32OptionList { acc := NilUint32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64List: float64->Uint64Option */ func MapUint64OptionToFloat64List(m Float64List, f func(float64) Uint64Option) Uint64OptionList { acc := NilUint64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64List: float64->UintptrOption */ func MapUintptrOptionToFloat64List(m Float64List, f func(float64) UintptrOption) UintptrOptionList { acc := NilUintptrOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64List: float64->ByteOption */ func MapByteOptionToFloat64List(m Float64List, f func(float64) ByteOption) ByteOptionList { acc := NilByteOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64List: float64->RuneOption */ func MapRuneOptionToFloat64List(m Float64List, f func(float64) RuneOption) RuneOptionList { acc := NilRuneOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64List: float64->Float32Option */ func MapFloat32OptionToFloat64List(m Float64List, f func(float64) Float32Option) Float32OptionList { acc := NilFloat32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64List: float64->Float64Option */ func MapFloat64OptionToFloat64List(m Float64List, f func(float64) Float64Option) Float64OptionList { acc := NilFloat64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64List: float64->Complex64Option */ func MapComplex64OptionToFloat64List(m Float64List, f func(float64) Complex64Option) Complex64OptionList { acc := NilComplex64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64List: float64->Complex128Option */ func MapComplex128OptionToFloat64List(m Float64List, f func(float64) Complex128Option) Complex128OptionList { acc := NilComplex128OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64List: float64->AnyOption */ func MapAnyOptionToFloat64List(m Float64List, f func(float64) AnyOption) AnyOptionList { acc := NilAnyOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64List: float64->[]bool */ func MapBoolArrToFloat64List(m Float64List, f func(float64) []bool) BoolArrList { acc := NilBoolArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64List: float64->[]string */ func MapStringArrToFloat64List(m Float64List, f func(float64) []string) StringArrList { acc := NilStringArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64List: float64->[]int */ func MapIntArrToFloat64List(m Float64List, f func(float64) []int) IntArrList { acc := NilIntArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64List: float64->[]int8 */ func MapInt8ArrToFloat64List(m Float64List, f func(float64) []int8) Int8ArrList { acc := NilInt8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64List: float64->[]int16 */ func MapInt16ArrToFloat64List(m Float64List, f func(float64) []int16) Int16ArrList { acc := NilInt16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64List: float64->[]int32 */ func MapInt32ArrToFloat64List(m Float64List, f func(float64) []int32) Int32ArrList { acc := NilInt32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64List: float64->[]int64 */ func MapInt64ArrToFloat64List(m Float64List, f func(float64) []int64) Int64ArrList { acc := NilInt64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64List: float64->[]uint */ func MapUintArrToFloat64List(m Float64List, f func(float64) []uint) UintArrList { acc := NilUintArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64List: float64->[]uint8 */ func MapUint8ArrToFloat64List(m Float64List, f func(float64) []uint8) Uint8ArrList { acc := NilUint8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64List: float64->[]uint16 */ func MapUint16ArrToFloat64List(m Float64List, f func(float64) []uint16) Uint16ArrList { acc := NilUint16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64List: float64->[]uint32 */ func MapUint32ArrToFloat64List(m Float64List, f func(float64) []uint32) Uint32ArrList { acc := NilUint32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64List: float64->[]uint64 */ func MapUint64ArrToFloat64List(m Float64List, f func(float64) []uint64) Uint64ArrList { acc := NilUint64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64List: float64->[]uintptr */ func MapUintptrArrToFloat64List(m Float64List, f func(float64) []uintptr) UintptrArrList { acc := NilUintptrArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64List: float64->[]byte */ func MapByteArrToFloat64List(m Float64List, f func(float64) []byte) ByteArrList { acc := NilByteArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64List: float64->[]rune */ func MapRuneArrToFloat64List(m Float64List, f func(float64) []rune) RuneArrList { acc := NilRuneArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64List: float64->[]float32 */ func MapFloat32ArrToFloat64List(m Float64List, f func(float64) []float32) Float32ArrList { acc := NilFloat32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64List: float64->[]float64 */ func MapFloat64ArrToFloat64List(m Float64List, f func(float64) []float64) Float64ArrList { acc := NilFloat64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64List: float64->[]complex64 */ func MapComplex64ArrToFloat64List(m Float64List, f func(float64) []complex64) Complex64ArrList { acc := NilComplex64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64List: float64->[]complex128 */ func MapComplex128ArrToFloat64List(m Float64List, f func(float64) []complex128) Complex128ArrList { acc := NilComplex128ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64List: float64->[]Any */ func MapAnyArrToFloat64List(m Float64List, f func(float64) []Any) AnyArrList { acc := NilAnyArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64List: float64->BoolList */ func MapBoolListToFloat64List(m Float64List, f func(float64) BoolList) BoolListList { acc := NilBoolListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64List: float64->StringList */ func MapStringListToFloat64List(m Float64List, f func(float64) StringList) StringListList { acc := NilStringListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64List: float64->IntList */ func MapIntListToFloat64List(m Float64List, f func(float64) IntList) IntListList { acc := NilIntListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64List: float64->Int8List */ func MapInt8ListToFloat64List(m Float64List, f func(float64) Int8List) Int8ListList { acc := NilInt8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64List: float64->Int16List */ func MapInt16ListToFloat64List(m Float64List, f func(float64) Int16List) Int16ListList { acc := NilInt16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64List: float64->Int32List */ func MapInt32ListToFloat64List(m Float64List, f func(float64) Int32List) Int32ListList { acc := NilInt32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64List: float64->Int64List */ func MapInt64ListToFloat64List(m Float64List, f func(float64) Int64List) Int64ListList { acc := NilInt64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64List: float64->UintList */ func MapUintListToFloat64List(m Float64List, f func(float64) UintList) UintListList { acc := NilUintListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64List: float64->Uint8List */ func MapUint8ListToFloat64List(m Float64List, f func(float64) Uint8List) Uint8ListList { acc := NilUint8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64List: float64->Uint16List */ func MapUint16ListToFloat64List(m Float64List, f func(float64) Uint16List) Uint16ListList { acc := NilUint16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64List: float64->Uint32List */ func MapUint32ListToFloat64List(m Float64List, f func(float64) Uint32List) Uint32ListList { acc := NilUint32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64List: float64->Uint64List */ func MapUint64ListToFloat64List(m Float64List, f func(float64) Uint64List) Uint64ListList { acc := NilUint64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64List: float64->UintptrList */ func MapUintptrListToFloat64List(m Float64List, f func(float64) UintptrList) UintptrListList { acc := NilUintptrListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64List: float64->ByteList */ func MapByteListToFloat64List(m Float64List, f func(float64) ByteList) ByteListList { acc := NilByteListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64List: float64->RuneList */ func MapRuneListToFloat64List(m Float64List, f func(float64) RuneList) RuneListList { acc := NilRuneListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64List: float64->Float32List */ func MapFloat32ListToFloat64List(m Float64List, f func(float64) Float32List) Float32ListList { acc := NilFloat32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64List: float64->Float64List */ func MapFloat64ListToFloat64List(m Float64List, f func(float64) Float64List) Float64ListList { acc := NilFloat64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64List: float64->Complex64List */ func MapComplex64ListToFloat64List(m Float64List, f func(float64) Complex64List) Complex64ListList { acc := NilComplex64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64List: float64->Complex128List */ func MapComplex128ListToFloat64List(m Float64List, f func(float64) Complex128List) Complex128ListList { acc := NilComplex128ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64List: float64->AnyList */ func MapAnyListToFloat64List(m Float64List, f func(float64) AnyList) AnyListList { acc := NilAnyListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64List: complex64->bool */ func MapBoolToComplex64List(m Complex64List, f func(complex64) bool) BoolList { acc := NilBoolList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64List: complex64->string */ func MapStringToComplex64List(m Complex64List, f func(complex64) string) StringList { acc := NilStringList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64List: complex64->int */ func MapIntToComplex64List(m Complex64List, f func(complex64) int) IntList { acc := NilIntList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64List: complex64->int8 */ func MapInt8ToComplex64List(m Complex64List, f func(complex64) int8) Int8List { acc := NilInt8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64List: complex64->int16 */ func MapInt16ToComplex64List(m Complex64List, f func(complex64) int16) Int16List { acc := NilInt16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64List: complex64->int32 */ func MapInt32ToComplex64List(m Complex64List, f func(complex64) int32) Int32List { acc := NilInt32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64List: complex64->int64 */ func MapInt64ToComplex64List(m Complex64List, f func(complex64) int64) Int64List { acc := NilInt64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64List: complex64->uint */ func MapUintToComplex64List(m Complex64List, f func(complex64) uint) UintList { acc := NilUintList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64List: complex64->uint8 */ func MapUint8ToComplex64List(m Complex64List, f func(complex64) uint8) Uint8List { acc := NilUint8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64List: complex64->uint16 */ func MapUint16ToComplex64List(m Complex64List, f func(complex64) uint16) Uint16List { acc := NilUint16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64List: complex64->uint32 */ func MapUint32ToComplex64List(m Complex64List, f func(complex64) uint32) Uint32List { acc := NilUint32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64List: complex64->uint64 */ func MapUint64ToComplex64List(m Complex64List, f func(complex64) uint64) Uint64List { acc := NilUint64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64List: complex64->uintptr */ func MapUintptrToComplex64List(m Complex64List, f func(complex64) uintptr) UintptrList { acc := NilUintptrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64List: complex64->byte */ func MapByteToComplex64List(m Complex64List, f func(complex64) byte) ByteList { acc := NilByteList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64List: complex64->rune */ func MapRuneToComplex64List(m Complex64List, f func(complex64) rune) RuneList { acc := NilRuneList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64List: complex64->float32 */ func MapFloat32ToComplex64List(m Complex64List, f func(complex64) float32) Float32List { acc := NilFloat32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64List: complex64->float64 */ func MapFloat64ToComplex64List(m Complex64List, f func(complex64) float64) Float64List { acc := NilFloat64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64List: complex64->complex64 */ func MapComplex64ToComplex64List(m Complex64List, f func(complex64) complex64) Complex64List { acc := NilComplex64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64List: complex64->complex128 */ func MapComplex128ToComplex64List(m Complex64List, f func(complex64) complex128) Complex128List { acc := NilComplex128List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64List: complex64->Any */ func MapAnyToComplex64List(m Complex64List, f func(complex64) Any) AnyList { acc := NilAnyList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64List: complex64->BoolOption */ func MapBoolOptionToComplex64List(m Complex64List, f func(complex64) BoolOption) BoolOptionList { acc := NilBoolOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64List: complex64->StringOption */ func MapStringOptionToComplex64List(m Complex64List, f func(complex64) StringOption) StringOptionList { acc := NilStringOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64List: complex64->IntOption */ func MapIntOptionToComplex64List(m Complex64List, f func(complex64) IntOption) IntOptionList { acc := NilIntOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64List: complex64->Int8Option */ func MapInt8OptionToComplex64List(m Complex64List, f func(complex64) Int8Option) Int8OptionList { acc := NilInt8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64List: complex64->Int16Option */ func MapInt16OptionToComplex64List(m Complex64List, f func(complex64) Int16Option) Int16OptionList { acc := NilInt16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64List: complex64->Int32Option */ func MapInt32OptionToComplex64List(m Complex64List, f func(complex64) Int32Option) Int32OptionList { acc := NilInt32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64List: complex64->Int64Option */ func MapInt64OptionToComplex64List(m Complex64List, f func(complex64) Int64Option) Int64OptionList { acc := NilInt64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64List: complex64->UintOption */ func MapUintOptionToComplex64List(m Complex64List, f func(complex64) UintOption) UintOptionList { acc := NilUintOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64List: complex64->Uint8Option */ func MapUint8OptionToComplex64List(m Complex64List, f func(complex64) Uint8Option) Uint8OptionList { acc := NilUint8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64List: complex64->Uint16Option */ func MapUint16OptionToComplex64List(m Complex64List, f func(complex64) Uint16Option) Uint16OptionList { acc := NilUint16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64List: complex64->Uint32Option */ func MapUint32OptionToComplex64List(m Complex64List, f func(complex64) Uint32Option) Uint32OptionList { acc := NilUint32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64List: complex64->Uint64Option */ func MapUint64OptionToComplex64List(m Complex64List, f func(complex64) Uint64Option) Uint64OptionList { acc := NilUint64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64List: complex64->UintptrOption */ func MapUintptrOptionToComplex64List(m Complex64List, f func(complex64) UintptrOption) UintptrOptionList { acc := NilUintptrOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64List: complex64->ByteOption */ func MapByteOptionToComplex64List(m Complex64List, f func(complex64) ByteOption) ByteOptionList { acc := NilByteOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64List: complex64->RuneOption */ func MapRuneOptionToComplex64List(m Complex64List, f func(complex64) RuneOption) RuneOptionList { acc := NilRuneOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64List: complex64->Float32Option */ func MapFloat32OptionToComplex64List(m Complex64List, f func(complex64) Float32Option) Float32OptionList { acc := NilFloat32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64List: complex64->Float64Option */ func MapFloat64OptionToComplex64List(m Complex64List, f func(complex64) Float64Option) Float64OptionList { acc := NilFloat64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64List: complex64->Complex64Option */ func MapComplex64OptionToComplex64List(m Complex64List, f func(complex64) Complex64Option) Complex64OptionList { acc := NilComplex64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64List: complex64->Complex128Option */ func MapComplex128OptionToComplex64List(m Complex64List, f func(complex64) Complex128Option) Complex128OptionList { acc := NilComplex128OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64List: complex64->AnyOption */ func MapAnyOptionToComplex64List(m Complex64List, f func(complex64) AnyOption) AnyOptionList { acc := NilAnyOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64List: complex64->[]bool */ func MapBoolArrToComplex64List(m Complex64List, f func(complex64) []bool) BoolArrList { acc := NilBoolArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64List: complex64->[]string */ func MapStringArrToComplex64List(m Complex64List, f func(complex64) []string) StringArrList { acc := NilStringArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64List: complex64->[]int */ func MapIntArrToComplex64List(m Complex64List, f func(complex64) []int) IntArrList { acc := NilIntArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64List: complex64->[]int8 */ func MapInt8ArrToComplex64List(m Complex64List, f func(complex64) []int8) Int8ArrList { acc := NilInt8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64List: complex64->[]int16 */ func MapInt16ArrToComplex64List(m Complex64List, f func(complex64) []int16) Int16ArrList { acc := NilInt16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64List: complex64->[]int32 */ func MapInt32ArrToComplex64List(m Complex64List, f func(complex64) []int32) Int32ArrList { acc := NilInt32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64List: complex64->[]int64 */ func MapInt64ArrToComplex64List(m Complex64List, f func(complex64) []int64) Int64ArrList { acc := NilInt64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64List: complex64->[]uint */ func MapUintArrToComplex64List(m Complex64List, f func(complex64) []uint) UintArrList { acc := NilUintArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64List: complex64->[]uint8 */ func MapUint8ArrToComplex64List(m Complex64List, f func(complex64) []uint8) Uint8ArrList { acc := NilUint8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64List: complex64->[]uint16 */ func MapUint16ArrToComplex64List(m Complex64List, f func(complex64) []uint16) Uint16ArrList { acc := NilUint16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64List: complex64->[]uint32 */ func MapUint32ArrToComplex64List(m Complex64List, f func(complex64) []uint32) Uint32ArrList { acc := NilUint32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64List: complex64->[]uint64 */ func MapUint64ArrToComplex64List(m Complex64List, f func(complex64) []uint64) Uint64ArrList { acc := NilUint64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64List: complex64->[]uintptr */ func MapUintptrArrToComplex64List(m Complex64List, f func(complex64) []uintptr) UintptrArrList { acc := NilUintptrArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64List: complex64->[]byte */ func MapByteArrToComplex64List(m Complex64List, f func(complex64) []byte) ByteArrList { acc := NilByteArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64List: complex64->[]rune */ func MapRuneArrToComplex64List(m Complex64List, f func(complex64) []rune) RuneArrList { acc := NilRuneArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64List: complex64->[]float32 */ func MapFloat32ArrToComplex64List(m Complex64List, f func(complex64) []float32) Float32ArrList { acc := NilFloat32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64List: complex64->[]float64 */ func MapFloat64ArrToComplex64List(m Complex64List, f func(complex64) []float64) Float64ArrList { acc := NilFloat64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64List: complex64->[]complex64 */ func MapComplex64ArrToComplex64List(m Complex64List, f func(complex64) []complex64) Complex64ArrList { acc := NilComplex64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64List: complex64->[]complex128 */ func MapComplex128ArrToComplex64List(m Complex64List, f func(complex64) []complex128) Complex128ArrList { acc := NilComplex128ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64List: complex64->[]Any */ func MapAnyArrToComplex64List(m Complex64List, f func(complex64) []Any) AnyArrList { acc := NilAnyArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64List: complex64->BoolList */ func MapBoolListToComplex64List(m Complex64List, f func(complex64) BoolList) BoolListList { acc := NilBoolListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64List: complex64->StringList */ func MapStringListToComplex64List(m Complex64List, f func(complex64) StringList) StringListList { acc := NilStringListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64List: complex64->IntList */ func MapIntListToComplex64List(m Complex64List, f func(complex64) IntList) IntListList { acc := NilIntListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64List: complex64->Int8List */ func MapInt8ListToComplex64List(m Complex64List, f func(complex64) Int8List) Int8ListList { acc := NilInt8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64List: complex64->Int16List */ func MapInt16ListToComplex64List(m Complex64List, f func(complex64) Int16List) Int16ListList { acc := NilInt16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64List: complex64->Int32List */ func MapInt32ListToComplex64List(m Complex64List, f func(complex64) Int32List) Int32ListList { acc := NilInt32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64List: complex64->Int64List */ func MapInt64ListToComplex64List(m Complex64List, f func(complex64) Int64List) Int64ListList { acc := NilInt64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64List: complex64->UintList */ func MapUintListToComplex64List(m Complex64List, f func(complex64) UintList) UintListList { acc := NilUintListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64List: complex64->Uint8List */ func MapUint8ListToComplex64List(m Complex64List, f func(complex64) Uint8List) Uint8ListList { acc := NilUint8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64List: complex64->Uint16List */ func MapUint16ListToComplex64List(m Complex64List, f func(complex64) Uint16List) Uint16ListList { acc := NilUint16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64List: complex64->Uint32List */ func MapUint32ListToComplex64List(m Complex64List, f func(complex64) Uint32List) Uint32ListList { acc := NilUint32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64List: complex64->Uint64List */ func MapUint64ListToComplex64List(m Complex64List, f func(complex64) Uint64List) Uint64ListList { acc := NilUint64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64List: complex64->UintptrList */ func MapUintptrListToComplex64List(m Complex64List, f func(complex64) UintptrList) UintptrListList { acc := NilUintptrListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64List: complex64->ByteList */ func MapByteListToComplex64List(m Complex64List, f func(complex64) ByteList) ByteListList { acc := NilByteListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64List: complex64->RuneList */ func MapRuneListToComplex64List(m Complex64List, f func(complex64) RuneList) RuneListList { acc := NilRuneListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64List: complex64->Float32List */ func MapFloat32ListToComplex64List(m Complex64List, f func(complex64) Float32List) Float32ListList { acc := NilFloat32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64List: complex64->Float64List */ func MapFloat64ListToComplex64List(m Complex64List, f func(complex64) Float64List) Float64ListList { acc := NilFloat64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64List: complex64->Complex64List */ func MapComplex64ListToComplex64List(m Complex64List, f func(complex64) Complex64List) Complex64ListList { acc := NilComplex64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64List: complex64->Complex128List */ func MapComplex128ListToComplex64List(m Complex64List, f func(complex64) Complex128List) Complex128ListList { acc := NilComplex128ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64List: complex64->AnyList */ func MapAnyListToComplex64List(m Complex64List, f func(complex64) AnyList) AnyListList { acc := NilAnyListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128List: complex128->bool */ func MapBoolToComplex128List(m Complex128List, f func(complex128) bool) BoolList { acc := NilBoolList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128List: complex128->string */ func MapStringToComplex128List(m Complex128List, f func(complex128) string) StringList { acc := NilStringList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128List: complex128->int */ func MapIntToComplex128List(m Complex128List, f func(complex128) int) IntList { acc := NilIntList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128List: complex128->int8 */ func MapInt8ToComplex128List(m Complex128List, f func(complex128) int8) Int8List { acc := NilInt8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128List: complex128->int16 */ func MapInt16ToComplex128List(m Complex128List, f func(complex128) int16) Int16List { acc := NilInt16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128List: complex128->int32 */ func MapInt32ToComplex128List(m Complex128List, f func(complex128) int32) Int32List { acc := NilInt32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128List: complex128->int64 */ func MapInt64ToComplex128List(m Complex128List, f func(complex128) int64) Int64List { acc := NilInt64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128List: complex128->uint */ func MapUintToComplex128List(m Complex128List, f func(complex128) uint) UintList { acc := NilUintList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128List: complex128->uint8 */ func MapUint8ToComplex128List(m Complex128List, f func(complex128) uint8) Uint8List { acc := NilUint8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128List: complex128->uint16 */ func MapUint16ToComplex128List(m Complex128List, f func(complex128) uint16) Uint16List { acc := NilUint16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128List: complex128->uint32 */ func MapUint32ToComplex128List(m Complex128List, f func(complex128) uint32) Uint32List { acc := NilUint32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128List: complex128->uint64 */ func MapUint64ToComplex128List(m Complex128List, f func(complex128) uint64) Uint64List { acc := NilUint64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128List: complex128->uintptr */ func MapUintptrToComplex128List(m Complex128List, f func(complex128) uintptr) UintptrList { acc := NilUintptrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128List: complex128->byte */ func MapByteToComplex128List(m Complex128List, f func(complex128) byte) ByteList { acc := NilByteList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128List: complex128->rune */ func MapRuneToComplex128List(m Complex128List, f func(complex128) rune) RuneList { acc := NilRuneList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128List: complex128->float32 */ func MapFloat32ToComplex128List(m Complex128List, f func(complex128) float32) Float32List { acc := NilFloat32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128List: complex128->float64 */ func MapFloat64ToComplex128List(m Complex128List, f func(complex128) float64) Float64List { acc := NilFloat64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128List: complex128->complex64 */ func MapComplex64ToComplex128List(m Complex128List, f func(complex128) complex64) Complex64List { acc := NilComplex64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128List: complex128->complex128 */ func MapComplex128ToComplex128List(m Complex128List, f func(complex128) complex128) Complex128List { acc := NilComplex128List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128List: complex128->Any */ func MapAnyToComplex128List(m Complex128List, f func(complex128) Any) AnyList { acc := NilAnyList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128List: complex128->BoolOption */ func MapBoolOptionToComplex128List(m Complex128List, f func(complex128) BoolOption) BoolOptionList { acc := NilBoolOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128List: complex128->StringOption */ func MapStringOptionToComplex128List(m Complex128List, f func(complex128) StringOption) StringOptionList { acc := NilStringOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128List: complex128->IntOption */ func MapIntOptionToComplex128List(m Complex128List, f func(complex128) IntOption) IntOptionList { acc := NilIntOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128List: complex128->Int8Option */ func MapInt8OptionToComplex128List(m Complex128List, f func(complex128) Int8Option) Int8OptionList { acc := NilInt8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128List: complex128->Int16Option */ func MapInt16OptionToComplex128List(m Complex128List, f func(complex128) Int16Option) Int16OptionList { acc := NilInt16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128List: complex128->Int32Option */ func MapInt32OptionToComplex128List(m Complex128List, f func(complex128) Int32Option) Int32OptionList { acc := NilInt32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128List: complex128->Int64Option */ func MapInt64OptionToComplex128List(m Complex128List, f func(complex128) Int64Option) Int64OptionList { acc := NilInt64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128List: complex128->UintOption */ func MapUintOptionToComplex128List(m Complex128List, f func(complex128) UintOption) UintOptionList { acc := NilUintOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128List: complex128->Uint8Option */ func MapUint8OptionToComplex128List(m Complex128List, f func(complex128) Uint8Option) Uint8OptionList { acc := NilUint8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128List: complex128->Uint16Option */ func MapUint16OptionToComplex128List(m Complex128List, f func(complex128) Uint16Option) Uint16OptionList { acc := NilUint16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128List: complex128->Uint32Option */ func MapUint32OptionToComplex128List(m Complex128List, f func(complex128) Uint32Option) Uint32OptionList { acc := NilUint32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128List: complex128->Uint64Option */ func MapUint64OptionToComplex128List(m Complex128List, f func(complex128) Uint64Option) Uint64OptionList { acc := NilUint64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128List: complex128->UintptrOption */ func MapUintptrOptionToComplex128List(m Complex128List, f func(complex128) UintptrOption) UintptrOptionList { acc := NilUintptrOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128List: complex128->ByteOption */ func MapByteOptionToComplex128List(m Complex128List, f func(complex128) ByteOption) ByteOptionList { acc := NilByteOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128List: complex128->RuneOption */ func MapRuneOptionToComplex128List(m Complex128List, f func(complex128) RuneOption) RuneOptionList { acc := NilRuneOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128List: complex128->Float32Option */ func MapFloat32OptionToComplex128List(m Complex128List, f func(complex128) Float32Option) Float32OptionList { acc := NilFloat32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128List: complex128->Float64Option */ func MapFloat64OptionToComplex128List(m Complex128List, f func(complex128) Float64Option) Float64OptionList { acc := NilFloat64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128List: complex128->Complex64Option */ func MapComplex64OptionToComplex128List(m Complex128List, f func(complex128) Complex64Option) Complex64OptionList { acc := NilComplex64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128List: complex128->Complex128Option */ func MapComplex128OptionToComplex128List(m Complex128List, f func(complex128) Complex128Option) Complex128OptionList { acc := NilComplex128OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128List: complex128->AnyOption */ func MapAnyOptionToComplex128List(m Complex128List, f func(complex128) AnyOption) AnyOptionList { acc := NilAnyOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128List: complex128->[]bool */ func MapBoolArrToComplex128List(m Complex128List, f func(complex128) []bool) BoolArrList { acc := NilBoolArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128List: complex128->[]string */ func MapStringArrToComplex128List(m Complex128List, f func(complex128) []string) StringArrList { acc := NilStringArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128List: complex128->[]int */ func MapIntArrToComplex128List(m Complex128List, f func(complex128) []int) IntArrList { acc := NilIntArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128List: complex128->[]int8 */ func MapInt8ArrToComplex128List(m Complex128List, f func(complex128) []int8) Int8ArrList { acc := NilInt8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128List: complex128->[]int16 */ func MapInt16ArrToComplex128List(m Complex128List, f func(complex128) []int16) Int16ArrList { acc := NilInt16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128List: complex128->[]int32 */ func MapInt32ArrToComplex128List(m Complex128List, f func(complex128) []int32) Int32ArrList { acc := NilInt32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128List: complex128->[]int64 */ func MapInt64ArrToComplex128List(m Complex128List, f func(complex128) []int64) Int64ArrList { acc := NilInt64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128List: complex128->[]uint */ func MapUintArrToComplex128List(m Complex128List, f func(complex128) []uint) UintArrList { acc := NilUintArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128List: complex128->[]uint8 */ func MapUint8ArrToComplex128List(m Complex128List, f func(complex128) []uint8) Uint8ArrList { acc := NilUint8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128List: complex128->[]uint16 */ func MapUint16ArrToComplex128List(m Complex128List, f func(complex128) []uint16) Uint16ArrList { acc := NilUint16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128List: complex128->[]uint32 */ func MapUint32ArrToComplex128List(m Complex128List, f func(complex128) []uint32) Uint32ArrList { acc := NilUint32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128List: complex128->[]uint64 */ func MapUint64ArrToComplex128List(m Complex128List, f func(complex128) []uint64) Uint64ArrList { acc := NilUint64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128List: complex128->[]uintptr */ func MapUintptrArrToComplex128List(m Complex128List, f func(complex128) []uintptr) UintptrArrList { acc := NilUintptrArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128List: complex128->[]byte */ func MapByteArrToComplex128List(m Complex128List, f func(complex128) []byte) ByteArrList { acc := NilByteArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128List: complex128->[]rune */ func MapRuneArrToComplex128List(m Complex128List, f func(complex128) []rune) RuneArrList { acc := NilRuneArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128List: complex128->[]float32 */ func MapFloat32ArrToComplex128List(m Complex128List, f func(complex128) []float32) Float32ArrList { acc := NilFloat32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128List: complex128->[]float64 */ func MapFloat64ArrToComplex128List(m Complex128List, f func(complex128) []float64) Float64ArrList { acc := NilFloat64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128List: complex128->[]complex64 */ func MapComplex64ArrToComplex128List(m Complex128List, f func(complex128) []complex64) Complex64ArrList { acc := NilComplex64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128List: complex128->[]complex128 */ func MapComplex128ArrToComplex128List(m Complex128List, f func(complex128) []complex128) Complex128ArrList { acc := NilComplex128ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128List: complex128->[]Any */ func MapAnyArrToComplex128List(m Complex128List, f func(complex128) []Any) AnyArrList { acc := NilAnyArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128List: complex128->BoolList */ func MapBoolListToComplex128List(m Complex128List, f func(complex128) BoolList) BoolListList { acc := NilBoolListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128List: complex128->StringList */ func MapStringListToComplex128List(m Complex128List, f func(complex128) StringList) StringListList { acc := NilStringListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128List: complex128->IntList */ func MapIntListToComplex128List(m Complex128List, f func(complex128) IntList) IntListList { acc := NilIntListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128List: complex128->Int8List */ func MapInt8ListToComplex128List(m Complex128List, f func(complex128) Int8List) Int8ListList { acc := NilInt8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128List: complex128->Int16List */ func MapInt16ListToComplex128List(m Complex128List, f func(complex128) Int16List) Int16ListList { acc := NilInt16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128List: complex128->Int32List */ func MapInt32ListToComplex128List(m Complex128List, f func(complex128) Int32List) Int32ListList { acc := NilInt32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128List: complex128->Int64List */ func MapInt64ListToComplex128List(m Complex128List, f func(complex128) Int64List) Int64ListList { acc := NilInt64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128List: complex128->UintList */ func MapUintListToComplex128List(m Complex128List, f func(complex128) UintList) UintListList { acc := NilUintListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128List: complex128->Uint8List */ func MapUint8ListToComplex128List(m Complex128List, f func(complex128) Uint8List) Uint8ListList { acc := NilUint8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128List: complex128->Uint16List */ func MapUint16ListToComplex128List(m Complex128List, f func(complex128) Uint16List) Uint16ListList { acc := NilUint16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128List: complex128->Uint32List */ func MapUint32ListToComplex128List(m Complex128List, f func(complex128) Uint32List) Uint32ListList { acc := NilUint32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128List: complex128->Uint64List */ func MapUint64ListToComplex128List(m Complex128List, f func(complex128) Uint64List) Uint64ListList { acc := NilUint64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128List: complex128->UintptrList */ func MapUintptrListToComplex128List(m Complex128List, f func(complex128) UintptrList) UintptrListList { acc := NilUintptrListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128List: complex128->ByteList */ func MapByteListToComplex128List(m Complex128List, f func(complex128) ByteList) ByteListList { acc := NilByteListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128List: complex128->RuneList */ func MapRuneListToComplex128List(m Complex128List, f func(complex128) RuneList) RuneListList { acc := NilRuneListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128List: complex128->Float32List */ func MapFloat32ListToComplex128List(m Complex128List, f func(complex128) Float32List) Float32ListList { acc := NilFloat32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128List: complex128->Float64List */ func MapFloat64ListToComplex128List(m Complex128List, f func(complex128) Float64List) Float64ListList { acc := NilFloat64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128List: complex128->Complex64List */ func MapComplex64ListToComplex128List(m Complex128List, f func(complex128) Complex64List) Complex64ListList { acc := NilComplex64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128List: complex128->Complex128List */ func MapComplex128ListToComplex128List(m Complex128List, f func(complex128) Complex128List) Complex128ListList { acc := NilComplex128ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128List: complex128->AnyList */ func MapAnyListToComplex128List(m Complex128List, f func(complex128) AnyList) AnyListList { acc := NilAnyListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyList: Any->bool */ func MapBoolToAnyList(m AnyList, f func(Any) bool) BoolList { acc := NilBoolList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyList: Any->string */ func MapStringToAnyList(m AnyList, f func(Any) string) StringList { acc := NilStringList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyList: Any->int */ func MapIntToAnyList(m AnyList, f func(Any) int) IntList { acc := NilIntList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyList: Any->int8 */ func MapInt8ToAnyList(m AnyList, f func(Any) int8) Int8List { acc := NilInt8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyList: Any->int16 */ func MapInt16ToAnyList(m AnyList, f func(Any) int16) Int16List { acc := NilInt16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyList: Any->int32 */ func MapInt32ToAnyList(m AnyList, f func(Any) int32) Int32List { acc := NilInt32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyList: Any->int64 */ func MapInt64ToAnyList(m AnyList, f func(Any) int64) Int64List { acc := NilInt64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyList: Any->uint */ func MapUintToAnyList(m AnyList, f func(Any) uint) UintList { acc := NilUintList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyList: Any->uint8 */ func MapUint8ToAnyList(m AnyList, f func(Any) uint8) Uint8List { acc := NilUint8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyList: Any->uint16 */ func MapUint16ToAnyList(m AnyList, f func(Any) uint16) Uint16List { acc := NilUint16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyList: Any->uint32 */ func MapUint32ToAnyList(m AnyList, f func(Any) uint32) Uint32List { acc := NilUint32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyList: Any->uint64 */ func MapUint64ToAnyList(m AnyList, f func(Any) uint64) Uint64List { acc := NilUint64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyList: Any->uintptr */ func MapUintptrToAnyList(m AnyList, f func(Any) uintptr) UintptrList { acc := NilUintptrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyList: Any->byte */ func MapByteToAnyList(m AnyList, f func(Any) byte) ByteList { acc := NilByteList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyList: Any->rune */ func MapRuneToAnyList(m AnyList, f func(Any) rune) RuneList { acc := NilRuneList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyList: Any->float32 */ func MapFloat32ToAnyList(m AnyList, f func(Any) float32) Float32List { acc := NilFloat32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyList: Any->float64 */ func MapFloat64ToAnyList(m AnyList, f func(Any) float64) Float64List { acc := NilFloat64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyList: Any->complex64 */ func MapComplex64ToAnyList(m AnyList, f func(Any) complex64) Complex64List { acc := NilComplex64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyList: Any->complex128 */ func MapComplex128ToAnyList(m AnyList, f func(Any) complex128) Complex128List { acc := NilComplex128List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyList: Any->Any */ func MapAnyToAnyList(m AnyList, f func(Any) Any) AnyList { acc := NilAnyList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyList: Any->BoolOption */ func MapBoolOptionToAnyList(m AnyList, f func(Any) BoolOption) BoolOptionList { acc := NilBoolOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyList: Any->StringOption */ func MapStringOptionToAnyList(m AnyList, f func(Any) StringOption) StringOptionList { acc := NilStringOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyList: Any->IntOption */ func MapIntOptionToAnyList(m AnyList, f func(Any) IntOption) IntOptionList { acc := NilIntOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyList: Any->Int8Option */ func MapInt8OptionToAnyList(m AnyList, f func(Any) Int8Option) Int8OptionList { acc := NilInt8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyList: Any->Int16Option */ func MapInt16OptionToAnyList(m AnyList, f func(Any) Int16Option) Int16OptionList { acc := NilInt16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyList: Any->Int32Option */ func MapInt32OptionToAnyList(m AnyList, f func(Any) Int32Option) Int32OptionList { acc := NilInt32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyList: Any->Int64Option */ func MapInt64OptionToAnyList(m AnyList, f func(Any) Int64Option) Int64OptionList { acc := NilInt64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyList: Any->UintOption */ func MapUintOptionToAnyList(m AnyList, f func(Any) UintOption) UintOptionList { acc := NilUintOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyList: Any->Uint8Option */ func MapUint8OptionToAnyList(m AnyList, f func(Any) Uint8Option) Uint8OptionList { acc := NilUint8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyList: Any->Uint16Option */ func MapUint16OptionToAnyList(m AnyList, f func(Any) Uint16Option) Uint16OptionList { acc := NilUint16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyList: Any->Uint32Option */ func MapUint32OptionToAnyList(m AnyList, f func(Any) Uint32Option) Uint32OptionList { acc := NilUint32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyList: Any->Uint64Option */ func MapUint64OptionToAnyList(m AnyList, f func(Any) Uint64Option) Uint64OptionList { acc := NilUint64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyList: Any->UintptrOption */ func MapUintptrOptionToAnyList(m AnyList, f func(Any) UintptrOption) UintptrOptionList { acc := NilUintptrOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyList: Any->ByteOption */ func MapByteOptionToAnyList(m AnyList, f func(Any) ByteOption) ByteOptionList { acc := NilByteOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyList: Any->RuneOption */ func MapRuneOptionToAnyList(m AnyList, f func(Any) RuneOption) RuneOptionList { acc := NilRuneOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyList: Any->Float32Option */ func MapFloat32OptionToAnyList(m AnyList, f func(Any) Float32Option) Float32OptionList { acc := NilFloat32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyList: Any->Float64Option */ func MapFloat64OptionToAnyList(m AnyList, f func(Any) Float64Option) Float64OptionList { acc := NilFloat64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyList: Any->Complex64Option */ func MapComplex64OptionToAnyList(m AnyList, f func(Any) Complex64Option) Complex64OptionList { acc := NilComplex64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyList: Any->Complex128Option */ func MapComplex128OptionToAnyList(m AnyList, f func(Any) Complex128Option) Complex128OptionList { acc := NilComplex128OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyList: Any->AnyOption */ func MapAnyOptionToAnyList(m AnyList, f func(Any) AnyOption) AnyOptionList { acc := NilAnyOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyList: Any->[]bool */ func MapBoolArrToAnyList(m AnyList, f func(Any) []bool) BoolArrList { acc := NilBoolArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyList: Any->[]string */ func MapStringArrToAnyList(m AnyList, f func(Any) []string) StringArrList { acc := NilStringArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyList: Any->[]int */ func MapIntArrToAnyList(m AnyList, f func(Any) []int) IntArrList { acc := NilIntArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyList: Any->[]int8 */ func MapInt8ArrToAnyList(m AnyList, f func(Any) []int8) Int8ArrList { acc := NilInt8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyList: Any->[]int16 */ func MapInt16ArrToAnyList(m AnyList, f func(Any) []int16) Int16ArrList { acc := NilInt16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyList: Any->[]int32 */ func MapInt32ArrToAnyList(m AnyList, f func(Any) []int32) Int32ArrList { acc := NilInt32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyList: Any->[]int64 */ func MapInt64ArrToAnyList(m AnyList, f func(Any) []int64) Int64ArrList { acc := NilInt64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyList: Any->[]uint */ func MapUintArrToAnyList(m AnyList, f func(Any) []uint) UintArrList { acc := NilUintArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyList: Any->[]uint8 */ func MapUint8ArrToAnyList(m AnyList, f func(Any) []uint8) Uint8ArrList { acc := NilUint8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyList: Any->[]uint16 */ func MapUint16ArrToAnyList(m AnyList, f func(Any) []uint16) Uint16ArrList { acc := NilUint16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyList: Any->[]uint32 */ func MapUint32ArrToAnyList(m AnyList, f func(Any) []uint32) Uint32ArrList { acc := NilUint32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyList: Any->[]uint64 */ func MapUint64ArrToAnyList(m AnyList, f func(Any) []uint64) Uint64ArrList { acc := NilUint64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyList: Any->[]uintptr */ func MapUintptrArrToAnyList(m AnyList, f func(Any) []uintptr) UintptrArrList { acc := NilUintptrArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyList: Any->[]byte */ func MapByteArrToAnyList(m AnyList, f func(Any) []byte) ByteArrList { acc := NilByteArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyList: Any->[]rune */ func MapRuneArrToAnyList(m AnyList, f func(Any) []rune) RuneArrList { acc := NilRuneArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyList: Any->[]float32 */ func MapFloat32ArrToAnyList(m AnyList, f func(Any) []float32) Float32ArrList { acc := NilFloat32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyList: Any->[]float64 */ func MapFloat64ArrToAnyList(m AnyList, f func(Any) []float64) Float64ArrList { acc := NilFloat64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyList: Any->[]complex64 */ func MapComplex64ArrToAnyList(m AnyList, f func(Any) []complex64) Complex64ArrList { acc := NilComplex64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyList: Any->[]complex128 */ func MapComplex128ArrToAnyList(m AnyList, f func(Any) []complex128) Complex128ArrList { acc := NilComplex128ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyList: Any->[]Any */ func MapAnyArrToAnyList(m AnyList, f func(Any) []Any) AnyArrList { acc := NilAnyArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyList: Any->BoolList */ func MapBoolListToAnyList(m AnyList, f func(Any) BoolList) BoolListList { acc := NilBoolListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyList: Any->StringList */ func MapStringListToAnyList(m AnyList, f func(Any) StringList) StringListList { acc := NilStringListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyList: Any->IntList */ func MapIntListToAnyList(m AnyList, f func(Any) IntList) IntListList { acc := NilIntListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyList: Any->Int8List */ func MapInt8ListToAnyList(m AnyList, f func(Any) Int8List) Int8ListList { acc := NilInt8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyList: Any->Int16List */ func MapInt16ListToAnyList(m AnyList, f func(Any) Int16List) Int16ListList { acc := NilInt16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyList: Any->Int32List */ func MapInt32ListToAnyList(m AnyList, f func(Any) Int32List) Int32ListList { acc := NilInt32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyList: Any->Int64List */ func MapInt64ListToAnyList(m AnyList, f func(Any) Int64List) Int64ListList { acc := NilInt64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyList: Any->UintList */ func MapUintListToAnyList(m AnyList, f func(Any) UintList) UintListList { acc := NilUintListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyList: Any->Uint8List */ func MapUint8ListToAnyList(m AnyList, f func(Any) Uint8List) Uint8ListList { acc := NilUint8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyList: Any->Uint16List */ func MapUint16ListToAnyList(m AnyList, f func(Any) Uint16List) Uint16ListList { acc := NilUint16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyList: Any->Uint32List */ func MapUint32ListToAnyList(m AnyList, f func(Any) Uint32List) Uint32ListList { acc := NilUint32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyList: Any->Uint64List */ func MapUint64ListToAnyList(m AnyList, f func(Any) Uint64List) Uint64ListList { acc := NilUint64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyList: Any->UintptrList */ func MapUintptrListToAnyList(m AnyList, f func(Any) UintptrList) UintptrListList { acc := NilUintptrListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyList: Any->ByteList */ func MapByteListToAnyList(m AnyList, f func(Any) ByteList) ByteListList { acc := NilByteListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyList: Any->RuneList */ func MapRuneListToAnyList(m AnyList, f func(Any) RuneList) RuneListList { acc := NilRuneListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyList: Any->Float32List */ func MapFloat32ListToAnyList(m AnyList, f func(Any) Float32List) Float32ListList { acc := NilFloat32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyList: Any->Float64List */ func MapFloat64ListToAnyList(m AnyList, f func(Any) Float64List) Float64ListList { acc := NilFloat64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyList: Any->Complex64List */ func MapComplex64ListToAnyList(m AnyList, f func(Any) Complex64List) Complex64ListList { acc := NilComplex64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyList: Any->Complex128List */ func MapComplex128ListToAnyList(m AnyList, f func(Any) Complex128List) Complex128ListList { acc := NilComplex128ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyList: Any->AnyList */ func MapAnyListToAnyList(m AnyList, f func(Any) AnyList) AnyListList { acc := NilAnyListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolOptionList: BoolOption->bool */ func MapBoolToBoolOptionList(m BoolOptionList, f func(BoolOption) bool) BoolList { acc := NilBoolList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolOptionList: BoolOption->string */ func MapStringToBoolOptionList(m BoolOptionList, f func(BoolOption) string) StringList { acc := NilStringList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolOptionList: BoolOption->int */ func MapIntToBoolOptionList(m BoolOptionList, f func(BoolOption) int) IntList { acc := NilIntList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolOptionList: BoolOption->int8 */ func MapInt8ToBoolOptionList(m BoolOptionList, f func(BoolOption) int8) Int8List { acc := NilInt8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolOptionList: BoolOption->int16 */ func MapInt16ToBoolOptionList(m BoolOptionList, f func(BoolOption) int16) Int16List { acc := NilInt16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolOptionList: BoolOption->int32 */ func MapInt32ToBoolOptionList(m BoolOptionList, f func(BoolOption) int32) Int32List { acc := NilInt32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolOptionList: BoolOption->int64 */ func MapInt64ToBoolOptionList(m BoolOptionList, f func(BoolOption) int64) Int64List { acc := NilInt64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolOptionList: BoolOption->uint */ func MapUintToBoolOptionList(m BoolOptionList, f func(BoolOption) uint) UintList { acc := NilUintList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolOptionList: BoolOption->uint8 */ func MapUint8ToBoolOptionList(m BoolOptionList, f func(BoolOption) uint8) Uint8List { acc := NilUint8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolOptionList: BoolOption->uint16 */ func MapUint16ToBoolOptionList(m BoolOptionList, f func(BoolOption) uint16) Uint16List { acc := NilUint16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolOptionList: BoolOption->uint32 */ func MapUint32ToBoolOptionList(m BoolOptionList, f func(BoolOption) uint32) Uint32List { acc := NilUint32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolOptionList: BoolOption->uint64 */ func MapUint64ToBoolOptionList(m BoolOptionList, f func(BoolOption) uint64) Uint64List { acc := NilUint64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolOptionList: BoolOption->uintptr */ func MapUintptrToBoolOptionList(m BoolOptionList, f func(BoolOption) uintptr) UintptrList { acc := NilUintptrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolOptionList: BoolOption->byte */ func MapByteToBoolOptionList(m BoolOptionList, f func(BoolOption) byte) ByteList { acc := NilByteList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolOptionList: BoolOption->rune */ func MapRuneToBoolOptionList(m BoolOptionList, f func(BoolOption) rune) RuneList { acc := NilRuneList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolOptionList: BoolOption->float32 */ func MapFloat32ToBoolOptionList(m BoolOptionList, f func(BoolOption) float32) Float32List { acc := NilFloat32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolOptionList: BoolOption->float64 */ func MapFloat64ToBoolOptionList(m BoolOptionList, f func(BoolOption) float64) Float64List { acc := NilFloat64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolOptionList: BoolOption->complex64 */ func MapComplex64ToBoolOptionList(m BoolOptionList, f func(BoolOption) complex64) Complex64List { acc := NilComplex64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolOptionList: BoolOption->complex128 */ func MapComplex128ToBoolOptionList(m BoolOptionList, f func(BoolOption) complex128) Complex128List { acc := NilComplex128List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolOptionList: BoolOption->Any */ func MapAnyToBoolOptionList(m BoolOptionList, f func(BoolOption) Any) AnyList { acc := NilAnyList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolOptionList: BoolOption->BoolOption */ func MapBoolOptionToBoolOptionList(m BoolOptionList, f func(BoolOption) BoolOption) BoolOptionList { acc := NilBoolOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolOptionList: BoolOption->StringOption */ func MapStringOptionToBoolOptionList(m BoolOptionList, f func(BoolOption) StringOption) StringOptionList { acc := NilStringOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolOptionList: BoolOption->IntOption */ func MapIntOptionToBoolOptionList(m BoolOptionList, f func(BoolOption) IntOption) IntOptionList { acc := NilIntOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolOptionList: BoolOption->Int8Option */ func MapInt8OptionToBoolOptionList(m BoolOptionList, f func(BoolOption) Int8Option) Int8OptionList { acc := NilInt8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolOptionList: BoolOption->Int16Option */ func MapInt16OptionToBoolOptionList(m BoolOptionList, f func(BoolOption) Int16Option) Int16OptionList { acc := NilInt16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolOptionList: BoolOption->Int32Option */ func MapInt32OptionToBoolOptionList(m BoolOptionList, f func(BoolOption) Int32Option) Int32OptionList { acc := NilInt32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolOptionList: BoolOption->Int64Option */ func MapInt64OptionToBoolOptionList(m BoolOptionList, f func(BoolOption) Int64Option) Int64OptionList { acc := NilInt64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolOptionList: BoolOption->UintOption */ func MapUintOptionToBoolOptionList(m BoolOptionList, f func(BoolOption) UintOption) UintOptionList { acc := NilUintOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolOptionList: BoolOption->Uint8Option */ func MapUint8OptionToBoolOptionList(m BoolOptionList, f func(BoolOption) Uint8Option) Uint8OptionList { acc := NilUint8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolOptionList: BoolOption->Uint16Option */ func MapUint16OptionToBoolOptionList(m BoolOptionList, f func(BoolOption) Uint16Option) Uint16OptionList { acc := NilUint16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolOptionList: BoolOption->Uint32Option */ func MapUint32OptionToBoolOptionList(m BoolOptionList, f func(BoolOption) Uint32Option) Uint32OptionList { acc := NilUint32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolOptionList: BoolOption->Uint64Option */ func MapUint64OptionToBoolOptionList(m BoolOptionList, f func(BoolOption) Uint64Option) Uint64OptionList { acc := NilUint64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolOptionList: BoolOption->UintptrOption */ func MapUintptrOptionToBoolOptionList(m BoolOptionList, f func(BoolOption) UintptrOption) UintptrOptionList { acc := NilUintptrOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolOptionList: BoolOption->ByteOption */ func MapByteOptionToBoolOptionList(m BoolOptionList, f func(BoolOption) ByteOption) ByteOptionList { acc := NilByteOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolOptionList: BoolOption->RuneOption */ func MapRuneOptionToBoolOptionList(m BoolOptionList, f func(BoolOption) RuneOption) RuneOptionList { acc := NilRuneOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolOptionList: BoolOption->Float32Option */ func MapFloat32OptionToBoolOptionList(m BoolOptionList, f func(BoolOption) Float32Option) Float32OptionList { acc := NilFloat32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolOptionList: BoolOption->Float64Option */ func MapFloat64OptionToBoolOptionList(m BoolOptionList, f func(BoolOption) Float64Option) Float64OptionList { acc := NilFloat64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolOptionList: BoolOption->Complex64Option */ func MapComplex64OptionToBoolOptionList(m BoolOptionList, f func(BoolOption) Complex64Option) Complex64OptionList { acc := NilComplex64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolOptionList: BoolOption->Complex128Option */ func MapComplex128OptionToBoolOptionList(m BoolOptionList, f func(BoolOption) Complex128Option) Complex128OptionList { acc := NilComplex128OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolOptionList: BoolOption->AnyOption */ func MapAnyOptionToBoolOptionList(m BoolOptionList, f func(BoolOption) AnyOption) AnyOptionList { acc := NilAnyOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolOptionList: BoolOption->[]bool */ func MapBoolArrToBoolOptionList(m BoolOptionList, f func(BoolOption) []bool) BoolArrList { acc := NilBoolArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolOptionList: BoolOption->[]string */ func MapStringArrToBoolOptionList(m BoolOptionList, f func(BoolOption) []string) StringArrList { acc := NilStringArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolOptionList: BoolOption->[]int */ func MapIntArrToBoolOptionList(m BoolOptionList, f func(BoolOption) []int) IntArrList { acc := NilIntArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolOptionList: BoolOption->[]int8 */ func MapInt8ArrToBoolOptionList(m BoolOptionList, f func(BoolOption) []int8) Int8ArrList { acc := NilInt8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolOptionList: BoolOption->[]int16 */ func MapInt16ArrToBoolOptionList(m BoolOptionList, f func(BoolOption) []int16) Int16ArrList { acc := NilInt16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolOptionList: BoolOption->[]int32 */ func MapInt32ArrToBoolOptionList(m BoolOptionList, f func(BoolOption) []int32) Int32ArrList { acc := NilInt32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolOptionList: BoolOption->[]int64 */ func MapInt64ArrToBoolOptionList(m BoolOptionList, f func(BoolOption) []int64) Int64ArrList { acc := NilInt64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolOptionList: BoolOption->[]uint */ func MapUintArrToBoolOptionList(m BoolOptionList, f func(BoolOption) []uint) UintArrList { acc := NilUintArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolOptionList: BoolOption->[]uint8 */ func MapUint8ArrToBoolOptionList(m BoolOptionList, f func(BoolOption) []uint8) Uint8ArrList { acc := NilUint8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolOptionList: BoolOption->[]uint16 */ func MapUint16ArrToBoolOptionList(m BoolOptionList, f func(BoolOption) []uint16) Uint16ArrList { acc := NilUint16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolOptionList: BoolOption->[]uint32 */ func MapUint32ArrToBoolOptionList(m BoolOptionList, f func(BoolOption) []uint32) Uint32ArrList { acc := NilUint32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolOptionList: BoolOption->[]uint64 */ func MapUint64ArrToBoolOptionList(m BoolOptionList, f func(BoolOption) []uint64) Uint64ArrList { acc := NilUint64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolOptionList: BoolOption->[]uintptr */ func MapUintptrArrToBoolOptionList(m BoolOptionList, f func(BoolOption) []uintptr) UintptrArrList { acc := NilUintptrArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolOptionList: BoolOption->[]byte */ func MapByteArrToBoolOptionList(m BoolOptionList, f func(BoolOption) []byte) ByteArrList { acc := NilByteArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolOptionList: BoolOption->[]rune */ func MapRuneArrToBoolOptionList(m BoolOptionList, f func(BoolOption) []rune) RuneArrList { acc := NilRuneArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolOptionList: BoolOption->[]float32 */ func MapFloat32ArrToBoolOptionList(m BoolOptionList, f func(BoolOption) []float32) Float32ArrList { acc := NilFloat32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolOptionList: BoolOption->[]float64 */ func MapFloat64ArrToBoolOptionList(m BoolOptionList, f func(BoolOption) []float64) Float64ArrList { acc := NilFloat64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolOptionList: BoolOption->[]complex64 */ func MapComplex64ArrToBoolOptionList(m BoolOptionList, f func(BoolOption) []complex64) Complex64ArrList { acc := NilComplex64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolOptionList: BoolOption->[]complex128 */ func MapComplex128ArrToBoolOptionList(m BoolOptionList, f func(BoolOption) []complex128) Complex128ArrList { acc := NilComplex128ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolOptionList: BoolOption->[]Any */ func MapAnyArrToBoolOptionList(m BoolOptionList, f func(BoolOption) []Any) AnyArrList { acc := NilAnyArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolOptionList: BoolOption->BoolList */ func MapBoolListToBoolOptionList(m BoolOptionList, f func(BoolOption) BoolList) BoolListList { acc := NilBoolListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolOptionList: BoolOption->StringList */ func MapStringListToBoolOptionList(m BoolOptionList, f func(BoolOption) StringList) StringListList { acc := NilStringListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolOptionList: BoolOption->IntList */ func MapIntListToBoolOptionList(m BoolOptionList, f func(BoolOption) IntList) IntListList { acc := NilIntListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolOptionList: BoolOption->Int8List */ func MapInt8ListToBoolOptionList(m BoolOptionList, f func(BoolOption) Int8List) Int8ListList { acc := NilInt8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolOptionList: BoolOption->Int16List */ func MapInt16ListToBoolOptionList(m BoolOptionList, f func(BoolOption) Int16List) Int16ListList { acc := NilInt16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolOptionList: BoolOption->Int32List */ func MapInt32ListToBoolOptionList(m BoolOptionList, f func(BoolOption) Int32List) Int32ListList { acc := NilInt32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolOptionList: BoolOption->Int64List */ func MapInt64ListToBoolOptionList(m BoolOptionList, f func(BoolOption) Int64List) Int64ListList { acc := NilInt64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolOptionList: BoolOption->UintList */ func MapUintListToBoolOptionList(m BoolOptionList, f func(BoolOption) UintList) UintListList { acc := NilUintListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolOptionList: BoolOption->Uint8List */ func MapUint8ListToBoolOptionList(m BoolOptionList, f func(BoolOption) Uint8List) Uint8ListList { acc := NilUint8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolOptionList: BoolOption->Uint16List */ func MapUint16ListToBoolOptionList(m BoolOptionList, f func(BoolOption) Uint16List) Uint16ListList { acc := NilUint16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolOptionList: BoolOption->Uint32List */ func MapUint32ListToBoolOptionList(m BoolOptionList, f func(BoolOption) Uint32List) Uint32ListList { acc := NilUint32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolOptionList: BoolOption->Uint64List */ func MapUint64ListToBoolOptionList(m BoolOptionList, f func(BoolOption) Uint64List) Uint64ListList { acc := NilUint64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolOptionList: BoolOption->UintptrList */ func MapUintptrListToBoolOptionList(m BoolOptionList, f func(BoolOption) UintptrList) UintptrListList { acc := NilUintptrListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolOptionList: BoolOption->ByteList */ func MapByteListToBoolOptionList(m BoolOptionList, f func(BoolOption) ByteList) ByteListList { acc := NilByteListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolOptionList: BoolOption->RuneList */ func MapRuneListToBoolOptionList(m BoolOptionList, f func(BoolOption) RuneList) RuneListList { acc := NilRuneListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolOptionList: BoolOption->Float32List */ func MapFloat32ListToBoolOptionList(m BoolOptionList, f func(BoolOption) Float32List) Float32ListList { acc := NilFloat32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolOptionList: BoolOption->Float64List */ func MapFloat64ListToBoolOptionList(m BoolOptionList, f func(BoolOption) Float64List) Float64ListList { acc := NilFloat64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolOptionList: BoolOption->Complex64List */ func MapComplex64ListToBoolOptionList(m BoolOptionList, f func(BoolOption) Complex64List) Complex64ListList { acc := NilComplex64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolOptionList: BoolOption->Complex128List */ func MapComplex128ListToBoolOptionList(m BoolOptionList, f func(BoolOption) Complex128List) Complex128ListList { acc := NilComplex128ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolOptionList: BoolOption->AnyList */ func MapAnyListToBoolOptionList(m BoolOptionList, f func(BoolOption) AnyList) AnyListList { acc := NilAnyListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringOptionList: StringOption->bool */ func MapBoolToStringOptionList(m StringOptionList, f func(StringOption) bool) BoolList { acc := NilBoolList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringOptionList: StringOption->string */ func MapStringToStringOptionList(m StringOptionList, f func(StringOption) string) StringList { acc := NilStringList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringOptionList: StringOption->int */ func MapIntToStringOptionList(m StringOptionList, f func(StringOption) int) IntList { acc := NilIntList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringOptionList: StringOption->int8 */ func MapInt8ToStringOptionList(m StringOptionList, f func(StringOption) int8) Int8List { acc := NilInt8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringOptionList: StringOption->int16 */ func MapInt16ToStringOptionList(m StringOptionList, f func(StringOption) int16) Int16List { acc := NilInt16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringOptionList: StringOption->int32 */ func MapInt32ToStringOptionList(m StringOptionList, f func(StringOption) int32) Int32List { acc := NilInt32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringOptionList: StringOption->int64 */ func MapInt64ToStringOptionList(m StringOptionList, f func(StringOption) int64) Int64List { acc := NilInt64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringOptionList: StringOption->uint */ func MapUintToStringOptionList(m StringOptionList, f func(StringOption) uint) UintList { acc := NilUintList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringOptionList: StringOption->uint8 */ func MapUint8ToStringOptionList(m StringOptionList, f func(StringOption) uint8) Uint8List { acc := NilUint8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringOptionList: StringOption->uint16 */ func MapUint16ToStringOptionList(m StringOptionList, f func(StringOption) uint16) Uint16List { acc := NilUint16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringOptionList: StringOption->uint32 */ func MapUint32ToStringOptionList(m StringOptionList, f func(StringOption) uint32) Uint32List { acc := NilUint32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringOptionList: StringOption->uint64 */ func MapUint64ToStringOptionList(m StringOptionList, f func(StringOption) uint64) Uint64List { acc := NilUint64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringOptionList: StringOption->uintptr */ func MapUintptrToStringOptionList(m StringOptionList, f func(StringOption) uintptr) UintptrList { acc := NilUintptrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringOptionList: StringOption->byte */ func MapByteToStringOptionList(m StringOptionList, f func(StringOption) byte) ByteList { acc := NilByteList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringOptionList: StringOption->rune */ func MapRuneToStringOptionList(m StringOptionList, f func(StringOption) rune) RuneList { acc := NilRuneList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringOptionList: StringOption->float32 */ func MapFloat32ToStringOptionList(m StringOptionList, f func(StringOption) float32) Float32List { acc := NilFloat32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringOptionList: StringOption->float64 */ func MapFloat64ToStringOptionList(m StringOptionList, f func(StringOption) float64) Float64List { acc := NilFloat64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringOptionList: StringOption->complex64 */ func MapComplex64ToStringOptionList(m StringOptionList, f func(StringOption) complex64) Complex64List { acc := NilComplex64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringOptionList: StringOption->complex128 */ func MapComplex128ToStringOptionList(m StringOptionList, f func(StringOption) complex128) Complex128List { acc := NilComplex128List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringOptionList: StringOption->Any */ func MapAnyToStringOptionList(m StringOptionList, f func(StringOption) Any) AnyList { acc := NilAnyList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringOptionList: StringOption->BoolOption */ func MapBoolOptionToStringOptionList(m StringOptionList, f func(StringOption) BoolOption) BoolOptionList { acc := NilBoolOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringOptionList: StringOption->StringOption */ func MapStringOptionToStringOptionList(m StringOptionList, f func(StringOption) StringOption) StringOptionList { acc := NilStringOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringOptionList: StringOption->IntOption */ func MapIntOptionToStringOptionList(m StringOptionList, f func(StringOption) IntOption) IntOptionList { acc := NilIntOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringOptionList: StringOption->Int8Option */ func MapInt8OptionToStringOptionList(m StringOptionList, f func(StringOption) Int8Option) Int8OptionList { acc := NilInt8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringOptionList: StringOption->Int16Option */ func MapInt16OptionToStringOptionList(m StringOptionList, f func(StringOption) Int16Option) Int16OptionList { acc := NilInt16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringOptionList: StringOption->Int32Option */ func MapInt32OptionToStringOptionList(m StringOptionList, f func(StringOption) Int32Option) Int32OptionList { acc := NilInt32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringOptionList: StringOption->Int64Option */ func MapInt64OptionToStringOptionList(m StringOptionList, f func(StringOption) Int64Option) Int64OptionList { acc := NilInt64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringOptionList: StringOption->UintOption */ func MapUintOptionToStringOptionList(m StringOptionList, f func(StringOption) UintOption) UintOptionList { acc := NilUintOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringOptionList: StringOption->Uint8Option */ func MapUint8OptionToStringOptionList(m StringOptionList, f func(StringOption) Uint8Option) Uint8OptionList { acc := NilUint8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringOptionList: StringOption->Uint16Option */ func MapUint16OptionToStringOptionList(m StringOptionList, f func(StringOption) Uint16Option) Uint16OptionList { acc := NilUint16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringOptionList: StringOption->Uint32Option */ func MapUint32OptionToStringOptionList(m StringOptionList, f func(StringOption) Uint32Option) Uint32OptionList { acc := NilUint32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringOptionList: StringOption->Uint64Option */ func MapUint64OptionToStringOptionList(m StringOptionList, f func(StringOption) Uint64Option) Uint64OptionList { acc := NilUint64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringOptionList: StringOption->UintptrOption */ func MapUintptrOptionToStringOptionList(m StringOptionList, f func(StringOption) UintptrOption) UintptrOptionList { acc := NilUintptrOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringOptionList: StringOption->ByteOption */ func MapByteOptionToStringOptionList(m StringOptionList, f func(StringOption) ByteOption) ByteOptionList { acc := NilByteOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringOptionList: StringOption->RuneOption */ func MapRuneOptionToStringOptionList(m StringOptionList, f func(StringOption) RuneOption) RuneOptionList { acc := NilRuneOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringOptionList: StringOption->Float32Option */ func MapFloat32OptionToStringOptionList(m StringOptionList, f func(StringOption) Float32Option) Float32OptionList { acc := NilFloat32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringOptionList: StringOption->Float64Option */ func MapFloat64OptionToStringOptionList(m StringOptionList, f func(StringOption) Float64Option) Float64OptionList { acc := NilFloat64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringOptionList: StringOption->Complex64Option */ func MapComplex64OptionToStringOptionList(m StringOptionList, f func(StringOption) Complex64Option) Complex64OptionList { acc := NilComplex64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringOptionList: StringOption->Complex128Option */ func MapComplex128OptionToStringOptionList(m StringOptionList, f func(StringOption) Complex128Option) Complex128OptionList { acc := NilComplex128OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringOptionList: StringOption->AnyOption */ func MapAnyOptionToStringOptionList(m StringOptionList, f func(StringOption) AnyOption) AnyOptionList { acc := NilAnyOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringOptionList: StringOption->[]bool */ func MapBoolArrToStringOptionList(m StringOptionList, f func(StringOption) []bool) BoolArrList { acc := NilBoolArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringOptionList: StringOption->[]string */ func MapStringArrToStringOptionList(m StringOptionList, f func(StringOption) []string) StringArrList { acc := NilStringArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringOptionList: StringOption->[]int */ func MapIntArrToStringOptionList(m StringOptionList, f func(StringOption) []int) IntArrList { acc := NilIntArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringOptionList: StringOption->[]int8 */ func MapInt8ArrToStringOptionList(m StringOptionList, f func(StringOption) []int8) Int8ArrList { acc := NilInt8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringOptionList: StringOption->[]int16 */ func MapInt16ArrToStringOptionList(m StringOptionList, f func(StringOption) []int16) Int16ArrList { acc := NilInt16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringOptionList: StringOption->[]int32 */ func MapInt32ArrToStringOptionList(m StringOptionList, f func(StringOption) []int32) Int32ArrList { acc := NilInt32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringOptionList: StringOption->[]int64 */ func MapInt64ArrToStringOptionList(m StringOptionList, f func(StringOption) []int64) Int64ArrList { acc := NilInt64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringOptionList: StringOption->[]uint */ func MapUintArrToStringOptionList(m StringOptionList, f func(StringOption) []uint) UintArrList { acc := NilUintArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringOptionList: StringOption->[]uint8 */ func MapUint8ArrToStringOptionList(m StringOptionList, f func(StringOption) []uint8) Uint8ArrList { acc := NilUint8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringOptionList: StringOption->[]uint16 */ func MapUint16ArrToStringOptionList(m StringOptionList, f func(StringOption) []uint16) Uint16ArrList { acc := NilUint16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringOptionList: StringOption->[]uint32 */ func MapUint32ArrToStringOptionList(m StringOptionList, f func(StringOption) []uint32) Uint32ArrList { acc := NilUint32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringOptionList: StringOption->[]uint64 */ func MapUint64ArrToStringOptionList(m StringOptionList, f func(StringOption) []uint64) Uint64ArrList { acc := NilUint64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringOptionList: StringOption->[]uintptr */ func MapUintptrArrToStringOptionList(m StringOptionList, f func(StringOption) []uintptr) UintptrArrList { acc := NilUintptrArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringOptionList: StringOption->[]byte */ func MapByteArrToStringOptionList(m StringOptionList, f func(StringOption) []byte) ByteArrList { acc := NilByteArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringOptionList: StringOption->[]rune */ func MapRuneArrToStringOptionList(m StringOptionList, f func(StringOption) []rune) RuneArrList { acc := NilRuneArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringOptionList: StringOption->[]float32 */ func MapFloat32ArrToStringOptionList(m StringOptionList, f func(StringOption) []float32) Float32ArrList { acc := NilFloat32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringOptionList: StringOption->[]float64 */ func MapFloat64ArrToStringOptionList(m StringOptionList, f func(StringOption) []float64) Float64ArrList { acc := NilFloat64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringOptionList: StringOption->[]complex64 */ func MapComplex64ArrToStringOptionList(m StringOptionList, f func(StringOption) []complex64) Complex64ArrList { acc := NilComplex64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringOptionList: StringOption->[]complex128 */ func MapComplex128ArrToStringOptionList(m StringOptionList, f func(StringOption) []complex128) Complex128ArrList { acc := NilComplex128ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringOptionList: StringOption->[]Any */ func MapAnyArrToStringOptionList(m StringOptionList, f func(StringOption) []Any) AnyArrList { acc := NilAnyArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringOptionList: StringOption->BoolList */ func MapBoolListToStringOptionList(m StringOptionList, f func(StringOption) BoolList) BoolListList { acc := NilBoolListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringOptionList: StringOption->StringList */ func MapStringListToStringOptionList(m StringOptionList, f func(StringOption) StringList) StringListList { acc := NilStringListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringOptionList: StringOption->IntList */ func MapIntListToStringOptionList(m StringOptionList, f func(StringOption) IntList) IntListList { acc := NilIntListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringOptionList: StringOption->Int8List */ func MapInt8ListToStringOptionList(m StringOptionList, f func(StringOption) Int8List) Int8ListList { acc := NilInt8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringOptionList: StringOption->Int16List */ func MapInt16ListToStringOptionList(m StringOptionList, f func(StringOption) Int16List) Int16ListList { acc := NilInt16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringOptionList: StringOption->Int32List */ func MapInt32ListToStringOptionList(m StringOptionList, f func(StringOption) Int32List) Int32ListList { acc := NilInt32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringOptionList: StringOption->Int64List */ func MapInt64ListToStringOptionList(m StringOptionList, f func(StringOption) Int64List) Int64ListList { acc := NilInt64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringOptionList: StringOption->UintList */ func MapUintListToStringOptionList(m StringOptionList, f func(StringOption) UintList) UintListList { acc := NilUintListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringOptionList: StringOption->Uint8List */ func MapUint8ListToStringOptionList(m StringOptionList, f func(StringOption) Uint8List) Uint8ListList { acc := NilUint8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringOptionList: StringOption->Uint16List */ func MapUint16ListToStringOptionList(m StringOptionList, f func(StringOption) Uint16List) Uint16ListList { acc := NilUint16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringOptionList: StringOption->Uint32List */ func MapUint32ListToStringOptionList(m StringOptionList, f func(StringOption) Uint32List) Uint32ListList { acc := NilUint32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringOptionList: StringOption->Uint64List */ func MapUint64ListToStringOptionList(m StringOptionList, f func(StringOption) Uint64List) Uint64ListList { acc := NilUint64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringOptionList: StringOption->UintptrList */ func MapUintptrListToStringOptionList(m StringOptionList, f func(StringOption) UintptrList) UintptrListList { acc := NilUintptrListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringOptionList: StringOption->ByteList */ func MapByteListToStringOptionList(m StringOptionList, f func(StringOption) ByteList) ByteListList { acc := NilByteListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringOptionList: StringOption->RuneList */ func MapRuneListToStringOptionList(m StringOptionList, f func(StringOption) RuneList) RuneListList { acc := NilRuneListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringOptionList: StringOption->Float32List */ func MapFloat32ListToStringOptionList(m StringOptionList, f func(StringOption) Float32List) Float32ListList { acc := NilFloat32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringOptionList: StringOption->Float64List */ func MapFloat64ListToStringOptionList(m StringOptionList, f func(StringOption) Float64List) Float64ListList { acc := NilFloat64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringOptionList: StringOption->Complex64List */ func MapComplex64ListToStringOptionList(m StringOptionList, f func(StringOption) Complex64List) Complex64ListList { acc := NilComplex64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringOptionList: StringOption->Complex128List */ func MapComplex128ListToStringOptionList(m StringOptionList, f func(StringOption) Complex128List) Complex128ListList { acc := NilComplex128ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringOptionList: StringOption->AnyList */ func MapAnyListToStringOptionList(m StringOptionList, f func(StringOption) AnyList) AnyListList { acc := NilAnyListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntOptionList: IntOption->bool */ func MapBoolToIntOptionList(m IntOptionList, f func(IntOption) bool) BoolList { acc := NilBoolList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntOptionList: IntOption->string */ func MapStringToIntOptionList(m IntOptionList, f func(IntOption) string) StringList { acc := NilStringList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntOptionList: IntOption->int */ func MapIntToIntOptionList(m IntOptionList, f func(IntOption) int) IntList { acc := NilIntList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntOptionList: IntOption->int8 */ func MapInt8ToIntOptionList(m IntOptionList, f func(IntOption) int8) Int8List { acc := NilInt8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntOptionList: IntOption->int16 */ func MapInt16ToIntOptionList(m IntOptionList, f func(IntOption) int16) Int16List { acc := NilInt16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntOptionList: IntOption->int32 */ func MapInt32ToIntOptionList(m IntOptionList, f func(IntOption) int32) Int32List { acc := NilInt32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntOptionList: IntOption->int64 */ func MapInt64ToIntOptionList(m IntOptionList, f func(IntOption) int64) Int64List { acc := NilInt64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntOptionList: IntOption->uint */ func MapUintToIntOptionList(m IntOptionList, f func(IntOption) uint) UintList { acc := NilUintList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntOptionList: IntOption->uint8 */ func MapUint8ToIntOptionList(m IntOptionList, f func(IntOption) uint8) Uint8List { acc := NilUint8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntOptionList: IntOption->uint16 */ func MapUint16ToIntOptionList(m IntOptionList, f func(IntOption) uint16) Uint16List { acc := NilUint16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntOptionList: IntOption->uint32 */ func MapUint32ToIntOptionList(m IntOptionList, f func(IntOption) uint32) Uint32List { acc := NilUint32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntOptionList: IntOption->uint64 */ func MapUint64ToIntOptionList(m IntOptionList, f func(IntOption) uint64) Uint64List { acc := NilUint64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntOptionList: IntOption->uintptr */ func MapUintptrToIntOptionList(m IntOptionList, f func(IntOption) uintptr) UintptrList { acc := NilUintptrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntOptionList: IntOption->byte */ func MapByteToIntOptionList(m IntOptionList, f func(IntOption) byte) ByteList { acc := NilByteList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntOptionList: IntOption->rune */ func MapRuneToIntOptionList(m IntOptionList, f func(IntOption) rune) RuneList { acc := NilRuneList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntOptionList: IntOption->float32 */ func MapFloat32ToIntOptionList(m IntOptionList, f func(IntOption) float32) Float32List { acc := NilFloat32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntOptionList: IntOption->float64 */ func MapFloat64ToIntOptionList(m IntOptionList, f func(IntOption) float64) Float64List { acc := NilFloat64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntOptionList: IntOption->complex64 */ func MapComplex64ToIntOptionList(m IntOptionList, f func(IntOption) complex64) Complex64List { acc := NilComplex64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntOptionList: IntOption->complex128 */ func MapComplex128ToIntOptionList(m IntOptionList, f func(IntOption) complex128) Complex128List { acc := NilComplex128List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntOptionList: IntOption->Any */ func MapAnyToIntOptionList(m IntOptionList, f func(IntOption) Any) AnyList { acc := NilAnyList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntOptionList: IntOption->BoolOption */ func MapBoolOptionToIntOptionList(m IntOptionList, f func(IntOption) BoolOption) BoolOptionList { acc := NilBoolOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntOptionList: IntOption->StringOption */ func MapStringOptionToIntOptionList(m IntOptionList, f func(IntOption) StringOption) StringOptionList { acc := NilStringOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntOptionList: IntOption->IntOption */ func MapIntOptionToIntOptionList(m IntOptionList, f func(IntOption) IntOption) IntOptionList { acc := NilIntOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntOptionList: IntOption->Int8Option */ func MapInt8OptionToIntOptionList(m IntOptionList, f func(IntOption) Int8Option) Int8OptionList { acc := NilInt8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntOptionList: IntOption->Int16Option */ func MapInt16OptionToIntOptionList(m IntOptionList, f func(IntOption) Int16Option) Int16OptionList { acc := NilInt16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntOptionList: IntOption->Int32Option */ func MapInt32OptionToIntOptionList(m IntOptionList, f func(IntOption) Int32Option) Int32OptionList { acc := NilInt32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntOptionList: IntOption->Int64Option */ func MapInt64OptionToIntOptionList(m IntOptionList, f func(IntOption) Int64Option) Int64OptionList { acc := NilInt64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntOptionList: IntOption->UintOption */ func MapUintOptionToIntOptionList(m IntOptionList, f func(IntOption) UintOption) UintOptionList { acc := NilUintOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntOptionList: IntOption->Uint8Option */ func MapUint8OptionToIntOptionList(m IntOptionList, f func(IntOption) Uint8Option) Uint8OptionList { acc := NilUint8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntOptionList: IntOption->Uint16Option */ func MapUint16OptionToIntOptionList(m IntOptionList, f func(IntOption) Uint16Option) Uint16OptionList { acc := NilUint16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntOptionList: IntOption->Uint32Option */ func MapUint32OptionToIntOptionList(m IntOptionList, f func(IntOption) Uint32Option) Uint32OptionList { acc := NilUint32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntOptionList: IntOption->Uint64Option */ func MapUint64OptionToIntOptionList(m IntOptionList, f func(IntOption) Uint64Option) Uint64OptionList { acc := NilUint64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntOptionList: IntOption->UintptrOption */ func MapUintptrOptionToIntOptionList(m IntOptionList, f func(IntOption) UintptrOption) UintptrOptionList { acc := NilUintptrOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntOptionList: IntOption->ByteOption */ func MapByteOptionToIntOptionList(m IntOptionList, f func(IntOption) ByteOption) ByteOptionList { acc := NilByteOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntOptionList: IntOption->RuneOption */ func MapRuneOptionToIntOptionList(m IntOptionList, f func(IntOption) RuneOption) RuneOptionList { acc := NilRuneOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntOptionList: IntOption->Float32Option */ func MapFloat32OptionToIntOptionList(m IntOptionList, f func(IntOption) Float32Option) Float32OptionList { acc := NilFloat32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntOptionList: IntOption->Float64Option */ func MapFloat64OptionToIntOptionList(m IntOptionList, f func(IntOption) Float64Option) Float64OptionList { acc := NilFloat64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntOptionList: IntOption->Complex64Option */ func MapComplex64OptionToIntOptionList(m IntOptionList, f func(IntOption) Complex64Option) Complex64OptionList { acc := NilComplex64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntOptionList: IntOption->Complex128Option */ func MapComplex128OptionToIntOptionList(m IntOptionList, f func(IntOption) Complex128Option) Complex128OptionList { acc := NilComplex128OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntOptionList: IntOption->AnyOption */ func MapAnyOptionToIntOptionList(m IntOptionList, f func(IntOption) AnyOption) AnyOptionList { acc := NilAnyOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntOptionList: IntOption->[]bool */ func MapBoolArrToIntOptionList(m IntOptionList, f func(IntOption) []bool) BoolArrList { acc := NilBoolArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntOptionList: IntOption->[]string */ func MapStringArrToIntOptionList(m IntOptionList, f func(IntOption) []string) StringArrList { acc := NilStringArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntOptionList: IntOption->[]int */ func MapIntArrToIntOptionList(m IntOptionList, f func(IntOption) []int) IntArrList { acc := NilIntArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntOptionList: IntOption->[]int8 */ func MapInt8ArrToIntOptionList(m IntOptionList, f func(IntOption) []int8) Int8ArrList { acc := NilInt8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntOptionList: IntOption->[]int16 */ func MapInt16ArrToIntOptionList(m IntOptionList, f func(IntOption) []int16) Int16ArrList { acc := NilInt16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntOptionList: IntOption->[]int32 */ func MapInt32ArrToIntOptionList(m IntOptionList, f func(IntOption) []int32) Int32ArrList { acc := NilInt32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntOptionList: IntOption->[]int64 */ func MapInt64ArrToIntOptionList(m IntOptionList, f func(IntOption) []int64) Int64ArrList { acc := NilInt64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntOptionList: IntOption->[]uint */ func MapUintArrToIntOptionList(m IntOptionList, f func(IntOption) []uint) UintArrList { acc := NilUintArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntOptionList: IntOption->[]uint8 */ func MapUint8ArrToIntOptionList(m IntOptionList, f func(IntOption) []uint8) Uint8ArrList { acc := NilUint8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntOptionList: IntOption->[]uint16 */ func MapUint16ArrToIntOptionList(m IntOptionList, f func(IntOption) []uint16) Uint16ArrList { acc := NilUint16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntOptionList: IntOption->[]uint32 */ func MapUint32ArrToIntOptionList(m IntOptionList, f func(IntOption) []uint32) Uint32ArrList { acc := NilUint32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntOptionList: IntOption->[]uint64 */ func MapUint64ArrToIntOptionList(m IntOptionList, f func(IntOption) []uint64) Uint64ArrList { acc := NilUint64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntOptionList: IntOption->[]uintptr */ func MapUintptrArrToIntOptionList(m IntOptionList, f func(IntOption) []uintptr) UintptrArrList { acc := NilUintptrArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntOptionList: IntOption->[]byte */ func MapByteArrToIntOptionList(m IntOptionList, f func(IntOption) []byte) ByteArrList { acc := NilByteArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntOptionList: IntOption->[]rune */ func MapRuneArrToIntOptionList(m IntOptionList, f func(IntOption) []rune) RuneArrList { acc := NilRuneArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntOptionList: IntOption->[]float32 */ func MapFloat32ArrToIntOptionList(m IntOptionList, f func(IntOption) []float32) Float32ArrList { acc := NilFloat32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntOptionList: IntOption->[]float64 */ func MapFloat64ArrToIntOptionList(m IntOptionList, f func(IntOption) []float64) Float64ArrList { acc := NilFloat64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntOptionList: IntOption->[]complex64 */ func MapComplex64ArrToIntOptionList(m IntOptionList, f func(IntOption) []complex64) Complex64ArrList { acc := NilComplex64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntOptionList: IntOption->[]complex128 */ func MapComplex128ArrToIntOptionList(m IntOptionList, f func(IntOption) []complex128) Complex128ArrList { acc := NilComplex128ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntOptionList: IntOption->[]Any */ func MapAnyArrToIntOptionList(m IntOptionList, f func(IntOption) []Any) AnyArrList { acc := NilAnyArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntOptionList: IntOption->BoolList */ func MapBoolListToIntOptionList(m IntOptionList, f func(IntOption) BoolList) BoolListList { acc := NilBoolListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntOptionList: IntOption->StringList */ func MapStringListToIntOptionList(m IntOptionList, f func(IntOption) StringList) StringListList { acc := NilStringListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntOptionList: IntOption->IntList */ func MapIntListToIntOptionList(m IntOptionList, f func(IntOption) IntList) IntListList { acc := NilIntListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntOptionList: IntOption->Int8List */ func MapInt8ListToIntOptionList(m IntOptionList, f func(IntOption) Int8List) Int8ListList { acc := NilInt8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntOptionList: IntOption->Int16List */ func MapInt16ListToIntOptionList(m IntOptionList, f func(IntOption) Int16List) Int16ListList { acc := NilInt16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntOptionList: IntOption->Int32List */ func MapInt32ListToIntOptionList(m IntOptionList, f func(IntOption) Int32List) Int32ListList { acc := NilInt32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntOptionList: IntOption->Int64List */ func MapInt64ListToIntOptionList(m IntOptionList, f func(IntOption) Int64List) Int64ListList { acc := NilInt64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntOptionList: IntOption->UintList */ func MapUintListToIntOptionList(m IntOptionList, f func(IntOption) UintList) UintListList { acc := NilUintListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntOptionList: IntOption->Uint8List */ func MapUint8ListToIntOptionList(m IntOptionList, f func(IntOption) Uint8List) Uint8ListList { acc := NilUint8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntOptionList: IntOption->Uint16List */ func MapUint16ListToIntOptionList(m IntOptionList, f func(IntOption) Uint16List) Uint16ListList { acc := NilUint16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntOptionList: IntOption->Uint32List */ func MapUint32ListToIntOptionList(m IntOptionList, f func(IntOption) Uint32List) Uint32ListList { acc := NilUint32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntOptionList: IntOption->Uint64List */ func MapUint64ListToIntOptionList(m IntOptionList, f func(IntOption) Uint64List) Uint64ListList { acc := NilUint64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntOptionList: IntOption->UintptrList */ func MapUintptrListToIntOptionList(m IntOptionList, f func(IntOption) UintptrList) UintptrListList { acc := NilUintptrListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntOptionList: IntOption->ByteList */ func MapByteListToIntOptionList(m IntOptionList, f func(IntOption) ByteList) ByteListList { acc := NilByteListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntOptionList: IntOption->RuneList */ func MapRuneListToIntOptionList(m IntOptionList, f func(IntOption) RuneList) RuneListList { acc := NilRuneListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntOptionList: IntOption->Float32List */ func MapFloat32ListToIntOptionList(m IntOptionList, f func(IntOption) Float32List) Float32ListList { acc := NilFloat32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntOptionList: IntOption->Float64List */ func MapFloat64ListToIntOptionList(m IntOptionList, f func(IntOption) Float64List) Float64ListList { acc := NilFloat64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntOptionList: IntOption->Complex64List */ func MapComplex64ListToIntOptionList(m IntOptionList, f func(IntOption) Complex64List) Complex64ListList { acc := NilComplex64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntOptionList: IntOption->Complex128List */ func MapComplex128ListToIntOptionList(m IntOptionList, f func(IntOption) Complex128List) Complex128ListList { acc := NilComplex128ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntOptionList: IntOption->AnyList */ func MapAnyListToIntOptionList(m IntOptionList, f func(IntOption) AnyList) AnyListList { acc := NilAnyListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8OptionList: Int8Option->bool */ func MapBoolToInt8OptionList(m Int8OptionList, f func(Int8Option) bool) BoolList { acc := NilBoolList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8OptionList: Int8Option->string */ func MapStringToInt8OptionList(m Int8OptionList, f func(Int8Option) string) StringList { acc := NilStringList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8OptionList: Int8Option->int */ func MapIntToInt8OptionList(m Int8OptionList, f func(Int8Option) int) IntList { acc := NilIntList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8OptionList: Int8Option->int8 */ func MapInt8ToInt8OptionList(m Int8OptionList, f func(Int8Option) int8) Int8List { acc := NilInt8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8OptionList: Int8Option->int16 */ func MapInt16ToInt8OptionList(m Int8OptionList, f func(Int8Option) int16) Int16List { acc := NilInt16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8OptionList: Int8Option->int32 */ func MapInt32ToInt8OptionList(m Int8OptionList, f func(Int8Option) int32) Int32List { acc := NilInt32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8OptionList: Int8Option->int64 */ func MapInt64ToInt8OptionList(m Int8OptionList, f func(Int8Option) int64) Int64List { acc := NilInt64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8OptionList: Int8Option->uint */ func MapUintToInt8OptionList(m Int8OptionList, f func(Int8Option) uint) UintList { acc := NilUintList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8OptionList: Int8Option->uint8 */ func MapUint8ToInt8OptionList(m Int8OptionList, f func(Int8Option) uint8) Uint8List { acc := NilUint8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8OptionList: Int8Option->uint16 */ func MapUint16ToInt8OptionList(m Int8OptionList, f func(Int8Option) uint16) Uint16List { acc := NilUint16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8OptionList: Int8Option->uint32 */ func MapUint32ToInt8OptionList(m Int8OptionList, f func(Int8Option) uint32) Uint32List { acc := NilUint32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8OptionList: Int8Option->uint64 */ func MapUint64ToInt8OptionList(m Int8OptionList, f func(Int8Option) uint64) Uint64List { acc := NilUint64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8OptionList: Int8Option->uintptr */ func MapUintptrToInt8OptionList(m Int8OptionList, f func(Int8Option) uintptr) UintptrList { acc := NilUintptrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8OptionList: Int8Option->byte */ func MapByteToInt8OptionList(m Int8OptionList, f func(Int8Option) byte) ByteList { acc := NilByteList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8OptionList: Int8Option->rune */ func MapRuneToInt8OptionList(m Int8OptionList, f func(Int8Option) rune) RuneList { acc := NilRuneList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8OptionList: Int8Option->float32 */ func MapFloat32ToInt8OptionList(m Int8OptionList, f func(Int8Option) float32) Float32List { acc := NilFloat32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8OptionList: Int8Option->float64 */ func MapFloat64ToInt8OptionList(m Int8OptionList, f func(Int8Option) float64) Float64List { acc := NilFloat64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8OptionList: Int8Option->complex64 */ func MapComplex64ToInt8OptionList(m Int8OptionList, f func(Int8Option) complex64) Complex64List { acc := NilComplex64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8OptionList: Int8Option->complex128 */ func MapComplex128ToInt8OptionList(m Int8OptionList, f func(Int8Option) complex128) Complex128List { acc := NilComplex128List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8OptionList: Int8Option->Any */ func MapAnyToInt8OptionList(m Int8OptionList, f func(Int8Option) Any) AnyList { acc := NilAnyList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8OptionList: Int8Option->BoolOption */ func MapBoolOptionToInt8OptionList(m Int8OptionList, f func(Int8Option) BoolOption) BoolOptionList { acc := NilBoolOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8OptionList: Int8Option->StringOption */ func MapStringOptionToInt8OptionList(m Int8OptionList, f func(Int8Option) StringOption) StringOptionList { acc := NilStringOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8OptionList: Int8Option->IntOption */ func MapIntOptionToInt8OptionList(m Int8OptionList, f func(Int8Option) IntOption) IntOptionList { acc := NilIntOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8OptionList: Int8Option->Int8Option */ func MapInt8OptionToInt8OptionList(m Int8OptionList, f func(Int8Option) Int8Option) Int8OptionList { acc := NilInt8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8OptionList: Int8Option->Int16Option */ func MapInt16OptionToInt8OptionList(m Int8OptionList, f func(Int8Option) Int16Option) Int16OptionList { acc := NilInt16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8OptionList: Int8Option->Int32Option */ func MapInt32OptionToInt8OptionList(m Int8OptionList, f func(Int8Option) Int32Option) Int32OptionList { acc := NilInt32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8OptionList: Int8Option->Int64Option */ func MapInt64OptionToInt8OptionList(m Int8OptionList, f func(Int8Option) Int64Option) Int64OptionList { acc := NilInt64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8OptionList: Int8Option->UintOption */ func MapUintOptionToInt8OptionList(m Int8OptionList, f func(Int8Option) UintOption) UintOptionList { acc := NilUintOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8OptionList: Int8Option->Uint8Option */ func MapUint8OptionToInt8OptionList(m Int8OptionList, f func(Int8Option) Uint8Option) Uint8OptionList { acc := NilUint8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8OptionList: Int8Option->Uint16Option */ func MapUint16OptionToInt8OptionList(m Int8OptionList, f func(Int8Option) Uint16Option) Uint16OptionList { acc := NilUint16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8OptionList: Int8Option->Uint32Option */ func MapUint32OptionToInt8OptionList(m Int8OptionList, f func(Int8Option) Uint32Option) Uint32OptionList { acc := NilUint32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8OptionList: Int8Option->Uint64Option */ func MapUint64OptionToInt8OptionList(m Int8OptionList, f func(Int8Option) Uint64Option) Uint64OptionList { acc := NilUint64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8OptionList: Int8Option->UintptrOption */ func MapUintptrOptionToInt8OptionList(m Int8OptionList, f func(Int8Option) UintptrOption) UintptrOptionList { acc := NilUintptrOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8OptionList: Int8Option->ByteOption */ func MapByteOptionToInt8OptionList(m Int8OptionList, f func(Int8Option) ByteOption) ByteOptionList { acc := NilByteOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8OptionList: Int8Option->RuneOption */ func MapRuneOptionToInt8OptionList(m Int8OptionList, f func(Int8Option) RuneOption) RuneOptionList { acc := NilRuneOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8OptionList: Int8Option->Float32Option */ func MapFloat32OptionToInt8OptionList(m Int8OptionList, f func(Int8Option) Float32Option) Float32OptionList { acc := NilFloat32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8OptionList: Int8Option->Float64Option */ func MapFloat64OptionToInt8OptionList(m Int8OptionList, f func(Int8Option) Float64Option) Float64OptionList { acc := NilFloat64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8OptionList: Int8Option->Complex64Option */ func MapComplex64OptionToInt8OptionList(m Int8OptionList, f func(Int8Option) Complex64Option) Complex64OptionList { acc := NilComplex64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8OptionList: Int8Option->Complex128Option */ func MapComplex128OptionToInt8OptionList(m Int8OptionList, f func(Int8Option) Complex128Option) Complex128OptionList { acc := NilComplex128OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8OptionList: Int8Option->AnyOption */ func MapAnyOptionToInt8OptionList(m Int8OptionList, f func(Int8Option) AnyOption) AnyOptionList { acc := NilAnyOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8OptionList: Int8Option->[]bool */ func MapBoolArrToInt8OptionList(m Int8OptionList, f func(Int8Option) []bool) BoolArrList { acc := NilBoolArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8OptionList: Int8Option->[]string */ func MapStringArrToInt8OptionList(m Int8OptionList, f func(Int8Option) []string) StringArrList { acc := NilStringArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8OptionList: Int8Option->[]int */ func MapIntArrToInt8OptionList(m Int8OptionList, f func(Int8Option) []int) IntArrList { acc := NilIntArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8OptionList: Int8Option->[]int8 */ func MapInt8ArrToInt8OptionList(m Int8OptionList, f func(Int8Option) []int8) Int8ArrList { acc := NilInt8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8OptionList: Int8Option->[]int16 */ func MapInt16ArrToInt8OptionList(m Int8OptionList, f func(Int8Option) []int16) Int16ArrList { acc := NilInt16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8OptionList: Int8Option->[]int32 */ func MapInt32ArrToInt8OptionList(m Int8OptionList, f func(Int8Option) []int32) Int32ArrList { acc := NilInt32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8OptionList: Int8Option->[]int64 */ func MapInt64ArrToInt8OptionList(m Int8OptionList, f func(Int8Option) []int64) Int64ArrList { acc := NilInt64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8OptionList: Int8Option->[]uint */ func MapUintArrToInt8OptionList(m Int8OptionList, f func(Int8Option) []uint) UintArrList { acc := NilUintArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8OptionList: Int8Option->[]uint8 */ func MapUint8ArrToInt8OptionList(m Int8OptionList, f func(Int8Option) []uint8) Uint8ArrList { acc := NilUint8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8OptionList: Int8Option->[]uint16 */ func MapUint16ArrToInt8OptionList(m Int8OptionList, f func(Int8Option) []uint16) Uint16ArrList { acc := NilUint16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8OptionList: Int8Option->[]uint32 */ func MapUint32ArrToInt8OptionList(m Int8OptionList, f func(Int8Option) []uint32) Uint32ArrList { acc := NilUint32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8OptionList: Int8Option->[]uint64 */ func MapUint64ArrToInt8OptionList(m Int8OptionList, f func(Int8Option) []uint64) Uint64ArrList { acc := NilUint64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8OptionList: Int8Option->[]uintptr */ func MapUintptrArrToInt8OptionList(m Int8OptionList, f func(Int8Option) []uintptr) UintptrArrList { acc := NilUintptrArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8OptionList: Int8Option->[]byte */ func MapByteArrToInt8OptionList(m Int8OptionList, f func(Int8Option) []byte) ByteArrList { acc := NilByteArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8OptionList: Int8Option->[]rune */ func MapRuneArrToInt8OptionList(m Int8OptionList, f func(Int8Option) []rune) RuneArrList { acc := NilRuneArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8OptionList: Int8Option->[]float32 */ func MapFloat32ArrToInt8OptionList(m Int8OptionList, f func(Int8Option) []float32) Float32ArrList { acc := NilFloat32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8OptionList: Int8Option->[]float64 */ func MapFloat64ArrToInt8OptionList(m Int8OptionList, f func(Int8Option) []float64) Float64ArrList { acc := NilFloat64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8OptionList: Int8Option->[]complex64 */ func MapComplex64ArrToInt8OptionList(m Int8OptionList, f func(Int8Option) []complex64) Complex64ArrList { acc := NilComplex64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8OptionList: Int8Option->[]complex128 */ func MapComplex128ArrToInt8OptionList(m Int8OptionList, f func(Int8Option) []complex128) Complex128ArrList { acc := NilComplex128ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8OptionList: Int8Option->[]Any */ func MapAnyArrToInt8OptionList(m Int8OptionList, f func(Int8Option) []Any) AnyArrList { acc := NilAnyArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8OptionList: Int8Option->BoolList */ func MapBoolListToInt8OptionList(m Int8OptionList, f func(Int8Option) BoolList) BoolListList { acc := NilBoolListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8OptionList: Int8Option->StringList */ func MapStringListToInt8OptionList(m Int8OptionList, f func(Int8Option) StringList) StringListList { acc := NilStringListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8OptionList: Int8Option->IntList */ func MapIntListToInt8OptionList(m Int8OptionList, f func(Int8Option) IntList) IntListList { acc := NilIntListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8OptionList: Int8Option->Int8List */ func MapInt8ListToInt8OptionList(m Int8OptionList, f func(Int8Option) Int8List) Int8ListList { acc := NilInt8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8OptionList: Int8Option->Int16List */ func MapInt16ListToInt8OptionList(m Int8OptionList, f func(Int8Option) Int16List) Int16ListList { acc := NilInt16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8OptionList: Int8Option->Int32List */ func MapInt32ListToInt8OptionList(m Int8OptionList, f func(Int8Option) Int32List) Int32ListList { acc := NilInt32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8OptionList: Int8Option->Int64List */ func MapInt64ListToInt8OptionList(m Int8OptionList, f func(Int8Option) Int64List) Int64ListList { acc := NilInt64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8OptionList: Int8Option->UintList */ func MapUintListToInt8OptionList(m Int8OptionList, f func(Int8Option) UintList) UintListList { acc := NilUintListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8OptionList: Int8Option->Uint8List */ func MapUint8ListToInt8OptionList(m Int8OptionList, f func(Int8Option) Uint8List) Uint8ListList { acc := NilUint8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8OptionList: Int8Option->Uint16List */ func MapUint16ListToInt8OptionList(m Int8OptionList, f func(Int8Option) Uint16List) Uint16ListList { acc := NilUint16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8OptionList: Int8Option->Uint32List */ func MapUint32ListToInt8OptionList(m Int8OptionList, f func(Int8Option) Uint32List) Uint32ListList { acc := NilUint32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8OptionList: Int8Option->Uint64List */ func MapUint64ListToInt8OptionList(m Int8OptionList, f func(Int8Option) Uint64List) Uint64ListList { acc := NilUint64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8OptionList: Int8Option->UintptrList */ func MapUintptrListToInt8OptionList(m Int8OptionList, f func(Int8Option) UintptrList) UintptrListList { acc := NilUintptrListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8OptionList: Int8Option->ByteList */ func MapByteListToInt8OptionList(m Int8OptionList, f func(Int8Option) ByteList) ByteListList { acc := NilByteListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8OptionList: Int8Option->RuneList */ func MapRuneListToInt8OptionList(m Int8OptionList, f func(Int8Option) RuneList) RuneListList { acc := NilRuneListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8OptionList: Int8Option->Float32List */ func MapFloat32ListToInt8OptionList(m Int8OptionList, f func(Int8Option) Float32List) Float32ListList { acc := NilFloat32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8OptionList: Int8Option->Float64List */ func MapFloat64ListToInt8OptionList(m Int8OptionList, f func(Int8Option) Float64List) Float64ListList { acc := NilFloat64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8OptionList: Int8Option->Complex64List */ func MapComplex64ListToInt8OptionList(m Int8OptionList, f func(Int8Option) Complex64List) Complex64ListList { acc := NilComplex64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8OptionList: Int8Option->Complex128List */ func MapComplex128ListToInt8OptionList(m Int8OptionList, f func(Int8Option) Complex128List) Complex128ListList { acc := NilComplex128ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8OptionList: Int8Option->AnyList */ func MapAnyListToInt8OptionList(m Int8OptionList, f func(Int8Option) AnyList) AnyListList { acc := NilAnyListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16OptionList: Int16Option->bool */ func MapBoolToInt16OptionList(m Int16OptionList, f func(Int16Option) bool) BoolList { acc := NilBoolList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16OptionList: Int16Option->string */ func MapStringToInt16OptionList(m Int16OptionList, f func(Int16Option) string) StringList { acc := NilStringList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16OptionList: Int16Option->int */ func MapIntToInt16OptionList(m Int16OptionList, f func(Int16Option) int) IntList { acc := NilIntList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16OptionList: Int16Option->int8 */ func MapInt8ToInt16OptionList(m Int16OptionList, f func(Int16Option) int8) Int8List { acc := NilInt8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16OptionList: Int16Option->int16 */ func MapInt16ToInt16OptionList(m Int16OptionList, f func(Int16Option) int16) Int16List { acc := NilInt16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16OptionList: Int16Option->int32 */ func MapInt32ToInt16OptionList(m Int16OptionList, f func(Int16Option) int32) Int32List { acc := NilInt32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16OptionList: Int16Option->int64 */ func MapInt64ToInt16OptionList(m Int16OptionList, f func(Int16Option) int64) Int64List { acc := NilInt64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16OptionList: Int16Option->uint */ func MapUintToInt16OptionList(m Int16OptionList, f func(Int16Option) uint) UintList { acc := NilUintList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16OptionList: Int16Option->uint8 */ func MapUint8ToInt16OptionList(m Int16OptionList, f func(Int16Option) uint8) Uint8List { acc := NilUint8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16OptionList: Int16Option->uint16 */ func MapUint16ToInt16OptionList(m Int16OptionList, f func(Int16Option) uint16) Uint16List { acc := NilUint16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16OptionList: Int16Option->uint32 */ func MapUint32ToInt16OptionList(m Int16OptionList, f func(Int16Option) uint32) Uint32List { acc := NilUint32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16OptionList: Int16Option->uint64 */ func MapUint64ToInt16OptionList(m Int16OptionList, f func(Int16Option) uint64) Uint64List { acc := NilUint64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16OptionList: Int16Option->uintptr */ func MapUintptrToInt16OptionList(m Int16OptionList, f func(Int16Option) uintptr) UintptrList { acc := NilUintptrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16OptionList: Int16Option->byte */ func MapByteToInt16OptionList(m Int16OptionList, f func(Int16Option) byte) ByteList { acc := NilByteList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16OptionList: Int16Option->rune */ func MapRuneToInt16OptionList(m Int16OptionList, f func(Int16Option) rune) RuneList { acc := NilRuneList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16OptionList: Int16Option->float32 */ func MapFloat32ToInt16OptionList(m Int16OptionList, f func(Int16Option) float32) Float32List { acc := NilFloat32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16OptionList: Int16Option->float64 */ func MapFloat64ToInt16OptionList(m Int16OptionList, f func(Int16Option) float64) Float64List { acc := NilFloat64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16OptionList: Int16Option->complex64 */ func MapComplex64ToInt16OptionList(m Int16OptionList, f func(Int16Option) complex64) Complex64List { acc := NilComplex64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16OptionList: Int16Option->complex128 */ func MapComplex128ToInt16OptionList(m Int16OptionList, f func(Int16Option) complex128) Complex128List { acc := NilComplex128List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16OptionList: Int16Option->Any */ func MapAnyToInt16OptionList(m Int16OptionList, f func(Int16Option) Any) AnyList { acc := NilAnyList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16OptionList: Int16Option->BoolOption */ func MapBoolOptionToInt16OptionList(m Int16OptionList, f func(Int16Option) BoolOption) BoolOptionList { acc := NilBoolOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16OptionList: Int16Option->StringOption */ func MapStringOptionToInt16OptionList(m Int16OptionList, f func(Int16Option) StringOption) StringOptionList { acc := NilStringOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16OptionList: Int16Option->IntOption */ func MapIntOptionToInt16OptionList(m Int16OptionList, f func(Int16Option) IntOption) IntOptionList { acc := NilIntOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16OptionList: Int16Option->Int8Option */ func MapInt8OptionToInt16OptionList(m Int16OptionList, f func(Int16Option) Int8Option) Int8OptionList { acc := NilInt8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16OptionList: Int16Option->Int16Option */ func MapInt16OptionToInt16OptionList(m Int16OptionList, f func(Int16Option) Int16Option) Int16OptionList { acc := NilInt16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16OptionList: Int16Option->Int32Option */ func MapInt32OptionToInt16OptionList(m Int16OptionList, f func(Int16Option) Int32Option) Int32OptionList { acc := NilInt32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16OptionList: Int16Option->Int64Option */ func MapInt64OptionToInt16OptionList(m Int16OptionList, f func(Int16Option) Int64Option) Int64OptionList { acc := NilInt64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16OptionList: Int16Option->UintOption */ func MapUintOptionToInt16OptionList(m Int16OptionList, f func(Int16Option) UintOption) UintOptionList { acc := NilUintOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16OptionList: Int16Option->Uint8Option */ func MapUint8OptionToInt16OptionList(m Int16OptionList, f func(Int16Option) Uint8Option) Uint8OptionList { acc := NilUint8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16OptionList: Int16Option->Uint16Option */ func MapUint16OptionToInt16OptionList(m Int16OptionList, f func(Int16Option) Uint16Option) Uint16OptionList { acc := NilUint16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16OptionList: Int16Option->Uint32Option */ func MapUint32OptionToInt16OptionList(m Int16OptionList, f func(Int16Option) Uint32Option) Uint32OptionList { acc := NilUint32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16OptionList: Int16Option->Uint64Option */ func MapUint64OptionToInt16OptionList(m Int16OptionList, f func(Int16Option) Uint64Option) Uint64OptionList { acc := NilUint64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16OptionList: Int16Option->UintptrOption */ func MapUintptrOptionToInt16OptionList(m Int16OptionList, f func(Int16Option) UintptrOption) UintptrOptionList { acc := NilUintptrOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16OptionList: Int16Option->ByteOption */ func MapByteOptionToInt16OptionList(m Int16OptionList, f func(Int16Option) ByteOption) ByteOptionList { acc := NilByteOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16OptionList: Int16Option->RuneOption */ func MapRuneOptionToInt16OptionList(m Int16OptionList, f func(Int16Option) RuneOption) RuneOptionList { acc := NilRuneOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16OptionList: Int16Option->Float32Option */ func MapFloat32OptionToInt16OptionList(m Int16OptionList, f func(Int16Option) Float32Option) Float32OptionList { acc := NilFloat32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16OptionList: Int16Option->Float64Option */ func MapFloat64OptionToInt16OptionList(m Int16OptionList, f func(Int16Option) Float64Option) Float64OptionList { acc := NilFloat64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16OptionList: Int16Option->Complex64Option */ func MapComplex64OptionToInt16OptionList(m Int16OptionList, f func(Int16Option) Complex64Option) Complex64OptionList { acc := NilComplex64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16OptionList: Int16Option->Complex128Option */ func MapComplex128OptionToInt16OptionList(m Int16OptionList, f func(Int16Option) Complex128Option) Complex128OptionList { acc := NilComplex128OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16OptionList: Int16Option->AnyOption */ func MapAnyOptionToInt16OptionList(m Int16OptionList, f func(Int16Option) AnyOption) AnyOptionList { acc := NilAnyOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16OptionList: Int16Option->[]bool */ func MapBoolArrToInt16OptionList(m Int16OptionList, f func(Int16Option) []bool) BoolArrList { acc := NilBoolArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16OptionList: Int16Option->[]string */ func MapStringArrToInt16OptionList(m Int16OptionList, f func(Int16Option) []string) StringArrList { acc := NilStringArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16OptionList: Int16Option->[]int */ func MapIntArrToInt16OptionList(m Int16OptionList, f func(Int16Option) []int) IntArrList { acc := NilIntArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16OptionList: Int16Option->[]int8 */ func MapInt8ArrToInt16OptionList(m Int16OptionList, f func(Int16Option) []int8) Int8ArrList { acc := NilInt8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16OptionList: Int16Option->[]int16 */ func MapInt16ArrToInt16OptionList(m Int16OptionList, f func(Int16Option) []int16) Int16ArrList { acc := NilInt16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16OptionList: Int16Option->[]int32 */ func MapInt32ArrToInt16OptionList(m Int16OptionList, f func(Int16Option) []int32) Int32ArrList { acc := NilInt32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16OptionList: Int16Option->[]int64 */ func MapInt64ArrToInt16OptionList(m Int16OptionList, f func(Int16Option) []int64) Int64ArrList { acc := NilInt64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16OptionList: Int16Option->[]uint */ func MapUintArrToInt16OptionList(m Int16OptionList, f func(Int16Option) []uint) UintArrList { acc := NilUintArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16OptionList: Int16Option->[]uint8 */ func MapUint8ArrToInt16OptionList(m Int16OptionList, f func(Int16Option) []uint8) Uint8ArrList { acc := NilUint8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16OptionList: Int16Option->[]uint16 */ func MapUint16ArrToInt16OptionList(m Int16OptionList, f func(Int16Option) []uint16) Uint16ArrList { acc := NilUint16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16OptionList: Int16Option->[]uint32 */ func MapUint32ArrToInt16OptionList(m Int16OptionList, f func(Int16Option) []uint32) Uint32ArrList { acc := NilUint32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16OptionList: Int16Option->[]uint64 */ func MapUint64ArrToInt16OptionList(m Int16OptionList, f func(Int16Option) []uint64) Uint64ArrList { acc := NilUint64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16OptionList: Int16Option->[]uintptr */ func MapUintptrArrToInt16OptionList(m Int16OptionList, f func(Int16Option) []uintptr) UintptrArrList { acc := NilUintptrArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16OptionList: Int16Option->[]byte */ func MapByteArrToInt16OptionList(m Int16OptionList, f func(Int16Option) []byte) ByteArrList { acc := NilByteArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16OptionList: Int16Option->[]rune */ func MapRuneArrToInt16OptionList(m Int16OptionList, f func(Int16Option) []rune) RuneArrList { acc := NilRuneArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16OptionList: Int16Option->[]float32 */ func MapFloat32ArrToInt16OptionList(m Int16OptionList, f func(Int16Option) []float32) Float32ArrList { acc := NilFloat32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16OptionList: Int16Option->[]float64 */ func MapFloat64ArrToInt16OptionList(m Int16OptionList, f func(Int16Option) []float64) Float64ArrList { acc := NilFloat64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16OptionList: Int16Option->[]complex64 */ func MapComplex64ArrToInt16OptionList(m Int16OptionList, f func(Int16Option) []complex64) Complex64ArrList { acc := NilComplex64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16OptionList: Int16Option->[]complex128 */ func MapComplex128ArrToInt16OptionList(m Int16OptionList, f func(Int16Option) []complex128) Complex128ArrList { acc := NilComplex128ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16OptionList: Int16Option->[]Any */ func MapAnyArrToInt16OptionList(m Int16OptionList, f func(Int16Option) []Any) AnyArrList { acc := NilAnyArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16OptionList: Int16Option->BoolList */ func MapBoolListToInt16OptionList(m Int16OptionList, f func(Int16Option) BoolList) BoolListList { acc := NilBoolListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16OptionList: Int16Option->StringList */ func MapStringListToInt16OptionList(m Int16OptionList, f func(Int16Option) StringList) StringListList { acc := NilStringListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16OptionList: Int16Option->IntList */ func MapIntListToInt16OptionList(m Int16OptionList, f func(Int16Option) IntList) IntListList { acc := NilIntListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16OptionList: Int16Option->Int8List */ func MapInt8ListToInt16OptionList(m Int16OptionList, f func(Int16Option) Int8List) Int8ListList { acc := NilInt8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16OptionList: Int16Option->Int16List */ func MapInt16ListToInt16OptionList(m Int16OptionList, f func(Int16Option) Int16List) Int16ListList { acc := NilInt16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16OptionList: Int16Option->Int32List */ func MapInt32ListToInt16OptionList(m Int16OptionList, f func(Int16Option) Int32List) Int32ListList { acc := NilInt32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16OptionList: Int16Option->Int64List */ func MapInt64ListToInt16OptionList(m Int16OptionList, f func(Int16Option) Int64List) Int64ListList { acc := NilInt64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16OptionList: Int16Option->UintList */ func MapUintListToInt16OptionList(m Int16OptionList, f func(Int16Option) UintList) UintListList { acc := NilUintListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16OptionList: Int16Option->Uint8List */ func MapUint8ListToInt16OptionList(m Int16OptionList, f func(Int16Option) Uint8List) Uint8ListList { acc := NilUint8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16OptionList: Int16Option->Uint16List */ func MapUint16ListToInt16OptionList(m Int16OptionList, f func(Int16Option) Uint16List) Uint16ListList { acc := NilUint16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16OptionList: Int16Option->Uint32List */ func MapUint32ListToInt16OptionList(m Int16OptionList, f func(Int16Option) Uint32List) Uint32ListList { acc := NilUint32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16OptionList: Int16Option->Uint64List */ func MapUint64ListToInt16OptionList(m Int16OptionList, f func(Int16Option) Uint64List) Uint64ListList { acc := NilUint64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16OptionList: Int16Option->UintptrList */ func MapUintptrListToInt16OptionList(m Int16OptionList, f func(Int16Option) UintptrList) UintptrListList { acc := NilUintptrListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16OptionList: Int16Option->ByteList */ func MapByteListToInt16OptionList(m Int16OptionList, f func(Int16Option) ByteList) ByteListList { acc := NilByteListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16OptionList: Int16Option->RuneList */ func MapRuneListToInt16OptionList(m Int16OptionList, f func(Int16Option) RuneList) RuneListList { acc := NilRuneListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16OptionList: Int16Option->Float32List */ func MapFloat32ListToInt16OptionList(m Int16OptionList, f func(Int16Option) Float32List) Float32ListList { acc := NilFloat32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16OptionList: Int16Option->Float64List */ func MapFloat64ListToInt16OptionList(m Int16OptionList, f func(Int16Option) Float64List) Float64ListList { acc := NilFloat64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16OptionList: Int16Option->Complex64List */ func MapComplex64ListToInt16OptionList(m Int16OptionList, f func(Int16Option) Complex64List) Complex64ListList { acc := NilComplex64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16OptionList: Int16Option->Complex128List */ func MapComplex128ListToInt16OptionList(m Int16OptionList, f func(Int16Option) Complex128List) Complex128ListList { acc := NilComplex128ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16OptionList: Int16Option->AnyList */ func MapAnyListToInt16OptionList(m Int16OptionList, f func(Int16Option) AnyList) AnyListList { acc := NilAnyListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32OptionList: Int32Option->bool */ func MapBoolToInt32OptionList(m Int32OptionList, f func(Int32Option) bool) BoolList { acc := NilBoolList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32OptionList: Int32Option->string */ func MapStringToInt32OptionList(m Int32OptionList, f func(Int32Option) string) StringList { acc := NilStringList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32OptionList: Int32Option->int */ func MapIntToInt32OptionList(m Int32OptionList, f func(Int32Option) int) IntList { acc := NilIntList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32OptionList: Int32Option->int8 */ func MapInt8ToInt32OptionList(m Int32OptionList, f func(Int32Option) int8) Int8List { acc := NilInt8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32OptionList: Int32Option->int16 */ func MapInt16ToInt32OptionList(m Int32OptionList, f func(Int32Option) int16) Int16List { acc := NilInt16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32OptionList: Int32Option->int32 */ func MapInt32ToInt32OptionList(m Int32OptionList, f func(Int32Option) int32) Int32List { acc := NilInt32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32OptionList: Int32Option->int64 */ func MapInt64ToInt32OptionList(m Int32OptionList, f func(Int32Option) int64) Int64List { acc := NilInt64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32OptionList: Int32Option->uint */ func MapUintToInt32OptionList(m Int32OptionList, f func(Int32Option) uint) UintList { acc := NilUintList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32OptionList: Int32Option->uint8 */ func MapUint8ToInt32OptionList(m Int32OptionList, f func(Int32Option) uint8) Uint8List { acc := NilUint8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32OptionList: Int32Option->uint16 */ func MapUint16ToInt32OptionList(m Int32OptionList, f func(Int32Option) uint16) Uint16List { acc := NilUint16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32OptionList: Int32Option->uint32 */ func MapUint32ToInt32OptionList(m Int32OptionList, f func(Int32Option) uint32) Uint32List { acc := NilUint32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32OptionList: Int32Option->uint64 */ func MapUint64ToInt32OptionList(m Int32OptionList, f func(Int32Option) uint64) Uint64List { acc := NilUint64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32OptionList: Int32Option->uintptr */ func MapUintptrToInt32OptionList(m Int32OptionList, f func(Int32Option) uintptr) UintptrList { acc := NilUintptrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32OptionList: Int32Option->byte */ func MapByteToInt32OptionList(m Int32OptionList, f func(Int32Option) byte) ByteList { acc := NilByteList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32OptionList: Int32Option->rune */ func MapRuneToInt32OptionList(m Int32OptionList, f func(Int32Option) rune) RuneList { acc := NilRuneList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32OptionList: Int32Option->float32 */ func MapFloat32ToInt32OptionList(m Int32OptionList, f func(Int32Option) float32) Float32List { acc := NilFloat32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32OptionList: Int32Option->float64 */ func MapFloat64ToInt32OptionList(m Int32OptionList, f func(Int32Option) float64) Float64List { acc := NilFloat64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32OptionList: Int32Option->complex64 */ func MapComplex64ToInt32OptionList(m Int32OptionList, f func(Int32Option) complex64) Complex64List { acc := NilComplex64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32OptionList: Int32Option->complex128 */ func MapComplex128ToInt32OptionList(m Int32OptionList, f func(Int32Option) complex128) Complex128List { acc := NilComplex128List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32OptionList: Int32Option->Any */ func MapAnyToInt32OptionList(m Int32OptionList, f func(Int32Option) Any) AnyList { acc := NilAnyList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32OptionList: Int32Option->BoolOption */ func MapBoolOptionToInt32OptionList(m Int32OptionList, f func(Int32Option) BoolOption) BoolOptionList { acc := NilBoolOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32OptionList: Int32Option->StringOption */ func MapStringOptionToInt32OptionList(m Int32OptionList, f func(Int32Option) StringOption) StringOptionList { acc := NilStringOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32OptionList: Int32Option->IntOption */ func MapIntOptionToInt32OptionList(m Int32OptionList, f func(Int32Option) IntOption) IntOptionList { acc := NilIntOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32OptionList: Int32Option->Int8Option */ func MapInt8OptionToInt32OptionList(m Int32OptionList, f func(Int32Option) Int8Option) Int8OptionList { acc := NilInt8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32OptionList: Int32Option->Int16Option */ func MapInt16OptionToInt32OptionList(m Int32OptionList, f func(Int32Option) Int16Option) Int16OptionList { acc := NilInt16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32OptionList: Int32Option->Int32Option */ func MapInt32OptionToInt32OptionList(m Int32OptionList, f func(Int32Option) Int32Option) Int32OptionList { acc := NilInt32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32OptionList: Int32Option->Int64Option */ func MapInt64OptionToInt32OptionList(m Int32OptionList, f func(Int32Option) Int64Option) Int64OptionList { acc := NilInt64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32OptionList: Int32Option->UintOption */ func MapUintOptionToInt32OptionList(m Int32OptionList, f func(Int32Option) UintOption) UintOptionList { acc := NilUintOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32OptionList: Int32Option->Uint8Option */ func MapUint8OptionToInt32OptionList(m Int32OptionList, f func(Int32Option) Uint8Option) Uint8OptionList { acc := NilUint8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32OptionList: Int32Option->Uint16Option */ func MapUint16OptionToInt32OptionList(m Int32OptionList, f func(Int32Option) Uint16Option) Uint16OptionList { acc := NilUint16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32OptionList: Int32Option->Uint32Option */ func MapUint32OptionToInt32OptionList(m Int32OptionList, f func(Int32Option) Uint32Option) Uint32OptionList { acc := NilUint32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32OptionList: Int32Option->Uint64Option */ func MapUint64OptionToInt32OptionList(m Int32OptionList, f func(Int32Option) Uint64Option) Uint64OptionList { acc := NilUint64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32OptionList: Int32Option->UintptrOption */ func MapUintptrOptionToInt32OptionList(m Int32OptionList, f func(Int32Option) UintptrOption) UintptrOptionList { acc := NilUintptrOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32OptionList: Int32Option->ByteOption */ func MapByteOptionToInt32OptionList(m Int32OptionList, f func(Int32Option) ByteOption) ByteOptionList { acc := NilByteOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32OptionList: Int32Option->RuneOption */ func MapRuneOptionToInt32OptionList(m Int32OptionList, f func(Int32Option) RuneOption) RuneOptionList { acc := NilRuneOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32OptionList: Int32Option->Float32Option */ func MapFloat32OptionToInt32OptionList(m Int32OptionList, f func(Int32Option) Float32Option) Float32OptionList { acc := NilFloat32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32OptionList: Int32Option->Float64Option */ func MapFloat64OptionToInt32OptionList(m Int32OptionList, f func(Int32Option) Float64Option) Float64OptionList { acc := NilFloat64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32OptionList: Int32Option->Complex64Option */ func MapComplex64OptionToInt32OptionList(m Int32OptionList, f func(Int32Option) Complex64Option) Complex64OptionList { acc := NilComplex64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32OptionList: Int32Option->Complex128Option */ func MapComplex128OptionToInt32OptionList(m Int32OptionList, f func(Int32Option) Complex128Option) Complex128OptionList { acc := NilComplex128OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32OptionList: Int32Option->AnyOption */ func MapAnyOptionToInt32OptionList(m Int32OptionList, f func(Int32Option) AnyOption) AnyOptionList { acc := NilAnyOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32OptionList: Int32Option->[]bool */ func MapBoolArrToInt32OptionList(m Int32OptionList, f func(Int32Option) []bool) BoolArrList { acc := NilBoolArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32OptionList: Int32Option->[]string */ func MapStringArrToInt32OptionList(m Int32OptionList, f func(Int32Option) []string) StringArrList { acc := NilStringArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32OptionList: Int32Option->[]int */ func MapIntArrToInt32OptionList(m Int32OptionList, f func(Int32Option) []int) IntArrList { acc := NilIntArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32OptionList: Int32Option->[]int8 */ func MapInt8ArrToInt32OptionList(m Int32OptionList, f func(Int32Option) []int8) Int8ArrList { acc := NilInt8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32OptionList: Int32Option->[]int16 */ func MapInt16ArrToInt32OptionList(m Int32OptionList, f func(Int32Option) []int16) Int16ArrList { acc := NilInt16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32OptionList: Int32Option->[]int32 */ func MapInt32ArrToInt32OptionList(m Int32OptionList, f func(Int32Option) []int32) Int32ArrList { acc := NilInt32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32OptionList: Int32Option->[]int64 */ func MapInt64ArrToInt32OptionList(m Int32OptionList, f func(Int32Option) []int64) Int64ArrList { acc := NilInt64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32OptionList: Int32Option->[]uint */ func MapUintArrToInt32OptionList(m Int32OptionList, f func(Int32Option) []uint) UintArrList { acc := NilUintArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32OptionList: Int32Option->[]uint8 */ func MapUint8ArrToInt32OptionList(m Int32OptionList, f func(Int32Option) []uint8) Uint8ArrList { acc := NilUint8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32OptionList: Int32Option->[]uint16 */ func MapUint16ArrToInt32OptionList(m Int32OptionList, f func(Int32Option) []uint16) Uint16ArrList { acc := NilUint16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32OptionList: Int32Option->[]uint32 */ func MapUint32ArrToInt32OptionList(m Int32OptionList, f func(Int32Option) []uint32) Uint32ArrList { acc := NilUint32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32OptionList: Int32Option->[]uint64 */ func MapUint64ArrToInt32OptionList(m Int32OptionList, f func(Int32Option) []uint64) Uint64ArrList { acc := NilUint64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32OptionList: Int32Option->[]uintptr */ func MapUintptrArrToInt32OptionList(m Int32OptionList, f func(Int32Option) []uintptr) UintptrArrList { acc := NilUintptrArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32OptionList: Int32Option->[]byte */ func MapByteArrToInt32OptionList(m Int32OptionList, f func(Int32Option) []byte) ByteArrList { acc := NilByteArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32OptionList: Int32Option->[]rune */ func MapRuneArrToInt32OptionList(m Int32OptionList, f func(Int32Option) []rune) RuneArrList { acc := NilRuneArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32OptionList: Int32Option->[]float32 */ func MapFloat32ArrToInt32OptionList(m Int32OptionList, f func(Int32Option) []float32) Float32ArrList { acc := NilFloat32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32OptionList: Int32Option->[]float64 */ func MapFloat64ArrToInt32OptionList(m Int32OptionList, f func(Int32Option) []float64) Float64ArrList { acc := NilFloat64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32OptionList: Int32Option->[]complex64 */ func MapComplex64ArrToInt32OptionList(m Int32OptionList, f func(Int32Option) []complex64) Complex64ArrList { acc := NilComplex64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32OptionList: Int32Option->[]complex128 */ func MapComplex128ArrToInt32OptionList(m Int32OptionList, f func(Int32Option) []complex128) Complex128ArrList { acc := NilComplex128ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32OptionList: Int32Option->[]Any */ func MapAnyArrToInt32OptionList(m Int32OptionList, f func(Int32Option) []Any) AnyArrList { acc := NilAnyArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32OptionList: Int32Option->BoolList */ func MapBoolListToInt32OptionList(m Int32OptionList, f func(Int32Option) BoolList) BoolListList { acc := NilBoolListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32OptionList: Int32Option->StringList */ func MapStringListToInt32OptionList(m Int32OptionList, f func(Int32Option) StringList) StringListList { acc := NilStringListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32OptionList: Int32Option->IntList */ func MapIntListToInt32OptionList(m Int32OptionList, f func(Int32Option) IntList) IntListList { acc := NilIntListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32OptionList: Int32Option->Int8List */ func MapInt8ListToInt32OptionList(m Int32OptionList, f func(Int32Option) Int8List) Int8ListList { acc := NilInt8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32OptionList: Int32Option->Int16List */ func MapInt16ListToInt32OptionList(m Int32OptionList, f func(Int32Option) Int16List) Int16ListList { acc := NilInt16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32OptionList: Int32Option->Int32List */ func MapInt32ListToInt32OptionList(m Int32OptionList, f func(Int32Option) Int32List) Int32ListList { acc := NilInt32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32OptionList: Int32Option->Int64List */ func MapInt64ListToInt32OptionList(m Int32OptionList, f func(Int32Option) Int64List) Int64ListList { acc := NilInt64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32OptionList: Int32Option->UintList */ func MapUintListToInt32OptionList(m Int32OptionList, f func(Int32Option) UintList) UintListList { acc := NilUintListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32OptionList: Int32Option->Uint8List */ func MapUint8ListToInt32OptionList(m Int32OptionList, f func(Int32Option) Uint8List) Uint8ListList { acc := NilUint8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32OptionList: Int32Option->Uint16List */ func MapUint16ListToInt32OptionList(m Int32OptionList, f func(Int32Option) Uint16List) Uint16ListList { acc := NilUint16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32OptionList: Int32Option->Uint32List */ func MapUint32ListToInt32OptionList(m Int32OptionList, f func(Int32Option) Uint32List) Uint32ListList { acc := NilUint32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32OptionList: Int32Option->Uint64List */ func MapUint64ListToInt32OptionList(m Int32OptionList, f func(Int32Option) Uint64List) Uint64ListList { acc := NilUint64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32OptionList: Int32Option->UintptrList */ func MapUintptrListToInt32OptionList(m Int32OptionList, f func(Int32Option) UintptrList) UintptrListList { acc := NilUintptrListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32OptionList: Int32Option->ByteList */ func MapByteListToInt32OptionList(m Int32OptionList, f func(Int32Option) ByteList) ByteListList { acc := NilByteListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32OptionList: Int32Option->RuneList */ func MapRuneListToInt32OptionList(m Int32OptionList, f func(Int32Option) RuneList) RuneListList { acc := NilRuneListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32OptionList: Int32Option->Float32List */ func MapFloat32ListToInt32OptionList(m Int32OptionList, f func(Int32Option) Float32List) Float32ListList { acc := NilFloat32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32OptionList: Int32Option->Float64List */ func MapFloat64ListToInt32OptionList(m Int32OptionList, f func(Int32Option) Float64List) Float64ListList { acc := NilFloat64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32OptionList: Int32Option->Complex64List */ func MapComplex64ListToInt32OptionList(m Int32OptionList, f func(Int32Option) Complex64List) Complex64ListList { acc := NilComplex64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32OptionList: Int32Option->Complex128List */ func MapComplex128ListToInt32OptionList(m Int32OptionList, f func(Int32Option) Complex128List) Complex128ListList { acc := NilComplex128ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32OptionList: Int32Option->AnyList */ func MapAnyListToInt32OptionList(m Int32OptionList, f func(Int32Option) AnyList) AnyListList { acc := NilAnyListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64OptionList: Int64Option->bool */ func MapBoolToInt64OptionList(m Int64OptionList, f func(Int64Option) bool) BoolList { acc := NilBoolList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64OptionList: Int64Option->string */ func MapStringToInt64OptionList(m Int64OptionList, f func(Int64Option) string) StringList { acc := NilStringList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64OptionList: Int64Option->int */ func MapIntToInt64OptionList(m Int64OptionList, f func(Int64Option) int) IntList { acc := NilIntList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64OptionList: Int64Option->int8 */ func MapInt8ToInt64OptionList(m Int64OptionList, f func(Int64Option) int8) Int8List { acc := NilInt8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64OptionList: Int64Option->int16 */ func MapInt16ToInt64OptionList(m Int64OptionList, f func(Int64Option) int16) Int16List { acc := NilInt16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64OptionList: Int64Option->int32 */ func MapInt32ToInt64OptionList(m Int64OptionList, f func(Int64Option) int32) Int32List { acc := NilInt32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64OptionList: Int64Option->int64 */ func MapInt64ToInt64OptionList(m Int64OptionList, f func(Int64Option) int64) Int64List { acc := NilInt64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64OptionList: Int64Option->uint */ func MapUintToInt64OptionList(m Int64OptionList, f func(Int64Option) uint) UintList { acc := NilUintList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64OptionList: Int64Option->uint8 */ func MapUint8ToInt64OptionList(m Int64OptionList, f func(Int64Option) uint8) Uint8List { acc := NilUint8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64OptionList: Int64Option->uint16 */ func MapUint16ToInt64OptionList(m Int64OptionList, f func(Int64Option) uint16) Uint16List { acc := NilUint16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64OptionList: Int64Option->uint32 */ func MapUint32ToInt64OptionList(m Int64OptionList, f func(Int64Option) uint32) Uint32List { acc := NilUint32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64OptionList: Int64Option->uint64 */ func MapUint64ToInt64OptionList(m Int64OptionList, f func(Int64Option) uint64) Uint64List { acc := NilUint64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64OptionList: Int64Option->uintptr */ func MapUintptrToInt64OptionList(m Int64OptionList, f func(Int64Option) uintptr) UintptrList { acc := NilUintptrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64OptionList: Int64Option->byte */ func MapByteToInt64OptionList(m Int64OptionList, f func(Int64Option) byte) ByteList { acc := NilByteList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64OptionList: Int64Option->rune */ func MapRuneToInt64OptionList(m Int64OptionList, f func(Int64Option) rune) RuneList { acc := NilRuneList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64OptionList: Int64Option->float32 */ func MapFloat32ToInt64OptionList(m Int64OptionList, f func(Int64Option) float32) Float32List { acc := NilFloat32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64OptionList: Int64Option->float64 */ func MapFloat64ToInt64OptionList(m Int64OptionList, f func(Int64Option) float64) Float64List { acc := NilFloat64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64OptionList: Int64Option->complex64 */ func MapComplex64ToInt64OptionList(m Int64OptionList, f func(Int64Option) complex64) Complex64List { acc := NilComplex64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64OptionList: Int64Option->complex128 */ func MapComplex128ToInt64OptionList(m Int64OptionList, f func(Int64Option) complex128) Complex128List { acc := NilComplex128List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64OptionList: Int64Option->Any */ func MapAnyToInt64OptionList(m Int64OptionList, f func(Int64Option) Any) AnyList { acc := NilAnyList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64OptionList: Int64Option->BoolOption */ func MapBoolOptionToInt64OptionList(m Int64OptionList, f func(Int64Option) BoolOption) BoolOptionList { acc := NilBoolOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64OptionList: Int64Option->StringOption */ func MapStringOptionToInt64OptionList(m Int64OptionList, f func(Int64Option) StringOption) StringOptionList { acc := NilStringOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64OptionList: Int64Option->IntOption */ func MapIntOptionToInt64OptionList(m Int64OptionList, f func(Int64Option) IntOption) IntOptionList { acc := NilIntOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64OptionList: Int64Option->Int8Option */ func MapInt8OptionToInt64OptionList(m Int64OptionList, f func(Int64Option) Int8Option) Int8OptionList { acc := NilInt8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64OptionList: Int64Option->Int16Option */ func MapInt16OptionToInt64OptionList(m Int64OptionList, f func(Int64Option) Int16Option) Int16OptionList { acc := NilInt16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64OptionList: Int64Option->Int32Option */ func MapInt32OptionToInt64OptionList(m Int64OptionList, f func(Int64Option) Int32Option) Int32OptionList { acc := NilInt32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64OptionList: Int64Option->Int64Option */ func MapInt64OptionToInt64OptionList(m Int64OptionList, f func(Int64Option) Int64Option) Int64OptionList { acc := NilInt64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64OptionList: Int64Option->UintOption */ func MapUintOptionToInt64OptionList(m Int64OptionList, f func(Int64Option) UintOption) UintOptionList { acc := NilUintOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64OptionList: Int64Option->Uint8Option */ func MapUint8OptionToInt64OptionList(m Int64OptionList, f func(Int64Option) Uint8Option) Uint8OptionList { acc := NilUint8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64OptionList: Int64Option->Uint16Option */ func MapUint16OptionToInt64OptionList(m Int64OptionList, f func(Int64Option) Uint16Option) Uint16OptionList { acc := NilUint16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64OptionList: Int64Option->Uint32Option */ func MapUint32OptionToInt64OptionList(m Int64OptionList, f func(Int64Option) Uint32Option) Uint32OptionList { acc := NilUint32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64OptionList: Int64Option->Uint64Option */ func MapUint64OptionToInt64OptionList(m Int64OptionList, f func(Int64Option) Uint64Option) Uint64OptionList { acc := NilUint64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64OptionList: Int64Option->UintptrOption */ func MapUintptrOptionToInt64OptionList(m Int64OptionList, f func(Int64Option) UintptrOption) UintptrOptionList { acc := NilUintptrOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64OptionList: Int64Option->ByteOption */ func MapByteOptionToInt64OptionList(m Int64OptionList, f func(Int64Option) ByteOption) ByteOptionList { acc := NilByteOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64OptionList: Int64Option->RuneOption */ func MapRuneOptionToInt64OptionList(m Int64OptionList, f func(Int64Option) RuneOption) RuneOptionList { acc := NilRuneOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64OptionList: Int64Option->Float32Option */ func MapFloat32OptionToInt64OptionList(m Int64OptionList, f func(Int64Option) Float32Option) Float32OptionList { acc := NilFloat32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64OptionList: Int64Option->Float64Option */ func MapFloat64OptionToInt64OptionList(m Int64OptionList, f func(Int64Option) Float64Option) Float64OptionList { acc := NilFloat64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64OptionList: Int64Option->Complex64Option */ func MapComplex64OptionToInt64OptionList(m Int64OptionList, f func(Int64Option) Complex64Option) Complex64OptionList { acc := NilComplex64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64OptionList: Int64Option->Complex128Option */ func MapComplex128OptionToInt64OptionList(m Int64OptionList, f func(Int64Option) Complex128Option) Complex128OptionList { acc := NilComplex128OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64OptionList: Int64Option->AnyOption */ func MapAnyOptionToInt64OptionList(m Int64OptionList, f func(Int64Option) AnyOption) AnyOptionList { acc := NilAnyOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64OptionList: Int64Option->[]bool */ func MapBoolArrToInt64OptionList(m Int64OptionList, f func(Int64Option) []bool) BoolArrList { acc := NilBoolArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64OptionList: Int64Option->[]string */ func MapStringArrToInt64OptionList(m Int64OptionList, f func(Int64Option) []string) StringArrList { acc := NilStringArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64OptionList: Int64Option->[]int */ func MapIntArrToInt64OptionList(m Int64OptionList, f func(Int64Option) []int) IntArrList { acc := NilIntArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64OptionList: Int64Option->[]int8 */ func MapInt8ArrToInt64OptionList(m Int64OptionList, f func(Int64Option) []int8) Int8ArrList { acc := NilInt8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64OptionList: Int64Option->[]int16 */ func MapInt16ArrToInt64OptionList(m Int64OptionList, f func(Int64Option) []int16) Int16ArrList { acc := NilInt16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64OptionList: Int64Option->[]int32 */ func MapInt32ArrToInt64OptionList(m Int64OptionList, f func(Int64Option) []int32) Int32ArrList { acc := NilInt32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64OptionList: Int64Option->[]int64 */ func MapInt64ArrToInt64OptionList(m Int64OptionList, f func(Int64Option) []int64) Int64ArrList { acc := NilInt64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64OptionList: Int64Option->[]uint */ func MapUintArrToInt64OptionList(m Int64OptionList, f func(Int64Option) []uint) UintArrList { acc := NilUintArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64OptionList: Int64Option->[]uint8 */ func MapUint8ArrToInt64OptionList(m Int64OptionList, f func(Int64Option) []uint8) Uint8ArrList { acc := NilUint8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64OptionList: Int64Option->[]uint16 */ func MapUint16ArrToInt64OptionList(m Int64OptionList, f func(Int64Option) []uint16) Uint16ArrList { acc := NilUint16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64OptionList: Int64Option->[]uint32 */ func MapUint32ArrToInt64OptionList(m Int64OptionList, f func(Int64Option) []uint32) Uint32ArrList { acc := NilUint32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64OptionList: Int64Option->[]uint64 */ func MapUint64ArrToInt64OptionList(m Int64OptionList, f func(Int64Option) []uint64) Uint64ArrList { acc := NilUint64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64OptionList: Int64Option->[]uintptr */ func MapUintptrArrToInt64OptionList(m Int64OptionList, f func(Int64Option) []uintptr) UintptrArrList { acc := NilUintptrArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64OptionList: Int64Option->[]byte */ func MapByteArrToInt64OptionList(m Int64OptionList, f func(Int64Option) []byte) ByteArrList { acc := NilByteArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64OptionList: Int64Option->[]rune */ func MapRuneArrToInt64OptionList(m Int64OptionList, f func(Int64Option) []rune) RuneArrList { acc := NilRuneArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64OptionList: Int64Option->[]float32 */ func MapFloat32ArrToInt64OptionList(m Int64OptionList, f func(Int64Option) []float32) Float32ArrList { acc := NilFloat32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64OptionList: Int64Option->[]float64 */ func MapFloat64ArrToInt64OptionList(m Int64OptionList, f func(Int64Option) []float64) Float64ArrList { acc := NilFloat64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64OptionList: Int64Option->[]complex64 */ func MapComplex64ArrToInt64OptionList(m Int64OptionList, f func(Int64Option) []complex64) Complex64ArrList { acc := NilComplex64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64OptionList: Int64Option->[]complex128 */ func MapComplex128ArrToInt64OptionList(m Int64OptionList, f func(Int64Option) []complex128) Complex128ArrList { acc := NilComplex128ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64OptionList: Int64Option->[]Any */ func MapAnyArrToInt64OptionList(m Int64OptionList, f func(Int64Option) []Any) AnyArrList { acc := NilAnyArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64OptionList: Int64Option->BoolList */ func MapBoolListToInt64OptionList(m Int64OptionList, f func(Int64Option) BoolList) BoolListList { acc := NilBoolListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64OptionList: Int64Option->StringList */ func MapStringListToInt64OptionList(m Int64OptionList, f func(Int64Option) StringList) StringListList { acc := NilStringListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64OptionList: Int64Option->IntList */ func MapIntListToInt64OptionList(m Int64OptionList, f func(Int64Option) IntList) IntListList { acc := NilIntListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64OptionList: Int64Option->Int8List */ func MapInt8ListToInt64OptionList(m Int64OptionList, f func(Int64Option) Int8List) Int8ListList { acc := NilInt8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64OptionList: Int64Option->Int16List */ func MapInt16ListToInt64OptionList(m Int64OptionList, f func(Int64Option) Int16List) Int16ListList { acc := NilInt16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64OptionList: Int64Option->Int32List */ func MapInt32ListToInt64OptionList(m Int64OptionList, f func(Int64Option) Int32List) Int32ListList { acc := NilInt32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64OptionList: Int64Option->Int64List */ func MapInt64ListToInt64OptionList(m Int64OptionList, f func(Int64Option) Int64List) Int64ListList { acc := NilInt64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64OptionList: Int64Option->UintList */ func MapUintListToInt64OptionList(m Int64OptionList, f func(Int64Option) UintList) UintListList { acc := NilUintListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64OptionList: Int64Option->Uint8List */ func MapUint8ListToInt64OptionList(m Int64OptionList, f func(Int64Option) Uint8List) Uint8ListList { acc := NilUint8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64OptionList: Int64Option->Uint16List */ func MapUint16ListToInt64OptionList(m Int64OptionList, f func(Int64Option) Uint16List) Uint16ListList { acc := NilUint16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64OptionList: Int64Option->Uint32List */ func MapUint32ListToInt64OptionList(m Int64OptionList, f func(Int64Option) Uint32List) Uint32ListList { acc := NilUint32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64OptionList: Int64Option->Uint64List */ func MapUint64ListToInt64OptionList(m Int64OptionList, f func(Int64Option) Uint64List) Uint64ListList { acc := NilUint64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64OptionList: Int64Option->UintptrList */ func MapUintptrListToInt64OptionList(m Int64OptionList, f func(Int64Option) UintptrList) UintptrListList { acc := NilUintptrListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64OptionList: Int64Option->ByteList */ func MapByteListToInt64OptionList(m Int64OptionList, f func(Int64Option) ByteList) ByteListList { acc := NilByteListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64OptionList: Int64Option->RuneList */ func MapRuneListToInt64OptionList(m Int64OptionList, f func(Int64Option) RuneList) RuneListList { acc := NilRuneListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64OptionList: Int64Option->Float32List */ func MapFloat32ListToInt64OptionList(m Int64OptionList, f func(Int64Option) Float32List) Float32ListList { acc := NilFloat32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64OptionList: Int64Option->Float64List */ func MapFloat64ListToInt64OptionList(m Int64OptionList, f func(Int64Option) Float64List) Float64ListList { acc := NilFloat64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64OptionList: Int64Option->Complex64List */ func MapComplex64ListToInt64OptionList(m Int64OptionList, f func(Int64Option) Complex64List) Complex64ListList { acc := NilComplex64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64OptionList: Int64Option->Complex128List */ func MapComplex128ListToInt64OptionList(m Int64OptionList, f func(Int64Option) Complex128List) Complex128ListList { acc := NilComplex128ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64OptionList: Int64Option->AnyList */ func MapAnyListToInt64OptionList(m Int64OptionList, f func(Int64Option) AnyList) AnyListList { acc := NilAnyListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintOptionList: UintOption->bool */ func MapBoolToUintOptionList(m UintOptionList, f func(UintOption) bool) BoolList { acc := NilBoolList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintOptionList: UintOption->string */ func MapStringToUintOptionList(m UintOptionList, f func(UintOption) string) StringList { acc := NilStringList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintOptionList: UintOption->int */ func MapIntToUintOptionList(m UintOptionList, f func(UintOption) int) IntList { acc := NilIntList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintOptionList: UintOption->int8 */ func MapInt8ToUintOptionList(m UintOptionList, f func(UintOption) int8) Int8List { acc := NilInt8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintOptionList: UintOption->int16 */ func MapInt16ToUintOptionList(m UintOptionList, f func(UintOption) int16) Int16List { acc := NilInt16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintOptionList: UintOption->int32 */ func MapInt32ToUintOptionList(m UintOptionList, f func(UintOption) int32) Int32List { acc := NilInt32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintOptionList: UintOption->int64 */ func MapInt64ToUintOptionList(m UintOptionList, f func(UintOption) int64) Int64List { acc := NilInt64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintOptionList: UintOption->uint */ func MapUintToUintOptionList(m UintOptionList, f func(UintOption) uint) UintList { acc := NilUintList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintOptionList: UintOption->uint8 */ func MapUint8ToUintOptionList(m UintOptionList, f func(UintOption) uint8) Uint8List { acc := NilUint8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintOptionList: UintOption->uint16 */ func MapUint16ToUintOptionList(m UintOptionList, f func(UintOption) uint16) Uint16List { acc := NilUint16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintOptionList: UintOption->uint32 */ func MapUint32ToUintOptionList(m UintOptionList, f func(UintOption) uint32) Uint32List { acc := NilUint32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintOptionList: UintOption->uint64 */ func MapUint64ToUintOptionList(m UintOptionList, f func(UintOption) uint64) Uint64List { acc := NilUint64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintOptionList: UintOption->uintptr */ func MapUintptrToUintOptionList(m UintOptionList, f func(UintOption) uintptr) UintptrList { acc := NilUintptrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintOptionList: UintOption->byte */ func MapByteToUintOptionList(m UintOptionList, f func(UintOption) byte) ByteList { acc := NilByteList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintOptionList: UintOption->rune */ func MapRuneToUintOptionList(m UintOptionList, f func(UintOption) rune) RuneList { acc := NilRuneList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintOptionList: UintOption->float32 */ func MapFloat32ToUintOptionList(m UintOptionList, f func(UintOption) float32) Float32List { acc := NilFloat32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintOptionList: UintOption->float64 */ func MapFloat64ToUintOptionList(m UintOptionList, f func(UintOption) float64) Float64List { acc := NilFloat64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintOptionList: UintOption->complex64 */ func MapComplex64ToUintOptionList(m UintOptionList, f func(UintOption) complex64) Complex64List { acc := NilComplex64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintOptionList: UintOption->complex128 */ func MapComplex128ToUintOptionList(m UintOptionList, f func(UintOption) complex128) Complex128List { acc := NilComplex128List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintOptionList: UintOption->Any */ func MapAnyToUintOptionList(m UintOptionList, f func(UintOption) Any) AnyList { acc := NilAnyList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintOptionList: UintOption->BoolOption */ func MapBoolOptionToUintOptionList(m UintOptionList, f func(UintOption) BoolOption) BoolOptionList { acc := NilBoolOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintOptionList: UintOption->StringOption */ func MapStringOptionToUintOptionList(m UintOptionList, f func(UintOption) StringOption) StringOptionList { acc := NilStringOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintOptionList: UintOption->IntOption */ func MapIntOptionToUintOptionList(m UintOptionList, f func(UintOption) IntOption) IntOptionList { acc := NilIntOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintOptionList: UintOption->Int8Option */ func MapInt8OptionToUintOptionList(m UintOptionList, f func(UintOption) Int8Option) Int8OptionList { acc := NilInt8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintOptionList: UintOption->Int16Option */ func MapInt16OptionToUintOptionList(m UintOptionList, f func(UintOption) Int16Option) Int16OptionList { acc := NilInt16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintOptionList: UintOption->Int32Option */ func MapInt32OptionToUintOptionList(m UintOptionList, f func(UintOption) Int32Option) Int32OptionList { acc := NilInt32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintOptionList: UintOption->Int64Option */ func MapInt64OptionToUintOptionList(m UintOptionList, f func(UintOption) Int64Option) Int64OptionList { acc := NilInt64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintOptionList: UintOption->UintOption */ func MapUintOptionToUintOptionList(m UintOptionList, f func(UintOption) UintOption) UintOptionList { acc := NilUintOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintOptionList: UintOption->Uint8Option */ func MapUint8OptionToUintOptionList(m UintOptionList, f func(UintOption) Uint8Option) Uint8OptionList { acc := NilUint8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintOptionList: UintOption->Uint16Option */ func MapUint16OptionToUintOptionList(m UintOptionList, f func(UintOption) Uint16Option) Uint16OptionList { acc := NilUint16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintOptionList: UintOption->Uint32Option */ func MapUint32OptionToUintOptionList(m UintOptionList, f func(UintOption) Uint32Option) Uint32OptionList { acc := NilUint32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintOptionList: UintOption->Uint64Option */ func MapUint64OptionToUintOptionList(m UintOptionList, f func(UintOption) Uint64Option) Uint64OptionList { acc := NilUint64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintOptionList: UintOption->UintptrOption */ func MapUintptrOptionToUintOptionList(m UintOptionList, f func(UintOption) UintptrOption) UintptrOptionList { acc := NilUintptrOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintOptionList: UintOption->ByteOption */ func MapByteOptionToUintOptionList(m UintOptionList, f func(UintOption) ByteOption) ByteOptionList { acc := NilByteOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintOptionList: UintOption->RuneOption */ func MapRuneOptionToUintOptionList(m UintOptionList, f func(UintOption) RuneOption) RuneOptionList { acc := NilRuneOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintOptionList: UintOption->Float32Option */ func MapFloat32OptionToUintOptionList(m UintOptionList, f func(UintOption) Float32Option) Float32OptionList { acc := NilFloat32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintOptionList: UintOption->Float64Option */ func MapFloat64OptionToUintOptionList(m UintOptionList, f func(UintOption) Float64Option) Float64OptionList { acc := NilFloat64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintOptionList: UintOption->Complex64Option */ func MapComplex64OptionToUintOptionList(m UintOptionList, f func(UintOption) Complex64Option) Complex64OptionList { acc := NilComplex64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintOptionList: UintOption->Complex128Option */ func MapComplex128OptionToUintOptionList(m UintOptionList, f func(UintOption) Complex128Option) Complex128OptionList { acc := NilComplex128OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintOptionList: UintOption->AnyOption */ func MapAnyOptionToUintOptionList(m UintOptionList, f func(UintOption) AnyOption) AnyOptionList { acc := NilAnyOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintOptionList: UintOption->[]bool */ func MapBoolArrToUintOptionList(m UintOptionList, f func(UintOption) []bool) BoolArrList { acc := NilBoolArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintOptionList: UintOption->[]string */ func MapStringArrToUintOptionList(m UintOptionList, f func(UintOption) []string) StringArrList { acc := NilStringArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintOptionList: UintOption->[]int */ func MapIntArrToUintOptionList(m UintOptionList, f func(UintOption) []int) IntArrList { acc := NilIntArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintOptionList: UintOption->[]int8 */ func MapInt8ArrToUintOptionList(m UintOptionList, f func(UintOption) []int8) Int8ArrList { acc := NilInt8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintOptionList: UintOption->[]int16 */ func MapInt16ArrToUintOptionList(m UintOptionList, f func(UintOption) []int16) Int16ArrList { acc := NilInt16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintOptionList: UintOption->[]int32 */ func MapInt32ArrToUintOptionList(m UintOptionList, f func(UintOption) []int32) Int32ArrList { acc := NilInt32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintOptionList: UintOption->[]int64 */ func MapInt64ArrToUintOptionList(m UintOptionList, f func(UintOption) []int64) Int64ArrList { acc := NilInt64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintOptionList: UintOption->[]uint */ func MapUintArrToUintOptionList(m UintOptionList, f func(UintOption) []uint) UintArrList { acc := NilUintArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintOptionList: UintOption->[]uint8 */ func MapUint8ArrToUintOptionList(m UintOptionList, f func(UintOption) []uint8) Uint8ArrList { acc := NilUint8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintOptionList: UintOption->[]uint16 */ func MapUint16ArrToUintOptionList(m UintOptionList, f func(UintOption) []uint16) Uint16ArrList { acc := NilUint16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintOptionList: UintOption->[]uint32 */ func MapUint32ArrToUintOptionList(m UintOptionList, f func(UintOption) []uint32) Uint32ArrList { acc := NilUint32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintOptionList: UintOption->[]uint64 */ func MapUint64ArrToUintOptionList(m UintOptionList, f func(UintOption) []uint64) Uint64ArrList { acc := NilUint64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintOptionList: UintOption->[]uintptr */ func MapUintptrArrToUintOptionList(m UintOptionList, f func(UintOption) []uintptr) UintptrArrList { acc := NilUintptrArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintOptionList: UintOption->[]byte */ func MapByteArrToUintOptionList(m UintOptionList, f func(UintOption) []byte) ByteArrList { acc := NilByteArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintOptionList: UintOption->[]rune */ func MapRuneArrToUintOptionList(m UintOptionList, f func(UintOption) []rune) RuneArrList { acc := NilRuneArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintOptionList: UintOption->[]float32 */ func MapFloat32ArrToUintOptionList(m UintOptionList, f func(UintOption) []float32) Float32ArrList { acc := NilFloat32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintOptionList: UintOption->[]float64 */ func MapFloat64ArrToUintOptionList(m UintOptionList, f func(UintOption) []float64) Float64ArrList { acc := NilFloat64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintOptionList: UintOption->[]complex64 */ func MapComplex64ArrToUintOptionList(m UintOptionList, f func(UintOption) []complex64) Complex64ArrList { acc := NilComplex64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintOptionList: UintOption->[]complex128 */ func MapComplex128ArrToUintOptionList(m UintOptionList, f func(UintOption) []complex128) Complex128ArrList { acc := NilComplex128ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintOptionList: UintOption->[]Any */ func MapAnyArrToUintOptionList(m UintOptionList, f func(UintOption) []Any) AnyArrList { acc := NilAnyArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintOptionList: UintOption->BoolList */ func MapBoolListToUintOptionList(m UintOptionList, f func(UintOption) BoolList) BoolListList { acc := NilBoolListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintOptionList: UintOption->StringList */ func MapStringListToUintOptionList(m UintOptionList, f func(UintOption) StringList) StringListList { acc := NilStringListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintOptionList: UintOption->IntList */ func MapIntListToUintOptionList(m UintOptionList, f func(UintOption) IntList) IntListList { acc := NilIntListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintOptionList: UintOption->Int8List */ func MapInt8ListToUintOptionList(m UintOptionList, f func(UintOption) Int8List) Int8ListList { acc := NilInt8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintOptionList: UintOption->Int16List */ func MapInt16ListToUintOptionList(m UintOptionList, f func(UintOption) Int16List) Int16ListList { acc := NilInt16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintOptionList: UintOption->Int32List */ func MapInt32ListToUintOptionList(m UintOptionList, f func(UintOption) Int32List) Int32ListList { acc := NilInt32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintOptionList: UintOption->Int64List */ func MapInt64ListToUintOptionList(m UintOptionList, f func(UintOption) Int64List) Int64ListList { acc := NilInt64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintOptionList: UintOption->UintList */ func MapUintListToUintOptionList(m UintOptionList, f func(UintOption) UintList) UintListList { acc := NilUintListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintOptionList: UintOption->Uint8List */ func MapUint8ListToUintOptionList(m UintOptionList, f func(UintOption) Uint8List) Uint8ListList { acc := NilUint8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintOptionList: UintOption->Uint16List */ func MapUint16ListToUintOptionList(m UintOptionList, f func(UintOption) Uint16List) Uint16ListList { acc := NilUint16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintOptionList: UintOption->Uint32List */ func MapUint32ListToUintOptionList(m UintOptionList, f func(UintOption) Uint32List) Uint32ListList { acc := NilUint32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintOptionList: UintOption->Uint64List */ func MapUint64ListToUintOptionList(m UintOptionList, f func(UintOption) Uint64List) Uint64ListList { acc := NilUint64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintOptionList: UintOption->UintptrList */ func MapUintptrListToUintOptionList(m UintOptionList, f func(UintOption) UintptrList) UintptrListList { acc := NilUintptrListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintOptionList: UintOption->ByteList */ func MapByteListToUintOptionList(m UintOptionList, f func(UintOption) ByteList) ByteListList { acc := NilByteListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintOptionList: UintOption->RuneList */ func MapRuneListToUintOptionList(m UintOptionList, f func(UintOption) RuneList) RuneListList { acc := NilRuneListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintOptionList: UintOption->Float32List */ func MapFloat32ListToUintOptionList(m UintOptionList, f func(UintOption) Float32List) Float32ListList { acc := NilFloat32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintOptionList: UintOption->Float64List */ func MapFloat64ListToUintOptionList(m UintOptionList, f func(UintOption) Float64List) Float64ListList { acc := NilFloat64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintOptionList: UintOption->Complex64List */ func MapComplex64ListToUintOptionList(m UintOptionList, f func(UintOption) Complex64List) Complex64ListList { acc := NilComplex64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintOptionList: UintOption->Complex128List */ func MapComplex128ListToUintOptionList(m UintOptionList, f func(UintOption) Complex128List) Complex128ListList { acc := NilComplex128ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintOptionList: UintOption->AnyList */ func MapAnyListToUintOptionList(m UintOptionList, f func(UintOption) AnyList) AnyListList { acc := NilAnyListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8OptionList: Uint8Option->bool */ func MapBoolToUint8OptionList(m Uint8OptionList, f func(Uint8Option) bool) BoolList { acc := NilBoolList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8OptionList: Uint8Option->string */ func MapStringToUint8OptionList(m Uint8OptionList, f func(Uint8Option) string) StringList { acc := NilStringList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8OptionList: Uint8Option->int */ func MapIntToUint8OptionList(m Uint8OptionList, f func(Uint8Option) int) IntList { acc := NilIntList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8OptionList: Uint8Option->int8 */ func MapInt8ToUint8OptionList(m Uint8OptionList, f func(Uint8Option) int8) Int8List { acc := NilInt8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8OptionList: Uint8Option->int16 */ func MapInt16ToUint8OptionList(m Uint8OptionList, f func(Uint8Option) int16) Int16List { acc := NilInt16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8OptionList: Uint8Option->int32 */ func MapInt32ToUint8OptionList(m Uint8OptionList, f func(Uint8Option) int32) Int32List { acc := NilInt32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8OptionList: Uint8Option->int64 */ func MapInt64ToUint8OptionList(m Uint8OptionList, f func(Uint8Option) int64) Int64List { acc := NilInt64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8OptionList: Uint8Option->uint */ func MapUintToUint8OptionList(m Uint8OptionList, f func(Uint8Option) uint) UintList { acc := NilUintList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8OptionList: Uint8Option->uint8 */ func MapUint8ToUint8OptionList(m Uint8OptionList, f func(Uint8Option) uint8) Uint8List { acc := NilUint8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8OptionList: Uint8Option->uint16 */ func MapUint16ToUint8OptionList(m Uint8OptionList, f func(Uint8Option) uint16) Uint16List { acc := NilUint16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8OptionList: Uint8Option->uint32 */ func MapUint32ToUint8OptionList(m Uint8OptionList, f func(Uint8Option) uint32) Uint32List { acc := NilUint32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8OptionList: Uint8Option->uint64 */ func MapUint64ToUint8OptionList(m Uint8OptionList, f func(Uint8Option) uint64) Uint64List { acc := NilUint64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8OptionList: Uint8Option->uintptr */ func MapUintptrToUint8OptionList(m Uint8OptionList, f func(Uint8Option) uintptr) UintptrList { acc := NilUintptrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8OptionList: Uint8Option->byte */ func MapByteToUint8OptionList(m Uint8OptionList, f func(Uint8Option) byte) ByteList { acc := NilByteList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8OptionList: Uint8Option->rune */ func MapRuneToUint8OptionList(m Uint8OptionList, f func(Uint8Option) rune) RuneList { acc := NilRuneList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8OptionList: Uint8Option->float32 */ func MapFloat32ToUint8OptionList(m Uint8OptionList, f func(Uint8Option) float32) Float32List { acc := NilFloat32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8OptionList: Uint8Option->float64 */ func MapFloat64ToUint8OptionList(m Uint8OptionList, f func(Uint8Option) float64) Float64List { acc := NilFloat64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8OptionList: Uint8Option->complex64 */ func MapComplex64ToUint8OptionList(m Uint8OptionList, f func(Uint8Option) complex64) Complex64List { acc := NilComplex64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8OptionList: Uint8Option->complex128 */ func MapComplex128ToUint8OptionList(m Uint8OptionList, f func(Uint8Option) complex128) Complex128List { acc := NilComplex128List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8OptionList: Uint8Option->Any */ func MapAnyToUint8OptionList(m Uint8OptionList, f func(Uint8Option) Any) AnyList { acc := NilAnyList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8OptionList: Uint8Option->BoolOption */ func MapBoolOptionToUint8OptionList(m Uint8OptionList, f func(Uint8Option) BoolOption) BoolOptionList { acc := NilBoolOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8OptionList: Uint8Option->StringOption */ func MapStringOptionToUint8OptionList(m Uint8OptionList, f func(Uint8Option) StringOption) StringOptionList { acc := NilStringOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8OptionList: Uint8Option->IntOption */ func MapIntOptionToUint8OptionList(m Uint8OptionList, f func(Uint8Option) IntOption) IntOptionList { acc := NilIntOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8OptionList: Uint8Option->Int8Option */ func MapInt8OptionToUint8OptionList(m Uint8OptionList, f func(Uint8Option) Int8Option) Int8OptionList { acc := NilInt8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8OptionList: Uint8Option->Int16Option */ func MapInt16OptionToUint8OptionList(m Uint8OptionList, f func(Uint8Option) Int16Option) Int16OptionList { acc := NilInt16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8OptionList: Uint8Option->Int32Option */ func MapInt32OptionToUint8OptionList(m Uint8OptionList, f func(Uint8Option) Int32Option) Int32OptionList { acc := NilInt32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8OptionList: Uint8Option->Int64Option */ func MapInt64OptionToUint8OptionList(m Uint8OptionList, f func(Uint8Option) Int64Option) Int64OptionList { acc := NilInt64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8OptionList: Uint8Option->UintOption */ func MapUintOptionToUint8OptionList(m Uint8OptionList, f func(Uint8Option) UintOption) UintOptionList { acc := NilUintOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8OptionList: Uint8Option->Uint8Option */ func MapUint8OptionToUint8OptionList(m Uint8OptionList, f func(Uint8Option) Uint8Option) Uint8OptionList { acc := NilUint8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8OptionList: Uint8Option->Uint16Option */ func MapUint16OptionToUint8OptionList(m Uint8OptionList, f func(Uint8Option) Uint16Option) Uint16OptionList { acc := NilUint16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8OptionList: Uint8Option->Uint32Option */ func MapUint32OptionToUint8OptionList(m Uint8OptionList, f func(Uint8Option) Uint32Option) Uint32OptionList { acc := NilUint32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8OptionList: Uint8Option->Uint64Option */ func MapUint64OptionToUint8OptionList(m Uint8OptionList, f func(Uint8Option) Uint64Option) Uint64OptionList { acc := NilUint64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8OptionList: Uint8Option->UintptrOption */ func MapUintptrOptionToUint8OptionList(m Uint8OptionList, f func(Uint8Option) UintptrOption) UintptrOptionList { acc := NilUintptrOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8OptionList: Uint8Option->ByteOption */ func MapByteOptionToUint8OptionList(m Uint8OptionList, f func(Uint8Option) ByteOption) ByteOptionList { acc := NilByteOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8OptionList: Uint8Option->RuneOption */ func MapRuneOptionToUint8OptionList(m Uint8OptionList, f func(Uint8Option) RuneOption) RuneOptionList { acc := NilRuneOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8OptionList: Uint8Option->Float32Option */ func MapFloat32OptionToUint8OptionList(m Uint8OptionList, f func(Uint8Option) Float32Option) Float32OptionList { acc := NilFloat32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8OptionList: Uint8Option->Float64Option */ func MapFloat64OptionToUint8OptionList(m Uint8OptionList, f func(Uint8Option) Float64Option) Float64OptionList { acc := NilFloat64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8OptionList: Uint8Option->Complex64Option */ func MapComplex64OptionToUint8OptionList(m Uint8OptionList, f func(Uint8Option) Complex64Option) Complex64OptionList { acc := NilComplex64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8OptionList: Uint8Option->Complex128Option */ func MapComplex128OptionToUint8OptionList(m Uint8OptionList, f func(Uint8Option) Complex128Option) Complex128OptionList { acc := NilComplex128OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8OptionList: Uint8Option->AnyOption */ func MapAnyOptionToUint8OptionList(m Uint8OptionList, f func(Uint8Option) AnyOption) AnyOptionList { acc := NilAnyOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8OptionList: Uint8Option->[]bool */ func MapBoolArrToUint8OptionList(m Uint8OptionList, f func(Uint8Option) []bool) BoolArrList { acc := NilBoolArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8OptionList: Uint8Option->[]string */ func MapStringArrToUint8OptionList(m Uint8OptionList, f func(Uint8Option) []string) StringArrList { acc := NilStringArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8OptionList: Uint8Option->[]int */ func MapIntArrToUint8OptionList(m Uint8OptionList, f func(Uint8Option) []int) IntArrList { acc := NilIntArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8OptionList: Uint8Option->[]int8 */ func MapInt8ArrToUint8OptionList(m Uint8OptionList, f func(Uint8Option) []int8) Int8ArrList { acc := NilInt8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8OptionList: Uint8Option->[]int16 */ func MapInt16ArrToUint8OptionList(m Uint8OptionList, f func(Uint8Option) []int16) Int16ArrList { acc := NilInt16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8OptionList: Uint8Option->[]int32 */ func MapInt32ArrToUint8OptionList(m Uint8OptionList, f func(Uint8Option) []int32) Int32ArrList { acc := NilInt32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8OptionList: Uint8Option->[]int64 */ func MapInt64ArrToUint8OptionList(m Uint8OptionList, f func(Uint8Option) []int64) Int64ArrList { acc := NilInt64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8OptionList: Uint8Option->[]uint */ func MapUintArrToUint8OptionList(m Uint8OptionList, f func(Uint8Option) []uint) UintArrList { acc := NilUintArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8OptionList: Uint8Option->[]uint8 */ func MapUint8ArrToUint8OptionList(m Uint8OptionList, f func(Uint8Option) []uint8) Uint8ArrList { acc := NilUint8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8OptionList: Uint8Option->[]uint16 */ func MapUint16ArrToUint8OptionList(m Uint8OptionList, f func(Uint8Option) []uint16) Uint16ArrList { acc := NilUint16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8OptionList: Uint8Option->[]uint32 */ func MapUint32ArrToUint8OptionList(m Uint8OptionList, f func(Uint8Option) []uint32) Uint32ArrList { acc := NilUint32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8OptionList: Uint8Option->[]uint64 */ func MapUint64ArrToUint8OptionList(m Uint8OptionList, f func(Uint8Option) []uint64) Uint64ArrList { acc := NilUint64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8OptionList: Uint8Option->[]uintptr */ func MapUintptrArrToUint8OptionList(m Uint8OptionList, f func(Uint8Option) []uintptr) UintptrArrList { acc := NilUintptrArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8OptionList: Uint8Option->[]byte */ func MapByteArrToUint8OptionList(m Uint8OptionList, f func(Uint8Option) []byte) ByteArrList { acc := NilByteArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8OptionList: Uint8Option->[]rune */ func MapRuneArrToUint8OptionList(m Uint8OptionList, f func(Uint8Option) []rune) RuneArrList { acc := NilRuneArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8OptionList: Uint8Option->[]float32 */ func MapFloat32ArrToUint8OptionList(m Uint8OptionList, f func(Uint8Option) []float32) Float32ArrList { acc := NilFloat32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8OptionList: Uint8Option->[]float64 */ func MapFloat64ArrToUint8OptionList(m Uint8OptionList, f func(Uint8Option) []float64) Float64ArrList { acc := NilFloat64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8OptionList: Uint8Option->[]complex64 */ func MapComplex64ArrToUint8OptionList(m Uint8OptionList, f func(Uint8Option) []complex64) Complex64ArrList { acc := NilComplex64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8OptionList: Uint8Option->[]complex128 */ func MapComplex128ArrToUint8OptionList(m Uint8OptionList, f func(Uint8Option) []complex128) Complex128ArrList { acc := NilComplex128ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8OptionList: Uint8Option->[]Any */ func MapAnyArrToUint8OptionList(m Uint8OptionList, f func(Uint8Option) []Any) AnyArrList { acc := NilAnyArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8OptionList: Uint8Option->BoolList */ func MapBoolListToUint8OptionList(m Uint8OptionList, f func(Uint8Option) BoolList) BoolListList { acc := NilBoolListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8OptionList: Uint8Option->StringList */ func MapStringListToUint8OptionList(m Uint8OptionList, f func(Uint8Option) StringList) StringListList { acc := NilStringListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8OptionList: Uint8Option->IntList */ func MapIntListToUint8OptionList(m Uint8OptionList, f func(Uint8Option) IntList) IntListList { acc := NilIntListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8OptionList: Uint8Option->Int8List */ func MapInt8ListToUint8OptionList(m Uint8OptionList, f func(Uint8Option) Int8List) Int8ListList { acc := NilInt8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8OptionList: Uint8Option->Int16List */ func MapInt16ListToUint8OptionList(m Uint8OptionList, f func(Uint8Option) Int16List) Int16ListList { acc := NilInt16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8OptionList: Uint8Option->Int32List */ func MapInt32ListToUint8OptionList(m Uint8OptionList, f func(Uint8Option) Int32List) Int32ListList { acc := NilInt32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8OptionList: Uint8Option->Int64List */ func MapInt64ListToUint8OptionList(m Uint8OptionList, f func(Uint8Option) Int64List) Int64ListList { acc := NilInt64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8OptionList: Uint8Option->UintList */ func MapUintListToUint8OptionList(m Uint8OptionList, f func(Uint8Option) UintList) UintListList { acc := NilUintListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8OptionList: Uint8Option->Uint8List */ func MapUint8ListToUint8OptionList(m Uint8OptionList, f func(Uint8Option) Uint8List) Uint8ListList { acc := NilUint8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8OptionList: Uint8Option->Uint16List */ func MapUint16ListToUint8OptionList(m Uint8OptionList, f func(Uint8Option) Uint16List) Uint16ListList { acc := NilUint16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8OptionList: Uint8Option->Uint32List */ func MapUint32ListToUint8OptionList(m Uint8OptionList, f func(Uint8Option) Uint32List) Uint32ListList { acc := NilUint32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8OptionList: Uint8Option->Uint64List */ func MapUint64ListToUint8OptionList(m Uint8OptionList, f func(Uint8Option) Uint64List) Uint64ListList { acc := NilUint64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8OptionList: Uint8Option->UintptrList */ func MapUintptrListToUint8OptionList(m Uint8OptionList, f func(Uint8Option) UintptrList) UintptrListList { acc := NilUintptrListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8OptionList: Uint8Option->ByteList */ func MapByteListToUint8OptionList(m Uint8OptionList, f func(Uint8Option) ByteList) ByteListList { acc := NilByteListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8OptionList: Uint8Option->RuneList */ func MapRuneListToUint8OptionList(m Uint8OptionList, f func(Uint8Option) RuneList) RuneListList { acc := NilRuneListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8OptionList: Uint8Option->Float32List */ func MapFloat32ListToUint8OptionList(m Uint8OptionList, f func(Uint8Option) Float32List) Float32ListList { acc := NilFloat32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8OptionList: Uint8Option->Float64List */ func MapFloat64ListToUint8OptionList(m Uint8OptionList, f func(Uint8Option) Float64List) Float64ListList { acc := NilFloat64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8OptionList: Uint8Option->Complex64List */ func MapComplex64ListToUint8OptionList(m Uint8OptionList, f func(Uint8Option) Complex64List) Complex64ListList { acc := NilComplex64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8OptionList: Uint8Option->Complex128List */ func MapComplex128ListToUint8OptionList(m Uint8OptionList, f func(Uint8Option) Complex128List) Complex128ListList { acc := NilComplex128ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8OptionList: Uint8Option->AnyList */ func MapAnyListToUint8OptionList(m Uint8OptionList, f func(Uint8Option) AnyList) AnyListList { acc := NilAnyListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16OptionList: Uint16Option->bool */ func MapBoolToUint16OptionList(m Uint16OptionList, f func(Uint16Option) bool) BoolList { acc := NilBoolList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16OptionList: Uint16Option->string */ func MapStringToUint16OptionList(m Uint16OptionList, f func(Uint16Option) string) StringList { acc := NilStringList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16OptionList: Uint16Option->int */ func MapIntToUint16OptionList(m Uint16OptionList, f func(Uint16Option) int) IntList { acc := NilIntList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16OptionList: Uint16Option->int8 */ func MapInt8ToUint16OptionList(m Uint16OptionList, f func(Uint16Option) int8) Int8List { acc := NilInt8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16OptionList: Uint16Option->int16 */ func MapInt16ToUint16OptionList(m Uint16OptionList, f func(Uint16Option) int16) Int16List { acc := NilInt16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16OptionList: Uint16Option->int32 */ func MapInt32ToUint16OptionList(m Uint16OptionList, f func(Uint16Option) int32) Int32List { acc := NilInt32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16OptionList: Uint16Option->int64 */ func MapInt64ToUint16OptionList(m Uint16OptionList, f func(Uint16Option) int64) Int64List { acc := NilInt64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16OptionList: Uint16Option->uint */ func MapUintToUint16OptionList(m Uint16OptionList, f func(Uint16Option) uint) UintList { acc := NilUintList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16OptionList: Uint16Option->uint8 */ func MapUint8ToUint16OptionList(m Uint16OptionList, f func(Uint16Option) uint8) Uint8List { acc := NilUint8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16OptionList: Uint16Option->uint16 */ func MapUint16ToUint16OptionList(m Uint16OptionList, f func(Uint16Option) uint16) Uint16List { acc := NilUint16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16OptionList: Uint16Option->uint32 */ func MapUint32ToUint16OptionList(m Uint16OptionList, f func(Uint16Option) uint32) Uint32List { acc := NilUint32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16OptionList: Uint16Option->uint64 */ func MapUint64ToUint16OptionList(m Uint16OptionList, f func(Uint16Option) uint64) Uint64List { acc := NilUint64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16OptionList: Uint16Option->uintptr */ func MapUintptrToUint16OptionList(m Uint16OptionList, f func(Uint16Option) uintptr) UintptrList { acc := NilUintptrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16OptionList: Uint16Option->byte */ func MapByteToUint16OptionList(m Uint16OptionList, f func(Uint16Option) byte) ByteList { acc := NilByteList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16OptionList: Uint16Option->rune */ func MapRuneToUint16OptionList(m Uint16OptionList, f func(Uint16Option) rune) RuneList { acc := NilRuneList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16OptionList: Uint16Option->float32 */ func MapFloat32ToUint16OptionList(m Uint16OptionList, f func(Uint16Option) float32) Float32List { acc := NilFloat32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16OptionList: Uint16Option->float64 */ func MapFloat64ToUint16OptionList(m Uint16OptionList, f func(Uint16Option) float64) Float64List { acc := NilFloat64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16OptionList: Uint16Option->complex64 */ func MapComplex64ToUint16OptionList(m Uint16OptionList, f func(Uint16Option) complex64) Complex64List { acc := NilComplex64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16OptionList: Uint16Option->complex128 */ func MapComplex128ToUint16OptionList(m Uint16OptionList, f func(Uint16Option) complex128) Complex128List { acc := NilComplex128List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16OptionList: Uint16Option->Any */ func MapAnyToUint16OptionList(m Uint16OptionList, f func(Uint16Option) Any) AnyList { acc := NilAnyList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16OptionList: Uint16Option->BoolOption */ func MapBoolOptionToUint16OptionList(m Uint16OptionList, f func(Uint16Option) BoolOption) BoolOptionList { acc := NilBoolOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16OptionList: Uint16Option->StringOption */ func MapStringOptionToUint16OptionList(m Uint16OptionList, f func(Uint16Option) StringOption) StringOptionList { acc := NilStringOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16OptionList: Uint16Option->IntOption */ func MapIntOptionToUint16OptionList(m Uint16OptionList, f func(Uint16Option) IntOption) IntOptionList { acc := NilIntOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16OptionList: Uint16Option->Int8Option */ func MapInt8OptionToUint16OptionList(m Uint16OptionList, f func(Uint16Option) Int8Option) Int8OptionList { acc := NilInt8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16OptionList: Uint16Option->Int16Option */ func MapInt16OptionToUint16OptionList(m Uint16OptionList, f func(Uint16Option) Int16Option) Int16OptionList { acc := NilInt16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16OptionList: Uint16Option->Int32Option */ func MapInt32OptionToUint16OptionList(m Uint16OptionList, f func(Uint16Option) Int32Option) Int32OptionList { acc := NilInt32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16OptionList: Uint16Option->Int64Option */ func MapInt64OptionToUint16OptionList(m Uint16OptionList, f func(Uint16Option) Int64Option) Int64OptionList { acc := NilInt64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16OptionList: Uint16Option->UintOption */ func MapUintOptionToUint16OptionList(m Uint16OptionList, f func(Uint16Option) UintOption) UintOptionList { acc := NilUintOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16OptionList: Uint16Option->Uint8Option */ func MapUint8OptionToUint16OptionList(m Uint16OptionList, f func(Uint16Option) Uint8Option) Uint8OptionList { acc := NilUint8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16OptionList: Uint16Option->Uint16Option */ func MapUint16OptionToUint16OptionList(m Uint16OptionList, f func(Uint16Option) Uint16Option) Uint16OptionList { acc := NilUint16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16OptionList: Uint16Option->Uint32Option */ func MapUint32OptionToUint16OptionList(m Uint16OptionList, f func(Uint16Option) Uint32Option) Uint32OptionList { acc := NilUint32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16OptionList: Uint16Option->Uint64Option */ func MapUint64OptionToUint16OptionList(m Uint16OptionList, f func(Uint16Option) Uint64Option) Uint64OptionList { acc := NilUint64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16OptionList: Uint16Option->UintptrOption */ func MapUintptrOptionToUint16OptionList(m Uint16OptionList, f func(Uint16Option) UintptrOption) UintptrOptionList { acc := NilUintptrOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16OptionList: Uint16Option->ByteOption */ func MapByteOptionToUint16OptionList(m Uint16OptionList, f func(Uint16Option) ByteOption) ByteOptionList { acc := NilByteOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16OptionList: Uint16Option->RuneOption */ func MapRuneOptionToUint16OptionList(m Uint16OptionList, f func(Uint16Option) RuneOption) RuneOptionList { acc := NilRuneOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16OptionList: Uint16Option->Float32Option */ func MapFloat32OptionToUint16OptionList(m Uint16OptionList, f func(Uint16Option) Float32Option) Float32OptionList { acc := NilFloat32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16OptionList: Uint16Option->Float64Option */ func MapFloat64OptionToUint16OptionList(m Uint16OptionList, f func(Uint16Option) Float64Option) Float64OptionList { acc := NilFloat64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16OptionList: Uint16Option->Complex64Option */ func MapComplex64OptionToUint16OptionList(m Uint16OptionList, f func(Uint16Option) Complex64Option) Complex64OptionList { acc := NilComplex64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16OptionList: Uint16Option->Complex128Option */ func MapComplex128OptionToUint16OptionList(m Uint16OptionList, f func(Uint16Option) Complex128Option) Complex128OptionList { acc := NilComplex128OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16OptionList: Uint16Option->AnyOption */ func MapAnyOptionToUint16OptionList(m Uint16OptionList, f func(Uint16Option) AnyOption) AnyOptionList { acc := NilAnyOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16OptionList: Uint16Option->[]bool */ func MapBoolArrToUint16OptionList(m Uint16OptionList, f func(Uint16Option) []bool) BoolArrList { acc := NilBoolArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16OptionList: Uint16Option->[]string */ func MapStringArrToUint16OptionList(m Uint16OptionList, f func(Uint16Option) []string) StringArrList { acc := NilStringArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16OptionList: Uint16Option->[]int */ func MapIntArrToUint16OptionList(m Uint16OptionList, f func(Uint16Option) []int) IntArrList { acc := NilIntArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16OptionList: Uint16Option->[]int8 */ func MapInt8ArrToUint16OptionList(m Uint16OptionList, f func(Uint16Option) []int8) Int8ArrList { acc := NilInt8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16OptionList: Uint16Option->[]int16 */ func MapInt16ArrToUint16OptionList(m Uint16OptionList, f func(Uint16Option) []int16) Int16ArrList { acc := NilInt16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16OptionList: Uint16Option->[]int32 */ func MapInt32ArrToUint16OptionList(m Uint16OptionList, f func(Uint16Option) []int32) Int32ArrList { acc := NilInt32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16OptionList: Uint16Option->[]int64 */ func MapInt64ArrToUint16OptionList(m Uint16OptionList, f func(Uint16Option) []int64) Int64ArrList { acc := NilInt64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16OptionList: Uint16Option->[]uint */ func MapUintArrToUint16OptionList(m Uint16OptionList, f func(Uint16Option) []uint) UintArrList { acc := NilUintArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16OptionList: Uint16Option->[]uint8 */ func MapUint8ArrToUint16OptionList(m Uint16OptionList, f func(Uint16Option) []uint8) Uint8ArrList { acc := NilUint8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16OptionList: Uint16Option->[]uint16 */ func MapUint16ArrToUint16OptionList(m Uint16OptionList, f func(Uint16Option) []uint16) Uint16ArrList { acc := NilUint16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16OptionList: Uint16Option->[]uint32 */ func MapUint32ArrToUint16OptionList(m Uint16OptionList, f func(Uint16Option) []uint32) Uint32ArrList { acc := NilUint32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16OptionList: Uint16Option->[]uint64 */ func MapUint64ArrToUint16OptionList(m Uint16OptionList, f func(Uint16Option) []uint64) Uint64ArrList { acc := NilUint64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16OptionList: Uint16Option->[]uintptr */ func MapUintptrArrToUint16OptionList(m Uint16OptionList, f func(Uint16Option) []uintptr) UintptrArrList { acc := NilUintptrArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16OptionList: Uint16Option->[]byte */ func MapByteArrToUint16OptionList(m Uint16OptionList, f func(Uint16Option) []byte) ByteArrList { acc := NilByteArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16OptionList: Uint16Option->[]rune */ func MapRuneArrToUint16OptionList(m Uint16OptionList, f func(Uint16Option) []rune) RuneArrList { acc := NilRuneArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16OptionList: Uint16Option->[]float32 */ func MapFloat32ArrToUint16OptionList(m Uint16OptionList, f func(Uint16Option) []float32) Float32ArrList { acc := NilFloat32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16OptionList: Uint16Option->[]float64 */ func MapFloat64ArrToUint16OptionList(m Uint16OptionList, f func(Uint16Option) []float64) Float64ArrList { acc := NilFloat64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16OptionList: Uint16Option->[]complex64 */ func MapComplex64ArrToUint16OptionList(m Uint16OptionList, f func(Uint16Option) []complex64) Complex64ArrList { acc := NilComplex64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16OptionList: Uint16Option->[]complex128 */ func MapComplex128ArrToUint16OptionList(m Uint16OptionList, f func(Uint16Option) []complex128) Complex128ArrList { acc := NilComplex128ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16OptionList: Uint16Option->[]Any */ func MapAnyArrToUint16OptionList(m Uint16OptionList, f func(Uint16Option) []Any) AnyArrList { acc := NilAnyArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16OptionList: Uint16Option->BoolList */ func MapBoolListToUint16OptionList(m Uint16OptionList, f func(Uint16Option) BoolList) BoolListList { acc := NilBoolListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16OptionList: Uint16Option->StringList */ func MapStringListToUint16OptionList(m Uint16OptionList, f func(Uint16Option) StringList) StringListList { acc := NilStringListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16OptionList: Uint16Option->IntList */ func MapIntListToUint16OptionList(m Uint16OptionList, f func(Uint16Option) IntList) IntListList { acc := NilIntListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16OptionList: Uint16Option->Int8List */ func MapInt8ListToUint16OptionList(m Uint16OptionList, f func(Uint16Option) Int8List) Int8ListList { acc := NilInt8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16OptionList: Uint16Option->Int16List */ func MapInt16ListToUint16OptionList(m Uint16OptionList, f func(Uint16Option) Int16List) Int16ListList { acc := NilInt16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16OptionList: Uint16Option->Int32List */ func MapInt32ListToUint16OptionList(m Uint16OptionList, f func(Uint16Option) Int32List) Int32ListList { acc := NilInt32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16OptionList: Uint16Option->Int64List */ func MapInt64ListToUint16OptionList(m Uint16OptionList, f func(Uint16Option) Int64List) Int64ListList { acc := NilInt64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16OptionList: Uint16Option->UintList */ func MapUintListToUint16OptionList(m Uint16OptionList, f func(Uint16Option) UintList) UintListList { acc := NilUintListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16OptionList: Uint16Option->Uint8List */ func MapUint8ListToUint16OptionList(m Uint16OptionList, f func(Uint16Option) Uint8List) Uint8ListList { acc := NilUint8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16OptionList: Uint16Option->Uint16List */ func MapUint16ListToUint16OptionList(m Uint16OptionList, f func(Uint16Option) Uint16List) Uint16ListList { acc := NilUint16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16OptionList: Uint16Option->Uint32List */ func MapUint32ListToUint16OptionList(m Uint16OptionList, f func(Uint16Option) Uint32List) Uint32ListList { acc := NilUint32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16OptionList: Uint16Option->Uint64List */ func MapUint64ListToUint16OptionList(m Uint16OptionList, f func(Uint16Option) Uint64List) Uint64ListList { acc := NilUint64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16OptionList: Uint16Option->UintptrList */ func MapUintptrListToUint16OptionList(m Uint16OptionList, f func(Uint16Option) UintptrList) UintptrListList { acc := NilUintptrListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16OptionList: Uint16Option->ByteList */ func MapByteListToUint16OptionList(m Uint16OptionList, f func(Uint16Option) ByteList) ByteListList { acc := NilByteListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16OptionList: Uint16Option->RuneList */ func MapRuneListToUint16OptionList(m Uint16OptionList, f func(Uint16Option) RuneList) RuneListList { acc := NilRuneListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16OptionList: Uint16Option->Float32List */ func MapFloat32ListToUint16OptionList(m Uint16OptionList, f func(Uint16Option) Float32List) Float32ListList { acc := NilFloat32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16OptionList: Uint16Option->Float64List */ func MapFloat64ListToUint16OptionList(m Uint16OptionList, f func(Uint16Option) Float64List) Float64ListList { acc := NilFloat64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16OptionList: Uint16Option->Complex64List */ func MapComplex64ListToUint16OptionList(m Uint16OptionList, f func(Uint16Option) Complex64List) Complex64ListList { acc := NilComplex64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16OptionList: Uint16Option->Complex128List */ func MapComplex128ListToUint16OptionList(m Uint16OptionList, f func(Uint16Option) Complex128List) Complex128ListList { acc := NilComplex128ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16OptionList: Uint16Option->AnyList */ func MapAnyListToUint16OptionList(m Uint16OptionList, f func(Uint16Option) AnyList) AnyListList { acc := NilAnyListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32OptionList: Uint32Option->bool */ func MapBoolToUint32OptionList(m Uint32OptionList, f func(Uint32Option) bool) BoolList { acc := NilBoolList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32OptionList: Uint32Option->string */ func MapStringToUint32OptionList(m Uint32OptionList, f func(Uint32Option) string) StringList { acc := NilStringList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32OptionList: Uint32Option->int */ func MapIntToUint32OptionList(m Uint32OptionList, f func(Uint32Option) int) IntList { acc := NilIntList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32OptionList: Uint32Option->int8 */ func MapInt8ToUint32OptionList(m Uint32OptionList, f func(Uint32Option) int8) Int8List { acc := NilInt8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32OptionList: Uint32Option->int16 */ func MapInt16ToUint32OptionList(m Uint32OptionList, f func(Uint32Option) int16) Int16List { acc := NilInt16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32OptionList: Uint32Option->int32 */ func MapInt32ToUint32OptionList(m Uint32OptionList, f func(Uint32Option) int32) Int32List { acc := NilInt32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32OptionList: Uint32Option->int64 */ func MapInt64ToUint32OptionList(m Uint32OptionList, f func(Uint32Option) int64) Int64List { acc := NilInt64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32OptionList: Uint32Option->uint */ func MapUintToUint32OptionList(m Uint32OptionList, f func(Uint32Option) uint) UintList { acc := NilUintList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32OptionList: Uint32Option->uint8 */ func MapUint8ToUint32OptionList(m Uint32OptionList, f func(Uint32Option) uint8) Uint8List { acc := NilUint8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32OptionList: Uint32Option->uint16 */ func MapUint16ToUint32OptionList(m Uint32OptionList, f func(Uint32Option) uint16) Uint16List { acc := NilUint16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32OptionList: Uint32Option->uint32 */ func MapUint32ToUint32OptionList(m Uint32OptionList, f func(Uint32Option) uint32) Uint32List { acc := NilUint32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32OptionList: Uint32Option->uint64 */ func MapUint64ToUint32OptionList(m Uint32OptionList, f func(Uint32Option) uint64) Uint64List { acc := NilUint64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32OptionList: Uint32Option->uintptr */ func MapUintptrToUint32OptionList(m Uint32OptionList, f func(Uint32Option) uintptr) UintptrList { acc := NilUintptrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32OptionList: Uint32Option->byte */ func MapByteToUint32OptionList(m Uint32OptionList, f func(Uint32Option) byte) ByteList { acc := NilByteList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32OptionList: Uint32Option->rune */ func MapRuneToUint32OptionList(m Uint32OptionList, f func(Uint32Option) rune) RuneList { acc := NilRuneList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32OptionList: Uint32Option->float32 */ func MapFloat32ToUint32OptionList(m Uint32OptionList, f func(Uint32Option) float32) Float32List { acc := NilFloat32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32OptionList: Uint32Option->float64 */ func MapFloat64ToUint32OptionList(m Uint32OptionList, f func(Uint32Option) float64) Float64List { acc := NilFloat64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32OptionList: Uint32Option->complex64 */ func MapComplex64ToUint32OptionList(m Uint32OptionList, f func(Uint32Option) complex64) Complex64List { acc := NilComplex64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32OptionList: Uint32Option->complex128 */ func MapComplex128ToUint32OptionList(m Uint32OptionList, f func(Uint32Option) complex128) Complex128List { acc := NilComplex128List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32OptionList: Uint32Option->Any */ func MapAnyToUint32OptionList(m Uint32OptionList, f func(Uint32Option) Any) AnyList { acc := NilAnyList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32OptionList: Uint32Option->BoolOption */ func MapBoolOptionToUint32OptionList(m Uint32OptionList, f func(Uint32Option) BoolOption) BoolOptionList { acc := NilBoolOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32OptionList: Uint32Option->StringOption */ func MapStringOptionToUint32OptionList(m Uint32OptionList, f func(Uint32Option) StringOption) StringOptionList { acc := NilStringOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32OptionList: Uint32Option->IntOption */ func MapIntOptionToUint32OptionList(m Uint32OptionList, f func(Uint32Option) IntOption) IntOptionList { acc := NilIntOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32OptionList: Uint32Option->Int8Option */ func MapInt8OptionToUint32OptionList(m Uint32OptionList, f func(Uint32Option) Int8Option) Int8OptionList { acc := NilInt8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32OptionList: Uint32Option->Int16Option */ func MapInt16OptionToUint32OptionList(m Uint32OptionList, f func(Uint32Option) Int16Option) Int16OptionList { acc := NilInt16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32OptionList: Uint32Option->Int32Option */ func MapInt32OptionToUint32OptionList(m Uint32OptionList, f func(Uint32Option) Int32Option) Int32OptionList { acc := NilInt32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32OptionList: Uint32Option->Int64Option */ func MapInt64OptionToUint32OptionList(m Uint32OptionList, f func(Uint32Option) Int64Option) Int64OptionList { acc := NilInt64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32OptionList: Uint32Option->UintOption */ func MapUintOptionToUint32OptionList(m Uint32OptionList, f func(Uint32Option) UintOption) UintOptionList { acc := NilUintOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32OptionList: Uint32Option->Uint8Option */ func MapUint8OptionToUint32OptionList(m Uint32OptionList, f func(Uint32Option) Uint8Option) Uint8OptionList { acc := NilUint8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32OptionList: Uint32Option->Uint16Option */ func MapUint16OptionToUint32OptionList(m Uint32OptionList, f func(Uint32Option) Uint16Option) Uint16OptionList { acc := NilUint16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32OptionList: Uint32Option->Uint32Option */ func MapUint32OptionToUint32OptionList(m Uint32OptionList, f func(Uint32Option) Uint32Option) Uint32OptionList { acc := NilUint32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32OptionList: Uint32Option->Uint64Option */ func MapUint64OptionToUint32OptionList(m Uint32OptionList, f func(Uint32Option) Uint64Option) Uint64OptionList { acc := NilUint64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32OptionList: Uint32Option->UintptrOption */ func MapUintptrOptionToUint32OptionList(m Uint32OptionList, f func(Uint32Option) UintptrOption) UintptrOptionList { acc := NilUintptrOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32OptionList: Uint32Option->ByteOption */ func MapByteOptionToUint32OptionList(m Uint32OptionList, f func(Uint32Option) ByteOption) ByteOptionList { acc := NilByteOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32OptionList: Uint32Option->RuneOption */ func MapRuneOptionToUint32OptionList(m Uint32OptionList, f func(Uint32Option) RuneOption) RuneOptionList { acc := NilRuneOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32OptionList: Uint32Option->Float32Option */ func MapFloat32OptionToUint32OptionList(m Uint32OptionList, f func(Uint32Option) Float32Option) Float32OptionList { acc := NilFloat32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32OptionList: Uint32Option->Float64Option */ func MapFloat64OptionToUint32OptionList(m Uint32OptionList, f func(Uint32Option) Float64Option) Float64OptionList { acc := NilFloat64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32OptionList: Uint32Option->Complex64Option */ func MapComplex64OptionToUint32OptionList(m Uint32OptionList, f func(Uint32Option) Complex64Option) Complex64OptionList { acc := NilComplex64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32OptionList: Uint32Option->Complex128Option */ func MapComplex128OptionToUint32OptionList(m Uint32OptionList, f func(Uint32Option) Complex128Option) Complex128OptionList { acc := NilComplex128OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32OptionList: Uint32Option->AnyOption */ func MapAnyOptionToUint32OptionList(m Uint32OptionList, f func(Uint32Option) AnyOption) AnyOptionList { acc := NilAnyOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32OptionList: Uint32Option->[]bool */ func MapBoolArrToUint32OptionList(m Uint32OptionList, f func(Uint32Option) []bool) BoolArrList { acc := NilBoolArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32OptionList: Uint32Option->[]string */ func MapStringArrToUint32OptionList(m Uint32OptionList, f func(Uint32Option) []string) StringArrList { acc := NilStringArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32OptionList: Uint32Option->[]int */ func MapIntArrToUint32OptionList(m Uint32OptionList, f func(Uint32Option) []int) IntArrList { acc := NilIntArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32OptionList: Uint32Option->[]int8 */ func MapInt8ArrToUint32OptionList(m Uint32OptionList, f func(Uint32Option) []int8) Int8ArrList { acc := NilInt8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32OptionList: Uint32Option->[]int16 */ func MapInt16ArrToUint32OptionList(m Uint32OptionList, f func(Uint32Option) []int16) Int16ArrList { acc := NilInt16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32OptionList: Uint32Option->[]int32 */ func MapInt32ArrToUint32OptionList(m Uint32OptionList, f func(Uint32Option) []int32) Int32ArrList { acc := NilInt32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32OptionList: Uint32Option->[]int64 */ func MapInt64ArrToUint32OptionList(m Uint32OptionList, f func(Uint32Option) []int64) Int64ArrList { acc := NilInt64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32OptionList: Uint32Option->[]uint */ func MapUintArrToUint32OptionList(m Uint32OptionList, f func(Uint32Option) []uint) UintArrList { acc := NilUintArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32OptionList: Uint32Option->[]uint8 */ func MapUint8ArrToUint32OptionList(m Uint32OptionList, f func(Uint32Option) []uint8) Uint8ArrList { acc := NilUint8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32OptionList: Uint32Option->[]uint16 */ func MapUint16ArrToUint32OptionList(m Uint32OptionList, f func(Uint32Option) []uint16) Uint16ArrList { acc := NilUint16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32OptionList: Uint32Option->[]uint32 */ func MapUint32ArrToUint32OptionList(m Uint32OptionList, f func(Uint32Option) []uint32) Uint32ArrList { acc := NilUint32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32OptionList: Uint32Option->[]uint64 */ func MapUint64ArrToUint32OptionList(m Uint32OptionList, f func(Uint32Option) []uint64) Uint64ArrList { acc := NilUint64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32OptionList: Uint32Option->[]uintptr */ func MapUintptrArrToUint32OptionList(m Uint32OptionList, f func(Uint32Option) []uintptr) UintptrArrList { acc := NilUintptrArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32OptionList: Uint32Option->[]byte */ func MapByteArrToUint32OptionList(m Uint32OptionList, f func(Uint32Option) []byte) ByteArrList { acc := NilByteArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32OptionList: Uint32Option->[]rune */ func MapRuneArrToUint32OptionList(m Uint32OptionList, f func(Uint32Option) []rune) RuneArrList { acc := NilRuneArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32OptionList: Uint32Option->[]float32 */ func MapFloat32ArrToUint32OptionList(m Uint32OptionList, f func(Uint32Option) []float32) Float32ArrList { acc := NilFloat32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32OptionList: Uint32Option->[]float64 */ func MapFloat64ArrToUint32OptionList(m Uint32OptionList, f func(Uint32Option) []float64) Float64ArrList { acc := NilFloat64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32OptionList: Uint32Option->[]complex64 */ func MapComplex64ArrToUint32OptionList(m Uint32OptionList, f func(Uint32Option) []complex64) Complex64ArrList { acc := NilComplex64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32OptionList: Uint32Option->[]complex128 */ func MapComplex128ArrToUint32OptionList(m Uint32OptionList, f func(Uint32Option) []complex128) Complex128ArrList { acc := NilComplex128ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32OptionList: Uint32Option->[]Any */ func MapAnyArrToUint32OptionList(m Uint32OptionList, f func(Uint32Option) []Any) AnyArrList { acc := NilAnyArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32OptionList: Uint32Option->BoolList */ func MapBoolListToUint32OptionList(m Uint32OptionList, f func(Uint32Option) BoolList) BoolListList { acc := NilBoolListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32OptionList: Uint32Option->StringList */ func MapStringListToUint32OptionList(m Uint32OptionList, f func(Uint32Option) StringList) StringListList { acc := NilStringListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32OptionList: Uint32Option->IntList */ func MapIntListToUint32OptionList(m Uint32OptionList, f func(Uint32Option) IntList) IntListList { acc := NilIntListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32OptionList: Uint32Option->Int8List */ func MapInt8ListToUint32OptionList(m Uint32OptionList, f func(Uint32Option) Int8List) Int8ListList { acc := NilInt8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32OptionList: Uint32Option->Int16List */ func MapInt16ListToUint32OptionList(m Uint32OptionList, f func(Uint32Option) Int16List) Int16ListList { acc := NilInt16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32OptionList: Uint32Option->Int32List */ func MapInt32ListToUint32OptionList(m Uint32OptionList, f func(Uint32Option) Int32List) Int32ListList { acc := NilInt32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32OptionList: Uint32Option->Int64List */ func MapInt64ListToUint32OptionList(m Uint32OptionList, f func(Uint32Option) Int64List) Int64ListList { acc := NilInt64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32OptionList: Uint32Option->UintList */ func MapUintListToUint32OptionList(m Uint32OptionList, f func(Uint32Option) UintList) UintListList { acc := NilUintListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32OptionList: Uint32Option->Uint8List */ func MapUint8ListToUint32OptionList(m Uint32OptionList, f func(Uint32Option) Uint8List) Uint8ListList { acc := NilUint8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32OptionList: Uint32Option->Uint16List */ func MapUint16ListToUint32OptionList(m Uint32OptionList, f func(Uint32Option) Uint16List) Uint16ListList { acc := NilUint16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32OptionList: Uint32Option->Uint32List */ func MapUint32ListToUint32OptionList(m Uint32OptionList, f func(Uint32Option) Uint32List) Uint32ListList { acc := NilUint32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32OptionList: Uint32Option->Uint64List */ func MapUint64ListToUint32OptionList(m Uint32OptionList, f func(Uint32Option) Uint64List) Uint64ListList { acc := NilUint64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32OptionList: Uint32Option->UintptrList */ func MapUintptrListToUint32OptionList(m Uint32OptionList, f func(Uint32Option) UintptrList) UintptrListList { acc := NilUintptrListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32OptionList: Uint32Option->ByteList */ func MapByteListToUint32OptionList(m Uint32OptionList, f func(Uint32Option) ByteList) ByteListList { acc := NilByteListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32OptionList: Uint32Option->RuneList */ func MapRuneListToUint32OptionList(m Uint32OptionList, f func(Uint32Option) RuneList) RuneListList { acc := NilRuneListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32OptionList: Uint32Option->Float32List */ func MapFloat32ListToUint32OptionList(m Uint32OptionList, f func(Uint32Option) Float32List) Float32ListList { acc := NilFloat32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32OptionList: Uint32Option->Float64List */ func MapFloat64ListToUint32OptionList(m Uint32OptionList, f func(Uint32Option) Float64List) Float64ListList { acc := NilFloat64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32OptionList: Uint32Option->Complex64List */ func MapComplex64ListToUint32OptionList(m Uint32OptionList, f func(Uint32Option) Complex64List) Complex64ListList { acc := NilComplex64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32OptionList: Uint32Option->Complex128List */ func MapComplex128ListToUint32OptionList(m Uint32OptionList, f func(Uint32Option) Complex128List) Complex128ListList { acc := NilComplex128ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32OptionList: Uint32Option->AnyList */ func MapAnyListToUint32OptionList(m Uint32OptionList, f func(Uint32Option) AnyList) AnyListList { acc := NilAnyListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64OptionList: Uint64Option->bool */ func MapBoolToUint64OptionList(m Uint64OptionList, f func(Uint64Option) bool) BoolList { acc := NilBoolList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64OptionList: Uint64Option->string */ func MapStringToUint64OptionList(m Uint64OptionList, f func(Uint64Option) string) StringList { acc := NilStringList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64OptionList: Uint64Option->int */ func MapIntToUint64OptionList(m Uint64OptionList, f func(Uint64Option) int) IntList { acc := NilIntList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64OptionList: Uint64Option->int8 */ func MapInt8ToUint64OptionList(m Uint64OptionList, f func(Uint64Option) int8) Int8List { acc := NilInt8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64OptionList: Uint64Option->int16 */ func MapInt16ToUint64OptionList(m Uint64OptionList, f func(Uint64Option) int16) Int16List { acc := NilInt16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64OptionList: Uint64Option->int32 */ func MapInt32ToUint64OptionList(m Uint64OptionList, f func(Uint64Option) int32) Int32List { acc := NilInt32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64OptionList: Uint64Option->int64 */ func MapInt64ToUint64OptionList(m Uint64OptionList, f func(Uint64Option) int64) Int64List { acc := NilInt64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64OptionList: Uint64Option->uint */ func MapUintToUint64OptionList(m Uint64OptionList, f func(Uint64Option) uint) UintList { acc := NilUintList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64OptionList: Uint64Option->uint8 */ func MapUint8ToUint64OptionList(m Uint64OptionList, f func(Uint64Option) uint8) Uint8List { acc := NilUint8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64OptionList: Uint64Option->uint16 */ func MapUint16ToUint64OptionList(m Uint64OptionList, f func(Uint64Option) uint16) Uint16List { acc := NilUint16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64OptionList: Uint64Option->uint32 */ func MapUint32ToUint64OptionList(m Uint64OptionList, f func(Uint64Option) uint32) Uint32List { acc := NilUint32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64OptionList: Uint64Option->uint64 */ func MapUint64ToUint64OptionList(m Uint64OptionList, f func(Uint64Option) uint64) Uint64List { acc := NilUint64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64OptionList: Uint64Option->uintptr */ func MapUintptrToUint64OptionList(m Uint64OptionList, f func(Uint64Option) uintptr) UintptrList { acc := NilUintptrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64OptionList: Uint64Option->byte */ func MapByteToUint64OptionList(m Uint64OptionList, f func(Uint64Option) byte) ByteList { acc := NilByteList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64OptionList: Uint64Option->rune */ func MapRuneToUint64OptionList(m Uint64OptionList, f func(Uint64Option) rune) RuneList { acc := NilRuneList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64OptionList: Uint64Option->float32 */ func MapFloat32ToUint64OptionList(m Uint64OptionList, f func(Uint64Option) float32) Float32List { acc := NilFloat32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64OptionList: Uint64Option->float64 */ func MapFloat64ToUint64OptionList(m Uint64OptionList, f func(Uint64Option) float64) Float64List { acc := NilFloat64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64OptionList: Uint64Option->complex64 */ func MapComplex64ToUint64OptionList(m Uint64OptionList, f func(Uint64Option) complex64) Complex64List { acc := NilComplex64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64OptionList: Uint64Option->complex128 */ func MapComplex128ToUint64OptionList(m Uint64OptionList, f func(Uint64Option) complex128) Complex128List { acc := NilComplex128List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64OptionList: Uint64Option->Any */ func MapAnyToUint64OptionList(m Uint64OptionList, f func(Uint64Option) Any) AnyList { acc := NilAnyList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64OptionList: Uint64Option->BoolOption */ func MapBoolOptionToUint64OptionList(m Uint64OptionList, f func(Uint64Option) BoolOption) BoolOptionList { acc := NilBoolOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64OptionList: Uint64Option->StringOption */ func MapStringOptionToUint64OptionList(m Uint64OptionList, f func(Uint64Option) StringOption) StringOptionList { acc := NilStringOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64OptionList: Uint64Option->IntOption */ func MapIntOptionToUint64OptionList(m Uint64OptionList, f func(Uint64Option) IntOption) IntOptionList { acc := NilIntOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64OptionList: Uint64Option->Int8Option */ func MapInt8OptionToUint64OptionList(m Uint64OptionList, f func(Uint64Option) Int8Option) Int8OptionList { acc := NilInt8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64OptionList: Uint64Option->Int16Option */ func MapInt16OptionToUint64OptionList(m Uint64OptionList, f func(Uint64Option) Int16Option) Int16OptionList { acc := NilInt16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64OptionList: Uint64Option->Int32Option */ func MapInt32OptionToUint64OptionList(m Uint64OptionList, f func(Uint64Option) Int32Option) Int32OptionList { acc := NilInt32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64OptionList: Uint64Option->Int64Option */ func MapInt64OptionToUint64OptionList(m Uint64OptionList, f func(Uint64Option) Int64Option) Int64OptionList { acc := NilInt64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64OptionList: Uint64Option->UintOption */ func MapUintOptionToUint64OptionList(m Uint64OptionList, f func(Uint64Option) UintOption) UintOptionList { acc := NilUintOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64OptionList: Uint64Option->Uint8Option */ func MapUint8OptionToUint64OptionList(m Uint64OptionList, f func(Uint64Option) Uint8Option) Uint8OptionList { acc := NilUint8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64OptionList: Uint64Option->Uint16Option */ func MapUint16OptionToUint64OptionList(m Uint64OptionList, f func(Uint64Option) Uint16Option) Uint16OptionList { acc := NilUint16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64OptionList: Uint64Option->Uint32Option */ func MapUint32OptionToUint64OptionList(m Uint64OptionList, f func(Uint64Option) Uint32Option) Uint32OptionList { acc := NilUint32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64OptionList: Uint64Option->Uint64Option */ func MapUint64OptionToUint64OptionList(m Uint64OptionList, f func(Uint64Option) Uint64Option) Uint64OptionList { acc := NilUint64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64OptionList: Uint64Option->UintptrOption */ func MapUintptrOptionToUint64OptionList(m Uint64OptionList, f func(Uint64Option) UintptrOption) UintptrOptionList { acc := NilUintptrOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64OptionList: Uint64Option->ByteOption */ func MapByteOptionToUint64OptionList(m Uint64OptionList, f func(Uint64Option) ByteOption) ByteOptionList { acc := NilByteOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64OptionList: Uint64Option->RuneOption */ func MapRuneOptionToUint64OptionList(m Uint64OptionList, f func(Uint64Option) RuneOption) RuneOptionList { acc := NilRuneOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64OptionList: Uint64Option->Float32Option */ func MapFloat32OptionToUint64OptionList(m Uint64OptionList, f func(Uint64Option) Float32Option) Float32OptionList { acc := NilFloat32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64OptionList: Uint64Option->Float64Option */ func MapFloat64OptionToUint64OptionList(m Uint64OptionList, f func(Uint64Option) Float64Option) Float64OptionList { acc := NilFloat64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64OptionList: Uint64Option->Complex64Option */ func MapComplex64OptionToUint64OptionList(m Uint64OptionList, f func(Uint64Option) Complex64Option) Complex64OptionList { acc := NilComplex64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64OptionList: Uint64Option->Complex128Option */ func MapComplex128OptionToUint64OptionList(m Uint64OptionList, f func(Uint64Option) Complex128Option) Complex128OptionList { acc := NilComplex128OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64OptionList: Uint64Option->AnyOption */ func MapAnyOptionToUint64OptionList(m Uint64OptionList, f func(Uint64Option) AnyOption) AnyOptionList { acc := NilAnyOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64OptionList: Uint64Option->[]bool */ func MapBoolArrToUint64OptionList(m Uint64OptionList, f func(Uint64Option) []bool) BoolArrList { acc := NilBoolArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64OptionList: Uint64Option->[]string */ func MapStringArrToUint64OptionList(m Uint64OptionList, f func(Uint64Option) []string) StringArrList { acc := NilStringArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64OptionList: Uint64Option->[]int */ func MapIntArrToUint64OptionList(m Uint64OptionList, f func(Uint64Option) []int) IntArrList { acc := NilIntArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64OptionList: Uint64Option->[]int8 */ func MapInt8ArrToUint64OptionList(m Uint64OptionList, f func(Uint64Option) []int8) Int8ArrList { acc := NilInt8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64OptionList: Uint64Option->[]int16 */ func MapInt16ArrToUint64OptionList(m Uint64OptionList, f func(Uint64Option) []int16) Int16ArrList { acc := NilInt16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64OptionList: Uint64Option->[]int32 */ func MapInt32ArrToUint64OptionList(m Uint64OptionList, f func(Uint64Option) []int32) Int32ArrList { acc := NilInt32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64OptionList: Uint64Option->[]int64 */ func MapInt64ArrToUint64OptionList(m Uint64OptionList, f func(Uint64Option) []int64) Int64ArrList { acc := NilInt64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64OptionList: Uint64Option->[]uint */ func MapUintArrToUint64OptionList(m Uint64OptionList, f func(Uint64Option) []uint) UintArrList { acc := NilUintArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64OptionList: Uint64Option->[]uint8 */ func MapUint8ArrToUint64OptionList(m Uint64OptionList, f func(Uint64Option) []uint8) Uint8ArrList { acc := NilUint8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64OptionList: Uint64Option->[]uint16 */ func MapUint16ArrToUint64OptionList(m Uint64OptionList, f func(Uint64Option) []uint16) Uint16ArrList { acc := NilUint16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64OptionList: Uint64Option->[]uint32 */ func MapUint32ArrToUint64OptionList(m Uint64OptionList, f func(Uint64Option) []uint32) Uint32ArrList { acc := NilUint32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64OptionList: Uint64Option->[]uint64 */ func MapUint64ArrToUint64OptionList(m Uint64OptionList, f func(Uint64Option) []uint64) Uint64ArrList { acc := NilUint64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64OptionList: Uint64Option->[]uintptr */ func MapUintptrArrToUint64OptionList(m Uint64OptionList, f func(Uint64Option) []uintptr) UintptrArrList { acc := NilUintptrArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64OptionList: Uint64Option->[]byte */ func MapByteArrToUint64OptionList(m Uint64OptionList, f func(Uint64Option) []byte) ByteArrList { acc := NilByteArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64OptionList: Uint64Option->[]rune */ func MapRuneArrToUint64OptionList(m Uint64OptionList, f func(Uint64Option) []rune) RuneArrList { acc := NilRuneArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64OptionList: Uint64Option->[]float32 */ func MapFloat32ArrToUint64OptionList(m Uint64OptionList, f func(Uint64Option) []float32) Float32ArrList { acc := NilFloat32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64OptionList: Uint64Option->[]float64 */ func MapFloat64ArrToUint64OptionList(m Uint64OptionList, f func(Uint64Option) []float64) Float64ArrList { acc := NilFloat64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64OptionList: Uint64Option->[]complex64 */ func MapComplex64ArrToUint64OptionList(m Uint64OptionList, f func(Uint64Option) []complex64) Complex64ArrList { acc := NilComplex64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64OptionList: Uint64Option->[]complex128 */ func MapComplex128ArrToUint64OptionList(m Uint64OptionList, f func(Uint64Option) []complex128) Complex128ArrList { acc := NilComplex128ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64OptionList: Uint64Option->[]Any */ func MapAnyArrToUint64OptionList(m Uint64OptionList, f func(Uint64Option) []Any) AnyArrList { acc := NilAnyArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64OptionList: Uint64Option->BoolList */ func MapBoolListToUint64OptionList(m Uint64OptionList, f func(Uint64Option) BoolList) BoolListList { acc := NilBoolListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64OptionList: Uint64Option->StringList */ func MapStringListToUint64OptionList(m Uint64OptionList, f func(Uint64Option) StringList) StringListList { acc := NilStringListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64OptionList: Uint64Option->IntList */ func MapIntListToUint64OptionList(m Uint64OptionList, f func(Uint64Option) IntList) IntListList { acc := NilIntListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64OptionList: Uint64Option->Int8List */ func MapInt8ListToUint64OptionList(m Uint64OptionList, f func(Uint64Option) Int8List) Int8ListList { acc := NilInt8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64OptionList: Uint64Option->Int16List */ func MapInt16ListToUint64OptionList(m Uint64OptionList, f func(Uint64Option) Int16List) Int16ListList { acc := NilInt16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64OptionList: Uint64Option->Int32List */ func MapInt32ListToUint64OptionList(m Uint64OptionList, f func(Uint64Option) Int32List) Int32ListList { acc := NilInt32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64OptionList: Uint64Option->Int64List */ func MapInt64ListToUint64OptionList(m Uint64OptionList, f func(Uint64Option) Int64List) Int64ListList { acc := NilInt64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64OptionList: Uint64Option->UintList */ func MapUintListToUint64OptionList(m Uint64OptionList, f func(Uint64Option) UintList) UintListList { acc := NilUintListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64OptionList: Uint64Option->Uint8List */ func MapUint8ListToUint64OptionList(m Uint64OptionList, f func(Uint64Option) Uint8List) Uint8ListList { acc := NilUint8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64OptionList: Uint64Option->Uint16List */ func MapUint16ListToUint64OptionList(m Uint64OptionList, f func(Uint64Option) Uint16List) Uint16ListList { acc := NilUint16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64OptionList: Uint64Option->Uint32List */ func MapUint32ListToUint64OptionList(m Uint64OptionList, f func(Uint64Option) Uint32List) Uint32ListList { acc := NilUint32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64OptionList: Uint64Option->Uint64List */ func MapUint64ListToUint64OptionList(m Uint64OptionList, f func(Uint64Option) Uint64List) Uint64ListList { acc := NilUint64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64OptionList: Uint64Option->UintptrList */ func MapUintptrListToUint64OptionList(m Uint64OptionList, f func(Uint64Option) UintptrList) UintptrListList { acc := NilUintptrListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64OptionList: Uint64Option->ByteList */ func MapByteListToUint64OptionList(m Uint64OptionList, f func(Uint64Option) ByteList) ByteListList { acc := NilByteListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64OptionList: Uint64Option->RuneList */ func MapRuneListToUint64OptionList(m Uint64OptionList, f func(Uint64Option) RuneList) RuneListList { acc := NilRuneListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64OptionList: Uint64Option->Float32List */ func MapFloat32ListToUint64OptionList(m Uint64OptionList, f func(Uint64Option) Float32List) Float32ListList { acc := NilFloat32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64OptionList: Uint64Option->Float64List */ func MapFloat64ListToUint64OptionList(m Uint64OptionList, f func(Uint64Option) Float64List) Float64ListList { acc := NilFloat64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64OptionList: Uint64Option->Complex64List */ func MapComplex64ListToUint64OptionList(m Uint64OptionList, f func(Uint64Option) Complex64List) Complex64ListList { acc := NilComplex64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64OptionList: Uint64Option->Complex128List */ func MapComplex128ListToUint64OptionList(m Uint64OptionList, f func(Uint64Option) Complex128List) Complex128ListList { acc := NilComplex128ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64OptionList: Uint64Option->AnyList */ func MapAnyListToUint64OptionList(m Uint64OptionList, f func(Uint64Option) AnyList) AnyListList { acc := NilAnyListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrOptionList: UintptrOption->bool */ func MapBoolToUintptrOptionList(m UintptrOptionList, f func(UintptrOption) bool) BoolList { acc := NilBoolList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrOptionList: UintptrOption->string */ func MapStringToUintptrOptionList(m UintptrOptionList, f func(UintptrOption) string) StringList { acc := NilStringList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrOptionList: UintptrOption->int */ func MapIntToUintptrOptionList(m UintptrOptionList, f func(UintptrOption) int) IntList { acc := NilIntList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrOptionList: UintptrOption->int8 */ func MapInt8ToUintptrOptionList(m UintptrOptionList, f func(UintptrOption) int8) Int8List { acc := NilInt8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrOptionList: UintptrOption->int16 */ func MapInt16ToUintptrOptionList(m UintptrOptionList, f func(UintptrOption) int16) Int16List { acc := NilInt16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrOptionList: UintptrOption->int32 */ func MapInt32ToUintptrOptionList(m UintptrOptionList, f func(UintptrOption) int32) Int32List { acc := NilInt32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrOptionList: UintptrOption->int64 */ func MapInt64ToUintptrOptionList(m UintptrOptionList, f func(UintptrOption) int64) Int64List { acc := NilInt64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrOptionList: UintptrOption->uint */ func MapUintToUintptrOptionList(m UintptrOptionList, f func(UintptrOption) uint) UintList { acc := NilUintList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrOptionList: UintptrOption->uint8 */ func MapUint8ToUintptrOptionList(m UintptrOptionList, f func(UintptrOption) uint8) Uint8List { acc := NilUint8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrOptionList: UintptrOption->uint16 */ func MapUint16ToUintptrOptionList(m UintptrOptionList, f func(UintptrOption) uint16) Uint16List { acc := NilUint16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrOptionList: UintptrOption->uint32 */ func MapUint32ToUintptrOptionList(m UintptrOptionList, f func(UintptrOption) uint32) Uint32List { acc := NilUint32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrOptionList: UintptrOption->uint64 */ func MapUint64ToUintptrOptionList(m UintptrOptionList, f func(UintptrOption) uint64) Uint64List { acc := NilUint64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrOptionList: UintptrOption->uintptr */ func MapUintptrToUintptrOptionList(m UintptrOptionList, f func(UintptrOption) uintptr) UintptrList { acc := NilUintptrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrOptionList: UintptrOption->byte */ func MapByteToUintptrOptionList(m UintptrOptionList, f func(UintptrOption) byte) ByteList { acc := NilByteList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrOptionList: UintptrOption->rune */ func MapRuneToUintptrOptionList(m UintptrOptionList, f func(UintptrOption) rune) RuneList { acc := NilRuneList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrOptionList: UintptrOption->float32 */ func MapFloat32ToUintptrOptionList(m UintptrOptionList, f func(UintptrOption) float32) Float32List { acc := NilFloat32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrOptionList: UintptrOption->float64 */ func MapFloat64ToUintptrOptionList(m UintptrOptionList, f func(UintptrOption) float64) Float64List { acc := NilFloat64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrOptionList: UintptrOption->complex64 */ func MapComplex64ToUintptrOptionList(m UintptrOptionList, f func(UintptrOption) complex64) Complex64List { acc := NilComplex64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrOptionList: UintptrOption->complex128 */ func MapComplex128ToUintptrOptionList(m UintptrOptionList, f func(UintptrOption) complex128) Complex128List { acc := NilComplex128List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrOptionList: UintptrOption->Any */ func MapAnyToUintptrOptionList(m UintptrOptionList, f func(UintptrOption) Any) AnyList { acc := NilAnyList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrOptionList: UintptrOption->BoolOption */ func MapBoolOptionToUintptrOptionList(m UintptrOptionList, f func(UintptrOption) BoolOption) BoolOptionList { acc := NilBoolOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrOptionList: UintptrOption->StringOption */ func MapStringOptionToUintptrOptionList(m UintptrOptionList, f func(UintptrOption) StringOption) StringOptionList { acc := NilStringOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrOptionList: UintptrOption->IntOption */ func MapIntOptionToUintptrOptionList(m UintptrOptionList, f func(UintptrOption) IntOption) IntOptionList { acc := NilIntOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrOptionList: UintptrOption->Int8Option */ func MapInt8OptionToUintptrOptionList(m UintptrOptionList, f func(UintptrOption) Int8Option) Int8OptionList { acc := NilInt8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrOptionList: UintptrOption->Int16Option */ func MapInt16OptionToUintptrOptionList(m UintptrOptionList, f func(UintptrOption) Int16Option) Int16OptionList { acc := NilInt16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrOptionList: UintptrOption->Int32Option */ func MapInt32OptionToUintptrOptionList(m UintptrOptionList, f func(UintptrOption) Int32Option) Int32OptionList { acc := NilInt32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrOptionList: UintptrOption->Int64Option */ func MapInt64OptionToUintptrOptionList(m UintptrOptionList, f func(UintptrOption) Int64Option) Int64OptionList { acc := NilInt64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrOptionList: UintptrOption->UintOption */ func MapUintOptionToUintptrOptionList(m UintptrOptionList, f func(UintptrOption) UintOption) UintOptionList { acc := NilUintOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrOptionList: UintptrOption->Uint8Option */ func MapUint8OptionToUintptrOptionList(m UintptrOptionList, f func(UintptrOption) Uint8Option) Uint8OptionList { acc := NilUint8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrOptionList: UintptrOption->Uint16Option */ func MapUint16OptionToUintptrOptionList(m UintptrOptionList, f func(UintptrOption) Uint16Option) Uint16OptionList { acc := NilUint16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrOptionList: UintptrOption->Uint32Option */ func MapUint32OptionToUintptrOptionList(m UintptrOptionList, f func(UintptrOption) Uint32Option) Uint32OptionList { acc := NilUint32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrOptionList: UintptrOption->Uint64Option */ func MapUint64OptionToUintptrOptionList(m UintptrOptionList, f func(UintptrOption) Uint64Option) Uint64OptionList { acc := NilUint64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrOptionList: UintptrOption->UintptrOption */ func MapUintptrOptionToUintptrOptionList(m UintptrOptionList, f func(UintptrOption) UintptrOption) UintptrOptionList { acc := NilUintptrOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrOptionList: UintptrOption->ByteOption */ func MapByteOptionToUintptrOptionList(m UintptrOptionList, f func(UintptrOption) ByteOption) ByteOptionList { acc := NilByteOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrOptionList: UintptrOption->RuneOption */ func MapRuneOptionToUintptrOptionList(m UintptrOptionList, f func(UintptrOption) RuneOption) RuneOptionList { acc := NilRuneOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrOptionList: UintptrOption->Float32Option */ func MapFloat32OptionToUintptrOptionList(m UintptrOptionList, f func(UintptrOption) Float32Option) Float32OptionList { acc := NilFloat32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrOptionList: UintptrOption->Float64Option */ func MapFloat64OptionToUintptrOptionList(m UintptrOptionList, f func(UintptrOption) Float64Option) Float64OptionList { acc := NilFloat64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrOptionList: UintptrOption->Complex64Option */ func MapComplex64OptionToUintptrOptionList(m UintptrOptionList, f func(UintptrOption) Complex64Option) Complex64OptionList { acc := NilComplex64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrOptionList: UintptrOption->Complex128Option */ func MapComplex128OptionToUintptrOptionList(m UintptrOptionList, f func(UintptrOption) Complex128Option) Complex128OptionList { acc := NilComplex128OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrOptionList: UintptrOption->AnyOption */ func MapAnyOptionToUintptrOptionList(m UintptrOptionList, f func(UintptrOption) AnyOption) AnyOptionList { acc := NilAnyOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrOptionList: UintptrOption->[]bool */ func MapBoolArrToUintptrOptionList(m UintptrOptionList, f func(UintptrOption) []bool) BoolArrList { acc := NilBoolArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrOptionList: UintptrOption->[]string */ func MapStringArrToUintptrOptionList(m UintptrOptionList, f func(UintptrOption) []string) StringArrList { acc := NilStringArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrOptionList: UintptrOption->[]int */ func MapIntArrToUintptrOptionList(m UintptrOptionList, f func(UintptrOption) []int) IntArrList { acc := NilIntArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrOptionList: UintptrOption->[]int8 */ func MapInt8ArrToUintptrOptionList(m UintptrOptionList, f func(UintptrOption) []int8) Int8ArrList { acc := NilInt8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrOptionList: UintptrOption->[]int16 */ func MapInt16ArrToUintptrOptionList(m UintptrOptionList, f func(UintptrOption) []int16) Int16ArrList { acc := NilInt16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrOptionList: UintptrOption->[]int32 */ func MapInt32ArrToUintptrOptionList(m UintptrOptionList, f func(UintptrOption) []int32) Int32ArrList { acc := NilInt32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrOptionList: UintptrOption->[]int64 */ func MapInt64ArrToUintptrOptionList(m UintptrOptionList, f func(UintptrOption) []int64) Int64ArrList { acc := NilInt64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrOptionList: UintptrOption->[]uint */ func MapUintArrToUintptrOptionList(m UintptrOptionList, f func(UintptrOption) []uint) UintArrList { acc := NilUintArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrOptionList: UintptrOption->[]uint8 */ func MapUint8ArrToUintptrOptionList(m UintptrOptionList, f func(UintptrOption) []uint8) Uint8ArrList { acc := NilUint8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrOptionList: UintptrOption->[]uint16 */ func MapUint16ArrToUintptrOptionList(m UintptrOptionList, f func(UintptrOption) []uint16) Uint16ArrList { acc := NilUint16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrOptionList: UintptrOption->[]uint32 */ func MapUint32ArrToUintptrOptionList(m UintptrOptionList, f func(UintptrOption) []uint32) Uint32ArrList { acc := NilUint32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrOptionList: UintptrOption->[]uint64 */ func MapUint64ArrToUintptrOptionList(m UintptrOptionList, f func(UintptrOption) []uint64) Uint64ArrList { acc := NilUint64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrOptionList: UintptrOption->[]uintptr */ func MapUintptrArrToUintptrOptionList(m UintptrOptionList, f func(UintptrOption) []uintptr) UintptrArrList { acc := NilUintptrArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrOptionList: UintptrOption->[]byte */ func MapByteArrToUintptrOptionList(m UintptrOptionList, f func(UintptrOption) []byte) ByteArrList { acc := NilByteArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrOptionList: UintptrOption->[]rune */ func MapRuneArrToUintptrOptionList(m UintptrOptionList, f func(UintptrOption) []rune) RuneArrList { acc := NilRuneArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrOptionList: UintptrOption->[]float32 */ func MapFloat32ArrToUintptrOptionList(m UintptrOptionList, f func(UintptrOption) []float32) Float32ArrList { acc := NilFloat32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrOptionList: UintptrOption->[]float64 */ func MapFloat64ArrToUintptrOptionList(m UintptrOptionList, f func(UintptrOption) []float64) Float64ArrList { acc := NilFloat64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrOptionList: UintptrOption->[]complex64 */ func MapComplex64ArrToUintptrOptionList(m UintptrOptionList, f func(UintptrOption) []complex64) Complex64ArrList { acc := NilComplex64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrOptionList: UintptrOption->[]complex128 */ func MapComplex128ArrToUintptrOptionList(m UintptrOptionList, f func(UintptrOption) []complex128) Complex128ArrList { acc := NilComplex128ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrOptionList: UintptrOption->[]Any */ func MapAnyArrToUintptrOptionList(m UintptrOptionList, f func(UintptrOption) []Any) AnyArrList { acc := NilAnyArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrOptionList: UintptrOption->BoolList */ func MapBoolListToUintptrOptionList(m UintptrOptionList, f func(UintptrOption) BoolList) BoolListList { acc := NilBoolListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrOptionList: UintptrOption->StringList */ func MapStringListToUintptrOptionList(m UintptrOptionList, f func(UintptrOption) StringList) StringListList { acc := NilStringListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrOptionList: UintptrOption->IntList */ func MapIntListToUintptrOptionList(m UintptrOptionList, f func(UintptrOption) IntList) IntListList { acc := NilIntListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrOptionList: UintptrOption->Int8List */ func MapInt8ListToUintptrOptionList(m UintptrOptionList, f func(UintptrOption) Int8List) Int8ListList { acc := NilInt8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrOptionList: UintptrOption->Int16List */ func MapInt16ListToUintptrOptionList(m UintptrOptionList, f func(UintptrOption) Int16List) Int16ListList { acc := NilInt16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrOptionList: UintptrOption->Int32List */ func MapInt32ListToUintptrOptionList(m UintptrOptionList, f func(UintptrOption) Int32List) Int32ListList { acc := NilInt32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrOptionList: UintptrOption->Int64List */ func MapInt64ListToUintptrOptionList(m UintptrOptionList, f func(UintptrOption) Int64List) Int64ListList { acc := NilInt64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrOptionList: UintptrOption->UintList */ func MapUintListToUintptrOptionList(m UintptrOptionList, f func(UintptrOption) UintList) UintListList { acc := NilUintListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrOptionList: UintptrOption->Uint8List */ func MapUint8ListToUintptrOptionList(m UintptrOptionList, f func(UintptrOption) Uint8List) Uint8ListList { acc := NilUint8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrOptionList: UintptrOption->Uint16List */ func MapUint16ListToUintptrOptionList(m UintptrOptionList, f func(UintptrOption) Uint16List) Uint16ListList { acc := NilUint16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrOptionList: UintptrOption->Uint32List */ func MapUint32ListToUintptrOptionList(m UintptrOptionList, f func(UintptrOption) Uint32List) Uint32ListList { acc := NilUint32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrOptionList: UintptrOption->Uint64List */ func MapUint64ListToUintptrOptionList(m UintptrOptionList, f func(UintptrOption) Uint64List) Uint64ListList { acc := NilUint64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrOptionList: UintptrOption->UintptrList */ func MapUintptrListToUintptrOptionList(m UintptrOptionList, f func(UintptrOption) UintptrList) UintptrListList { acc := NilUintptrListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrOptionList: UintptrOption->ByteList */ func MapByteListToUintptrOptionList(m UintptrOptionList, f func(UintptrOption) ByteList) ByteListList { acc := NilByteListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrOptionList: UintptrOption->RuneList */ func MapRuneListToUintptrOptionList(m UintptrOptionList, f func(UintptrOption) RuneList) RuneListList { acc := NilRuneListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrOptionList: UintptrOption->Float32List */ func MapFloat32ListToUintptrOptionList(m UintptrOptionList, f func(UintptrOption) Float32List) Float32ListList { acc := NilFloat32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrOptionList: UintptrOption->Float64List */ func MapFloat64ListToUintptrOptionList(m UintptrOptionList, f func(UintptrOption) Float64List) Float64ListList { acc := NilFloat64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrOptionList: UintptrOption->Complex64List */ func MapComplex64ListToUintptrOptionList(m UintptrOptionList, f func(UintptrOption) Complex64List) Complex64ListList { acc := NilComplex64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrOptionList: UintptrOption->Complex128List */ func MapComplex128ListToUintptrOptionList(m UintptrOptionList, f func(UintptrOption) Complex128List) Complex128ListList { acc := NilComplex128ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrOptionList: UintptrOption->AnyList */ func MapAnyListToUintptrOptionList(m UintptrOptionList, f func(UintptrOption) AnyList) AnyListList { acc := NilAnyListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteOptionList: ByteOption->bool */ func MapBoolToByteOptionList(m ByteOptionList, f func(ByteOption) bool) BoolList { acc := NilBoolList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteOptionList: ByteOption->string */ func MapStringToByteOptionList(m ByteOptionList, f func(ByteOption) string) StringList { acc := NilStringList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteOptionList: ByteOption->int */ func MapIntToByteOptionList(m ByteOptionList, f func(ByteOption) int) IntList { acc := NilIntList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteOptionList: ByteOption->int8 */ func MapInt8ToByteOptionList(m ByteOptionList, f func(ByteOption) int8) Int8List { acc := NilInt8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteOptionList: ByteOption->int16 */ func MapInt16ToByteOptionList(m ByteOptionList, f func(ByteOption) int16) Int16List { acc := NilInt16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteOptionList: ByteOption->int32 */ func MapInt32ToByteOptionList(m ByteOptionList, f func(ByteOption) int32) Int32List { acc := NilInt32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteOptionList: ByteOption->int64 */ func MapInt64ToByteOptionList(m ByteOptionList, f func(ByteOption) int64) Int64List { acc := NilInt64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteOptionList: ByteOption->uint */ func MapUintToByteOptionList(m ByteOptionList, f func(ByteOption) uint) UintList { acc := NilUintList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteOptionList: ByteOption->uint8 */ func MapUint8ToByteOptionList(m ByteOptionList, f func(ByteOption) uint8) Uint8List { acc := NilUint8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteOptionList: ByteOption->uint16 */ func MapUint16ToByteOptionList(m ByteOptionList, f func(ByteOption) uint16) Uint16List { acc := NilUint16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteOptionList: ByteOption->uint32 */ func MapUint32ToByteOptionList(m ByteOptionList, f func(ByteOption) uint32) Uint32List { acc := NilUint32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteOptionList: ByteOption->uint64 */ func MapUint64ToByteOptionList(m ByteOptionList, f func(ByteOption) uint64) Uint64List { acc := NilUint64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteOptionList: ByteOption->uintptr */ func MapUintptrToByteOptionList(m ByteOptionList, f func(ByteOption) uintptr) UintptrList { acc := NilUintptrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteOptionList: ByteOption->byte */ func MapByteToByteOptionList(m ByteOptionList, f func(ByteOption) byte) ByteList { acc := NilByteList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteOptionList: ByteOption->rune */ func MapRuneToByteOptionList(m ByteOptionList, f func(ByteOption) rune) RuneList { acc := NilRuneList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteOptionList: ByteOption->float32 */ func MapFloat32ToByteOptionList(m ByteOptionList, f func(ByteOption) float32) Float32List { acc := NilFloat32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteOptionList: ByteOption->float64 */ func MapFloat64ToByteOptionList(m ByteOptionList, f func(ByteOption) float64) Float64List { acc := NilFloat64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteOptionList: ByteOption->complex64 */ func MapComplex64ToByteOptionList(m ByteOptionList, f func(ByteOption) complex64) Complex64List { acc := NilComplex64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteOptionList: ByteOption->complex128 */ func MapComplex128ToByteOptionList(m ByteOptionList, f func(ByteOption) complex128) Complex128List { acc := NilComplex128List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteOptionList: ByteOption->Any */ func MapAnyToByteOptionList(m ByteOptionList, f func(ByteOption) Any) AnyList { acc := NilAnyList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteOptionList: ByteOption->BoolOption */ func MapBoolOptionToByteOptionList(m ByteOptionList, f func(ByteOption) BoolOption) BoolOptionList { acc := NilBoolOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteOptionList: ByteOption->StringOption */ func MapStringOptionToByteOptionList(m ByteOptionList, f func(ByteOption) StringOption) StringOptionList { acc := NilStringOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteOptionList: ByteOption->IntOption */ func MapIntOptionToByteOptionList(m ByteOptionList, f func(ByteOption) IntOption) IntOptionList { acc := NilIntOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteOptionList: ByteOption->Int8Option */ func MapInt8OptionToByteOptionList(m ByteOptionList, f func(ByteOption) Int8Option) Int8OptionList { acc := NilInt8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteOptionList: ByteOption->Int16Option */ func MapInt16OptionToByteOptionList(m ByteOptionList, f func(ByteOption) Int16Option) Int16OptionList { acc := NilInt16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteOptionList: ByteOption->Int32Option */ func MapInt32OptionToByteOptionList(m ByteOptionList, f func(ByteOption) Int32Option) Int32OptionList { acc := NilInt32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteOptionList: ByteOption->Int64Option */ func MapInt64OptionToByteOptionList(m ByteOptionList, f func(ByteOption) Int64Option) Int64OptionList { acc := NilInt64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteOptionList: ByteOption->UintOption */ func MapUintOptionToByteOptionList(m ByteOptionList, f func(ByteOption) UintOption) UintOptionList { acc := NilUintOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteOptionList: ByteOption->Uint8Option */ func MapUint8OptionToByteOptionList(m ByteOptionList, f func(ByteOption) Uint8Option) Uint8OptionList { acc := NilUint8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteOptionList: ByteOption->Uint16Option */ func MapUint16OptionToByteOptionList(m ByteOptionList, f func(ByteOption) Uint16Option) Uint16OptionList { acc := NilUint16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteOptionList: ByteOption->Uint32Option */ func MapUint32OptionToByteOptionList(m ByteOptionList, f func(ByteOption) Uint32Option) Uint32OptionList { acc := NilUint32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteOptionList: ByteOption->Uint64Option */ func MapUint64OptionToByteOptionList(m ByteOptionList, f func(ByteOption) Uint64Option) Uint64OptionList { acc := NilUint64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteOptionList: ByteOption->UintptrOption */ func MapUintptrOptionToByteOptionList(m ByteOptionList, f func(ByteOption) UintptrOption) UintptrOptionList { acc := NilUintptrOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteOptionList: ByteOption->ByteOption */ func MapByteOptionToByteOptionList(m ByteOptionList, f func(ByteOption) ByteOption) ByteOptionList { acc := NilByteOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteOptionList: ByteOption->RuneOption */ func MapRuneOptionToByteOptionList(m ByteOptionList, f func(ByteOption) RuneOption) RuneOptionList { acc := NilRuneOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteOptionList: ByteOption->Float32Option */ func MapFloat32OptionToByteOptionList(m ByteOptionList, f func(ByteOption) Float32Option) Float32OptionList { acc := NilFloat32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteOptionList: ByteOption->Float64Option */ func MapFloat64OptionToByteOptionList(m ByteOptionList, f func(ByteOption) Float64Option) Float64OptionList { acc := NilFloat64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteOptionList: ByteOption->Complex64Option */ func MapComplex64OptionToByteOptionList(m ByteOptionList, f func(ByteOption) Complex64Option) Complex64OptionList { acc := NilComplex64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteOptionList: ByteOption->Complex128Option */ func MapComplex128OptionToByteOptionList(m ByteOptionList, f func(ByteOption) Complex128Option) Complex128OptionList { acc := NilComplex128OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteOptionList: ByteOption->AnyOption */ func MapAnyOptionToByteOptionList(m ByteOptionList, f func(ByteOption) AnyOption) AnyOptionList { acc := NilAnyOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteOptionList: ByteOption->[]bool */ func MapBoolArrToByteOptionList(m ByteOptionList, f func(ByteOption) []bool) BoolArrList { acc := NilBoolArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteOptionList: ByteOption->[]string */ func MapStringArrToByteOptionList(m ByteOptionList, f func(ByteOption) []string) StringArrList { acc := NilStringArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteOptionList: ByteOption->[]int */ func MapIntArrToByteOptionList(m ByteOptionList, f func(ByteOption) []int) IntArrList { acc := NilIntArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteOptionList: ByteOption->[]int8 */ func MapInt8ArrToByteOptionList(m ByteOptionList, f func(ByteOption) []int8) Int8ArrList { acc := NilInt8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteOptionList: ByteOption->[]int16 */ func MapInt16ArrToByteOptionList(m ByteOptionList, f func(ByteOption) []int16) Int16ArrList { acc := NilInt16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteOptionList: ByteOption->[]int32 */ func MapInt32ArrToByteOptionList(m ByteOptionList, f func(ByteOption) []int32) Int32ArrList { acc := NilInt32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteOptionList: ByteOption->[]int64 */ func MapInt64ArrToByteOptionList(m ByteOptionList, f func(ByteOption) []int64) Int64ArrList { acc := NilInt64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteOptionList: ByteOption->[]uint */ func MapUintArrToByteOptionList(m ByteOptionList, f func(ByteOption) []uint) UintArrList { acc := NilUintArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteOptionList: ByteOption->[]uint8 */ func MapUint8ArrToByteOptionList(m ByteOptionList, f func(ByteOption) []uint8) Uint8ArrList { acc := NilUint8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteOptionList: ByteOption->[]uint16 */ func MapUint16ArrToByteOptionList(m ByteOptionList, f func(ByteOption) []uint16) Uint16ArrList { acc := NilUint16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteOptionList: ByteOption->[]uint32 */ func MapUint32ArrToByteOptionList(m ByteOptionList, f func(ByteOption) []uint32) Uint32ArrList { acc := NilUint32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteOptionList: ByteOption->[]uint64 */ func MapUint64ArrToByteOptionList(m ByteOptionList, f func(ByteOption) []uint64) Uint64ArrList { acc := NilUint64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteOptionList: ByteOption->[]uintptr */ func MapUintptrArrToByteOptionList(m ByteOptionList, f func(ByteOption) []uintptr) UintptrArrList { acc := NilUintptrArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteOptionList: ByteOption->[]byte */ func MapByteArrToByteOptionList(m ByteOptionList, f func(ByteOption) []byte) ByteArrList { acc := NilByteArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteOptionList: ByteOption->[]rune */ func MapRuneArrToByteOptionList(m ByteOptionList, f func(ByteOption) []rune) RuneArrList { acc := NilRuneArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteOptionList: ByteOption->[]float32 */ func MapFloat32ArrToByteOptionList(m ByteOptionList, f func(ByteOption) []float32) Float32ArrList { acc := NilFloat32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteOptionList: ByteOption->[]float64 */ func MapFloat64ArrToByteOptionList(m ByteOptionList, f func(ByteOption) []float64) Float64ArrList { acc := NilFloat64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteOptionList: ByteOption->[]complex64 */ func MapComplex64ArrToByteOptionList(m ByteOptionList, f func(ByteOption) []complex64) Complex64ArrList { acc := NilComplex64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteOptionList: ByteOption->[]complex128 */ func MapComplex128ArrToByteOptionList(m ByteOptionList, f func(ByteOption) []complex128) Complex128ArrList { acc := NilComplex128ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteOptionList: ByteOption->[]Any */ func MapAnyArrToByteOptionList(m ByteOptionList, f func(ByteOption) []Any) AnyArrList { acc := NilAnyArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteOptionList: ByteOption->BoolList */ func MapBoolListToByteOptionList(m ByteOptionList, f func(ByteOption) BoolList) BoolListList { acc := NilBoolListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteOptionList: ByteOption->StringList */ func MapStringListToByteOptionList(m ByteOptionList, f func(ByteOption) StringList) StringListList { acc := NilStringListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteOptionList: ByteOption->IntList */ func MapIntListToByteOptionList(m ByteOptionList, f func(ByteOption) IntList) IntListList { acc := NilIntListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteOptionList: ByteOption->Int8List */ func MapInt8ListToByteOptionList(m ByteOptionList, f func(ByteOption) Int8List) Int8ListList { acc := NilInt8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteOptionList: ByteOption->Int16List */ func MapInt16ListToByteOptionList(m ByteOptionList, f func(ByteOption) Int16List) Int16ListList { acc := NilInt16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteOptionList: ByteOption->Int32List */ func MapInt32ListToByteOptionList(m ByteOptionList, f func(ByteOption) Int32List) Int32ListList { acc := NilInt32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteOptionList: ByteOption->Int64List */ func MapInt64ListToByteOptionList(m ByteOptionList, f func(ByteOption) Int64List) Int64ListList { acc := NilInt64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteOptionList: ByteOption->UintList */ func MapUintListToByteOptionList(m ByteOptionList, f func(ByteOption) UintList) UintListList { acc := NilUintListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteOptionList: ByteOption->Uint8List */ func MapUint8ListToByteOptionList(m ByteOptionList, f func(ByteOption) Uint8List) Uint8ListList { acc := NilUint8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteOptionList: ByteOption->Uint16List */ func MapUint16ListToByteOptionList(m ByteOptionList, f func(ByteOption) Uint16List) Uint16ListList { acc := NilUint16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteOptionList: ByteOption->Uint32List */ func MapUint32ListToByteOptionList(m ByteOptionList, f func(ByteOption) Uint32List) Uint32ListList { acc := NilUint32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteOptionList: ByteOption->Uint64List */ func MapUint64ListToByteOptionList(m ByteOptionList, f func(ByteOption) Uint64List) Uint64ListList { acc := NilUint64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteOptionList: ByteOption->UintptrList */ func MapUintptrListToByteOptionList(m ByteOptionList, f func(ByteOption) UintptrList) UintptrListList { acc := NilUintptrListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteOptionList: ByteOption->ByteList */ func MapByteListToByteOptionList(m ByteOptionList, f func(ByteOption) ByteList) ByteListList { acc := NilByteListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteOptionList: ByteOption->RuneList */ func MapRuneListToByteOptionList(m ByteOptionList, f func(ByteOption) RuneList) RuneListList { acc := NilRuneListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteOptionList: ByteOption->Float32List */ func MapFloat32ListToByteOptionList(m ByteOptionList, f func(ByteOption) Float32List) Float32ListList { acc := NilFloat32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteOptionList: ByteOption->Float64List */ func MapFloat64ListToByteOptionList(m ByteOptionList, f func(ByteOption) Float64List) Float64ListList { acc := NilFloat64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteOptionList: ByteOption->Complex64List */ func MapComplex64ListToByteOptionList(m ByteOptionList, f func(ByteOption) Complex64List) Complex64ListList { acc := NilComplex64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteOptionList: ByteOption->Complex128List */ func MapComplex128ListToByteOptionList(m ByteOptionList, f func(ByteOption) Complex128List) Complex128ListList { acc := NilComplex128ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteOptionList: ByteOption->AnyList */ func MapAnyListToByteOptionList(m ByteOptionList, f func(ByteOption) AnyList) AnyListList { acc := NilAnyListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneOptionList: RuneOption->bool */ func MapBoolToRuneOptionList(m RuneOptionList, f func(RuneOption) bool) BoolList { acc := NilBoolList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneOptionList: RuneOption->string */ func MapStringToRuneOptionList(m RuneOptionList, f func(RuneOption) string) StringList { acc := NilStringList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneOptionList: RuneOption->int */ func MapIntToRuneOptionList(m RuneOptionList, f func(RuneOption) int) IntList { acc := NilIntList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneOptionList: RuneOption->int8 */ func MapInt8ToRuneOptionList(m RuneOptionList, f func(RuneOption) int8) Int8List { acc := NilInt8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneOptionList: RuneOption->int16 */ func MapInt16ToRuneOptionList(m RuneOptionList, f func(RuneOption) int16) Int16List { acc := NilInt16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneOptionList: RuneOption->int32 */ func MapInt32ToRuneOptionList(m RuneOptionList, f func(RuneOption) int32) Int32List { acc := NilInt32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneOptionList: RuneOption->int64 */ func MapInt64ToRuneOptionList(m RuneOptionList, f func(RuneOption) int64) Int64List { acc := NilInt64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneOptionList: RuneOption->uint */ func MapUintToRuneOptionList(m RuneOptionList, f func(RuneOption) uint) UintList { acc := NilUintList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneOptionList: RuneOption->uint8 */ func MapUint8ToRuneOptionList(m RuneOptionList, f func(RuneOption) uint8) Uint8List { acc := NilUint8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneOptionList: RuneOption->uint16 */ func MapUint16ToRuneOptionList(m RuneOptionList, f func(RuneOption) uint16) Uint16List { acc := NilUint16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneOptionList: RuneOption->uint32 */ func MapUint32ToRuneOptionList(m RuneOptionList, f func(RuneOption) uint32) Uint32List { acc := NilUint32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneOptionList: RuneOption->uint64 */ func MapUint64ToRuneOptionList(m RuneOptionList, f func(RuneOption) uint64) Uint64List { acc := NilUint64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneOptionList: RuneOption->uintptr */ func MapUintptrToRuneOptionList(m RuneOptionList, f func(RuneOption) uintptr) UintptrList { acc := NilUintptrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneOptionList: RuneOption->byte */ func MapByteToRuneOptionList(m RuneOptionList, f func(RuneOption) byte) ByteList { acc := NilByteList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneOptionList: RuneOption->rune */ func MapRuneToRuneOptionList(m RuneOptionList, f func(RuneOption) rune) RuneList { acc := NilRuneList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneOptionList: RuneOption->float32 */ func MapFloat32ToRuneOptionList(m RuneOptionList, f func(RuneOption) float32) Float32List { acc := NilFloat32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneOptionList: RuneOption->float64 */ func MapFloat64ToRuneOptionList(m RuneOptionList, f func(RuneOption) float64) Float64List { acc := NilFloat64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneOptionList: RuneOption->complex64 */ func MapComplex64ToRuneOptionList(m RuneOptionList, f func(RuneOption) complex64) Complex64List { acc := NilComplex64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneOptionList: RuneOption->complex128 */ func MapComplex128ToRuneOptionList(m RuneOptionList, f func(RuneOption) complex128) Complex128List { acc := NilComplex128List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneOptionList: RuneOption->Any */ func MapAnyToRuneOptionList(m RuneOptionList, f func(RuneOption) Any) AnyList { acc := NilAnyList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneOptionList: RuneOption->BoolOption */ func MapBoolOptionToRuneOptionList(m RuneOptionList, f func(RuneOption) BoolOption) BoolOptionList { acc := NilBoolOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneOptionList: RuneOption->StringOption */ func MapStringOptionToRuneOptionList(m RuneOptionList, f func(RuneOption) StringOption) StringOptionList { acc := NilStringOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneOptionList: RuneOption->IntOption */ func MapIntOptionToRuneOptionList(m RuneOptionList, f func(RuneOption) IntOption) IntOptionList { acc := NilIntOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneOptionList: RuneOption->Int8Option */ func MapInt8OptionToRuneOptionList(m RuneOptionList, f func(RuneOption) Int8Option) Int8OptionList { acc := NilInt8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneOptionList: RuneOption->Int16Option */ func MapInt16OptionToRuneOptionList(m RuneOptionList, f func(RuneOption) Int16Option) Int16OptionList { acc := NilInt16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneOptionList: RuneOption->Int32Option */ func MapInt32OptionToRuneOptionList(m RuneOptionList, f func(RuneOption) Int32Option) Int32OptionList { acc := NilInt32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneOptionList: RuneOption->Int64Option */ func MapInt64OptionToRuneOptionList(m RuneOptionList, f func(RuneOption) Int64Option) Int64OptionList { acc := NilInt64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneOptionList: RuneOption->UintOption */ func MapUintOptionToRuneOptionList(m RuneOptionList, f func(RuneOption) UintOption) UintOptionList { acc := NilUintOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneOptionList: RuneOption->Uint8Option */ func MapUint8OptionToRuneOptionList(m RuneOptionList, f func(RuneOption) Uint8Option) Uint8OptionList { acc := NilUint8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneOptionList: RuneOption->Uint16Option */ func MapUint16OptionToRuneOptionList(m RuneOptionList, f func(RuneOption) Uint16Option) Uint16OptionList { acc := NilUint16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneOptionList: RuneOption->Uint32Option */ func MapUint32OptionToRuneOptionList(m RuneOptionList, f func(RuneOption) Uint32Option) Uint32OptionList { acc := NilUint32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneOptionList: RuneOption->Uint64Option */ func MapUint64OptionToRuneOptionList(m RuneOptionList, f func(RuneOption) Uint64Option) Uint64OptionList { acc := NilUint64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneOptionList: RuneOption->UintptrOption */ func MapUintptrOptionToRuneOptionList(m RuneOptionList, f func(RuneOption) UintptrOption) UintptrOptionList { acc := NilUintptrOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneOptionList: RuneOption->ByteOption */ func MapByteOptionToRuneOptionList(m RuneOptionList, f func(RuneOption) ByteOption) ByteOptionList { acc := NilByteOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneOptionList: RuneOption->RuneOption */ func MapRuneOptionToRuneOptionList(m RuneOptionList, f func(RuneOption) RuneOption) RuneOptionList { acc := NilRuneOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneOptionList: RuneOption->Float32Option */ func MapFloat32OptionToRuneOptionList(m RuneOptionList, f func(RuneOption) Float32Option) Float32OptionList { acc := NilFloat32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneOptionList: RuneOption->Float64Option */ func MapFloat64OptionToRuneOptionList(m RuneOptionList, f func(RuneOption) Float64Option) Float64OptionList { acc := NilFloat64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneOptionList: RuneOption->Complex64Option */ func MapComplex64OptionToRuneOptionList(m RuneOptionList, f func(RuneOption) Complex64Option) Complex64OptionList { acc := NilComplex64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneOptionList: RuneOption->Complex128Option */ func MapComplex128OptionToRuneOptionList(m RuneOptionList, f func(RuneOption) Complex128Option) Complex128OptionList { acc := NilComplex128OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneOptionList: RuneOption->AnyOption */ func MapAnyOptionToRuneOptionList(m RuneOptionList, f func(RuneOption) AnyOption) AnyOptionList { acc := NilAnyOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneOptionList: RuneOption->[]bool */ func MapBoolArrToRuneOptionList(m RuneOptionList, f func(RuneOption) []bool) BoolArrList { acc := NilBoolArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneOptionList: RuneOption->[]string */ func MapStringArrToRuneOptionList(m RuneOptionList, f func(RuneOption) []string) StringArrList { acc := NilStringArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneOptionList: RuneOption->[]int */ func MapIntArrToRuneOptionList(m RuneOptionList, f func(RuneOption) []int) IntArrList { acc := NilIntArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneOptionList: RuneOption->[]int8 */ func MapInt8ArrToRuneOptionList(m RuneOptionList, f func(RuneOption) []int8) Int8ArrList { acc := NilInt8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneOptionList: RuneOption->[]int16 */ func MapInt16ArrToRuneOptionList(m RuneOptionList, f func(RuneOption) []int16) Int16ArrList { acc := NilInt16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneOptionList: RuneOption->[]int32 */ func MapInt32ArrToRuneOptionList(m RuneOptionList, f func(RuneOption) []int32) Int32ArrList { acc := NilInt32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneOptionList: RuneOption->[]int64 */ func MapInt64ArrToRuneOptionList(m RuneOptionList, f func(RuneOption) []int64) Int64ArrList { acc := NilInt64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneOptionList: RuneOption->[]uint */ func MapUintArrToRuneOptionList(m RuneOptionList, f func(RuneOption) []uint) UintArrList { acc := NilUintArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneOptionList: RuneOption->[]uint8 */ func MapUint8ArrToRuneOptionList(m RuneOptionList, f func(RuneOption) []uint8) Uint8ArrList { acc := NilUint8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneOptionList: RuneOption->[]uint16 */ func MapUint16ArrToRuneOptionList(m RuneOptionList, f func(RuneOption) []uint16) Uint16ArrList { acc := NilUint16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneOptionList: RuneOption->[]uint32 */ func MapUint32ArrToRuneOptionList(m RuneOptionList, f func(RuneOption) []uint32) Uint32ArrList { acc := NilUint32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneOptionList: RuneOption->[]uint64 */ func MapUint64ArrToRuneOptionList(m RuneOptionList, f func(RuneOption) []uint64) Uint64ArrList { acc := NilUint64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneOptionList: RuneOption->[]uintptr */ func MapUintptrArrToRuneOptionList(m RuneOptionList, f func(RuneOption) []uintptr) UintptrArrList { acc := NilUintptrArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneOptionList: RuneOption->[]byte */ func MapByteArrToRuneOptionList(m RuneOptionList, f func(RuneOption) []byte) ByteArrList { acc := NilByteArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneOptionList: RuneOption->[]rune */ func MapRuneArrToRuneOptionList(m RuneOptionList, f func(RuneOption) []rune) RuneArrList { acc := NilRuneArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneOptionList: RuneOption->[]float32 */ func MapFloat32ArrToRuneOptionList(m RuneOptionList, f func(RuneOption) []float32) Float32ArrList { acc := NilFloat32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneOptionList: RuneOption->[]float64 */ func MapFloat64ArrToRuneOptionList(m RuneOptionList, f func(RuneOption) []float64) Float64ArrList { acc := NilFloat64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneOptionList: RuneOption->[]complex64 */ func MapComplex64ArrToRuneOptionList(m RuneOptionList, f func(RuneOption) []complex64) Complex64ArrList { acc := NilComplex64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneOptionList: RuneOption->[]complex128 */ func MapComplex128ArrToRuneOptionList(m RuneOptionList, f func(RuneOption) []complex128) Complex128ArrList { acc := NilComplex128ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneOptionList: RuneOption->[]Any */ func MapAnyArrToRuneOptionList(m RuneOptionList, f func(RuneOption) []Any) AnyArrList { acc := NilAnyArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneOptionList: RuneOption->BoolList */ func MapBoolListToRuneOptionList(m RuneOptionList, f func(RuneOption) BoolList) BoolListList { acc := NilBoolListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneOptionList: RuneOption->StringList */ func MapStringListToRuneOptionList(m RuneOptionList, f func(RuneOption) StringList) StringListList { acc := NilStringListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneOptionList: RuneOption->IntList */ func MapIntListToRuneOptionList(m RuneOptionList, f func(RuneOption) IntList) IntListList { acc := NilIntListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneOptionList: RuneOption->Int8List */ func MapInt8ListToRuneOptionList(m RuneOptionList, f func(RuneOption) Int8List) Int8ListList { acc := NilInt8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneOptionList: RuneOption->Int16List */ func MapInt16ListToRuneOptionList(m RuneOptionList, f func(RuneOption) Int16List) Int16ListList { acc := NilInt16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneOptionList: RuneOption->Int32List */ func MapInt32ListToRuneOptionList(m RuneOptionList, f func(RuneOption) Int32List) Int32ListList { acc := NilInt32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneOptionList: RuneOption->Int64List */ func MapInt64ListToRuneOptionList(m RuneOptionList, f func(RuneOption) Int64List) Int64ListList { acc := NilInt64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneOptionList: RuneOption->UintList */ func MapUintListToRuneOptionList(m RuneOptionList, f func(RuneOption) UintList) UintListList { acc := NilUintListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneOptionList: RuneOption->Uint8List */ func MapUint8ListToRuneOptionList(m RuneOptionList, f func(RuneOption) Uint8List) Uint8ListList { acc := NilUint8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneOptionList: RuneOption->Uint16List */ func MapUint16ListToRuneOptionList(m RuneOptionList, f func(RuneOption) Uint16List) Uint16ListList { acc := NilUint16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneOptionList: RuneOption->Uint32List */ func MapUint32ListToRuneOptionList(m RuneOptionList, f func(RuneOption) Uint32List) Uint32ListList { acc := NilUint32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneOptionList: RuneOption->Uint64List */ func MapUint64ListToRuneOptionList(m RuneOptionList, f func(RuneOption) Uint64List) Uint64ListList { acc := NilUint64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneOptionList: RuneOption->UintptrList */ func MapUintptrListToRuneOptionList(m RuneOptionList, f func(RuneOption) UintptrList) UintptrListList { acc := NilUintptrListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneOptionList: RuneOption->ByteList */ func MapByteListToRuneOptionList(m RuneOptionList, f func(RuneOption) ByteList) ByteListList { acc := NilByteListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneOptionList: RuneOption->RuneList */ func MapRuneListToRuneOptionList(m RuneOptionList, f func(RuneOption) RuneList) RuneListList { acc := NilRuneListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneOptionList: RuneOption->Float32List */ func MapFloat32ListToRuneOptionList(m RuneOptionList, f func(RuneOption) Float32List) Float32ListList { acc := NilFloat32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneOptionList: RuneOption->Float64List */ func MapFloat64ListToRuneOptionList(m RuneOptionList, f func(RuneOption) Float64List) Float64ListList { acc := NilFloat64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneOptionList: RuneOption->Complex64List */ func MapComplex64ListToRuneOptionList(m RuneOptionList, f func(RuneOption) Complex64List) Complex64ListList { acc := NilComplex64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneOptionList: RuneOption->Complex128List */ func MapComplex128ListToRuneOptionList(m RuneOptionList, f func(RuneOption) Complex128List) Complex128ListList { acc := NilComplex128ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneOptionList: RuneOption->AnyList */ func MapAnyListToRuneOptionList(m RuneOptionList, f func(RuneOption) AnyList) AnyListList { acc := NilAnyListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32OptionList: Float32Option->bool */ func MapBoolToFloat32OptionList(m Float32OptionList, f func(Float32Option) bool) BoolList { acc := NilBoolList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32OptionList: Float32Option->string */ func MapStringToFloat32OptionList(m Float32OptionList, f func(Float32Option) string) StringList { acc := NilStringList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32OptionList: Float32Option->int */ func MapIntToFloat32OptionList(m Float32OptionList, f func(Float32Option) int) IntList { acc := NilIntList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32OptionList: Float32Option->int8 */ func MapInt8ToFloat32OptionList(m Float32OptionList, f func(Float32Option) int8) Int8List { acc := NilInt8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32OptionList: Float32Option->int16 */ func MapInt16ToFloat32OptionList(m Float32OptionList, f func(Float32Option) int16) Int16List { acc := NilInt16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32OptionList: Float32Option->int32 */ func MapInt32ToFloat32OptionList(m Float32OptionList, f func(Float32Option) int32) Int32List { acc := NilInt32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32OptionList: Float32Option->int64 */ func MapInt64ToFloat32OptionList(m Float32OptionList, f func(Float32Option) int64) Int64List { acc := NilInt64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32OptionList: Float32Option->uint */ func MapUintToFloat32OptionList(m Float32OptionList, f func(Float32Option) uint) UintList { acc := NilUintList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32OptionList: Float32Option->uint8 */ func MapUint8ToFloat32OptionList(m Float32OptionList, f func(Float32Option) uint8) Uint8List { acc := NilUint8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32OptionList: Float32Option->uint16 */ func MapUint16ToFloat32OptionList(m Float32OptionList, f func(Float32Option) uint16) Uint16List { acc := NilUint16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32OptionList: Float32Option->uint32 */ func MapUint32ToFloat32OptionList(m Float32OptionList, f func(Float32Option) uint32) Uint32List { acc := NilUint32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32OptionList: Float32Option->uint64 */ func MapUint64ToFloat32OptionList(m Float32OptionList, f func(Float32Option) uint64) Uint64List { acc := NilUint64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32OptionList: Float32Option->uintptr */ func MapUintptrToFloat32OptionList(m Float32OptionList, f func(Float32Option) uintptr) UintptrList { acc := NilUintptrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32OptionList: Float32Option->byte */ func MapByteToFloat32OptionList(m Float32OptionList, f func(Float32Option) byte) ByteList { acc := NilByteList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32OptionList: Float32Option->rune */ func MapRuneToFloat32OptionList(m Float32OptionList, f func(Float32Option) rune) RuneList { acc := NilRuneList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32OptionList: Float32Option->float32 */ func MapFloat32ToFloat32OptionList(m Float32OptionList, f func(Float32Option) float32) Float32List { acc := NilFloat32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32OptionList: Float32Option->float64 */ func MapFloat64ToFloat32OptionList(m Float32OptionList, f func(Float32Option) float64) Float64List { acc := NilFloat64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32OptionList: Float32Option->complex64 */ func MapComplex64ToFloat32OptionList(m Float32OptionList, f func(Float32Option) complex64) Complex64List { acc := NilComplex64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32OptionList: Float32Option->complex128 */ func MapComplex128ToFloat32OptionList(m Float32OptionList, f func(Float32Option) complex128) Complex128List { acc := NilComplex128List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32OptionList: Float32Option->Any */ func MapAnyToFloat32OptionList(m Float32OptionList, f func(Float32Option) Any) AnyList { acc := NilAnyList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32OptionList: Float32Option->BoolOption */ func MapBoolOptionToFloat32OptionList(m Float32OptionList, f func(Float32Option) BoolOption) BoolOptionList { acc := NilBoolOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32OptionList: Float32Option->StringOption */ func MapStringOptionToFloat32OptionList(m Float32OptionList, f func(Float32Option) StringOption) StringOptionList { acc := NilStringOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32OptionList: Float32Option->IntOption */ func MapIntOptionToFloat32OptionList(m Float32OptionList, f func(Float32Option) IntOption) IntOptionList { acc := NilIntOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32OptionList: Float32Option->Int8Option */ func MapInt8OptionToFloat32OptionList(m Float32OptionList, f func(Float32Option) Int8Option) Int8OptionList { acc := NilInt8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32OptionList: Float32Option->Int16Option */ func MapInt16OptionToFloat32OptionList(m Float32OptionList, f func(Float32Option) Int16Option) Int16OptionList { acc := NilInt16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32OptionList: Float32Option->Int32Option */ func MapInt32OptionToFloat32OptionList(m Float32OptionList, f func(Float32Option) Int32Option) Int32OptionList { acc := NilInt32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32OptionList: Float32Option->Int64Option */ func MapInt64OptionToFloat32OptionList(m Float32OptionList, f func(Float32Option) Int64Option) Int64OptionList { acc := NilInt64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32OptionList: Float32Option->UintOption */ func MapUintOptionToFloat32OptionList(m Float32OptionList, f func(Float32Option) UintOption) UintOptionList { acc := NilUintOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32OptionList: Float32Option->Uint8Option */ func MapUint8OptionToFloat32OptionList(m Float32OptionList, f func(Float32Option) Uint8Option) Uint8OptionList { acc := NilUint8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32OptionList: Float32Option->Uint16Option */ func MapUint16OptionToFloat32OptionList(m Float32OptionList, f func(Float32Option) Uint16Option) Uint16OptionList { acc := NilUint16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32OptionList: Float32Option->Uint32Option */ func MapUint32OptionToFloat32OptionList(m Float32OptionList, f func(Float32Option) Uint32Option) Uint32OptionList { acc := NilUint32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32OptionList: Float32Option->Uint64Option */ func MapUint64OptionToFloat32OptionList(m Float32OptionList, f func(Float32Option) Uint64Option) Uint64OptionList { acc := NilUint64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32OptionList: Float32Option->UintptrOption */ func MapUintptrOptionToFloat32OptionList(m Float32OptionList, f func(Float32Option) UintptrOption) UintptrOptionList { acc := NilUintptrOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32OptionList: Float32Option->ByteOption */ func MapByteOptionToFloat32OptionList(m Float32OptionList, f func(Float32Option) ByteOption) ByteOptionList { acc := NilByteOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32OptionList: Float32Option->RuneOption */ func MapRuneOptionToFloat32OptionList(m Float32OptionList, f func(Float32Option) RuneOption) RuneOptionList { acc := NilRuneOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32OptionList: Float32Option->Float32Option */ func MapFloat32OptionToFloat32OptionList(m Float32OptionList, f func(Float32Option) Float32Option) Float32OptionList { acc := NilFloat32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32OptionList: Float32Option->Float64Option */ func MapFloat64OptionToFloat32OptionList(m Float32OptionList, f func(Float32Option) Float64Option) Float64OptionList { acc := NilFloat64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32OptionList: Float32Option->Complex64Option */ func MapComplex64OptionToFloat32OptionList(m Float32OptionList, f func(Float32Option) Complex64Option) Complex64OptionList { acc := NilComplex64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32OptionList: Float32Option->Complex128Option */ func MapComplex128OptionToFloat32OptionList(m Float32OptionList, f func(Float32Option) Complex128Option) Complex128OptionList { acc := NilComplex128OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32OptionList: Float32Option->AnyOption */ func MapAnyOptionToFloat32OptionList(m Float32OptionList, f func(Float32Option) AnyOption) AnyOptionList { acc := NilAnyOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32OptionList: Float32Option->[]bool */ func MapBoolArrToFloat32OptionList(m Float32OptionList, f func(Float32Option) []bool) BoolArrList { acc := NilBoolArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32OptionList: Float32Option->[]string */ func MapStringArrToFloat32OptionList(m Float32OptionList, f func(Float32Option) []string) StringArrList { acc := NilStringArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32OptionList: Float32Option->[]int */ func MapIntArrToFloat32OptionList(m Float32OptionList, f func(Float32Option) []int) IntArrList { acc := NilIntArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32OptionList: Float32Option->[]int8 */ func MapInt8ArrToFloat32OptionList(m Float32OptionList, f func(Float32Option) []int8) Int8ArrList { acc := NilInt8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32OptionList: Float32Option->[]int16 */ func MapInt16ArrToFloat32OptionList(m Float32OptionList, f func(Float32Option) []int16) Int16ArrList { acc := NilInt16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32OptionList: Float32Option->[]int32 */ func MapInt32ArrToFloat32OptionList(m Float32OptionList, f func(Float32Option) []int32) Int32ArrList { acc := NilInt32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32OptionList: Float32Option->[]int64 */ func MapInt64ArrToFloat32OptionList(m Float32OptionList, f func(Float32Option) []int64) Int64ArrList { acc := NilInt64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32OptionList: Float32Option->[]uint */ func MapUintArrToFloat32OptionList(m Float32OptionList, f func(Float32Option) []uint) UintArrList { acc := NilUintArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32OptionList: Float32Option->[]uint8 */ func MapUint8ArrToFloat32OptionList(m Float32OptionList, f func(Float32Option) []uint8) Uint8ArrList { acc := NilUint8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32OptionList: Float32Option->[]uint16 */ func MapUint16ArrToFloat32OptionList(m Float32OptionList, f func(Float32Option) []uint16) Uint16ArrList { acc := NilUint16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32OptionList: Float32Option->[]uint32 */ func MapUint32ArrToFloat32OptionList(m Float32OptionList, f func(Float32Option) []uint32) Uint32ArrList { acc := NilUint32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32OptionList: Float32Option->[]uint64 */ func MapUint64ArrToFloat32OptionList(m Float32OptionList, f func(Float32Option) []uint64) Uint64ArrList { acc := NilUint64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32OptionList: Float32Option->[]uintptr */ func MapUintptrArrToFloat32OptionList(m Float32OptionList, f func(Float32Option) []uintptr) UintptrArrList { acc := NilUintptrArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32OptionList: Float32Option->[]byte */ func MapByteArrToFloat32OptionList(m Float32OptionList, f func(Float32Option) []byte) ByteArrList { acc := NilByteArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32OptionList: Float32Option->[]rune */ func MapRuneArrToFloat32OptionList(m Float32OptionList, f func(Float32Option) []rune) RuneArrList { acc := NilRuneArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32OptionList: Float32Option->[]float32 */ func MapFloat32ArrToFloat32OptionList(m Float32OptionList, f func(Float32Option) []float32) Float32ArrList { acc := NilFloat32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32OptionList: Float32Option->[]float64 */ func MapFloat64ArrToFloat32OptionList(m Float32OptionList, f func(Float32Option) []float64) Float64ArrList { acc := NilFloat64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32OptionList: Float32Option->[]complex64 */ func MapComplex64ArrToFloat32OptionList(m Float32OptionList, f func(Float32Option) []complex64) Complex64ArrList { acc := NilComplex64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32OptionList: Float32Option->[]complex128 */ func MapComplex128ArrToFloat32OptionList(m Float32OptionList, f func(Float32Option) []complex128) Complex128ArrList { acc := NilComplex128ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32OptionList: Float32Option->[]Any */ func MapAnyArrToFloat32OptionList(m Float32OptionList, f func(Float32Option) []Any) AnyArrList { acc := NilAnyArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32OptionList: Float32Option->BoolList */ func MapBoolListToFloat32OptionList(m Float32OptionList, f func(Float32Option) BoolList) BoolListList { acc := NilBoolListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32OptionList: Float32Option->StringList */ func MapStringListToFloat32OptionList(m Float32OptionList, f func(Float32Option) StringList) StringListList { acc := NilStringListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32OptionList: Float32Option->IntList */ func MapIntListToFloat32OptionList(m Float32OptionList, f func(Float32Option) IntList) IntListList { acc := NilIntListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32OptionList: Float32Option->Int8List */ func MapInt8ListToFloat32OptionList(m Float32OptionList, f func(Float32Option) Int8List) Int8ListList { acc := NilInt8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32OptionList: Float32Option->Int16List */ func MapInt16ListToFloat32OptionList(m Float32OptionList, f func(Float32Option) Int16List) Int16ListList { acc := NilInt16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32OptionList: Float32Option->Int32List */ func MapInt32ListToFloat32OptionList(m Float32OptionList, f func(Float32Option) Int32List) Int32ListList { acc := NilInt32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32OptionList: Float32Option->Int64List */ func MapInt64ListToFloat32OptionList(m Float32OptionList, f func(Float32Option) Int64List) Int64ListList { acc := NilInt64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32OptionList: Float32Option->UintList */ func MapUintListToFloat32OptionList(m Float32OptionList, f func(Float32Option) UintList) UintListList { acc := NilUintListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32OptionList: Float32Option->Uint8List */ func MapUint8ListToFloat32OptionList(m Float32OptionList, f func(Float32Option) Uint8List) Uint8ListList { acc := NilUint8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32OptionList: Float32Option->Uint16List */ func MapUint16ListToFloat32OptionList(m Float32OptionList, f func(Float32Option) Uint16List) Uint16ListList { acc := NilUint16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32OptionList: Float32Option->Uint32List */ func MapUint32ListToFloat32OptionList(m Float32OptionList, f func(Float32Option) Uint32List) Uint32ListList { acc := NilUint32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32OptionList: Float32Option->Uint64List */ func MapUint64ListToFloat32OptionList(m Float32OptionList, f func(Float32Option) Uint64List) Uint64ListList { acc := NilUint64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32OptionList: Float32Option->UintptrList */ func MapUintptrListToFloat32OptionList(m Float32OptionList, f func(Float32Option) UintptrList) UintptrListList { acc := NilUintptrListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32OptionList: Float32Option->ByteList */ func MapByteListToFloat32OptionList(m Float32OptionList, f func(Float32Option) ByteList) ByteListList { acc := NilByteListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32OptionList: Float32Option->RuneList */ func MapRuneListToFloat32OptionList(m Float32OptionList, f func(Float32Option) RuneList) RuneListList { acc := NilRuneListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32OptionList: Float32Option->Float32List */ func MapFloat32ListToFloat32OptionList(m Float32OptionList, f func(Float32Option) Float32List) Float32ListList { acc := NilFloat32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32OptionList: Float32Option->Float64List */ func MapFloat64ListToFloat32OptionList(m Float32OptionList, f func(Float32Option) Float64List) Float64ListList { acc := NilFloat64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32OptionList: Float32Option->Complex64List */ func MapComplex64ListToFloat32OptionList(m Float32OptionList, f func(Float32Option) Complex64List) Complex64ListList { acc := NilComplex64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32OptionList: Float32Option->Complex128List */ func MapComplex128ListToFloat32OptionList(m Float32OptionList, f func(Float32Option) Complex128List) Complex128ListList { acc := NilComplex128ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32OptionList: Float32Option->AnyList */ func MapAnyListToFloat32OptionList(m Float32OptionList, f func(Float32Option) AnyList) AnyListList { acc := NilAnyListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64OptionList: Float64Option->bool */ func MapBoolToFloat64OptionList(m Float64OptionList, f func(Float64Option) bool) BoolList { acc := NilBoolList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64OptionList: Float64Option->string */ func MapStringToFloat64OptionList(m Float64OptionList, f func(Float64Option) string) StringList { acc := NilStringList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64OptionList: Float64Option->int */ func MapIntToFloat64OptionList(m Float64OptionList, f func(Float64Option) int) IntList { acc := NilIntList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64OptionList: Float64Option->int8 */ func MapInt8ToFloat64OptionList(m Float64OptionList, f func(Float64Option) int8) Int8List { acc := NilInt8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64OptionList: Float64Option->int16 */ func MapInt16ToFloat64OptionList(m Float64OptionList, f func(Float64Option) int16) Int16List { acc := NilInt16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64OptionList: Float64Option->int32 */ func MapInt32ToFloat64OptionList(m Float64OptionList, f func(Float64Option) int32) Int32List { acc := NilInt32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64OptionList: Float64Option->int64 */ func MapInt64ToFloat64OptionList(m Float64OptionList, f func(Float64Option) int64) Int64List { acc := NilInt64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64OptionList: Float64Option->uint */ func MapUintToFloat64OptionList(m Float64OptionList, f func(Float64Option) uint) UintList { acc := NilUintList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64OptionList: Float64Option->uint8 */ func MapUint8ToFloat64OptionList(m Float64OptionList, f func(Float64Option) uint8) Uint8List { acc := NilUint8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64OptionList: Float64Option->uint16 */ func MapUint16ToFloat64OptionList(m Float64OptionList, f func(Float64Option) uint16) Uint16List { acc := NilUint16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64OptionList: Float64Option->uint32 */ func MapUint32ToFloat64OptionList(m Float64OptionList, f func(Float64Option) uint32) Uint32List { acc := NilUint32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64OptionList: Float64Option->uint64 */ func MapUint64ToFloat64OptionList(m Float64OptionList, f func(Float64Option) uint64) Uint64List { acc := NilUint64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64OptionList: Float64Option->uintptr */ func MapUintptrToFloat64OptionList(m Float64OptionList, f func(Float64Option) uintptr) UintptrList { acc := NilUintptrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64OptionList: Float64Option->byte */ func MapByteToFloat64OptionList(m Float64OptionList, f func(Float64Option) byte) ByteList { acc := NilByteList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64OptionList: Float64Option->rune */ func MapRuneToFloat64OptionList(m Float64OptionList, f func(Float64Option) rune) RuneList { acc := NilRuneList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64OptionList: Float64Option->float32 */ func MapFloat32ToFloat64OptionList(m Float64OptionList, f func(Float64Option) float32) Float32List { acc := NilFloat32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64OptionList: Float64Option->float64 */ func MapFloat64ToFloat64OptionList(m Float64OptionList, f func(Float64Option) float64) Float64List { acc := NilFloat64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64OptionList: Float64Option->complex64 */ func MapComplex64ToFloat64OptionList(m Float64OptionList, f func(Float64Option) complex64) Complex64List { acc := NilComplex64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64OptionList: Float64Option->complex128 */ func MapComplex128ToFloat64OptionList(m Float64OptionList, f func(Float64Option) complex128) Complex128List { acc := NilComplex128List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64OptionList: Float64Option->Any */ func MapAnyToFloat64OptionList(m Float64OptionList, f func(Float64Option) Any) AnyList { acc := NilAnyList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64OptionList: Float64Option->BoolOption */ func MapBoolOptionToFloat64OptionList(m Float64OptionList, f func(Float64Option) BoolOption) BoolOptionList { acc := NilBoolOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64OptionList: Float64Option->StringOption */ func MapStringOptionToFloat64OptionList(m Float64OptionList, f func(Float64Option) StringOption) StringOptionList { acc := NilStringOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64OptionList: Float64Option->IntOption */ func MapIntOptionToFloat64OptionList(m Float64OptionList, f func(Float64Option) IntOption) IntOptionList { acc := NilIntOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64OptionList: Float64Option->Int8Option */ func MapInt8OptionToFloat64OptionList(m Float64OptionList, f func(Float64Option) Int8Option) Int8OptionList { acc := NilInt8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64OptionList: Float64Option->Int16Option */ func MapInt16OptionToFloat64OptionList(m Float64OptionList, f func(Float64Option) Int16Option) Int16OptionList { acc := NilInt16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64OptionList: Float64Option->Int32Option */ func MapInt32OptionToFloat64OptionList(m Float64OptionList, f func(Float64Option) Int32Option) Int32OptionList { acc := NilInt32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64OptionList: Float64Option->Int64Option */ func MapInt64OptionToFloat64OptionList(m Float64OptionList, f func(Float64Option) Int64Option) Int64OptionList { acc := NilInt64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64OptionList: Float64Option->UintOption */ func MapUintOptionToFloat64OptionList(m Float64OptionList, f func(Float64Option) UintOption) UintOptionList { acc := NilUintOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64OptionList: Float64Option->Uint8Option */ func MapUint8OptionToFloat64OptionList(m Float64OptionList, f func(Float64Option) Uint8Option) Uint8OptionList { acc := NilUint8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64OptionList: Float64Option->Uint16Option */ func MapUint16OptionToFloat64OptionList(m Float64OptionList, f func(Float64Option) Uint16Option) Uint16OptionList { acc := NilUint16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64OptionList: Float64Option->Uint32Option */ func MapUint32OptionToFloat64OptionList(m Float64OptionList, f func(Float64Option) Uint32Option) Uint32OptionList { acc := NilUint32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64OptionList: Float64Option->Uint64Option */ func MapUint64OptionToFloat64OptionList(m Float64OptionList, f func(Float64Option) Uint64Option) Uint64OptionList { acc := NilUint64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64OptionList: Float64Option->UintptrOption */ func MapUintptrOptionToFloat64OptionList(m Float64OptionList, f func(Float64Option) UintptrOption) UintptrOptionList { acc := NilUintptrOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64OptionList: Float64Option->ByteOption */ func MapByteOptionToFloat64OptionList(m Float64OptionList, f func(Float64Option) ByteOption) ByteOptionList { acc := NilByteOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64OptionList: Float64Option->RuneOption */ func MapRuneOptionToFloat64OptionList(m Float64OptionList, f func(Float64Option) RuneOption) RuneOptionList { acc := NilRuneOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64OptionList: Float64Option->Float32Option */ func MapFloat32OptionToFloat64OptionList(m Float64OptionList, f func(Float64Option) Float32Option) Float32OptionList { acc := NilFloat32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64OptionList: Float64Option->Float64Option */ func MapFloat64OptionToFloat64OptionList(m Float64OptionList, f func(Float64Option) Float64Option) Float64OptionList { acc := NilFloat64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64OptionList: Float64Option->Complex64Option */ func MapComplex64OptionToFloat64OptionList(m Float64OptionList, f func(Float64Option) Complex64Option) Complex64OptionList { acc := NilComplex64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64OptionList: Float64Option->Complex128Option */ func MapComplex128OptionToFloat64OptionList(m Float64OptionList, f func(Float64Option) Complex128Option) Complex128OptionList { acc := NilComplex128OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64OptionList: Float64Option->AnyOption */ func MapAnyOptionToFloat64OptionList(m Float64OptionList, f func(Float64Option) AnyOption) AnyOptionList { acc := NilAnyOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64OptionList: Float64Option->[]bool */ func MapBoolArrToFloat64OptionList(m Float64OptionList, f func(Float64Option) []bool) BoolArrList { acc := NilBoolArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64OptionList: Float64Option->[]string */ func MapStringArrToFloat64OptionList(m Float64OptionList, f func(Float64Option) []string) StringArrList { acc := NilStringArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64OptionList: Float64Option->[]int */ func MapIntArrToFloat64OptionList(m Float64OptionList, f func(Float64Option) []int) IntArrList { acc := NilIntArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64OptionList: Float64Option->[]int8 */ func MapInt8ArrToFloat64OptionList(m Float64OptionList, f func(Float64Option) []int8) Int8ArrList { acc := NilInt8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64OptionList: Float64Option->[]int16 */ func MapInt16ArrToFloat64OptionList(m Float64OptionList, f func(Float64Option) []int16) Int16ArrList { acc := NilInt16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64OptionList: Float64Option->[]int32 */ func MapInt32ArrToFloat64OptionList(m Float64OptionList, f func(Float64Option) []int32) Int32ArrList { acc := NilInt32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64OptionList: Float64Option->[]int64 */ func MapInt64ArrToFloat64OptionList(m Float64OptionList, f func(Float64Option) []int64) Int64ArrList { acc := NilInt64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64OptionList: Float64Option->[]uint */ func MapUintArrToFloat64OptionList(m Float64OptionList, f func(Float64Option) []uint) UintArrList { acc := NilUintArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64OptionList: Float64Option->[]uint8 */ func MapUint8ArrToFloat64OptionList(m Float64OptionList, f func(Float64Option) []uint8) Uint8ArrList { acc := NilUint8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64OptionList: Float64Option->[]uint16 */ func MapUint16ArrToFloat64OptionList(m Float64OptionList, f func(Float64Option) []uint16) Uint16ArrList { acc := NilUint16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64OptionList: Float64Option->[]uint32 */ func MapUint32ArrToFloat64OptionList(m Float64OptionList, f func(Float64Option) []uint32) Uint32ArrList { acc := NilUint32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64OptionList: Float64Option->[]uint64 */ func MapUint64ArrToFloat64OptionList(m Float64OptionList, f func(Float64Option) []uint64) Uint64ArrList { acc := NilUint64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64OptionList: Float64Option->[]uintptr */ func MapUintptrArrToFloat64OptionList(m Float64OptionList, f func(Float64Option) []uintptr) UintptrArrList { acc := NilUintptrArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64OptionList: Float64Option->[]byte */ func MapByteArrToFloat64OptionList(m Float64OptionList, f func(Float64Option) []byte) ByteArrList { acc := NilByteArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64OptionList: Float64Option->[]rune */ func MapRuneArrToFloat64OptionList(m Float64OptionList, f func(Float64Option) []rune) RuneArrList { acc := NilRuneArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64OptionList: Float64Option->[]float32 */ func MapFloat32ArrToFloat64OptionList(m Float64OptionList, f func(Float64Option) []float32) Float32ArrList { acc := NilFloat32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64OptionList: Float64Option->[]float64 */ func MapFloat64ArrToFloat64OptionList(m Float64OptionList, f func(Float64Option) []float64) Float64ArrList { acc := NilFloat64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64OptionList: Float64Option->[]complex64 */ func MapComplex64ArrToFloat64OptionList(m Float64OptionList, f func(Float64Option) []complex64) Complex64ArrList { acc := NilComplex64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64OptionList: Float64Option->[]complex128 */ func MapComplex128ArrToFloat64OptionList(m Float64OptionList, f func(Float64Option) []complex128) Complex128ArrList { acc := NilComplex128ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64OptionList: Float64Option->[]Any */ func MapAnyArrToFloat64OptionList(m Float64OptionList, f func(Float64Option) []Any) AnyArrList { acc := NilAnyArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64OptionList: Float64Option->BoolList */ func MapBoolListToFloat64OptionList(m Float64OptionList, f func(Float64Option) BoolList) BoolListList { acc := NilBoolListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64OptionList: Float64Option->StringList */ func MapStringListToFloat64OptionList(m Float64OptionList, f func(Float64Option) StringList) StringListList { acc := NilStringListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64OptionList: Float64Option->IntList */ func MapIntListToFloat64OptionList(m Float64OptionList, f func(Float64Option) IntList) IntListList { acc := NilIntListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64OptionList: Float64Option->Int8List */ func MapInt8ListToFloat64OptionList(m Float64OptionList, f func(Float64Option) Int8List) Int8ListList { acc := NilInt8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64OptionList: Float64Option->Int16List */ func MapInt16ListToFloat64OptionList(m Float64OptionList, f func(Float64Option) Int16List) Int16ListList { acc := NilInt16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64OptionList: Float64Option->Int32List */ func MapInt32ListToFloat64OptionList(m Float64OptionList, f func(Float64Option) Int32List) Int32ListList { acc := NilInt32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64OptionList: Float64Option->Int64List */ func MapInt64ListToFloat64OptionList(m Float64OptionList, f func(Float64Option) Int64List) Int64ListList { acc := NilInt64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64OptionList: Float64Option->UintList */ func MapUintListToFloat64OptionList(m Float64OptionList, f func(Float64Option) UintList) UintListList { acc := NilUintListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64OptionList: Float64Option->Uint8List */ func MapUint8ListToFloat64OptionList(m Float64OptionList, f func(Float64Option) Uint8List) Uint8ListList { acc := NilUint8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64OptionList: Float64Option->Uint16List */ func MapUint16ListToFloat64OptionList(m Float64OptionList, f func(Float64Option) Uint16List) Uint16ListList { acc := NilUint16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64OptionList: Float64Option->Uint32List */ func MapUint32ListToFloat64OptionList(m Float64OptionList, f func(Float64Option) Uint32List) Uint32ListList { acc := NilUint32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64OptionList: Float64Option->Uint64List */ func MapUint64ListToFloat64OptionList(m Float64OptionList, f func(Float64Option) Uint64List) Uint64ListList { acc := NilUint64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64OptionList: Float64Option->UintptrList */ func MapUintptrListToFloat64OptionList(m Float64OptionList, f func(Float64Option) UintptrList) UintptrListList { acc := NilUintptrListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64OptionList: Float64Option->ByteList */ func MapByteListToFloat64OptionList(m Float64OptionList, f func(Float64Option) ByteList) ByteListList { acc := NilByteListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64OptionList: Float64Option->RuneList */ func MapRuneListToFloat64OptionList(m Float64OptionList, f func(Float64Option) RuneList) RuneListList { acc := NilRuneListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64OptionList: Float64Option->Float32List */ func MapFloat32ListToFloat64OptionList(m Float64OptionList, f func(Float64Option) Float32List) Float32ListList { acc := NilFloat32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64OptionList: Float64Option->Float64List */ func MapFloat64ListToFloat64OptionList(m Float64OptionList, f func(Float64Option) Float64List) Float64ListList { acc := NilFloat64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64OptionList: Float64Option->Complex64List */ func MapComplex64ListToFloat64OptionList(m Float64OptionList, f func(Float64Option) Complex64List) Complex64ListList { acc := NilComplex64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64OptionList: Float64Option->Complex128List */ func MapComplex128ListToFloat64OptionList(m Float64OptionList, f func(Float64Option) Complex128List) Complex128ListList { acc := NilComplex128ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64OptionList: Float64Option->AnyList */ func MapAnyListToFloat64OptionList(m Float64OptionList, f func(Float64Option) AnyList) AnyListList { acc := NilAnyListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64OptionList: Complex64Option->bool */ func MapBoolToComplex64OptionList(m Complex64OptionList, f func(Complex64Option) bool) BoolList { acc := NilBoolList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64OptionList: Complex64Option->string */ func MapStringToComplex64OptionList(m Complex64OptionList, f func(Complex64Option) string) StringList { acc := NilStringList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64OptionList: Complex64Option->int */ func MapIntToComplex64OptionList(m Complex64OptionList, f func(Complex64Option) int) IntList { acc := NilIntList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64OptionList: Complex64Option->int8 */ func MapInt8ToComplex64OptionList(m Complex64OptionList, f func(Complex64Option) int8) Int8List { acc := NilInt8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64OptionList: Complex64Option->int16 */ func MapInt16ToComplex64OptionList(m Complex64OptionList, f func(Complex64Option) int16) Int16List { acc := NilInt16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64OptionList: Complex64Option->int32 */ func MapInt32ToComplex64OptionList(m Complex64OptionList, f func(Complex64Option) int32) Int32List { acc := NilInt32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64OptionList: Complex64Option->int64 */ func MapInt64ToComplex64OptionList(m Complex64OptionList, f func(Complex64Option) int64) Int64List { acc := NilInt64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64OptionList: Complex64Option->uint */ func MapUintToComplex64OptionList(m Complex64OptionList, f func(Complex64Option) uint) UintList { acc := NilUintList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64OptionList: Complex64Option->uint8 */ func MapUint8ToComplex64OptionList(m Complex64OptionList, f func(Complex64Option) uint8) Uint8List { acc := NilUint8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64OptionList: Complex64Option->uint16 */ func MapUint16ToComplex64OptionList(m Complex64OptionList, f func(Complex64Option) uint16) Uint16List { acc := NilUint16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64OptionList: Complex64Option->uint32 */ func MapUint32ToComplex64OptionList(m Complex64OptionList, f func(Complex64Option) uint32) Uint32List { acc := NilUint32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64OptionList: Complex64Option->uint64 */ func MapUint64ToComplex64OptionList(m Complex64OptionList, f func(Complex64Option) uint64) Uint64List { acc := NilUint64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64OptionList: Complex64Option->uintptr */ func MapUintptrToComplex64OptionList(m Complex64OptionList, f func(Complex64Option) uintptr) UintptrList { acc := NilUintptrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64OptionList: Complex64Option->byte */ func MapByteToComplex64OptionList(m Complex64OptionList, f func(Complex64Option) byte) ByteList { acc := NilByteList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64OptionList: Complex64Option->rune */ func MapRuneToComplex64OptionList(m Complex64OptionList, f func(Complex64Option) rune) RuneList { acc := NilRuneList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64OptionList: Complex64Option->float32 */ func MapFloat32ToComplex64OptionList(m Complex64OptionList, f func(Complex64Option) float32) Float32List { acc := NilFloat32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64OptionList: Complex64Option->float64 */ func MapFloat64ToComplex64OptionList(m Complex64OptionList, f func(Complex64Option) float64) Float64List { acc := NilFloat64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64OptionList: Complex64Option->complex64 */ func MapComplex64ToComplex64OptionList(m Complex64OptionList, f func(Complex64Option) complex64) Complex64List { acc := NilComplex64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64OptionList: Complex64Option->complex128 */ func MapComplex128ToComplex64OptionList(m Complex64OptionList, f func(Complex64Option) complex128) Complex128List { acc := NilComplex128List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64OptionList: Complex64Option->Any */ func MapAnyToComplex64OptionList(m Complex64OptionList, f func(Complex64Option) Any) AnyList { acc := NilAnyList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64OptionList: Complex64Option->BoolOption */ func MapBoolOptionToComplex64OptionList(m Complex64OptionList, f func(Complex64Option) BoolOption) BoolOptionList { acc := NilBoolOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64OptionList: Complex64Option->StringOption */ func MapStringOptionToComplex64OptionList(m Complex64OptionList, f func(Complex64Option) StringOption) StringOptionList { acc := NilStringOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64OptionList: Complex64Option->IntOption */ func MapIntOptionToComplex64OptionList(m Complex64OptionList, f func(Complex64Option) IntOption) IntOptionList { acc := NilIntOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64OptionList: Complex64Option->Int8Option */ func MapInt8OptionToComplex64OptionList(m Complex64OptionList, f func(Complex64Option) Int8Option) Int8OptionList { acc := NilInt8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64OptionList: Complex64Option->Int16Option */ func MapInt16OptionToComplex64OptionList(m Complex64OptionList, f func(Complex64Option) Int16Option) Int16OptionList { acc := NilInt16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64OptionList: Complex64Option->Int32Option */ func MapInt32OptionToComplex64OptionList(m Complex64OptionList, f func(Complex64Option) Int32Option) Int32OptionList { acc := NilInt32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64OptionList: Complex64Option->Int64Option */ func MapInt64OptionToComplex64OptionList(m Complex64OptionList, f func(Complex64Option) Int64Option) Int64OptionList { acc := NilInt64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64OptionList: Complex64Option->UintOption */ func MapUintOptionToComplex64OptionList(m Complex64OptionList, f func(Complex64Option) UintOption) UintOptionList { acc := NilUintOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64OptionList: Complex64Option->Uint8Option */ func MapUint8OptionToComplex64OptionList(m Complex64OptionList, f func(Complex64Option) Uint8Option) Uint8OptionList { acc := NilUint8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64OptionList: Complex64Option->Uint16Option */ func MapUint16OptionToComplex64OptionList(m Complex64OptionList, f func(Complex64Option) Uint16Option) Uint16OptionList { acc := NilUint16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64OptionList: Complex64Option->Uint32Option */ func MapUint32OptionToComplex64OptionList(m Complex64OptionList, f func(Complex64Option) Uint32Option) Uint32OptionList { acc := NilUint32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64OptionList: Complex64Option->Uint64Option */ func MapUint64OptionToComplex64OptionList(m Complex64OptionList, f func(Complex64Option) Uint64Option) Uint64OptionList { acc := NilUint64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64OptionList: Complex64Option->UintptrOption */ func MapUintptrOptionToComplex64OptionList(m Complex64OptionList, f func(Complex64Option) UintptrOption) UintptrOptionList { acc := NilUintptrOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64OptionList: Complex64Option->ByteOption */ func MapByteOptionToComplex64OptionList(m Complex64OptionList, f func(Complex64Option) ByteOption) ByteOptionList { acc := NilByteOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64OptionList: Complex64Option->RuneOption */ func MapRuneOptionToComplex64OptionList(m Complex64OptionList, f func(Complex64Option) RuneOption) RuneOptionList { acc := NilRuneOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64OptionList: Complex64Option->Float32Option */ func MapFloat32OptionToComplex64OptionList(m Complex64OptionList, f func(Complex64Option) Float32Option) Float32OptionList { acc := NilFloat32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64OptionList: Complex64Option->Float64Option */ func MapFloat64OptionToComplex64OptionList(m Complex64OptionList, f func(Complex64Option) Float64Option) Float64OptionList { acc := NilFloat64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64OptionList: Complex64Option->Complex64Option */ func MapComplex64OptionToComplex64OptionList(m Complex64OptionList, f func(Complex64Option) Complex64Option) Complex64OptionList { acc := NilComplex64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64OptionList: Complex64Option->Complex128Option */ func MapComplex128OptionToComplex64OptionList(m Complex64OptionList, f func(Complex64Option) Complex128Option) Complex128OptionList { acc := NilComplex128OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64OptionList: Complex64Option->AnyOption */ func MapAnyOptionToComplex64OptionList(m Complex64OptionList, f func(Complex64Option) AnyOption) AnyOptionList { acc := NilAnyOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64OptionList: Complex64Option->[]bool */ func MapBoolArrToComplex64OptionList(m Complex64OptionList, f func(Complex64Option) []bool) BoolArrList { acc := NilBoolArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64OptionList: Complex64Option->[]string */ func MapStringArrToComplex64OptionList(m Complex64OptionList, f func(Complex64Option) []string) StringArrList { acc := NilStringArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64OptionList: Complex64Option->[]int */ func MapIntArrToComplex64OptionList(m Complex64OptionList, f func(Complex64Option) []int) IntArrList { acc := NilIntArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64OptionList: Complex64Option->[]int8 */ func MapInt8ArrToComplex64OptionList(m Complex64OptionList, f func(Complex64Option) []int8) Int8ArrList { acc := NilInt8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64OptionList: Complex64Option->[]int16 */ func MapInt16ArrToComplex64OptionList(m Complex64OptionList, f func(Complex64Option) []int16) Int16ArrList { acc := NilInt16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64OptionList: Complex64Option->[]int32 */ func MapInt32ArrToComplex64OptionList(m Complex64OptionList, f func(Complex64Option) []int32) Int32ArrList { acc := NilInt32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64OptionList: Complex64Option->[]int64 */ func MapInt64ArrToComplex64OptionList(m Complex64OptionList, f func(Complex64Option) []int64) Int64ArrList { acc := NilInt64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64OptionList: Complex64Option->[]uint */ func MapUintArrToComplex64OptionList(m Complex64OptionList, f func(Complex64Option) []uint) UintArrList { acc := NilUintArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64OptionList: Complex64Option->[]uint8 */ func MapUint8ArrToComplex64OptionList(m Complex64OptionList, f func(Complex64Option) []uint8) Uint8ArrList { acc := NilUint8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64OptionList: Complex64Option->[]uint16 */ func MapUint16ArrToComplex64OptionList(m Complex64OptionList, f func(Complex64Option) []uint16) Uint16ArrList { acc := NilUint16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64OptionList: Complex64Option->[]uint32 */ func MapUint32ArrToComplex64OptionList(m Complex64OptionList, f func(Complex64Option) []uint32) Uint32ArrList { acc := NilUint32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64OptionList: Complex64Option->[]uint64 */ func MapUint64ArrToComplex64OptionList(m Complex64OptionList, f func(Complex64Option) []uint64) Uint64ArrList { acc := NilUint64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64OptionList: Complex64Option->[]uintptr */ func MapUintptrArrToComplex64OptionList(m Complex64OptionList, f func(Complex64Option) []uintptr) UintptrArrList { acc := NilUintptrArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64OptionList: Complex64Option->[]byte */ func MapByteArrToComplex64OptionList(m Complex64OptionList, f func(Complex64Option) []byte) ByteArrList { acc := NilByteArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64OptionList: Complex64Option->[]rune */ func MapRuneArrToComplex64OptionList(m Complex64OptionList, f func(Complex64Option) []rune) RuneArrList { acc := NilRuneArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64OptionList: Complex64Option->[]float32 */ func MapFloat32ArrToComplex64OptionList(m Complex64OptionList, f func(Complex64Option) []float32) Float32ArrList { acc := NilFloat32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64OptionList: Complex64Option->[]float64 */ func MapFloat64ArrToComplex64OptionList(m Complex64OptionList, f func(Complex64Option) []float64) Float64ArrList { acc := NilFloat64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64OptionList: Complex64Option->[]complex64 */ func MapComplex64ArrToComplex64OptionList(m Complex64OptionList, f func(Complex64Option) []complex64) Complex64ArrList { acc := NilComplex64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64OptionList: Complex64Option->[]complex128 */ func MapComplex128ArrToComplex64OptionList(m Complex64OptionList, f func(Complex64Option) []complex128) Complex128ArrList { acc := NilComplex128ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64OptionList: Complex64Option->[]Any */ func MapAnyArrToComplex64OptionList(m Complex64OptionList, f func(Complex64Option) []Any) AnyArrList { acc := NilAnyArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64OptionList: Complex64Option->BoolList */ func MapBoolListToComplex64OptionList(m Complex64OptionList, f func(Complex64Option) BoolList) BoolListList { acc := NilBoolListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64OptionList: Complex64Option->StringList */ func MapStringListToComplex64OptionList(m Complex64OptionList, f func(Complex64Option) StringList) StringListList { acc := NilStringListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64OptionList: Complex64Option->IntList */ func MapIntListToComplex64OptionList(m Complex64OptionList, f func(Complex64Option) IntList) IntListList { acc := NilIntListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64OptionList: Complex64Option->Int8List */ func MapInt8ListToComplex64OptionList(m Complex64OptionList, f func(Complex64Option) Int8List) Int8ListList { acc := NilInt8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64OptionList: Complex64Option->Int16List */ func MapInt16ListToComplex64OptionList(m Complex64OptionList, f func(Complex64Option) Int16List) Int16ListList { acc := NilInt16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64OptionList: Complex64Option->Int32List */ func MapInt32ListToComplex64OptionList(m Complex64OptionList, f func(Complex64Option) Int32List) Int32ListList { acc := NilInt32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64OptionList: Complex64Option->Int64List */ func MapInt64ListToComplex64OptionList(m Complex64OptionList, f func(Complex64Option) Int64List) Int64ListList { acc := NilInt64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64OptionList: Complex64Option->UintList */ func MapUintListToComplex64OptionList(m Complex64OptionList, f func(Complex64Option) UintList) UintListList { acc := NilUintListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64OptionList: Complex64Option->Uint8List */ func MapUint8ListToComplex64OptionList(m Complex64OptionList, f func(Complex64Option) Uint8List) Uint8ListList { acc := NilUint8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64OptionList: Complex64Option->Uint16List */ func MapUint16ListToComplex64OptionList(m Complex64OptionList, f func(Complex64Option) Uint16List) Uint16ListList { acc := NilUint16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64OptionList: Complex64Option->Uint32List */ func MapUint32ListToComplex64OptionList(m Complex64OptionList, f func(Complex64Option) Uint32List) Uint32ListList { acc := NilUint32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64OptionList: Complex64Option->Uint64List */ func MapUint64ListToComplex64OptionList(m Complex64OptionList, f func(Complex64Option) Uint64List) Uint64ListList { acc := NilUint64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64OptionList: Complex64Option->UintptrList */ func MapUintptrListToComplex64OptionList(m Complex64OptionList, f func(Complex64Option) UintptrList) UintptrListList { acc := NilUintptrListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64OptionList: Complex64Option->ByteList */ func MapByteListToComplex64OptionList(m Complex64OptionList, f func(Complex64Option) ByteList) ByteListList { acc := NilByteListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64OptionList: Complex64Option->RuneList */ func MapRuneListToComplex64OptionList(m Complex64OptionList, f func(Complex64Option) RuneList) RuneListList { acc := NilRuneListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64OptionList: Complex64Option->Float32List */ func MapFloat32ListToComplex64OptionList(m Complex64OptionList, f func(Complex64Option) Float32List) Float32ListList { acc := NilFloat32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64OptionList: Complex64Option->Float64List */ func MapFloat64ListToComplex64OptionList(m Complex64OptionList, f func(Complex64Option) Float64List) Float64ListList { acc := NilFloat64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64OptionList: Complex64Option->Complex64List */ func MapComplex64ListToComplex64OptionList(m Complex64OptionList, f func(Complex64Option) Complex64List) Complex64ListList { acc := NilComplex64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64OptionList: Complex64Option->Complex128List */ func MapComplex128ListToComplex64OptionList(m Complex64OptionList, f func(Complex64Option) Complex128List) Complex128ListList { acc := NilComplex128ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64OptionList: Complex64Option->AnyList */ func MapAnyListToComplex64OptionList(m Complex64OptionList, f func(Complex64Option) AnyList) AnyListList { acc := NilAnyListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128OptionList: Complex128Option->bool */ func MapBoolToComplex128OptionList(m Complex128OptionList, f func(Complex128Option) bool) BoolList { acc := NilBoolList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128OptionList: Complex128Option->string */ func MapStringToComplex128OptionList(m Complex128OptionList, f func(Complex128Option) string) StringList { acc := NilStringList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128OptionList: Complex128Option->int */ func MapIntToComplex128OptionList(m Complex128OptionList, f func(Complex128Option) int) IntList { acc := NilIntList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128OptionList: Complex128Option->int8 */ func MapInt8ToComplex128OptionList(m Complex128OptionList, f func(Complex128Option) int8) Int8List { acc := NilInt8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128OptionList: Complex128Option->int16 */ func MapInt16ToComplex128OptionList(m Complex128OptionList, f func(Complex128Option) int16) Int16List { acc := NilInt16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128OptionList: Complex128Option->int32 */ func MapInt32ToComplex128OptionList(m Complex128OptionList, f func(Complex128Option) int32) Int32List { acc := NilInt32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128OptionList: Complex128Option->int64 */ func MapInt64ToComplex128OptionList(m Complex128OptionList, f func(Complex128Option) int64) Int64List { acc := NilInt64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128OptionList: Complex128Option->uint */ func MapUintToComplex128OptionList(m Complex128OptionList, f func(Complex128Option) uint) UintList { acc := NilUintList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128OptionList: Complex128Option->uint8 */ func MapUint8ToComplex128OptionList(m Complex128OptionList, f func(Complex128Option) uint8) Uint8List { acc := NilUint8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128OptionList: Complex128Option->uint16 */ func MapUint16ToComplex128OptionList(m Complex128OptionList, f func(Complex128Option) uint16) Uint16List { acc := NilUint16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128OptionList: Complex128Option->uint32 */ func MapUint32ToComplex128OptionList(m Complex128OptionList, f func(Complex128Option) uint32) Uint32List { acc := NilUint32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128OptionList: Complex128Option->uint64 */ func MapUint64ToComplex128OptionList(m Complex128OptionList, f func(Complex128Option) uint64) Uint64List { acc := NilUint64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128OptionList: Complex128Option->uintptr */ func MapUintptrToComplex128OptionList(m Complex128OptionList, f func(Complex128Option) uintptr) UintptrList { acc := NilUintptrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128OptionList: Complex128Option->byte */ func MapByteToComplex128OptionList(m Complex128OptionList, f func(Complex128Option) byte) ByteList { acc := NilByteList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128OptionList: Complex128Option->rune */ func MapRuneToComplex128OptionList(m Complex128OptionList, f func(Complex128Option) rune) RuneList { acc := NilRuneList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128OptionList: Complex128Option->float32 */ func MapFloat32ToComplex128OptionList(m Complex128OptionList, f func(Complex128Option) float32) Float32List { acc := NilFloat32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128OptionList: Complex128Option->float64 */ func MapFloat64ToComplex128OptionList(m Complex128OptionList, f func(Complex128Option) float64) Float64List { acc := NilFloat64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128OptionList: Complex128Option->complex64 */ func MapComplex64ToComplex128OptionList(m Complex128OptionList, f func(Complex128Option) complex64) Complex64List { acc := NilComplex64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128OptionList: Complex128Option->complex128 */ func MapComplex128ToComplex128OptionList(m Complex128OptionList, f func(Complex128Option) complex128) Complex128List { acc := NilComplex128List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128OptionList: Complex128Option->Any */ func MapAnyToComplex128OptionList(m Complex128OptionList, f func(Complex128Option) Any) AnyList { acc := NilAnyList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128OptionList: Complex128Option->BoolOption */ func MapBoolOptionToComplex128OptionList(m Complex128OptionList, f func(Complex128Option) BoolOption) BoolOptionList { acc := NilBoolOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128OptionList: Complex128Option->StringOption */ func MapStringOptionToComplex128OptionList(m Complex128OptionList, f func(Complex128Option) StringOption) StringOptionList { acc := NilStringOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128OptionList: Complex128Option->IntOption */ func MapIntOptionToComplex128OptionList(m Complex128OptionList, f func(Complex128Option) IntOption) IntOptionList { acc := NilIntOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128OptionList: Complex128Option->Int8Option */ func MapInt8OptionToComplex128OptionList(m Complex128OptionList, f func(Complex128Option) Int8Option) Int8OptionList { acc := NilInt8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128OptionList: Complex128Option->Int16Option */ func MapInt16OptionToComplex128OptionList(m Complex128OptionList, f func(Complex128Option) Int16Option) Int16OptionList { acc := NilInt16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128OptionList: Complex128Option->Int32Option */ func MapInt32OptionToComplex128OptionList(m Complex128OptionList, f func(Complex128Option) Int32Option) Int32OptionList { acc := NilInt32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128OptionList: Complex128Option->Int64Option */ func MapInt64OptionToComplex128OptionList(m Complex128OptionList, f func(Complex128Option) Int64Option) Int64OptionList { acc := NilInt64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128OptionList: Complex128Option->UintOption */ func MapUintOptionToComplex128OptionList(m Complex128OptionList, f func(Complex128Option) UintOption) UintOptionList { acc := NilUintOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128OptionList: Complex128Option->Uint8Option */ func MapUint8OptionToComplex128OptionList(m Complex128OptionList, f func(Complex128Option) Uint8Option) Uint8OptionList { acc := NilUint8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128OptionList: Complex128Option->Uint16Option */ func MapUint16OptionToComplex128OptionList(m Complex128OptionList, f func(Complex128Option) Uint16Option) Uint16OptionList { acc := NilUint16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128OptionList: Complex128Option->Uint32Option */ func MapUint32OptionToComplex128OptionList(m Complex128OptionList, f func(Complex128Option) Uint32Option) Uint32OptionList { acc := NilUint32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128OptionList: Complex128Option->Uint64Option */ func MapUint64OptionToComplex128OptionList(m Complex128OptionList, f func(Complex128Option) Uint64Option) Uint64OptionList { acc := NilUint64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128OptionList: Complex128Option->UintptrOption */ func MapUintptrOptionToComplex128OptionList(m Complex128OptionList, f func(Complex128Option) UintptrOption) UintptrOptionList { acc := NilUintptrOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128OptionList: Complex128Option->ByteOption */ func MapByteOptionToComplex128OptionList(m Complex128OptionList, f func(Complex128Option) ByteOption) ByteOptionList { acc := NilByteOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128OptionList: Complex128Option->RuneOption */ func MapRuneOptionToComplex128OptionList(m Complex128OptionList, f func(Complex128Option) RuneOption) RuneOptionList { acc := NilRuneOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128OptionList: Complex128Option->Float32Option */ func MapFloat32OptionToComplex128OptionList(m Complex128OptionList, f func(Complex128Option) Float32Option) Float32OptionList { acc := NilFloat32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128OptionList: Complex128Option->Float64Option */ func MapFloat64OptionToComplex128OptionList(m Complex128OptionList, f func(Complex128Option) Float64Option) Float64OptionList { acc := NilFloat64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128OptionList: Complex128Option->Complex64Option */ func MapComplex64OptionToComplex128OptionList(m Complex128OptionList, f func(Complex128Option) Complex64Option) Complex64OptionList { acc := NilComplex64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128OptionList: Complex128Option->Complex128Option */ func MapComplex128OptionToComplex128OptionList(m Complex128OptionList, f func(Complex128Option) Complex128Option) Complex128OptionList { acc := NilComplex128OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128OptionList: Complex128Option->AnyOption */ func MapAnyOptionToComplex128OptionList(m Complex128OptionList, f func(Complex128Option) AnyOption) AnyOptionList { acc := NilAnyOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128OptionList: Complex128Option->[]bool */ func MapBoolArrToComplex128OptionList(m Complex128OptionList, f func(Complex128Option) []bool) BoolArrList { acc := NilBoolArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128OptionList: Complex128Option->[]string */ func MapStringArrToComplex128OptionList(m Complex128OptionList, f func(Complex128Option) []string) StringArrList { acc := NilStringArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128OptionList: Complex128Option->[]int */ func MapIntArrToComplex128OptionList(m Complex128OptionList, f func(Complex128Option) []int) IntArrList { acc := NilIntArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128OptionList: Complex128Option->[]int8 */ func MapInt8ArrToComplex128OptionList(m Complex128OptionList, f func(Complex128Option) []int8) Int8ArrList { acc := NilInt8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128OptionList: Complex128Option->[]int16 */ func MapInt16ArrToComplex128OptionList(m Complex128OptionList, f func(Complex128Option) []int16) Int16ArrList { acc := NilInt16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128OptionList: Complex128Option->[]int32 */ func MapInt32ArrToComplex128OptionList(m Complex128OptionList, f func(Complex128Option) []int32) Int32ArrList { acc := NilInt32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128OptionList: Complex128Option->[]int64 */ func MapInt64ArrToComplex128OptionList(m Complex128OptionList, f func(Complex128Option) []int64) Int64ArrList { acc := NilInt64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128OptionList: Complex128Option->[]uint */ func MapUintArrToComplex128OptionList(m Complex128OptionList, f func(Complex128Option) []uint) UintArrList { acc := NilUintArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128OptionList: Complex128Option->[]uint8 */ func MapUint8ArrToComplex128OptionList(m Complex128OptionList, f func(Complex128Option) []uint8) Uint8ArrList { acc := NilUint8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128OptionList: Complex128Option->[]uint16 */ func MapUint16ArrToComplex128OptionList(m Complex128OptionList, f func(Complex128Option) []uint16) Uint16ArrList { acc := NilUint16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128OptionList: Complex128Option->[]uint32 */ func MapUint32ArrToComplex128OptionList(m Complex128OptionList, f func(Complex128Option) []uint32) Uint32ArrList { acc := NilUint32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128OptionList: Complex128Option->[]uint64 */ func MapUint64ArrToComplex128OptionList(m Complex128OptionList, f func(Complex128Option) []uint64) Uint64ArrList { acc := NilUint64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128OptionList: Complex128Option->[]uintptr */ func MapUintptrArrToComplex128OptionList(m Complex128OptionList, f func(Complex128Option) []uintptr) UintptrArrList { acc := NilUintptrArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128OptionList: Complex128Option->[]byte */ func MapByteArrToComplex128OptionList(m Complex128OptionList, f func(Complex128Option) []byte) ByteArrList { acc := NilByteArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128OptionList: Complex128Option->[]rune */ func MapRuneArrToComplex128OptionList(m Complex128OptionList, f func(Complex128Option) []rune) RuneArrList { acc := NilRuneArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128OptionList: Complex128Option->[]float32 */ func MapFloat32ArrToComplex128OptionList(m Complex128OptionList, f func(Complex128Option) []float32) Float32ArrList { acc := NilFloat32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128OptionList: Complex128Option->[]float64 */ func MapFloat64ArrToComplex128OptionList(m Complex128OptionList, f func(Complex128Option) []float64) Float64ArrList { acc := NilFloat64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128OptionList: Complex128Option->[]complex64 */ func MapComplex64ArrToComplex128OptionList(m Complex128OptionList, f func(Complex128Option) []complex64) Complex64ArrList { acc := NilComplex64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128OptionList: Complex128Option->[]complex128 */ func MapComplex128ArrToComplex128OptionList(m Complex128OptionList, f func(Complex128Option) []complex128) Complex128ArrList { acc := NilComplex128ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128OptionList: Complex128Option->[]Any */ func MapAnyArrToComplex128OptionList(m Complex128OptionList, f func(Complex128Option) []Any) AnyArrList { acc := NilAnyArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128OptionList: Complex128Option->BoolList */ func MapBoolListToComplex128OptionList(m Complex128OptionList, f func(Complex128Option) BoolList) BoolListList { acc := NilBoolListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128OptionList: Complex128Option->StringList */ func MapStringListToComplex128OptionList(m Complex128OptionList, f func(Complex128Option) StringList) StringListList { acc := NilStringListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128OptionList: Complex128Option->IntList */ func MapIntListToComplex128OptionList(m Complex128OptionList, f func(Complex128Option) IntList) IntListList { acc := NilIntListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128OptionList: Complex128Option->Int8List */ func MapInt8ListToComplex128OptionList(m Complex128OptionList, f func(Complex128Option) Int8List) Int8ListList { acc := NilInt8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128OptionList: Complex128Option->Int16List */ func MapInt16ListToComplex128OptionList(m Complex128OptionList, f func(Complex128Option) Int16List) Int16ListList { acc := NilInt16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128OptionList: Complex128Option->Int32List */ func MapInt32ListToComplex128OptionList(m Complex128OptionList, f func(Complex128Option) Int32List) Int32ListList { acc := NilInt32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128OptionList: Complex128Option->Int64List */ func MapInt64ListToComplex128OptionList(m Complex128OptionList, f func(Complex128Option) Int64List) Int64ListList { acc := NilInt64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128OptionList: Complex128Option->UintList */ func MapUintListToComplex128OptionList(m Complex128OptionList, f func(Complex128Option) UintList) UintListList { acc := NilUintListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128OptionList: Complex128Option->Uint8List */ func MapUint8ListToComplex128OptionList(m Complex128OptionList, f func(Complex128Option) Uint8List) Uint8ListList { acc := NilUint8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128OptionList: Complex128Option->Uint16List */ func MapUint16ListToComplex128OptionList(m Complex128OptionList, f func(Complex128Option) Uint16List) Uint16ListList { acc := NilUint16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128OptionList: Complex128Option->Uint32List */ func MapUint32ListToComplex128OptionList(m Complex128OptionList, f func(Complex128Option) Uint32List) Uint32ListList { acc := NilUint32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128OptionList: Complex128Option->Uint64List */ func MapUint64ListToComplex128OptionList(m Complex128OptionList, f func(Complex128Option) Uint64List) Uint64ListList { acc := NilUint64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128OptionList: Complex128Option->UintptrList */ func MapUintptrListToComplex128OptionList(m Complex128OptionList, f func(Complex128Option) UintptrList) UintptrListList { acc := NilUintptrListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128OptionList: Complex128Option->ByteList */ func MapByteListToComplex128OptionList(m Complex128OptionList, f func(Complex128Option) ByteList) ByteListList { acc := NilByteListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128OptionList: Complex128Option->RuneList */ func MapRuneListToComplex128OptionList(m Complex128OptionList, f func(Complex128Option) RuneList) RuneListList { acc := NilRuneListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128OptionList: Complex128Option->Float32List */ func MapFloat32ListToComplex128OptionList(m Complex128OptionList, f func(Complex128Option) Float32List) Float32ListList { acc := NilFloat32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128OptionList: Complex128Option->Float64List */ func MapFloat64ListToComplex128OptionList(m Complex128OptionList, f func(Complex128Option) Float64List) Float64ListList { acc := NilFloat64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128OptionList: Complex128Option->Complex64List */ func MapComplex64ListToComplex128OptionList(m Complex128OptionList, f func(Complex128Option) Complex64List) Complex64ListList { acc := NilComplex64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128OptionList: Complex128Option->Complex128List */ func MapComplex128ListToComplex128OptionList(m Complex128OptionList, f func(Complex128Option) Complex128List) Complex128ListList { acc := NilComplex128ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128OptionList: Complex128Option->AnyList */ func MapAnyListToComplex128OptionList(m Complex128OptionList, f func(Complex128Option) AnyList) AnyListList { acc := NilAnyListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyOptionList: AnyOption->bool */ func MapBoolToAnyOptionList(m AnyOptionList, f func(AnyOption) bool) BoolList { acc := NilBoolList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyOptionList: AnyOption->string */ func MapStringToAnyOptionList(m AnyOptionList, f func(AnyOption) string) StringList { acc := NilStringList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyOptionList: AnyOption->int */ func MapIntToAnyOptionList(m AnyOptionList, f func(AnyOption) int) IntList { acc := NilIntList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyOptionList: AnyOption->int8 */ func MapInt8ToAnyOptionList(m AnyOptionList, f func(AnyOption) int8) Int8List { acc := NilInt8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyOptionList: AnyOption->int16 */ func MapInt16ToAnyOptionList(m AnyOptionList, f func(AnyOption) int16) Int16List { acc := NilInt16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyOptionList: AnyOption->int32 */ func MapInt32ToAnyOptionList(m AnyOptionList, f func(AnyOption) int32) Int32List { acc := NilInt32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyOptionList: AnyOption->int64 */ func MapInt64ToAnyOptionList(m AnyOptionList, f func(AnyOption) int64) Int64List { acc := NilInt64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyOptionList: AnyOption->uint */ func MapUintToAnyOptionList(m AnyOptionList, f func(AnyOption) uint) UintList { acc := NilUintList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyOptionList: AnyOption->uint8 */ func MapUint8ToAnyOptionList(m AnyOptionList, f func(AnyOption) uint8) Uint8List { acc := NilUint8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyOptionList: AnyOption->uint16 */ func MapUint16ToAnyOptionList(m AnyOptionList, f func(AnyOption) uint16) Uint16List { acc := NilUint16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyOptionList: AnyOption->uint32 */ func MapUint32ToAnyOptionList(m AnyOptionList, f func(AnyOption) uint32) Uint32List { acc := NilUint32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyOptionList: AnyOption->uint64 */ func MapUint64ToAnyOptionList(m AnyOptionList, f func(AnyOption) uint64) Uint64List { acc := NilUint64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyOptionList: AnyOption->uintptr */ func MapUintptrToAnyOptionList(m AnyOptionList, f func(AnyOption) uintptr) UintptrList { acc := NilUintptrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyOptionList: AnyOption->byte */ func MapByteToAnyOptionList(m AnyOptionList, f func(AnyOption) byte) ByteList { acc := NilByteList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyOptionList: AnyOption->rune */ func MapRuneToAnyOptionList(m AnyOptionList, f func(AnyOption) rune) RuneList { acc := NilRuneList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyOptionList: AnyOption->float32 */ func MapFloat32ToAnyOptionList(m AnyOptionList, f func(AnyOption) float32) Float32List { acc := NilFloat32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyOptionList: AnyOption->float64 */ func MapFloat64ToAnyOptionList(m AnyOptionList, f func(AnyOption) float64) Float64List { acc := NilFloat64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyOptionList: AnyOption->complex64 */ func MapComplex64ToAnyOptionList(m AnyOptionList, f func(AnyOption) complex64) Complex64List { acc := NilComplex64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyOptionList: AnyOption->complex128 */ func MapComplex128ToAnyOptionList(m AnyOptionList, f func(AnyOption) complex128) Complex128List { acc := NilComplex128List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyOptionList: AnyOption->Any */ func MapAnyToAnyOptionList(m AnyOptionList, f func(AnyOption) Any) AnyList { acc := NilAnyList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyOptionList: AnyOption->BoolOption */ func MapBoolOptionToAnyOptionList(m AnyOptionList, f func(AnyOption) BoolOption) BoolOptionList { acc := NilBoolOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyOptionList: AnyOption->StringOption */ func MapStringOptionToAnyOptionList(m AnyOptionList, f func(AnyOption) StringOption) StringOptionList { acc := NilStringOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyOptionList: AnyOption->IntOption */ func MapIntOptionToAnyOptionList(m AnyOptionList, f func(AnyOption) IntOption) IntOptionList { acc := NilIntOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyOptionList: AnyOption->Int8Option */ func MapInt8OptionToAnyOptionList(m AnyOptionList, f func(AnyOption) Int8Option) Int8OptionList { acc := NilInt8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyOptionList: AnyOption->Int16Option */ func MapInt16OptionToAnyOptionList(m AnyOptionList, f func(AnyOption) Int16Option) Int16OptionList { acc := NilInt16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyOptionList: AnyOption->Int32Option */ func MapInt32OptionToAnyOptionList(m AnyOptionList, f func(AnyOption) Int32Option) Int32OptionList { acc := NilInt32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyOptionList: AnyOption->Int64Option */ func MapInt64OptionToAnyOptionList(m AnyOptionList, f func(AnyOption) Int64Option) Int64OptionList { acc := NilInt64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyOptionList: AnyOption->UintOption */ func MapUintOptionToAnyOptionList(m AnyOptionList, f func(AnyOption) UintOption) UintOptionList { acc := NilUintOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyOptionList: AnyOption->Uint8Option */ func MapUint8OptionToAnyOptionList(m AnyOptionList, f func(AnyOption) Uint8Option) Uint8OptionList { acc := NilUint8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyOptionList: AnyOption->Uint16Option */ func MapUint16OptionToAnyOptionList(m AnyOptionList, f func(AnyOption) Uint16Option) Uint16OptionList { acc := NilUint16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyOptionList: AnyOption->Uint32Option */ func MapUint32OptionToAnyOptionList(m AnyOptionList, f func(AnyOption) Uint32Option) Uint32OptionList { acc := NilUint32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyOptionList: AnyOption->Uint64Option */ func MapUint64OptionToAnyOptionList(m AnyOptionList, f func(AnyOption) Uint64Option) Uint64OptionList { acc := NilUint64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyOptionList: AnyOption->UintptrOption */ func MapUintptrOptionToAnyOptionList(m AnyOptionList, f func(AnyOption) UintptrOption) UintptrOptionList { acc := NilUintptrOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyOptionList: AnyOption->ByteOption */ func MapByteOptionToAnyOptionList(m AnyOptionList, f func(AnyOption) ByteOption) ByteOptionList { acc := NilByteOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyOptionList: AnyOption->RuneOption */ func MapRuneOptionToAnyOptionList(m AnyOptionList, f func(AnyOption) RuneOption) RuneOptionList { acc := NilRuneOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyOptionList: AnyOption->Float32Option */ func MapFloat32OptionToAnyOptionList(m AnyOptionList, f func(AnyOption) Float32Option) Float32OptionList { acc := NilFloat32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyOptionList: AnyOption->Float64Option */ func MapFloat64OptionToAnyOptionList(m AnyOptionList, f func(AnyOption) Float64Option) Float64OptionList { acc := NilFloat64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyOptionList: AnyOption->Complex64Option */ func MapComplex64OptionToAnyOptionList(m AnyOptionList, f func(AnyOption) Complex64Option) Complex64OptionList { acc := NilComplex64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyOptionList: AnyOption->Complex128Option */ func MapComplex128OptionToAnyOptionList(m AnyOptionList, f func(AnyOption) Complex128Option) Complex128OptionList { acc := NilComplex128OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyOptionList: AnyOption->AnyOption */ func MapAnyOptionToAnyOptionList(m AnyOptionList, f func(AnyOption) AnyOption) AnyOptionList { acc := NilAnyOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyOptionList: AnyOption->[]bool */ func MapBoolArrToAnyOptionList(m AnyOptionList, f func(AnyOption) []bool) BoolArrList { acc := NilBoolArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyOptionList: AnyOption->[]string */ func MapStringArrToAnyOptionList(m AnyOptionList, f func(AnyOption) []string) StringArrList { acc := NilStringArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyOptionList: AnyOption->[]int */ func MapIntArrToAnyOptionList(m AnyOptionList, f func(AnyOption) []int) IntArrList { acc := NilIntArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyOptionList: AnyOption->[]int8 */ func MapInt8ArrToAnyOptionList(m AnyOptionList, f func(AnyOption) []int8) Int8ArrList { acc := NilInt8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyOptionList: AnyOption->[]int16 */ func MapInt16ArrToAnyOptionList(m AnyOptionList, f func(AnyOption) []int16) Int16ArrList { acc := NilInt16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyOptionList: AnyOption->[]int32 */ func MapInt32ArrToAnyOptionList(m AnyOptionList, f func(AnyOption) []int32) Int32ArrList { acc := NilInt32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyOptionList: AnyOption->[]int64 */ func MapInt64ArrToAnyOptionList(m AnyOptionList, f func(AnyOption) []int64) Int64ArrList { acc := NilInt64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyOptionList: AnyOption->[]uint */ func MapUintArrToAnyOptionList(m AnyOptionList, f func(AnyOption) []uint) UintArrList { acc := NilUintArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyOptionList: AnyOption->[]uint8 */ func MapUint8ArrToAnyOptionList(m AnyOptionList, f func(AnyOption) []uint8) Uint8ArrList { acc := NilUint8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyOptionList: AnyOption->[]uint16 */ func MapUint16ArrToAnyOptionList(m AnyOptionList, f func(AnyOption) []uint16) Uint16ArrList { acc := NilUint16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyOptionList: AnyOption->[]uint32 */ func MapUint32ArrToAnyOptionList(m AnyOptionList, f func(AnyOption) []uint32) Uint32ArrList { acc := NilUint32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyOptionList: AnyOption->[]uint64 */ func MapUint64ArrToAnyOptionList(m AnyOptionList, f func(AnyOption) []uint64) Uint64ArrList { acc := NilUint64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyOptionList: AnyOption->[]uintptr */ func MapUintptrArrToAnyOptionList(m AnyOptionList, f func(AnyOption) []uintptr) UintptrArrList { acc := NilUintptrArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyOptionList: AnyOption->[]byte */ func MapByteArrToAnyOptionList(m AnyOptionList, f func(AnyOption) []byte) ByteArrList { acc := NilByteArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyOptionList: AnyOption->[]rune */ func MapRuneArrToAnyOptionList(m AnyOptionList, f func(AnyOption) []rune) RuneArrList { acc := NilRuneArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyOptionList: AnyOption->[]float32 */ func MapFloat32ArrToAnyOptionList(m AnyOptionList, f func(AnyOption) []float32) Float32ArrList { acc := NilFloat32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyOptionList: AnyOption->[]float64 */ func MapFloat64ArrToAnyOptionList(m AnyOptionList, f func(AnyOption) []float64) Float64ArrList { acc := NilFloat64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyOptionList: AnyOption->[]complex64 */ func MapComplex64ArrToAnyOptionList(m AnyOptionList, f func(AnyOption) []complex64) Complex64ArrList { acc := NilComplex64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyOptionList: AnyOption->[]complex128 */ func MapComplex128ArrToAnyOptionList(m AnyOptionList, f func(AnyOption) []complex128) Complex128ArrList { acc := NilComplex128ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyOptionList: AnyOption->[]Any */ func MapAnyArrToAnyOptionList(m AnyOptionList, f func(AnyOption) []Any) AnyArrList { acc := NilAnyArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyOptionList: AnyOption->BoolList */ func MapBoolListToAnyOptionList(m AnyOptionList, f func(AnyOption) BoolList) BoolListList { acc := NilBoolListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyOptionList: AnyOption->StringList */ func MapStringListToAnyOptionList(m AnyOptionList, f func(AnyOption) StringList) StringListList { acc := NilStringListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyOptionList: AnyOption->IntList */ func MapIntListToAnyOptionList(m AnyOptionList, f func(AnyOption) IntList) IntListList { acc := NilIntListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyOptionList: AnyOption->Int8List */ func MapInt8ListToAnyOptionList(m AnyOptionList, f func(AnyOption) Int8List) Int8ListList { acc := NilInt8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyOptionList: AnyOption->Int16List */ func MapInt16ListToAnyOptionList(m AnyOptionList, f func(AnyOption) Int16List) Int16ListList { acc := NilInt16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyOptionList: AnyOption->Int32List */ func MapInt32ListToAnyOptionList(m AnyOptionList, f func(AnyOption) Int32List) Int32ListList { acc := NilInt32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyOptionList: AnyOption->Int64List */ func MapInt64ListToAnyOptionList(m AnyOptionList, f func(AnyOption) Int64List) Int64ListList { acc := NilInt64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyOptionList: AnyOption->UintList */ func MapUintListToAnyOptionList(m AnyOptionList, f func(AnyOption) UintList) UintListList { acc := NilUintListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyOptionList: AnyOption->Uint8List */ func MapUint8ListToAnyOptionList(m AnyOptionList, f func(AnyOption) Uint8List) Uint8ListList { acc := NilUint8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyOptionList: AnyOption->Uint16List */ func MapUint16ListToAnyOptionList(m AnyOptionList, f func(AnyOption) Uint16List) Uint16ListList { acc := NilUint16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyOptionList: AnyOption->Uint32List */ func MapUint32ListToAnyOptionList(m AnyOptionList, f func(AnyOption) Uint32List) Uint32ListList { acc := NilUint32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyOptionList: AnyOption->Uint64List */ func MapUint64ListToAnyOptionList(m AnyOptionList, f func(AnyOption) Uint64List) Uint64ListList { acc := NilUint64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyOptionList: AnyOption->UintptrList */ func MapUintptrListToAnyOptionList(m AnyOptionList, f func(AnyOption) UintptrList) UintptrListList { acc := NilUintptrListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyOptionList: AnyOption->ByteList */ func MapByteListToAnyOptionList(m AnyOptionList, f func(AnyOption) ByteList) ByteListList { acc := NilByteListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyOptionList: AnyOption->RuneList */ func MapRuneListToAnyOptionList(m AnyOptionList, f func(AnyOption) RuneList) RuneListList { acc := NilRuneListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyOptionList: AnyOption->Float32List */ func MapFloat32ListToAnyOptionList(m AnyOptionList, f func(AnyOption) Float32List) Float32ListList { acc := NilFloat32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyOptionList: AnyOption->Float64List */ func MapFloat64ListToAnyOptionList(m AnyOptionList, f func(AnyOption) Float64List) Float64ListList { acc := NilFloat64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyOptionList: AnyOption->Complex64List */ func MapComplex64ListToAnyOptionList(m AnyOptionList, f func(AnyOption) Complex64List) Complex64ListList { acc := NilComplex64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyOptionList: AnyOption->Complex128List */ func MapComplex128ListToAnyOptionList(m AnyOptionList, f func(AnyOption) Complex128List) Complex128ListList { acc := NilComplex128ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyOptionList: AnyOption->AnyList */ func MapAnyListToAnyOptionList(m AnyOptionList, f func(AnyOption) AnyList) AnyListList { acc := NilAnyListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolArrList: []bool->bool */ func MapBoolToBoolArrList(m BoolArrList, f func([]bool) bool) BoolList { acc := NilBoolList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolArrList: []bool->string */ func MapStringToBoolArrList(m BoolArrList, f func([]bool) string) StringList { acc := NilStringList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolArrList: []bool->int */ func MapIntToBoolArrList(m BoolArrList, f func([]bool) int) IntList { acc := NilIntList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolArrList: []bool->int8 */ func MapInt8ToBoolArrList(m BoolArrList, f func([]bool) int8) Int8List { acc := NilInt8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolArrList: []bool->int16 */ func MapInt16ToBoolArrList(m BoolArrList, f func([]bool) int16) Int16List { acc := NilInt16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolArrList: []bool->int32 */ func MapInt32ToBoolArrList(m BoolArrList, f func([]bool) int32) Int32List { acc := NilInt32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolArrList: []bool->int64 */ func MapInt64ToBoolArrList(m BoolArrList, f func([]bool) int64) Int64List { acc := NilInt64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolArrList: []bool->uint */ func MapUintToBoolArrList(m BoolArrList, f func([]bool) uint) UintList { acc := NilUintList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolArrList: []bool->uint8 */ func MapUint8ToBoolArrList(m BoolArrList, f func([]bool) uint8) Uint8List { acc := NilUint8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolArrList: []bool->uint16 */ func MapUint16ToBoolArrList(m BoolArrList, f func([]bool) uint16) Uint16List { acc := NilUint16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolArrList: []bool->uint32 */ func MapUint32ToBoolArrList(m BoolArrList, f func([]bool) uint32) Uint32List { acc := NilUint32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolArrList: []bool->uint64 */ func MapUint64ToBoolArrList(m BoolArrList, f func([]bool) uint64) Uint64List { acc := NilUint64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolArrList: []bool->uintptr */ func MapUintptrToBoolArrList(m BoolArrList, f func([]bool) uintptr) UintptrList { acc := NilUintptrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolArrList: []bool->byte */ func MapByteToBoolArrList(m BoolArrList, f func([]bool) byte) ByteList { acc := NilByteList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolArrList: []bool->rune */ func MapRuneToBoolArrList(m BoolArrList, f func([]bool) rune) RuneList { acc := NilRuneList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolArrList: []bool->float32 */ func MapFloat32ToBoolArrList(m BoolArrList, f func([]bool) float32) Float32List { acc := NilFloat32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolArrList: []bool->float64 */ func MapFloat64ToBoolArrList(m BoolArrList, f func([]bool) float64) Float64List { acc := NilFloat64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolArrList: []bool->complex64 */ func MapComplex64ToBoolArrList(m BoolArrList, f func([]bool) complex64) Complex64List { acc := NilComplex64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolArrList: []bool->complex128 */ func MapComplex128ToBoolArrList(m BoolArrList, f func([]bool) complex128) Complex128List { acc := NilComplex128List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolArrList: []bool->Any */ func MapAnyToBoolArrList(m BoolArrList, f func([]bool) Any) AnyList { acc := NilAnyList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolArrList: []bool->BoolOption */ func MapBoolOptionToBoolArrList(m BoolArrList, f func([]bool) BoolOption) BoolOptionList { acc := NilBoolOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolArrList: []bool->StringOption */ func MapStringOptionToBoolArrList(m BoolArrList, f func([]bool) StringOption) StringOptionList { acc := NilStringOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolArrList: []bool->IntOption */ func MapIntOptionToBoolArrList(m BoolArrList, f func([]bool) IntOption) IntOptionList { acc := NilIntOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolArrList: []bool->Int8Option */ func MapInt8OptionToBoolArrList(m BoolArrList, f func([]bool) Int8Option) Int8OptionList { acc := NilInt8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolArrList: []bool->Int16Option */ func MapInt16OptionToBoolArrList(m BoolArrList, f func([]bool) Int16Option) Int16OptionList { acc := NilInt16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolArrList: []bool->Int32Option */ func MapInt32OptionToBoolArrList(m BoolArrList, f func([]bool) Int32Option) Int32OptionList { acc := NilInt32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolArrList: []bool->Int64Option */ func MapInt64OptionToBoolArrList(m BoolArrList, f func([]bool) Int64Option) Int64OptionList { acc := NilInt64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolArrList: []bool->UintOption */ func MapUintOptionToBoolArrList(m BoolArrList, f func([]bool) UintOption) UintOptionList { acc := NilUintOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolArrList: []bool->Uint8Option */ func MapUint8OptionToBoolArrList(m BoolArrList, f func([]bool) Uint8Option) Uint8OptionList { acc := NilUint8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolArrList: []bool->Uint16Option */ func MapUint16OptionToBoolArrList(m BoolArrList, f func([]bool) Uint16Option) Uint16OptionList { acc := NilUint16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolArrList: []bool->Uint32Option */ func MapUint32OptionToBoolArrList(m BoolArrList, f func([]bool) Uint32Option) Uint32OptionList { acc := NilUint32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolArrList: []bool->Uint64Option */ func MapUint64OptionToBoolArrList(m BoolArrList, f func([]bool) Uint64Option) Uint64OptionList { acc := NilUint64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolArrList: []bool->UintptrOption */ func MapUintptrOptionToBoolArrList(m BoolArrList, f func([]bool) UintptrOption) UintptrOptionList { acc := NilUintptrOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolArrList: []bool->ByteOption */ func MapByteOptionToBoolArrList(m BoolArrList, f func([]bool) ByteOption) ByteOptionList { acc := NilByteOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolArrList: []bool->RuneOption */ func MapRuneOptionToBoolArrList(m BoolArrList, f func([]bool) RuneOption) RuneOptionList { acc := NilRuneOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolArrList: []bool->Float32Option */ func MapFloat32OptionToBoolArrList(m BoolArrList, f func([]bool) Float32Option) Float32OptionList { acc := NilFloat32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolArrList: []bool->Float64Option */ func MapFloat64OptionToBoolArrList(m BoolArrList, f func([]bool) Float64Option) Float64OptionList { acc := NilFloat64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolArrList: []bool->Complex64Option */ func MapComplex64OptionToBoolArrList(m BoolArrList, f func([]bool) Complex64Option) Complex64OptionList { acc := NilComplex64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolArrList: []bool->Complex128Option */ func MapComplex128OptionToBoolArrList(m BoolArrList, f func([]bool) Complex128Option) Complex128OptionList { acc := NilComplex128OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolArrList: []bool->AnyOption */ func MapAnyOptionToBoolArrList(m BoolArrList, f func([]bool) AnyOption) AnyOptionList { acc := NilAnyOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolArrList: []bool->[]bool */ func MapBoolArrToBoolArrList(m BoolArrList, f func([]bool) []bool) BoolArrList { acc := NilBoolArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolArrList: []bool->[]string */ func MapStringArrToBoolArrList(m BoolArrList, f func([]bool) []string) StringArrList { acc := NilStringArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolArrList: []bool->[]int */ func MapIntArrToBoolArrList(m BoolArrList, f func([]bool) []int) IntArrList { acc := NilIntArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolArrList: []bool->[]int8 */ func MapInt8ArrToBoolArrList(m BoolArrList, f func([]bool) []int8) Int8ArrList { acc := NilInt8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolArrList: []bool->[]int16 */ func MapInt16ArrToBoolArrList(m BoolArrList, f func([]bool) []int16) Int16ArrList { acc := NilInt16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolArrList: []bool->[]int32 */ func MapInt32ArrToBoolArrList(m BoolArrList, f func([]bool) []int32) Int32ArrList { acc := NilInt32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolArrList: []bool->[]int64 */ func MapInt64ArrToBoolArrList(m BoolArrList, f func([]bool) []int64) Int64ArrList { acc := NilInt64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolArrList: []bool->[]uint */ func MapUintArrToBoolArrList(m BoolArrList, f func([]bool) []uint) UintArrList { acc := NilUintArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolArrList: []bool->[]uint8 */ func MapUint8ArrToBoolArrList(m BoolArrList, f func([]bool) []uint8) Uint8ArrList { acc := NilUint8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolArrList: []bool->[]uint16 */ func MapUint16ArrToBoolArrList(m BoolArrList, f func([]bool) []uint16) Uint16ArrList { acc := NilUint16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolArrList: []bool->[]uint32 */ func MapUint32ArrToBoolArrList(m BoolArrList, f func([]bool) []uint32) Uint32ArrList { acc := NilUint32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolArrList: []bool->[]uint64 */ func MapUint64ArrToBoolArrList(m BoolArrList, f func([]bool) []uint64) Uint64ArrList { acc := NilUint64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolArrList: []bool->[]uintptr */ func MapUintptrArrToBoolArrList(m BoolArrList, f func([]bool) []uintptr) UintptrArrList { acc := NilUintptrArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolArrList: []bool->[]byte */ func MapByteArrToBoolArrList(m BoolArrList, f func([]bool) []byte) ByteArrList { acc := NilByteArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolArrList: []bool->[]rune */ func MapRuneArrToBoolArrList(m BoolArrList, f func([]bool) []rune) RuneArrList { acc := NilRuneArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolArrList: []bool->[]float32 */ func MapFloat32ArrToBoolArrList(m BoolArrList, f func([]bool) []float32) Float32ArrList { acc := NilFloat32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolArrList: []bool->[]float64 */ func MapFloat64ArrToBoolArrList(m BoolArrList, f func([]bool) []float64) Float64ArrList { acc := NilFloat64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolArrList: []bool->[]complex64 */ func MapComplex64ArrToBoolArrList(m BoolArrList, f func([]bool) []complex64) Complex64ArrList { acc := NilComplex64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolArrList: []bool->[]complex128 */ func MapComplex128ArrToBoolArrList(m BoolArrList, f func([]bool) []complex128) Complex128ArrList { acc := NilComplex128ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolArrList: []bool->[]Any */ func MapAnyArrToBoolArrList(m BoolArrList, f func([]bool) []Any) AnyArrList { acc := NilAnyArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolArrList: []bool->BoolList */ func MapBoolListToBoolArrList(m BoolArrList, f func([]bool) BoolList) BoolListList { acc := NilBoolListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolArrList: []bool->StringList */ func MapStringListToBoolArrList(m BoolArrList, f func([]bool) StringList) StringListList { acc := NilStringListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolArrList: []bool->IntList */ func MapIntListToBoolArrList(m BoolArrList, f func([]bool) IntList) IntListList { acc := NilIntListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolArrList: []bool->Int8List */ func MapInt8ListToBoolArrList(m BoolArrList, f func([]bool) Int8List) Int8ListList { acc := NilInt8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolArrList: []bool->Int16List */ func MapInt16ListToBoolArrList(m BoolArrList, f func([]bool) Int16List) Int16ListList { acc := NilInt16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolArrList: []bool->Int32List */ func MapInt32ListToBoolArrList(m BoolArrList, f func([]bool) Int32List) Int32ListList { acc := NilInt32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolArrList: []bool->Int64List */ func MapInt64ListToBoolArrList(m BoolArrList, f func([]bool) Int64List) Int64ListList { acc := NilInt64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolArrList: []bool->UintList */ func MapUintListToBoolArrList(m BoolArrList, f func([]bool) UintList) UintListList { acc := NilUintListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolArrList: []bool->Uint8List */ func MapUint8ListToBoolArrList(m BoolArrList, f func([]bool) Uint8List) Uint8ListList { acc := NilUint8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolArrList: []bool->Uint16List */ func MapUint16ListToBoolArrList(m BoolArrList, f func([]bool) Uint16List) Uint16ListList { acc := NilUint16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolArrList: []bool->Uint32List */ func MapUint32ListToBoolArrList(m BoolArrList, f func([]bool) Uint32List) Uint32ListList { acc := NilUint32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolArrList: []bool->Uint64List */ func MapUint64ListToBoolArrList(m BoolArrList, f func([]bool) Uint64List) Uint64ListList { acc := NilUint64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolArrList: []bool->UintptrList */ func MapUintptrListToBoolArrList(m BoolArrList, f func([]bool) UintptrList) UintptrListList { acc := NilUintptrListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolArrList: []bool->ByteList */ func MapByteListToBoolArrList(m BoolArrList, f func([]bool) ByteList) ByteListList { acc := NilByteListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolArrList: []bool->RuneList */ func MapRuneListToBoolArrList(m BoolArrList, f func([]bool) RuneList) RuneListList { acc := NilRuneListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolArrList: []bool->Float32List */ func MapFloat32ListToBoolArrList(m BoolArrList, f func([]bool) Float32List) Float32ListList { acc := NilFloat32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolArrList: []bool->Float64List */ func MapFloat64ListToBoolArrList(m BoolArrList, f func([]bool) Float64List) Float64ListList { acc := NilFloat64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolArrList: []bool->Complex64List */ func MapComplex64ListToBoolArrList(m BoolArrList, f func([]bool) Complex64List) Complex64ListList { acc := NilComplex64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolArrList: []bool->Complex128List */ func MapComplex128ListToBoolArrList(m BoolArrList, f func([]bool) Complex128List) Complex128ListList { acc := NilComplex128ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolArrList: []bool->AnyList */ func MapAnyListToBoolArrList(m BoolArrList, f func([]bool) AnyList) AnyListList { acc := NilAnyListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringArrList: []string->bool */ func MapBoolToStringArrList(m StringArrList, f func([]string) bool) BoolList { acc := NilBoolList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringArrList: []string->string */ func MapStringToStringArrList(m StringArrList, f func([]string) string) StringList { acc := NilStringList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringArrList: []string->int */ func MapIntToStringArrList(m StringArrList, f func([]string) int) IntList { acc := NilIntList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringArrList: []string->int8 */ func MapInt8ToStringArrList(m StringArrList, f func([]string) int8) Int8List { acc := NilInt8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringArrList: []string->int16 */ func MapInt16ToStringArrList(m StringArrList, f func([]string) int16) Int16List { acc := NilInt16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringArrList: []string->int32 */ func MapInt32ToStringArrList(m StringArrList, f func([]string) int32) Int32List { acc := NilInt32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringArrList: []string->int64 */ func MapInt64ToStringArrList(m StringArrList, f func([]string) int64) Int64List { acc := NilInt64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringArrList: []string->uint */ func MapUintToStringArrList(m StringArrList, f func([]string) uint) UintList { acc := NilUintList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringArrList: []string->uint8 */ func MapUint8ToStringArrList(m StringArrList, f func([]string) uint8) Uint8List { acc := NilUint8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringArrList: []string->uint16 */ func MapUint16ToStringArrList(m StringArrList, f func([]string) uint16) Uint16List { acc := NilUint16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringArrList: []string->uint32 */ func MapUint32ToStringArrList(m StringArrList, f func([]string) uint32) Uint32List { acc := NilUint32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringArrList: []string->uint64 */ func MapUint64ToStringArrList(m StringArrList, f func([]string) uint64) Uint64List { acc := NilUint64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringArrList: []string->uintptr */ func MapUintptrToStringArrList(m StringArrList, f func([]string) uintptr) UintptrList { acc := NilUintptrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringArrList: []string->byte */ func MapByteToStringArrList(m StringArrList, f func([]string) byte) ByteList { acc := NilByteList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringArrList: []string->rune */ func MapRuneToStringArrList(m StringArrList, f func([]string) rune) RuneList { acc := NilRuneList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringArrList: []string->float32 */ func MapFloat32ToStringArrList(m StringArrList, f func([]string) float32) Float32List { acc := NilFloat32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringArrList: []string->float64 */ func MapFloat64ToStringArrList(m StringArrList, f func([]string) float64) Float64List { acc := NilFloat64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringArrList: []string->complex64 */ func MapComplex64ToStringArrList(m StringArrList, f func([]string) complex64) Complex64List { acc := NilComplex64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringArrList: []string->complex128 */ func MapComplex128ToStringArrList(m StringArrList, f func([]string) complex128) Complex128List { acc := NilComplex128List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringArrList: []string->Any */ func MapAnyToStringArrList(m StringArrList, f func([]string) Any) AnyList { acc := NilAnyList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringArrList: []string->BoolOption */ func MapBoolOptionToStringArrList(m StringArrList, f func([]string) BoolOption) BoolOptionList { acc := NilBoolOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringArrList: []string->StringOption */ func MapStringOptionToStringArrList(m StringArrList, f func([]string) StringOption) StringOptionList { acc := NilStringOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringArrList: []string->IntOption */ func MapIntOptionToStringArrList(m StringArrList, f func([]string) IntOption) IntOptionList { acc := NilIntOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringArrList: []string->Int8Option */ func MapInt8OptionToStringArrList(m StringArrList, f func([]string) Int8Option) Int8OptionList { acc := NilInt8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringArrList: []string->Int16Option */ func MapInt16OptionToStringArrList(m StringArrList, f func([]string) Int16Option) Int16OptionList { acc := NilInt16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringArrList: []string->Int32Option */ func MapInt32OptionToStringArrList(m StringArrList, f func([]string) Int32Option) Int32OptionList { acc := NilInt32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringArrList: []string->Int64Option */ func MapInt64OptionToStringArrList(m StringArrList, f func([]string) Int64Option) Int64OptionList { acc := NilInt64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringArrList: []string->UintOption */ func MapUintOptionToStringArrList(m StringArrList, f func([]string) UintOption) UintOptionList { acc := NilUintOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringArrList: []string->Uint8Option */ func MapUint8OptionToStringArrList(m StringArrList, f func([]string) Uint8Option) Uint8OptionList { acc := NilUint8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringArrList: []string->Uint16Option */ func MapUint16OptionToStringArrList(m StringArrList, f func([]string) Uint16Option) Uint16OptionList { acc := NilUint16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringArrList: []string->Uint32Option */ func MapUint32OptionToStringArrList(m StringArrList, f func([]string) Uint32Option) Uint32OptionList { acc := NilUint32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringArrList: []string->Uint64Option */ func MapUint64OptionToStringArrList(m StringArrList, f func([]string) Uint64Option) Uint64OptionList { acc := NilUint64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringArrList: []string->UintptrOption */ func MapUintptrOptionToStringArrList(m StringArrList, f func([]string) UintptrOption) UintptrOptionList { acc := NilUintptrOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringArrList: []string->ByteOption */ func MapByteOptionToStringArrList(m StringArrList, f func([]string) ByteOption) ByteOptionList { acc := NilByteOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringArrList: []string->RuneOption */ func MapRuneOptionToStringArrList(m StringArrList, f func([]string) RuneOption) RuneOptionList { acc := NilRuneOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringArrList: []string->Float32Option */ func MapFloat32OptionToStringArrList(m StringArrList, f func([]string) Float32Option) Float32OptionList { acc := NilFloat32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringArrList: []string->Float64Option */ func MapFloat64OptionToStringArrList(m StringArrList, f func([]string) Float64Option) Float64OptionList { acc := NilFloat64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringArrList: []string->Complex64Option */ func MapComplex64OptionToStringArrList(m StringArrList, f func([]string) Complex64Option) Complex64OptionList { acc := NilComplex64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringArrList: []string->Complex128Option */ func MapComplex128OptionToStringArrList(m StringArrList, f func([]string) Complex128Option) Complex128OptionList { acc := NilComplex128OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringArrList: []string->AnyOption */ func MapAnyOptionToStringArrList(m StringArrList, f func([]string) AnyOption) AnyOptionList { acc := NilAnyOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringArrList: []string->[]bool */ func MapBoolArrToStringArrList(m StringArrList, f func([]string) []bool) BoolArrList { acc := NilBoolArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringArrList: []string->[]string */ func MapStringArrToStringArrList(m StringArrList, f func([]string) []string) StringArrList { acc := NilStringArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringArrList: []string->[]int */ func MapIntArrToStringArrList(m StringArrList, f func([]string) []int) IntArrList { acc := NilIntArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringArrList: []string->[]int8 */ func MapInt8ArrToStringArrList(m StringArrList, f func([]string) []int8) Int8ArrList { acc := NilInt8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringArrList: []string->[]int16 */ func MapInt16ArrToStringArrList(m StringArrList, f func([]string) []int16) Int16ArrList { acc := NilInt16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringArrList: []string->[]int32 */ func MapInt32ArrToStringArrList(m StringArrList, f func([]string) []int32) Int32ArrList { acc := NilInt32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringArrList: []string->[]int64 */ func MapInt64ArrToStringArrList(m StringArrList, f func([]string) []int64) Int64ArrList { acc := NilInt64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringArrList: []string->[]uint */ func MapUintArrToStringArrList(m StringArrList, f func([]string) []uint) UintArrList { acc := NilUintArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringArrList: []string->[]uint8 */ func MapUint8ArrToStringArrList(m StringArrList, f func([]string) []uint8) Uint8ArrList { acc := NilUint8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringArrList: []string->[]uint16 */ func MapUint16ArrToStringArrList(m StringArrList, f func([]string) []uint16) Uint16ArrList { acc := NilUint16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringArrList: []string->[]uint32 */ func MapUint32ArrToStringArrList(m StringArrList, f func([]string) []uint32) Uint32ArrList { acc := NilUint32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringArrList: []string->[]uint64 */ func MapUint64ArrToStringArrList(m StringArrList, f func([]string) []uint64) Uint64ArrList { acc := NilUint64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringArrList: []string->[]uintptr */ func MapUintptrArrToStringArrList(m StringArrList, f func([]string) []uintptr) UintptrArrList { acc := NilUintptrArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringArrList: []string->[]byte */ func MapByteArrToStringArrList(m StringArrList, f func([]string) []byte) ByteArrList { acc := NilByteArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringArrList: []string->[]rune */ func MapRuneArrToStringArrList(m StringArrList, f func([]string) []rune) RuneArrList { acc := NilRuneArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringArrList: []string->[]float32 */ func MapFloat32ArrToStringArrList(m StringArrList, f func([]string) []float32) Float32ArrList { acc := NilFloat32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringArrList: []string->[]float64 */ func MapFloat64ArrToStringArrList(m StringArrList, f func([]string) []float64) Float64ArrList { acc := NilFloat64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringArrList: []string->[]complex64 */ func MapComplex64ArrToStringArrList(m StringArrList, f func([]string) []complex64) Complex64ArrList { acc := NilComplex64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringArrList: []string->[]complex128 */ func MapComplex128ArrToStringArrList(m StringArrList, f func([]string) []complex128) Complex128ArrList { acc := NilComplex128ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringArrList: []string->[]Any */ func MapAnyArrToStringArrList(m StringArrList, f func([]string) []Any) AnyArrList { acc := NilAnyArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringArrList: []string->BoolList */ func MapBoolListToStringArrList(m StringArrList, f func([]string) BoolList) BoolListList { acc := NilBoolListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringArrList: []string->StringList */ func MapStringListToStringArrList(m StringArrList, f func([]string) StringList) StringListList { acc := NilStringListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringArrList: []string->IntList */ func MapIntListToStringArrList(m StringArrList, f func([]string) IntList) IntListList { acc := NilIntListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringArrList: []string->Int8List */ func MapInt8ListToStringArrList(m StringArrList, f func([]string) Int8List) Int8ListList { acc := NilInt8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringArrList: []string->Int16List */ func MapInt16ListToStringArrList(m StringArrList, f func([]string) Int16List) Int16ListList { acc := NilInt16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringArrList: []string->Int32List */ func MapInt32ListToStringArrList(m StringArrList, f func([]string) Int32List) Int32ListList { acc := NilInt32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringArrList: []string->Int64List */ func MapInt64ListToStringArrList(m StringArrList, f func([]string) Int64List) Int64ListList { acc := NilInt64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringArrList: []string->UintList */ func MapUintListToStringArrList(m StringArrList, f func([]string) UintList) UintListList { acc := NilUintListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringArrList: []string->Uint8List */ func MapUint8ListToStringArrList(m StringArrList, f func([]string) Uint8List) Uint8ListList { acc := NilUint8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringArrList: []string->Uint16List */ func MapUint16ListToStringArrList(m StringArrList, f func([]string) Uint16List) Uint16ListList { acc := NilUint16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringArrList: []string->Uint32List */ func MapUint32ListToStringArrList(m StringArrList, f func([]string) Uint32List) Uint32ListList { acc := NilUint32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringArrList: []string->Uint64List */ func MapUint64ListToStringArrList(m StringArrList, f func([]string) Uint64List) Uint64ListList { acc := NilUint64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringArrList: []string->UintptrList */ func MapUintptrListToStringArrList(m StringArrList, f func([]string) UintptrList) UintptrListList { acc := NilUintptrListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringArrList: []string->ByteList */ func MapByteListToStringArrList(m StringArrList, f func([]string) ByteList) ByteListList { acc := NilByteListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringArrList: []string->RuneList */ func MapRuneListToStringArrList(m StringArrList, f func([]string) RuneList) RuneListList { acc := NilRuneListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringArrList: []string->Float32List */ func MapFloat32ListToStringArrList(m StringArrList, f func([]string) Float32List) Float32ListList { acc := NilFloat32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringArrList: []string->Float64List */ func MapFloat64ListToStringArrList(m StringArrList, f func([]string) Float64List) Float64ListList { acc := NilFloat64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringArrList: []string->Complex64List */ func MapComplex64ListToStringArrList(m StringArrList, f func([]string) Complex64List) Complex64ListList { acc := NilComplex64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringArrList: []string->Complex128List */ func MapComplex128ListToStringArrList(m StringArrList, f func([]string) Complex128List) Complex128ListList { acc := NilComplex128ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringArrList: []string->AnyList */ func MapAnyListToStringArrList(m StringArrList, f func([]string) AnyList) AnyListList { acc := NilAnyListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntArrList: []int->bool */ func MapBoolToIntArrList(m IntArrList, f func([]int) bool) BoolList { acc := NilBoolList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntArrList: []int->string */ func MapStringToIntArrList(m IntArrList, f func([]int) string) StringList { acc := NilStringList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntArrList: []int->int */ func MapIntToIntArrList(m IntArrList, f func([]int) int) IntList { acc := NilIntList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntArrList: []int->int8 */ func MapInt8ToIntArrList(m IntArrList, f func([]int) int8) Int8List { acc := NilInt8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntArrList: []int->int16 */ func MapInt16ToIntArrList(m IntArrList, f func([]int) int16) Int16List { acc := NilInt16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntArrList: []int->int32 */ func MapInt32ToIntArrList(m IntArrList, f func([]int) int32) Int32List { acc := NilInt32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntArrList: []int->int64 */ func MapInt64ToIntArrList(m IntArrList, f func([]int) int64) Int64List { acc := NilInt64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntArrList: []int->uint */ func MapUintToIntArrList(m IntArrList, f func([]int) uint) UintList { acc := NilUintList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntArrList: []int->uint8 */ func MapUint8ToIntArrList(m IntArrList, f func([]int) uint8) Uint8List { acc := NilUint8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntArrList: []int->uint16 */ func MapUint16ToIntArrList(m IntArrList, f func([]int) uint16) Uint16List { acc := NilUint16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntArrList: []int->uint32 */ func MapUint32ToIntArrList(m IntArrList, f func([]int) uint32) Uint32List { acc := NilUint32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntArrList: []int->uint64 */ func MapUint64ToIntArrList(m IntArrList, f func([]int) uint64) Uint64List { acc := NilUint64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntArrList: []int->uintptr */ func MapUintptrToIntArrList(m IntArrList, f func([]int) uintptr) UintptrList { acc := NilUintptrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntArrList: []int->byte */ func MapByteToIntArrList(m IntArrList, f func([]int) byte) ByteList { acc := NilByteList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntArrList: []int->rune */ func MapRuneToIntArrList(m IntArrList, f func([]int) rune) RuneList { acc := NilRuneList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntArrList: []int->float32 */ func MapFloat32ToIntArrList(m IntArrList, f func([]int) float32) Float32List { acc := NilFloat32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntArrList: []int->float64 */ func MapFloat64ToIntArrList(m IntArrList, f func([]int) float64) Float64List { acc := NilFloat64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntArrList: []int->complex64 */ func MapComplex64ToIntArrList(m IntArrList, f func([]int) complex64) Complex64List { acc := NilComplex64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntArrList: []int->complex128 */ func MapComplex128ToIntArrList(m IntArrList, f func([]int) complex128) Complex128List { acc := NilComplex128List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntArrList: []int->Any */ func MapAnyToIntArrList(m IntArrList, f func([]int) Any) AnyList { acc := NilAnyList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntArrList: []int->BoolOption */ func MapBoolOptionToIntArrList(m IntArrList, f func([]int) BoolOption) BoolOptionList { acc := NilBoolOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntArrList: []int->StringOption */ func MapStringOptionToIntArrList(m IntArrList, f func([]int) StringOption) StringOptionList { acc := NilStringOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntArrList: []int->IntOption */ func MapIntOptionToIntArrList(m IntArrList, f func([]int) IntOption) IntOptionList { acc := NilIntOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntArrList: []int->Int8Option */ func MapInt8OptionToIntArrList(m IntArrList, f func([]int) Int8Option) Int8OptionList { acc := NilInt8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntArrList: []int->Int16Option */ func MapInt16OptionToIntArrList(m IntArrList, f func([]int) Int16Option) Int16OptionList { acc := NilInt16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntArrList: []int->Int32Option */ func MapInt32OptionToIntArrList(m IntArrList, f func([]int) Int32Option) Int32OptionList { acc := NilInt32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntArrList: []int->Int64Option */ func MapInt64OptionToIntArrList(m IntArrList, f func([]int) Int64Option) Int64OptionList { acc := NilInt64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntArrList: []int->UintOption */ func MapUintOptionToIntArrList(m IntArrList, f func([]int) UintOption) UintOptionList { acc := NilUintOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntArrList: []int->Uint8Option */ func MapUint8OptionToIntArrList(m IntArrList, f func([]int) Uint8Option) Uint8OptionList { acc := NilUint8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntArrList: []int->Uint16Option */ func MapUint16OptionToIntArrList(m IntArrList, f func([]int) Uint16Option) Uint16OptionList { acc := NilUint16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntArrList: []int->Uint32Option */ func MapUint32OptionToIntArrList(m IntArrList, f func([]int) Uint32Option) Uint32OptionList { acc := NilUint32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntArrList: []int->Uint64Option */ func MapUint64OptionToIntArrList(m IntArrList, f func([]int) Uint64Option) Uint64OptionList { acc := NilUint64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntArrList: []int->UintptrOption */ func MapUintptrOptionToIntArrList(m IntArrList, f func([]int) UintptrOption) UintptrOptionList { acc := NilUintptrOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntArrList: []int->ByteOption */ func MapByteOptionToIntArrList(m IntArrList, f func([]int) ByteOption) ByteOptionList { acc := NilByteOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntArrList: []int->RuneOption */ func MapRuneOptionToIntArrList(m IntArrList, f func([]int) RuneOption) RuneOptionList { acc := NilRuneOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntArrList: []int->Float32Option */ func MapFloat32OptionToIntArrList(m IntArrList, f func([]int) Float32Option) Float32OptionList { acc := NilFloat32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntArrList: []int->Float64Option */ func MapFloat64OptionToIntArrList(m IntArrList, f func([]int) Float64Option) Float64OptionList { acc := NilFloat64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntArrList: []int->Complex64Option */ func MapComplex64OptionToIntArrList(m IntArrList, f func([]int) Complex64Option) Complex64OptionList { acc := NilComplex64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntArrList: []int->Complex128Option */ func MapComplex128OptionToIntArrList(m IntArrList, f func([]int) Complex128Option) Complex128OptionList { acc := NilComplex128OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntArrList: []int->AnyOption */ func MapAnyOptionToIntArrList(m IntArrList, f func([]int) AnyOption) AnyOptionList { acc := NilAnyOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntArrList: []int->[]bool */ func MapBoolArrToIntArrList(m IntArrList, f func([]int) []bool) BoolArrList { acc := NilBoolArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntArrList: []int->[]string */ func MapStringArrToIntArrList(m IntArrList, f func([]int) []string) StringArrList { acc := NilStringArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntArrList: []int->[]int */ func MapIntArrToIntArrList(m IntArrList, f func([]int) []int) IntArrList { acc := NilIntArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntArrList: []int->[]int8 */ func MapInt8ArrToIntArrList(m IntArrList, f func([]int) []int8) Int8ArrList { acc := NilInt8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntArrList: []int->[]int16 */ func MapInt16ArrToIntArrList(m IntArrList, f func([]int) []int16) Int16ArrList { acc := NilInt16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntArrList: []int->[]int32 */ func MapInt32ArrToIntArrList(m IntArrList, f func([]int) []int32) Int32ArrList { acc := NilInt32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntArrList: []int->[]int64 */ func MapInt64ArrToIntArrList(m IntArrList, f func([]int) []int64) Int64ArrList { acc := NilInt64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntArrList: []int->[]uint */ func MapUintArrToIntArrList(m IntArrList, f func([]int) []uint) UintArrList { acc := NilUintArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntArrList: []int->[]uint8 */ func MapUint8ArrToIntArrList(m IntArrList, f func([]int) []uint8) Uint8ArrList { acc := NilUint8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntArrList: []int->[]uint16 */ func MapUint16ArrToIntArrList(m IntArrList, f func([]int) []uint16) Uint16ArrList { acc := NilUint16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntArrList: []int->[]uint32 */ func MapUint32ArrToIntArrList(m IntArrList, f func([]int) []uint32) Uint32ArrList { acc := NilUint32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntArrList: []int->[]uint64 */ func MapUint64ArrToIntArrList(m IntArrList, f func([]int) []uint64) Uint64ArrList { acc := NilUint64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntArrList: []int->[]uintptr */ func MapUintptrArrToIntArrList(m IntArrList, f func([]int) []uintptr) UintptrArrList { acc := NilUintptrArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntArrList: []int->[]byte */ func MapByteArrToIntArrList(m IntArrList, f func([]int) []byte) ByteArrList { acc := NilByteArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntArrList: []int->[]rune */ func MapRuneArrToIntArrList(m IntArrList, f func([]int) []rune) RuneArrList { acc := NilRuneArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntArrList: []int->[]float32 */ func MapFloat32ArrToIntArrList(m IntArrList, f func([]int) []float32) Float32ArrList { acc := NilFloat32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntArrList: []int->[]float64 */ func MapFloat64ArrToIntArrList(m IntArrList, f func([]int) []float64) Float64ArrList { acc := NilFloat64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntArrList: []int->[]complex64 */ func MapComplex64ArrToIntArrList(m IntArrList, f func([]int) []complex64) Complex64ArrList { acc := NilComplex64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntArrList: []int->[]complex128 */ func MapComplex128ArrToIntArrList(m IntArrList, f func([]int) []complex128) Complex128ArrList { acc := NilComplex128ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntArrList: []int->[]Any */ func MapAnyArrToIntArrList(m IntArrList, f func([]int) []Any) AnyArrList { acc := NilAnyArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntArrList: []int->BoolList */ func MapBoolListToIntArrList(m IntArrList, f func([]int) BoolList) BoolListList { acc := NilBoolListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntArrList: []int->StringList */ func MapStringListToIntArrList(m IntArrList, f func([]int) StringList) StringListList { acc := NilStringListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntArrList: []int->IntList */ func MapIntListToIntArrList(m IntArrList, f func([]int) IntList) IntListList { acc := NilIntListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntArrList: []int->Int8List */ func MapInt8ListToIntArrList(m IntArrList, f func([]int) Int8List) Int8ListList { acc := NilInt8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntArrList: []int->Int16List */ func MapInt16ListToIntArrList(m IntArrList, f func([]int) Int16List) Int16ListList { acc := NilInt16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntArrList: []int->Int32List */ func MapInt32ListToIntArrList(m IntArrList, f func([]int) Int32List) Int32ListList { acc := NilInt32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntArrList: []int->Int64List */ func MapInt64ListToIntArrList(m IntArrList, f func([]int) Int64List) Int64ListList { acc := NilInt64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntArrList: []int->UintList */ func MapUintListToIntArrList(m IntArrList, f func([]int) UintList) UintListList { acc := NilUintListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntArrList: []int->Uint8List */ func MapUint8ListToIntArrList(m IntArrList, f func([]int) Uint8List) Uint8ListList { acc := NilUint8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntArrList: []int->Uint16List */ func MapUint16ListToIntArrList(m IntArrList, f func([]int) Uint16List) Uint16ListList { acc := NilUint16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntArrList: []int->Uint32List */ func MapUint32ListToIntArrList(m IntArrList, f func([]int) Uint32List) Uint32ListList { acc := NilUint32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntArrList: []int->Uint64List */ func MapUint64ListToIntArrList(m IntArrList, f func([]int) Uint64List) Uint64ListList { acc := NilUint64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntArrList: []int->UintptrList */ func MapUintptrListToIntArrList(m IntArrList, f func([]int) UintptrList) UintptrListList { acc := NilUintptrListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntArrList: []int->ByteList */ func MapByteListToIntArrList(m IntArrList, f func([]int) ByteList) ByteListList { acc := NilByteListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntArrList: []int->RuneList */ func MapRuneListToIntArrList(m IntArrList, f func([]int) RuneList) RuneListList { acc := NilRuneListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntArrList: []int->Float32List */ func MapFloat32ListToIntArrList(m IntArrList, f func([]int) Float32List) Float32ListList { acc := NilFloat32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntArrList: []int->Float64List */ func MapFloat64ListToIntArrList(m IntArrList, f func([]int) Float64List) Float64ListList { acc := NilFloat64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntArrList: []int->Complex64List */ func MapComplex64ListToIntArrList(m IntArrList, f func([]int) Complex64List) Complex64ListList { acc := NilComplex64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntArrList: []int->Complex128List */ func MapComplex128ListToIntArrList(m IntArrList, f func([]int) Complex128List) Complex128ListList { acc := NilComplex128ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntArrList: []int->AnyList */ func MapAnyListToIntArrList(m IntArrList, f func([]int) AnyList) AnyListList { acc := NilAnyListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ArrList: []int8->bool */ func MapBoolToInt8ArrList(m Int8ArrList, f func([]int8) bool) BoolList { acc := NilBoolList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ArrList: []int8->string */ func MapStringToInt8ArrList(m Int8ArrList, f func([]int8) string) StringList { acc := NilStringList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ArrList: []int8->int */ func MapIntToInt8ArrList(m Int8ArrList, f func([]int8) int) IntList { acc := NilIntList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ArrList: []int8->int8 */ func MapInt8ToInt8ArrList(m Int8ArrList, f func([]int8) int8) Int8List { acc := NilInt8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ArrList: []int8->int16 */ func MapInt16ToInt8ArrList(m Int8ArrList, f func([]int8) int16) Int16List { acc := NilInt16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ArrList: []int8->int32 */ func MapInt32ToInt8ArrList(m Int8ArrList, f func([]int8) int32) Int32List { acc := NilInt32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ArrList: []int8->int64 */ func MapInt64ToInt8ArrList(m Int8ArrList, f func([]int8) int64) Int64List { acc := NilInt64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ArrList: []int8->uint */ func MapUintToInt8ArrList(m Int8ArrList, f func([]int8) uint) UintList { acc := NilUintList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ArrList: []int8->uint8 */ func MapUint8ToInt8ArrList(m Int8ArrList, f func([]int8) uint8) Uint8List { acc := NilUint8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ArrList: []int8->uint16 */ func MapUint16ToInt8ArrList(m Int8ArrList, f func([]int8) uint16) Uint16List { acc := NilUint16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ArrList: []int8->uint32 */ func MapUint32ToInt8ArrList(m Int8ArrList, f func([]int8) uint32) Uint32List { acc := NilUint32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ArrList: []int8->uint64 */ func MapUint64ToInt8ArrList(m Int8ArrList, f func([]int8) uint64) Uint64List { acc := NilUint64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ArrList: []int8->uintptr */ func MapUintptrToInt8ArrList(m Int8ArrList, f func([]int8) uintptr) UintptrList { acc := NilUintptrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ArrList: []int8->byte */ func MapByteToInt8ArrList(m Int8ArrList, f func([]int8) byte) ByteList { acc := NilByteList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ArrList: []int8->rune */ func MapRuneToInt8ArrList(m Int8ArrList, f func([]int8) rune) RuneList { acc := NilRuneList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ArrList: []int8->float32 */ func MapFloat32ToInt8ArrList(m Int8ArrList, f func([]int8) float32) Float32List { acc := NilFloat32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ArrList: []int8->float64 */ func MapFloat64ToInt8ArrList(m Int8ArrList, f func([]int8) float64) Float64List { acc := NilFloat64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ArrList: []int8->complex64 */ func MapComplex64ToInt8ArrList(m Int8ArrList, f func([]int8) complex64) Complex64List { acc := NilComplex64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ArrList: []int8->complex128 */ func MapComplex128ToInt8ArrList(m Int8ArrList, f func([]int8) complex128) Complex128List { acc := NilComplex128List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ArrList: []int8->Any */ func MapAnyToInt8ArrList(m Int8ArrList, f func([]int8) Any) AnyList { acc := NilAnyList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ArrList: []int8->BoolOption */ func MapBoolOptionToInt8ArrList(m Int8ArrList, f func([]int8) BoolOption) BoolOptionList { acc := NilBoolOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ArrList: []int8->StringOption */ func MapStringOptionToInt8ArrList(m Int8ArrList, f func([]int8) StringOption) StringOptionList { acc := NilStringOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ArrList: []int8->IntOption */ func MapIntOptionToInt8ArrList(m Int8ArrList, f func([]int8) IntOption) IntOptionList { acc := NilIntOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ArrList: []int8->Int8Option */ func MapInt8OptionToInt8ArrList(m Int8ArrList, f func([]int8) Int8Option) Int8OptionList { acc := NilInt8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ArrList: []int8->Int16Option */ func MapInt16OptionToInt8ArrList(m Int8ArrList, f func([]int8) Int16Option) Int16OptionList { acc := NilInt16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ArrList: []int8->Int32Option */ func MapInt32OptionToInt8ArrList(m Int8ArrList, f func([]int8) Int32Option) Int32OptionList { acc := NilInt32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ArrList: []int8->Int64Option */ func MapInt64OptionToInt8ArrList(m Int8ArrList, f func([]int8) Int64Option) Int64OptionList { acc := NilInt64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ArrList: []int8->UintOption */ func MapUintOptionToInt8ArrList(m Int8ArrList, f func([]int8) UintOption) UintOptionList { acc := NilUintOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ArrList: []int8->Uint8Option */ func MapUint8OptionToInt8ArrList(m Int8ArrList, f func([]int8) Uint8Option) Uint8OptionList { acc := NilUint8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ArrList: []int8->Uint16Option */ func MapUint16OptionToInt8ArrList(m Int8ArrList, f func([]int8) Uint16Option) Uint16OptionList { acc := NilUint16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ArrList: []int8->Uint32Option */ func MapUint32OptionToInt8ArrList(m Int8ArrList, f func([]int8) Uint32Option) Uint32OptionList { acc := NilUint32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ArrList: []int8->Uint64Option */ func MapUint64OptionToInt8ArrList(m Int8ArrList, f func([]int8) Uint64Option) Uint64OptionList { acc := NilUint64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ArrList: []int8->UintptrOption */ func MapUintptrOptionToInt8ArrList(m Int8ArrList, f func([]int8) UintptrOption) UintptrOptionList { acc := NilUintptrOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ArrList: []int8->ByteOption */ func MapByteOptionToInt8ArrList(m Int8ArrList, f func([]int8) ByteOption) ByteOptionList { acc := NilByteOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ArrList: []int8->RuneOption */ func MapRuneOptionToInt8ArrList(m Int8ArrList, f func([]int8) RuneOption) RuneOptionList { acc := NilRuneOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ArrList: []int8->Float32Option */ func MapFloat32OptionToInt8ArrList(m Int8ArrList, f func([]int8) Float32Option) Float32OptionList { acc := NilFloat32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ArrList: []int8->Float64Option */ func MapFloat64OptionToInt8ArrList(m Int8ArrList, f func([]int8) Float64Option) Float64OptionList { acc := NilFloat64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ArrList: []int8->Complex64Option */ func MapComplex64OptionToInt8ArrList(m Int8ArrList, f func([]int8) Complex64Option) Complex64OptionList { acc := NilComplex64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ArrList: []int8->Complex128Option */ func MapComplex128OptionToInt8ArrList(m Int8ArrList, f func([]int8) Complex128Option) Complex128OptionList { acc := NilComplex128OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ArrList: []int8->AnyOption */ func MapAnyOptionToInt8ArrList(m Int8ArrList, f func([]int8) AnyOption) AnyOptionList { acc := NilAnyOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ArrList: []int8->[]bool */ func MapBoolArrToInt8ArrList(m Int8ArrList, f func([]int8) []bool) BoolArrList { acc := NilBoolArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ArrList: []int8->[]string */ func MapStringArrToInt8ArrList(m Int8ArrList, f func([]int8) []string) StringArrList { acc := NilStringArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ArrList: []int8->[]int */ func MapIntArrToInt8ArrList(m Int8ArrList, f func([]int8) []int) IntArrList { acc := NilIntArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ArrList: []int8->[]int8 */ func MapInt8ArrToInt8ArrList(m Int8ArrList, f func([]int8) []int8) Int8ArrList { acc := NilInt8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ArrList: []int8->[]int16 */ func MapInt16ArrToInt8ArrList(m Int8ArrList, f func([]int8) []int16) Int16ArrList { acc := NilInt16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ArrList: []int8->[]int32 */ func MapInt32ArrToInt8ArrList(m Int8ArrList, f func([]int8) []int32) Int32ArrList { acc := NilInt32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ArrList: []int8->[]int64 */ func MapInt64ArrToInt8ArrList(m Int8ArrList, f func([]int8) []int64) Int64ArrList { acc := NilInt64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ArrList: []int8->[]uint */ func MapUintArrToInt8ArrList(m Int8ArrList, f func([]int8) []uint) UintArrList { acc := NilUintArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ArrList: []int8->[]uint8 */ func MapUint8ArrToInt8ArrList(m Int8ArrList, f func([]int8) []uint8) Uint8ArrList { acc := NilUint8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ArrList: []int8->[]uint16 */ func MapUint16ArrToInt8ArrList(m Int8ArrList, f func([]int8) []uint16) Uint16ArrList { acc := NilUint16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ArrList: []int8->[]uint32 */ func MapUint32ArrToInt8ArrList(m Int8ArrList, f func([]int8) []uint32) Uint32ArrList { acc := NilUint32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ArrList: []int8->[]uint64 */ func MapUint64ArrToInt8ArrList(m Int8ArrList, f func([]int8) []uint64) Uint64ArrList { acc := NilUint64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ArrList: []int8->[]uintptr */ func MapUintptrArrToInt8ArrList(m Int8ArrList, f func([]int8) []uintptr) UintptrArrList { acc := NilUintptrArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ArrList: []int8->[]byte */ func MapByteArrToInt8ArrList(m Int8ArrList, f func([]int8) []byte) ByteArrList { acc := NilByteArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ArrList: []int8->[]rune */ func MapRuneArrToInt8ArrList(m Int8ArrList, f func([]int8) []rune) RuneArrList { acc := NilRuneArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ArrList: []int8->[]float32 */ func MapFloat32ArrToInt8ArrList(m Int8ArrList, f func([]int8) []float32) Float32ArrList { acc := NilFloat32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ArrList: []int8->[]float64 */ func MapFloat64ArrToInt8ArrList(m Int8ArrList, f func([]int8) []float64) Float64ArrList { acc := NilFloat64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ArrList: []int8->[]complex64 */ func MapComplex64ArrToInt8ArrList(m Int8ArrList, f func([]int8) []complex64) Complex64ArrList { acc := NilComplex64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ArrList: []int8->[]complex128 */ func MapComplex128ArrToInt8ArrList(m Int8ArrList, f func([]int8) []complex128) Complex128ArrList { acc := NilComplex128ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ArrList: []int8->[]Any */ func MapAnyArrToInt8ArrList(m Int8ArrList, f func([]int8) []Any) AnyArrList { acc := NilAnyArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ArrList: []int8->BoolList */ func MapBoolListToInt8ArrList(m Int8ArrList, f func([]int8) BoolList) BoolListList { acc := NilBoolListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ArrList: []int8->StringList */ func MapStringListToInt8ArrList(m Int8ArrList, f func([]int8) StringList) StringListList { acc := NilStringListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ArrList: []int8->IntList */ func MapIntListToInt8ArrList(m Int8ArrList, f func([]int8) IntList) IntListList { acc := NilIntListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ArrList: []int8->Int8List */ func MapInt8ListToInt8ArrList(m Int8ArrList, f func([]int8) Int8List) Int8ListList { acc := NilInt8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ArrList: []int8->Int16List */ func MapInt16ListToInt8ArrList(m Int8ArrList, f func([]int8) Int16List) Int16ListList { acc := NilInt16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ArrList: []int8->Int32List */ func MapInt32ListToInt8ArrList(m Int8ArrList, f func([]int8) Int32List) Int32ListList { acc := NilInt32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ArrList: []int8->Int64List */ func MapInt64ListToInt8ArrList(m Int8ArrList, f func([]int8) Int64List) Int64ListList { acc := NilInt64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ArrList: []int8->UintList */ func MapUintListToInt8ArrList(m Int8ArrList, f func([]int8) UintList) UintListList { acc := NilUintListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ArrList: []int8->Uint8List */ func MapUint8ListToInt8ArrList(m Int8ArrList, f func([]int8) Uint8List) Uint8ListList { acc := NilUint8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ArrList: []int8->Uint16List */ func MapUint16ListToInt8ArrList(m Int8ArrList, f func([]int8) Uint16List) Uint16ListList { acc := NilUint16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ArrList: []int8->Uint32List */ func MapUint32ListToInt8ArrList(m Int8ArrList, f func([]int8) Uint32List) Uint32ListList { acc := NilUint32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ArrList: []int8->Uint64List */ func MapUint64ListToInt8ArrList(m Int8ArrList, f func([]int8) Uint64List) Uint64ListList { acc := NilUint64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ArrList: []int8->UintptrList */ func MapUintptrListToInt8ArrList(m Int8ArrList, f func([]int8) UintptrList) UintptrListList { acc := NilUintptrListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ArrList: []int8->ByteList */ func MapByteListToInt8ArrList(m Int8ArrList, f func([]int8) ByteList) ByteListList { acc := NilByteListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ArrList: []int8->RuneList */ func MapRuneListToInt8ArrList(m Int8ArrList, f func([]int8) RuneList) RuneListList { acc := NilRuneListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ArrList: []int8->Float32List */ func MapFloat32ListToInt8ArrList(m Int8ArrList, f func([]int8) Float32List) Float32ListList { acc := NilFloat32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ArrList: []int8->Float64List */ func MapFloat64ListToInt8ArrList(m Int8ArrList, f func([]int8) Float64List) Float64ListList { acc := NilFloat64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ArrList: []int8->Complex64List */ func MapComplex64ListToInt8ArrList(m Int8ArrList, f func([]int8) Complex64List) Complex64ListList { acc := NilComplex64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ArrList: []int8->Complex128List */ func MapComplex128ListToInt8ArrList(m Int8ArrList, f func([]int8) Complex128List) Complex128ListList { acc := NilComplex128ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ArrList: []int8->AnyList */ func MapAnyListToInt8ArrList(m Int8ArrList, f func([]int8) AnyList) AnyListList { acc := NilAnyListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ArrList: []int16->bool */ func MapBoolToInt16ArrList(m Int16ArrList, f func([]int16) bool) BoolList { acc := NilBoolList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ArrList: []int16->string */ func MapStringToInt16ArrList(m Int16ArrList, f func([]int16) string) StringList { acc := NilStringList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ArrList: []int16->int */ func MapIntToInt16ArrList(m Int16ArrList, f func([]int16) int) IntList { acc := NilIntList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ArrList: []int16->int8 */ func MapInt8ToInt16ArrList(m Int16ArrList, f func([]int16) int8) Int8List { acc := NilInt8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ArrList: []int16->int16 */ func MapInt16ToInt16ArrList(m Int16ArrList, f func([]int16) int16) Int16List { acc := NilInt16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ArrList: []int16->int32 */ func MapInt32ToInt16ArrList(m Int16ArrList, f func([]int16) int32) Int32List { acc := NilInt32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ArrList: []int16->int64 */ func MapInt64ToInt16ArrList(m Int16ArrList, f func([]int16) int64) Int64List { acc := NilInt64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ArrList: []int16->uint */ func MapUintToInt16ArrList(m Int16ArrList, f func([]int16) uint) UintList { acc := NilUintList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ArrList: []int16->uint8 */ func MapUint8ToInt16ArrList(m Int16ArrList, f func([]int16) uint8) Uint8List { acc := NilUint8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ArrList: []int16->uint16 */ func MapUint16ToInt16ArrList(m Int16ArrList, f func([]int16) uint16) Uint16List { acc := NilUint16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ArrList: []int16->uint32 */ func MapUint32ToInt16ArrList(m Int16ArrList, f func([]int16) uint32) Uint32List { acc := NilUint32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ArrList: []int16->uint64 */ func MapUint64ToInt16ArrList(m Int16ArrList, f func([]int16) uint64) Uint64List { acc := NilUint64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ArrList: []int16->uintptr */ func MapUintptrToInt16ArrList(m Int16ArrList, f func([]int16) uintptr) UintptrList { acc := NilUintptrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ArrList: []int16->byte */ func MapByteToInt16ArrList(m Int16ArrList, f func([]int16) byte) ByteList { acc := NilByteList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ArrList: []int16->rune */ func MapRuneToInt16ArrList(m Int16ArrList, f func([]int16) rune) RuneList { acc := NilRuneList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ArrList: []int16->float32 */ func MapFloat32ToInt16ArrList(m Int16ArrList, f func([]int16) float32) Float32List { acc := NilFloat32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ArrList: []int16->float64 */ func MapFloat64ToInt16ArrList(m Int16ArrList, f func([]int16) float64) Float64List { acc := NilFloat64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ArrList: []int16->complex64 */ func MapComplex64ToInt16ArrList(m Int16ArrList, f func([]int16) complex64) Complex64List { acc := NilComplex64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ArrList: []int16->complex128 */ func MapComplex128ToInt16ArrList(m Int16ArrList, f func([]int16) complex128) Complex128List { acc := NilComplex128List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ArrList: []int16->Any */ func MapAnyToInt16ArrList(m Int16ArrList, f func([]int16) Any) AnyList { acc := NilAnyList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ArrList: []int16->BoolOption */ func MapBoolOptionToInt16ArrList(m Int16ArrList, f func([]int16) BoolOption) BoolOptionList { acc := NilBoolOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ArrList: []int16->StringOption */ func MapStringOptionToInt16ArrList(m Int16ArrList, f func([]int16) StringOption) StringOptionList { acc := NilStringOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ArrList: []int16->IntOption */ func MapIntOptionToInt16ArrList(m Int16ArrList, f func([]int16) IntOption) IntOptionList { acc := NilIntOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ArrList: []int16->Int8Option */ func MapInt8OptionToInt16ArrList(m Int16ArrList, f func([]int16) Int8Option) Int8OptionList { acc := NilInt8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ArrList: []int16->Int16Option */ func MapInt16OptionToInt16ArrList(m Int16ArrList, f func([]int16) Int16Option) Int16OptionList { acc := NilInt16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ArrList: []int16->Int32Option */ func MapInt32OptionToInt16ArrList(m Int16ArrList, f func([]int16) Int32Option) Int32OptionList { acc := NilInt32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ArrList: []int16->Int64Option */ func MapInt64OptionToInt16ArrList(m Int16ArrList, f func([]int16) Int64Option) Int64OptionList { acc := NilInt64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ArrList: []int16->UintOption */ func MapUintOptionToInt16ArrList(m Int16ArrList, f func([]int16) UintOption) UintOptionList { acc := NilUintOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ArrList: []int16->Uint8Option */ func MapUint8OptionToInt16ArrList(m Int16ArrList, f func([]int16) Uint8Option) Uint8OptionList { acc := NilUint8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ArrList: []int16->Uint16Option */ func MapUint16OptionToInt16ArrList(m Int16ArrList, f func([]int16) Uint16Option) Uint16OptionList { acc := NilUint16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ArrList: []int16->Uint32Option */ func MapUint32OptionToInt16ArrList(m Int16ArrList, f func([]int16) Uint32Option) Uint32OptionList { acc := NilUint32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ArrList: []int16->Uint64Option */ func MapUint64OptionToInt16ArrList(m Int16ArrList, f func([]int16) Uint64Option) Uint64OptionList { acc := NilUint64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ArrList: []int16->UintptrOption */ func MapUintptrOptionToInt16ArrList(m Int16ArrList, f func([]int16) UintptrOption) UintptrOptionList { acc := NilUintptrOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ArrList: []int16->ByteOption */ func MapByteOptionToInt16ArrList(m Int16ArrList, f func([]int16) ByteOption) ByteOptionList { acc := NilByteOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ArrList: []int16->RuneOption */ func MapRuneOptionToInt16ArrList(m Int16ArrList, f func([]int16) RuneOption) RuneOptionList { acc := NilRuneOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ArrList: []int16->Float32Option */ func MapFloat32OptionToInt16ArrList(m Int16ArrList, f func([]int16) Float32Option) Float32OptionList { acc := NilFloat32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ArrList: []int16->Float64Option */ func MapFloat64OptionToInt16ArrList(m Int16ArrList, f func([]int16) Float64Option) Float64OptionList { acc := NilFloat64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ArrList: []int16->Complex64Option */ func MapComplex64OptionToInt16ArrList(m Int16ArrList, f func([]int16) Complex64Option) Complex64OptionList { acc := NilComplex64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ArrList: []int16->Complex128Option */ func MapComplex128OptionToInt16ArrList(m Int16ArrList, f func([]int16) Complex128Option) Complex128OptionList { acc := NilComplex128OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ArrList: []int16->AnyOption */ func MapAnyOptionToInt16ArrList(m Int16ArrList, f func([]int16) AnyOption) AnyOptionList { acc := NilAnyOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ArrList: []int16->[]bool */ func MapBoolArrToInt16ArrList(m Int16ArrList, f func([]int16) []bool) BoolArrList { acc := NilBoolArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ArrList: []int16->[]string */ func MapStringArrToInt16ArrList(m Int16ArrList, f func([]int16) []string) StringArrList { acc := NilStringArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ArrList: []int16->[]int */ func MapIntArrToInt16ArrList(m Int16ArrList, f func([]int16) []int) IntArrList { acc := NilIntArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ArrList: []int16->[]int8 */ func MapInt8ArrToInt16ArrList(m Int16ArrList, f func([]int16) []int8) Int8ArrList { acc := NilInt8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ArrList: []int16->[]int16 */ func MapInt16ArrToInt16ArrList(m Int16ArrList, f func([]int16) []int16) Int16ArrList { acc := NilInt16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ArrList: []int16->[]int32 */ func MapInt32ArrToInt16ArrList(m Int16ArrList, f func([]int16) []int32) Int32ArrList { acc := NilInt32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ArrList: []int16->[]int64 */ func MapInt64ArrToInt16ArrList(m Int16ArrList, f func([]int16) []int64) Int64ArrList { acc := NilInt64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ArrList: []int16->[]uint */ func MapUintArrToInt16ArrList(m Int16ArrList, f func([]int16) []uint) UintArrList { acc := NilUintArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ArrList: []int16->[]uint8 */ func MapUint8ArrToInt16ArrList(m Int16ArrList, f func([]int16) []uint8) Uint8ArrList { acc := NilUint8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ArrList: []int16->[]uint16 */ func MapUint16ArrToInt16ArrList(m Int16ArrList, f func([]int16) []uint16) Uint16ArrList { acc := NilUint16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ArrList: []int16->[]uint32 */ func MapUint32ArrToInt16ArrList(m Int16ArrList, f func([]int16) []uint32) Uint32ArrList { acc := NilUint32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ArrList: []int16->[]uint64 */ func MapUint64ArrToInt16ArrList(m Int16ArrList, f func([]int16) []uint64) Uint64ArrList { acc := NilUint64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ArrList: []int16->[]uintptr */ func MapUintptrArrToInt16ArrList(m Int16ArrList, f func([]int16) []uintptr) UintptrArrList { acc := NilUintptrArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ArrList: []int16->[]byte */ func MapByteArrToInt16ArrList(m Int16ArrList, f func([]int16) []byte) ByteArrList { acc := NilByteArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ArrList: []int16->[]rune */ func MapRuneArrToInt16ArrList(m Int16ArrList, f func([]int16) []rune) RuneArrList { acc := NilRuneArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ArrList: []int16->[]float32 */ func MapFloat32ArrToInt16ArrList(m Int16ArrList, f func([]int16) []float32) Float32ArrList { acc := NilFloat32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ArrList: []int16->[]float64 */ func MapFloat64ArrToInt16ArrList(m Int16ArrList, f func([]int16) []float64) Float64ArrList { acc := NilFloat64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ArrList: []int16->[]complex64 */ func MapComplex64ArrToInt16ArrList(m Int16ArrList, f func([]int16) []complex64) Complex64ArrList { acc := NilComplex64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ArrList: []int16->[]complex128 */ func MapComplex128ArrToInt16ArrList(m Int16ArrList, f func([]int16) []complex128) Complex128ArrList { acc := NilComplex128ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ArrList: []int16->[]Any */ func MapAnyArrToInt16ArrList(m Int16ArrList, f func([]int16) []Any) AnyArrList { acc := NilAnyArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ArrList: []int16->BoolList */ func MapBoolListToInt16ArrList(m Int16ArrList, f func([]int16) BoolList) BoolListList { acc := NilBoolListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ArrList: []int16->StringList */ func MapStringListToInt16ArrList(m Int16ArrList, f func([]int16) StringList) StringListList { acc := NilStringListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ArrList: []int16->IntList */ func MapIntListToInt16ArrList(m Int16ArrList, f func([]int16) IntList) IntListList { acc := NilIntListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ArrList: []int16->Int8List */ func MapInt8ListToInt16ArrList(m Int16ArrList, f func([]int16) Int8List) Int8ListList { acc := NilInt8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ArrList: []int16->Int16List */ func MapInt16ListToInt16ArrList(m Int16ArrList, f func([]int16) Int16List) Int16ListList { acc := NilInt16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ArrList: []int16->Int32List */ func MapInt32ListToInt16ArrList(m Int16ArrList, f func([]int16) Int32List) Int32ListList { acc := NilInt32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ArrList: []int16->Int64List */ func MapInt64ListToInt16ArrList(m Int16ArrList, f func([]int16) Int64List) Int64ListList { acc := NilInt64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ArrList: []int16->UintList */ func MapUintListToInt16ArrList(m Int16ArrList, f func([]int16) UintList) UintListList { acc := NilUintListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ArrList: []int16->Uint8List */ func MapUint8ListToInt16ArrList(m Int16ArrList, f func([]int16) Uint8List) Uint8ListList { acc := NilUint8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ArrList: []int16->Uint16List */ func MapUint16ListToInt16ArrList(m Int16ArrList, f func([]int16) Uint16List) Uint16ListList { acc := NilUint16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ArrList: []int16->Uint32List */ func MapUint32ListToInt16ArrList(m Int16ArrList, f func([]int16) Uint32List) Uint32ListList { acc := NilUint32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ArrList: []int16->Uint64List */ func MapUint64ListToInt16ArrList(m Int16ArrList, f func([]int16) Uint64List) Uint64ListList { acc := NilUint64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ArrList: []int16->UintptrList */ func MapUintptrListToInt16ArrList(m Int16ArrList, f func([]int16) UintptrList) UintptrListList { acc := NilUintptrListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ArrList: []int16->ByteList */ func MapByteListToInt16ArrList(m Int16ArrList, f func([]int16) ByteList) ByteListList { acc := NilByteListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ArrList: []int16->RuneList */ func MapRuneListToInt16ArrList(m Int16ArrList, f func([]int16) RuneList) RuneListList { acc := NilRuneListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ArrList: []int16->Float32List */ func MapFloat32ListToInt16ArrList(m Int16ArrList, f func([]int16) Float32List) Float32ListList { acc := NilFloat32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ArrList: []int16->Float64List */ func MapFloat64ListToInt16ArrList(m Int16ArrList, f func([]int16) Float64List) Float64ListList { acc := NilFloat64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ArrList: []int16->Complex64List */ func MapComplex64ListToInt16ArrList(m Int16ArrList, f func([]int16) Complex64List) Complex64ListList { acc := NilComplex64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ArrList: []int16->Complex128List */ func MapComplex128ListToInt16ArrList(m Int16ArrList, f func([]int16) Complex128List) Complex128ListList { acc := NilComplex128ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ArrList: []int16->AnyList */ func MapAnyListToInt16ArrList(m Int16ArrList, f func([]int16) AnyList) AnyListList { acc := NilAnyListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ArrList: []int32->bool */ func MapBoolToInt32ArrList(m Int32ArrList, f func([]int32) bool) BoolList { acc := NilBoolList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ArrList: []int32->string */ func MapStringToInt32ArrList(m Int32ArrList, f func([]int32) string) StringList { acc := NilStringList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ArrList: []int32->int */ func MapIntToInt32ArrList(m Int32ArrList, f func([]int32) int) IntList { acc := NilIntList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ArrList: []int32->int8 */ func MapInt8ToInt32ArrList(m Int32ArrList, f func([]int32) int8) Int8List { acc := NilInt8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ArrList: []int32->int16 */ func MapInt16ToInt32ArrList(m Int32ArrList, f func([]int32) int16) Int16List { acc := NilInt16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ArrList: []int32->int32 */ func MapInt32ToInt32ArrList(m Int32ArrList, f func([]int32) int32) Int32List { acc := NilInt32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ArrList: []int32->int64 */ func MapInt64ToInt32ArrList(m Int32ArrList, f func([]int32) int64) Int64List { acc := NilInt64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ArrList: []int32->uint */ func MapUintToInt32ArrList(m Int32ArrList, f func([]int32) uint) UintList { acc := NilUintList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ArrList: []int32->uint8 */ func MapUint8ToInt32ArrList(m Int32ArrList, f func([]int32) uint8) Uint8List { acc := NilUint8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ArrList: []int32->uint16 */ func MapUint16ToInt32ArrList(m Int32ArrList, f func([]int32) uint16) Uint16List { acc := NilUint16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ArrList: []int32->uint32 */ func MapUint32ToInt32ArrList(m Int32ArrList, f func([]int32) uint32) Uint32List { acc := NilUint32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ArrList: []int32->uint64 */ func MapUint64ToInt32ArrList(m Int32ArrList, f func([]int32) uint64) Uint64List { acc := NilUint64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ArrList: []int32->uintptr */ func MapUintptrToInt32ArrList(m Int32ArrList, f func([]int32) uintptr) UintptrList { acc := NilUintptrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ArrList: []int32->byte */ func MapByteToInt32ArrList(m Int32ArrList, f func([]int32) byte) ByteList { acc := NilByteList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ArrList: []int32->rune */ func MapRuneToInt32ArrList(m Int32ArrList, f func([]int32) rune) RuneList { acc := NilRuneList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ArrList: []int32->float32 */ func MapFloat32ToInt32ArrList(m Int32ArrList, f func([]int32) float32) Float32List { acc := NilFloat32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ArrList: []int32->float64 */ func MapFloat64ToInt32ArrList(m Int32ArrList, f func([]int32) float64) Float64List { acc := NilFloat64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ArrList: []int32->complex64 */ func MapComplex64ToInt32ArrList(m Int32ArrList, f func([]int32) complex64) Complex64List { acc := NilComplex64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ArrList: []int32->complex128 */ func MapComplex128ToInt32ArrList(m Int32ArrList, f func([]int32) complex128) Complex128List { acc := NilComplex128List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ArrList: []int32->Any */ func MapAnyToInt32ArrList(m Int32ArrList, f func([]int32) Any) AnyList { acc := NilAnyList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ArrList: []int32->BoolOption */ func MapBoolOptionToInt32ArrList(m Int32ArrList, f func([]int32) BoolOption) BoolOptionList { acc := NilBoolOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ArrList: []int32->StringOption */ func MapStringOptionToInt32ArrList(m Int32ArrList, f func([]int32) StringOption) StringOptionList { acc := NilStringOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ArrList: []int32->IntOption */ func MapIntOptionToInt32ArrList(m Int32ArrList, f func([]int32) IntOption) IntOptionList { acc := NilIntOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ArrList: []int32->Int8Option */ func MapInt8OptionToInt32ArrList(m Int32ArrList, f func([]int32) Int8Option) Int8OptionList { acc := NilInt8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ArrList: []int32->Int16Option */ func MapInt16OptionToInt32ArrList(m Int32ArrList, f func([]int32) Int16Option) Int16OptionList { acc := NilInt16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ArrList: []int32->Int32Option */ func MapInt32OptionToInt32ArrList(m Int32ArrList, f func([]int32) Int32Option) Int32OptionList { acc := NilInt32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ArrList: []int32->Int64Option */ func MapInt64OptionToInt32ArrList(m Int32ArrList, f func([]int32) Int64Option) Int64OptionList { acc := NilInt64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ArrList: []int32->UintOption */ func MapUintOptionToInt32ArrList(m Int32ArrList, f func([]int32) UintOption) UintOptionList { acc := NilUintOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ArrList: []int32->Uint8Option */ func MapUint8OptionToInt32ArrList(m Int32ArrList, f func([]int32) Uint8Option) Uint8OptionList { acc := NilUint8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ArrList: []int32->Uint16Option */ func MapUint16OptionToInt32ArrList(m Int32ArrList, f func([]int32) Uint16Option) Uint16OptionList { acc := NilUint16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ArrList: []int32->Uint32Option */ func MapUint32OptionToInt32ArrList(m Int32ArrList, f func([]int32) Uint32Option) Uint32OptionList { acc := NilUint32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ArrList: []int32->Uint64Option */ func MapUint64OptionToInt32ArrList(m Int32ArrList, f func([]int32) Uint64Option) Uint64OptionList { acc := NilUint64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ArrList: []int32->UintptrOption */ func MapUintptrOptionToInt32ArrList(m Int32ArrList, f func([]int32) UintptrOption) UintptrOptionList { acc := NilUintptrOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ArrList: []int32->ByteOption */ func MapByteOptionToInt32ArrList(m Int32ArrList, f func([]int32) ByteOption) ByteOptionList { acc := NilByteOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ArrList: []int32->RuneOption */ func MapRuneOptionToInt32ArrList(m Int32ArrList, f func([]int32) RuneOption) RuneOptionList { acc := NilRuneOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ArrList: []int32->Float32Option */ func MapFloat32OptionToInt32ArrList(m Int32ArrList, f func([]int32) Float32Option) Float32OptionList { acc := NilFloat32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ArrList: []int32->Float64Option */ func MapFloat64OptionToInt32ArrList(m Int32ArrList, f func([]int32) Float64Option) Float64OptionList { acc := NilFloat64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ArrList: []int32->Complex64Option */ func MapComplex64OptionToInt32ArrList(m Int32ArrList, f func([]int32) Complex64Option) Complex64OptionList { acc := NilComplex64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ArrList: []int32->Complex128Option */ func MapComplex128OptionToInt32ArrList(m Int32ArrList, f func([]int32) Complex128Option) Complex128OptionList { acc := NilComplex128OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ArrList: []int32->AnyOption */ func MapAnyOptionToInt32ArrList(m Int32ArrList, f func([]int32) AnyOption) AnyOptionList { acc := NilAnyOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ArrList: []int32->[]bool */ func MapBoolArrToInt32ArrList(m Int32ArrList, f func([]int32) []bool) BoolArrList { acc := NilBoolArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ArrList: []int32->[]string */ func MapStringArrToInt32ArrList(m Int32ArrList, f func([]int32) []string) StringArrList { acc := NilStringArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ArrList: []int32->[]int */ func MapIntArrToInt32ArrList(m Int32ArrList, f func([]int32) []int) IntArrList { acc := NilIntArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ArrList: []int32->[]int8 */ func MapInt8ArrToInt32ArrList(m Int32ArrList, f func([]int32) []int8) Int8ArrList { acc := NilInt8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ArrList: []int32->[]int16 */ func MapInt16ArrToInt32ArrList(m Int32ArrList, f func([]int32) []int16) Int16ArrList { acc := NilInt16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ArrList: []int32->[]int32 */ func MapInt32ArrToInt32ArrList(m Int32ArrList, f func([]int32) []int32) Int32ArrList { acc := NilInt32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ArrList: []int32->[]int64 */ func MapInt64ArrToInt32ArrList(m Int32ArrList, f func([]int32) []int64) Int64ArrList { acc := NilInt64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ArrList: []int32->[]uint */ func MapUintArrToInt32ArrList(m Int32ArrList, f func([]int32) []uint) UintArrList { acc := NilUintArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ArrList: []int32->[]uint8 */ func MapUint8ArrToInt32ArrList(m Int32ArrList, f func([]int32) []uint8) Uint8ArrList { acc := NilUint8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ArrList: []int32->[]uint16 */ func MapUint16ArrToInt32ArrList(m Int32ArrList, f func([]int32) []uint16) Uint16ArrList { acc := NilUint16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ArrList: []int32->[]uint32 */ func MapUint32ArrToInt32ArrList(m Int32ArrList, f func([]int32) []uint32) Uint32ArrList { acc := NilUint32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ArrList: []int32->[]uint64 */ func MapUint64ArrToInt32ArrList(m Int32ArrList, f func([]int32) []uint64) Uint64ArrList { acc := NilUint64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ArrList: []int32->[]uintptr */ func MapUintptrArrToInt32ArrList(m Int32ArrList, f func([]int32) []uintptr) UintptrArrList { acc := NilUintptrArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ArrList: []int32->[]byte */ func MapByteArrToInt32ArrList(m Int32ArrList, f func([]int32) []byte) ByteArrList { acc := NilByteArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ArrList: []int32->[]rune */ func MapRuneArrToInt32ArrList(m Int32ArrList, f func([]int32) []rune) RuneArrList { acc := NilRuneArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ArrList: []int32->[]float32 */ func MapFloat32ArrToInt32ArrList(m Int32ArrList, f func([]int32) []float32) Float32ArrList { acc := NilFloat32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ArrList: []int32->[]float64 */ func MapFloat64ArrToInt32ArrList(m Int32ArrList, f func([]int32) []float64) Float64ArrList { acc := NilFloat64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ArrList: []int32->[]complex64 */ func MapComplex64ArrToInt32ArrList(m Int32ArrList, f func([]int32) []complex64) Complex64ArrList { acc := NilComplex64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ArrList: []int32->[]complex128 */ func MapComplex128ArrToInt32ArrList(m Int32ArrList, f func([]int32) []complex128) Complex128ArrList { acc := NilComplex128ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ArrList: []int32->[]Any */ func MapAnyArrToInt32ArrList(m Int32ArrList, f func([]int32) []Any) AnyArrList { acc := NilAnyArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ArrList: []int32->BoolList */ func MapBoolListToInt32ArrList(m Int32ArrList, f func([]int32) BoolList) BoolListList { acc := NilBoolListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ArrList: []int32->StringList */ func MapStringListToInt32ArrList(m Int32ArrList, f func([]int32) StringList) StringListList { acc := NilStringListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ArrList: []int32->IntList */ func MapIntListToInt32ArrList(m Int32ArrList, f func([]int32) IntList) IntListList { acc := NilIntListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ArrList: []int32->Int8List */ func MapInt8ListToInt32ArrList(m Int32ArrList, f func([]int32) Int8List) Int8ListList { acc := NilInt8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ArrList: []int32->Int16List */ func MapInt16ListToInt32ArrList(m Int32ArrList, f func([]int32) Int16List) Int16ListList { acc := NilInt16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ArrList: []int32->Int32List */ func MapInt32ListToInt32ArrList(m Int32ArrList, f func([]int32) Int32List) Int32ListList { acc := NilInt32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ArrList: []int32->Int64List */ func MapInt64ListToInt32ArrList(m Int32ArrList, f func([]int32) Int64List) Int64ListList { acc := NilInt64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ArrList: []int32->UintList */ func MapUintListToInt32ArrList(m Int32ArrList, f func([]int32) UintList) UintListList { acc := NilUintListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ArrList: []int32->Uint8List */ func MapUint8ListToInt32ArrList(m Int32ArrList, f func([]int32) Uint8List) Uint8ListList { acc := NilUint8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ArrList: []int32->Uint16List */ func MapUint16ListToInt32ArrList(m Int32ArrList, f func([]int32) Uint16List) Uint16ListList { acc := NilUint16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ArrList: []int32->Uint32List */ func MapUint32ListToInt32ArrList(m Int32ArrList, f func([]int32) Uint32List) Uint32ListList { acc := NilUint32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ArrList: []int32->Uint64List */ func MapUint64ListToInt32ArrList(m Int32ArrList, f func([]int32) Uint64List) Uint64ListList { acc := NilUint64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ArrList: []int32->UintptrList */ func MapUintptrListToInt32ArrList(m Int32ArrList, f func([]int32) UintptrList) UintptrListList { acc := NilUintptrListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ArrList: []int32->ByteList */ func MapByteListToInt32ArrList(m Int32ArrList, f func([]int32) ByteList) ByteListList { acc := NilByteListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ArrList: []int32->RuneList */ func MapRuneListToInt32ArrList(m Int32ArrList, f func([]int32) RuneList) RuneListList { acc := NilRuneListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ArrList: []int32->Float32List */ func MapFloat32ListToInt32ArrList(m Int32ArrList, f func([]int32) Float32List) Float32ListList { acc := NilFloat32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ArrList: []int32->Float64List */ func MapFloat64ListToInt32ArrList(m Int32ArrList, f func([]int32) Float64List) Float64ListList { acc := NilFloat64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ArrList: []int32->Complex64List */ func MapComplex64ListToInt32ArrList(m Int32ArrList, f func([]int32) Complex64List) Complex64ListList { acc := NilComplex64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ArrList: []int32->Complex128List */ func MapComplex128ListToInt32ArrList(m Int32ArrList, f func([]int32) Complex128List) Complex128ListList { acc := NilComplex128ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ArrList: []int32->AnyList */ func MapAnyListToInt32ArrList(m Int32ArrList, f func([]int32) AnyList) AnyListList { acc := NilAnyListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ArrList: []int64->bool */ func MapBoolToInt64ArrList(m Int64ArrList, f func([]int64) bool) BoolList { acc := NilBoolList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ArrList: []int64->string */ func MapStringToInt64ArrList(m Int64ArrList, f func([]int64) string) StringList { acc := NilStringList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ArrList: []int64->int */ func MapIntToInt64ArrList(m Int64ArrList, f func([]int64) int) IntList { acc := NilIntList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ArrList: []int64->int8 */ func MapInt8ToInt64ArrList(m Int64ArrList, f func([]int64) int8) Int8List { acc := NilInt8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ArrList: []int64->int16 */ func MapInt16ToInt64ArrList(m Int64ArrList, f func([]int64) int16) Int16List { acc := NilInt16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ArrList: []int64->int32 */ func MapInt32ToInt64ArrList(m Int64ArrList, f func([]int64) int32) Int32List { acc := NilInt32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ArrList: []int64->int64 */ func MapInt64ToInt64ArrList(m Int64ArrList, f func([]int64) int64) Int64List { acc := NilInt64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ArrList: []int64->uint */ func MapUintToInt64ArrList(m Int64ArrList, f func([]int64) uint) UintList { acc := NilUintList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ArrList: []int64->uint8 */ func MapUint8ToInt64ArrList(m Int64ArrList, f func([]int64) uint8) Uint8List { acc := NilUint8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ArrList: []int64->uint16 */ func MapUint16ToInt64ArrList(m Int64ArrList, f func([]int64) uint16) Uint16List { acc := NilUint16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ArrList: []int64->uint32 */ func MapUint32ToInt64ArrList(m Int64ArrList, f func([]int64) uint32) Uint32List { acc := NilUint32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ArrList: []int64->uint64 */ func MapUint64ToInt64ArrList(m Int64ArrList, f func([]int64) uint64) Uint64List { acc := NilUint64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ArrList: []int64->uintptr */ func MapUintptrToInt64ArrList(m Int64ArrList, f func([]int64) uintptr) UintptrList { acc := NilUintptrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ArrList: []int64->byte */ func MapByteToInt64ArrList(m Int64ArrList, f func([]int64) byte) ByteList { acc := NilByteList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ArrList: []int64->rune */ func MapRuneToInt64ArrList(m Int64ArrList, f func([]int64) rune) RuneList { acc := NilRuneList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ArrList: []int64->float32 */ func MapFloat32ToInt64ArrList(m Int64ArrList, f func([]int64) float32) Float32List { acc := NilFloat32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ArrList: []int64->float64 */ func MapFloat64ToInt64ArrList(m Int64ArrList, f func([]int64) float64) Float64List { acc := NilFloat64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ArrList: []int64->complex64 */ func MapComplex64ToInt64ArrList(m Int64ArrList, f func([]int64) complex64) Complex64List { acc := NilComplex64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ArrList: []int64->complex128 */ func MapComplex128ToInt64ArrList(m Int64ArrList, f func([]int64) complex128) Complex128List { acc := NilComplex128List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ArrList: []int64->Any */ func MapAnyToInt64ArrList(m Int64ArrList, f func([]int64) Any) AnyList { acc := NilAnyList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ArrList: []int64->BoolOption */ func MapBoolOptionToInt64ArrList(m Int64ArrList, f func([]int64) BoolOption) BoolOptionList { acc := NilBoolOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ArrList: []int64->StringOption */ func MapStringOptionToInt64ArrList(m Int64ArrList, f func([]int64) StringOption) StringOptionList { acc := NilStringOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ArrList: []int64->IntOption */ func MapIntOptionToInt64ArrList(m Int64ArrList, f func([]int64) IntOption) IntOptionList { acc := NilIntOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ArrList: []int64->Int8Option */ func MapInt8OptionToInt64ArrList(m Int64ArrList, f func([]int64) Int8Option) Int8OptionList { acc := NilInt8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ArrList: []int64->Int16Option */ func MapInt16OptionToInt64ArrList(m Int64ArrList, f func([]int64) Int16Option) Int16OptionList { acc := NilInt16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ArrList: []int64->Int32Option */ func MapInt32OptionToInt64ArrList(m Int64ArrList, f func([]int64) Int32Option) Int32OptionList { acc := NilInt32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ArrList: []int64->Int64Option */ func MapInt64OptionToInt64ArrList(m Int64ArrList, f func([]int64) Int64Option) Int64OptionList { acc := NilInt64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ArrList: []int64->UintOption */ func MapUintOptionToInt64ArrList(m Int64ArrList, f func([]int64) UintOption) UintOptionList { acc := NilUintOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ArrList: []int64->Uint8Option */ func MapUint8OptionToInt64ArrList(m Int64ArrList, f func([]int64) Uint8Option) Uint8OptionList { acc := NilUint8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ArrList: []int64->Uint16Option */ func MapUint16OptionToInt64ArrList(m Int64ArrList, f func([]int64) Uint16Option) Uint16OptionList { acc := NilUint16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ArrList: []int64->Uint32Option */ func MapUint32OptionToInt64ArrList(m Int64ArrList, f func([]int64) Uint32Option) Uint32OptionList { acc := NilUint32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ArrList: []int64->Uint64Option */ func MapUint64OptionToInt64ArrList(m Int64ArrList, f func([]int64) Uint64Option) Uint64OptionList { acc := NilUint64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ArrList: []int64->UintptrOption */ func MapUintptrOptionToInt64ArrList(m Int64ArrList, f func([]int64) UintptrOption) UintptrOptionList { acc := NilUintptrOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ArrList: []int64->ByteOption */ func MapByteOptionToInt64ArrList(m Int64ArrList, f func([]int64) ByteOption) ByteOptionList { acc := NilByteOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ArrList: []int64->RuneOption */ func MapRuneOptionToInt64ArrList(m Int64ArrList, f func([]int64) RuneOption) RuneOptionList { acc := NilRuneOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ArrList: []int64->Float32Option */ func MapFloat32OptionToInt64ArrList(m Int64ArrList, f func([]int64) Float32Option) Float32OptionList { acc := NilFloat32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ArrList: []int64->Float64Option */ func MapFloat64OptionToInt64ArrList(m Int64ArrList, f func([]int64) Float64Option) Float64OptionList { acc := NilFloat64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ArrList: []int64->Complex64Option */ func MapComplex64OptionToInt64ArrList(m Int64ArrList, f func([]int64) Complex64Option) Complex64OptionList { acc := NilComplex64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ArrList: []int64->Complex128Option */ func MapComplex128OptionToInt64ArrList(m Int64ArrList, f func([]int64) Complex128Option) Complex128OptionList { acc := NilComplex128OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ArrList: []int64->AnyOption */ func MapAnyOptionToInt64ArrList(m Int64ArrList, f func([]int64) AnyOption) AnyOptionList { acc := NilAnyOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ArrList: []int64->[]bool */ func MapBoolArrToInt64ArrList(m Int64ArrList, f func([]int64) []bool) BoolArrList { acc := NilBoolArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ArrList: []int64->[]string */ func MapStringArrToInt64ArrList(m Int64ArrList, f func([]int64) []string) StringArrList { acc := NilStringArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ArrList: []int64->[]int */ func MapIntArrToInt64ArrList(m Int64ArrList, f func([]int64) []int) IntArrList { acc := NilIntArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ArrList: []int64->[]int8 */ func MapInt8ArrToInt64ArrList(m Int64ArrList, f func([]int64) []int8) Int8ArrList { acc := NilInt8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ArrList: []int64->[]int16 */ func MapInt16ArrToInt64ArrList(m Int64ArrList, f func([]int64) []int16) Int16ArrList { acc := NilInt16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ArrList: []int64->[]int32 */ func MapInt32ArrToInt64ArrList(m Int64ArrList, f func([]int64) []int32) Int32ArrList { acc := NilInt32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ArrList: []int64->[]int64 */ func MapInt64ArrToInt64ArrList(m Int64ArrList, f func([]int64) []int64) Int64ArrList { acc := NilInt64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ArrList: []int64->[]uint */ func MapUintArrToInt64ArrList(m Int64ArrList, f func([]int64) []uint) UintArrList { acc := NilUintArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ArrList: []int64->[]uint8 */ func MapUint8ArrToInt64ArrList(m Int64ArrList, f func([]int64) []uint8) Uint8ArrList { acc := NilUint8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ArrList: []int64->[]uint16 */ func MapUint16ArrToInt64ArrList(m Int64ArrList, f func([]int64) []uint16) Uint16ArrList { acc := NilUint16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ArrList: []int64->[]uint32 */ func MapUint32ArrToInt64ArrList(m Int64ArrList, f func([]int64) []uint32) Uint32ArrList { acc := NilUint32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ArrList: []int64->[]uint64 */ func MapUint64ArrToInt64ArrList(m Int64ArrList, f func([]int64) []uint64) Uint64ArrList { acc := NilUint64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ArrList: []int64->[]uintptr */ func MapUintptrArrToInt64ArrList(m Int64ArrList, f func([]int64) []uintptr) UintptrArrList { acc := NilUintptrArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ArrList: []int64->[]byte */ func MapByteArrToInt64ArrList(m Int64ArrList, f func([]int64) []byte) ByteArrList { acc := NilByteArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ArrList: []int64->[]rune */ func MapRuneArrToInt64ArrList(m Int64ArrList, f func([]int64) []rune) RuneArrList { acc := NilRuneArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ArrList: []int64->[]float32 */ func MapFloat32ArrToInt64ArrList(m Int64ArrList, f func([]int64) []float32) Float32ArrList { acc := NilFloat32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ArrList: []int64->[]float64 */ func MapFloat64ArrToInt64ArrList(m Int64ArrList, f func([]int64) []float64) Float64ArrList { acc := NilFloat64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ArrList: []int64->[]complex64 */ func MapComplex64ArrToInt64ArrList(m Int64ArrList, f func([]int64) []complex64) Complex64ArrList { acc := NilComplex64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ArrList: []int64->[]complex128 */ func MapComplex128ArrToInt64ArrList(m Int64ArrList, f func([]int64) []complex128) Complex128ArrList { acc := NilComplex128ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ArrList: []int64->[]Any */ func MapAnyArrToInt64ArrList(m Int64ArrList, f func([]int64) []Any) AnyArrList { acc := NilAnyArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ArrList: []int64->BoolList */ func MapBoolListToInt64ArrList(m Int64ArrList, f func([]int64) BoolList) BoolListList { acc := NilBoolListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ArrList: []int64->StringList */ func MapStringListToInt64ArrList(m Int64ArrList, f func([]int64) StringList) StringListList { acc := NilStringListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ArrList: []int64->IntList */ func MapIntListToInt64ArrList(m Int64ArrList, f func([]int64) IntList) IntListList { acc := NilIntListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ArrList: []int64->Int8List */ func MapInt8ListToInt64ArrList(m Int64ArrList, f func([]int64) Int8List) Int8ListList { acc := NilInt8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ArrList: []int64->Int16List */ func MapInt16ListToInt64ArrList(m Int64ArrList, f func([]int64) Int16List) Int16ListList { acc := NilInt16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ArrList: []int64->Int32List */ func MapInt32ListToInt64ArrList(m Int64ArrList, f func([]int64) Int32List) Int32ListList { acc := NilInt32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ArrList: []int64->Int64List */ func MapInt64ListToInt64ArrList(m Int64ArrList, f func([]int64) Int64List) Int64ListList { acc := NilInt64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ArrList: []int64->UintList */ func MapUintListToInt64ArrList(m Int64ArrList, f func([]int64) UintList) UintListList { acc := NilUintListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ArrList: []int64->Uint8List */ func MapUint8ListToInt64ArrList(m Int64ArrList, f func([]int64) Uint8List) Uint8ListList { acc := NilUint8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ArrList: []int64->Uint16List */ func MapUint16ListToInt64ArrList(m Int64ArrList, f func([]int64) Uint16List) Uint16ListList { acc := NilUint16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ArrList: []int64->Uint32List */ func MapUint32ListToInt64ArrList(m Int64ArrList, f func([]int64) Uint32List) Uint32ListList { acc := NilUint32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ArrList: []int64->Uint64List */ func MapUint64ListToInt64ArrList(m Int64ArrList, f func([]int64) Uint64List) Uint64ListList { acc := NilUint64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ArrList: []int64->UintptrList */ func MapUintptrListToInt64ArrList(m Int64ArrList, f func([]int64) UintptrList) UintptrListList { acc := NilUintptrListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ArrList: []int64->ByteList */ func MapByteListToInt64ArrList(m Int64ArrList, f func([]int64) ByteList) ByteListList { acc := NilByteListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ArrList: []int64->RuneList */ func MapRuneListToInt64ArrList(m Int64ArrList, f func([]int64) RuneList) RuneListList { acc := NilRuneListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ArrList: []int64->Float32List */ func MapFloat32ListToInt64ArrList(m Int64ArrList, f func([]int64) Float32List) Float32ListList { acc := NilFloat32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ArrList: []int64->Float64List */ func MapFloat64ListToInt64ArrList(m Int64ArrList, f func([]int64) Float64List) Float64ListList { acc := NilFloat64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ArrList: []int64->Complex64List */ func MapComplex64ListToInt64ArrList(m Int64ArrList, f func([]int64) Complex64List) Complex64ListList { acc := NilComplex64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ArrList: []int64->Complex128List */ func MapComplex128ListToInt64ArrList(m Int64ArrList, f func([]int64) Complex128List) Complex128ListList { acc := NilComplex128ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ArrList: []int64->AnyList */ func MapAnyListToInt64ArrList(m Int64ArrList, f func([]int64) AnyList) AnyListList { acc := NilAnyListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintArrList: []uint->bool */ func MapBoolToUintArrList(m UintArrList, f func([]uint) bool) BoolList { acc := NilBoolList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintArrList: []uint->string */ func MapStringToUintArrList(m UintArrList, f func([]uint) string) StringList { acc := NilStringList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintArrList: []uint->int */ func MapIntToUintArrList(m UintArrList, f func([]uint) int) IntList { acc := NilIntList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintArrList: []uint->int8 */ func MapInt8ToUintArrList(m UintArrList, f func([]uint) int8) Int8List { acc := NilInt8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintArrList: []uint->int16 */ func MapInt16ToUintArrList(m UintArrList, f func([]uint) int16) Int16List { acc := NilInt16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintArrList: []uint->int32 */ func MapInt32ToUintArrList(m UintArrList, f func([]uint) int32) Int32List { acc := NilInt32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintArrList: []uint->int64 */ func MapInt64ToUintArrList(m UintArrList, f func([]uint) int64) Int64List { acc := NilInt64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintArrList: []uint->uint */ func MapUintToUintArrList(m UintArrList, f func([]uint) uint) UintList { acc := NilUintList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintArrList: []uint->uint8 */ func MapUint8ToUintArrList(m UintArrList, f func([]uint) uint8) Uint8List { acc := NilUint8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintArrList: []uint->uint16 */ func MapUint16ToUintArrList(m UintArrList, f func([]uint) uint16) Uint16List { acc := NilUint16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintArrList: []uint->uint32 */ func MapUint32ToUintArrList(m UintArrList, f func([]uint) uint32) Uint32List { acc := NilUint32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintArrList: []uint->uint64 */ func MapUint64ToUintArrList(m UintArrList, f func([]uint) uint64) Uint64List { acc := NilUint64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintArrList: []uint->uintptr */ func MapUintptrToUintArrList(m UintArrList, f func([]uint) uintptr) UintptrList { acc := NilUintptrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintArrList: []uint->byte */ func MapByteToUintArrList(m UintArrList, f func([]uint) byte) ByteList { acc := NilByteList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintArrList: []uint->rune */ func MapRuneToUintArrList(m UintArrList, f func([]uint) rune) RuneList { acc := NilRuneList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintArrList: []uint->float32 */ func MapFloat32ToUintArrList(m UintArrList, f func([]uint) float32) Float32List { acc := NilFloat32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintArrList: []uint->float64 */ func MapFloat64ToUintArrList(m UintArrList, f func([]uint) float64) Float64List { acc := NilFloat64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintArrList: []uint->complex64 */ func MapComplex64ToUintArrList(m UintArrList, f func([]uint) complex64) Complex64List { acc := NilComplex64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintArrList: []uint->complex128 */ func MapComplex128ToUintArrList(m UintArrList, f func([]uint) complex128) Complex128List { acc := NilComplex128List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintArrList: []uint->Any */ func MapAnyToUintArrList(m UintArrList, f func([]uint) Any) AnyList { acc := NilAnyList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintArrList: []uint->BoolOption */ func MapBoolOptionToUintArrList(m UintArrList, f func([]uint) BoolOption) BoolOptionList { acc := NilBoolOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintArrList: []uint->StringOption */ func MapStringOptionToUintArrList(m UintArrList, f func([]uint) StringOption) StringOptionList { acc := NilStringOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintArrList: []uint->IntOption */ func MapIntOptionToUintArrList(m UintArrList, f func([]uint) IntOption) IntOptionList { acc := NilIntOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintArrList: []uint->Int8Option */ func MapInt8OptionToUintArrList(m UintArrList, f func([]uint) Int8Option) Int8OptionList { acc := NilInt8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintArrList: []uint->Int16Option */ func MapInt16OptionToUintArrList(m UintArrList, f func([]uint) Int16Option) Int16OptionList { acc := NilInt16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintArrList: []uint->Int32Option */ func MapInt32OptionToUintArrList(m UintArrList, f func([]uint) Int32Option) Int32OptionList { acc := NilInt32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintArrList: []uint->Int64Option */ func MapInt64OptionToUintArrList(m UintArrList, f func([]uint) Int64Option) Int64OptionList { acc := NilInt64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintArrList: []uint->UintOption */ func MapUintOptionToUintArrList(m UintArrList, f func([]uint) UintOption) UintOptionList { acc := NilUintOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintArrList: []uint->Uint8Option */ func MapUint8OptionToUintArrList(m UintArrList, f func([]uint) Uint8Option) Uint8OptionList { acc := NilUint8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintArrList: []uint->Uint16Option */ func MapUint16OptionToUintArrList(m UintArrList, f func([]uint) Uint16Option) Uint16OptionList { acc := NilUint16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintArrList: []uint->Uint32Option */ func MapUint32OptionToUintArrList(m UintArrList, f func([]uint) Uint32Option) Uint32OptionList { acc := NilUint32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintArrList: []uint->Uint64Option */ func MapUint64OptionToUintArrList(m UintArrList, f func([]uint) Uint64Option) Uint64OptionList { acc := NilUint64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintArrList: []uint->UintptrOption */ func MapUintptrOptionToUintArrList(m UintArrList, f func([]uint) UintptrOption) UintptrOptionList { acc := NilUintptrOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintArrList: []uint->ByteOption */ func MapByteOptionToUintArrList(m UintArrList, f func([]uint) ByteOption) ByteOptionList { acc := NilByteOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintArrList: []uint->RuneOption */ func MapRuneOptionToUintArrList(m UintArrList, f func([]uint) RuneOption) RuneOptionList { acc := NilRuneOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintArrList: []uint->Float32Option */ func MapFloat32OptionToUintArrList(m UintArrList, f func([]uint) Float32Option) Float32OptionList { acc := NilFloat32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintArrList: []uint->Float64Option */ func MapFloat64OptionToUintArrList(m UintArrList, f func([]uint) Float64Option) Float64OptionList { acc := NilFloat64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintArrList: []uint->Complex64Option */ func MapComplex64OptionToUintArrList(m UintArrList, f func([]uint) Complex64Option) Complex64OptionList { acc := NilComplex64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintArrList: []uint->Complex128Option */ func MapComplex128OptionToUintArrList(m UintArrList, f func([]uint) Complex128Option) Complex128OptionList { acc := NilComplex128OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintArrList: []uint->AnyOption */ func MapAnyOptionToUintArrList(m UintArrList, f func([]uint) AnyOption) AnyOptionList { acc := NilAnyOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintArrList: []uint->[]bool */ func MapBoolArrToUintArrList(m UintArrList, f func([]uint) []bool) BoolArrList { acc := NilBoolArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintArrList: []uint->[]string */ func MapStringArrToUintArrList(m UintArrList, f func([]uint) []string) StringArrList { acc := NilStringArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintArrList: []uint->[]int */ func MapIntArrToUintArrList(m UintArrList, f func([]uint) []int) IntArrList { acc := NilIntArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintArrList: []uint->[]int8 */ func MapInt8ArrToUintArrList(m UintArrList, f func([]uint) []int8) Int8ArrList { acc := NilInt8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintArrList: []uint->[]int16 */ func MapInt16ArrToUintArrList(m UintArrList, f func([]uint) []int16) Int16ArrList { acc := NilInt16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintArrList: []uint->[]int32 */ func MapInt32ArrToUintArrList(m UintArrList, f func([]uint) []int32) Int32ArrList { acc := NilInt32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintArrList: []uint->[]int64 */ func MapInt64ArrToUintArrList(m UintArrList, f func([]uint) []int64) Int64ArrList { acc := NilInt64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintArrList: []uint->[]uint */ func MapUintArrToUintArrList(m UintArrList, f func([]uint) []uint) UintArrList { acc := NilUintArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintArrList: []uint->[]uint8 */ func MapUint8ArrToUintArrList(m UintArrList, f func([]uint) []uint8) Uint8ArrList { acc := NilUint8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintArrList: []uint->[]uint16 */ func MapUint16ArrToUintArrList(m UintArrList, f func([]uint) []uint16) Uint16ArrList { acc := NilUint16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintArrList: []uint->[]uint32 */ func MapUint32ArrToUintArrList(m UintArrList, f func([]uint) []uint32) Uint32ArrList { acc := NilUint32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintArrList: []uint->[]uint64 */ func MapUint64ArrToUintArrList(m UintArrList, f func([]uint) []uint64) Uint64ArrList { acc := NilUint64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintArrList: []uint->[]uintptr */ func MapUintptrArrToUintArrList(m UintArrList, f func([]uint) []uintptr) UintptrArrList { acc := NilUintptrArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintArrList: []uint->[]byte */ func MapByteArrToUintArrList(m UintArrList, f func([]uint) []byte) ByteArrList { acc := NilByteArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintArrList: []uint->[]rune */ func MapRuneArrToUintArrList(m UintArrList, f func([]uint) []rune) RuneArrList { acc := NilRuneArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintArrList: []uint->[]float32 */ func MapFloat32ArrToUintArrList(m UintArrList, f func([]uint) []float32) Float32ArrList { acc := NilFloat32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintArrList: []uint->[]float64 */ func MapFloat64ArrToUintArrList(m UintArrList, f func([]uint) []float64) Float64ArrList { acc := NilFloat64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintArrList: []uint->[]complex64 */ func MapComplex64ArrToUintArrList(m UintArrList, f func([]uint) []complex64) Complex64ArrList { acc := NilComplex64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintArrList: []uint->[]complex128 */ func MapComplex128ArrToUintArrList(m UintArrList, f func([]uint) []complex128) Complex128ArrList { acc := NilComplex128ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintArrList: []uint->[]Any */ func MapAnyArrToUintArrList(m UintArrList, f func([]uint) []Any) AnyArrList { acc := NilAnyArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintArrList: []uint->BoolList */ func MapBoolListToUintArrList(m UintArrList, f func([]uint) BoolList) BoolListList { acc := NilBoolListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintArrList: []uint->StringList */ func MapStringListToUintArrList(m UintArrList, f func([]uint) StringList) StringListList { acc := NilStringListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintArrList: []uint->IntList */ func MapIntListToUintArrList(m UintArrList, f func([]uint) IntList) IntListList { acc := NilIntListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintArrList: []uint->Int8List */ func MapInt8ListToUintArrList(m UintArrList, f func([]uint) Int8List) Int8ListList { acc := NilInt8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintArrList: []uint->Int16List */ func MapInt16ListToUintArrList(m UintArrList, f func([]uint) Int16List) Int16ListList { acc := NilInt16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintArrList: []uint->Int32List */ func MapInt32ListToUintArrList(m UintArrList, f func([]uint) Int32List) Int32ListList { acc := NilInt32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintArrList: []uint->Int64List */ func MapInt64ListToUintArrList(m UintArrList, f func([]uint) Int64List) Int64ListList { acc := NilInt64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintArrList: []uint->UintList */ func MapUintListToUintArrList(m UintArrList, f func([]uint) UintList) UintListList { acc := NilUintListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintArrList: []uint->Uint8List */ func MapUint8ListToUintArrList(m UintArrList, f func([]uint) Uint8List) Uint8ListList { acc := NilUint8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintArrList: []uint->Uint16List */ func MapUint16ListToUintArrList(m UintArrList, f func([]uint) Uint16List) Uint16ListList { acc := NilUint16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintArrList: []uint->Uint32List */ func MapUint32ListToUintArrList(m UintArrList, f func([]uint) Uint32List) Uint32ListList { acc := NilUint32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintArrList: []uint->Uint64List */ func MapUint64ListToUintArrList(m UintArrList, f func([]uint) Uint64List) Uint64ListList { acc := NilUint64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintArrList: []uint->UintptrList */ func MapUintptrListToUintArrList(m UintArrList, f func([]uint) UintptrList) UintptrListList { acc := NilUintptrListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintArrList: []uint->ByteList */ func MapByteListToUintArrList(m UintArrList, f func([]uint) ByteList) ByteListList { acc := NilByteListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintArrList: []uint->RuneList */ func MapRuneListToUintArrList(m UintArrList, f func([]uint) RuneList) RuneListList { acc := NilRuneListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintArrList: []uint->Float32List */ func MapFloat32ListToUintArrList(m UintArrList, f func([]uint) Float32List) Float32ListList { acc := NilFloat32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintArrList: []uint->Float64List */ func MapFloat64ListToUintArrList(m UintArrList, f func([]uint) Float64List) Float64ListList { acc := NilFloat64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintArrList: []uint->Complex64List */ func MapComplex64ListToUintArrList(m UintArrList, f func([]uint) Complex64List) Complex64ListList { acc := NilComplex64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintArrList: []uint->Complex128List */ func MapComplex128ListToUintArrList(m UintArrList, f func([]uint) Complex128List) Complex128ListList { acc := NilComplex128ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintArrList: []uint->AnyList */ func MapAnyListToUintArrList(m UintArrList, f func([]uint) AnyList) AnyListList { acc := NilAnyListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ArrList: []uint8->bool */ func MapBoolToUint8ArrList(m Uint8ArrList, f func([]uint8) bool) BoolList { acc := NilBoolList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ArrList: []uint8->string */ func MapStringToUint8ArrList(m Uint8ArrList, f func([]uint8) string) StringList { acc := NilStringList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ArrList: []uint8->int */ func MapIntToUint8ArrList(m Uint8ArrList, f func([]uint8) int) IntList { acc := NilIntList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ArrList: []uint8->int8 */ func MapInt8ToUint8ArrList(m Uint8ArrList, f func([]uint8) int8) Int8List { acc := NilInt8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ArrList: []uint8->int16 */ func MapInt16ToUint8ArrList(m Uint8ArrList, f func([]uint8) int16) Int16List { acc := NilInt16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ArrList: []uint8->int32 */ func MapInt32ToUint8ArrList(m Uint8ArrList, f func([]uint8) int32) Int32List { acc := NilInt32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ArrList: []uint8->int64 */ func MapInt64ToUint8ArrList(m Uint8ArrList, f func([]uint8) int64) Int64List { acc := NilInt64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ArrList: []uint8->uint */ func MapUintToUint8ArrList(m Uint8ArrList, f func([]uint8) uint) UintList { acc := NilUintList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ArrList: []uint8->uint8 */ func MapUint8ToUint8ArrList(m Uint8ArrList, f func([]uint8) uint8) Uint8List { acc := NilUint8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ArrList: []uint8->uint16 */ func MapUint16ToUint8ArrList(m Uint8ArrList, f func([]uint8) uint16) Uint16List { acc := NilUint16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ArrList: []uint8->uint32 */ func MapUint32ToUint8ArrList(m Uint8ArrList, f func([]uint8) uint32) Uint32List { acc := NilUint32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ArrList: []uint8->uint64 */ func MapUint64ToUint8ArrList(m Uint8ArrList, f func([]uint8) uint64) Uint64List { acc := NilUint64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ArrList: []uint8->uintptr */ func MapUintptrToUint8ArrList(m Uint8ArrList, f func([]uint8) uintptr) UintptrList { acc := NilUintptrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ArrList: []uint8->byte */ func MapByteToUint8ArrList(m Uint8ArrList, f func([]uint8) byte) ByteList { acc := NilByteList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ArrList: []uint8->rune */ func MapRuneToUint8ArrList(m Uint8ArrList, f func([]uint8) rune) RuneList { acc := NilRuneList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ArrList: []uint8->float32 */ func MapFloat32ToUint8ArrList(m Uint8ArrList, f func([]uint8) float32) Float32List { acc := NilFloat32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ArrList: []uint8->float64 */ func MapFloat64ToUint8ArrList(m Uint8ArrList, f func([]uint8) float64) Float64List { acc := NilFloat64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ArrList: []uint8->complex64 */ func MapComplex64ToUint8ArrList(m Uint8ArrList, f func([]uint8) complex64) Complex64List { acc := NilComplex64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ArrList: []uint8->complex128 */ func MapComplex128ToUint8ArrList(m Uint8ArrList, f func([]uint8) complex128) Complex128List { acc := NilComplex128List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ArrList: []uint8->Any */ func MapAnyToUint8ArrList(m Uint8ArrList, f func([]uint8) Any) AnyList { acc := NilAnyList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ArrList: []uint8->BoolOption */ func MapBoolOptionToUint8ArrList(m Uint8ArrList, f func([]uint8) BoolOption) BoolOptionList { acc := NilBoolOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ArrList: []uint8->StringOption */ func MapStringOptionToUint8ArrList(m Uint8ArrList, f func([]uint8) StringOption) StringOptionList { acc := NilStringOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ArrList: []uint8->IntOption */ func MapIntOptionToUint8ArrList(m Uint8ArrList, f func([]uint8) IntOption) IntOptionList { acc := NilIntOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ArrList: []uint8->Int8Option */ func MapInt8OptionToUint8ArrList(m Uint8ArrList, f func([]uint8) Int8Option) Int8OptionList { acc := NilInt8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ArrList: []uint8->Int16Option */ func MapInt16OptionToUint8ArrList(m Uint8ArrList, f func([]uint8) Int16Option) Int16OptionList { acc := NilInt16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ArrList: []uint8->Int32Option */ func MapInt32OptionToUint8ArrList(m Uint8ArrList, f func([]uint8) Int32Option) Int32OptionList { acc := NilInt32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ArrList: []uint8->Int64Option */ func MapInt64OptionToUint8ArrList(m Uint8ArrList, f func([]uint8) Int64Option) Int64OptionList { acc := NilInt64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ArrList: []uint8->UintOption */ func MapUintOptionToUint8ArrList(m Uint8ArrList, f func([]uint8) UintOption) UintOptionList { acc := NilUintOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ArrList: []uint8->Uint8Option */ func MapUint8OptionToUint8ArrList(m Uint8ArrList, f func([]uint8) Uint8Option) Uint8OptionList { acc := NilUint8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ArrList: []uint8->Uint16Option */ func MapUint16OptionToUint8ArrList(m Uint8ArrList, f func([]uint8) Uint16Option) Uint16OptionList { acc := NilUint16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ArrList: []uint8->Uint32Option */ func MapUint32OptionToUint8ArrList(m Uint8ArrList, f func([]uint8) Uint32Option) Uint32OptionList { acc := NilUint32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ArrList: []uint8->Uint64Option */ func MapUint64OptionToUint8ArrList(m Uint8ArrList, f func([]uint8) Uint64Option) Uint64OptionList { acc := NilUint64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ArrList: []uint8->UintptrOption */ func MapUintptrOptionToUint8ArrList(m Uint8ArrList, f func([]uint8) UintptrOption) UintptrOptionList { acc := NilUintptrOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ArrList: []uint8->ByteOption */ func MapByteOptionToUint8ArrList(m Uint8ArrList, f func([]uint8) ByteOption) ByteOptionList { acc := NilByteOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ArrList: []uint8->RuneOption */ func MapRuneOptionToUint8ArrList(m Uint8ArrList, f func([]uint8) RuneOption) RuneOptionList { acc := NilRuneOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ArrList: []uint8->Float32Option */ func MapFloat32OptionToUint8ArrList(m Uint8ArrList, f func([]uint8) Float32Option) Float32OptionList { acc := NilFloat32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ArrList: []uint8->Float64Option */ func MapFloat64OptionToUint8ArrList(m Uint8ArrList, f func([]uint8) Float64Option) Float64OptionList { acc := NilFloat64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ArrList: []uint8->Complex64Option */ func MapComplex64OptionToUint8ArrList(m Uint8ArrList, f func([]uint8) Complex64Option) Complex64OptionList { acc := NilComplex64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ArrList: []uint8->Complex128Option */ func MapComplex128OptionToUint8ArrList(m Uint8ArrList, f func([]uint8) Complex128Option) Complex128OptionList { acc := NilComplex128OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ArrList: []uint8->AnyOption */ func MapAnyOptionToUint8ArrList(m Uint8ArrList, f func([]uint8) AnyOption) AnyOptionList { acc := NilAnyOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ArrList: []uint8->[]bool */ func MapBoolArrToUint8ArrList(m Uint8ArrList, f func([]uint8) []bool) BoolArrList { acc := NilBoolArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ArrList: []uint8->[]string */ func MapStringArrToUint8ArrList(m Uint8ArrList, f func([]uint8) []string) StringArrList { acc := NilStringArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ArrList: []uint8->[]int */ func MapIntArrToUint8ArrList(m Uint8ArrList, f func([]uint8) []int) IntArrList { acc := NilIntArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ArrList: []uint8->[]int8 */ func MapInt8ArrToUint8ArrList(m Uint8ArrList, f func([]uint8) []int8) Int8ArrList { acc := NilInt8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ArrList: []uint8->[]int16 */ func MapInt16ArrToUint8ArrList(m Uint8ArrList, f func([]uint8) []int16) Int16ArrList { acc := NilInt16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ArrList: []uint8->[]int32 */ func MapInt32ArrToUint8ArrList(m Uint8ArrList, f func([]uint8) []int32) Int32ArrList { acc := NilInt32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ArrList: []uint8->[]int64 */ func MapInt64ArrToUint8ArrList(m Uint8ArrList, f func([]uint8) []int64) Int64ArrList { acc := NilInt64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ArrList: []uint8->[]uint */ func MapUintArrToUint8ArrList(m Uint8ArrList, f func([]uint8) []uint) UintArrList { acc := NilUintArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ArrList: []uint8->[]uint8 */ func MapUint8ArrToUint8ArrList(m Uint8ArrList, f func([]uint8) []uint8) Uint8ArrList { acc := NilUint8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ArrList: []uint8->[]uint16 */ func MapUint16ArrToUint8ArrList(m Uint8ArrList, f func([]uint8) []uint16) Uint16ArrList { acc := NilUint16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ArrList: []uint8->[]uint32 */ func MapUint32ArrToUint8ArrList(m Uint8ArrList, f func([]uint8) []uint32) Uint32ArrList { acc := NilUint32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ArrList: []uint8->[]uint64 */ func MapUint64ArrToUint8ArrList(m Uint8ArrList, f func([]uint8) []uint64) Uint64ArrList { acc := NilUint64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ArrList: []uint8->[]uintptr */ func MapUintptrArrToUint8ArrList(m Uint8ArrList, f func([]uint8) []uintptr) UintptrArrList { acc := NilUintptrArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ArrList: []uint8->[]byte */ func MapByteArrToUint8ArrList(m Uint8ArrList, f func([]uint8) []byte) ByteArrList { acc := NilByteArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ArrList: []uint8->[]rune */ func MapRuneArrToUint8ArrList(m Uint8ArrList, f func([]uint8) []rune) RuneArrList { acc := NilRuneArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ArrList: []uint8->[]float32 */ func MapFloat32ArrToUint8ArrList(m Uint8ArrList, f func([]uint8) []float32) Float32ArrList { acc := NilFloat32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ArrList: []uint8->[]float64 */ func MapFloat64ArrToUint8ArrList(m Uint8ArrList, f func([]uint8) []float64) Float64ArrList { acc := NilFloat64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ArrList: []uint8->[]complex64 */ func MapComplex64ArrToUint8ArrList(m Uint8ArrList, f func([]uint8) []complex64) Complex64ArrList { acc := NilComplex64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ArrList: []uint8->[]complex128 */ func MapComplex128ArrToUint8ArrList(m Uint8ArrList, f func([]uint8) []complex128) Complex128ArrList { acc := NilComplex128ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ArrList: []uint8->[]Any */ func MapAnyArrToUint8ArrList(m Uint8ArrList, f func([]uint8) []Any) AnyArrList { acc := NilAnyArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ArrList: []uint8->BoolList */ func MapBoolListToUint8ArrList(m Uint8ArrList, f func([]uint8) BoolList) BoolListList { acc := NilBoolListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ArrList: []uint8->StringList */ func MapStringListToUint8ArrList(m Uint8ArrList, f func([]uint8) StringList) StringListList { acc := NilStringListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ArrList: []uint8->IntList */ func MapIntListToUint8ArrList(m Uint8ArrList, f func([]uint8) IntList) IntListList { acc := NilIntListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ArrList: []uint8->Int8List */ func MapInt8ListToUint8ArrList(m Uint8ArrList, f func([]uint8) Int8List) Int8ListList { acc := NilInt8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ArrList: []uint8->Int16List */ func MapInt16ListToUint8ArrList(m Uint8ArrList, f func([]uint8) Int16List) Int16ListList { acc := NilInt16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ArrList: []uint8->Int32List */ func MapInt32ListToUint8ArrList(m Uint8ArrList, f func([]uint8) Int32List) Int32ListList { acc := NilInt32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ArrList: []uint8->Int64List */ func MapInt64ListToUint8ArrList(m Uint8ArrList, f func([]uint8) Int64List) Int64ListList { acc := NilInt64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ArrList: []uint8->UintList */ func MapUintListToUint8ArrList(m Uint8ArrList, f func([]uint8) UintList) UintListList { acc := NilUintListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ArrList: []uint8->Uint8List */ func MapUint8ListToUint8ArrList(m Uint8ArrList, f func([]uint8) Uint8List) Uint8ListList { acc := NilUint8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ArrList: []uint8->Uint16List */ func MapUint16ListToUint8ArrList(m Uint8ArrList, f func([]uint8) Uint16List) Uint16ListList { acc := NilUint16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ArrList: []uint8->Uint32List */ func MapUint32ListToUint8ArrList(m Uint8ArrList, f func([]uint8) Uint32List) Uint32ListList { acc := NilUint32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ArrList: []uint8->Uint64List */ func MapUint64ListToUint8ArrList(m Uint8ArrList, f func([]uint8) Uint64List) Uint64ListList { acc := NilUint64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ArrList: []uint8->UintptrList */ func MapUintptrListToUint8ArrList(m Uint8ArrList, f func([]uint8) UintptrList) UintptrListList { acc := NilUintptrListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ArrList: []uint8->ByteList */ func MapByteListToUint8ArrList(m Uint8ArrList, f func([]uint8) ByteList) ByteListList { acc := NilByteListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ArrList: []uint8->RuneList */ func MapRuneListToUint8ArrList(m Uint8ArrList, f func([]uint8) RuneList) RuneListList { acc := NilRuneListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ArrList: []uint8->Float32List */ func MapFloat32ListToUint8ArrList(m Uint8ArrList, f func([]uint8) Float32List) Float32ListList { acc := NilFloat32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ArrList: []uint8->Float64List */ func MapFloat64ListToUint8ArrList(m Uint8ArrList, f func([]uint8) Float64List) Float64ListList { acc := NilFloat64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ArrList: []uint8->Complex64List */ func MapComplex64ListToUint8ArrList(m Uint8ArrList, f func([]uint8) Complex64List) Complex64ListList { acc := NilComplex64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ArrList: []uint8->Complex128List */ func MapComplex128ListToUint8ArrList(m Uint8ArrList, f func([]uint8) Complex128List) Complex128ListList { acc := NilComplex128ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ArrList: []uint8->AnyList */ func MapAnyListToUint8ArrList(m Uint8ArrList, f func([]uint8) AnyList) AnyListList { acc := NilAnyListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ArrList: []uint16->bool */ func MapBoolToUint16ArrList(m Uint16ArrList, f func([]uint16) bool) BoolList { acc := NilBoolList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ArrList: []uint16->string */ func MapStringToUint16ArrList(m Uint16ArrList, f func([]uint16) string) StringList { acc := NilStringList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ArrList: []uint16->int */ func MapIntToUint16ArrList(m Uint16ArrList, f func([]uint16) int) IntList { acc := NilIntList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ArrList: []uint16->int8 */ func MapInt8ToUint16ArrList(m Uint16ArrList, f func([]uint16) int8) Int8List { acc := NilInt8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ArrList: []uint16->int16 */ func MapInt16ToUint16ArrList(m Uint16ArrList, f func([]uint16) int16) Int16List { acc := NilInt16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ArrList: []uint16->int32 */ func MapInt32ToUint16ArrList(m Uint16ArrList, f func([]uint16) int32) Int32List { acc := NilInt32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ArrList: []uint16->int64 */ func MapInt64ToUint16ArrList(m Uint16ArrList, f func([]uint16) int64) Int64List { acc := NilInt64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ArrList: []uint16->uint */ func MapUintToUint16ArrList(m Uint16ArrList, f func([]uint16) uint) UintList { acc := NilUintList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ArrList: []uint16->uint8 */ func MapUint8ToUint16ArrList(m Uint16ArrList, f func([]uint16) uint8) Uint8List { acc := NilUint8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ArrList: []uint16->uint16 */ func MapUint16ToUint16ArrList(m Uint16ArrList, f func([]uint16) uint16) Uint16List { acc := NilUint16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ArrList: []uint16->uint32 */ func MapUint32ToUint16ArrList(m Uint16ArrList, f func([]uint16) uint32) Uint32List { acc := NilUint32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ArrList: []uint16->uint64 */ func MapUint64ToUint16ArrList(m Uint16ArrList, f func([]uint16) uint64) Uint64List { acc := NilUint64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ArrList: []uint16->uintptr */ func MapUintptrToUint16ArrList(m Uint16ArrList, f func([]uint16) uintptr) UintptrList { acc := NilUintptrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ArrList: []uint16->byte */ func MapByteToUint16ArrList(m Uint16ArrList, f func([]uint16) byte) ByteList { acc := NilByteList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ArrList: []uint16->rune */ func MapRuneToUint16ArrList(m Uint16ArrList, f func([]uint16) rune) RuneList { acc := NilRuneList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ArrList: []uint16->float32 */ func MapFloat32ToUint16ArrList(m Uint16ArrList, f func([]uint16) float32) Float32List { acc := NilFloat32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ArrList: []uint16->float64 */ func MapFloat64ToUint16ArrList(m Uint16ArrList, f func([]uint16) float64) Float64List { acc := NilFloat64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ArrList: []uint16->complex64 */ func MapComplex64ToUint16ArrList(m Uint16ArrList, f func([]uint16) complex64) Complex64List { acc := NilComplex64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ArrList: []uint16->complex128 */ func MapComplex128ToUint16ArrList(m Uint16ArrList, f func([]uint16) complex128) Complex128List { acc := NilComplex128List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ArrList: []uint16->Any */ func MapAnyToUint16ArrList(m Uint16ArrList, f func([]uint16) Any) AnyList { acc := NilAnyList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ArrList: []uint16->BoolOption */ func MapBoolOptionToUint16ArrList(m Uint16ArrList, f func([]uint16) BoolOption) BoolOptionList { acc := NilBoolOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ArrList: []uint16->StringOption */ func MapStringOptionToUint16ArrList(m Uint16ArrList, f func([]uint16) StringOption) StringOptionList { acc := NilStringOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ArrList: []uint16->IntOption */ func MapIntOptionToUint16ArrList(m Uint16ArrList, f func([]uint16) IntOption) IntOptionList { acc := NilIntOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ArrList: []uint16->Int8Option */ func MapInt8OptionToUint16ArrList(m Uint16ArrList, f func([]uint16) Int8Option) Int8OptionList { acc := NilInt8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ArrList: []uint16->Int16Option */ func MapInt16OptionToUint16ArrList(m Uint16ArrList, f func([]uint16) Int16Option) Int16OptionList { acc := NilInt16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ArrList: []uint16->Int32Option */ func MapInt32OptionToUint16ArrList(m Uint16ArrList, f func([]uint16) Int32Option) Int32OptionList { acc := NilInt32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ArrList: []uint16->Int64Option */ func MapInt64OptionToUint16ArrList(m Uint16ArrList, f func([]uint16) Int64Option) Int64OptionList { acc := NilInt64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ArrList: []uint16->UintOption */ func MapUintOptionToUint16ArrList(m Uint16ArrList, f func([]uint16) UintOption) UintOptionList { acc := NilUintOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ArrList: []uint16->Uint8Option */ func MapUint8OptionToUint16ArrList(m Uint16ArrList, f func([]uint16) Uint8Option) Uint8OptionList { acc := NilUint8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ArrList: []uint16->Uint16Option */ func MapUint16OptionToUint16ArrList(m Uint16ArrList, f func([]uint16) Uint16Option) Uint16OptionList { acc := NilUint16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ArrList: []uint16->Uint32Option */ func MapUint32OptionToUint16ArrList(m Uint16ArrList, f func([]uint16) Uint32Option) Uint32OptionList { acc := NilUint32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ArrList: []uint16->Uint64Option */ func MapUint64OptionToUint16ArrList(m Uint16ArrList, f func([]uint16) Uint64Option) Uint64OptionList { acc := NilUint64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ArrList: []uint16->UintptrOption */ func MapUintptrOptionToUint16ArrList(m Uint16ArrList, f func([]uint16) UintptrOption) UintptrOptionList { acc := NilUintptrOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ArrList: []uint16->ByteOption */ func MapByteOptionToUint16ArrList(m Uint16ArrList, f func([]uint16) ByteOption) ByteOptionList { acc := NilByteOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ArrList: []uint16->RuneOption */ func MapRuneOptionToUint16ArrList(m Uint16ArrList, f func([]uint16) RuneOption) RuneOptionList { acc := NilRuneOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ArrList: []uint16->Float32Option */ func MapFloat32OptionToUint16ArrList(m Uint16ArrList, f func([]uint16) Float32Option) Float32OptionList { acc := NilFloat32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ArrList: []uint16->Float64Option */ func MapFloat64OptionToUint16ArrList(m Uint16ArrList, f func([]uint16) Float64Option) Float64OptionList { acc := NilFloat64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ArrList: []uint16->Complex64Option */ func MapComplex64OptionToUint16ArrList(m Uint16ArrList, f func([]uint16) Complex64Option) Complex64OptionList { acc := NilComplex64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ArrList: []uint16->Complex128Option */ func MapComplex128OptionToUint16ArrList(m Uint16ArrList, f func([]uint16) Complex128Option) Complex128OptionList { acc := NilComplex128OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ArrList: []uint16->AnyOption */ func MapAnyOptionToUint16ArrList(m Uint16ArrList, f func([]uint16) AnyOption) AnyOptionList { acc := NilAnyOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ArrList: []uint16->[]bool */ func MapBoolArrToUint16ArrList(m Uint16ArrList, f func([]uint16) []bool) BoolArrList { acc := NilBoolArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ArrList: []uint16->[]string */ func MapStringArrToUint16ArrList(m Uint16ArrList, f func([]uint16) []string) StringArrList { acc := NilStringArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ArrList: []uint16->[]int */ func MapIntArrToUint16ArrList(m Uint16ArrList, f func([]uint16) []int) IntArrList { acc := NilIntArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ArrList: []uint16->[]int8 */ func MapInt8ArrToUint16ArrList(m Uint16ArrList, f func([]uint16) []int8) Int8ArrList { acc := NilInt8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ArrList: []uint16->[]int16 */ func MapInt16ArrToUint16ArrList(m Uint16ArrList, f func([]uint16) []int16) Int16ArrList { acc := NilInt16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ArrList: []uint16->[]int32 */ func MapInt32ArrToUint16ArrList(m Uint16ArrList, f func([]uint16) []int32) Int32ArrList { acc := NilInt32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ArrList: []uint16->[]int64 */ func MapInt64ArrToUint16ArrList(m Uint16ArrList, f func([]uint16) []int64) Int64ArrList { acc := NilInt64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ArrList: []uint16->[]uint */ func MapUintArrToUint16ArrList(m Uint16ArrList, f func([]uint16) []uint) UintArrList { acc := NilUintArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ArrList: []uint16->[]uint8 */ func MapUint8ArrToUint16ArrList(m Uint16ArrList, f func([]uint16) []uint8) Uint8ArrList { acc := NilUint8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ArrList: []uint16->[]uint16 */ func MapUint16ArrToUint16ArrList(m Uint16ArrList, f func([]uint16) []uint16) Uint16ArrList { acc := NilUint16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ArrList: []uint16->[]uint32 */ func MapUint32ArrToUint16ArrList(m Uint16ArrList, f func([]uint16) []uint32) Uint32ArrList { acc := NilUint32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ArrList: []uint16->[]uint64 */ func MapUint64ArrToUint16ArrList(m Uint16ArrList, f func([]uint16) []uint64) Uint64ArrList { acc := NilUint64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ArrList: []uint16->[]uintptr */ func MapUintptrArrToUint16ArrList(m Uint16ArrList, f func([]uint16) []uintptr) UintptrArrList { acc := NilUintptrArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ArrList: []uint16->[]byte */ func MapByteArrToUint16ArrList(m Uint16ArrList, f func([]uint16) []byte) ByteArrList { acc := NilByteArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ArrList: []uint16->[]rune */ func MapRuneArrToUint16ArrList(m Uint16ArrList, f func([]uint16) []rune) RuneArrList { acc := NilRuneArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ArrList: []uint16->[]float32 */ func MapFloat32ArrToUint16ArrList(m Uint16ArrList, f func([]uint16) []float32) Float32ArrList { acc := NilFloat32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ArrList: []uint16->[]float64 */ func MapFloat64ArrToUint16ArrList(m Uint16ArrList, f func([]uint16) []float64) Float64ArrList { acc := NilFloat64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ArrList: []uint16->[]complex64 */ func MapComplex64ArrToUint16ArrList(m Uint16ArrList, f func([]uint16) []complex64) Complex64ArrList { acc := NilComplex64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ArrList: []uint16->[]complex128 */ func MapComplex128ArrToUint16ArrList(m Uint16ArrList, f func([]uint16) []complex128) Complex128ArrList { acc := NilComplex128ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ArrList: []uint16->[]Any */ func MapAnyArrToUint16ArrList(m Uint16ArrList, f func([]uint16) []Any) AnyArrList { acc := NilAnyArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ArrList: []uint16->BoolList */ func MapBoolListToUint16ArrList(m Uint16ArrList, f func([]uint16) BoolList) BoolListList { acc := NilBoolListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ArrList: []uint16->StringList */ func MapStringListToUint16ArrList(m Uint16ArrList, f func([]uint16) StringList) StringListList { acc := NilStringListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ArrList: []uint16->IntList */ func MapIntListToUint16ArrList(m Uint16ArrList, f func([]uint16) IntList) IntListList { acc := NilIntListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ArrList: []uint16->Int8List */ func MapInt8ListToUint16ArrList(m Uint16ArrList, f func([]uint16) Int8List) Int8ListList { acc := NilInt8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ArrList: []uint16->Int16List */ func MapInt16ListToUint16ArrList(m Uint16ArrList, f func([]uint16) Int16List) Int16ListList { acc := NilInt16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ArrList: []uint16->Int32List */ func MapInt32ListToUint16ArrList(m Uint16ArrList, f func([]uint16) Int32List) Int32ListList { acc := NilInt32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ArrList: []uint16->Int64List */ func MapInt64ListToUint16ArrList(m Uint16ArrList, f func([]uint16) Int64List) Int64ListList { acc := NilInt64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ArrList: []uint16->UintList */ func MapUintListToUint16ArrList(m Uint16ArrList, f func([]uint16) UintList) UintListList { acc := NilUintListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ArrList: []uint16->Uint8List */ func MapUint8ListToUint16ArrList(m Uint16ArrList, f func([]uint16) Uint8List) Uint8ListList { acc := NilUint8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ArrList: []uint16->Uint16List */ func MapUint16ListToUint16ArrList(m Uint16ArrList, f func([]uint16) Uint16List) Uint16ListList { acc := NilUint16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ArrList: []uint16->Uint32List */ func MapUint32ListToUint16ArrList(m Uint16ArrList, f func([]uint16) Uint32List) Uint32ListList { acc := NilUint32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ArrList: []uint16->Uint64List */ func MapUint64ListToUint16ArrList(m Uint16ArrList, f func([]uint16) Uint64List) Uint64ListList { acc := NilUint64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ArrList: []uint16->UintptrList */ func MapUintptrListToUint16ArrList(m Uint16ArrList, f func([]uint16) UintptrList) UintptrListList { acc := NilUintptrListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ArrList: []uint16->ByteList */ func MapByteListToUint16ArrList(m Uint16ArrList, f func([]uint16) ByteList) ByteListList { acc := NilByteListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ArrList: []uint16->RuneList */ func MapRuneListToUint16ArrList(m Uint16ArrList, f func([]uint16) RuneList) RuneListList { acc := NilRuneListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ArrList: []uint16->Float32List */ func MapFloat32ListToUint16ArrList(m Uint16ArrList, f func([]uint16) Float32List) Float32ListList { acc := NilFloat32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ArrList: []uint16->Float64List */ func MapFloat64ListToUint16ArrList(m Uint16ArrList, f func([]uint16) Float64List) Float64ListList { acc := NilFloat64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ArrList: []uint16->Complex64List */ func MapComplex64ListToUint16ArrList(m Uint16ArrList, f func([]uint16) Complex64List) Complex64ListList { acc := NilComplex64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ArrList: []uint16->Complex128List */ func MapComplex128ListToUint16ArrList(m Uint16ArrList, f func([]uint16) Complex128List) Complex128ListList { acc := NilComplex128ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ArrList: []uint16->AnyList */ func MapAnyListToUint16ArrList(m Uint16ArrList, f func([]uint16) AnyList) AnyListList { acc := NilAnyListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ArrList: []uint32->bool */ func MapBoolToUint32ArrList(m Uint32ArrList, f func([]uint32) bool) BoolList { acc := NilBoolList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ArrList: []uint32->string */ func MapStringToUint32ArrList(m Uint32ArrList, f func([]uint32) string) StringList { acc := NilStringList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ArrList: []uint32->int */ func MapIntToUint32ArrList(m Uint32ArrList, f func([]uint32) int) IntList { acc := NilIntList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ArrList: []uint32->int8 */ func MapInt8ToUint32ArrList(m Uint32ArrList, f func([]uint32) int8) Int8List { acc := NilInt8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ArrList: []uint32->int16 */ func MapInt16ToUint32ArrList(m Uint32ArrList, f func([]uint32) int16) Int16List { acc := NilInt16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ArrList: []uint32->int32 */ func MapInt32ToUint32ArrList(m Uint32ArrList, f func([]uint32) int32) Int32List { acc := NilInt32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ArrList: []uint32->int64 */ func MapInt64ToUint32ArrList(m Uint32ArrList, f func([]uint32) int64) Int64List { acc := NilInt64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ArrList: []uint32->uint */ func MapUintToUint32ArrList(m Uint32ArrList, f func([]uint32) uint) UintList { acc := NilUintList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ArrList: []uint32->uint8 */ func MapUint8ToUint32ArrList(m Uint32ArrList, f func([]uint32) uint8) Uint8List { acc := NilUint8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ArrList: []uint32->uint16 */ func MapUint16ToUint32ArrList(m Uint32ArrList, f func([]uint32) uint16) Uint16List { acc := NilUint16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ArrList: []uint32->uint32 */ func MapUint32ToUint32ArrList(m Uint32ArrList, f func([]uint32) uint32) Uint32List { acc := NilUint32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ArrList: []uint32->uint64 */ func MapUint64ToUint32ArrList(m Uint32ArrList, f func([]uint32) uint64) Uint64List { acc := NilUint64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ArrList: []uint32->uintptr */ func MapUintptrToUint32ArrList(m Uint32ArrList, f func([]uint32) uintptr) UintptrList { acc := NilUintptrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ArrList: []uint32->byte */ func MapByteToUint32ArrList(m Uint32ArrList, f func([]uint32) byte) ByteList { acc := NilByteList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ArrList: []uint32->rune */ func MapRuneToUint32ArrList(m Uint32ArrList, f func([]uint32) rune) RuneList { acc := NilRuneList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ArrList: []uint32->float32 */ func MapFloat32ToUint32ArrList(m Uint32ArrList, f func([]uint32) float32) Float32List { acc := NilFloat32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ArrList: []uint32->float64 */ func MapFloat64ToUint32ArrList(m Uint32ArrList, f func([]uint32) float64) Float64List { acc := NilFloat64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ArrList: []uint32->complex64 */ func MapComplex64ToUint32ArrList(m Uint32ArrList, f func([]uint32) complex64) Complex64List { acc := NilComplex64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ArrList: []uint32->complex128 */ func MapComplex128ToUint32ArrList(m Uint32ArrList, f func([]uint32) complex128) Complex128List { acc := NilComplex128List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ArrList: []uint32->Any */ func MapAnyToUint32ArrList(m Uint32ArrList, f func([]uint32) Any) AnyList { acc := NilAnyList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ArrList: []uint32->BoolOption */ func MapBoolOptionToUint32ArrList(m Uint32ArrList, f func([]uint32) BoolOption) BoolOptionList { acc := NilBoolOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ArrList: []uint32->StringOption */ func MapStringOptionToUint32ArrList(m Uint32ArrList, f func([]uint32) StringOption) StringOptionList { acc := NilStringOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ArrList: []uint32->IntOption */ func MapIntOptionToUint32ArrList(m Uint32ArrList, f func([]uint32) IntOption) IntOptionList { acc := NilIntOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ArrList: []uint32->Int8Option */ func MapInt8OptionToUint32ArrList(m Uint32ArrList, f func([]uint32) Int8Option) Int8OptionList { acc := NilInt8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ArrList: []uint32->Int16Option */ func MapInt16OptionToUint32ArrList(m Uint32ArrList, f func([]uint32) Int16Option) Int16OptionList { acc := NilInt16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ArrList: []uint32->Int32Option */ func MapInt32OptionToUint32ArrList(m Uint32ArrList, f func([]uint32) Int32Option) Int32OptionList { acc := NilInt32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ArrList: []uint32->Int64Option */ func MapInt64OptionToUint32ArrList(m Uint32ArrList, f func([]uint32) Int64Option) Int64OptionList { acc := NilInt64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ArrList: []uint32->UintOption */ func MapUintOptionToUint32ArrList(m Uint32ArrList, f func([]uint32) UintOption) UintOptionList { acc := NilUintOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ArrList: []uint32->Uint8Option */ func MapUint8OptionToUint32ArrList(m Uint32ArrList, f func([]uint32) Uint8Option) Uint8OptionList { acc := NilUint8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ArrList: []uint32->Uint16Option */ func MapUint16OptionToUint32ArrList(m Uint32ArrList, f func([]uint32) Uint16Option) Uint16OptionList { acc := NilUint16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ArrList: []uint32->Uint32Option */ func MapUint32OptionToUint32ArrList(m Uint32ArrList, f func([]uint32) Uint32Option) Uint32OptionList { acc := NilUint32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ArrList: []uint32->Uint64Option */ func MapUint64OptionToUint32ArrList(m Uint32ArrList, f func([]uint32) Uint64Option) Uint64OptionList { acc := NilUint64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ArrList: []uint32->UintptrOption */ func MapUintptrOptionToUint32ArrList(m Uint32ArrList, f func([]uint32) UintptrOption) UintptrOptionList { acc := NilUintptrOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ArrList: []uint32->ByteOption */ func MapByteOptionToUint32ArrList(m Uint32ArrList, f func([]uint32) ByteOption) ByteOptionList { acc := NilByteOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ArrList: []uint32->RuneOption */ func MapRuneOptionToUint32ArrList(m Uint32ArrList, f func([]uint32) RuneOption) RuneOptionList { acc := NilRuneOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ArrList: []uint32->Float32Option */ func MapFloat32OptionToUint32ArrList(m Uint32ArrList, f func([]uint32) Float32Option) Float32OptionList { acc := NilFloat32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ArrList: []uint32->Float64Option */ func MapFloat64OptionToUint32ArrList(m Uint32ArrList, f func([]uint32) Float64Option) Float64OptionList { acc := NilFloat64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ArrList: []uint32->Complex64Option */ func MapComplex64OptionToUint32ArrList(m Uint32ArrList, f func([]uint32) Complex64Option) Complex64OptionList { acc := NilComplex64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ArrList: []uint32->Complex128Option */ func MapComplex128OptionToUint32ArrList(m Uint32ArrList, f func([]uint32) Complex128Option) Complex128OptionList { acc := NilComplex128OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ArrList: []uint32->AnyOption */ func MapAnyOptionToUint32ArrList(m Uint32ArrList, f func([]uint32) AnyOption) AnyOptionList { acc := NilAnyOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ArrList: []uint32->[]bool */ func MapBoolArrToUint32ArrList(m Uint32ArrList, f func([]uint32) []bool) BoolArrList { acc := NilBoolArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ArrList: []uint32->[]string */ func MapStringArrToUint32ArrList(m Uint32ArrList, f func([]uint32) []string) StringArrList { acc := NilStringArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ArrList: []uint32->[]int */ func MapIntArrToUint32ArrList(m Uint32ArrList, f func([]uint32) []int) IntArrList { acc := NilIntArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ArrList: []uint32->[]int8 */ func MapInt8ArrToUint32ArrList(m Uint32ArrList, f func([]uint32) []int8) Int8ArrList { acc := NilInt8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ArrList: []uint32->[]int16 */ func MapInt16ArrToUint32ArrList(m Uint32ArrList, f func([]uint32) []int16) Int16ArrList { acc := NilInt16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ArrList: []uint32->[]int32 */ func MapInt32ArrToUint32ArrList(m Uint32ArrList, f func([]uint32) []int32) Int32ArrList { acc := NilInt32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ArrList: []uint32->[]int64 */ func MapInt64ArrToUint32ArrList(m Uint32ArrList, f func([]uint32) []int64) Int64ArrList { acc := NilInt64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ArrList: []uint32->[]uint */ func MapUintArrToUint32ArrList(m Uint32ArrList, f func([]uint32) []uint) UintArrList { acc := NilUintArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ArrList: []uint32->[]uint8 */ func MapUint8ArrToUint32ArrList(m Uint32ArrList, f func([]uint32) []uint8) Uint8ArrList { acc := NilUint8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ArrList: []uint32->[]uint16 */ func MapUint16ArrToUint32ArrList(m Uint32ArrList, f func([]uint32) []uint16) Uint16ArrList { acc := NilUint16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ArrList: []uint32->[]uint32 */ func MapUint32ArrToUint32ArrList(m Uint32ArrList, f func([]uint32) []uint32) Uint32ArrList { acc := NilUint32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ArrList: []uint32->[]uint64 */ func MapUint64ArrToUint32ArrList(m Uint32ArrList, f func([]uint32) []uint64) Uint64ArrList { acc := NilUint64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ArrList: []uint32->[]uintptr */ func MapUintptrArrToUint32ArrList(m Uint32ArrList, f func([]uint32) []uintptr) UintptrArrList { acc := NilUintptrArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ArrList: []uint32->[]byte */ func MapByteArrToUint32ArrList(m Uint32ArrList, f func([]uint32) []byte) ByteArrList { acc := NilByteArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ArrList: []uint32->[]rune */ func MapRuneArrToUint32ArrList(m Uint32ArrList, f func([]uint32) []rune) RuneArrList { acc := NilRuneArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ArrList: []uint32->[]float32 */ func MapFloat32ArrToUint32ArrList(m Uint32ArrList, f func([]uint32) []float32) Float32ArrList { acc := NilFloat32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ArrList: []uint32->[]float64 */ func MapFloat64ArrToUint32ArrList(m Uint32ArrList, f func([]uint32) []float64) Float64ArrList { acc := NilFloat64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ArrList: []uint32->[]complex64 */ func MapComplex64ArrToUint32ArrList(m Uint32ArrList, f func([]uint32) []complex64) Complex64ArrList { acc := NilComplex64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ArrList: []uint32->[]complex128 */ func MapComplex128ArrToUint32ArrList(m Uint32ArrList, f func([]uint32) []complex128) Complex128ArrList { acc := NilComplex128ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ArrList: []uint32->[]Any */ func MapAnyArrToUint32ArrList(m Uint32ArrList, f func([]uint32) []Any) AnyArrList { acc := NilAnyArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ArrList: []uint32->BoolList */ func MapBoolListToUint32ArrList(m Uint32ArrList, f func([]uint32) BoolList) BoolListList { acc := NilBoolListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ArrList: []uint32->StringList */ func MapStringListToUint32ArrList(m Uint32ArrList, f func([]uint32) StringList) StringListList { acc := NilStringListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ArrList: []uint32->IntList */ func MapIntListToUint32ArrList(m Uint32ArrList, f func([]uint32) IntList) IntListList { acc := NilIntListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ArrList: []uint32->Int8List */ func MapInt8ListToUint32ArrList(m Uint32ArrList, f func([]uint32) Int8List) Int8ListList { acc := NilInt8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ArrList: []uint32->Int16List */ func MapInt16ListToUint32ArrList(m Uint32ArrList, f func([]uint32) Int16List) Int16ListList { acc := NilInt16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ArrList: []uint32->Int32List */ func MapInt32ListToUint32ArrList(m Uint32ArrList, f func([]uint32) Int32List) Int32ListList { acc := NilInt32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ArrList: []uint32->Int64List */ func MapInt64ListToUint32ArrList(m Uint32ArrList, f func([]uint32) Int64List) Int64ListList { acc := NilInt64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ArrList: []uint32->UintList */ func MapUintListToUint32ArrList(m Uint32ArrList, f func([]uint32) UintList) UintListList { acc := NilUintListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ArrList: []uint32->Uint8List */ func MapUint8ListToUint32ArrList(m Uint32ArrList, f func([]uint32) Uint8List) Uint8ListList { acc := NilUint8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ArrList: []uint32->Uint16List */ func MapUint16ListToUint32ArrList(m Uint32ArrList, f func([]uint32) Uint16List) Uint16ListList { acc := NilUint16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ArrList: []uint32->Uint32List */ func MapUint32ListToUint32ArrList(m Uint32ArrList, f func([]uint32) Uint32List) Uint32ListList { acc := NilUint32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ArrList: []uint32->Uint64List */ func MapUint64ListToUint32ArrList(m Uint32ArrList, f func([]uint32) Uint64List) Uint64ListList { acc := NilUint64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ArrList: []uint32->UintptrList */ func MapUintptrListToUint32ArrList(m Uint32ArrList, f func([]uint32) UintptrList) UintptrListList { acc := NilUintptrListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ArrList: []uint32->ByteList */ func MapByteListToUint32ArrList(m Uint32ArrList, f func([]uint32) ByteList) ByteListList { acc := NilByteListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ArrList: []uint32->RuneList */ func MapRuneListToUint32ArrList(m Uint32ArrList, f func([]uint32) RuneList) RuneListList { acc := NilRuneListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ArrList: []uint32->Float32List */ func MapFloat32ListToUint32ArrList(m Uint32ArrList, f func([]uint32) Float32List) Float32ListList { acc := NilFloat32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ArrList: []uint32->Float64List */ func MapFloat64ListToUint32ArrList(m Uint32ArrList, f func([]uint32) Float64List) Float64ListList { acc := NilFloat64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ArrList: []uint32->Complex64List */ func MapComplex64ListToUint32ArrList(m Uint32ArrList, f func([]uint32) Complex64List) Complex64ListList { acc := NilComplex64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ArrList: []uint32->Complex128List */ func MapComplex128ListToUint32ArrList(m Uint32ArrList, f func([]uint32) Complex128List) Complex128ListList { acc := NilComplex128ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ArrList: []uint32->AnyList */ func MapAnyListToUint32ArrList(m Uint32ArrList, f func([]uint32) AnyList) AnyListList { acc := NilAnyListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ArrList: []uint64->bool */ func MapBoolToUint64ArrList(m Uint64ArrList, f func([]uint64) bool) BoolList { acc := NilBoolList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ArrList: []uint64->string */ func MapStringToUint64ArrList(m Uint64ArrList, f func([]uint64) string) StringList { acc := NilStringList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ArrList: []uint64->int */ func MapIntToUint64ArrList(m Uint64ArrList, f func([]uint64) int) IntList { acc := NilIntList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ArrList: []uint64->int8 */ func MapInt8ToUint64ArrList(m Uint64ArrList, f func([]uint64) int8) Int8List { acc := NilInt8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ArrList: []uint64->int16 */ func MapInt16ToUint64ArrList(m Uint64ArrList, f func([]uint64) int16) Int16List { acc := NilInt16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ArrList: []uint64->int32 */ func MapInt32ToUint64ArrList(m Uint64ArrList, f func([]uint64) int32) Int32List { acc := NilInt32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ArrList: []uint64->int64 */ func MapInt64ToUint64ArrList(m Uint64ArrList, f func([]uint64) int64) Int64List { acc := NilInt64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ArrList: []uint64->uint */ func MapUintToUint64ArrList(m Uint64ArrList, f func([]uint64) uint) UintList { acc := NilUintList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ArrList: []uint64->uint8 */ func MapUint8ToUint64ArrList(m Uint64ArrList, f func([]uint64) uint8) Uint8List { acc := NilUint8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ArrList: []uint64->uint16 */ func MapUint16ToUint64ArrList(m Uint64ArrList, f func([]uint64) uint16) Uint16List { acc := NilUint16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ArrList: []uint64->uint32 */ func MapUint32ToUint64ArrList(m Uint64ArrList, f func([]uint64) uint32) Uint32List { acc := NilUint32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ArrList: []uint64->uint64 */ func MapUint64ToUint64ArrList(m Uint64ArrList, f func([]uint64) uint64) Uint64List { acc := NilUint64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ArrList: []uint64->uintptr */ func MapUintptrToUint64ArrList(m Uint64ArrList, f func([]uint64) uintptr) UintptrList { acc := NilUintptrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ArrList: []uint64->byte */ func MapByteToUint64ArrList(m Uint64ArrList, f func([]uint64) byte) ByteList { acc := NilByteList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ArrList: []uint64->rune */ func MapRuneToUint64ArrList(m Uint64ArrList, f func([]uint64) rune) RuneList { acc := NilRuneList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ArrList: []uint64->float32 */ func MapFloat32ToUint64ArrList(m Uint64ArrList, f func([]uint64) float32) Float32List { acc := NilFloat32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ArrList: []uint64->float64 */ func MapFloat64ToUint64ArrList(m Uint64ArrList, f func([]uint64) float64) Float64List { acc := NilFloat64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ArrList: []uint64->complex64 */ func MapComplex64ToUint64ArrList(m Uint64ArrList, f func([]uint64) complex64) Complex64List { acc := NilComplex64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ArrList: []uint64->complex128 */ func MapComplex128ToUint64ArrList(m Uint64ArrList, f func([]uint64) complex128) Complex128List { acc := NilComplex128List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ArrList: []uint64->Any */ func MapAnyToUint64ArrList(m Uint64ArrList, f func([]uint64) Any) AnyList { acc := NilAnyList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ArrList: []uint64->BoolOption */ func MapBoolOptionToUint64ArrList(m Uint64ArrList, f func([]uint64) BoolOption) BoolOptionList { acc := NilBoolOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ArrList: []uint64->StringOption */ func MapStringOptionToUint64ArrList(m Uint64ArrList, f func([]uint64) StringOption) StringOptionList { acc := NilStringOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ArrList: []uint64->IntOption */ func MapIntOptionToUint64ArrList(m Uint64ArrList, f func([]uint64) IntOption) IntOptionList { acc := NilIntOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ArrList: []uint64->Int8Option */ func MapInt8OptionToUint64ArrList(m Uint64ArrList, f func([]uint64) Int8Option) Int8OptionList { acc := NilInt8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ArrList: []uint64->Int16Option */ func MapInt16OptionToUint64ArrList(m Uint64ArrList, f func([]uint64) Int16Option) Int16OptionList { acc := NilInt16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ArrList: []uint64->Int32Option */ func MapInt32OptionToUint64ArrList(m Uint64ArrList, f func([]uint64) Int32Option) Int32OptionList { acc := NilInt32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ArrList: []uint64->Int64Option */ func MapInt64OptionToUint64ArrList(m Uint64ArrList, f func([]uint64) Int64Option) Int64OptionList { acc := NilInt64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ArrList: []uint64->UintOption */ func MapUintOptionToUint64ArrList(m Uint64ArrList, f func([]uint64) UintOption) UintOptionList { acc := NilUintOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ArrList: []uint64->Uint8Option */ func MapUint8OptionToUint64ArrList(m Uint64ArrList, f func([]uint64) Uint8Option) Uint8OptionList { acc := NilUint8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ArrList: []uint64->Uint16Option */ func MapUint16OptionToUint64ArrList(m Uint64ArrList, f func([]uint64) Uint16Option) Uint16OptionList { acc := NilUint16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ArrList: []uint64->Uint32Option */ func MapUint32OptionToUint64ArrList(m Uint64ArrList, f func([]uint64) Uint32Option) Uint32OptionList { acc := NilUint32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ArrList: []uint64->Uint64Option */ func MapUint64OptionToUint64ArrList(m Uint64ArrList, f func([]uint64) Uint64Option) Uint64OptionList { acc := NilUint64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ArrList: []uint64->UintptrOption */ func MapUintptrOptionToUint64ArrList(m Uint64ArrList, f func([]uint64) UintptrOption) UintptrOptionList { acc := NilUintptrOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ArrList: []uint64->ByteOption */ func MapByteOptionToUint64ArrList(m Uint64ArrList, f func([]uint64) ByteOption) ByteOptionList { acc := NilByteOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ArrList: []uint64->RuneOption */ func MapRuneOptionToUint64ArrList(m Uint64ArrList, f func([]uint64) RuneOption) RuneOptionList { acc := NilRuneOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ArrList: []uint64->Float32Option */ func MapFloat32OptionToUint64ArrList(m Uint64ArrList, f func([]uint64) Float32Option) Float32OptionList { acc := NilFloat32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ArrList: []uint64->Float64Option */ func MapFloat64OptionToUint64ArrList(m Uint64ArrList, f func([]uint64) Float64Option) Float64OptionList { acc := NilFloat64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ArrList: []uint64->Complex64Option */ func MapComplex64OptionToUint64ArrList(m Uint64ArrList, f func([]uint64) Complex64Option) Complex64OptionList { acc := NilComplex64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ArrList: []uint64->Complex128Option */ func MapComplex128OptionToUint64ArrList(m Uint64ArrList, f func([]uint64) Complex128Option) Complex128OptionList { acc := NilComplex128OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ArrList: []uint64->AnyOption */ func MapAnyOptionToUint64ArrList(m Uint64ArrList, f func([]uint64) AnyOption) AnyOptionList { acc := NilAnyOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ArrList: []uint64->[]bool */ func MapBoolArrToUint64ArrList(m Uint64ArrList, f func([]uint64) []bool) BoolArrList { acc := NilBoolArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ArrList: []uint64->[]string */ func MapStringArrToUint64ArrList(m Uint64ArrList, f func([]uint64) []string) StringArrList { acc := NilStringArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ArrList: []uint64->[]int */ func MapIntArrToUint64ArrList(m Uint64ArrList, f func([]uint64) []int) IntArrList { acc := NilIntArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ArrList: []uint64->[]int8 */ func MapInt8ArrToUint64ArrList(m Uint64ArrList, f func([]uint64) []int8) Int8ArrList { acc := NilInt8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ArrList: []uint64->[]int16 */ func MapInt16ArrToUint64ArrList(m Uint64ArrList, f func([]uint64) []int16) Int16ArrList { acc := NilInt16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ArrList: []uint64->[]int32 */ func MapInt32ArrToUint64ArrList(m Uint64ArrList, f func([]uint64) []int32) Int32ArrList { acc := NilInt32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ArrList: []uint64->[]int64 */ func MapInt64ArrToUint64ArrList(m Uint64ArrList, f func([]uint64) []int64) Int64ArrList { acc := NilInt64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ArrList: []uint64->[]uint */ func MapUintArrToUint64ArrList(m Uint64ArrList, f func([]uint64) []uint) UintArrList { acc := NilUintArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ArrList: []uint64->[]uint8 */ func MapUint8ArrToUint64ArrList(m Uint64ArrList, f func([]uint64) []uint8) Uint8ArrList { acc := NilUint8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ArrList: []uint64->[]uint16 */ func MapUint16ArrToUint64ArrList(m Uint64ArrList, f func([]uint64) []uint16) Uint16ArrList { acc := NilUint16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ArrList: []uint64->[]uint32 */ func MapUint32ArrToUint64ArrList(m Uint64ArrList, f func([]uint64) []uint32) Uint32ArrList { acc := NilUint32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ArrList: []uint64->[]uint64 */ func MapUint64ArrToUint64ArrList(m Uint64ArrList, f func([]uint64) []uint64) Uint64ArrList { acc := NilUint64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ArrList: []uint64->[]uintptr */ func MapUintptrArrToUint64ArrList(m Uint64ArrList, f func([]uint64) []uintptr) UintptrArrList { acc := NilUintptrArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ArrList: []uint64->[]byte */ func MapByteArrToUint64ArrList(m Uint64ArrList, f func([]uint64) []byte) ByteArrList { acc := NilByteArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ArrList: []uint64->[]rune */ func MapRuneArrToUint64ArrList(m Uint64ArrList, f func([]uint64) []rune) RuneArrList { acc := NilRuneArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ArrList: []uint64->[]float32 */ func MapFloat32ArrToUint64ArrList(m Uint64ArrList, f func([]uint64) []float32) Float32ArrList { acc := NilFloat32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ArrList: []uint64->[]float64 */ func MapFloat64ArrToUint64ArrList(m Uint64ArrList, f func([]uint64) []float64) Float64ArrList { acc := NilFloat64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ArrList: []uint64->[]complex64 */ func MapComplex64ArrToUint64ArrList(m Uint64ArrList, f func([]uint64) []complex64) Complex64ArrList { acc := NilComplex64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ArrList: []uint64->[]complex128 */ func MapComplex128ArrToUint64ArrList(m Uint64ArrList, f func([]uint64) []complex128) Complex128ArrList { acc := NilComplex128ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ArrList: []uint64->[]Any */ func MapAnyArrToUint64ArrList(m Uint64ArrList, f func([]uint64) []Any) AnyArrList { acc := NilAnyArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ArrList: []uint64->BoolList */ func MapBoolListToUint64ArrList(m Uint64ArrList, f func([]uint64) BoolList) BoolListList { acc := NilBoolListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ArrList: []uint64->StringList */ func MapStringListToUint64ArrList(m Uint64ArrList, f func([]uint64) StringList) StringListList { acc := NilStringListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ArrList: []uint64->IntList */ func MapIntListToUint64ArrList(m Uint64ArrList, f func([]uint64) IntList) IntListList { acc := NilIntListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ArrList: []uint64->Int8List */ func MapInt8ListToUint64ArrList(m Uint64ArrList, f func([]uint64) Int8List) Int8ListList { acc := NilInt8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ArrList: []uint64->Int16List */ func MapInt16ListToUint64ArrList(m Uint64ArrList, f func([]uint64) Int16List) Int16ListList { acc := NilInt16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ArrList: []uint64->Int32List */ func MapInt32ListToUint64ArrList(m Uint64ArrList, f func([]uint64) Int32List) Int32ListList { acc := NilInt32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ArrList: []uint64->Int64List */ func MapInt64ListToUint64ArrList(m Uint64ArrList, f func([]uint64) Int64List) Int64ListList { acc := NilInt64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ArrList: []uint64->UintList */ func MapUintListToUint64ArrList(m Uint64ArrList, f func([]uint64) UintList) UintListList { acc := NilUintListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ArrList: []uint64->Uint8List */ func MapUint8ListToUint64ArrList(m Uint64ArrList, f func([]uint64) Uint8List) Uint8ListList { acc := NilUint8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ArrList: []uint64->Uint16List */ func MapUint16ListToUint64ArrList(m Uint64ArrList, f func([]uint64) Uint16List) Uint16ListList { acc := NilUint16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ArrList: []uint64->Uint32List */ func MapUint32ListToUint64ArrList(m Uint64ArrList, f func([]uint64) Uint32List) Uint32ListList { acc := NilUint32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ArrList: []uint64->Uint64List */ func MapUint64ListToUint64ArrList(m Uint64ArrList, f func([]uint64) Uint64List) Uint64ListList { acc := NilUint64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ArrList: []uint64->UintptrList */ func MapUintptrListToUint64ArrList(m Uint64ArrList, f func([]uint64) UintptrList) UintptrListList { acc := NilUintptrListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ArrList: []uint64->ByteList */ func MapByteListToUint64ArrList(m Uint64ArrList, f func([]uint64) ByteList) ByteListList { acc := NilByteListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ArrList: []uint64->RuneList */ func MapRuneListToUint64ArrList(m Uint64ArrList, f func([]uint64) RuneList) RuneListList { acc := NilRuneListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ArrList: []uint64->Float32List */ func MapFloat32ListToUint64ArrList(m Uint64ArrList, f func([]uint64) Float32List) Float32ListList { acc := NilFloat32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ArrList: []uint64->Float64List */ func MapFloat64ListToUint64ArrList(m Uint64ArrList, f func([]uint64) Float64List) Float64ListList { acc := NilFloat64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ArrList: []uint64->Complex64List */ func MapComplex64ListToUint64ArrList(m Uint64ArrList, f func([]uint64) Complex64List) Complex64ListList { acc := NilComplex64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ArrList: []uint64->Complex128List */ func MapComplex128ListToUint64ArrList(m Uint64ArrList, f func([]uint64) Complex128List) Complex128ListList { acc := NilComplex128ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ArrList: []uint64->AnyList */ func MapAnyListToUint64ArrList(m Uint64ArrList, f func([]uint64) AnyList) AnyListList { acc := NilAnyListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrArrList: []uintptr->bool */ func MapBoolToUintptrArrList(m UintptrArrList, f func([]uintptr) bool) BoolList { acc := NilBoolList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrArrList: []uintptr->string */ func MapStringToUintptrArrList(m UintptrArrList, f func([]uintptr) string) StringList { acc := NilStringList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrArrList: []uintptr->int */ func MapIntToUintptrArrList(m UintptrArrList, f func([]uintptr) int) IntList { acc := NilIntList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrArrList: []uintptr->int8 */ func MapInt8ToUintptrArrList(m UintptrArrList, f func([]uintptr) int8) Int8List { acc := NilInt8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrArrList: []uintptr->int16 */ func MapInt16ToUintptrArrList(m UintptrArrList, f func([]uintptr) int16) Int16List { acc := NilInt16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrArrList: []uintptr->int32 */ func MapInt32ToUintptrArrList(m UintptrArrList, f func([]uintptr) int32) Int32List { acc := NilInt32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrArrList: []uintptr->int64 */ func MapInt64ToUintptrArrList(m UintptrArrList, f func([]uintptr) int64) Int64List { acc := NilInt64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrArrList: []uintptr->uint */ func MapUintToUintptrArrList(m UintptrArrList, f func([]uintptr) uint) UintList { acc := NilUintList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrArrList: []uintptr->uint8 */ func MapUint8ToUintptrArrList(m UintptrArrList, f func([]uintptr) uint8) Uint8List { acc := NilUint8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrArrList: []uintptr->uint16 */ func MapUint16ToUintptrArrList(m UintptrArrList, f func([]uintptr) uint16) Uint16List { acc := NilUint16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrArrList: []uintptr->uint32 */ func MapUint32ToUintptrArrList(m UintptrArrList, f func([]uintptr) uint32) Uint32List { acc := NilUint32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrArrList: []uintptr->uint64 */ func MapUint64ToUintptrArrList(m UintptrArrList, f func([]uintptr) uint64) Uint64List { acc := NilUint64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrArrList: []uintptr->uintptr */ func MapUintptrToUintptrArrList(m UintptrArrList, f func([]uintptr) uintptr) UintptrList { acc := NilUintptrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrArrList: []uintptr->byte */ func MapByteToUintptrArrList(m UintptrArrList, f func([]uintptr) byte) ByteList { acc := NilByteList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrArrList: []uintptr->rune */ func MapRuneToUintptrArrList(m UintptrArrList, f func([]uintptr) rune) RuneList { acc := NilRuneList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrArrList: []uintptr->float32 */ func MapFloat32ToUintptrArrList(m UintptrArrList, f func([]uintptr) float32) Float32List { acc := NilFloat32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrArrList: []uintptr->float64 */ func MapFloat64ToUintptrArrList(m UintptrArrList, f func([]uintptr) float64) Float64List { acc := NilFloat64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrArrList: []uintptr->complex64 */ func MapComplex64ToUintptrArrList(m UintptrArrList, f func([]uintptr) complex64) Complex64List { acc := NilComplex64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrArrList: []uintptr->complex128 */ func MapComplex128ToUintptrArrList(m UintptrArrList, f func([]uintptr) complex128) Complex128List { acc := NilComplex128List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrArrList: []uintptr->Any */ func MapAnyToUintptrArrList(m UintptrArrList, f func([]uintptr) Any) AnyList { acc := NilAnyList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrArrList: []uintptr->BoolOption */ func MapBoolOptionToUintptrArrList(m UintptrArrList, f func([]uintptr) BoolOption) BoolOptionList { acc := NilBoolOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrArrList: []uintptr->StringOption */ func MapStringOptionToUintptrArrList(m UintptrArrList, f func([]uintptr) StringOption) StringOptionList { acc := NilStringOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrArrList: []uintptr->IntOption */ func MapIntOptionToUintptrArrList(m UintptrArrList, f func([]uintptr) IntOption) IntOptionList { acc := NilIntOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrArrList: []uintptr->Int8Option */ func MapInt8OptionToUintptrArrList(m UintptrArrList, f func([]uintptr) Int8Option) Int8OptionList { acc := NilInt8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrArrList: []uintptr->Int16Option */ func MapInt16OptionToUintptrArrList(m UintptrArrList, f func([]uintptr) Int16Option) Int16OptionList { acc := NilInt16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrArrList: []uintptr->Int32Option */ func MapInt32OptionToUintptrArrList(m UintptrArrList, f func([]uintptr) Int32Option) Int32OptionList { acc := NilInt32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrArrList: []uintptr->Int64Option */ func MapInt64OptionToUintptrArrList(m UintptrArrList, f func([]uintptr) Int64Option) Int64OptionList { acc := NilInt64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrArrList: []uintptr->UintOption */ func MapUintOptionToUintptrArrList(m UintptrArrList, f func([]uintptr) UintOption) UintOptionList { acc := NilUintOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrArrList: []uintptr->Uint8Option */ func MapUint8OptionToUintptrArrList(m UintptrArrList, f func([]uintptr) Uint8Option) Uint8OptionList { acc := NilUint8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrArrList: []uintptr->Uint16Option */ func MapUint16OptionToUintptrArrList(m UintptrArrList, f func([]uintptr) Uint16Option) Uint16OptionList { acc := NilUint16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrArrList: []uintptr->Uint32Option */ func MapUint32OptionToUintptrArrList(m UintptrArrList, f func([]uintptr) Uint32Option) Uint32OptionList { acc := NilUint32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrArrList: []uintptr->Uint64Option */ func MapUint64OptionToUintptrArrList(m UintptrArrList, f func([]uintptr) Uint64Option) Uint64OptionList { acc := NilUint64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrArrList: []uintptr->UintptrOption */ func MapUintptrOptionToUintptrArrList(m UintptrArrList, f func([]uintptr) UintptrOption) UintptrOptionList { acc := NilUintptrOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrArrList: []uintptr->ByteOption */ func MapByteOptionToUintptrArrList(m UintptrArrList, f func([]uintptr) ByteOption) ByteOptionList { acc := NilByteOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrArrList: []uintptr->RuneOption */ func MapRuneOptionToUintptrArrList(m UintptrArrList, f func([]uintptr) RuneOption) RuneOptionList { acc := NilRuneOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrArrList: []uintptr->Float32Option */ func MapFloat32OptionToUintptrArrList(m UintptrArrList, f func([]uintptr) Float32Option) Float32OptionList { acc := NilFloat32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrArrList: []uintptr->Float64Option */ func MapFloat64OptionToUintptrArrList(m UintptrArrList, f func([]uintptr) Float64Option) Float64OptionList { acc := NilFloat64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrArrList: []uintptr->Complex64Option */ func MapComplex64OptionToUintptrArrList(m UintptrArrList, f func([]uintptr) Complex64Option) Complex64OptionList { acc := NilComplex64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrArrList: []uintptr->Complex128Option */ func MapComplex128OptionToUintptrArrList(m UintptrArrList, f func([]uintptr) Complex128Option) Complex128OptionList { acc := NilComplex128OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrArrList: []uintptr->AnyOption */ func MapAnyOptionToUintptrArrList(m UintptrArrList, f func([]uintptr) AnyOption) AnyOptionList { acc := NilAnyOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrArrList: []uintptr->[]bool */ func MapBoolArrToUintptrArrList(m UintptrArrList, f func([]uintptr) []bool) BoolArrList { acc := NilBoolArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrArrList: []uintptr->[]string */ func MapStringArrToUintptrArrList(m UintptrArrList, f func([]uintptr) []string) StringArrList { acc := NilStringArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrArrList: []uintptr->[]int */ func MapIntArrToUintptrArrList(m UintptrArrList, f func([]uintptr) []int) IntArrList { acc := NilIntArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrArrList: []uintptr->[]int8 */ func MapInt8ArrToUintptrArrList(m UintptrArrList, f func([]uintptr) []int8) Int8ArrList { acc := NilInt8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrArrList: []uintptr->[]int16 */ func MapInt16ArrToUintptrArrList(m UintptrArrList, f func([]uintptr) []int16) Int16ArrList { acc := NilInt16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrArrList: []uintptr->[]int32 */ func MapInt32ArrToUintptrArrList(m UintptrArrList, f func([]uintptr) []int32) Int32ArrList { acc := NilInt32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrArrList: []uintptr->[]int64 */ func MapInt64ArrToUintptrArrList(m UintptrArrList, f func([]uintptr) []int64) Int64ArrList { acc := NilInt64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrArrList: []uintptr->[]uint */ func MapUintArrToUintptrArrList(m UintptrArrList, f func([]uintptr) []uint) UintArrList { acc := NilUintArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrArrList: []uintptr->[]uint8 */ func MapUint8ArrToUintptrArrList(m UintptrArrList, f func([]uintptr) []uint8) Uint8ArrList { acc := NilUint8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrArrList: []uintptr->[]uint16 */ func MapUint16ArrToUintptrArrList(m UintptrArrList, f func([]uintptr) []uint16) Uint16ArrList { acc := NilUint16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrArrList: []uintptr->[]uint32 */ func MapUint32ArrToUintptrArrList(m UintptrArrList, f func([]uintptr) []uint32) Uint32ArrList { acc := NilUint32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrArrList: []uintptr->[]uint64 */ func MapUint64ArrToUintptrArrList(m UintptrArrList, f func([]uintptr) []uint64) Uint64ArrList { acc := NilUint64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrArrList: []uintptr->[]uintptr */ func MapUintptrArrToUintptrArrList(m UintptrArrList, f func([]uintptr) []uintptr) UintptrArrList { acc := NilUintptrArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrArrList: []uintptr->[]byte */ func MapByteArrToUintptrArrList(m UintptrArrList, f func([]uintptr) []byte) ByteArrList { acc := NilByteArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrArrList: []uintptr->[]rune */ func MapRuneArrToUintptrArrList(m UintptrArrList, f func([]uintptr) []rune) RuneArrList { acc := NilRuneArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrArrList: []uintptr->[]float32 */ func MapFloat32ArrToUintptrArrList(m UintptrArrList, f func([]uintptr) []float32) Float32ArrList { acc := NilFloat32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrArrList: []uintptr->[]float64 */ func MapFloat64ArrToUintptrArrList(m UintptrArrList, f func([]uintptr) []float64) Float64ArrList { acc := NilFloat64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrArrList: []uintptr->[]complex64 */ func MapComplex64ArrToUintptrArrList(m UintptrArrList, f func([]uintptr) []complex64) Complex64ArrList { acc := NilComplex64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrArrList: []uintptr->[]complex128 */ func MapComplex128ArrToUintptrArrList(m UintptrArrList, f func([]uintptr) []complex128) Complex128ArrList { acc := NilComplex128ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrArrList: []uintptr->[]Any */ func MapAnyArrToUintptrArrList(m UintptrArrList, f func([]uintptr) []Any) AnyArrList { acc := NilAnyArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrArrList: []uintptr->BoolList */ func MapBoolListToUintptrArrList(m UintptrArrList, f func([]uintptr) BoolList) BoolListList { acc := NilBoolListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrArrList: []uintptr->StringList */ func MapStringListToUintptrArrList(m UintptrArrList, f func([]uintptr) StringList) StringListList { acc := NilStringListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrArrList: []uintptr->IntList */ func MapIntListToUintptrArrList(m UintptrArrList, f func([]uintptr) IntList) IntListList { acc := NilIntListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrArrList: []uintptr->Int8List */ func MapInt8ListToUintptrArrList(m UintptrArrList, f func([]uintptr) Int8List) Int8ListList { acc := NilInt8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrArrList: []uintptr->Int16List */ func MapInt16ListToUintptrArrList(m UintptrArrList, f func([]uintptr) Int16List) Int16ListList { acc := NilInt16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrArrList: []uintptr->Int32List */ func MapInt32ListToUintptrArrList(m UintptrArrList, f func([]uintptr) Int32List) Int32ListList { acc := NilInt32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrArrList: []uintptr->Int64List */ func MapInt64ListToUintptrArrList(m UintptrArrList, f func([]uintptr) Int64List) Int64ListList { acc := NilInt64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrArrList: []uintptr->UintList */ func MapUintListToUintptrArrList(m UintptrArrList, f func([]uintptr) UintList) UintListList { acc := NilUintListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrArrList: []uintptr->Uint8List */ func MapUint8ListToUintptrArrList(m UintptrArrList, f func([]uintptr) Uint8List) Uint8ListList { acc := NilUint8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrArrList: []uintptr->Uint16List */ func MapUint16ListToUintptrArrList(m UintptrArrList, f func([]uintptr) Uint16List) Uint16ListList { acc := NilUint16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrArrList: []uintptr->Uint32List */ func MapUint32ListToUintptrArrList(m UintptrArrList, f func([]uintptr) Uint32List) Uint32ListList { acc := NilUint32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrArrList: []uintptr->Uint64List */ func MapUint64ListToUintptrArrList(m UintptrArrList, f func([]uintptr) Uint64List) Uint64ListList { acc := NilUint64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrArrList: []uintptr->UintptrList */ func MapUintptrListToUintptrArrList(m UintptrArrList, f func([]uintptr) UintptrList) UintptrListList { acc := NilUintptrListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrArrList: []uintptr->ByteList */ func MapByteListToUintptrArrList(m UintptrArrList, f func([]uintptr) ByteList) ByteListList { acc := NilByteListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrArrList: []uintptr->RuneList */ func MapRuneListToUintptrArrList(m UintptrArrList, f func([]uintptr) RuneList) RuneListList { acc := NilRuneListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrArrList: []uintptr->Float32List */ func MapFloat32ListToUintptrArrList(m UintptrArrList, f func([]uintptr) Float32List) Float32ListList { acc := NilFloat32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrArrList: []uintptr->Float64List */ func MapFloat64ListToUintptrArrList(m UintptrArrList, f func([]uintptr) Float64List) Float64ListList { acc := NilFloat64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrArrList: []uintptr->Complex64List */ func MapComplex64ListToUintptrArrList(m UintptrArrList, f func([]uintptr) Complex64List) Complex64ListList { acc := NilComplex64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrArrList: []uintptr->Complex128List */ func MapComplex128ListToUintptrArrList(m UintptrArrList, f func([]uintptr) Complex128List) Complex128ListList { acc := NilComplex128ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrArrList: []uintptr->AnyList */ func MapAnyListToUintptrArrList(m UintptrArrList, f func([]uintptr) AnyList) AnyListList { acc := NilAnyListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteArrList: []byte->bool */ func MapBoolToByteArrList(m ByteArrList, f func([]byte) bool) BoolList { acc := NilBoolList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteArrList: []byte->string */ func MapStringToByteArrList(m ByteArrList, f func([]byte) string) StringList { acc := NilStringList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteArrList: []byte->int */ func MapIntToByteArrList(m ByteArrList, f func([]byte) int) IntList { acc := NilIntList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteArrList: []byte->int8 */ func MapInt8ToByteArrList(m ByteArrList, f func([]byte) int8) Int8List { acc := NilInt8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteArrList: []byte->int16 */ func MapInt16ToByteArrList(m ByteArrList, f func([]byte) int16) Int16List { acc := NilInt16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteArrList: []byte->int32 */ func MapInt32ToByteArrList(m ByteArrList, f func([]byte) int32) Int32List { acc := NilInt32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteArrList: []byte->int64 */ func MapInt64ToByteArrList(m ByteArrList, f func([]byte) int64) Int64List { acc := NilInt64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteArrList: []byte->uint */ func MapUintToByteArrList(m ByteArrList, f func([]byte) uint) UintList { acc := NilUintList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteArrList: []byte->uint8 */ func MapUint8ToByteArrList(m ByteArrList, f func([]byte) uint8) Uint8List { acc := NilUint8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteArrList: []byte->uint16 */ func MapUint16ToByteArrList(m ByteArrList, f func([]byte) uint16) Uint16List { acc := NilUint16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteArrList: []byte->uint32 */ func MapUint32ToByteArrList(m ByteArrList, f func([]byte) uint32) Uint32List { acc := NilUint32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteArrList: []byte->uint64 */ func MapUint64ToByteArrList(m ByteArrList, f func([]byte) uint64) Uint64List { acc := NilUint64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteArrList: []byte->uintptr */ func MapUintptrToByteArrList(m ByteArrList, f func([]byte) uintptr) UintptrList { acc := NilUintptrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteArrList: []byte->byte */ func MapByteToByteArrList(m ByteArrList, f func([]byte) byte) ByteList { acc := NilByteList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteArrList: []byte->rune */ func MapRuneToByteArrList(m ByteArrList, f func([]byte) rune) RuneList { acc := NilRuneList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteArrList: []byte->float32 */ func MapFloat32ToByteArrList(m ByteArrList, f func([]byte) float32) Float32List { acc := NilFloat32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteArrList: []byte->float64 */ func MapFloat64ToByteArrList(m ByteArrList, f func([]byte) float64) Float64List { acc := NilFloat64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteArrList: []byte->complex64 */ func MapComplex64ToByteArrList(m ByteArrList, f func([]byte) complex64) Complex64List { acc := NilComplex64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteArrList: []byte->complex128 */ func MapComplex128ToByteArrList(m ByteArrList, f func([]byte) complex128) Complex128List { acc := NilComplex128List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteArrList: []byte->Any */ func MapAnyToByteArrList(m ByteArrList, f func([]byte) Any) AnyList { acc := NilAnyList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteArrList: []byte->BoolOption */ func MapBoolOptionToByteArrList(m ByteArrList, f func([]byte) BoolOption) BoolOptionList { acc := NilBoolOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteArrList: []byte->StringOption */ func MapStringOptionToByteArrList(m ByteArrList, f func([]byte) StringOption) StringOptionList { acc := NilStringOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteArrList: []byte->IntOption */ func MapIntOptionToByteArrList(m ByteArrList, f func([]byte) IntOption) IntOptionList { acc := NilIntOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteArrList: []byte->Int8Option */ func MapInt8OptionToByteArrList(m ByteArrList, f func([]byte) Int8Option) Int8OptionList { acc := NilInt8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteArrList: []byte->Int16Option */ func MapInt16OptionToByteArrList(m ByteArrList, f func([]byte) Int16Option) Int16OptionList { acc := NilInt16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteArrList: []byte->Int32Option */ func MapInt32OptionToByteArrList(m ByteArrList, f func([]byte) Int32Option) Int32OptionList { acc := NilInt32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteArrList: []byte->Int64Option */ func MapInt64OptionToByteArrList(m ByteArrList, f func([]byte) Int64Option) Int64OptionList { acc := NilInt64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteArrList: []byte->UintOption */ func MapUintOptionToByteArrList(m ByteArrList, f func([]byte) UintOption) UintOptionList { acc := NilUintOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteArrList: []byte->Uint8Option */ func MapUint8OptionToByteArrList(m ByteArrList, f func([]byte) Uint8Option) Uint8OptionList { acc := NilUint8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteArrList: []byte->Uint16Option */ func MapUint16OptionToByteArrList(m ByteArrList, f func([]byte) Uint16Option) Uint16OptionList { acc := NilUint16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteArrList: []byte->Uint32Option */ func MapUint32OptionToByteArrList(m ByteArrList, f func([]byte) Uint32Option) Uint32OptionList { acc := NilUint32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteArrList: []byte->Uint64Option */ func MapUint64OptionToByteArrList(m ByteArrList, f func([]byte) Uint64Option) Uint64OptionList { acc := NilUint64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteArrList: []byte->UintptrOption */ func MapUintptrOptionToByteArrList(m ByteArrList, f func([]byte) UintptrOption) UintptrOptionList { acc := NilUintptrOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteArrList: []byte->ByteOption */ func MapByteOptionToByteArrList(m ByteArrList, f func([]byte) ByteOption) ByteOptionList { acc := NilByteOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteArrList: []byte->RuneOption */ func MapRuneOptionToByteArrList(m ByteArrList, f func([]byte) RuneOption) RuneOptionList { acc := NilRuneOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteArrList: []byte->Float32Option */ func MapFloat32OptionToByteArrList(m ByteArrList, f func([]byte) Float32Option) Float32OptionList { acc := NilFloat32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteArrList: []byte->Float64Option */ func MapFloat64OptionToByteArrList(m ByteArrList, f func([]byte) Float64Option) Float64OptionList { acc := NilFloat64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteArrList: []byte->Complex64Option */ func MapComplex64OptionToByteArrList(m ByteArrList, f func([]byte) Complex64Option) Complex64OptionList { acc := NilComplex64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteArrList: []byte->Complex128Option */ func MapComplex128OptionToByteArrList(m ByteArrList, f func([]byte) Complex128Option) Complex128OptionList { acc := NilComplex128OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteArrList: []byte->AnyOption */ func MapAnyOptionToByteArrList(m ByteArrList, f func([]byte) AnyOption) AnyOptionList { acc := NilAnyOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteArrList: []byte->[]bool */ func MapBoolArrToByteArrList(m ByteArrList, f func([]byte) []bool) BoolArrList { acc := NilBoolArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteArrList: []byte->[]string */ func MapStringArrToByteArrList(m ByteArrList, f func([]byte) []string) StringArrList { acc := NilStringArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteArrList: []byte->[]int */ func MapIntArrToByteArrList(m ByteArrList, f func([]byte) []int) IntArrList { acc := NilIntArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteArrList: []byte->[]int8 */ func MapInt8ArrToByteArrList(m ByteArrList, f func([]byte) []int8) Int8ArrList { acc := NilInt8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteArrList: []byte->[]int16 */ func MapInt16ArrToByteArrList(m ByteArrList, f func([]byte) []int16) Int16ArrList { acc := NilInt16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteArrList: []byte->[]int32 */ func MapInt32ArrToByteArrList(m ByteArrList, f func([]byte) []int32) Int32ArrList { acc := NilInt32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteArrList: []byte->[]int64 */ func MapInt64ArrToByteArrList(m ByteArrList, f func([]byte) []int64) Int64ArrList { acc := NilInt64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteArrList: []byte->[]uint */ func MapUintArrToByteArrList(m ByteArrList, f func([]byte) []uint) UintArrList { acc := NilUintArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteArrList: []byte->[]uint8 */ func MapUint8ArrToByteArrList(m ByteArrList, f func([]byte) []uint8) Uint8ArrList { acc := NilUint8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteArrList: []byte->[]uint16 */ func MapUint16ArrToByteArrList(m ByteArrList, f func([]byte) []uint16) Uint16ArrList { acc := NilUint16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteArrList: []byte->[]uint32 */ func MapUint32ArrToByteArrList(m ByteArrList, f func([]byte) []uint32) Uint32ArrList { acc := NilUint32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteArrList: []byte->[]uint64 */ func MapUint64ArrToByteArrList(m ByteArrList, f func([]byte) []uint64) Uint64ArrList { acc := NilUint64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteArrList: []byte->[]uintptr */ func MapUintptrArrToByteArrList(m ByteArrList, f func([]byte) []uintptr) UintptrArrList { acc := NilUintptrArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteArrList: []byte->[]byte */ func MapByteArrToByteArrList(m ByteArrList, f func([]byte) []byte) ByteArrList { acc := NilByteArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteArrList: []byte->[]rune */ func MapRuneArrToByteArrList(m ByteArrList, f func([]byte) []rune) RuneArrList { acc := NilRuneArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteArrList: []byte->[]float32 */ func MapFloat32ArrToByteArrList(m ByteArrList, f func([]byte) []float32) Float32ArrList { acc := NilFloat32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteArrList: []byte->[]float64 */ func MapFloat64ArrToByteArrList(m ByteArrList, f func([]byte) []float64) Float64ArrList { acc := NilFloat64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteArrList: []byte->[]complex64 */ func MapComplex64ArrToByteArrList(m ByteArrList, f func([]byte) []complex64) Complex64ArrList { acc := NilComplex64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteArrList: []byte->[]complex128 */ func MapComplex128ArrToByteArrList(m ByteArrList, f func([]byte) []complex128) Complex128ArrList { acc := NilComplex128ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteArrList: []byte->[]Any */ func MapAnyArrToByteArrList(m ByteArrList, f func([]byte) []Any) AnyArrList { acc := NilAnyArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteArrList: []byte->BoolList */ func MapBoolListToByteArrList(m ByteArrList, f func([]byte) BoolList) BoolListList { acc := NilBoolListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteArrList: []byte->StringList */ func MapStringListToByteArrList(m ByteArrList, f func([]byte) StringList) StringListList { acc := NilStringListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteArrList: []byte->IntList */ func MapIntListToByteArrList(m ByteArrList, f func([]byte) IntList) IntListList { acc := NilIntListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteArrList: []byte->Int8List */ func MapInt8ListToByteArrList(m ByteArrList, f func([]byte) Int8List) Int8ListList { acc := NilInt8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteArrList: []byte->Int16List */ func MapInt16ListToByteArrList(m ByteArrList, f func([]byte) Int16List) Int16ListList { acc := NilInt16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteArrList: []byte->Int32List */ func MapInt32ListToByteArrList(m ByteArrList, f func([]byte) Int32List) Int32ListList { acc := NilInt32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteArrList: []byte->Int64List */ func MapInt64ListToByteArrList(m ByteArrList, f func([]byte) Int64List) Int64ListList { acc := NilInt64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteArrList: []byte->UintList */ func MapUintListToByteArrList(m ByteArrList, f func([]byte) UintList) UintListList { acc := NilUintListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteArrList: []byte->Uint8List */ func MapUint8ListToByteArrList(m ByteArrList, f func([]byte) Uint8List) Uint8ListList { acc := NilUint8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteArrList: []byte->Uint16List */ func MapUint16ListToByteArrList(m ByteArrList, f func([]byte) Uint16List) Uint16ListList { acc := NilUint16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteArrList: []byte->Uint32List */ func MapUint32ListToByteArrList(m ByteArrList, f func([]byte) Uint32List) Uint32ListList { acc := NilUint32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteArrList: []byte->Uint64List */ func MapUint64ListToByteArrList(m ByteArrList, f func([]byte) Uint64List) Uint64ListList { acc := NilUint64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteArrList: []byte->UintptrList */ func MapUintptrListToByteArrList(m ByteArrList, f func([]byte) UintptrList) UintptrListList { acc := NilUintptrListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteArrList: []byte->ByteList */ func MapByteListToByteArrList(m ByteArrList, f func([]byte) ByteList) ByteListList { acc := NilByteListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteArrList: []byte->RuneList */ func MapRuneListToByteArrList(m ByteArrList, f func([]byte) RuneList) RuneListList { acc := NilRuneListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteArrList: []byte->Float32List */ func MapFloat32ListToByteArrList(m ByteArrList, f func([]byte) Float32List) Float32ListList { acc := NilFloat32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteArrList: []byte->Float64List */ func MapFloat64ListToByteArrList(m ByteArrList, f func([]byte) Float64List) Float64ListList { acc := NilFloat64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteArrList: []byte->Complex64List */ func MapComplex64ListToByteArrList(m ByteArrList, f func([]byte) Complex64List) Complex64ListList { acc := NilComplex64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteArrList: []byte->Complex128List */ func MapComplex128ListToByteArrList(m ByteArrList, f func([]byte) Complex128List) Complex128ListList { acc := NilComplex128ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteArrList: []byte->AnyList */ func MapAnyListToByteArrList(m ByteArrList, f func([]byte) AnyList) AnyListList { acc := NilAnyListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneArrList: []rune->bool */ func MapBoolToRuneArrList(m RuneArrList, f func([]rune) bool) BoolList { acc := NilBoolList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneArrList: []rune->string */ func MapStringToRuneArrList(m RuneArrList, f func([]rune) string) StringList { acc := NilStringList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneArrList: []rune->int */ func MapIntToRuneArrList(m RuneArrList, f func([]rune) int) IntList { acc := NilIntList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneArrList: []rune->int8 */ func MapInt8ToRuneArrList(m RuneArrList, f func([]rune) int8) Int8List { acc := NilInt8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneArrList: []rune->int16 */ func MapInt16ToRuneArrList(m RuneArrList, f func([]rune) int16) Int16List { acc := NilInt16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneArrList: []rune->int32 */ func MapInt32ToRuneArrList(m RuneArrList, f func([]rune) int32) Int32List { acc := NilInt32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneArrList: []rune->int64 */ func MapInt64ToRuneArrList(m RuneArrList, f func([]rune) int64) Int64List { acc := NilInt64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneArrList: []rune->uint */ func MapUintToRuneArrList(m RuneArrList, f func([]rune) uint) UintList { acc := NilUintList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneArrList: []rune->uint8 */ func MapUint8ToRuneArrList(m RuneArrList, f func([]rune) uint8) Uint8List { acc := NilUint8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneArrList: []rune->uint16 */ func MapUint16ToRuneArrList(m RuneArrList, f func([]rune) uint16) Uint16List { acc := NilUint16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneArrList: []rune->uint32 */ func MapUint32ToRuneArrList(m RuneArrList, f func([]rune) uint32) Uint32List { acc := NilUint32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneArrList: []rune->uint64 */ func MapUint64ToRuneArrList(m RuneArrList, f func([]rune) uint64) Uint64List { acc := NilUint64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneArrList: []rune->uintptr */ func MapUintptrToRuneArrList(m RuneArrList, f func([]rune) uintptr) UintptrList { acc := NilUintptrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneArrList: []rune->byte */ func MapByteToRuneArrList(m RuneArrList, f func([]rune) byte) ByteList { acc := NilByteList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneArrList: []rune->rune */ func MapRuneToRuneArrList(m RuneArrList, f func([]rune) rune) RuneList { acc := NilRuneList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneArrList: []rune->float32 */ func MapFloat32ToRuneArrList(m RuneArrList, f func([]rune) float32) Float32List { acc := NilFloat32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneArrList: []rune->float64 */ func MapFloat64ToRuneArrList(m RuneArrList, f func([]rune) float64) Float64List { acc := NilFloat64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneArrList: []rune->complex64 */ func MapComplex64ToRuneArrList(m RuneArrList, f func([]rune) complex64) Complex64List { acc := NilComplex64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneArrList: []rune->complex128 */ func MapComplex128ToRuneArrList(m RuneArrList, f func([]rune) complex128) Complex128List { acc := NilComplex128List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneArrList: []rune->Any */ func MapAnyToRuneArrList(m RuneArrList, f func([]rune) Any) AnyList { acc := NilAnyList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneArrList: []rune->BoolOption */ func MapBoolOptionToRuneArrList(m RuneArrList, f func([]rune) BoolOption) BoolOptionList { acc := NilBoolOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneArrList: []rune->StringOption */ func MapStringOptionToRuneArrList(m RuneArrList, f func([]rune) StringOption) StringOptionList { acc := NilStringOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneArrList: []rune->IntOption */ func MapIntOptionToRuneArrList(m RuneArrList, f func([]rune) IntOption) IntOptionList { acc := NilIntOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneArrList: []rune->Int8Option */ func MapInt8OptionToRuneArrList(m RuneArrList, f func([]rune) Int8Option) Int8OptionList { acc := NilInt8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneArrList: []rune->Int16Option */ func MapInt16OptionToRuneArrList(m RuneArrList, f func([]rune) Int16Option) Int16OptionList { acc := NilInt16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneArrList: []rune->Int32Option */ func MapInt32OptionToRuneArrList(m RuneArrList, f func([]rune) Int32Option) Int32OptionList { acc := NilInt32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneArrList: []rune->Int64Option */ func MapInt64OptionToRuneArrList(m RuneArrList, f func([]rune) Int64Option) Int64OptionList { acc := NilInt64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneArrList: []rune->UintOption */ func MapUintOptionToRuneArrList(m RuneArrList, f func([]rune) UintOption) UintOptionList { acc := NilUintOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneArrList: []rune->Uint8Option */ func MapUint8OptionToRuneArrList(m RuneArrList, f func([]rune) Uint8Option) Uint8OptionList { acc := NilUint8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneArrList: []rune->Uint16Option */ func MapUint16OptionToRuneArrList(m RuneArrList, f func([]rune) Uint16Option) Uint16OptionList { acc := NilUint16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneArrList: []rune->Uint32Option */ func MapUint32OptionToRuneArrList(m RuneArrList, f func([]rune) Uint32Option) Uint32OptionList { acc := NilUint32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneArrList: []rune->Uint64Option */ func MapUint64OptionToRuneArrList(m RuneArrList, f func([]rune) Uint64Option) Uint64OptionList { acc := NilUint64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneArrList: []rune->UintptrOption */ func MapUintptrOptionToRuneArrList(m RuneArrList, f func([]rune) UintptrOption) UintptrOptionList { acc := NilUintptrOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneArrList: []rune->ByteOption */ func MapByteOptionToRuneArrList(m RuneArrList, f func([]rune) ByteOption) ByteOptionList { acc := NilByteOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneArrList: []rune->RuneOption */ func MapRuneOptionToRuneArrList(m RuneArrList, f func([]rune) RuneOption) RuneOptionList { acc := NilRuneOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneArrList: []rune->Float32Option */ func MapFloat32OptionToRuneArrList(m RuneArrList, f func([]rune) Float32Option) Float32OptionList { acc := NilFloat32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneArrList: []rune->Float64Option */ func MapFloat64OptionToRuneArrList(m RuneArrList, f func([]rune) Float64Option) Float64OptionList { acc := NilFloat64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneArrList: []rune->Complex64Option */ func MapComplex64OptionToRuneArrList(m RuneArrList, f func([]rune) Complex64Option) Complex64OptionList { acc := NilComplex64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneArrList: []rune->Complex128Option */ func MapComplex128OptionToRuneArrList(m RuneArrList, f func([]rune) Complex128Option) Complex128OptionList { acc := NilComplex128OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneArrList: []rune->AnyOption */ func MapAnyOptionToRuneArrList(m RuneArrList, f func([]rune) AnyOption) AnyOptionList { acc := NilAnyOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneArrList: []rune->[]bool */ func MapBoolArrToRuneArrList(m RuneArrList, f func([]rune) []bool) BoolArrList { acc := NilBoolArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneArrList: []rune->[]string */ func MapStringArrToRuneArrList(m RuneArrList, f func([]rune) []string) StringArrList { acc := NilStringArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneArrList: []rune->[]int */ func MapIntArrToRuneArrList(m RuneArrList, f func([]rune) []int) IntArrList { acc := NilIntArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneArrList: []rune->[]int8 */ func MapInt8ArrToRuneArrList(m RuneArrList, f func([]rune) []int8) Int8ArrList { acc := NilInt8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneArrList: []rune->[]int16 */ func MapInt16ArrToRuneArrList(m RuneArrList, f func([]rune) []int16) Int16ArrList { acc := NilInt16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneArrList: []rune->[]int32 */ func MapInt32ArrToRuneArrList(m RuneArrList, f func([]rune) []int32) Int32ArrList { acc := NilInt32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneArrList: []rune->[]int64 */ func MapInt64ArrToRuneArrList(m RuneArrList, f func([]rune) []int64) Int64ArrList { acc := NilInt64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneArrList: []rune->[]uint */ func MapUintArrToRuneArrList(m RuneArrList, f func([]rune) []uint) UintArrList { acc := NilUintArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneArrList: []rune->[]uint8 */ func MapUint8ArrToRuneArrList(m RuneArrList, f func([]rune) []uint8) Uint8ArrList { acc := NilUint8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneArrList: []rune->[]uint16 */ func MapUint16ArrToRuneArrList(m RuneArrList, f func([]rune) []uint16) Uint16ArrList { acc := NilUint16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneArrList: []rune->[]uint32 */ func MapUint32ArrToRuneArrList(m RuneArrList, f func([]rune) []uint32) Uint32ArrList { acc := NilUint32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneArrList: []rune->[]uint64 */ func MapUint64ArrToRuneArrList(m RuneArrList, f func([]rune) []uint64) Uint64ArrList { acc := NilUint64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneArrList: []rune->[]uintptr */ func MapUintptrArrToRuneArrList(m RuneArrList, f func([]rune) []uintptr) UintptrArrList { acc := NilUintptrArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneArrList: []rune->[]byte */ func MapByteArrToRuneArrList(m RuneArrList, f func([]rune) []byte) ByteArrList { acc := NilByteArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneArrList: []rune->[]rune */ func MapRuneArrToRuneArrList(m RuneArrList, f func([]rune) []rune) RuneArrList { acc := NilRuneArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneArrList: []rune->[]float32 */ func MapFloat32ArrToRuneArrList(m RuneArrList, f func([]rune) []float32) Float32ArrList { acc := NilFloat32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneArrList: []rune->[]float64 */ func MapFloat64ArrToRuneArrList(m RuneArrList, f func([]rune) []float64) Float64ArrList { acc := NilFloat64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneArrList: []rune->[]complex64 */ func MapComplex64ArrToRuneArrList(m RuneArrList, f func([]rune) []complex64) Complex64ArrList { acc := NilComplex64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneArrList: []rune->[]complex128 */ func MapComplex128ArrToRuneArrList(m RuneArrList, f func([]rune) []complex128) Complex128ArrList { acc := NilComplex128ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneArrList: []rune->[]Any */ func MapAnyArrToRuneArrList(m RuneArrList, f func([]rune) []Any) AnyArrList { acc := NilAnyArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneArrList: []rune->BoolList */ func MapBoolListToRuneArrList(m RuneArrList, f func([]rune) BoolList) BoolListList { acc := NilBoolListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneArrList: []rune->StringList */ func MapStringListToRuneArrList(m RuneArrList, f func([]rune) StringList) StringListList { acc := NilStringListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneArrList: []rune->IntList */ func MapIntListToRuneArrList(m RuneArrList, f func([]rune) IntList) IntListList { acc := NilIntListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneArrList: []rune->Int8List */ func MapInt8ListToRuneArrList(m RuneArrList, f func([]rune) Int8List) Int8ListList { acc := NilInt8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneArrList: []rune->Int16List */ func MapInt16ListToRuneArrList(m RuneArrList, f func([]rune) Int16List) Int16ListList { acc := NilInt16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneArrList: []rune->Int32List */ func MapInt32ListToRuneArrList(m RuneArrList, f func([]rune) Int32List) Int32ListList { acc := NilInt32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneArrList: []rune->Int64List */ func MapInt64ListToRuneArrList(m RuneArrList, f func([]rune) Int64List) Int64ListList { acc := NilInt64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneArrList: []rune->UintList */ func MapUintListToRuneArrList(m RuneArrList, f func([]rune) UintList) UintListList { acc := NilUintListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneArrList: []rune->Uint8List */ func MapUint8ListToRuneArrList(m RuneArrList, f func([]rune) Uint8List) Uint8ListList { acc := NilUint8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneArrList: []rune->Uint16List */ func MapUint16ListToRuneArrList(m RuneArrList, f func([]rune) Uint16List) Uint16ListList { acc := NilUint16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneArrList: []rune->Uint32List */ func MapUint32ListToRuneArrList(m RuneArrList, f func([]rune) Uint32List) Uint32ListList { acc := NilUint32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneArrList: []rune->Uint64List */ func MapUint64ListToRuneArrList(m RuneArrList, f func([]rune) Uint64List) Uint64ListList { acc := NilUint64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneArrList: []rune->UintptrList */ func MapUintptrListToRuneArrList(m RuneArrList, f func([]rune) UintptrList) UintptrListList { acc := NilUintptrListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneArrList: []rune->ByteList */ func MapByteListToRuneArrList(m RuneArrList, f func([]rune) ByteList) ByteListList { acc := NilByteListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneArrList: []rune->RuneList */ func MapRuneListToRuneArrList(m RuneArrList, f func([]rune) RuneList) RuneListList { acc := NilRuneListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneArrList: []rune->Float32List */ func MapFloat32ListToRuneArrList(m RuneArrList, f func([]rune) Float32List) Float32ListList { acc := NilFloat32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneArrList: []rune->Float64List */ func MapFloat64ListToRuneArrList(m RuneArrList, f func([]rune) Float64List) Float64ListList { acc := NilFloat64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneArrList: []rune->Complex64List */ func MapComplex64ListToRuneArrList(m RuneArrList, f func([]rune) Complex64List) Complex64ListList { acc := NilComplex64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneArrList: []rune->Complex128List */ func MapComplex128ListToRuneArrList(m RuneArrList, f func([]rune) Complex128List) Complex128ListList { acc := NilComplex128ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneArrList: []rune->AnyList */ func MapAnyListToRuneArrList(m RuneArrList, f func([]rune) AnyList) AnyListList { acc := NilAnyListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ArrList: []float32->bool */ func MapBoolToFloat32ArrList(m Float32ArrList, f func([]float32) bool) BoolList { acc := NilBoolList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ArrList: []float32->string */ func MapStringToFloat32ArrList(m Float32ArrList, f func([]float32) string) StringList { acc := NilStringList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ArrList: []float32->int */ func MapIntToFloat32ArrList(m Float32ArrList, f func([]float32) int) IntList { acc := NilIntList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ArrList: []float32->int8 */ func MapInt8ToFloat32ArrList(m Float32ArrList, f func([]float32) int8) Int8List { acc := NilInt8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ArrList: []float32->int16 */ func MapInt16ToFloat32ArrList(m Float32ArrList, f func([]float32) int16) Int16List { acc := NilInt16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ArrList: []float32->int32 */ func MapInt32ToFloat32ArrList(m Float32ArrList, f func([]float32) int32) Int32List { acc := NilInt32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ArrList: []float32->int64 */ func MapInt64ToFloat32ArrList(m Float32ArrList, f func([]float32) int64) Int64List { acc := NilInt64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ArrList: []float32->uint */ func MapUintToFloat32ArrList(m Float32ArrList, f func([]float32) uint) UintList { acc := NilUintList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ArrList: []float32->uint8 */ func MapUint8ToFloat32ArrList(m Float32ArrList, f func([]float32) uint8) Uint8List { acc := NilUint8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ArrList: []float32->uint16 */ func MapUint16ToFloat32ArrList(m Float32ArrList, f func([]float32) uint16) Uint16List { acc := NilUint16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ArrList: []float32->uint32 */ func MapUint32ToFloat32ArrList(m Float32ArrList, f func([]float32) uint32) Uint32List { acc := NilUint32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ArrList: []float32->uint64 */ func MapUint64ToFloat32ArrList(m Float32ArrList, f func([]float32) uint64) Uint64List { acc := NilUint64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ArrList: []float32->uintptr */ func MapUintptrToFloat32ArrList(m Float32ArrList, f func([]float32) uintptr) UintptrList { acc := NilUintptrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ArrList: []float32->byte */ func MapByteToFloat32ArrList(m Float32ArrList, f func([]float32) byte) ByteList { acc := NilByteList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ArrList: []float32->rune */ func MapRuneToFloat32ArrList(m Float32ArrList, f func([]float32) rune) RuneList { acc := NilRuneList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ArrList: []float32->float32 */ func MapFloat32ToFloat32ArrList(m Float32ArrList, f func([]float32) float32) Float32List { acc := NilFloat32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ArrList: []float32->float64 */ func MapFloat64ToFloat32ArrList(m Float32ArrList, f func([]float32) float64) Float64List { acc := NilFloat64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ArrList: []float32->complex64 */ func MapComplex64ToFloat32ArrList(m Float32ArrList, f func([]float32) complex64) Complex64List { acc := NilComplex64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ArrList: []float32->complex128 */ func MapComplex128ToFloat32ArrList(m Float32ArrList, f func([]float32) complex128) Complex128List { acc := NilComplex128List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ArrList: []float32->Any */ func MapAnyToFloat32ArrList(m Float32ArrList, f func([]float32) Any) AnyList { acc := NilAnyList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ArrList: []float32->BoolOption */ func MapBoolOptionToFloat32ArrList(m Float32ArrList, f func([]float32) BoolOption) BoolOptionList { acc := NilBoolOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ArrList: []float32->StringOption */ func MapStringOptionToFloat32ArrList(m Float32ArrList, f func([]float32) StringOption) StringOptionList { acc := NilStringOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ArrList: []float32->IntOption */ func MapIntOptionToFloat32ArrList(m Float32ArrList, f func([]float32) IntOption) IntOptionList { acc := NilIntOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ArrList: []float32->Int8Option */ func MapInt8OptionToFloat32ArrList(m Float32ArrList, f func([]float32) Int8Option) Int8OptionList { acc := NilInt8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ArrList: []float32->Int16Option */ func MapInt16OptionToFloat32ArrList(m Float32ArrList, f func([]float32) Int16Option) Int16OptionList { acc := NilInt16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ArrList: []float32->Int32Option */ func MapInt32OptionToFloat32ArrList(m Float32ArrList, f func([]float32) Int32Option) Int32OptionList { acc := NilInt32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ArrList: []float32->Int64Option */ func MapInt64OptionToFloat32ArrList(m Float32ArrList, f func([]float32) Int64Option) Int64OptionList { acc := NilInt64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ArrList: []float32->UintOption */ func MapUintOptionToFloat32ArrList(m Float32ArrList, f func([]float32) UintOption) UintOptionList { acc := NilUintOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ArrList: []float32->Uint8Option */ func MapUint8OptionToFloat32ArrList(m Float32ArrList, f func([]float32) Uint8Option) Uint8OptionList { acc := NilUint8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ArrList: []float32->Uint16Option */ func MapUint16OptionToFloat32ArrList(m Float32ArrList, f func([]float32) Uint16Option) Uint16OptionList { acc := NilUint16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ArrList: []float32->Uint32Option */ func MapUint32OptionToFloat32ArrList(m Float32ArrList, f func([]float32) Uint32Option) Uint32OptionList { acc := NilUint32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ArrList: []float32->Uint64Option */ func MapUint64OptionToFloat32ArrList(m Float32ArrList, f func([]float32) Uint64Option) Uint64OptionList { acc := NilUint64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ArrList: []float32->UintptrOption */ func MapUintptrOptionToFloat32ArrList(m Float32ArrList, f func([]float32) UintptrOption) UintptrOptionList { acc := NilUintptrOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ArrList: []float32->ByteOption */ func MapByteOptionToFloat32ArrList(m Float32ArrList, f func([]float32) ByteOption) ByteOptionList { acc := NilByteOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ArrList: []float32->RuneOption */ func MapRuneOptionToFloat32ArrList(m Float32ArrList, f func([]float32) RuneOption) RuneOptionList { acc := NilRuneOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ArrList: []float32->Float32Option */ func MapFloat32OptionToFloat32ArrList(m Float32ArrList, f func([]float32) Float32Option) Float32OptionList { acc := NilFloat32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ArrList: []float32->Float64Option */ func MapFloat64OptionToFloat32ArrList(m Float32ArrList, f func([]float32) Float64Option) Float64OptionList { acc := NilFloat64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ArrList: []float32->Complex64Option */ func MapComplex64OptionToFloat32ArrList(m Float32ArrList, f func([]float32) Complex64Option) Complex64OptionList { acc := NilComplex64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ArrList: []float32->Complex128Option */ func MapComplex128OptionToFloat32ArrList(m Float32ArrList, f func([]float32) Complex128Option) Complex128OptionList { acc := NilComplex128OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ArrList: []float32->AnyOption */ func MapAnyOptionToFloat32ArrList(m Float32ArrList, f func([]float32) AnyOption) AnyOptionList { acc := NilAnyOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ArrList: []float32->[]bool */ func MapBoolArrToFloat32ArrList(m Float32ArrList, f func([]float32) []bool) BoolArrList { acc := NilBoolArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ArrList: []float32->[]string */ func MapStringArrToFloat32ArrList(m Float32ArrList, f func([]float32) []string) StringArrList { acc := NilStringArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ArrList: []float32->[]int */ func MapIntArrToFloat32ArrList(m Float32ArrList, f func([]float32) []int) IntArrList { acc := NilIntArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ArrList: []float32->[]int8 */ func MapInt8ArrToFloat32ArrList(m Float32ArrList, f func([]float32) []int8) Int8ArrList { acc := NilInt8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ArrList: []float32->[]int16 */ func MapInt16ArrToFloat32ArrList(m Float32ArrList, f func([]float32) []int16) Int16ArrList { acc := NilInt16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ArrList: []float32->[]int32 */ func MapInt32ArrToFloat32ArrList(m Float32ArrList, f func([]float32) []int32) Int32ArrList { acc := NilInt32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ArrList: []float32->[]int64 */ func MapInt64ArrToFloat32ArrList(m Float32ArrList, f func([]float32) []int64) Int64ArrList { acc := NilInt64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ArrList: []float32->[]uint */ func MapUintArrToFloat32ArrList(m Float32ArrList, f func([]float32) []uint) UintArrList { acc := NilUintArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ArrList: []float32->[]uint8 */ func MapUint8ArrToFloat32ArrList(m Float32ArrList, f func([]float32) []uint8) Uint8ArrList { acc := NilUint8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ArrList: []float32->[]uint16 */ func MapUint16ArrToFloat32ArrList(m Float32ArrList, f func([]float32) []uint16) Uint16ArrList { acc := NilUint16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ArrList: []float32->[]uint32 */ func MapUint32ArrToFloat32ArrList(m Float32ArrList, f func([]float32) []uint32) Uint32ArrList { acc := NilUint32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ArrList: []float32->[]uint64 */ func MapUint64ArrToFloat32ArrList(m Float32ArrList, f func([]float32) []uint64) Uint64ArrList { acc := NilUint64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ArrList: []float32->[]uintptr */ func MapUintptrArrToFloat32ArrList(m Float32ArrList, f func([]float32) []uintptr) UintptrArrList { acc := NilUintptrArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ArrList: []float32->[]byte */ func MapByteArrToFloat32ArrList(m Float32ArrList, f func([]float32) []byte) ByteArrList { acc := NilByteArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ArrList: []float32->[]rune */ func MapRuneArrToFloat32ArrList(m Float32ArrList, f func([]float32) []rune) RuneArrList { acc := NilRuneArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ArrList: []float32->[]float32 */ func MapFloat32ArrToFloat32ArrList(m Float32ArrList, f func([]float32) []float32) Float32ArrList { acc := NilFloat32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ArrList: []float32->[]float64 */ func MapFloat64ArrToFloat32ArrList(m Float32ArrList, f func([]float32) []float64) Float64ArrList { acc := NilFloat64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ArrList: []float32->[]complex64 */ func MapComplex64ArrToFloat32ArrList(m Float32ArrList, f func([]float32) []complex64) Complex64ArrList { acc := NilComplex64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ArrList: []float32->[]complex128 */ func MapComplex128ArrToFloat32ArrList(m Float32ArrList, f func([]float32) []complex128) Complex128ArrList { acc := NilComplex128ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ArrList: []float32->[]Any */ func MapAnyArrToFloat32ArrList(m Float32ArrList, f func([]float32) []Any) AnyArrList { acc := NilAnyArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ArrList: []float32->BoolList */ func MapBoolListToFloat32ArrList(m Float32ArrList, f func([]float32) BoolList) BoolListList { acc := NilBoolListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ArrList: []float32->StringList */ func MapStringListToFloat32ArrList(m Float32ArrList, f func([]float32) StringList) StringListList { acc := NilStringListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ArrList: []float32->IntList */ func MapIntListToFloat32ArrList(m Float32ArrList, f func([]float32) IntList) IntListList { acc := NilIntListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ArrList: []float32->Int8List */ func MapInt8ListToFloat32ArrList(m Float32ArrList, f func([]float32) Int8List) Int8ListList { acc := NilInt8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ArrList: []float32->Int16List */ func MapInt16ListToFloat32ArrList(m Float32ArrList, f func([]float32) Int16List) Int16ListList { acc := NilInt16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ArrList: []float32->Int32List */ func MapInt32ListToFloat32ArrList(m Float32ArrList, f func([]float32) Int32List) Int32ListList { acc := NilInt32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ArrList: []float32->Int64List */ func MapInt64ListToFloat32ArrList(m Float32ArrList, f func([]float32) Int64List) Int64ListList { acc := NilInt64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ArrList: []float32->UintList */ func MapUintListToFloat32ArrList(m Float32ArrList, f func([]float32) UintList) UintListList { acc := NilUintListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ArrList: []float32->Uint8List */ func MapUint8ListToFloat32ArrList(m Float32ArrList, f func([]float32) Uint8List) Uint8ListList { acc := NilUint8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ArrList: []float32->Uint16List */ func MapUint16ListToFloat32ArrList(m Float32ArrList, f func([]float32) Uint16List) Uint16ListList { acc := NilUint16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ArrList: []float32->Uint32List */ func MapUint32ListToFloat32ArrList(m Float32ArrList, f func([]float32) Uint32List) Uint32ListList { acc := NilUint32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ArrList: []float32->Uint64List */ func MapUint64ListToFloat32ArrList(m Float32ArrList, f func([]float32) Uint64List) Uint64ListList { acc := NilUint64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ArrList: []float32->UintptrList */ func MapUintptrListToFloat32ArrList(m Float32ArrList, f func([]float32) UintptrList) UintptrListList { acc := NilUintptrListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ArrList: []float32->ByteList */ func MapByteListToFloat32ArrList(m Float32ArrList, f func([]float32) ByteList) ByteListList { acc := NilByteListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ArrList: []float32->RuneList */ func MapRuneListToFloat32ArrList(m Float32ArrList, f func([]float32) RuneList) RuneListList { acc := NilRuneListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ArrList: []float32->Float32List */ func MapFloat32ListToFloat32ArrList(m Float32ArrList, f func([]float32) Float32List) Float32ListList { acc := NilFloat32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ArrList: []float32->Float64List */ func MapFloat64ListToFloat32ArrList(m Float32ArrList, f func([]float32) Float64List) Float64ListList { acc := NilFloat64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ArrList: []float32->Complex64List */ func MapComplex64ListToFloat32ArrList(m Float32ArrList, f func([]float32) Complex64List) Complex64ListList { acc := NilComplex64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ArrList: []float32->Complex128List */ func MapComplex128ListToFloat32ArrList(m Float32ArrList, f func([]float32) Complex128List) Complex128ListList { acc := NilComplex128ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ArrList: []float32->AnyList */ func MapAnyListToFloat32ArrList(m Float32ArrList, f func([]float32) AnyList) AnyListList { acc := NilAnyListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ArrList: []float64->bool */ func MapBoolToFloat64ArrList(m Float64ArrList, f func([]float64) bool) BoolList { acc := NilBoolList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ArrList: []float64->string */ func MapStringToFloat64ArrList(m Float64ArrList, f func([]float64) string) StringList { acc := NilStringList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ArrList: []float64->int */ func MapIntToFloat64ArrList(m Float64ArrList, f func([]float64) int) IntList { acc := NilIntList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ArrList: []float64->int8 */ func MapInt8ToFloat64ArrList(m Float64ArrList, f func([]float64) int8) Int8List { acc := NilInt8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ArrList: []float64->int16 */ func MapInt16ToFloat64ArrList(m Float64ArrList, f func([]float64) int16) Int16List { acc := NilInt16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ArrList: []float64->int32 */ func MapInt32ToFloat64ArrList(m Float64ArrList, f func([]float64) int32) Int32List { acc := NilInt32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ArrList: []float64->int64 */ func MapInt64ToFloat64ArrList(m Float64ArrList, f func([]float64) int64) Int64List { acc := NilInt64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ArrList: []float64->uint */ func MapUintToFloat64ArrList(m Float64ArrList, f func([]float64) uint) UintList { acc := NilUintList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ArrList: []float64->uint8 */ func MapUint8ToFloat64ArrList(m Float64ArrList, f func([]float64) uint8) Uint8List { acc := NilUint8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ArrList: []float64->uint16 */ func MapUint16ToFloat64ArrList(m Float64ArrList, f func([]float64) uint16) Uint16List { acc := NilUint16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ArrList: []float64->uint32 */ func MapUint32ToFloat64ArrList(m Float64ArrList, f func([]float64) uint32) Uint32List { acc := NilUint32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ArrList: []float64->uint64 */ func MapUint64ToFloat64ArrList(m Float64ArrList, f func([]float64) uint64) Uint64List { acc := NilUint64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ArrList: []float64->uintptr */ func MapUintptrToFloat64ArrList(m Float64ArrList, f func([]float64) uintptr) UintptrList { acc := NilUintptrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ArrList: []float64->byte */ func MapByteToFloat64ArrList(m Float64ArrList, f func([]float64) byte) ByteList { acc := NilByteList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ArrList: []float64->rune */ func MapRuneToFloat64ArrList(m Float64ArrList, f func([]float64) rune) RuneList { acc := NilRuneList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ArrList: []float64->float32 */ func MapFloat32ToFloat64ArrList(m Float64ArrList, f func([]float64) float32) Float32List { acc := NilFloat32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ArrList: []float64->float64 */ func MapFloat64ToFloat64ArrList(m Float64ArrList, f func([]float64) float64) Float64List { acc := NilFloat64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ArrList: []float64->complex64 */ func MapComplex64ToFloat64ArrList(m Float64ArrList, f func([]float64) complex64) Complex64List { acc := NilComplex64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ArrList: []float64->complex128 */ func MapComplex128ToFloat64ArrList(m Float64ArrList, f func([]float64) complex128) Complex128List { acc := NilComplex128List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ArrList: []float64->Any */ func MapAnyToFloat64ArrList(m Float64ArrList, f func([]float64) Any) AnyList { acc := NilAnyList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ArrList: []float64->BoolOption */ func MapBoolOptionToFloat64ArrList(m Float64ArrList, f func([]float64) BoolOption) BoolOptionList { acc := NilBoolOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ArrList: []float64->StringOption */ func MapStringOptionToFloat64ArrList(m Float64ArrList, f func([]float64) StringOption) StringOptionList { acc := NilStringOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ArrList: []float64->IntOption */ func MapIntOptionToFloat64ArrList(m Float64ArrList, f func([]float64) IntOption) IntOptionList { acc := NilIntOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ArrList: []float64->Int8Option */ func MapInt8OptionToFloat64ArrList(m Float64ArrList, f func([]float64) Int8Option) Int8OptionList { acc := NilInt8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ArrList: []float64->Int16Option */ func MapInt16OptionToFloat64ArrList(m Float64ArrList, f func([]float64) Int16Option) Int16OptionList { acc := NilInt16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ArrList: []float64->Int32Option */ func MapInt32OptionToFloat64ArrList(m Float64ArrList, f func([]float64) Int32Option) Int32OptionList { acc := NilInt32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ArrList: []float64->Int64Option */ func MapInt64OptionToFloat64ArrList(m Float64ArrList, f func([]float64) Int64Option) Int64OptionList { acc := NilInt64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ArrList: []float64->UintOption */ func MapUintOptionToFloat64ArrList(m Float64ArrList, f func([]float64) UintOption) UintOptionList { acc := NilUintOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ArrList: []float64->Uint8Option */ func MapUint8OptionToFloat64ArrList(m Float64ArrList, f func([]float64) Uint8Option) Uint8OptionList { acc := NilUint8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ArrList: []float64->Uint16Option */ func MapUint16OptionToFloat64ArrList(m Float64ArrList, f func([]float64) Uint16Option) Uint16OptionList { acc := NilUint16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ArrList: []float64->Uint32Option */ func MapUint32OptionToFloat64ArrList(m Float64ArrList, f func([]float64) Uint32Option) Uint32OptionList { acc := NilUint32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ArrList: []float64->Uint64Option */ func MapUint64OptionToFloat64ArrList(m Float64ArrList, f func([]float64) Uint64Option) Uint64OptionList { acc := NilUint64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ArrList: []float64->UintptrOption */ func MapUintptrOptionToFloat64ArrList(m Float64ArrList, f func([]float64) UintptrOption) UintptrOptionList { acc := NilUintptrOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ArrList: []float64->ByteOption */ func MapByteOptionToFloat64ArrList(m Float64ArrList, f func([]float64) ByteOption) ByteOptionList { acc := NilByteOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ArrList: []float64->RuneOption */ func MapRuneOptionToFloat64ArrList(m Float64ArrList, f func([]float64) RuneOption) RuneOptionList { acc := NilRuneOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ArrList: []float64->Float32Option */ func MapFloat32OptionToFloat64ArrList(m Float64ArrList, f func([]float64) Float32Option) Float32OptionList { acc := NilFloat32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ArrList: []float64->Float64Option */ func MapFloat64OptionToFloat64ArrList(m Float64ArrList, f func([]float64) Float64Option) Float64OptionList { acc := NilFloat64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ArrList: []float64->Complex64Option */ func MapComplex64OptionToFloat64ArrList(m Float64ArrList, f func([]float64) Complex64Option) Complex64OptionList { acc := NilComplex64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ArrList: []float64->Complex128Option */ func MapComplex128OptionToFloat64ArrList(m Float64ArrList, f func([]float64) Complex128Option) Complex128OptionList { acc := NilComplex128OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ArrList: []float64->AnyOption */ func MapAnyOptionToFloat64ArrList(m Float64ArrList, f func([]float64) AnyOption) AnyOptionList { acc := NilAnyOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ArrList: []float64->[]bool */ func MapBoolArrToFloat64ArrList(m Float64ArrList, f func([]float64) []bool) BoolArrList { acc := NilBoolArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ArrList: []float64->[]string */ func MapStringArrToFloat64ArrList(m Float64ArrList, f func([]float64) []string) StringArrList { acc := NilStringArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ArrList: []float64->[]int */ func MapIntArrToFloat64ArrList(m Float64ArrList, f func([]float64) []int) IntArrList { acc := NilIntArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ArrList: []float64->[]int8 */ func MapInt8ArrToFloat64ArrList(m Float64ArrList, f func([]float64) []int8) Int8ArrList { acc := NilInt8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ArrList: []float64->[]int16 */ func MapInt16ArrToFloat64ArrList(m Float64ArrList, f func([]float64) []int16) Int16ArrList { acc := NilInt16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ArrList: []float64->[]int32 */ func MapInt32ArrToFloat64ArrList(m Float64ArrList, f func([]float64) []int32) Int32ArrList { acc := NilInt32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ArrList: []float64->[]int64 */ func MapInt64ArrToFloat64ArrList(m Float64ArrList, f func([]float64) []int64) Int64ArrList { acc := NilInt64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ArrList: []float64->[]uint */ func MapUintArrToFloat64ArrList(m Float64ArrList, f func([]float64) []uint) UintArrList { acc := NilUintArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ArrList: []float64->[]uint8 */ func MapUint8ArrToFloat64ArrList(m Float64ArrList, f func([]float64) []uint8) Uint8ArrList { acc := NilUint8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ArrList: []float64->[]uint16 */ func MapUint16ArrToFloat64ArrList(m Float64ArrList, f func([]float64) []uint16) Uint16ArrList { acc := NilUint16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ArrList: []float64->[]uint32 */ func MapUint32ArrToFloat64ArrList(m Float64ArrList, f func([]float64) []uint32) Uint32ArrList { acc := NilUint32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ArrList: []float64->[]uint64 */ func MapUint64ArrToFloat64ArrList(m Float64ArrList, f func([]float64) []uint64) Uint64ArrList { acc := NilUint64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ArrList: []float64->[]uintptr */ func MapUintptrArrToFloat64ArrList(m Float64ArrList, f func([]float64) []uintptr) UintptrArrList { acc := NilUintptrArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ArrList: []float64->[]byte */ func MapByteArrToFloat64ArrList(m Float64ArrList, f func([]float64) []byte) ByteArrList { acc := NilByteArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ArrList: []float64->[]rune */ func MapRuneArrToFloat64ArrList(m Float64ArrList, f func([]float64) []rune) RuneArrList { acc := NilRuneArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ArrList: []float64->[]float32 */ func MapFloat32ArrToFloat64ArrList(m Float64ArrList, f func([]float64) []float32) Float32ArrList { acc := NilFloat32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ArrList: []float64->[]float64 */ func MapFloat64ArrToFloat64ArrList(m Float64ArrList, f func([]float64) []float64) Float64ArrList { acc := NilFloat64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ArrList: []float64->[]complex64 */ func MapComplex64ArrToFloat64ArrList(m Float64ArrList, f func([]float64) []complex64) Complex64ArrList { acc := NilComplex64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ArrList: []float64->[]complex128 */ func MapComplex128ArrToFloat64ArrList(m Float64ArrList, f func([]float64) []complex128) Complex128ArrList { acc := NilComplex128ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ArrList: []float64->[]Any */ func MapAnyArrToFloat64ArrList(m Float64ArrList, f func([]float64) []Any) AnyArrList { acc := NilAnyArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ArrList: []float64->BoolList */ func MapBoolListToFloat64ArrList(m Float64ArrList, f func([]float64) BoolList) BoolListList { acc := NilBoolListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ArrList: []float64->StringList */ func MapStringListToFloat64ArrList(m Float64ArrList, f func([]float64) StringList) StringListList { acc := NilStringListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ArrList: []float64->IntList */ func MapIntListToFloat64ArrList(m Float64ArrList, f func([]float64) IntList) IntListList { acc := NilIntListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ArrList: []float64->Int8List */ func MapInt8ListToFloat64ArrList(m Float64ArrList, f func([]float64) Int8List) Int8ListList { acc := NilInt8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ArrList: []float64->Int16List */ func MapInt16ListToFloat64ArrList(m Float64ArrList, f func([]float64) Int16List) Int16ListList { acc := NilInt16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ArrList: []float64->Int32List */ func MapInt32ListToFloat64ArrList(m Float64ArrList, f func([]float64) Int32List) Int32ListList { acc := NilInt32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ArrList: []float64->Int64List */ func MapInt64ListToFloat64ArrList(m Float64ArrList, f func([]float64) Int64List) Int64ListList { acc := NilInt64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ArrList: []float64->UintList */ func MapUintListToFloat64ArrList(m Float64ArrList, f func([]float64) UintList) UintListList { acc := NilUintListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ArrList: []float64->Uint8List */ func MapUint8ListToFloat64ArrList(m Float64ArrList, f func([]float64) Uint8List) Uint8ListList { acc := NilUint8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ArrList: []float64->Uint16List */ func MapUint16ListToFloat64ArrList(m Float64ArrList, f func([]float64) Uint16List) Uint16ListList { acc := NilUint16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ArrList: []float64->Uint32List */ func MapUint32ListToFloat64ArrList(m Float64ArrList, f func([]float64) Uint32List) Uint32ListList { acc := NilUint32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ArrList: []float64->Uint64List */ func MapUint64ListToFloat64ArrList(m Float64ArrList, f func([]float64) Uint64List) Uint64ListList { acc := NilUint64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ArrList: []float64->UintptrList */ func MapUintptrListToFloat64ArrList(m Float64ArrList, f func([]float64) UintptrList) UintptrListList { acc := NilUintptrListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ArrList: []float64->ByteList */ func MapByteListToFloat64ArrList(m Float64ArrList, f func([]float64) ByteList) ByteListList { acc := NilByteListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ArrList: []float64->RuneList */ func MapRuneListToFloat64ArrList(m Float64ArrList, f func([]float64) RuneList) RuneListList { acc := NilRuneListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ArrList: []float64->Float32List */ func MapFloat32ListToFloat64ArrList(m Float64ArrList, f func([]float64) Float32List) Float32ListList { acc := NilFloat32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ArrList: []float64->Float64List */ func MapFloat64ListToFloat64ArrList(m Float64ArrList, f func([]float64) Float64List) Float64ListList { acc := NilFloat64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ArrList: []float64->Complex64List */ func MapComplex64ListToFloat64ArrList(m Float64ArrList, f func([]float64) Complex64List) Complex64ListList { acc := NilComplex64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ArrList: []float64->Complex128List */ func MapComplex128ListToFloat64ArrList(m Float64ArrList, f func([]float64) Complex128List) Complex128ListList { acc := NilComplex128ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ArrList: []float64->AnyList */ func MapAnyListToFloat64ArrList(m Float64ArrList, f func([]float64) AnyList) AnyListList { acc := NilAnyListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ArrList: []complex64->bool */ func MapBoolToComplex64ArrList(m Complex64ArrList, f func([]complex64) bool) BoolList { acc := NilBoolList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ArrList: []complex64->string */ func MapStringToComplex64ArrList(m Complex64ArrList, f func([]complex64) string) StringList { acc := NilStringList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ArrList: []complex64->int */ func MapIntToComplex64ArrList(m Complex64ArrList, f func([]complex64) int) IntList { acc := NilIntList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ArrList: []complex64->int8 */ func MapInt8ToComplex64ArrList(m Complex64ArrList, f func([]complex64) int8) Int8List { acc := NilInt8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ArrList: []complex64->int16 */ func MapInt16ToComplex64ArrList(m Complex64ArrList, f func([]complex64) int16) Int16List { acc := NilInt16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ArrList: []complex64->int32 */ func MapInt32ToComplex64ArrList(m Complex64ArrList, f func([]complex64) int32) Int32List { acc := NilInt32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ArrList: []complex64->int64 */ func MapInt64ToComplex64ArrList(m Complex64ArrList, f func([]complex64) int64) Int64List { acc := NilInt64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ArrList: []complex64->uint */ func MapUintToComplex64ArrList(m Complex64ArrList, f func([]complex64) uint) UintList { acc := NilUintList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ArrList: []complex64->uint8 */ func MapUint8ToComplex64ArrList(m Complex64ArrList, f func([]complex64) uint8) Uint8List { acc := NilUint8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ArrList: []complex64->uint16 */ func MapUint16ToComplex64ArrList(m Complex64ArrList, f func([]complex64) uint16) Uint16List { acc := NilUint16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ArrList: []complex64->uint32 */ func MapUint32ToComplex64ArrList(m Complex64ArrList, f func([]complex64) uint32) Uint32List { acc := NilUint32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ArrList: []complex64->uint64 */ func MapUint64ToComplex64ArrList(m Complex64ArrList, f func([]complex64) uint64) Uint64List { acc := NilUint64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ArrList: []complex64->uintptr */ func MapUintptrToComplex64ArrList(m Complex64ArrList, f func([]complex64) uintptr) UintptrList { acc := NilUintptrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ArrList: []complex64->byte */ func MapByteToComplex64ArrList(m Complex64ArrList, f func([]complex64) byte) ByteList { acc := NilByteList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ArrList: []complex64->rune */ func MapRuneToComplex64ArrList(m Complex64ArrList, f func([]complex64) rune) RuneList { acc := NilRuneList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ArrList: []complex64->float32 */ func MapFloat32ToComplex64ArrList(m Complex64ArrList, f func([]complex64) float32) Float32List { acc := NilFloat32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ArrList: []complex64->float64 */ func MapFloat64ToComplex64ArrList(m Complex64ArrList, f func([]complex64) float64) Float64List { acc := NilFloat64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ArrList: []complex64->complex64 */ func MapComplex64ToComplex64ArrList(m Complex64ArrList, f func([]complex64) complex64) Complex64List { acc := NilComplex64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ArrList: []complex64->complex128 */ func MapComplex128ToComplex64ArrList(m Complex64ArrList, f func([]complex64) complex128) Complex128List { acc := NilComplex128List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ArrList: []complex64->Any */ func MapAnyToComplex64ArrList(m Complex64ArrList, f func([]complex64) Any) AnyList { acc := NilAnyList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ArrList: []complex64->BoolOption */ func MapBoolOptionToComplex64ArrList(m Complex64ArrList, f func([]complex64) BoolOption) BoolOptionList { acc := NilBoolOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ArrList: []complex64->StringOption */ func MapStringOptionToComplex64ArrList(m Complex64ArrList, f func([]complex64) StringOption) StringOptionList { acc := NilStringOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ArrList: []complex64->IntOption */ func MapIntOptionToComplex64ArrList(m Complex64ArrList, f func([]complex64) IntOption) IntOptionList { acc := NilIntOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ArrList: []complex64->Int8Option */ func MapInt8OptionToComplex64ArrList(m Complex64ArrList, f func([]complex64) Int8Option) Int8OptionList { acc := NilInt8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ArrList: []complex64->Int16Option */ func MapInt16OptionToComplex64ArrList(m Complex64ArrList, f func([]complex64) Int16Option) Int16OptionList { acc := NilInt16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ArrList: []complex64->Int32Option */ func MapInt32OptionToComplex64ArrList(m Complex64ArrList, f func([]complex64) Int32Option) Int32OptionList { acc := NilInt32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ArrList: []complex64->Int64Option */ func MapInt64OptionToComplex64ArrList(m Complex64ArrList, f func([]complex64) Int64Option) Int64OptionList { acc := NilInt64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ArrList: []complex64->UintOption */ func MapUintOptionToComplex64ArrList(m Complex64ArrList, f func([]complex64) UintOption) UintOptionList { acc := NilUintOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ArrList: []complex64->Uint8Option */ func MapUint8OptionToComplex64ArrList(m Complex64ArrList, f func([]complex64) Uint8Option) Uint8OptionList { acc := NilUint8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ArrList: []complex64->Uint16Option */ func MapUint16OptionToComplex64ArrList(m Complex64ArrList, f func([]complex64) Uint16Option) Uint16OptionList { acc := NilUint16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ArrList: []complex64->Uint32Option */ func MapUint32OptionToComplex64ArrList(m Complex64ArrList, f func([]complex64) Uint32Option) Uint32OptionList { acc := NilUint32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ArrList: []complex64->Uint64Option */ func MapUint64OptionToComplex64ArrList(m Complex64ArrList, f func([]complex64) Uint64Option) Uint64OptionList { acc := NilUint64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ArrList: []complex64->UintptrOption */ func MapUintptrOptionToComplex64ArrList(m Complex64ArrList, f func([]complex64) UintptrOption) UintptrOptionList { acc := NilUintptrOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ArrList: []complex64->ByteOption */ func MapByteOptionToComplex64ArrList(m Complex64ArrList, f func([]complex64) ByteOption) ByteOptionList { acc := NilByteOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ArrList: []complex64->RuneOption */ func MapRuneOptionToComplex64ArrList(m Complex64ArrList, f func([]complex64) RuneOption) RuneOptionList { acc := NilRuneOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ArrList: []complex64->Float32Option */ func MapFloat32OptionToComplex64ArrList(m Complex64ArrList, f func([]complex64) Float32Option) Float32OptionList { acc := NilFloat32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ArrList: []complex64->Float64Option */ func MapFloat64OptionToComplex64ArrList(m Complex64ArrList, f func([]complex64) Float64Option) Float64OptionList { acc := NilFloat64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ArrList: []complex64->Complex64Option */ func MapComplex64OptionToComplex64ArrList(m Complex64ArrList, f func([]complex64) Complex64Option) Complex64OptionList { acc := NilComplex64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ArrList: []complex64->Complex128Option */ func MapComplex128OptionToComplex64ArrList(m Complex64ArrList, f func([]complex64) Complex128Option) Complex128OptionList { acc := NilComplex128OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ArrList: []complex64->AnyOption */ func MapAnyOptionToComplex64ArrList(m Complex64ArrList, f func([]complex64) AnyOption) AnyOptionList { acc := NilAnyOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ArrList: []complex64->[]bool */ func MapBoolArrToComplex64ArrList(m Complex64ArrList, f func([]complex64) []bool) BoolArrList { acc := NilBoolArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ArrList: []complex64->[]string */ func MapStringArrToComplex64ArrList(m Complex64ArrList, f func([]complex64) []string) StringArrList { acc := NilStringArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ArrList: []complex64->[]int */ func MapIntArrToComplex64ArrList(m Complex64ArrList, f func([]complex64) []int) IntArrList { acc := NilIntArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ArrList: []complex64->[]int8 */ func MapInt8ArrToComplex64ArrList(m Complex64ArrList, f func([]complex64) []int8) Int8ArrList { acc := NilInt8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ArrList: []complex64->[]int16 */ func MapInt16ArrToComplex64ArrList(m Complex64ArrList, f func([]complex64) []int16) Int16ArrList { acc := NilInt16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ArrList: []complex64->[]int32 */ func MapInt32ArrToComplex64ArrList(m Complex64ArrList, f func([]complex64) []int32) Int32ArrList { acc := NilInt32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ArrList: []complex64->[]int64 */ func MapInt64ArrToComplex64ArrList(m Complex64ArrList, f func([]complex64) []int64) Int64ArrList { acc := NilInt64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ArrList: []complex64->[]uint */ func MapUintArrToComplex64ArrList(m Complex64ArrList, f func([]complex64) []uint) UintArrList { acc := NilUintArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ArrList: []complex64->[]uint8 */ func MapUint8ArrToComplex64ArrList(m Complex64ArrList, f func([]complex64) []uint8) Uint8ArrList { acc := NilUint8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ArrList: []complex64->[]uint16 */ func MapUint16ArrToComplex64ArrList(m Complex64ArrList, f func([]complex64) []uint16) Uint16ArrList { acc := NilUint16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ArrList: []complex64->[]uint32 */ func MapUint32ArrToComplex64ArrList(m Complex64ArrList, f func([]complex64) []uint32) Uint32ArrList { acc := NilUint32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ArrList: []complex64->[]uint64 */ func MapUint64ArrToComplex64ArrList(m Complex64ArrList, f func([]complex64) []uint64) Uint64ArrList { acc := NilUint64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ArrList: []complex64->[]uintptr */ func MapUintptrArrToComplex64ArrList(m Complex64ArrList, f func([]complex64) []uintptr) UintptrArrList { acc := NilUintptrArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ArrList: []complex64->[]byte */ func MapByteArrToComplex64ArrList(m Complex64ArrList, f func([]complex64) []byte) ByteArrList { acc := NilByteArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ArrList: []complex64->[]rune */ func MapRuneArrToComplex64ArrList(m Complex64ArrList, f func([]complex64) []rune) RuneArrList { acc := NilRuneArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ArrList: []complex64->[]float32 */ func MapFloat32ArrToComplex64ArrList(m Complex64ArrList, f func([]complex64) []float32) Float32ArrList { acc := NilFloat32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ArrList: []complex64->[]float64 */ func MapFloat64ArrToComplex64ArrList(m Complex64ArrList, f func([]complex64) []float64) Float64ArrList { acc := NilFloat64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ArrList: []complex64->[]complex64 */ func MapComplex64ArrToComplex64ArrList(m Complex64ArrList, f func([]complex64) []complex64) Complex64ArrList { acc := NilComplex64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ArrList: []complex64->[]complex128 */ func MapComplex128ArrToComplex64ArrList(m Complex64ArrList, f func([]complex64) []complex128) Complex128ArrList { acc := NilComplex128ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ArrList: []complex64->[]Any */ func MapAnyArrToComplex64ArrList(m Complex64ArrList, f func([]complex64) []Any) AnyArrList { acc := NilAnyArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ArrList: []complex64->BoolList */ func MapBoolListToComplex64ArrList(m Complex64ArrList, f func([]complex64) BoolList) BoolListList { acc := NilBoolListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ArrList: []complex64->StringList */ func MapStringListToComplex64ArrList(m Complex64ArrList, f func([]complex64) StringList) StringListList { acc := NilStringListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ArrList: []complex64->IntList */ func MapIntListToComplex64ArrList(m Complex64ArrList, f func([]complex64) IntList) IntListList { acc := NilIntListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ArrList: []complex64->Int8List */ func MapInt8ListToComplex64ArrList(m Complex64ArrList, f func([]complex64) Int8List) Int8ListList { acc := NilInt8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ArrList: []complex64->Int16List */ func MapInt16ListToComplex64ArrList(m Complex64ArrList, f func([]complex64) Int16List) Int16ListList { acc := NilInt16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ArrList: []complex64->Int32List */ func MapInt32ListToComplex64ArrList(m Complex64ArrList, f func([]complex64) Int32List) Int32ListList { acc := NilInt32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ArrList: []complex64->Int64List */ func MapInt64ListToComplex64ArrList(m Complex64ArrList, f func([]complex64) Int64List) Int64ListList { acc := NilInt64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ArrList: []complex64->UintList */ func MapUintListToComplex64ArrList(m Complex64ArrList, f func([]complex64) UintList) UintListList { acc := NilUintListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ArrList: []complex64->Uint8List */ func MapUint8ListToComplex64ArrList(m Complex64ArrList, f func([]complex64) Uint8List) Uint8ListList { acc := NilUint8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ArrList: []complex64->Uint16List */ func MapUint16ListToComplex64ArrList(m Complex64ArrList, f func([]complex64) Uint16List) Uint16ListList { acc := NilUint16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ArrList: []complex64->Uint32List */ func MapUint32ListToComplex64ArrList(m Complex64ArrList, f func([]complex64) Uint32List) Uint32ListList { acc := NilUint32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ArrList: []complex64->Uint64List */ func MapUint64ListToComplex64ArrList(m Complex64ArrList, f func([]complex64) Uint64List) Uint64ListList { acc := NilUint64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ArrList: []complex64->UintptrList */ func MapUintptrListToComplex64ArrList(m Complex64ArrList, f func([]complex64) UintptrList) UintptrListList { acc := NilUintptrListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ArrList: []complex64->ByteList */ func MapByteListToComplex64ArrList(m Complex64ArrList, f func([]complex64) ByteList) ByteListList { acc := NilByteListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ArrList: []complex64->RuneList */ func MapRuneListToComplex64ArrList(m Complex64ArrList, f func([]complex64) RuneList) RuneListList { acc := NilRuneListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ArrList: []complex64->Float32List */ func MapFloat32ListToComplex64ArrList(m Complex64ArrList, f func([]complex64) Float32List) Float32ListList { acc := NilFloat32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ArrList: []complex64->Float64List */ func MapFloat64ListToComplex64ArrList(m Complex64ArrList, f func([]complex64) Float64List) Float64ListList { acc := NilFloat64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ArrList: []complex64->Complex64List */ func MapComplex64ListToComplex64ArrList(m Complex64ArrList, f func([]complex64) Complex64List) Complex64ListList { acc := NilComplex64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ArrList: []complex64->Complex128List */ func MapComplex128ListToComplex64ArrList(m Complex64ArrList, f func([]complex64) Complex128List) Complex128ListList { acc := NilComplex128ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ArrList: []complex64->AnyList */ func MapAnyListToComplex64ArrList(m Complex64ArrList, f func([]complex64) AnyList) AnyListList { acc := NilAnyListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ArrList: []complex128->bool */ func MapBoolToComplex128ArrList(m Complex128ArrList, f func([]complex128) bool) BoolList { acc := NilBoolList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ArrList: []complex128->string */ func MapStringToComplex128ArrList(m Complex128ArrList, f func([]complex128) string) StringList { acc := NilStringList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ArrList: []complex128->int */ func MapIntToComplex128ArrList(m Complex128ArrList, f func([]complex128) int) IntList { acc := NilIntList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ArrList: []complex128->int8 */ func MapInt8ToComplex128ArrList(m Complex128ArrList, f func([]complex128) int8) Int8List { acc := NilInt8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ArrList: []complex128->int16 */ func MapInt16ToComplex128ArrList(m Complex128ArrList, f func([]complex128) int16) Int16List { acc := NilInt16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ArrList: []complex128->int32 */ func MapInt32ToComplex128ArrList(m Complex128ArrList, f func([]complex128) int32) Int32List { acc := NilInt32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ArrList: []complex128->int64 */ func MapInt64ToComplex128ArrList(m Complex128ArrList, f func([]complex128) int64) Int64List { acc := NilInt64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ArrList: []complex128->uint */ func MapUintToComplex128ArrList(m Complex128ArrList, f func([]complex128) uint) UintList { acc := NilUintList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ArrList: []complex128->uint8 */ func MapUint8ToComplex128ArrList(m Complex128ArrList, f func([]complex128) uint8) Uint8List { acc := NilUint8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ArrList: []complex128->uint16 */ func MapUint16ToComplex128ArrList(m Complex128ArrList, f func([]complex128) uint16) Uint16List { acc := NilUint16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ArrList: []complex128->uint32 */ func MapUint32ToComplex128ArrList(m Complex128ArrList, f func([]complex128) uint32) Uint32List { acc := NilUint32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ArrList: []complex128->uint64 */ func MapUint64ToComplex128ArrList(m Complex128ArrList, f func([]complex128) uint64) Uint64List { acc := NilUint64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ArrList: []complex128->uintptr */ func MapUintptrToComplex128ArrList(m Complex128ArrList, f func([]complex128) uintptr) UintptrList { acc := NilUintptrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ArrList: []complex128->byte */ func MapByteToComplex128ArrList(m Complex128ArrList, f func([]complex128) byte) ByteList { acc := NilByteList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ArrList: []complex128->rune */ func MapRuneToComplex128ArrList(m Complex128ArrList, f func([]complex128) rune) RuneList { acc := NilRuneList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ArrList: []complex128->float32 */ func MapFloat32ToComplex128ArrList(m Complex128ArrList, f func([]complex128) float32) Float32List { acc := NilFloat32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ArrList: []complex128->float64 */ func MapFloat64ToComplex128ArrList(m Complex128ArrList, f func([]complex128) float64) Float64List { acc := NilFloat64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ArrList: []complex128->complex64 */ func MapComplex64ToComplex128ArrList(m Complex128ArrList, f func([]complex128) complex64) Complex64List { acc := NilComplex64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ArrList: []complex128->complex128 */ func MapComplex128ToComplex128ArrList(m Complex128ArrList, f func([]complex128) complex128) Complex128List { acc := NilComplex128List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ArrList: []complex128->Any */ func MapAnyToComplex128ArrList(m Complex128ArrList, f func([]complex128) Any) AnyList { acc := NilAnyList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ArrList: []complex128->BoolOption */ func MapBoolOptionToComplex128ArrList(m Complex128ArrList, f func([]complex128) BoolOption) BoolOptionList { acc := NilBoolOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ArrList: []complex128->StringOption */ func MapStringOptionToComplex128ArrList(m Complex128ArrList, f func([]complex128) StringOption) StringOptionList { acc := NilStringOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ArrList: []complex128->IntOption */ func MapIntOptionToComplex128ArrList(m Complex128ArrList, f func([]complex128) IntOption) IntOptionList { acc := NilIntOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ArrList: []complex128->Int8Option */ func MapInt8OptionToComplex128ArrList(m Complex128ArrList, f func([]complex128) Int8Option) Int8OptionList { acc := NilInt8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ArrList: []complex128->Int16Option */ func MapInt16OptionToComplex128ArrList(m Complex128ArrList, f func([]complex128) Int16Option) Int16OptionList { acc := NilInt16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ArrList: []complex128->Int32Option */ func MapInt32OptionToComplex128ArrList(m Complex128ArrList, f func([]complex128) Int32Option) Int32OptionList { acc := NilInt32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ArrList: []complex128->Int64Option */ func MapInt64OptionToComplex128ArrList(m Complex128ArrList, f func([]complex128) Int64Option) Int64OptionList { acc := NilInt64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ArrList: []complex128->UintOption */ func MapUintOptionToComplex128ArrList(m Complex128ArrList, f func([]complex128) UintOption) UintOptionList { acc := NilUintOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ArrList: []complex128->Uint8Option */ func MapUint8OptionToComplex128ArrList(m Complex128ArrList, f func([]complex128) Uint8Option) Uint8OptionList { acc := NilUint8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ArrList: []complex128->Uint16Option */ func MapUint16OptionToComplex128ArrList(m Complex128ArrList, f func([]complex128) Uint16Option) Uint16OptionList { acc := NilUint16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ArrList: []complex128->Uint32Option */ func MapUint32OptionToComplex128ArrList(m Complex128ArrList, f func([]complex128) Uint32Option) Uint32OptionList { acc := NilUint32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ArrList: []complex128->Uint64Option */ func MapUint64OptionToComplex128ArrList(m Complex128ArrList, f func([]complex128) Uint64Option) Uint64OptionList { acc := NilUint64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ArrList: []complex128->UintptrOption */ func MapUintptrOptionToComplex128ArrList(m Complex128ArrList, f func([]complex128) UintptrOption) UintptrOptionList { acc := NilUintptrOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ArrList: []complex128->ByteOption */ func MapByteOptionToComplex128ArrList(m Complex128ArrList, f func([]complex128) ByteOption) ByteOptionList { acc := NilByteOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ArrList: []complex128->RuneOption */ func MapRuneOptionToComplex128ArrList(m Complex128ArrList, f func([]complex128) RuneOption) RuneOptionList { acc := NilRuneOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ArrList: []complex128->Float32Option */ func MapFloat32OptionToComplex128ArrList(m Complex128ArrList, f func([]complex128) Float32Option) Float32OptionList { acc := NilFloat32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ArrList: []complex128->Float64Option */ func MapFloat64OptionToComplex128ArrList(m Complex128ArrList, f func([]complex128) Float64Option) Float64OptionList { acc := NilFloat64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ArrList: []complex128->Complex64Option */ func MapComplex64OptionToComplex128ArrList(m Complex128ArrList, f func([]complex128) Complex64Option) Complex64OptionList { acc := NilComplex64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ArrList: []complex128->Complex128Option */ func MapComplex128OptionToComplex128ArrList(m Complex128ArrList, f func([]complex128) Complex128Option) Complex128OptionList { acc := NilComplex128OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ArrList: []complex128->AnyOption */ func MapAnyOptionToComplex128ArrList(m Complex128ArrList, f func([]complex128) AnyOption) AnyOptionList { acc := NilAnyOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ArrList: []complex128->[]bool */ func MapBoolArrToComplex128ArrList(m Complex128ArrList, f func([]complex128) []bool) BoolArrList { acc := NilBoolArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ArrList: []complex128->[]string */ func MapStringArrToComplex128ArrList(m Complex128ArrList, f func([]complex128) []string) StringArrList { acc := NilStringArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ArrList: []complex128->[]int */ func MapIntArrToComplex128ArrList(m Complex128ArrList, f func([]complex128) []int) IntArrList { acc := NilIntArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ArrList: []complex128->[]int8 */ func MapInt8ArrToComplex128ArrList(m Complex128ArrList, f func([]complex128) []int8) Int8ArrList { acc := NilInt8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ArrList: []complex128->[]int16 */ func MapInt16ArrToComplex128ArrList(m Complex128ArrList, f func([]complex128) []int16) Int16ArrList { acc := NilInt16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ArrList: []complex128->[]int32 */ func MapInt32ArrToComplex128ArrList(m Complex128ArrList, f func([]complex128) []int32) Int32ArrList { acc := NilInt32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ArrList: []complex128->[]int64 */ func MapInt64ArrToComplex128ArrList(m Complex128ArrList, f func([]complex128) []int64) Int64ArrList { acc := NilInt64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ArrList: []complex128->[]uint */ func MapUintArrToComplex128ArrList(m Complex128ArrList, f func([]complex128) []uint) UintArrList { acc := NilUintArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ArrList: []complex128->[]uint8 */ func MapUint8ArrToComplex128ArrList(m Complex128ArrList, f func([]complex128) []uint8) Uint8ArrList { acc := NilUint8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ArrList: []complex128->[]uint16 */ func MapUint16ArrToComplex128ArrList(m Complex128ArrList, f func([]complex128) []uint16) Uint16ArrList { acc := NilUint16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ArrList: []complex128->[]uint32 */ func MapUint32ArrToComplex128ArrList(m Complex128ArrList, f func([]complex128) []uint32) Uint32ArrList { acc := NilUint32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ArrList: []complex128->[]uint64 */ func MapUint64ArrToComplex128ArrList(m Complex128ArrList, f func([]complex128) []uint64) Uint64ArrList { acc := NilUint64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ArrList: []complex128->[]uintptr */ func MapUintptrArrToComplex128ArrList(m Complex128ArrList, f func([]complex128) []uintptr) UintptrArrList { acc := NilUintptrArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ArrList: []complex128->[]byte */ func MapByteArrToComplex128ArrList(m Complex128ArrList, f func([]complex128) []byte) ByteArrList { acc := NilByteArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ArrList: []complex128->[]rune */ func MapRuneArrToComplex128ArrList(m Complex128ArrList, f func([]complex128) []rune) RuneArrList { acc := NilRuneArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ArrList: []complex128->[]float32 */ func MapFloat32ArrToComplex128ArrList(m Complex128ArrList, f func([]complex128) []float32) Float32ArrList { acc := NilFloat32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ArrList: []complex128->[]float64 */ func MapFloat64ArrToComplex128ArrList(m Complex128ArrList, f func([]complex128) []float64) Float64ArrList { acc := NilFloat64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ArrList: []complex128->[]complex64 */ func MapComplex64ArrToComplex128ArrList(m Complex128ArrList, f func([]complex128) []complex64) Complex64ArrList { acc := NilComplex64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ArrList: []complex128->[]complex128 */ func MapComplex128ArrToComplex128ArrList(m Complex128ArrList, f func([]complex128) []complex128) Complex128ArrList { acc := NilComplex128ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ArrList: []complex128->[]Any */ func MapAnyArrToComplex128ArrList(m Complex128ArrList, f func([]complex128) []Any) AnyArrList { acc := NilAnyArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ArrList: []complex128->BoolList */ func MapBoolListToComplex128ArrList(m Complex128ArrList, f func([]complex128) BoolList) BoolListList { acc := NilBoolListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ArrList: []complex128->StringList */ func MapStringListToComplex128ArrList(m Complex128ArrList, f func([]complex128) StringList) StringListList { acc := NilStringListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ArrList: []complex128->IntList */ func MapIntListToComplex128ArrList(m Complex128ArrList, f func([]complex128) IntList) IntListList { acc := NilIntListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ArrList: []complex128->Int8List */ func MapInt8ListToComplex128ArrList(m Complex128ArrList, f func([]complex128) Int8List) Int8ListList { acc := NilInt8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ArrList: []complex128->Int16List */ func MapInt16ListToComplex128ArrList(m Complex128ArrList, f func([]complex128) Int16List) Int16ListList { acc := NilInt16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ArrList: []complex128->Int32List */ func MapInt32ListToComplex128ArrList(m Complex128ArrList, f func([]complex128) Int32List) Int32ListList { acc := NilInt32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ArrList: []complex128->Int64List */ func MapInt64ListToComplex128ArrList(m Complex128ArrList, f func([]complex128) Int64List) Int64ListList { acc := NilInt64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ArrList: []complex128->UintList */ func MapUintListToComplex128ArrList(m Complex128ArrList, f func([]complex128) UintList) UintListList { acc := NilUintListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ArrList: []complex128->Uint8List */ func MapUint8ListToComplex128ArrList(m Complex128ArrList, f func([]complex128) Uint8List) Uint8ListList { acc := NilUint8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ArrList: []complex128->Uint16List */ func MapUint16ListToComplex128ArrList(m Complex128ArrList, f func([]complex128) Uint16List) Uint16ListList { acc := NilUint16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ArrList: []complex128->Uint32List */ func MapUint32ListToComplex128ArrList(m Complex128ArrList, f func([]complex128) Uint32List) Uint32ListList { acc := NilUint32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ArrList: []complex128->Uint64List */ func MapUint64ListToComplex128ArrList(m Complex128ArrList, f func([]complex128) Uint64List) Uint64ListList { acc := NilUint64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ArrList: []complex128->UintptrList */ func MapUintptrListToComplex128ArrList(m Complex128ArrList, f func([]complex128) UintptrList) UintptrListList { acc := NilUintptrListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ArrList: []complex128->ByteList */ func MapByteListToComplex128ArrList(m Complex128ArrList, f func([]complex128) ByteList) ByteListList { acc := NilByteListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ArrList: []complex128->RuneList */ func MapRuneListToComplex128ArrList(m Complex128ArrList, f func([]complex128) RuneList) RuneListList { acc := NilRuneListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ArrList: []complex128->Float32List */ func MapFloat32ListToComplex128ArrList(m Complex128ArrList, f func([]complex128) Float32List) Float32ListList { acc := NilFloat32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ArrList: []complex128->Float64List */ func MapFloat64ListToComplex128ArrList(m Complex128ArrList, f func([]complex128) Float64List) Float64ListList { acc := NilFloat64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ArrList: []complex128->Complex64List */ func MapComplex64ListToComplex128ArrList(m Complex128ArrList, f func([]complex128) Complex64List) Complex64ListList { acc := NilComplex64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ArrList: []complex128->Complex128List */ func MapComplex128ListToComplex128ArrList(m Complex128ArrList, f func([]complex128) Complex128List) Complex128ListList { acc := NilComplex128ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ArrList: []complex128->AnyList */ func MapAnyListToComplex128ArrList(m Complex128ArrList, f func([]complex128) AnyList) AnyListList { acc := NilAnyListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyArrList: []Any->bool */ func MapBoolToAnyArrList(m AnyArrList, f func([]Any) bool) BoolList { acc := NilBoolList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyArrList: []Any->string */ func MapStringToAnyArrList(m AnyArrList, f func([]Any) string) StringList { acc := NilStringList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyArrList: []Any->int */ func MapIntToAnyArrList(m AnyArrList, f func([]Any) int) IntList { acc := NilIntList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyArrList: []Any->int8 */ func MapInt8ToAnyArrList(m AnyArrList, f func([]Any) int8) Int8List { acc := NilInt8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyArrList: []Any->int16 */ func MapInt16ToAnyArrList(m AnyArrList, f func([]Any) int16) Int16List { acc := NilInt16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyArrList: []Any->int32 */ func MapInt32ToAnyArrList(m AnyArrList, f func([]Any) int32) Int32List { acc := NilInt32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyArrList: []Any->int64 */ func MapInt64ToAnyArrList(m AnyArrList, f func([]Any) int64) Int64List { acc := NilInt64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyArrList: []Any->uint */ func MapUintToAnyArrList(m AnyArrList, f func([]Any) uint) UintList { acc := NilUintList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyArrList: []Any->uint8 */ func MapUint8ToAnyArrList(m AnyArrList, f func([]Any) uint8) Uint8List { acc := NilUint8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyArrList: []Any->uint16 */ func MapUint16ToAnyArrList(m AnyArrList, f func([]Any) uint16) Uint16List { acc := NilUint16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyArrList: []Any->uint32 */ func MapUint32ToAnyArrList(m AnyArrList, f func([]Any) uint32) Uint32List { acc := NilUint32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyArrList: []Any->uint64 */ func MapUint64ToAnyArrList(m AnyArrList, f func([]Any) uint64) Uint64List { acc := NilUint64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyArrList: []Any->uintptr */ func MapUintptrToAnyArrList(m AnyArrList, f func([]Any) uintptr) UintptrList { acc := NilUintptrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyArrList: []Any->byte */ func MapByteToAnyArrList(m AnyArrList, f func([]Any) byte) ByteList { acc := NilByteList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyArrList: []Any->rune */ func MapRuneToAnyArrList(m AnyArrList, f func([]Any) rune) RuneList { acc := NilRuneList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyArrList: []Any->float32 */ func MapFloat32ToAnyArrList(m AnyArrList, f func([]Any) float32) Float32List { acc := NilFloat32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyArrList: []Any->float64 */ func MapFloat64ToAnyArrList(m AnyArrList, f func([]Any) float64) Float64List { acc := NilFloat64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyArrList: []Any->complex64 */ func MapComplex64ToAnyArrList(m AnyArrList, f func([]Any) complex64) Complex64List { acc := NilComplex64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyArrList: []Any->complex128 */ func MapComplex128ToAnyArrList(m AnyArrList, f func([]Any) complex128) Complex128List { acc := NilComplex128List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyArrList: []Any->Any */ func MapAnyToAnyArrList(m AnyArrList, f func([]Any) Any) AnyList { acc := NilAnyList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyArrList: []Any->BoolOption */ func MapBoolOptionToAnyArrList(m AnyArrList, f func([]Any) BoolOption) BoolOptionList { acc := NilBoolOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyArrList: []Any->StringOption */ func MapStringOptionToAnyArrList(m AnyArrList, f func([]Any) StringOption) StringOptionList { acc := NilStringOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyArrList: []Any->IntOption */ func MapIntOptionToAnyArrList(m AnyArrList, f func([]Any) IntOption) IntOptionList { acc := NilIntOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyArrList: []Any->Int8Option */ func MapInt8OptionToAnyArrList(m AnyArrList, f func([]Any) Int8Option) Int8OptionList { acc := NilInt8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyArrList: []Any->Int16Option */ func MapInt16OptionToAnyArrList(m AnyArrList, f func([]Any) Int16Option) Int16OptionList { acc := NilInt16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyArrList: []Any->Int32Option */ func MapInt32OptionToAnyArrList(m AnyArrList, f func([]Any) Int32Option) Int32OptionList { acc := NilInt32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyArrList: []Any->Int64Option */ func MapInt64OptionToAnyArrList(m AnyArrList, f func([]Any) Int64Option) Int64OptionList { acc := NilInt64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyArrList: []Any->UintOption */ func MapUintOptionToAnyArrList(m AnyArrList, f func([]Any) UintOption) UintOptionList { acc := NilUintOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyArrList: []Any->Uint8Option */ func MapUint8OptionToAnyArrList(m AnyArrList, f func([]Any) Uint8Option) Uint8OptionList { acc := NilUint8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyArrList: []Any->Uint16Option */ func MapUint16OptionToAnyArrList(m AnyArrList, f func([]Any) Uint16Option) Uint16OptionList { acc := NilUint16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyArrList: []Any->Uint32Option */ func MapUint32OptionToAnyArrList(m AnyArrList, f func([]Any) Uint32Option) Uint32OptionList { acc := NilUint32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyArrList: []Any->Uint64Option */ func MapUint64OptionToAnyArrList(m AnyArrList, f func([]Any) Uint64Option) Uint64OptionList { acc := NilUint64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyArrList: []Any->UintptrOption */ func MapUintptrOptionToAnyArrList(m AnyArrList, f func([]Any) UintptrOption) UintptrOptionList { acc := NilUintptrOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyArrList: []Any->ByteOption */ func MapByteOptionToAnyArrList(m AnyArrList, f func([]Any) ByteOption) ByteOptionList { acc := NilByteOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyArrList: []Any->RuneOption */ func MapRuneOptionToAnyArrList(m AnyArrList, f func([]Any) RuneOption) RuneOptionList { acc := NilRuneOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyArrList: []Any->Float32Option */ func MapFloat32OptionToAnyArrList(m AnyArrList, f func([]Any) Float32Option) Float32OptionList { acc := NilFloat32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyArrList: []Any->Float64Option */ func MapFloat64OptionToAnyArrList(m AnyArrList, f func([]Any) Float64Option) Float64OptionList { acc := NilFloat64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyArrList: []Any->Complex64Option */ func MapComplex64OptionToAnyArrList(m AnyArrList, f func([]Any) Complex64Option) Complex64OptionList { acc := NilComplex64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyArrList: []Any->Complex128Option */ func MapComplex128OptionToAnyArrList(m AnyArrList, f func([]Any) Complex128Option) Complex128OptionList { acc := NilComplex128OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyArrList: []Any->AnyOption */ func MapAnyOptionToAnyArrList(m AnyArrList, f func([]Any) AnyOption) AnyOptionList { acc := NilAnyOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyArrList: []Any->[]bool */ func MapBoolArrToAnyArrList(m AnyArrList, f func([]Any) []bool) BoolArrList { acc := NilBoolArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyArrList: []Any->[]string */ func MapStringArrToAnyArrList(m AnyArrList, f func([]Any) []string) StringArrList { acc := NilStringArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyArrList: []Any->[]int */ func MapIntArrToAnyArrList(m AnyArrList, f func([]Any) []int) IntArrList { acc := NilIntArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyArrList: []Any->[]int8 */ func MapInt8ArrToAnyArrList(m AnyArrList, f func([]Any) []int8) Int8ArrList { acc := NilInt8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyArrList: []Any->[]int16 */ func MapInt16ArrToAnyArrList(m AnyArrList, f func([]Any) []int16) Int16ArrList { acc := NilInt16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyArrList: []Any->[]int32 */ func MapInt32ArrToAnyArrList(m AnyArrList, f func([]Any) []int32) Int32ArrList { acc := NilInt32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyArrList: []Any->[]int64 */ func MapInt64ArrToAnyArrList(m AnyArrList, f func([]Any) []int64) Int64ArrList { acc := NilInt64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyArrList: []Any->[]uint */ func MapUintArrToAnyArrList(m AnyArrList, f func([]Any) []uint) UintArrList { acc := NilUintArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyArrList: []Any->[]uint8 */ func MapUint8ArrToAnyArrList(m AnyArrList, f func([]Any) []uint8) Uint8ArrList { acc := NilUint8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyArrList: []Any->[]uint16 */ func MapUint16ArrToAnyArrList(m AnyArrList, f func([]Any) []uint16) Uint16ArrList { acc := NilUint16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyArrList: []Any->[]uint32 */ func MapUint32ArrToAnyArrList(m AnyArrList, f func([]Any) []uint32) Uint32ArrList { acc := NilUint32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyArrList: []Any->[]uint64 */ func MapUint64ArrToAnyArrList(m AnyArrList, f func([]Any) []uint64) Uint64ArrList { acc := NilUint64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyArrList: []Any->[]uintptr */ func MapUintptrArrToAnyArrList(m AnyArrList, f func([]Any) []uintptr) UintptrArrList { acc := NilUintptrArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyArrList: []Any->[]byte */ func MapByteArrToAnyArrList(m AnyArrList, f func([]Any) []byte) ByteArrList { acc := NilByteArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyArrList: []Any->[]rune */ func MapRuneArrToAnyArrList(m AnyArrList, f func([]Any) []rune) RuneArrList { acc := NilRuneArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyArrList: []Any->[]float32 */ func MapFloat32ArrToAnyArrList(m AnyArrList, f func([]Any) []float32) Float32ArrList { acc := NilFloat32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyArrList: []Any->[]float64 */ func MapFloat64ArrToAnyArrList(m AnyArrList, f func([]Any) []float64) Float64ArrList { acc := NilFloat64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyArrList: []Any->[]complex64 */ func MapComplex64ArrToAnyArrList(m AnyArrList, f func([]Any) []complex64) Complex64ArrList { acc := NilComplex64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyArrList: []Any->[]complex128 */ func MapComplex128ArrToAnyArrList(m AnyArrList, f func([]Any) []complex128) Complex128ArrList { acc := NilComplex128ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyArrList: []Any->[]Any */ func MapAnyArrToAnyArrList(m AnyArrList, f func([]Any) []Any) AnyArrList { acc := NilAnyArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyArrList: []Any->BoolList */ func MapBoolListToAnyArrList(m AnyArrList, f func([]Any) BoolList) BoolListList { acc := NilBoolListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyArrList: []Any->StringList */ func MapStringListToAnyArrList(m AnyArrList, f func([]Any) StringList) StringListList { acc := NilStringListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyArrList: []Any->IntList */ func MapIntListToAnyArrList(m AnyArrList, f func([]Any) IntList) IntListList { acc := NilIntListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyArrList: []Any->Int8List */ func MapInt8ListToAnyArrList(m AnyArrList, f func([]Any) Int8List) Int8ListList { acc := NilInt8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyArrList: []Any->Int16List */ func MapInt16ListToAnyArrList(m AnyArrList, f func([]Any) Int16List) Int16ListList { acc := NilInt16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyArrList: []Any->Int32List */ func MapInt32ListToAnyArrList(m AnyArrList, f func([]Any) Int32List) Int32ListList { acc := NilInt32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyArrList: []Any->Int64List */ func MapInt64ListToAnyArrList(m AnyArrList, f func([]Any) Int64List) Int64ListList { acc := NilInt64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyArrList: []Any->UintList */ func MapUintListToAnyArrList(m AnyArrList, f func([]Any) UintList) UintListList { acc := NilUintListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyArrList: []Any->Uint8List */ func MapUint8ListToAnyArrList(m AnyArrList, f func([]Any) Uint8List) Uint8ListList { acc := NilUint8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyArrList: []Any->Uint16List */ func MapUint16ListToAnyArrList(m AnyArrList, f func([]Any) Uint16List) Uint16ListList { acc := NilUint16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyArrList: []Any->Uint32List */ func MapUint32ListToAnyArrList(m AnyArrList, f func([]Any) Uint32List) Uint32ListList { acc := NilUint32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyArrList: []Any->Uint64List */ func MapUint64ListToAnyArrList(m AnyArrList, f func([]Any) Uint64List) Uint64ListList { acc := NilUint64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyArrList: []Any->UintptrList */ func MapUintptrListToAnyArrList(m AnyArrList, f func([]Any) UintptrList) UintptrListList { acc := NilUintptrListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyArrList: []Any->ByteList */ func MapByteListToAnyArrList(m AnyArrList, f func([]Any) ByteList) ByteListList { acc := NilByteListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyArrList: []Any->RuneList */ func MapRuneListToAnyArrList(m AnyArrList, f func([]Any) RuneList) RuneListList { acc := NilRuneListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyArrList: []Any->Float32List */ func MapFloat32ListToAnyArrList(m AnyArrList, f func([]Any) Float32List) Float32ListList { acc := NilFloat32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyArrList: []Any->Float64List */ func MapFloat64ListToAnyArrList(m AnyArrList, f func([]Any) Float64List) Float64ListList { acc := NilFloat64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyArrList: []Any->Complex64List */ func MapComplex64ListToAnyArrList(m AnyArrList, f func([]Any) Complex64List) Complex64ListList { acc := NilComplex64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyArrList: []Any->Complex128List */ func MapComplex128ListToAnyArrList(m AnyArrList, f func([]Any) Complex128List) Complex128ListList { acc := NilComplex128ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyArrList: []Any->AnyList */ func MapAnyListToAnyArrList(m AnyArrList, f func([]Any) AnyList) AnyListList { acc := NilAnyListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolListList: BoolList->bool */ func MapBoolToBoolListList(m BoolListList, f func(BoolList) bool) BoolList { acc := NilBoolList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolListList: BoolList->string */ func MapStringToBoolListList(m BoolListList, f func(BoolList) string) StringList { acc := NilStringList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolListList: BoolList->int */ func MapIntToBoolListList(m BoolListList, f func(BoolList) int) IntList { acc := NilIntList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolListList: BoolList->int8 */ func MapInt8ToBoolListList(m BoolListList, f func(BoolList) int8) Int8List { acc := NilInt8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolListList: BoolList->int16 */ func MapInt16ToBoolListList(m BoolListList, f func(BoolList) int16) Int16List { acc := NilInt16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolListList: BoolList->int32 */ func MapInt32ToBoolListList(m BoolListList, f func(BoolList) int32) Int32List { acc := NilInt32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolListList: BoolList->int64 */ func MapInt64ToBoolListList(m BoolListList, f func(BoolList) int64) Int64List { acc := NilInt64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolListList: BoolList->uint */ func MapUintToBoolListList(m BoolListList, f func(BoolList) uint) UintList { acc := NilUintList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolListList: BoolList->uint8 */ func MapUint8ToBoolListList(m BoolListList, f func(BoolList) uint8) Uint8List { acc := NilUint8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolListList: BoolList->uint16 */ func MapUint16ToBoolListList(m BoolListList, f func(BoolList) uint16) Uint16List { acc := NilUint16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolListList: BoolList->uint32 */ func MapUint32ToBoolListList(m BoolListList, f func(BoolList) uint32) Uint32List { acc := NilUint32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolListList: BoolList->uint64 */ func MapUint64ToBoolListList(m BoolListList, f func(BoolList) uint64) Uint64List { acc := NilUint64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolListList: BoolList->uintptr */ func MapUintptrToBoolListList(m BoolListList, f func(BoolList) uintptr) UintptrList { acc := NilUintptrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolListList: BoolList->byte */ func MapByteToBoolListList(m BoolListList, f func(BoolList) byte) ByteList { acc := NilByteList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolListList: BoolList->rune */ func MapRuneToBoolListList(m BoolListList, f func(BoolList) rune) RuneList { acc := NilRuneList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolListList: BoolList->float32 */ func MapFloat32ToBoolListList(m BoolListList, f func(BoolList) float32) Float32List { acc := NilFloat32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolListList: BoolList->float64 */ func MapFloat64ToBoolListList(m BoolListList, f func(BoolList) float64) Float64List { acc := NilFloat64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolListList: BoolList->complex64 */ func MapComplex64ToBoolListList(m BoolListList, f func(BoolList) complex64) Complex64List { acc := NilComplex64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolListList: BoolList->complex128 */ func MapComplex128ToBoolListList(m BoolListList, f func(BoolList) complex128) Complex128List { acc := NilComplex128List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolListList: BoolList->Any */ func MapAnyToBoolListList(m BoolListList, f func(BoolList) Any) AnyList { acc := NilAnyList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolListList: BoolList->BoolOption */ func MapBoolOptionToBoolListList(m BoolListList, f func(BoolList) BoolOption) BoolOptionList { acc := NilBoolOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolListList: BoolList->StringOption */ func MapStringOptionToBoolListList(m BoolListList, f func(BoolList) StringOption) StringOptionList { acc := NilStringOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolListList: BoolList->IntOption */ func MapIntOptionToBoolListList(m BoolListList, f func(BoolList) IntOption) IntOptionList { acc := NilIntOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolListList: BoolList->Int8Option */ func MapInt8OptionToBoolListList(m BoolListList, f func(BoolList) Int8Option) Int8OptionList { acc := NilInt8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolListList: BoolList->Int16Option */ func MapInt16OptionToBoolListList(m BoolListList, f func(BoolList) Int16Option) Int16OptionList { acc := NilInt16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolListList: BoolList->Int32Option */ func MapInt32OptionToBoolListList(m BoolListList, f func(BoolList) Int32Option) Int32OptionList { acc := NilInt32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolListList: BoolList->Int64Option */ func MapInt64OptionToBoolListList(m BoolListList, f func(BoolList) Int64Option) Int64OptionList { acc := NilInt64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolListList: BoolList->UintOption */ func MapUintOptionToBoolListList(m BoolListList, f func(BoolList) UintOption) UintOptionList { acc := NilUintOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolListList: BoolList->Uint8Option */ func MapUint8OptionToBoolListList(m BoolListList, f func(BoolList) Uint8Option) Uint8OptionList { acc := NilUint8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolListList: BoolList->Uint16Option */ func MapUint16OptionToBoolListList(m BoolListList, f func(BoolList) Uint16Option) Uint16OptionList { acc := NilUint16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolListList: BoolList->Uint32Option */ func MapUint32OptionToBoolListList(m BoolListList, f func(BoolList) Uint32Option) Uint32OptionList { acc := NilUint32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolListList: BoolList->Uint64Option */ func MapUint64OptionToBoolListList(m BoolListList, f func(BoolList) Uint64Option) Uint64OptionList { acc := NilUint64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolListList: BoolList->UintptrOption */ func MapUintptrOptionToBoolListList(m BoolListList, f func(BoolList) UintptrOption) UintptrOptionList { acc := NilUintptrOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolListList: BoolList->ByteOption */ func MapByteOptionToBoolListList(m BoolListList, f func(BoolList) ByteOption) ByteOptionList { acc := NilByteOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolListList: BoolList->RuneOption */ func MapRuneOptionToBoolListList(m BoolListList, f func(BoolList) RuneOption) RuneOptionList { acc := NilRuneOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolListList: BoolList->Float32Option */ func MapFloat32OptionToBoolListList(m BoolListList, f func(BoolList) Float32Option) Float32OptionList { acc := NilFloat32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolListList: BoolList->Float64Option */ func MapFloat64OptionToBoolListList(m BoolListList, f func(BoolList) Float64Option) Float64OptionList { acc := NilFloat64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolListList: BoolList->Complex64Option */ func MapComplex64OptionToBoolListList(m BoolListList, f func(BoolList) Complex64Option) Complex64OptionList { acc := NilComplex64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolListList: BoolList->Complex128Option */ func MapComplex128OptionToBoolListList(m BoolListList, f func(BoolList) Complex128Option) Complex128OptionList { acc := NilComplex128OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolListList: BoolList->AnyOption */ func MapAnyOptionToBoolListList(m BoolListList, f func(BoolList) AnyOption) AnyOptionList { acc := NilAnyOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolListList: BoolList->[]bool */ func MapBoolArrToBoolListList(m BoolListList, f func(BoolList) []bool) BoolArrList { acc := NilBoolArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolListList: BoolList->[]string */ func MapStringArrToBoolListList(m BoolListList, f func(BoolList) []string) StringArrList { acc := NilStringArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolListList: BoolList->[]int */ func MapIntArrToBoolListList(m BoolListList, f func(BoolList) []int) IntArrList { acc := NilIntArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolListList: BoolList->[]int8 */ func MapInt8ArrToBoolListList(m BoolListList, f func(BoolList) []int8) Int8ArrList { acc := NilInt8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolListList: BoolList->[]int16 */ func MapInt16ArrToBoolListList(m BoolListList, f func(BoolList) []int16) Int16ArrList { acc := NilInt16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolListList: BoolList->[]int32 */ func MapInt32ArrToBoolListList(m BoolListList, f func(BoolList) []int32) Int32ArrList { acc := NilInt32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolListList: BoolList->[]int64 */ func MapInt64ArrToBoolListList(m BoolListList, f func(BoolList) []int64) Int64ArrList { acc := NilInt64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolListList: BoolList->[]uint */ func MapUintArrToBoolListList(m BoolListList, f func(BoolList) []uint) UintArrList { acc := NilUintArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolListList: BoolList->[]uint8 */ func MapUint8ArrToBoolListList(m BoolListList, f func(BoolList) []uint8) Uint8ArrList { acc := NilUint8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolListList: BoolList->[]uint16 */ func MapUint16ArrToBoolListList(m BoolListList, f func(BoolList) []uint16) Uint16ArrList { acc := NilUint16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolListList: BoolList->[]uint32 */ func MapUint32ArrToBoolListList(m BoolListList, f func(BoolList) []uint32) Uint32ArrList { acc := NilUint32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolListList: BoolList->[]uint64 */ func MapUint64ArrToBoolListList(m BoolListList, f func(BoolList) []uint64) Uint64ArrList { acc := NilUint64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolListList: BoolList->[]uintptr */ func MapUintptrArrToBoolListList(m BoolListList, f func(BoolList) []uintptr) UintptrArrList { acc := NilUintptrArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolListList: BoolList->[]byte */ func MapByteArrToBoolListList(m BoolListList, f func(BoolList) []byte) ByteArrList { acc := NilByteArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolListList: BoolList->[]rune */ func MapRuneArrToBoolListList(m BoolListList, f func(BoolList) []rune) RuneArrList { acc := NilRuneArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolListList: BoolList->[]float32 */ func MapFloat32ArrToBoolListList(m BoolListList, f func(BoolList) []float32) Float32ArrList { acc := NilFloat32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolListList: BoolList->[]float64 */ func MapFloat64ArrToBoolListList(m BoolListList, f func(BoolList) []float64) Float64ArrList { acc := NilFloat64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolListList: BoolList->[]complex64 */ func MapComplex64ArrToBoolListList(m BoolListList, f func(BoolList) []complex64) Complex64ArrList { acc := NilComplex64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolListList: BoolList->[]complex128 */ func MapComplex128ArrToBoolListList(m BoolListList, f func(BoolList) []complex128) Complex128ArrList { acc := NilComplex128ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolListList: BoolList->[]Any */ func MapAnyArrToBoolListList(m BoolListList, f func(BoolList) []Any) AnyArrList { acc := NilAnyArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolListList: BoolList->BoolList */ func MapBoolListToBoolListList(m BoolListList, f func(BoolList) BoolList) BoolListList { acc := NilBoolListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolListList: BoolList->StringList */ func MapStringListToBoolListList(m BoolListList, f func(BoolList) StringList) StringListList { acc := NilStringListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolListList: BoolList->IntList */ func MapIntListToBoolListList(m BoolListList, f func(BoolList) IntList) IntListList { acc := NilIntListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolListList: BoolList->Int8List */ func MapInt8ListToBoolListList(m BoolListList, f func(BoolList) Int8List) Int8ListList { acc := NilInt8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolListList: BoolList->Int16List */ func MapInt16ListToBoolListList(m BoolListList, f func(BoolList) Int16List) Int16ListList { acc := NilInt16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolListList: BoolList->Int32List */ func MapInt32ListToBoolListList(m BoolListList, f func(BoolList) Int32List) Int32ListList { acc := NilInt32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolListList: BoolList->Int64List */ func MapInt64ListToBoolListList(m BoolListList, f func(BoolList) Int64List) Int64ListList { acc := NilInt64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolListList: BoolList->UintList */ func MapUintListToBoolListList(m BoolListList, f func(BoolList) UintList) UintListList { acc := NilUintListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolListList: BoolList->Uint8List */ func MapUint8ListToBoolListList(m BoolListList, f func(BoolList) Uint8List) Uint8ListList { acc := NilUint8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolListList: BoolList->Uint16List */ func MapUint16ListToBoolListList(m BoolListList, f func(BoolList) Uint16List) Uint16ListList { acc := NilUint16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolListList: BoolList->Uint32List */ func MapUint32ListToBoolListList(m BoolListList, f func(BoolList) Uint32List) Uint32ListList { acc := NilUint32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolListList: BoolList->Uint64List */ func MapUint64ListToBoolListList(m BoolListList, f func(BoolList) Uint64List) Uint64ListList { acc := NilUint64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolListList: BoolList->UintptrList */ func MapUintptrListToBoolListList(m BoolListList, f func(BoolList) UintptrList) UintptrListList { acc := NilUintptrListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolListList: BoolList->ByteList */ func MapByteListToBoolListList(m BoolListList, f func(BoolList) ByteList) ByteListList { acc := NilByteListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolListList: BoolList->RuneList */ func MapRuneListToBoolListList(m BoolListList, f func(BoolList) RuneList) RuneListList { acc := NilRuneListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolListList: BoolList->Float32List */ func MapFloat32ListToBoolListList(m BoolListList, f func(BoolList) Float32List) Float32ListList { acc := NilFloat32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolListList: BoolList->Float64List */ func MapFloat64ListToBoolListList(m BoolListList, f func(BoolList) Float64List) Float64ListList { acc := NilFloat64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolListList: BoolList->Complex64List */ func MapComplex64ListToBoolListList(m BoolListList, f func(BoolList) Complex64List) Complex64ListList { acc := NilComplex64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolListList: BoolList->Complex128List */ func MapComplex128ListToBoolListList(m BoolListList, f func(BoolList) Complex128List) Complex128ListList { acc := NilComplex128ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* BoolListList: BoolList->AnyList */ func MapAnyListToBoolListList(m BoolListList, f func(BoolList) AnyList) AnyListList { acc := NilAnyListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringListList: StringList->bool */ func MapBoolToStringListList(m StringListList, f func(StringList) bool) BoolList { acc := NilBoolList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringListList: StringList->string */ func MapStringToStringListList(m StringListList, f func(StringList) string) StringList { acc := NilStringList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringListList: StringList->int */ func MapIntToStringListList(m StringListList, f func(StringList) int) IntList { acc := NilIntList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringListList: StringList->int8 */ func MapInt8ToStringListList(m StringListList, f func(StringList) int8) Int8List { acc := NilInt8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringListList: StringList->int16 */ func MapInt16ToStringListList(m StringListList, f func(StringList) int16) Int16List { acc := NilInt16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringListList: StringList->int32 */ func MapInt32ToStringListList(m StringListList, f func(StringList) int32) Int32List { acc := NilInt32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringListList: StringList->int64 */ func MapInt64ToStringListList(m StringListList, f func(StringList) int64) Int64List { acc := NilInt64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringListList: StringList->uint */ func MapUintToStringListList(m StringListList, f func(StringList) uint) UintList { acc := NilUintList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringListList: StringList->uint8 */ func MapUint8ToStringListList(m StringListList, f func(StringList) uint8) Uint8List { acc := NilUint8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringListList: StringList->uint16 */ func MapUint16ToStringListList(m StringListList, f func(StringList) uint16) Uint16List { acc := NilUint16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringListList: StringList->uint32 */ func MapUint32ToStringListList(m StringListList, f func(StringList) uint32) Uint32List { acc := NilUint32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringListList: StringList->uint64 */ func MapUint64ToStringListList(m StringListList, f func(StringList) uint64) Uint64List { acc := NilUint64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringListList: StringList->uintptr */ func MapUintptrToStringListList(m StringListList, f func(StringList) uintptr) UintptrList { acc := NilUintptrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringListList: StringList->byte */ func MapByteToStringListList(m StringListList, f func(StringList) byte) ByteList { acc := NilByteList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringListList: StringList->rune */ func MapRuneToStringListList(m StringListList, f func(StringList) rune) RuneList { acc := NilRuneList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringListList: StringList->float32 */ func MapFloat32ToStringListList(m StringListList, f func(StringList) float32) Float32List { acc := NilFloat32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringListList: StringList->float64 */ func MapFloat64ToStringListList(m StringListList, f func(StringList) float64) Float64List { acc := NilFloat64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringListList: StringList->complex64 */ func MapComplex64ToStringListList(m StringListList, f func(StringList) complex64) Complex64List { acc := NilComplex64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringListList: StringList->complex128 */ func MapComplex128ToStringListList(m StringListList, f func(StringList) complex128) Complex128List { acc := NilComplex128List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringListList: StringList->Any */ func MapAnyToStringListList(m StringListList, f func(StringList) Any) AnyList { acc := NilAnyList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringListList: StringList->BoolOption */ func MapBoolOptionToStringListList(m StringListList, f func(StringList) BoolOption) BoolOptionList { acc := NilBoolOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringListList: StringList->StringOption */ func MapStringOptionToStringListList(m StringListList, f func(StringList) StringOption) StringOptionList { acc := NilStringOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringListList: StringList->IntOption */ func MapIntOptionToStringListList(m StringListList, f func(StringList) IntOption) IntOptionList { acc := NilIntOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringListList: StringList->Int8Option */ func MapInt8OptionToStringListList(m StringListList, f func(StringList) Int8Option) Int8OptionList { acc := NilInt8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringListList: StringList->Int16Option */ func MapInt16OptionToStringListList(m StringListList, f func(StringList) Int16Option) Int16OptionList { acc := NilInt16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringListList: StringList->Int32Option */ func MapInt32OptionToStringListList(m StringListList, f func(StringList) Int32Option) Int32OptionList { acc := NilInt32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringListList: StringList->Int64Option */ func MapInt64OptionToStringListList(m StringListList, f func(StringList) Int64Option) Int64OptionList { acc := NilInt64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringListList: StringList->UintOption */ func MapUintOptionToStringListList(m StringListList, f func(StringList) UintOption) UintOptionList { acc := NilUintOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringListList: StringList->Uint8Option */ func MapUint8OptionToStringListList(m StringListList, f func(StringList) Uint8Option) Uint8OptionList { acc := NilUint8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringListList: StringList->Uint16Option */ func MapUint16OptionToStringListList(m StringListList, f func(StringList) Uint16Option) Uint16OptionList { acc := NilUint16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringListList: StringList->Uint32Option */ func MapUint32OptionToStringListList(m StringListList, f func(StringList) Uint32Option) Uint32OptionList { acc := NilUint32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringListList: StringList->Uint64Option */ func MapUint64OptionToStringListList(m StringListList, f func(StringList) Uint64Option) Uint64OptionList { acc := NilUint64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringListList: StringList->UintptrOption */ func MapUintptrOptionToStringListList(m StringListList, f func(StringList) UintptrOption) UintptrOptionList { acc := NilUintptrOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringListList: StringList->ByteOption */ func MapByteOptionToStringListList(m StringListList, f func(StringList) ByteOption) ByteOptionList { acc := NilByteOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringListList: StringList->RuneOption */ func MapRuneOptionToStringListList(m StringListList, f func(StringList) RuneOption) RuneOptionList { acc := NilRuneOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringListList: StringList->Float32Option */ func MapFloat32OptionToStringListList(m StringListList, f func(StringList) Float32Option) Float32OptionList { acc := NilFloat32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringListList: StringList->Float64Option */ func MapFloat64OptionToStringListList(m StringListList, f func(StringList) Float64Option) Float64OptionList { acc := NilFloat64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringListList: StringList->Complex64Option */ func MapComplex64OptionToStringListList(m StringListList, f func(StringList) Complex64Option) Complex64OptionList { acc := NilComplex64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringListList: StringList->Complex128Option */ func MapComplex128OptionToStringListList(m StringListList, f func(StringList) Complex128Option) Complex128OptionList { acc := NilComplex128OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringListList: StringList->AnyOption */ func MapAnyOptionToStringListList(m StringListList, f func(StringList) AnyOption) AnyOptionList { acc := NilAnyOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringListList: StringList->[]bool */ func MapBoolArrToStringListList(m StringListList, f func(StringList) []bool) BoolArrList { acc := NilBoolArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringListList: StringList->[]string */ func MapStringArrToStringListList(m StringListList, f func(StringList) []string) StringArrList { acc := NilStringArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringListList: StringList->[]int */ func MapIntArrToStringListList(m StringListList, f func(StringList) []int) IntArrList { acc := NilIntArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringListList: StringList->[]int8 */ func MapInt8ArrToStringListList(m StringListList, f func(StringList) []int8) Int8ArrList { acc := NilInt8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringListList: StringList->[]int16 */ func MapInt16ArrToStringListList(m StringListList, f func(StringList) []int16) Int16ArrList { acc := NilInt16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringListList: StringList->[]int32 */ func MapInt32ArrToStringListList(m StringListList, f func(StringList) []int32) Int32ArrList { acc := NilInt32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringListList: StringList->[]int64 */ func MapInt64ArrToStringListList(m StringListList, f func(StringList) []int64) Int64ArrList { acc := NilInt64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringListList: StringList->[]uint */ func MapUintArrToStringListList(m StringListList, f func(StringList) []uint) UintArrList { acc := NilUintArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringListList: StringList->[]uint8 */ func MapUint8ArrToStringListList(m StringListList, f func(StringList) []uint8) Uint8ArrList { acc := NilUint8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringListList: StringList->[]uint16 */ func MapUint16ArrToStringListList(m StringListList, f func(StringList) []uint16) Uint16ArrList { acc := NilUint16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringListList: StringList->[]uint32 */ func MapUint32ArrToStringListList(m StringListList, f func(StringList) []uint32) Uint32ArrList { acc := NilUint32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringListList: StringList->[]uint64 */ func MapUint64ArrToStringListList(m StringListList, f func(StringList) []uint64) Uint64ArrList { acc := NilUint64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringListList: StringList->[]uintptr */ func MapUintptrArrToStringListList(m StringListList, f func(StringList) []uintptr) UintptrArrList { acc := NilUintptrArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringListList: StringList->[]byte */ func MapByteArrToStringListList(m StringListList, f func(StringList) []byte) ByteArrList { acc := NilByteArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringListList: StringList->[]rune */ func MapRuneArrToStringListList(m StringListList, f func(StringList) []rune) RuneArrList { acc := NilRuneArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringListList: StringList->[]float32 */ func MapFloat32ArrToStringListList(m StringListList, f func(StringList) []float32) Float32ArrList { acc := NilFloat32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringListList: StringList->[]float64 */ func MapFloat64ArrToStringListList(m StringListList, f func(StringList) []float64) Float64ArrList { acc := NilFloat64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringListList: StringList->[]complex64 */ func MapComplex64ArrToStringListList(m StringListList, f func(StringList) []complex64) Complex64ArrList { acc := NilComplex64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringListList: StringList->[]complex128 */ func MapComplex128ArrToStringListList(m StringListList, f func(StringList) []complex128) Complex128ArrList { acc := NilComplex128ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringListList: StringList->[]Any */ func MapAnyArrToStringListList(m StringListList, f func(StringList) []Any) AnyArrList { acc := NilAnyArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringListList: StringList->BoolList */ func MapBoolListToStringListList(m StringListList, f func(StringList) BoolList) BoolListList { acc := NilBoolListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringListList: StringList->StringList */ func MapStringListToStringListList(m StringListList, f func(StringList) StringList) StringListList { acc := NilStringListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringListList: StringList->IntList */ func MapIntListToStringListList(m StringListList, f func(StringList) IntList) IntListList { acc := NilIntListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringListList: StringList->Int8List */ func MapInt8ListToStringListList(m StringListList, f func(StringList) Int8List) Int8ListList { acc := NilInt8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringListList: StringList->Int16List */ func MapInt16ListToStringListList(m StringListList, f func(StringList) Int16List) Int16ListList { acc := NilInt16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringListList: StringList->Int32List */ func MapInt32ListToStringListList(m StringListList, f func(StringList) Int32List) Int32ListList { acc := NilInt32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringListList: StringList->Int64List */ func MapInt64ListToStringListList(m StringListList, f func(StringList) Int64List) Int64ListList { acc := NilInt64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringListList: StringList->UintList */ func MapUintListToStringListList(m StringListList, f func(StringList) UintList) UintListList { acc := NilUintListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringListList: StringList->Uint8List */ func MapUint8ListToStringListList(m StringListList, f func(StringList) Uint8List) Uint8ListList { acc := NilUint8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringListList: StringList->Uint16List */ func MapUint16ListToStringListList(m StringListList, f func(StringList) Uint16List) Uint16ListList { acc := NilUint16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringListList: StringList->Uint32List */ func MapUint32ListToStringListList(m StringListList, f func(StringList) Uint32List) Uint32ListList { acc := NilUint32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringListList: StringList->Uint64List */ func MapUint64ListToStringListList(m StringListList, f func(StringList) Uint64List) Uint64ListList { acc := NilUint64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringListList: StringList->UintptrList */ func MapUintptrListToStringListList(m StringListList, f func(StringList) UintptrList) UintptrListList { acc := NilUintptrListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringListList: StringList->ByteList */ func MapByteListToStringListList(m StringListList, f func(StringList) ByteList) ByteListList { acc := NilByteListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringListList: StringList->RuneList */ func MapRuneListToStringListList(m StringListList, f func(StringList) RuneList) RuneListList { acc := NilRuneListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringListList: StringList->Float32List */ func MapFloat32ListToStringListList(m StringListList, f func(StringList) Float32List) Float32ListList { acc := NilFloat32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringListList: StringList->Float64List */ func MapFloat64ListToStringListList(m StringListList, f func(StringList) Float64List) Float64ListList { acc := NilFloat64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringListList: StringList->Complex64List */ func MapComplex64ListToStringListList(m StringListList, f func(StringList) Complex64List) Complex64ListList { acc := NilComplex64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringListList: StringList->Complex128List */ func MapComplex128ListToStringListList(m StringListList, f func(StringList) Complex128List) Complex128ListList { acc := NilComplex128ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* StringListList: StringList->AnyList */ func MapAnyListToStringListList(m StringListList, f func(StringList) AnyList) AnyListList { acc := NilAnyListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntListList: IntList->bool */ func MapBoolToIntListList(m IntListList, f func(IntList) bool) BoolList { acc := NilBoolList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntListList: IntList->string */ func MapStringToIntListList(m IntListList, f func(IntList) string) StringList { acc := NilStringList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntListList: IntList->int */ func MapIntToIntListList(m IntListList, f func(IntList) int) IntList { acc := NilIntList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntListList: IntList->int8 */ func MapInt8ToIntListList(m IntListList, f func(IntList) int8) Int8List { acc := NilInt8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntListList: IntList->int16 */ func MapInt16ToIntListList(m IntListList, f func(IntList) int16) Int16List { acc := NilInt16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntListList: IntList->int32 */ func MapInt32ToIntListList(m IntListList, f func(IntList) int32) Int32List { acc := NilInt32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntListList: IntList->int64 */ func MapInt64ToIntListList(m IntListList, f func(IntList) int64) Int64List { acc := NilInt64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntListList: IntList->uint */ func MapUintToIntListList(m IntListList, f func(IntList) uint) UintList { acc := NilUintList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntListList: IntList->uint8 */ func MapUint8ToIntListList(m IntListList, f func(IntList) uint8) Uint8List { acc := NilUint8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntListList: IntList->uint16 */ func MapUint16ToIntListList(m IntListList, f func(IntList) uint16) Uint16List { acc := NilUint16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntListList: IntList->uint32 */ func MapUint32ToIntListList(m IntListList, f func(IntList) uint32) Uint32List { acc := NilUint32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntListList: IntList->uint64 */ func MapUint64ToIntListList(m IntListList, f func(IntList) uint64) Uint64List { acc := NilUint64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntListList: IntList->uintptr */ func MapUintptrToIntListList(m IntListList, f func(IntList) uintptr) UintptrList { acc := NilUintptrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntListList: IntList->byte */ func MapByteToIntListList(m IntListList, f func(IntList) byte) ByteList { acc := NilByteList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntListList: IntList->rune */ func MapRuneToIntListList(m IntListList, f func(IntList) rune) RuneList { acc := NilRuneList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntListList: IntList->float32 */ func MapFloat32ToIntListList(m IntListList, f func(IntList) float32) Float32List { acc := NilFloat32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntListList: IntList->float64 */ func MapFloat64ToIntListList(m IntListList, f func(IntList) float64) Float64List { acc := NilFloat64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntListList: IntList->complex64 */ func MapComplex64ToIntListList(m IntListList, f func(IntList) complex64) Complex64List { acc := NilComplex64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntListList: IntList->complex128 */ func MapComplex128ToIntListList(m IntListList, f func(IntList) complex128) Complex128List { acc := NilComplex128List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntListList: IntList->Any */ func MapAnyToIntListList(m IntListList, f func(IntList) Any) AnyList { acc := NilAnyList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntListList: IntList->BoolOption */ func MapBoolOptionToIntListList(m IntListList, f func(IntList) BoolOption) BoolOptionList { acc := NilBoolOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntListList: IntList->StringOption */ func MapStringOptionToIntListList(m IntListList, f func(IntList) StringOption) StringOptionList { acc := NilStringOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntListList: IntList->IntOption */ func MapIntOptionToIntListList(m IntListList, f func(IntList) IntOption) IntOptionList { acc := NilIntOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntListList: IntList->Int8Option */ func MapInt8OptionToIntListList(m IntListList, f func(IntList) Int8Option) Int8OptionList { acc := NilInt8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntListList: IntList->Int16Option */ func MapInt16OptionToIntListList(m IntListList, f func(IntList) Int16Option) Int16OptionList { acc := NilInt16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntListList: IntList->Int32Option */ func MapInt32OptionToIntListList(m IntListList, f func(IntList) Int32Option) Int32OptionList { acc := NilInt32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntListList: IntList->Int64Option */ func MapInt64OptionToIntListList(m IntListList, f func(IntList) Int64Option) Int64OptionList { acc := NilInt64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntListList: IntList->UintOption */ func MapUintOptionToIntListList(m IntListList, f func(IntList) UintOption) UintOptionList { acc := NilUintOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntListList: IntList->Uint8Option */ func MapUint8OptionToIntListList(m IntListList, f func(IntList) Uint8Option) Uint8OptionList { acc := NilUint8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntListList: IntList->Uint16Option */ func MapUint16OptionToIntListList(m IntListList, f func(IntList) Uint16Option) Uint16OptionList { acc := NilUint16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntListList: IntList->Uint32Option */ func MapUint32OptionToIntListList(m IntListList, f func(IntList) Uint32Option) Uint32OptionList { acc := NilUint32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntListList: IntList->Uint64Option */ func MapUint64OptionToIntListList(m IntListList, f func(IntList) Uint64Option) Uint64OptionList { acc := NilUint64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntListList: IntList->UintptrOption */ func MapUintptrOptionToIntListList(m IntListList, f func(IntList) UintptrOption) UintptrOptionList { acc := NilUintptrOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntListList: IntList->ByteOption */ func MapByteOptionToIntListList(m IntListList, f func(IntList) ByteOption) ByteOptionList { acc := NilByteOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntListList: IntList->RuneOption */ func MapRuneOptionToIntListList(m IntListList, f func(IntList) RuneOption) RuneOptionList { acc := NilRuneOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntListList: IntList->Float32Option */ func MapFloat32OptionToIntListList(m IntListList, f func(IntList) Float32Option) Float32OptionList { acc := NilFloat32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntListList: IntList->Float64Option */ func MapFloat64OptionToIntListList(m IntListList, f func(IntList) Float64Option) Float64OptionList { acc := NilFloat64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntListList: IntList->Complex64Option */ func MapComplex64OptionToIntListList(m IntListList, f func(IntList) Complex64Option) Complex64OptionList { acc := NilComplex64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntListList: IntList->Complex128Option */ func MapComplex128OptionToIntListList(m IntListList, f func(IntList) Complex128Option) Complex128OptionList { acc := NilComplex128OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntListList: IntList->AnyOption */ func MapAnyOptionToIntListList(m IntListList, f func(IntList) AnyOption) AnyOptionList { acc := NilAnyOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntListList: IntList->[]bool */ func MapBoolArrToIntListList(m IntListList, f func(IntList) []bool) BoolArrList { acc := NilBoolArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntListList: IntList->[]string */ func MapStringArrToIntListList(m IntListList, f func(IntList) []string) StringArrList { acc := NilStringArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntListList: IntList->[]int */ func MapIntArrToIntListList(m IntListList, f func(IntList) []int) IntArrList { acc := NilIntArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntListList: IntList->[]int8 */ func MapInt8ArrToIntListList(m IntListList, f func(IntList) []int8) Int8ArrList { acc := NilInt8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntListList: IntList->[]int16 */ func MapInt16ArrToIntListList(m IntListList, f func(IntList) []int16) Int16ArrList { acc := NilInt16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntListList: IntList->[]int32 */ func MapInt32ArrToIntListList(m IntListList, f func(IntList) []int32) Int32ArrList { acc := NilInt32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntListList: IntList->[]int64 */ func MapInt64ArrToIntListList(m IntListList, f func(IntList) []int64) Int64ArrList { acc := NilInt64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntListList: IntList->[]uint */ func MapUintArrToIntListList(m IntListList, f func(IntList) []uint) UintArrList { acc := NilUintArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntListList: IntList->[]uint8 */ func MapUint8ArrToIntListList(m IntListList, f func(IntList) []uint8) Uint8ArrList { acc := NilUint8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntListList: IntList->[]uint16 */ func MapUint16ArrToIntListList(m IntListList, f func(IntList) []uint16) Uint16ArrList { acc := NilUint16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntListList: IntList->[]uint32 */ func MapUint32ArrToIntListList(m IntListList, f func(IntList) []uint32) Uint32ArrList { acc := NilUint32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntListList: IntList->[]uint64 */ func MapUint64ArrToIntListList(m IntListList, f func(IntList) []uint64) Uint64ArrList { acc := NilUint64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntListList: IntList->[]uintptr */ func MapUintptrArrToIntListList(m IntListList, f func(IntList) []uintptr) UintptrArrList { acc := NilUintptrArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntListList: IntList->[]byte */ func MapByteArrToIntListList(m IntListList, f func(IntList) []byte) ByteArrList { acc := NilByteArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntListList: IntList->[]rune */ func MapRuneArrToIntListList(m IntListList, f func(IntList) []rune) RuneArrList { acc := NilRuneArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntListList: IntList->[]float32 */ func MapFloat32ArrToIntListList(m IntListList, f func(IntList) []float32) Float32ArrList { acc := NilFloat32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntListList: IntList->[]float64 */ func MapFloat64ArrToIntListList(m IntListList, f func(IntList) []float64) Float64ArrList { acc := NilFloat64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntListList: IntList->[]complex64 */ func MapComplex64ArrToIntListList(m IntListList, f func(IntList) []complex64) Complex64ArrList { acc := NilComplex64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntListList: IntList->[]complex128 */ func MapComplex128ArrToIntListList(m IntListList, f func(IntList) []complex128) Complex128ArrList { acc := NilComplex128ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntListList: IntList->[]Any */ func MapAnyArrToIntListList(m IntListList, f func(IntList) []Any) AnyArrList { acc := NilAnyArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntListList: IntList->BoolList */ func MapBoolListToIntListList(m IntListList, f func(IntList) BoolList) BoolListList { acc := NilBoolListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntListList: IntList->StringList */ func MapStringListToIntListList(m IntListList, f func(IntList) StringList) StringListList { acc := NilStringListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntListList: IntList->IntList */ func MapIntListToIntListList(m IntListList, f func(IntList) IntList) IntListList { acc := NilIntListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntListList: IntList->Int8List */ func MapInt8ListToIntListList(m IntListList, f func(IntList) Int8List) Int8ListList { acc := NilInt8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntListList: IntList->Int16List */ func MapInt16ListToIntListList(m IntListList, f func(IntList) Int16List) Int16ListList { acc := NilInt16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntListList: IntList->Int32List */ func MapInt32ListToIntListList(m IntListList, f func(IntList) Int32List) Int32ListList { acc := NilInt32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntListList: IntList->Int64List */ func MapInt64ListToIntListList(m IntListList, f func(IntList) Int64List) Int64ListList { acc := NilInt64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntListList: IntList->UintList */ func MapUintListToIntListList(m IntListList, f func(IntList) UintList) UintListList { acc := NilUintListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntListList: IntList->Uint8List */ func MapUint8ListToIntListList(m IntListList, f func(IntList) Uint8List) Uint8ListList { acc := NilUint8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntListList: IntList->Uint16List */ func MapUint16ListToIntListList(m IntListList, f func(IntList) Uint16List) Uint16ListList { acc := NilUint16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntListList: IntList->Uint32List */ func MapUint32ListToIntListList(m IntListList, f func(IntList) Uint32List) Uint32ListList { acc := NilUint32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntListList: IntList->Uint64List */ func MapUint64ListToIntListList(m IntListList, f func(IntList) Uint64List) Uint64ListList { acc := NilUint64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntListList: IntList->UintptrList */ func MapUintptrListToIntListList(m IntListList, f func(IntList) UintptrList) UintptrListList { acc := NilUintptrListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntListList: IntList->ByteList */ func MapByteListToIntListList(m IntListList, f func(IntList) ByteList) ByteListList { acc := NilByteListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntListList: IntList->RuneList */ func MapRuneListToIntListList(m IntListList, f func(IntList) RuneList) RuneListList { acc := NilRuneListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntListList: IntList->Float32List */ func MapFloat32ListToIntListList(m IntListList, f func(IntList) Float32List) Float32ListList { acc := NilFloat32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntListList: IntList->Float64List */ func MapFloat64ListToIntListList(m IntListList, f func(IntList) Float64List) Float64ListList { acc := NilFloat64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntListList: IntList->Complex64List */ func MapComplex64ListToIntListList(m IntListList, f func(IntList) Complex64List) Complex64ListList { acc := NilComplex64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntListList: IntList->Complex128List */ func MapComplex128ListToIntListList(m IntListList, f func(IntList) Complex128List) Complex128ListList { acc := NilComplex128ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* IntListList: IntList->AnyList */ func MapAnyListToIntListList(m IntListList, f func(IntList) AnyList) AnyListList { acc := NilAnyListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ListList: Int8List->bool */ func MapBoolToInt8ListList(m Int8ListList, f func(Int8List) bool) BoolList { acc := NilBoolList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ListList: Int8List->string */ func MapStringToInt8ListList(m Int8ListList, f func(Int8List) string) StringList { acc := NilStringList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ListList: Int8List->int */ func MapIntToInt8ListList(m Int8ListList, f func(Int8List) int) IntList { acc := NilIntList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ListList: Int8List->int8 */ func MapInt8ToInt8ListList(m Int8ListList, f func(Int8List) int8) Int8List { acc := NilInt8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ListList: Int8List->int16 */ func MapInt16ToInt8ListList(m Int8ListList, f func(Int8List) int16) Int16List { acc := NilInt16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ListList: Int8List->int32 */ func MapInt32ToInt8ListList(m Int8ListList, f func(Int8List) int32) Int32List { acc := NilInt32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ListList: Int8List->int64 */ func MapInt64ToInt8ListList(m Int8ListList, f func(Int8List) int64) Int64List { acc := NilInt64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ListList: Int8List->uint */ func MapUintToInt8ListList(m Int8ListList, f func(Int8List) uint) UintList { acc := NilUintList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ListList: Int8List->uint8 */ func MapUint8ToInt8ListList(m Int8ListList, f func(Int8List) uint8) Uint8List { acc := NilUint8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ListList: Int8List->uint16 */ func MapUint16ToInt8ListList(m Int8ListList, f func(Int8List) uint16) Uint16List { acc := NilUint16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ListList: Int8List->uint32 */ func MapUint32ToInt8ListList(m Int8ListList, f func(Int8List) uint32) Uint32List { acc := NilUint32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ListList: Int8List->uint64 */ func MapUint64ToInt8ListList(m Int8ListList, f func(Int8List) uint64) Uint64List { acc := NilUint64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ListList: Int8List->uintptr */ func MapUintptrToInt8ListList(m Int8ListList, f func(Int8List) uintptr) UintptrList { acc := NilUintptrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ListList: Int8List->byte */ func MapByteToInt8ListList(m Int8ListList, f func(Int8List) byte) ByteList { acc := NilByteList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ListList: Int8List->rune */ func MapRuneToInt8ListList(m Int8ListList, f func(Int8List) rune) RuneList { acc := NilRuneList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ListList: Int8List->float32 */ func MapFloat32ToInt8ListList(m Int8ListList, f func(Int8List) float32) Float32List { acc := NilFloat32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ListList: Int8List->float64 */ func MapFloat64ToInt8ListList(m Int8ListList, f func(Int8List) float64) Float64List { acc := NilFloat64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ListList: Int8List->complex64 */ func MapComplex64ToInt8ListList(m Int8ListList, f func(Int8List) complex64) Complex64List { acc := NilComplex64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ListList: Int8List->complex128 */ func MapComplex128ToInt8ListList(m Int8ListList, f func(Int8List) complex128) Complex128List { acc := NilComplex128List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ListList: Int8List->Any */ func MapAnyToInt8ListList(m Int8ListList, f func(Int8List) Any) AnyList { acc := NilAnyList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ListList: Int8List->BoolOption */ func MapBoolOptionToInt8ListList(m Int8ListList, f func(Int8List) BoolOption) BoolOptionList { acc := NilBoolOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ListList: Int8List->StringOption */ func MapStringOptionToInt8ListList(m Int8ListList, f func(Int8List) StringOption) StringOptionList { acc := NilStringOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ListList: Int8List->IntOption */ func MapIntOptionToInt8ListList(m Int8ListList, f func(Int8List) IntOption) IntOptionList { acc := NilIntOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ListList: Int8List->Int8Option */ func MapInt8OptionToInt8ListList(m Int8ListList, f func(Int8List) Int8Option) Int8OptionList { acc := NilInt8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ListList: Int8List->Int16Option */ func MapInt16OptionToInt8ListList(m Int8ListList, f func(Int8List) Int16Option) Int16OptionList { acc := NilInt16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ListList: Int8List->Int32Option */ func MapInt32OptionToInt8ListList(m Int8ListList, f func(Int8List) Int32Option) Int32OptionList { acc := NilInt32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ListList: Int8List->Int64Option */ func MapInt64OptionToInt8ListList(m Int8ListList, f func(Int8List) Int64Option) Int64OptionList { acc := NilInt64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ListList: Int8List->UintOption */ func MapUintOptionToInt8ListList(m Int8ListList, f func(Int8List) UintOption) UintOptionList { acc := NilUintOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ListList: Int8List->Uint8Option */ func MapUint8OptionToInt8ListList(m Int8ListList, f func(Int8List) Uint8Option) Uint8OptionList { acc := NilUint8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ListList: Int8List->Uint16Option */ func MapUint16OptionToInt8ListList(m Int8ListList, f func(Int8List) Uint16Option) Uint16OptionList { acc := NilUint16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ListList: Int8List->Uint32Option */ func MapUint32OptionToInt8ListList(m Int8ListList, f func(Int8List) Uint32Option) Uint32OptionList { acc := NilUint32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ListList: Int8List->Uint64Option */ func MapUint64OptionToInt8ListList(m Int8ListList, f func(Int8List) Uint64Option) Uint64OptionList { acc := NilUint64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ListList: Int8List->UintptrOption */ func MapUintptrOptionToInt8ListList(m Int8ListList, f func(Int8List) UintptrOption) UintptrOptionList { acc := NilUintptrOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ListList: Int8List->ByteOption */ func MapByteOptionToInt8ListList(m Int8ListList, f func(Int8List) ByteOption) ByteOptionList { acc := NilByteOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ListList: Int8List->RuneOption */ func MapRuneOptionToInt8ListList(m Int8ListList, f func(Int8List) RuneOption) RuneOptionList { acc := NilRuneOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ListList: Int8List->Float32Option */ func MapFloat32OptionToInt8ListList(m Int8ListList, f func(Int8List) Float32Option) Float32OptionList { acc := NilFloat32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ListList: Int8List->Float64Option */ func MapFloat64OptionToInt8ListList(m Int8ListList, f func(Int8List) Float64Option) Float64OptionList { acc := NilFloat64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ListList: Int8List->Complex64Option */ func MapComplex64OptionToInt8ListList(m Int8ListList, f func(Int8List) Complex64Option) Complex64OptionList { acc := NilComplex64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ListList: Int8List->Complex128Option */ func MapComplex128OptionToInt8ListList(m Int8ListList, f func(Int8List) Complex128Option) Complex128OptionList { acc := NilComplex128OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ListList: Int8List->AnyOption */ func MapAnyOptionToInt8ListList(m Int8ListList, f func(Int8List) AnyOption) AnyOptionList { acc := NilAnyOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ListList: Int8List->[]bool */ func MapBoolArrToInt8ListList(m Int8ListList, f func(Int8List) []bool) BoolArrList { acc := NilBoolArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ListList: Int8List->[]string */ func MapStringArrToInt8ListList(m Int8ListList, f func(Int8List) []string) StringArrList { acc := NilStringArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ListList: Int8List->[]int */ func MapIntArrToInt8ListList(m Int8ListList, f func(Int8List) []int) IntArrList { acc := NilIntArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ListList: Int8List->[]int8 */ func MapInt8ArrToInt8ListList(m Int8ListList, f func(Int8List) []int8) Int8ArrList { acc := NilInt8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ListList: Int8List->[]int16 */ func MapInt16ArrToInt8ListList(m Int8ListList, f func(Int8List) []int16) Int16ArrList { acc := NilInt16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ListList: Int8List->[]int32 */ func MapInt32ArrToInt8ListList(m Int8ListList, f func(Int8List) []int32) Int32ArrList { acc := NilInt32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ListList: Int8List->[]int64 */ func MapInt64ArrToInt8ListList(m Int8ListList, f func(Int8List) []int64) Int64ArrList { acc := NilInt64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ListList: Int8List->[]uint */ func MapUintArrToInt8ListList(m Int8ListList, f func(Int8List) []uint) UintArrList { acc := NilUintArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ListList: Int8List->[]uint8 */ func MapUint8ArrToInt8ListList(m Int8ListList, f func(Int8List) []uint8) Uint8ArrList { acc := NilUint8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ListList: Int8List->[]uint16 */ func MapUint16ArrToInt8ListList(m Int8ListList, f func(Int8List) []uint16) Uint16ArrList { acc := NilUint16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ListList: Int8List->[]uint32 */ func MapUint32ArrToInt8ListList(m Int8ListList, f func(Int8List) []uint32) Uint32ArrList { acc := NilUint32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ListList: Int8List->[]uint64 */ func MapUint64ArrToInt8ListList(m Int8ListList, f func(Int8List) []uint64) Uint64ArrList { acc := NilUint64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ListList: Int8List->[]uintptr */ func MapUintptrArrToInt8ListList(m Int8ListList, f func(Int8List) []uintptr) UintptrArrList { acc := NilUintptrArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ListList: Int8List->[]byte */ func MapByteArrToInt8ListList(m Int8ListList, f func(Int8List) []byte) ByteArrList { acc := NilByteArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ListList: Int8List->[]rune */ func MapRuneArrToInt8ListList(m Int8ListList, f func(Int8List) []rune) RuneArrList { acc := NilRuneArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ListList: Int8List->[]float32 */ func MapFloat32ArrToInt8ListList(m Int8ListList, f func(Int8List) []float32) Float32ArrList { acc := NilFloat32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ListList: Int8List->[]float64 */ func MapFloat64ArrToInt8ListList(m Int8ListList, f func(Int8List) []float64) Float64ArrList { acc := NilFloat64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ListList: Int8List->[]complex64 */ func MapComplex64ArrToInt8ListList(m Int8ListList, f func(Int8List) []complex64) Complex64ArrList { acc := NilComplex64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ListList: Int8List->[]complex128 */ func MapComplex128ArrToInt8ListList(m Int8ListList, f func(Int8List) []complex128) Complex128ArrList { acc := NilComplex128ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ListList: Int8List->[]Any */ func MapAnyArrToInt8ListList(m Int8ListList, f func(Int8List) []Any) AnyArrList { acc := NilAnyArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ListList: Int8List->BoolList */ func MapBoolListToInt8ListList(m Int8ListList, f func(Int8List) BoolList) BoolListList { acc := NilBoolListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ListList: Int8List->StringList */ func MapStringListToInt8ListList(m Int8ListList, f func(Int8List) StringList) StringListList { acc := NilStringListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ListList: Int8List->IntList */ func MapIntListToInt8ListList(m Int8ListList, f func(Int8List) IntList) IntListList { acc := NilIntListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ListList: Int8List->Int8List */ func MapInt8ListToInt8ListList(m Int8ListList, f func(Int8List) Int8List) Int8ListList { acc := NilInt8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ListList: Int8List->Int16List */ func MapInt16ListToInt8ListList(m Int8ListList, f func(Int8List) Int16List) Int16ListList { acc := NilInt16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ListList: Int8List->Int32List */ func MapInt32ListToInt8ListList(m Int8ListList, f func(Int8List) Int32List) Int32ListList { acc := NilInt32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ListList: Int8List->Int64List */ func MapInt64ListToInt8ListList(m Int8ListList, f func(Int8List) Int64List) Int64ListList { acc := NilInt64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ListList: Int8List->UintList */ func MapUintListToInt8ListList(m Int8ListList, f func(Int8List) UintList) UintListList { acc := NilUintListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ListList: Int8List->Uint8List */ func MapUint8ListToInt8ListList(m Int8ListList, f func(Int8List) Uint8List) Uint8ListList { acc := NilUint8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ListList: Int8List->Uint16List */ func MapUint16ListToInt8ListList(m Int8ListList, f func(Int8List) Uint16List) Uint16ListList { acc := NilUint16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ListList: Int8List->Uint32List */ func MapUint32ListToInt8ListList(m Int8ListList, f func(Int8List) Uint32List) Uint32ListList { acc := NilUint32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ListList: Int8List->Uint64List */ func MapUint64ListToInt8ListList(m Int8ListList, f func(Int8List) Uint64List) Uint64ListList { acc := NilUint64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ListList: Int8List->UintptrList */ func MapUintptrListToInt8ListList(m Int8ListList, f func(Int8List) UintptrList) UintptrListList { acc := NilUintptrListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ListList: Int8List->ByteList */ func MapByteListToInt8ListList(m Int8ListList, f func(Int8List) ByteList) ByteListList { acc := NilByteListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ListList: Int8List->RuneList */ func MapRuneListToInt8ListList(m Int8ListList, f func(Int8List) RuneList) RuneListList { acc := NilRuneListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ListList: Int8List->Float32List */ func MapFloat32ListToInt8ListList(m Int8ListList, f func(Int8List) Float32List) Float32ListList { acc := NilFloat32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ListList: Int8List->Float64List */ func MapFloat64ListToInt8ListList(m Int8ListList, f func(Int8List) Float64List) Float64ListList { acc := NilFloat64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ListList: Int8List->Complex64List */ func MapComplex64ListToInt8ListList(m Int8ListList, f func(Int8List) Complex64List) Complex64ListList { acc := NilComplex64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ListList: Int8List->Complex128List */ func MapComplex128ListToInt8ListList(m Int8ListList, f func(Int8List) Complex128List) Complex128ListList { acc := NilComplex128ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int8ListList: Int8List->AnyList */ func MapAnyListToInt8ListList(m Int8ListList, f func(Int8List) AnyList) AnyListList { acc := NilAnyListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ListList: Int16List->bool */ func MapBoolToInt16ListList(m Int16ListList, f func(Int16List) bool) BoolList { acc := NilBoolList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ListList: Int16List->string */ func MapStringToInt16ListList(m Int16ListList, f func(Int16List) string) StringList { acc := NilStringList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ListList: Int16List->int */ func MapIntToInt16ListList(m Int16ListList, f func(Int16List) int) IntList { acc := NilIntList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ListList: Int16List->int8 */ func MapInt8ToInt16ListList(m Int16ListList, f func(Int16List) int8) Int8List { acc := NilInt8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ListList: Int16List->int16 */ func MapInt16ToInt16ListList(m Int16ListList, f func(Int16List) int16) Int16List { acc := NilInt16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ListList: Int16List->int32 */ func MapInt32ToInt16ListList(m Int16ListList, f func(Int16List) int32) Int32List { acc := NilInt32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ListList: Int16List->int64 */ func MapInt64ToInt16ListList(m Int16ListList, f func(Int16List) int64) Int64List { acc := NilInt64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ListList: Int16List->uint */ func MapUintToInt16ListList(m Int16ListList, f func(Int16List) uint) UintList { acc := NilUintList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ListList: Int16List->uint8 */ func MapUint8ToInt16ListList(m Int16ListList, f func(Int16List) uint8) Uint8List { acc := NilUint8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ListList: Int16List->uint16 */ func MapUint16ToInt16ListList(m Int16ListList, f func(Int16List) uint16) Uint16List { acc := NilUint16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ListList: Int16List->uint32 */ func MapUint32ToInt16ListList(m Int16ListList, f func(Int16List) uint32) Uint32List { acc := NilUint32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ListList: Int16List->uint64 */ func MapUint64ToInt16ListList(m Int16ListList, f func(Int16List) uint64) Uint64List { acc := NilUint64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ListList: Int16List->uintptr */ func MapUintptrToInt16ListList(m Int16ListList, f func(Int16List) uintptr) UintptrList { acc := NilUintptrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ListList: Int16List->byte */ func MapByteToInt16ListList(m Int16ListList, f func(Int16List) byte) ByteList { acc := NilByteList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ListList: Int16List->rune */ func MapRuneToInt16ListList(m Int16ListList, f func(Int16List) rune) RuneList { acc := NilRuneList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ListList: Int16List->float32 */ func MapFloat32ToInt16ListList(m Int16ListList, f func(Int16List) float32) Float32List { acc := NilFloat32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ListList: Int16List->float64 */ func MapFloat64ToInt16ListList(m Int16ListList, f func(Int16List) float64) Float64List { acc := NilFloat64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ListList: Int16List->complex64 */ func MapComplex64ToInt16ListList(m Int16ListList, f func(Int16List) complex64) Complex64List { acc := NilComplex64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ListList: Int16List->complex128 */ func MapComplex128ToInt16ListList(m Int16ListList, f func(Int16List) complex128) Complex128List { acc := NilComplex128List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ListList: Int16List->Any */ func MapAnyToInt16ListList(m Int16ListList, f func(Int16List) Any) AnyList { acc := NilAnyList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ListList: Int16List->BoolOption */ func MapBoolOptionToInt16ListList(m Int16ListList, f func(Int16List) BoolOption) BoolOptionList { acc := NilBoolOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ListList: Int16List->StringOption */ func MapStringOptionToInt16ListList(m Int16ListList, f func(Int16List) StringOption) StringOptionList { acc := NilStringOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ListList: Int16List->IntOption */ func MapIntOptionToInt16ListList(m Int16ListList, f func(Int16List) IntOption) IntOptionList { acc := NilIntOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ListList: Int16List->Int8Option */ func MapInt8OptionToInt16ListList(m Int16ListList, f func(Int16List) Int8Option) Int8OptionList { acc := NilInt8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ListList: Int16List->Int16Option */ func MapInt16OptionToInt16ListList(m Int16ListList, f func(Int16List) Int16Option) Int16OptionList { acc := NilInt16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ListList: Int16List->Int32Option */ func MapInt32OptionToInt16ListList(m Int16ListList, f func(Int16List) Int32Option) Int32OptionList { acc := NilInt32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ListList: Int16List->Int64Option */ func MapInt64OptionToInt16ListList(m Int16ListList, f func(Int16List) Int64Option) Int64OptionList { acc := NilInt64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ListList: Int16List->UintOption */ func MapUintOptionToInt16ListList(m Int16ListList, f func(Int16List) UintOption) UintOptionList { acc := NilUintOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ListList: Int16List->Uint8Option */ func MapUint8OptionToInt16ListList(m Int16ListList, f func(Int16List) Uint8Option) Uint8OptionList { acc := NilUint8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ListList: Int16List->Uint16Option */ func MapUint16OptionToInt16ListList(m Int16ListList, f func(Int16List) Uint16Option) Uint16OptionList { acc := NilUint16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ListList: Int16List->Uint32Option */ func MapUint32OptionToInt16ListList(m Int16ListList, f func(Int16List) Uint32Option) Uint32OptionList { acc := NilUint32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ListList: Int16List->Uint64Option */ func MapUint64OptionToInt16ListList(m Int16ListList, f func(Int16List) Uint64Option) Uint64OptionList { acc := NilUint64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ListList: Int16List->UintptrOption */ func MapUintptrOptionToInt16ListList(m Int16ListList, f func(Int16List) UintptrOption) UintptrOptionList { acc := NilUintptrOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ListList: Int16List->ByteOption */ func MapByteOptionToInt16ListList(m Int16ListList, f func(Int16List) ByteOption) ByteOptionList { acc := NilByteOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ListList: Int16List->RuneOption */ func MapRuneOptionToInt16ListList(m Int16ListList, f func(Int16List) RuneOption) RuneOptionList { acc := NilRuneOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ListList: Int16List->Float32Option */ func MapFloat32OptionToInt16ListList(m Int16ListList, f func(Int16List) Float32Option) Float32OptionList { acc := NilFloat32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ListList: Int16List->Float64Option */ func MapFloat64OptionToInt16ListList(m Int16ListList, f func(Int16List) Float64Option) Float64OptionList { acc := NilFloat64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ListList: Int16List->Complex64Option */ func MapComplex64OptionToInt16ListList(m Int16ListList, f func(Int16List) Complex64Option) Complex64OptionList { acc := NilComplex64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ListList: Int16List->Complex128Option */ func MapComplex128OptionToInt16ListList(m Int16ListList, f func(Int16List) Complex128Option) Complex128OptionList { acc := NilComplex128OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ListList: Int16List->AnyOption */ func MapAnyOptionToInt16ListList(m Int16ListList, f func(Int16List) AnyOption) AnyOptionList { acc := NilAnyOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ListList: Int16List->[]bool */ func MapBoolArrToInt16ListList(m Int16ListList, f func(Int16List) []bool) BoolArrList { acc := NilBoolArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ListList: Int16List->[]string */ func MapStringArrToInt16ListList(m Int16ListList, f func(Int16List) []string) StringArrList { acc := NilStringArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ListList: Int16List->[]int */ func MapIntArrToInt16ListList(m Int16ListList, f func(Int16List) []int) IntArrList { acc := NilIntArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ListList: Int16List->[]int8 */ func MapInt8ArrToInt16ListList(m Int16ListList, f func(Int16List) []int8) Int8ArrList { acc := NilInt8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ListList: Int16List->[]int16 */ func MapInt16ArrToInt16ListList(m Int16ListList, f func(Int16List) []int16) Int16ArrList { acc := NilInt16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ListList: Int16List->[]int32 */ func MapInt32ArrToInt16ListList(m Int16ListList, f func(Int16List) []int32) Int32ArrList { acc := NilInt32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ListList: Int16List->[]int64 */ func MapInt64ArrToInt16ListList(m Int16ListList, f func(Int16List) []int64) Int64ArrList { acc := NilInt64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ListList: Int16List->[]uint */ func MapUintArrToInt16ListList(m Int16ListList, f func(Int16List) []uint) UintArrList { acc := NilUintArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ListList: Int16List->[]uint8 */ func MapUint8ArrToInt16ListList(m Int16ListList, f func(Int16List) []uint8) Uint8ArrList { acc := NilUint8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ListList: Int16List->[]uint16 */ func MapUint16ArrToInt16ListList(m Int16ListList, f func(Int16List) []uint16) Uint16ArrList { acc := NilUint16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ListList: Int16List->[]uint32 */ func MapUint32ArrToInt16ListList(m Int16ListList, f func(Int16List) []uint32) Uint32ArrList { acc := NilUint32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ListList: Int16List->[]uint64 */ func MapUint64ArrToInt16ListList(m Int16ListList, f func(Int16List) []uint64) Uint64ArrList { acc := NilUint64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ListList: Int16List->[]uintptr */ func MapUintptrArrToInt16ListList(m Int16ListList, f func(Int16List) []uintptr) UintptrArrList { acc := NilUintptrArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ListList: Int16List->[]byte */ func MapByteArrToInt16ListList(m Int16ListList, f func(Int16List) []byte) ByteArrList { acc := NilByteArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ListList: Int16List->[]rune */ func MapRuneArrToInt16ListList(m Int16ListList, f func(Int16List) []rune) RuneArrList { acc := NilRuneArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ListList: Int16List->[]float32 */ func MapFloat32ArrToInt16ListList(m Int16ListList, f func(Int16List) []float32) Float32ArrList { acc := NilFloat32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ListList: Int16List->[]float64 */ func MapFloat64ArrToInt16ListList(m Int16ListList, f func(Int16List) []float64) Float64ArrList { acc := NilFloat64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ListList: Int16List->[]complex64 */ func MapComplex64ArrToInt16ListList(m Int16ListList, f func(Int16List) []complex64) Complex64ArrList { acc := NilComplex64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ListList: Int16List->[]complex128 */ func MapComplex128ArrToInt16ListList(m Int16ListList, f func(Int16List) []complex128) Complex128ArrList { acc := NilComplex128ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ListList: Int16List->[]Any */ func MapAnyArrToInt16ListList(m Int16ListList, f func(Int16List) []Any) AnyArrList { acc := NilAnyArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ListList: Int16List->BoolList */ func MapBoolListToInt16ListList(m Int16ListList, f func(Int16List) BoolList) BoolListList { acc := NilBoolListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ListList: Int16List->StringList */ func MapStringListToInt16ListList(m Int16ListList, f func(Int16List) StringList) StringListList { acc := NilStringListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ListList: Int16List->IntList */ func MapIntListToInt16ListList(m Int16ListList, f func(Int16List) IntList) IntListList { acc := NilIntListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ListList: Int16List->Int8List */ func MapInt8ListToInt16ListList(m Int16ListList, f func(Int16List) Int8List) Int8ListList { acc := NilInt8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ListList: Int16List->Int16List */ func MapInt16ListToInt16ListList(m Int16ListList, f func(Int16List) Int16List) Int16ListList { acc := NilInt16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ListList: Int16List->Int32List */ func MapInt32ListToInt16ListList(m Int16ListList, f func(Int16List) Int32List) Int32ListList { acc := NilInt32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ListList: Int16List->Int64List */ func MapInt64ListToInt16ListList(m Int16ListList, f func(Int16List) Int64List) Int64ListList { acc := NilInt64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ListList: Int16List->UintList */ func MapUintListToInt16ListList(m Int16ListList, f func(Int16List) UintList) UintListList { acc := NilUintListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ListList: Int16List->Uint8List */ func MapUint8ListToInt16ListList(m Int16ListList, f func(Int16List) Uint8List) Uint8ListList { acc := NilUint8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ListList: Int16List->Uint16List */ func MapUint16ListToInt16ListList(m Int16ListList, f func(Int16List) Uint16List) Uint16ListList { acc := NilUint16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ListList: Int16List->Uint32List */ func MapUint32ListToInt16ListList(m Int16ListList, f func(Int16List) Uint32List) Uint32ListList { acc := NilUint32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ListList: Int16List->Uint64List */ func MapUint64ListToInt16ListList(m Int16ListList, f func(Int16List) Uint64List) Uint64ListList { acc := NilUint64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ListList: Int16List->UintptrList */ func MapUintptrListToInt16ListList(m Int16ListList, f func(Int16List) UintptrList) UintptrListList { acc := NilUintptrListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ListList: Int16List->ByteList */ func MapByteListToInt16ListList(m Int16ListList, f func(Int16List) ByteList) ByteListList { acc := NilByteListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ListList: Int16List->RuneList */ func MapRuneListToInt16ListList(m Int16ListList, f func(Int16List) RuneList) RuneListList { acc := NilRuneListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ListList: Int16List->Float32List */ func MapFloat32ListToInt16ListList(m Int16ListList, f func(Int16List) Float32List) Float32ListList { acc := NilFloat32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ListList: Int16List->Float64List */ func MapFloat64ListToInt16ListList(m Int16ListList, f func(Int16List) Float64List) Float64ListList { acc := NilFloat64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ListList: Int16List->Complex64List */ func MapComplex64ListToInt16ListList(m Int16ListList, f func(Int16List) Complex64List) Complex64ListList { acc := NilComplex64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ListList: Int16List->Complex128List */ func MapComplex128ListToInt16ListList(m Int16ListList, f func(Int16List) Complex128List) Complex128ListList { acc := NilComplex128ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int16ListList: Int16List->AnyList */ func MapAnyListToInt16ListList(m Int16ListList, f func(Int16List) AnyList) AnyListList { acc := NilAnyListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ListList: Int32List->bool */ func MapBoolToInt32ListList(m Int32ListList, f func(Int32List) bool) BoolList { acc := NilBoolList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ListList: Int32List->string */ func MapStringToInt32ListList(m Int32ListList, f func(Int32List) string) StringList { acc := NilStringList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ListList: Int32List->int */ func MapIntToInt32ListList(m Int32ListList, f func(Int32List) int) IntList { acc := NilIntList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ListList: Int32List->int8 */ func MapInt8ToInt32ListList(m Int32ListList, f func(Int32List) int8) Int8List { acc := NilInt8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ListList: Int32List->int16 */ func MapInt16ToInt32ListList(m Int32ListList, f func(Int32List) int16) Int16List { acc := NilInt16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ListList: Int32List->int32 */ func MapInt32ToInt32ListList(m Int32ListList, f func(Int32List) int32) Int32List { acc := NilInt32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ListList: Int32List->int64 */ func MapInt64ToInt32ListList(m Int32ListList, f func(Int32List) int64) Int64List { acc := NilInt64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ListList: Int32List->uint */ func MapUintToInt32ListList(m Int32ListList, f func(Int32List) uint) UintList { acc := NilUintList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ListList: Int32List->uint8 */ func MapUint8ToInt32ListList(m Int32ListList, f func(Int32List) uint8) Uint8List { acc := NilUint8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ListList: Int32List->uint16 */ func MapUint16ToInt32ListList(m Int32ListList, f func(Int32List) uint16) Uint16List { acc := NilUint16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ListList: Int32List->uint32 */ func MapUint32ToInt32ListList(m Int32ListList, f func(Int32List) uint32) Uint32List { acc := NilUint32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ListList: Int32List->uint64 */ func MapUint64ToInt32ListList(m Int32ListList, f func(Int32List) uint64) Uint64List { acc := NilUint64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ListList: Int32List->uintptr */ func MapUintptrToInt32ListList(m Int32ListList, f func(Int32List) uintptr) UintptrList { acc := NilUintptrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ListList: Int32List->byte */ func MapByteToInt32ListList(m Int32ListList, f func(Int32List) byte) ByteList { acc := NilByteList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ListList: Int32List->rune */ func MapRuneToInt32ListList(m Int32ListList, f func(Int32List) rune) RuneList { acc := NilRuneList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ListList: Int32List->float32 */ func MapFloat32ToInt32ListList(m Int32ListList, f func(Int32List) float32) Float32List { acc := NilFloat32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ListList: Int32List->float64 */ func MapFloat64ToInt32ListList(m Int32ListList, f func(Int32List) float64) Float64List { acc := NilFloat64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ListList: Int32List->complex64 */ func MapComplex64ToInt32ListList(m Int32ListList, f func(Int32List) complex64) Complex64List { acc := NilComplex64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ListList: Int32List->complex128 */ func MapComplex128ToInt32ListList(m Int32ListList, f func(Int32List) complex128) Complex128List { acc := NilComplex128List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ListList: Int32List->Any */ func MapAnyToInt32ListList(m Int32ListList, f func(Int32List) Any) AnyList { acc := NilAnyList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ListList: Int32List->BoolOption */ func MapBoolOptionToInt32ListList(m Int32ListList, f func(Int32List) BoolOption) BoolOptionList { acc := NilBoolOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ListList: Int32List->StringOption */ func MapStringOptionToInt32ListList(m Int32ListList, f func(Int32List) StringOption) StringOptionList { acc := NilStringOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ListList: Int32List->IntOption */ func MapIntOptionToInt32ListList(m Int32ListList, f func(Int32List) IntOption) IntOptionList { acc := NilIntOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ListList: Int32List->Int8Option */ func MapInt8OptionToInt32ListList(m Int32ListList, f func(Int32List) Int8Option) Int8OptionList { acc := NilInt8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ListList: Int32List->Int16Option */ func MapInt16OptionToInt32ListList(m Int32ListList, f func(Int32List) Int16Option) Int16OptionList { acc := NilInt16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ListList: Int32List->Int32Option */ func MapInt32OptionToInt32ListList(m Int32ListList, f func(Int32List) Int32Option) Int32OptionList { acc := NilInt32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ListList: Int32List->Int64Option */ func MapInt64OptionToInt32ListList(m Int32ListList, f func(Int32List) Int64Option) Int64OptionList { acc := NilInt64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ListList: Int32List->UintOption */ func MapUintOptionToInt32ListList(m Int32ListList, f func(Int32List) UintOption) UintOptionList { acc := NilUintOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ListList: Int32List->Uint8Option */ func MapUint8OptionToInt32ListList(m Int32ListList, f func(Int32List) Uint8Option) Uint8OptionList { acc := NilUint8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ListList: Int32List->Uint16Option */ func MapUint16OptionToInt32ListList(m Int32ListList, f func(Int32List) Uint16Option) Uint16OptionList { acc := NilUint16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ListList: Int32List->Uint32Option */ func MapUint32OptionToInt32ListList(m Int32ListList, f func(Int32List) Uint32Option) Uint32OptionList { acc := NilUint32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ListList: Int32List->Uint64Option */ func MapUint64OptionToInt32ListList(m Int32ListList, f func(Int32List) Uint64Option) Uint64OptionList { acc := NilUint64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ListList: Int32List->UintptrOption */ func MapUintptrOptionToInt32ListList(m Int32ListList, f func(Int32List) UintptrOption) UintptrOptionList { acc := NilUintptrOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ListList: Int32List->ByteOption */ func MapByteOptionToInt32ListList(m Int32ListList, f func(Int32List) ByteOption) ByteOptionList { acc := NilByteOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ListList: Int32List->RuneOption */ func MapRuneOptionToInt32ListList(m Int32ListList, f func(Int32List) RuneOption) RuneOptionList { acc := NilRuneOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ListList: Int32List->Float32Option */ func MapFloat32OptionToInt32ListList(m Int32ListList, f func(Int32List) Float32Option) Float32OptionList { acc := NilFloat32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ListList: Int32List->Float64Option */ func MapFloat64OptionToInt32ListList(m Int32ListList, f func(Int32List) Float64Option) Float64OptionList { acc := NilFloat64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ListList: Int32List->Complex64Option */ func MapComplex64OptionToInt32ListList(m Int32ListList, f func(Int32List) Complex64Option) Complex64OptionList { acc := NilComplex64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ListList: Int32List->Complex128Option */ func MapComplex128OptionToInt32ListList(m Int32ListList, f func(Int32List) Complex128Option) Complex128OptionList { acc := NilComplex128OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ListList: Int32List->AnyOption */ func MapAnyOptionToInt32ListList(m Int32ListList, f func(Int32List) AnyOption) AnyOptionList { acc := NilAnyOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ListList: Int32List->[]bool */ func MapBoolArrToInt32ListList(m Int32ListList, f func(Int32List) []bool) BoolArrList { acc := NilBoolArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ListList: Int32List->[]string */ func MapStringArrToInt32ListList(m Int32ListList, f func(Int32List) []string) StringArrList { acc := NilStringArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ListList: Int32List->[]int */ func MapIntArrToInt32ListList(m Int32ListList, f func(Int32List) []int) IntArrList { acc := NilIntArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ListList: Int32List->[]int8 */ func MapInt8ArrToInt32ListList(m Int32ListList, f func(Int32List) []int8) Int8ArrList { acc := NilInt8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ListList: Int32List->[]int16 */ func MapInt16ArrToInt32ListList(m Int32ListList, f func(Int32List) []int16) Int16ArrList { acc := NilInt16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ListList: Int32List->[]int32 */ func MapInt32ArrToInt32ListList(m Int32ListList, f func(Int32List) []int32) Int32ArrList { acc := NilInt32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ListList: Int32List->[]int64 */ func MapInt64ArrToInt32ListList(m Int32ListList, f func(Int32List) []int64) Int64ArrList { acc := NilInt64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ListList: Int32List->[]uint */ func MapUintArrToInt32ListList(m Int32ListList, f func(Int32List) []uint) UintArrList { acc := NilUintArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ListList: Int32List->[]uint8 */ func MapUint8ArrToInt32ListList(m Int32ListList, f func(Int32List) []uint8) Uint8ArrList { acc := NilUint8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ListList: Int32List->[]uint16 */ func MapUint16ArrToInt32ListList(m Int32ListList, f func(Int32List) []uint16) Uint16ArrList { acc := NilUint16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ListList: Int32List->[]uint32 */ func MapUint32ArrToInt32ListList(m Int32ListList, f func(Int32List) []uint32) Uint32ArrList { acc := NilUint32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ListList: Int32List->[]uint64 */ func MapUint64ArrToInt32ListList(m Int32ListList, f func(Int32List) []uint64) Uint64ArrList { acc := NilUint64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ListList: Int32List->[]uintptr */ func MapUintptrArrToInt32ListList(m Int32ListList, f func(Int32List) []uintptr) UintptrArrList { acc := NilUintptrArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ListList: Int32List->[]byte */ func MapByteArrToInt32ListList(m Int32ListList, f func(Int32List) []byte) ByteArrList { acc := NilByteArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ListList: Int32List->[]rune */ func MapRuneArrToInt32ListList(m Int32ListList, f func(Int32List) []rune) RuneArrList { acc := NilRuneArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ListList: Int32List->[]float32 */ func MapFloat32ArrToInt32ListList(m Int32ListList, f func(Int32List) []float32) Float32ArrList { acc := NilFloat32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ListList: Int32List->[]float64 */ func MapFloat64ArrToInt32ListList(m Int32ListList, f func(Int32List) []float64) Float64ArrList { acc := NilFloat64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ListList: Int32List->[]complex64 */ func MapComplex64ArrToInt32ListList(m Int32ListList, f func(Int32List) []complex64) Complex64ArrList { acc := NilComplex64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ListList: Int32List->[]complex128 */ func MapComplex128ArrToInt32ListList(m Int32ListList, f func(Int32List) []complex128) Complex128ArrList { acc := NilComplex128ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ListList: Int32List->[]Any */ func MapAnyArrToInt32ListList(m Int32ListList, f func(Int32List) []Any) AnyArrList { acc := NilAnyArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ListList: Int32List->BoolList */ func MapBoolListToInt32ListList(m Int32ListList, f func(Int32List) BoolList) BoolListList { acc := NilBoolListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ListList: Int32List->StringList */ func MapStringListToInt32ListList(m Int32ListList, f func(Int32List) StringList) StringListList { acc := NilStringListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ListList: Int32List->IntList */ func MapIntListToInt32ListList(m Int32ListList, f func(Int32List) IntList) IntListList { acc := NilIntListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ListList: Int32List->Int8List */ func MapInt8ListToInt32ListList(m Int32ListList, f func(Int32List) Int8List) Int8ListList { acc := NilInt8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ListList: Int32List->Int16List */ func MapInt16ListToInt32ListList(m Int32ListList, f func(Int32List) Int16List) Int16ListList { acc := NilInt16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ListList: Int32List->Int32List */ func MapInt32ListToInt32ListList(m Int32ListList, f func(Int32List) Int32List) Int32ListList { acc := NilInt32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ListList: Int32List->Int64List */ func MapInt64ListToInt32ListList(m Int32ListList, f func(Int32List) Int64List) Int64ListList { acc := NilInt64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ListList: Int32List->UintList */ func MapUintListToInt32ListList(m Int32ListList, f func(Int32List) UintList) UintListList { acc := NilUintListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ListList: Int32List->Uint8List */ func MapUint8ListToInt32ListList(m Int32ListList, f func(Int32List) Uint8List) Uint8ListList { acc := NilUint8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ListList: Int32List->Uint16List */ func MapUint16ListToInt32ListList(m Int32ListList, f func(Int32List) Uint16List) Uint16ListList { acc := NilUint16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ListList: Int32List->Uint32List */ func MapUint32ListToInt32ListList(m Int32ListList, f func(Int32List) Uint32List) Uint32ListList { acc := NilUint32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ListList: Int32List->Uint64List */ func MapUint64ListToInt32ListList(m Int32ListList, f func(Int32List) Uint64List) Uint64ListList { acc := NilUint64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ListList: Int32List->UintptrList */ func MapUintptrListToInt32ListList(m Int32ListList, f func(Int32List) UintptrList) UintptrListList { acc := NilUintptrListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ListList: Int32List->ByteList */ func MapByteListToInt32ListList(m Int32ListList, f func(Int32List) ByteList) ByteListList { acc := NilByteListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ListList: Int32List->RuneList */ func MapRuneListToInt32ListList(m Int32ListList, f func(Int32List) RuneList) RuneListList { acc := NilRuneListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ListList: Int32List->Float32List */ func MapFloat32ListToInt32ListList(m Int32ListList, f func(Int32List) Float32List) Float32ListList { acc := NilFloat32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ListList: Int32List->Float64List */ func MapFloat64ListToInt32ListList(m Int32ListList, f func(Int32List) Float64List) Float64ListList { acc := NilFloat64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ListList: Int32List->Complex64List */ func MapComplex64ListToInt32ListList(m Int32ListList, f func(Int32List) Complex64List) Complex64ListList { acc := NilComplex64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ListList: Int32List->Complex128List */ func MapComplex128ListToInt32ListList(m Int32ListList, f func(Int32List) Complex128List) Complex128ListList { acc := NilComplex128ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int32ListList: Int32List->AnyList */ func MapAnyListToInt32ListList(m Int32ListList, f func(Int32List) AnyList) AnyListList { acc := NilAnyListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ListList: Int64List->bool */ func MapBoolToInt64ListList(m Int64ListList, f func(Int64List) bool) BoolList { acc := NilBoolList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ListList: Int64List->string */ func MapStringToInt64ListList(m Int64ListList, f func(Int64List) string) StringList { acc := NilStringList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ListList: Int64List->int */ func MapIntToInt64ListList(m Int64ListList, f func(Int64List) int) IntList { acc := NilIntList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ListList: Int64List->int8 */ func MapInt8ToInt64ListList(m Int64ListList, f func(Int64List) int8) Int8List { acc := NilInt8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ListList: Int64List->int16 */ func MapInt16ToInt64ListList(m Int64ListList, f func(Int64List) int16) Int16List { acc := NilInt16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ListList: Int64List->int32 */ func MapInt32ToInt64ListList(m Int64ListList, f func(Int64List) int32) Int32List { acc := NilInt32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ListList: Int64List->int64 */ func MapInt64ToInt64ListList(m Int64ListList, f func(Int64List) int64) Int64List { acc := NilInt64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ListList: Int64List->uint */ func MapUintToInt64ListList(m Int64ListList, f func(Int64List) uint) UintList { acc := NilUintList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ListList: Int64List->uint8 */ func MapUint8ToInt64ListList(m Int64ListList, f func(Int64List) uint8) Uint8List { acc := NilUint8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ListList: Int64List->uint16 */ func MapUint16ToInt64ListList(m Int64ListList, f func(Int64List) uint16) Uint16List { acc := NilUint16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ListList: Int64List->uint32 */ func MapUint32ToInt64ListList(m Int64ListList, f func(Int64List) uint32) Uint32List { acc := NilUint32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ListList: Int64List->uint64 */ func MapUint64ToInt64ListList(m Int64ListList, f func(Int64List) uint64) Uint64List { acc := NilUint64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ListList: Int64List->uintptr */ func MapUintptrToInt64ListList(m Int64ListList, f func(Int64List) uintptr) UintptrList { acc := NilUintptrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ListList: Int64List->byte */ func MapByteToInt64ListList(m Int64ListList, f func(Int64List) byte) ByteList { acc := NilByteList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ListList: Int64List->rune */ func MapRuneToInt64ListList(m Int64ListList, f func(Int64List) rune) RuneList { acc := NilRuneList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ListList: Int64List->float32 */ func MapFloat32ToInt64ListList(m Int64ListList, f func(Int64List) float32) Float32List { acc := NilFloat32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ListList: Int64List->float64 */ func MapFloat64ToInt64ListList(m Int64ListList, f func(Int64List) float64) Float64List { acc := NilFloat64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ListList: Int64List->complex64 */ func MapComplex64ToInt64ListList(m Int64ListList, f func(Int64List) complex64) Complex64List { acc := NilComplex64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ListList: Int64List->complex128 */ func MapComplex128ToInt64ListList(m Int64ListList, f func(Int64List) complex128) Complex128List { acc := NilComplex128List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ListList: Int64List->Any */ func MapAnyToInt64ListList(m Int64ListList, f func(Int64List) Any) AnyList { acc := NilAnyList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ListList: Int64List->BoolOption */ func MapBoolOptionToInt64ListList(m Int64ListList, f func(Int64List) BoolOption) BoolOptionList { acc := NilBoolOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ListList: Int64List->StringOption */ func MapStringOptionToInt64ListList(m Int64ListList, f func(Int64List) StringOption) StringOptionList { acc := NilStringOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ListList: Int64List->IntOption */ func MapIntOptionToInt64ListList(m Int64ListList, f func(Int64List) IntOption) IntOptionList { acc := NilIntOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ListList: Int64List->Int8Option */ func MapInt8OptionToInt64ListList(m Int64ListList, f func(Int64List) Int8Option) Int8OptionList { acc := NilInt8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ListList: Int64List->Int16Option */ func MapInt16OptionToInt64ListList(m Int64ListList, f func(Int64List) Int16Option) Int16OptionList { acc := NilInt16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ListList: Int64List->Int32Option */ func MapInt32OptionToInt64ListList(m Int64ListList, f func(Int64List) Int32Option) Int32OptionList { acc := NilInt32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ListList: Int64List->Int64Option */ func MapInt64OptionToInt64ListList(m Int64ListList, f func(Int64List) Int64Option) Int64OptionList { acc := NilInt64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ListList: Int64List->UintOption */ func MapUintOptionToInt64ListList(m Int64ListList, f func(Int64List) UintOption) UintOptionList { acc := NilUintOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ListList: Int64List->Uint8Option */ func MapUint8OptionToInt64ListList(m Int64ListList, f func(Int64List) Uint8Option) Uint8OptionList { acc := NilUint8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ListList: Int64List->Uint16Option */ func MapUint16OptionToInt64ListList(m Int64ListList, f func(Int64List) Uint16Option) Uint16OptionList { acc := NilUint16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ListList: Int64List->Uint32Option */ func MapUint32OptionToInt64ListList(m Int64ListList, f func(Int64List) Uint32Option) Uint32OptionList { acc := NilUint32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ListList: Int64List->Uint64Option */ func MapUint64OptionToInt64ListList(m Int64ListList, f func(Int64List) Uint64Option) Uint64OptionList { acc := NilUint64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ListList: Int64List->UintptrOption */ func MapUintptrOptionToInt64ListList(m Int64ListList, f func(Int64List) UintptrOption) UintptrOptionList { acc := NilUintptrOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ListList: Int64List->ByteOption */ func MapByteOptionToInt64ListList(m Int64ListList, f func(Int64List) ByteOption) ByteOptionList { acc := NilByteOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ListList: Int64List->RuneOption */ func MapRuneOptionToInt64ListList(m Int64ListList, f func(Int64List) RuneOption) RuneOptionList { acc := NilRuneOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ListList: Int64List->Float32Option */ func MapFloat32OptionToInt64ListList(m Int64ListList, f func(Int64List) Float32Option) Float32OptionList { acc := NilFloat32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ListList: Int64List->Float64Option */ func MapFloat64OptionToInt64ListList(m Int64ListList, f func(Int64List) Float64Option) Float64OptionList { acc := NilFloat64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ListList: Int64List->Complex64Option */ func MapComplex64OptionToInt64ListList(m Int64ListList, f func(Int64List) Complex64Option) Complex64OptionList { acc := NilComplex64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ListList: Int64List->Complex128Option */ func MapComplex128OptionToInt64ListList(m Int64ListList, f func(Int64List) Complex128Option) Complex128OptionList { acc := NilComplex128OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ListList: Int64List->AnyOption */ func MapAnyOptionToInt64ListList(m Int64ListList, f func(Int64List) AnyOption) AnyOptionList { acc := NilAnyOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ListList: Int64List->[]bool */ func MapBoolArrToInt64ListList(m Int64ListList, f func(Int64List) []bool) BoolArrList { acc := NilBoolArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ListList: Int64List->[]string */ func MapStringArrToInt64ListList(m Int64ListList, f func(Int64List) []string) StringArrList { acc := NilStringArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ListList: Int64List->[]int */ func MapIntArrToInt64ListList(m Int64ListList, f func(Int64List) []int) IntArrList { acc := NilIntArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ListList: Int64List->[]int8 */ func MapInt8ArrToInt64ListList(m Int64ListList, f func(Int64List) []int8) Int8ArrList { acc := NilInt8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ListList: Int64List->[]int16 */ func MapInt16ArrToInt64ListList(m Int64ListList, f func(Int64List) []int16) Int16ArrList { acc := NilInt16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ListList: Int64List->[]int32 */ func MapInt32ArrToInt64ListList(m Int64ListList, f func(Int64List) []int32) Int32ArrList { acc := NilInt32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ListList: Int64List->[]int64 */ func MapInt64ArrToInt64ListList(m Int64ListList, f func(Int64List) []int64) Int64ArrList { acc := NilInt64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ListList: Int64List->[]uint */ func MapUintArrToInt64ListList(m Int64ListList, f func(Int64List) []uint) UintArrList { acc := NilUintArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ListList: Int64List->[]uint8 */ func MapUint8ArrToInt64ListList(m Int64ListList, f func(Int64List) []uint8) Uint8ArrList { acc := NilUint8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ListList: Int64List->[]uint16 */ func MapUint16ArrToInt64ListList(m Int64ListList, f func(Int64List) []uint16) Uint16ArrList { acc := NilUint16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ListList: Int64List->[]uint32 */ func MapUint32ArrToInt64ListList(m Int64ListList, f func(Int64List) []uint32) Uint32ArrList { acc := NilUint32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ListList: Int64List->[]uint64 */ func MapUint64ArrToInt64ListList(m Int64ListList, f func(Int64List) []uint64) Uint64ArrList { acc := NilUint64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ListList: Int64List->[]uintptr */ func MapUintptrArrToInt64ListList(m Int64ListList, f func(Int64List) []uintptr) UintptrArrList { acc := NilUintptrArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ListList: Int64List->[]byte */ func MapByteArrToInt64ListList(m Int64ListList, f func(Int64List) []byte) ByteArrList { acc := NilByteArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ListList: Int64List->[]rune */ func MapRuneArrToInt64ListList(m Int64ListList, f func(Int64List) []rune) RuneArrList { acc := NilRuneArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ListList: Int64List->[]float32 */ func MapFloat32ArrToInt64ListList(m Int64ListList, f func(Int64List) []float32) Float32ArrList { acc := NilFloat32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ListList: Int64List->[]float64 */ func MapFloat64ArrToInt64ListList(m Int64ListList, f func(Int64List) []float64) Float64ArrList { acc := NilFloat64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ListList: Int64List->[]complex64 */ func MapComplex64ArrToInt64ListList(m Int64ListList, f func(Int64List) []complex64) Complex64ArrList { acc := NilComplex64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ListList: Int64List->[]complex128 */ func MapComplex128ArrToInt64ListList(m Int64ListList, f func(Int64List) []complex128) Complex128ArrList { acc := NilComplex128ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ListList: Int64List->[]Any */ func MapAnyArrToInt64ListList(m Int64ListList, f func(Int64List) []Any) AnyArrList { acc := NilAnyArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ListList: Int64List->BoolList */ func MapBoolListToInt64ListList(m Int64ListList, f func(Int64List) BoolList) BoolListList { acc := NilBoolListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ListList: Int64List->StringList */ func MapStringListToInt64ListList(m Int64ListList, f func(Int64List) StringList) StringListList { acc := NilStringListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ListList: Int64List->IntList */ func MapIntListToInt64ListList(m Int64ListList, f func(Int64List) IntList) IntListList { acc := NilIntListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ListList: Int64List->Int8List */ func MapInt8ListToInt64ListList(m Int64ListList, f func(Int64List) Int8List) Int8ListList { acc := NilInt8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ListList: Int64List->Int16List */ func MapInt16ListToInt64ListList(m Int64ListList, f func(Int64List) Int16List) Int16ListList { acc := NilInt16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ListList: Int64List->Int32List */ func MapInt32ListToInt64ListList(m Int64ListList, f func(Int64List) Int32List) Int32ListList { acc := NilInt32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ListList: Int64List->Int64List */ func MapInt64ListToInt64ListList(m Int64ListList, f func(Int64List) Int64List) Int64ListList { acc := NilInt64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ListList: Int64List->UintList */ func MapUintListToInt64ListList(m Int64ListList, f func(Int64List) UintList) UintListList { acc := NilUintListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ListList: Int64List->Uint8List */ func MapUint8ListToInt64ListList(m Int64ListList, f func(Int64List) Uint8List) Uint8ListList { acc := NilUint8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ListList: Int64List->Uint16List */ func MapUint16ListToInt64ListList(m Int64ListList, f func(Int64List) Uint16List) Uint16ListList { acc := NilUint16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ListList: Int64List->Uint32List */ func MapUint32ListToInt64ListList(m Int64ListList, f func(Int64List) Uint32List) Uint32ListList { acc := NilUint32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ListList: Int64List->Uint64List */ func MapUint64ListToInt64ListList(m Int64ListList, f func(Int64List) Uint64List) Uint64ListList { acc := NilUint64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ListList: Int64List->UintptrList */ func MapUintptrListToInt64ListList(m Int64ListList, f func(Int64List) UintptrList) UintptrListList { acc := NilUintptrListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ListList: Int64List->ByteList */ func MapByteListToInt64ListList(m Int64ListList, f func(Int64List) ByteList) ByteListList { acc := NilByteListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ListList: Int64List->RuneList */ func MapRuneListToInt64ListList(m Int64ListList, f func(Int64List) RuneList) RuneListList { acc := NilRuneListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ListList: Int64List->Float32List */ func MapFloat32ListToInt64ListList(m Int64ListList, f func(Int64List) Float32List) Float32ListList { acc := NilFloat32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ListList: Int64List->Float64List */ func MapFloat64ListToInt64ListList(m Int64ListList, f func(Int64List) Float64List) Float64ListList { acc := NilFloat64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ListList: Int64List->Complex64List */ func MapComplex64ListToInt64ListList(m Int64ListList, f func(Int64List) Complex64List) Complex64ListList { acc := NilComplex64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ListList: Int64List->Complex128List */ func MapComplex128ListToInt64ListList(m Int64ListList, f func(Int64List) Complex128List) Complex128ListList { acc := NilComplex128ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Int64ListList: Int64List->AnyList */ func MapAnyListToInt64ListList(m Int64ListList, f func(Int64List) AnyList) AnyListList { acc := NilAnyListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintListList: UintList->bool */ func MapBoolToUintListList(m UintListList, f func(UintList) bool) BoolList { acc := NilBoolList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintListList: UintList->string */ func MapStringToUintListList(m UintListList, f func(UintList) string) StringList { acc := NilStringList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintListList: UintList->int */ func MapIntToUintListList(m UintListList, f func(UintList) int) IntList { acc := NilIntList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintListList: UintList->int8 */ func MapInt8ToUintListList(m UintListList, f func(UintList) int8) Int8List { acc := NilInt8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintListList: UintList->int16 */ func MapInt16ToUintListList(m UintListList, f func(UintList) int16) Int16List { acc := NilInt16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintListList: UintList->int32 */ func MapInt32ToUintListList(m UintListList, f func(UintList) int32) Int32List { acc := NilInt32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintListList: UintList->int64 */ func MapInt64ToUintListList(m UintListList, f func(UintList) int64) Int64List { acc := NilInt64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintListList: UintList->uint */ func MapUintToUintListList(m UintListList, f func(UintList) uint) UintList { acc := NilUintList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintListList: UintList->uint8 */ func MapUint8ToUintListList(m UintListList, f func(UintList) uint8) Uint8List { acc := NilUint8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintListList: UintList->uint16 */ func MapUint16ToUintListList(m UintListList, f func(UintList) uint16) Uint16List { acc := NilUint16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintListList: UintList->uint32 */ func MapUint32ToUintListList(m UintListList, f func(UintList) uint32) Uint32List { acc := NilUint32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintListList: UintList->uint64 */ func MapUint64ToUintListList(m UintListList, f func(UintList) uint64) Uint64List { acc := NilUint64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintListList: UintList->uintptr */ func MapUintptrToUintListList(m UintListList, f func(UintList) uintptr) UintptrList { acc := NilUintptrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintListList: UintList->byte */ func MapByteToUintListList(m UintListList, f func(UintList) byte) ByteList { acc := NilByteList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintListList: UintList->rune */ func MapRuneToUintListList(m UintListList, f func(UintList) rune) RuneList { acc := NilRuneList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintListList: UintList->float32 */ func MapFloat32ToUintListList(m UintListList, f func(UintList) float32) Float32List { acc := NilFloat32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintListList: UintList->float64 */ func MapFloat64ToUintListList(m UintListList, f func(UintList) float64) Float64List { acc := NilFloat64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintListList: UintList->complex64 */ func MapComplex64ToUintListList(m UintListList, f func(UintList) complex64) Complex64List { acc := NilComplex64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintListList: UintList->complex128 */ func MapComplex128ToUintListList(m UintListList, f func(UintList) complex128) Complex128List { acc := NilComplex128List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintListList: UintList->Any */ func MapAnyToUintListList(m UintListList, f func(UintList) Any) AnyList { acc := NilAnyList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintListList: UintList->BoolOption */ func MapBoolOptionToUintListList(m UintListList, f func(UintList) BoolOption) BoolOptionList { acc := NilBoolOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintListList: UintList->StringOption */ func MapStringOptionToUintListList(m UintListList, f func(UintList) StringOption) StringOptionList { acc := NilStringOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintListList: UintList->IntOption */ func MapIntOptionToUintListList(m UintListList, f func(UintList) IntOption) IntOptionList { acc := NilIntOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintListList: UintList->Int8Option */ func MapInt8OptionToUintListList(m UintListList, f func(UintList) Int8Option) Int8OptionList { acc := NilInt8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintListList: UintList->Int16Option */ func MapInt16OptionToUintListList(m UintListList, f func(UintList) Int16Option) Int16OptionList { acc := NilInt16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintListList: UintList->Int32Option */ func MapInt32OptionToUintListList(m UintListList, f func(UintList) Int32Option) Int32OptionList { acc := NilInt32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintListList: UintList->Int64Option */ func MapInt64OptionToUintListList(m UintListList, f func(UintList) Int64Option) Int64OptionList { acc := NilInt64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintListList: UintList->UintOption */ func MapUintOptionToUintListList(m UintListList, f func(UintList) UintOption) UintOptionList { acc := NilUintOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintListList: UintList->Uint8Option */ func MapUint8OptionToUintListList(m UintListList, f func(UintList) Uint8Option) Uint8OptionList { acc := NilUint8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintListList: UintList->Uint16Option */ func MapUint16OptionToUintListList(m UintListList, f func(UintList) Uint16Option) Uint16OptionList { acc := NilUint16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintListList: UintList->Uint32Option */ func MapUint32OptionToUintListList(m UintListList, f func(UintList) Uint32Option) Uint32OptionList { acc := NilUint32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintListList: UintList->Uint64Option */ func MapUint64OptionToUintListList(m UintListList, f func(UintList) Uint64Option) Uint64OptionList { acc := NilUint64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintListList: UintList->UintptrOption */ func MapUintptrOptionToUintListList(m UintListList, f func(UintList) UintptrOption) UintptrOptionList { acc := NilUintptrOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintListList: UintList->ByteOption */ func MapByteOptionToUintListList(m UintListList, f func(UintList) ByteOption) ByteOptionList { acc := NilByteOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintListList: UintList->RuneOption */ func MapRuneOptionToUintListList(m UintListList, f func(UintList) RuneOption) RuneOptionList { acc := NilRuneOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintListList: UintList->Float32Option */ func MapFloat32OptionToUintListList(m UintListList, f func(UintList) Float32Option) Float32OptionList { acc := NilFloat32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintListList: UintList->Float64Option */ func MapFloat64OptionToUintListList(m UintListList, f func(UintList) Float64Option) Float64OptionList { acc := NilFloat64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintListList: UintList->Complex64Option */ func MapComplex64OptionToUintListList(m UintListList, f func(UintList) Complex64Option) Complex64OptionList { acc := NilComplex64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintListList: UintList->Complex128Option */ func MapComplex128OptionToUintListList(m UintListList, f func(UintList) Complex128Option) Complex128OptionList { acc := NilComplex128OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintListList: UintList->AnyOption */ func MapAnyOptionToUintListList(m UintListList, f func(UintList) AnyOption) AnyOptionList { acc := NilAnyOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintListList: UintList->[]bool */ func MapBoolArrToUintListList(m UintListList, f func(UintList) []bool) BoolArrList { acc := NilBoolArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintListList: UintList->[]string */ func MapStringArrToUintListList(m UintListList, f func(UintList) []string) StringArrList { acc := NilStringArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintListList: UintList->[]int */ func MapIntArrToUintListList(m UintListList, f func(UintList) []int) IntArrList { acc := NilIntArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintListList: UintList->[]int8 */ func MapInt8ArrToUintListList(m UintListList, f func(UintList) []int8) Int8ArrList { acc := NilInt8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintListList: UintList->[]int16 */ func MapInt16ArrToUintListList(m UintListList, f func(UintList) []int16) Int16ArrList { acc := NilInt16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintListList: UintList->[]int32 */ func MapInt32ArrToUintListList(m UintListList, f func(UintList) []int32) Int32ArrList { acc := NilInt32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintListList: UintList->[]int64 */ func MapInt64ArrToUintListList(m UintListList, f func(UintList) []int64) Int64ArrList { acc := NilInt64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintListList: UintList->[]uint */ func MapUintArrToUintListList(m UintListList, f func(UintList) []uint) UintArrList { acc := NilUintArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintListList: UintList->[]uint8 */ func MapUint8ArrToUintListList(m UintListList, f func(UintList) []uint8) Uint8ArrList { acc := NilUint8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintListList: UintList->[]uint16 */ func MapUint16ArrToUintListList(m UintListList, f func(UintList) []uint16) Uint16ArrList { acc := NilUint16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintListList: UintList->[]uint32 */ func MapUint32ArrToUintListList(m UintListList, f func(UintList) []uint32) Uint32ArrList { acc := NilUint32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintListList: UintList->[]uint64 */ func MapUint64ArrToUintListList(m UintListList, f func(UintList) []uint64) Uint64ArrList { acc := NilUint64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintListList: UintList->[]uintptr */ func MapUintptrArrToUintListList(m UintListList, f func(UintList) []uintptr) UintptrArrList { acc := NilUintptrArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintListList: UintList->[]byte */ func MapByteArrToUintListList(m UintListList, f func(UintList) []byte) ByteArrList { acc := NilByteArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintListList: UintList->[]rune */ func MapRuneArrToUintListList(m UintListList, f func(UintList) []rune) RuneArrList { acc := NilRuneArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintListList: UintList->[]float32 */ func MapFloat32ArrToUintListList(m UintListList, f func(UintList) []float32) Float32ArrList { acc := NilFloat32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintListList: UintList->[]float64 */ func MapFloat64ArrToUintListList(m UintListList, f func(UintList) []float64) Float64ArrList { acc := NilFloat64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintListList: UintList->[]complex64 */ func MapComplex64ArrToUintListList(m UintListList, f func(UintList) []complex64) Complex64ArrList { acc := NilComplex64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintListList: UintList->[]complex128 */ func MapComplex128ArrToUintListList(m UintListList, f func(UintList) []complex128) Complex128ArrList { acc := NilComplex128ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintListList: UintList->[]Any */ func MapAnyArrToUintListList(m UintListList, f func(UintList) []Any) AnyArrList { acc := NilAnyArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintListList: UintList->BoolList */ func MapBoolListToUintListList(m UintListList, f func(UintList) BoolList) BoolListList { acc := NilBoolListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintListList: UintList->StringList */ func MapStringListToUintListList(m UintListList, f func(UintList) StringList) StringListList { acc := NilStringListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintListList: UintList->IntList */ func MapIntListToUintListList(m UintListList, f func(UintList) IntList) IntListList { acc := NilIntListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintListList: UintList->Int8List */ func MapInt8ListToUintListList(m UintListList, f func(UintList) Int8List) Int8ListList { acc := NilInt8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintListList: UintList->Int16List */ func MapInt16ListToUintListList(m UintListList, f func(UintList) Int16List) Int16ListList { acc := NilInt16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintListList: UintList->Int32List */ func MapInt32ListToUintListList(m UintListList, f func(UintList) Int32List) Int32ListList { acc := NilInt32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintListList: UintList->Int64List */ func MapInt64ListToUintListList(m UintListList, f func(UintList) Int64List) Int64ListList { acc := NilInt64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintListList: UintList->UintList */ func MapUintListToUintListList(m UintListList, f func(UintList) UintList) UintListList { acc := NilUintListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintListList: UintList->Uint8List */ func MapUint8ListToUintListList(m UintListList, f func(UintList) Uint8List) Uint8ListList { acc := NilUint8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintListList: UintList->Uint16List */ func MapUint16ListToUintListList(m UintListList, f func(UintList) Uint16List) Uint16ListList { acc := NilUint16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintListList: UintList->Uint32List */ func MapUint32ListToUintListList(m UintListList, f func(UintList) Uint32List) Uint32ListList { acc := NilUint32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintListList: UintList->Uint64List */ func MapUint64ListToUintListList(m UintListList, f func(UintList) Uint64List) Uint64ListList { acc := NilUint64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintListList: UintList->UintptrList */ func MapUintptrListToUintListList(m UintListList, f func(UintList) UintptrList) UintptrListList { acc := NilUintptrListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintListList: UintList->ByteList */ func MapByteListToUintListList(m UintListList, f func(UintList) ByteList) ByteListList { acc := NilByteListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintListList: UintList->RuneList */ func MapRuneListToUintListList(m UintListList, f func(UintList) RuneList) RuneListList { acc := NilRuneListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintListList: UintList->Float32List */ func MapFloat32ListToUintListList(m UintListList, f func(UintList) Float32List) Float32ListList { acc := NilFloat32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintListList: UintList->Float64List */ func MapFloat64ListToUintListList(m UintListList, f func(UintList) Float64List) Float64ListList { acc := NilFloat64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintListList: UintList->Complex64List */ func MapComplex64ListToUintListList(m UintListList, f func(UintList) Complex64List) Complex64ListList { acc := NilComplex64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintListList: UintList->Complex128List */ func MapComplex128ListToUintListList(m UintListList, f func(UintList) Complex128List) Complex128ListList { acc := NilComplex128ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintListList: UintList->AnyList */ func MapAnyListToUintListList(m UintListList, f func(UintList) AnyList) AnyListList { acc := NilAnyListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ListList: Uint8List->bool */ func MapBoolToUint8ListList(m Uint8ListList, f func(Uint8List) bool) BoolList { acc := NilBoolList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ListList: Uint8List->string */ func MapStringToUint8ListList(m Uint8ListList, f func(Uint8List) string) StringList { acc := NilStringList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ListList: Uint8List->int */ func MapIntToUint8ListList(m Uint8ListList, f func(Uint8List) int) IntList { acc := NilIntList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ListList: Uint8List->int8 */ func MapInt8ToUint8ListList(m Uint8ListList, f func(Uint8List) int8) Int8List { acc := NilInt8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ListList: Uint8List->int16 */ func MapInt16ToUint8ListList(m Uint8ListList, f func(Uint8List) int16) Int16List { acc := NilInt16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ListList: Uint8List->int32 */ func MapInt32ToUint8ListList(m Uint8ListList, f func(Uint8List) int32) Int32List { acc := NilInt32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ListList: Uint8List->int64 */ func MapInt64ToUint8ListList(m Uint8ListList, f func(Uint8List) int64) Int64List { acc := NilInt64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ListList: Uint8List->uint */ func MapUintToUint8ListList(m Uint8ListList, f func(Uint8List) uint) UintList { acc := NilUintList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ListList: Uint8List->uint8 */ func MapUint8ToUint8ListList(m Uint8ListList, f func(Uint8List) uint8) Uint8List { acc := NilUint8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ListList: Uint8List->uint16 */ func MapUint16ToUint8ListList(m Uint8ListList, f func(Uint8List) uint16) Uint16List { acc := NilUint16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ListList: Uint8List->uint32 */ func MapUint32ToUint8ListList(m Uint8ListList, f func(Uint8List) uint32) Uint32List { acc := NilUint32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ListList: Uint8List->uint64 */ func MapUint64ToUint8ListList(m Uint8ListList, f func(Uint8List) uint64) Uint64List { acc := NilUint64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ListList: Uint8List->uintptr */ func MapUintptrToUint8ListList(m Uint8ListList, f func(Uint8List) uintptr) UintptrList { acc := NilUintptrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ListList: Uint8List->byte */ func MapByteToUint8ListList(m Uint8ListList, f func(Uint8List) byte) ByteList { acc := NilByteList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ListList: Uint8List->rune */ func MapRuneToUint8ListList(m Uint8ListList, f func(Uint8List) rune) RuneList { acc := NilRuneList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ListList: Uint8List->float32 */ func MapFloat32ToUint8ListList(m Uint8ListList, f func(Uint8List) float32) Float32List { acc := NilFloat32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ListList: Uint8List->float64 */ func MapFloat64ToUint8ListList(m Uint8ListList, f func(Uint8List) float64) Float64List { acc := NilFloat64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ListList: Uint8List->complex64 */ func MapComplex64ToUint8ListList(m Uint8ListList, f func(Uint8List) complex64) Complex64List { acc := NilComplex64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ListList: Uint8List->complex128 */ func MapComplex128ToUint8ListList(m Uint8ListList, f func(Uint8List) complex128) Complex128List { acc := NilComplex128List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ListList: Uint8List->Any */ func MapAnyToUint8ListList(m Uint8ListList, f func(Uint8List) Any) AnyList { acc := NilAnyList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ListList: Uint8List->BoolOption */ func MapBoolOptionToUint8ListList(m Uint8ListList, f func(Uint8List) BoolOption) BoolOptionList { acc := NilBoolOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ListList: Uint8List->StringOption */ func MapStringOptionToUint8ListList(m Uint8ListList, f func(Uint8List) StringOption) StringOptionList { acc := NilStringOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ListList: Uint8List->IntOption */ func MapIntOptionToUint8ListList(m Uint8ListList, f func(Uint8List) IntOption) IntOptionList { acc := NilIntOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ListList: Uint8List->Int8Option */ func MapInt8OptionToUint8ListList(m Uint8ListList, f func(Uint8List) Int8Option) Int8OptionList { acc := NilInt8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ListList: Uint8List->Int16Option */ func MapInt16OptionToUint8ListList(m Uint8ListList, f func(Uint8List) Int16Option) Int16OptionList { acc := NilInt16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ListList: Uint8List->Int32Option */ func MapInt32OptionToUint8ListList(m Uint8ListList, f func(Uint8List) Int32Option) Int32OptionList { acc := NilInt32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ListList: Uint8List->Int64Option */ func MapInt64OptionToUint8ListList(m Uint8ListList, f func(Uint8List) Int64Option) Int64OptionList { acc := NilInt64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ListList: Uint8List->UintOption */ func MapUintOptionToUint8ListList(m Uint8ListList, f func(Uint8List) UintOption) UintOptionList { acc := NilUintOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ListList: Uint8List->Uint8Option */ func MapUint8OptionToUint8ListList(m Uint8ListList, f func(Uint8List) Uint8Option) Uint8OptionList { acc := NilUint8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ListList: Uint8List->Uint16Option */ func MapUint16OptionToUint8ListList(m Uint8ListList, f func(Uint8List) Uint16Option) Uint16OptionList { acc := NilUint16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ListList: Uint8List->Uint32Option */ func MapUint32OptionToUint8ListList(m Uint8ListList, f func(Uint8List) Uint32Option) Uint32OptionList { acc := NilUint32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ListList: Uint8List->Uint64Option */ func MapUint64OptionToUint8ListList(m Uint8ListList, f func(Uint8List) Uint64Option) Uint64OptionList { acc := NilUint64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ListList: Uint8List->UintptrOption */ func MapUintptrOptionToUint8ListList(m Uint8ListList, f func(Uint8List) UintptrOption) UintptrOptionList { acc := NilUintptrOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ListList: Uint8List->ByteOption */ func MapByteOptionToUint8ListList(m Uint8ListList, f func(Uint8List) ByteOption) ByteOptionList { acc := NilByteOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ListList: Uint8List->RuneOption */ func MapRuneOptionToUint8ListList(m Uint8ListList, f func(Uint8List) RuneOption) RuneOptionList { acc := NilRuneOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ListList: Uint8List->Float32Option */ func MapFloat32OptionToUint8ListList(m Uint8ListList, f func(Uint8List) Float32Option) Float32OptionList { acc := NilFloat32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ListList: Uint8List->Float64Option */ func MapFloat64OptionToUint8ListList(m Uint8ListList, f func(Uint8List) Float64Option) Float64OptionList { acc := NilFloat64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ListList: Uint8List->Complex64Option */ func MapComplex64OptionToUint8ListList(m Uint8ListList, f func(Uint8List) Complex64Option) Complex64OptionList { acc := NilComplex64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ListList: Uint8List->Complex128Option */ func MapComplex128OptionToUint8ListList(m Uint8ListList, f func(Uint8List) Complex128Option) Complex128OptionList { acc := NilComplex128OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ListList: Uint8List->AnyOption */ func MapAnyOptionToUint8ListList(m Uint8ListList, f func(Uint8List) AnyOption) AnyOptionList { acc := NilAnyOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ListList: Uint8List->[]bool */ func MapBoolArrToUint8ListList(m Uint8ListList, f func(Uint8List) []bool) BoolArrList { acc := NilBoolArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ListList: Uint8List->[]string */ func MapStringArrToUint8ListList(m Uint8ListList, f func(Uint8List) []string) StringArrList { acc := NilStringArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ListList: Uint8List->[]int */ func MapIntArrToUint8ListList(m Uint8ListList, f func(Uint8List) []int) IntArrList { acc := NilIntArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ListList: Uint8List->[]int8 */ func MapInt8ArrToUint8ListList(m Uint8ListList, f func(Uint8List) []int8) Int8ArrList { acc := NilInt8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ListList: Uint8List->[]int16 */ func MapInt16ArrToUint8ListList(m Uint8ListList, f func(Uint8List) []int16) Int16ArrList { acc := NilInt16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ListList: Uint8List->[]int32 */ func MapInt32ArrToUint8ListList(m Uint8ListList, f func(Uint8List) []int32) Int32ArrList { acc := NilInt32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ListList: Uint8List->[]int64 */ func MapInt64ArrToUint8ListList(m Uint8ListList, f func(Uint8List) []int64) Int64ArrList { acc := NilInt64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ListList: Uint8List->[]uint */ func MapUintArrToUint8ListList(m Uint8ListList, f func(Uint8List) []uint) UintArrList { acc := NilUintArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ListList: Uint8List->[]uint8 */ func MapUint8ArrToUint8ListList(m Uint8ListList, f func(Uint8List) []uint8) Uint8ArrList { acc := NilUint8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ListList: Uint8List->[]uint16 */ func MapUint16ArrToUint8ListList(m Uint8ListList, f func(Uint8List) []uint16) Uint16ArrList { acc := NilUint16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ListList: Uint8List->[]uint32 */ func MapUint32ArrToUint8ListList(m Uint8ListList, f func(Uint8List) []uint32) Uint32ArrList { acc := NilUint32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ListList: Uint8List->[]uint64 */ func MapUint64ArrToUint8ListList(m Uint8ListList, f func(Uint8List) []uint64) Uint64ArrList { acc := NilUint64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ListList: Uint8List->[]uintptr */ func MapUintptrArrToUint8ListList(m Uint8ListList, f func(Uint8List) []uintptr) UintptrArrList { acc := NilUintptrArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ListList: Uint8List->[]byte */ func MapByteArrToUint8ListList(m Uint8ListList, f func(Uint8List) []byte) ByteArrList { acc := NilByteArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ListList: Uint8List->[]rune */ func MapRuneArrToUint8ListList(m Uint8ListList, f func(Uint8List) []rune) RuneArrList { acc := NilRuneArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ListList: Uint8List->[]float32 */ func MapFloat32ArrToUint8ListList(m Uint8ListList, f func(Uint8List) []float32) Float32ArrList { acc := NilFloat32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ListList: Uint8List->[]float64 */ func MapFloat64ArrToUint8ListList(m Uint8ListList, f func(Uint8List) []float64) Float64ArrList { acc := NilFloat64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ListList: Uint8List->[]complex64 */ func MapComplex64ArrToUint8ListList(m Uint8ListList, f func(Uint8List) []complex64) Complex64ArrList { acc := NilComplex64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ListList: Uint8List->[]complex128 */ func MapComplex128ArrToUint8ListList(m Uint8ListList, f func(Uint8List) []complex128) Complex128ArrList { acc := NilComplex128ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ListList: Uint8List->[]Any */ func MapAnyArrToUint8ListList(m Uint8ListList, f func(Uint8List) []Any) AnyArrList { acc := NilAnyArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ListList: Uint8List->BoolList */ func MapBoolListToUint8ListList(m Uint8ListList, f func(Uint8List) BoolList) BoolListList { acc := NilBoolListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ListList: Uint8List->StringList */ func MapStringListToUint8ListList(m Uint8ListList, f func(Uint8List) StringList) StringListList { acc := NilStringListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ListList: Uint8List->IntList */ func MapIntListToUint8ListList(m Uint8ListList, f func(Uint8List) IntList) IntListList { acc := NilIntListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ListList: Uint8List->Int8List */ func MapInt8ListToUint8ListList(m Uint8ListList, f func(Uint8List) Int8List) Int8ListList { acc := NilInt8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ListList: Uint8List->Int16List */ func MapInt16ListToUint8ListList(m Uint8ListList, f func(Uint8List) Int16List) Int16ListList { acc := NilInt16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ListList: Uint8List->Int32List */ func MapInt32ListToUint8ListList(m Uint8ListList, f func(Uint8List) Int32List) Int32ListList { acc := NilInt32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ListList: Uint8List->Int64List */ func MapInt64ListToUint8ListList(m Uint8ListList, f func(Uint8List) Int64List) Int64ListList { acc := NilInt64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ListList: Uint8List->UintList */ func MapUintListToUint8ListList(m Uint8ListList, f func(Uint8List) UintList) UintListList { acc := NilUintListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ListList: Uint8List->Uint8List */ func MapUint8ListToUint8ListList(m Uint8ListList, f func(Uint8List) Uint8List) Uint8ListList { acc := NilUint8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ListList: Uint8List->Uint16List */ func MapUint16ListToUint8ListList(m Uint8ListList, f func(Uint8List) Uint16List) Uint16ListList { acc := NilUint16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ListList: Uint8List->Uint32List */ func MapUint32ListToUint8ListList(m Uint8ListList, f func(Uint8List) Uint32List) Uint32ListList { acc := NilUint32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ListList: Uint8List->Uint64List */ func MapUint64ListToUint8ListList(m Uint8ListList, f func(Uint8List) Uint64List) Uint64ListList { acc := NilUint64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ListList: Uint8List->UintptrList */ func MapUintptrListToUint8ListList(m Uint8ListList, f func(Uint8List) UintptrList) UintptrListList { acc := NilUintptrListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ListList: Uint8List->ByteList */ func MapByteListToUint8ListList(m Uint8ListList, f func(Uint8List) ByteList) ByteListList { acc := NilByteListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ListList: Uint8List->RuneList */ func MapRuneListToUint8ListList(m Uint8ListList, f func(Uint8List) RuneList) RuneListList { acc := NilRuneListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ListList: Uint8List->Float32List */ func MapFloat32ListToUint8ListList(m Uint8ListList, f func(Uint8List) Float32List) Float32ListList { acc := NilFloat32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ListList: Uint8List->Float64List */ func MapFloat64ListToUint8ListList(m Uint8ListList, f func(Uint8List) Float64List) Float64ListList { acc := NilFloat64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ListList: Uint8List->Complex64List */ func MapComplex64ListToUint8ListList(m Uint8ListList, f func(Uint8List) Complex64List) Complex64ListList { acc := NilComplex64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ListList: Uint8List->Complex128List */ func MapComplex128ListToUint8ListList(m Uint8ListList, f func(Uint8List) Complex128List) Complex128ListList { acc := NilComplex128ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint8ListList: Uint8List->AnyList */ func MapAnyListToUint8ListList(m Uint8ListList, f func(Uint8List) AnyList) AnyListList { acc := NilAnyListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ListList: Uint16List->bool */ func MapBoolToUint16ListList(m Uint16ListList, f func(Uint16List) bool) BoolList { acc := NilBoolList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ListList: Uint16List->string */ func MapStringToUint16ListList(m Uint16ListList, f func(Uint16List) string) StringList { acc := NilStringList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ListList: Uint16List->int */ func MapIntToUint16ListList(m Uint16ListList, f func(Uint16List) int) IntList { acc := NilIntList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ListList: Uint16List->int8 */ func MapInt8ToUint16ListList(m Uint16ListList, f func(Uint16List) int8) Int8List { acc := NilInt8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ListList: Uint16List->int16 */ func MapInt16ToUint16ListList(m Uint16ListList, f func(Uint16List) int16) Int16List { acc := NilInt16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ListList: Uint16List->int32 */ func MapInt32ToUint16ListList(m Uint16ListList, f func(Uint16List) int32) Int32List { acc := NilInt32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ListList: Uint16List->int64 */ func MapInt64ToUint16ListList(m Uint16ListList, f func(Uint16List) int64) Int64List { acc := NilInt64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ListList: Uint16List->uint */ func MapUintToUint16ListList(m Uint16ListList, f func(Uint16List) uint) UintList { acc := NilUintList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ListList: Uint16List->uint8 */ func MapUint8ToUint16ListList(m Uint16ListList, f func(Uint16List) uint8) Uint8List { acc := NilUint8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ListList: Uint16List->uint16 */ func MapUint16ToUint16ListList(m Uint16ListList, f func(Uint16List) uint16) Uint16List { acc := NilUint16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ListList: Uint16List->uint32 */ func MapUint32ToUint16ListList(m Uint16ListList, f func(Uint16List) uint32) Uint32List { acc := NilUint32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ListList: Uint16List->uint64 */ func MapUint64ToUint16ListList(m Uint16ListList, f func(Uint16List) uint64) Uint64List { acc := NilUint64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ListList: Uint16List->uintptr */ func MapUintptrToUint16ListList(m Uint16ListList, f func(Uint16List) uintptr) UintptrList { acc := NilUintptrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ListList: Uint16List->byte */ func MapByteToUint16ListList(m Uint16ListList, f func(Uint16List) byte) ByteList { acc := NilByteList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ListList: Uint16List->rune */ func MapRuneToUint16ListList(m Uint16ListList, f func(Uint16List) rune) RuneList { acc := NilRuneList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ListList: Uint16List->float32 */ func MapFloat32ToUint16ListList(m Uint16ListList, f func(Uint16List) float32) Float32List { acc := NilFloat32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ListList: Uint16List->float64 */ func MapFloat64ToUint16ListList(m Uint16ListList, f func(Uint16List) float64) Float64List { acc := NilFloat64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ListList: Uint16List->complex64 */ func MapComplex64ToUint16ListList(m Uint16ListList, f func(Uint16List) complex64) Complex64List { acc := NilComplex64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ListList: Uint16List->complex128 */ func MapComplex128ToUint16ListList(m Uint16ListList, f func(Uint16List) complex128) Complex128List { acc := NilComplex128List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ListList: Uint16List->Any */ func MapAnyToUint16ListList(m Uint16ListList, f func(Uint16List) Any) AnyList { acc := NilAnyList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ListList: Uint16List->BoolOption */ func MapBoolOptionToUint16ListList(m Uint16ListList, f func(Uint16List) BoolOption) BoolOptionList { acc := NilBoolOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ListList: Uint16List->StringOption */ func MapStringOptionToUint16ListList(m Uint16ListList, f func(Uint16List) StringOption) StringOptionList { acc := NilStringOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ListList: Uint16List->IntOption */ func MapIntOptionToUint16ListList(m Uint16ListList, f func(Uint16List) IntOption) IntOptionList { acc := NilIntOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ListList: Uint16List->Int8Option */ func MapInt8OptionToUint16ListList(m Uint16ListList, f func(Uint16List) Int8Option) Int8OptionList { acc := NilInt8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ListList: Uint16List->Int16Option */ func MapInt16OptionToUint16ListList(m Uint16ListList, f func(Uint16List) Int16Option) Int16OptionList { acc := NilInt16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ListList: Uint16List->Int32Option */ func MapInt32OptionToUint16ListList(m Uint16ListList, f func(Uint16List) Int32Option) Int32OptionList { acc := NilInt32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ListList: Uint16List->Int64Option */ func MapInt64OptionToUint16ListList(m Uint16ListList, f func(Uint16List) Int64Option) Int64OptionList { acc := NilInt64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ListList: Uint16List->UintOption */ func MapUintOptionToUint16ListList(m Uint16ListList, f func(Uint16List) UintOption) UintOptionList { acc := NilUintOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ListList: Uint16List->Uint8Option */ func MapUint8OptionToUint16ListList(m Uint16ListList, f func(Uint16List) Uint8Option) Uint8OptionList { acc := NilUint8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ListList: Uint16List->Uint16Option */ func MapUint16OptionToUint16ListList(m Uint16ListList, f func(Uint16List) Uint16Option) Uint16OptionList { acc := NilUint16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ListList: Uint16List->Uint32Option */ func MapUint32OptionToUint16ListList(m Uint16ListList, f func(Uint16List) Uint32Option) Uint32OptionList { acc := NilUint32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ListList: Uint16List->Uint64Option */ func MapUint64OptionToUint16ListList(m Uint16ListList, f func(Uint16List) Uint64Option) Uint64OptionList { acc := NilUint64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ListList: Uint16List->UintptrOption */ func MapUintptrOptionToUint16ListList(m Uint16ListList, f func(Uint16List) UintptrOption) UintptrOptionList { acc := NilUintptrOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ListList: Uint16List->ByteOption */ func MapByteOptionToUint16ListList(m Uint16ListList, f func(Uint16List) ByteOption) ByteOptionList { acc := NilByteOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ListList: Uint16List->RuneOption */ func MapRuneOptionToUint16ListList(m Uint16ListList, f func(Uint16List) RuneOption) RuneOptionList { acc := NilRuneOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ListList: Uint16List->Float32Option */ func MapFloat32OptionToUint16ListList(m Uint16ListList, f func(Uint16List) Float32Option) Float32OptionList { acc := NilFloat32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ListList: Uint16List->Float64Option */ func MapFloat64OptionToUint16ListList(m Uint16ListList, f func(Uint16List) Float64Option) Float64OptionList { acc := NilFloat64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ListList: Uint16List->Complex64Option */ func MapComplex64OptionToUint16ListList(m Uint16ListList, f func(Uint16List) Complex64Option) Complex64OptionList { acc := NilComplex64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ListList: Uint16List->Complex128Option */ func MapComplex128OptionToUint16ListList(m Uint16ListList, f func(Uint16List) Complex128Option) Complex128OptionList { acc := NilComplex128OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ListList: Uint16List->AnyOption */ func MapAnyOptionToUint16ListList(m Uint16ListList, f func(Uint16List) AnyOption) AnyOptionList { acc := NilAnyOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ListList: Uint16List->[]bool */ func MapBoolArrToUint16ListList(m Uint16ListList, f func(Uint16List) []bool) BoolArrList { acc := NilBoolArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ListList: Uint16List->[]string */ func MapStringArrToUint16ListList(m Uint16ListList, f func(Uint16List) []string) StringArrList { acc := NilStringArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ListList: Uint16List->[]int */ func MapIntArrToUint16ListList(m Uint16ListList, f func(Uint16List) []int) IntArrList { acc := NilIntArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ListList: Uint16List->[]int8 */ func MapInt8ArrToUint16ListList(m Uint16ListList, f func(Uint16List) []int8) Int8ArrList { acc := NilInt8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ListList: Uint16List->[]int16 */ func MapInt16ArrToUint16ListList(m Uint16ListList, f func(Uint16List) []int16) Int16ArrList { acc := NilInt16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ListList: Uint16List->[]int32 */ func MapInt32ArrToUint16ListList(m Uint16ListList, f func(Uint16List) []int32) Int32ArrList { acc := NilInt32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ListList: Uint16List->[]int64 */ func MapInt64ArrToUint16ListList(m Uint16ListList, f func(Uint16List) []int64) Int64ArrList { acc := NilInt64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ListList: Uint16List->[]uint */ func MapUintArrToUint16ListList(m Uint16ListList, f func(Uint16List) []uint) UintArrList { acc := NilUintArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ListList: Uint16List->[]uint8 */ func MapUint8ArrToUint16ListList(m Uint16ListList, f func(Uint16List) []uint8) Uint8ArrList { acc := NilUint8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ListList: Uint16List->[]uint16 */ func MapUint16ArrToUint16ListList(m Uint16ListList, f func(Uint16List) []uint16) Uint16ArrList { acc := NilUint16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ListList: Uint16List->[]uint32 */ func MapUint32ArrToUint16ListList(m Uint16ListList, f func(Uint16List) []uint32) Uint32ArrList { acc := NilUint32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ListList: Uint16List->[]uint64 */ func MapUint64ArrToUint16ListList(m Uint16ListList, f func(Uint16List) []uint64) Uint64ArrList { acc := NilUint64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ListList: Uint16List->[]uintptr */ func MapUintptrArrToUint16ListList(m Uint16ListList, f func(Uint16List) []uintptr) UintptrArrList { acc := NilUintptrArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ListList: Uint16List->[]byte */ func MapByteArrToUint16ListList(m Uint16ListList, f func(Uint16List) []byte) ByteArrList { acc := NilByteArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ListList: Uint16List->[]rune */ func MapRuneArrToUint16ListList(m Uint16ListList, f func(Uint16List) []rune) RuneArrList { acc := NilRuneArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ListList: Uint16List->[]float32 */ func MapFloat32ArrToUint16ListList(m Uint16ListList, f func(Uint16List) []float32) Float32ArrList { acc := NilFloat32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ListList: Uint16List->[]float64 */ func MapFloat64ArrToUint16ListList(m Uint16ListList, f func(Uint16List) []float64) Float64ArrList { acc := NilFloat64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ListList: Uint16List->[]complex64 */ func MapComplex64ArrToUint16ListList(m Uint16ListList, f func(Uint16List) []complex64) Complex64ArrList { acc := NilComplex64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ListList: Uint16List->[]complex128 */ func MapComplex128ArrToUint16ListList(m Uint16ListList, f func(Uint16List) []complex128) Complex128ArrList { acc := NilComplex128ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ListList: Uint16List->[]Any */ func MapAnyArrToUint16ListList(m Uint16ListList, f func(Uint16List) []Any) AnyArrList { acc := NilAnyArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ListList: Uint16List->BoolList */ func MapBoolListToUint16ListList(m Uint16ListList, f func(Uint16List) BoolList) BoolListList { acc := NilBoolListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ListList: Uint16List->StringList */ func MapStringListToUint16ListList(m Uint16ListList, f func(Uint16List) StringList) StringListList { acc := NilStringListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ListList: Uint16List->IntList */ func MapIntListToUint16ListList(m Uint16ListList, f func(Uint16List) IntList) IntListList { acc := NilIntListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ListList: Uint16List->Int8List */ func MapInt8ListToUint16ListList(m Uint16ListList, f func(Uint16List) Int8List) Int8ListList { acc := NilInt8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ListList: Uint16List->Int16List */ func MapInt16ListToUint16ListList(m Uint16ListList, f func(Uint16List) Int16List) Int16ListList { acc := NilInt16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ListList: Uint16List->Int32List */ func MapInt32ListToUint16ListList(m Uint16ListList, f func(Uint16List) Int32List) Int32ListList { acc := NilInt32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ListList: Uint16List->Int64List */ func MapInt64ListToUint16ListList(m Uint16ListList, f func(Uint16List) Int64List) Int64ListList { acc := NilInt64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ListList: Uint16List->UintList */ func MapUintListToUint16ListList(m Uint16ListList, f func(Uint16List) UintList) UintListList { acc := NilUintListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ListList: Uint16List->Uint8List */ func MapUint8ListToUint16ListList(m Uint16ListList, f func(Uint16List) Uint8List) Uint8ListList { acc := NilUint8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ListList: Uint16List->Uint16List */ func MapUint16ListToUint16ListList(m Uint16ListList, f func(Uint16List) Uint16List) Uint16ListList { acc := NilUint16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ListList: Uint16List->Uint32List */ func MapUint32ListToUint16ListList(m Uint16ListList, f func(Uint16List) Uint32List) Uint32ListList { acc := NilUint32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ListList: Uint16List->Uint64List */ func MapUint64ListToUint16ListList(m Uint16ListList, f func(Uint16List) Uint64List) Uint64ListList { acc := NilUint64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ListList: Uint16List->UintptrList */ func MapUintptrListToUint16ListList(m Uint16ListList, f func(Uint16List) UintptrList) UintptrListList { acc := NilUintptrListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ListList: Uint16List->ByteList */ func MapByteListToUint16ListList(m Uint16ListList, f func(Uint16List) ByteList) ByteListList { acc := NilByteListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ListList: Uint16List->RuneList */ func MapRuneListToUint16ListList(m Uint16ListList, f func(Uint16List) RuneList) RuneListList { acc := NilRuneListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ListList: Uint16List->Float32List */ func MapFloat32ListToUint16ListList(m Uint16ListList, f func(Uint16List) Float32List) Float32ListList { acc := NilFloat32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ListList: Uint16List->Float64List */ func MapFloat64ListToUint16ListList(m Uint16ListList, f func(Uint16List) Float64List) Float64ListList { acc := NilFloat64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ListList: Uint16List->Complex64List */ func MapComplex64ListToUint16ListList(m Uint16ListList, f func(Uint16List) Complex64List) Complex64ListList { acc := NilComplex64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ListList: Uint16List->Complex128List */ func MapComplex128ListToUint16ListList(m Uint16ListList, f func(Uint16List) Complex128List) Complex128ListList { acc := NilComplex128ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint16ListList: Uint16List->AnyList */ func MapAnyListToUint16ListList(m Uint16ListList, f func(Uint16List) AnyList) AnyListList { acc := NilAnyListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ListList: Uint32List->bool */ func MapBoolToUint32ListList(m Uint32ListList, f func(Uint32List) bool) BoolList { acc := NilBoolList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ListList: Uint32List->string */ func MapStringToUint32ListList(m Uint32ListList, f func(Uint32List) string) StringList { acc := NilStringList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ListList: Uint32List->int */ func MapIntToUint32ListList(m Uint32ListList, f func(Uint32List) int) IntList { acc := NilIntList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ListList: Uint32List->int8 */ func MapInt8ToUint32ListList(m Uint32ListList, f func(Uint32List) int8) Int8List { acc := NilInt8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ListList: Uint32List->int16 */ func MapInt16ToUint32ListList(m Uint32ListList, f func(Uint32List) int16) Int16List { acc := NilInt16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ListList: Uint32List->int32 */ func MapInt32ToUint32ListList(m Uint32ListList, f func(Uint32List) int32) Int32List { acc := NilInt32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ListList: Uint32List->int64 */ func MapInt64ToUint32ListList(m Uint32ListList, f func(Uint32List) int64) Int64List { acc := NilInt64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ListList: Uint32List->uint */ func MapUintToUint32ListList(m Uint32ListList, f func(Uint32List) uint) UintList { acc := NilUintList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ListList: Uint32List->uint8 */ func MapUint8ToUint32ListList(m Uint32ListList, f func(Uint32List) uint8) Uint8List { acc := NilUint8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ListList: Uint32List->uint16 */ func MapUint16ToUint32ListList(m Uint32ListList, f func(Uint32List) uint16) Uint16List { acc := NilUint16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ListList: Uint32List->uint32 */ func MapUint32ToUint32ListList(m Uint32ListList, f func(Uint32List) uint32) Uint32List { acc := NilUint32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ListList: Uint32List->uint64 */ func MapUint64ToUint32ListList(m Uint32ListList, f func(Uint32List) uint64) Uint64List { acc := NilUint64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ListList: Uint32List->uintptr */ func MapUintptrToUint32ListList(m Uint32ListList, f func(Uint32List) uintptr) UintptrList { acc := NilUintptrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ListList: Uint32List->byte */ func MapByteToUint32ListList(m Uint32ListList, f func(Uint32List) byte) ByteList { acc := NilByteList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ListList: Uint32List->rune */ func MapRuneToUint32ListList(m Uint32ListList, f func(Uint32List) rune) RuneList { acc := NilRuneList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ListList: Uint32List->float32 */ func MapFloat32ToUint32ListList(m Uint32ListList, f func(Uint32List) float32) Float32List { acc := NilFloat32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ListList: Uint32List->float64 */ func MapFloat64ToUint32ListList(m Uint32ListList, f func(Uint32List) float64) Float64List { acc := NilFloat64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ListList: Uint32List->complex64 */ func MapComplex64ToUint32ListList(m Uint32ListList, f func(Uint32List) complex64) Complex64List { acc := NilComplex64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ListList: Uint32List->complex128 */ func MapComplex128ToUint32ListList(m Uint32ListList, f func(Uint32List) complex128) Complex128List { acc := NilComplex128List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ListList: Uint32List->Any */ func MapAnyToUint32ListList(m Uint32ListList, f func(Uint32List) Any) AnyList { acc := NilAnyList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ListList: Uint32List->BoolOption */ func MapBoolOptionToUint32ListList(m Uint32ListList, f func(Uint32List) BoolOption) BoolOptionList { acc := NilBoolOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ListList: Uint32List->StringOption */ func MapStringOptionToUint32ListList(m Uint32ListList, f func(Uint32List) StringOption) StringOptionList { acc := NilStringOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ListList: Uint32List->IntOption */ func MapIntOptionToUint32ListList(m Uint32ListList, f func(Uint32List) IntOption) IntOptionList { acc := NilIntOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ListList: Uint32List->Int8Option */ func MapInt8OptionToUint32ListList(m Uint32ListList, f func(Uint32List) Int8Option) Int8OptionList { acc := NilInt8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ListList: Uint32List->Int16Option */ func MapInt16OptionToUint32ListList(m Uint32ListList, f func(Uint32List) Int16Option) Int16OptionList { acc := NilInt16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ListList: Uint32List->Int32Option */ func MapInt32OptionToUint32ListList(m Uint32ListList, f func(Uint32List) Int32Option) Int32OptionList { acc := NilInt32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ListList: Uint32List->Int64Option */ func MapInt64OptionToUint32ListList(m Uint32ListList, f func(Uint32List) Int64Option) Int64OptionList { acc := NilInt64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ListList: Uint32List->UintOption */ func MapUintOptionToUint32ListList(m Uint32ListList, f func(Uint32List) UintOption) UintOptionList { acc := NilUintOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ListList: Uint32List->Uint8Option */ func MapUint8OptionToUint32ListList(m Uint32ListList, f func(Uint32List) Uint8Option) Uint8OptionList { acc := NilUint8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ListList: Uint32List->Uint16Option */ func MapUint16OptionToUint32ListList(m Uint32ListList, f func(Uint32List) Uint16Option) Uint16OptionList { acc := NilUint16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ListList: Uint32List->Uint32Option */ func MapUint32OptionToUint32ListList(m Uint32ListList, f func(Uint32List) Uint32Option) Uint32OptionList { acc := NilUint32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ListList: Uint32List->Uint64Option */ func MapUint64OptionToUint32ListList(m Uint32ListList, f func(Uint32List) Uint64Option) Uint64OptionList { acc := NilUint64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ListList: Uint32List->UintptrOption */ func MapUintptrOptionToUint32ListList(m Uint32ListList, f func(Uint32List) UintptrOption) UintptrOptionList { acc := NilUintptrOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ListList: Uint32List->ByteOption */ func MapByteOptionToUint32ListList(m Uint32ListList, f func(Uint32List) ByteOption) ByteOptionList { acc := NilByteOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ListList: Uint32List->RuneOption */ func MapRuneOptionToUint32ListList(m Uint32ListList, f func(Uint32List) RuneOption) RuneOptionList { acc := NilRuneOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ListList: Uint32List->Float32Option */ func MapFloat32OptionToUint32ListList(m Uint32ListList, f func(Uint32List) Float32Option) Float32OptionList { acc := NilFloat32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ListList: Uint32List->Float64Option */ func MapFloat64OptionToUint32ListList(m Uint32ListList, f func(Uint32List) Float64Option) Float64OptionList { acc := NilFloat64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ListList: Uint32List->Complex64Option */ func MapComplex64OptionToUint32ListList(m Uint32ListList, f func(Uint32List) Complex64Option) Complex64OptionList { acc := NilComplex64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ListList: Uint32List->Complex128Option */ func MapComplex128OptionToUint32ListList(m Uint32ListList, f func(Uint32List) Complex128Option) Complex128OptionList { acc := NilComplex128OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ListList: Uint32List->AnyOption */ func MapAnyOptionToUint32ListList(m Uint32ListList, f func(Uint32List) AnyOption) AnyOptionList { acc := NilAnyOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ListList: Uint32List->[]bool */ func MapBoolArrToUint32ListList(m Uint32ListList, f func(Uint32List) []bool) BoolArrList { acc := NilBoolArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ListList: Uint32List->[]string */ func MapStringArrToUint32ListList(m Uint32ListList, f func(Uint32List) []string) StringArrList { acc := NilStringArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ListList: Uint32List->[]int */ func MapIntArrToUint32ListList(m Uint32ListList, f func(Uint32List) []int) IntArrList { acc := NilIntArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ListList: Uint32List->[]int8 */ func MapInt8ArrToUint32ListList(m Uint32ListList, f func(Uint32List) []int8) Int8ArrList { acc := NilInt8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ListList: Uint32List->[]int16 */ func MapInt16ArrToUint32ListList(m Uint32ListList, f func(Uint32List) []int16) Int16ArrList { acc := NilInt16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ListList: Uint32List->[]int32 */ func MapInt32ArrToUint32ListList(m Uint32ListList, f func(Uint32List) []int32) Int32ArrList { acc := NilInt32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ListList: Uint32List->[]int64 */ func MapInt64ArrToUint32ListList(m Uint32ListList, f func(Uint32List) []int64) Int64ArrList { acc := NilInt64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ListList: Uint32List->[]uint */ func MapUintArrToUint32ListList(m Uint32ListList, f func(Uint32List) []uint) UintArrList { acc := NilUintArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ListList: Uint32List->[]uint8 */ func MapUint8ArrToUint32ListList(m Uint32ListList, f func(Uint32List) []uint8) Uint8ArrList { acc := NilUint8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ListList: Uint32List->[]uint16 */ func MapUint16ArrToUint32ListList(m Uint32ListList, f func(Uint32List) []uint16) Uint16ArrList { acc := NilUint16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ListList: Uint32List->[]uint32 */ func MapUint32ArrToUint32ListList(m Uint32ListList, f func(Uint32List) []uint32) Uint32ArrList { acc := NilUint32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ListList: Uint32List->[]uint64 */ func MapUint64ArrToUint32ListList(m Uint32ListList, f func(Uint32List) []uint64) Uint64ArrList { acc := NilUint64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ListList: Uint32List->[]uintptr */ func MapUintptrArrToUint32ListList(m Uint32ListList, f func(Uint32List) []uintptr) UintptrArrList { acc := NilUintptrArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ListList: Uint32List->[]byte */ func MapByteArrToUint32ListList(m Uint32ListList, f func(Uint32List) []byte) ByteArrList { acc := NilByteArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ListList: Uint32List->[]rune */ func MapRuneArrToUint32ListList(m Uint32ListList, f func(Uint32List) []rune) RuneArrList { acc := NilRuneArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ListList: Uint32List->[]float32 */ func MapFloat32ArrToUint32ListList(m Uint32ListList, f func(Uint32List) []float32) Float32ArrList { acc := NilFloat32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ListList: Uint32List->[]float64 */ func MapFloat64ArrToUint32ListList(m Uint32ListList, f func(Uint32List) []float64) Float64ArrList { acc := NilFloat64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ListList: Uint32List->[]complex64 */ func MapComplex64ArrToUint32ListList(m Uint32ListList, f func(Uint32List) []complex64) Complex64ArrList { acc := NilComplex64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ListList: Uint32List->[]complex128 */ func MapComplex128ArrToUint32ListList(m Uint32ListList, f func(Uint32List) []complex128) Complex128ArrList { acc := NilComplex128ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ListList: Uint32List->[]Any */ func MapAnyArrToUint32ListList(m Uint32ListList, f func(Uint32List) []Any) AnyArrList { acc := NilAnyArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ListList: Uint32List->BoolList */ func MapBoolListToUint32ListList(m Uint32ListList, f func(Uint32List) BoolList) BoolListList { acc := NilBoolListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ListList: Uint32List->StringList */ func MapStringListToUint32ListList(m Uint32ListList, f func(Uint32List) StringList) StringListList { acc := NilStringListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ListList: Uint32List->IntList */ func MapIntListToUint32ListList(m Uint32ListList, f func(Uint32List) IntList) IntListList { acc := NilIntListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ListList: Uint32List->Int8List */ func MapInt8ListToUint32ListList(m Uint32ListList, f func(Uint32List) Int8List) Int8ListList { acc := NilInt8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ListList: Uint32List->Int16List */ func MapInt16ListToUint32ListList(m Uint32ListList, f func(Uint32List) Int16List) Int16ListList { acc := NilInt16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ListList: Uint32List->Int32List */ func MapInt32ListToUint32ListList(m Uint32ListList, f func(Uint32List) Int32List) Int32ListList { acc := NilInt32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ListList: Uint32List->Int64List */ func MapInt64ListToUint32ListList(m Uint32ListList, f func(Uint32List) Int64List) Int64ListList { acc := NilInt64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ListList: Uint32List->UintList */ func MapUintListToUint32ListList(m Uint32ListList, f func(Uint32List) UintList) UintListList { acc := NilUintListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ListList: Uint32List->Uint8List */ func MapUint8ListToUint32ListList(m Uint32ListList, f func(Uint32List) Uint8List) Uint8ListList { acc := NilUint8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ListList: Uint32List->Uint16List */ func MapUint16ListToUint32ListList(m Uint32ListList, f func(Uint32List) Uint16List) Uint16ListList { acc := NilUint16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ListList: Uint32List->Uint32List */ func MapUint32ListToUint32ListList(m Uint32ListList, f func(Uint32List) Uint32List) Uint32ListList { acc := NilUint32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ListList: Uint32List->Uint64List */ func MapUint64ListToUint32ListList(m Uint32ListList, f func(Uint32List) Uint64List) Uint64ListList { acc := NilUint64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ListList: Uint32List->UintptrList */ func MapUintptrListToUint32ListList(m Uint32ListList, f func(Uint32List) UintptrList) UintptrListList { acc := NilUintptrListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ListList: Uint32List->ByteList */ func MapByteListToUint32ListList(m Uint32ListList, f func(Uint32List) ByteList) ByteListList { acc := NilByteListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ListList: Uint32List->RuneList */ func MapRuneListToUint32ListList(m Uint32ListList, f func(Uint32List) RuneList) RuneListList { acc := NilRuneListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ListList: Uint32List->Float32List */ func MapFloat32ListToUint32ListList(m Uint32ListList, f func(Uint32List) Float32List) Float32ListList { acc := NilFloat32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ListList: Uint32List->Float64List */ func MapFloat64ListToUint32ListList(m Uint32ListList, f func(Uint32List) Float64List) Float64ListList { acc := NilFloat64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ListList: Uint32List->Complex64List */ func MapComplex64ListToUint32ListList(m Uint32ListList, f func(Uint32List) Complex64List) Complex64ListList { acc := NilComplex64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ListList: Uint32List->Complex128List */ func MapComplex128ListToUint32ListList(m Uint32ListList, f func(Uint32List) Complex128List) Complex128ListList { acc := NilComplex128ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint32ListList: Uint32List->AnyList */ func MapAnyListToUint32ListList(m Uint32ListList, f func(Uint32List) AnyList) AnyListList { acc := NilAnyListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ListList: Uint64List->bool */ func MapBoolToUint64ListList(m Uint64ListList, f func(Uint64List) bool) BoolList { acc := NilBoolList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ListList: Uint64List->string */ func MapStringToUint64ListList(m Uint64ListList, f func(Uint64List) string) StringList { acc := NilStringList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ListList: Uint64List->int */ func MapIntToUint64ListList(m Uint64ListList, f func(Uint64List) int) IntList { acc := NilIntList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ListList: Uint64List->int8 */ func MapInt8ToUint64ListList(m Uint64ListList, f func(Uint64List) int8) Int8List { acc := NilInt8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ListList: Uint64List->int16 */ func MapInt16ToUint64ListList(m Uint64ListList, f func(Uint64List) int16) Int16List { acc := NilInt16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ListList: Uint64List->int32 */ func MapInt32ToUint64ListList(m Uint64ListList, f func(Uint64List) int32) Int32List { acc := NilInt32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ListList: Uint64List->int64 */ func MapInt64ToUint64ListList(m Uint64ListList, f func(Uint64List) int64) Int64List { acc := NilInt64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ListList: Uint64List->uint */ func MapUintToUint64ListList(m Uint64ListList, f func(Uint64List) uint) UintList { acc := NilUintList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ListList: Uint64List->uint8 */ func MapUint8ToUint64ListList(m Uint64ListList, f func(Uint64List) uint8) Uint8List { acc := NilUint8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ListList: Uint64List->uint16 */ func MapUint16ToUint64ListList(m Uint64ListList, f func(Uint64List) uint16) Uint16List { acc := NilUint16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ListList: Uint64List->uint32 */ func MapUint32ToUint64ListList(m Uint64ListList, f func(Uint64List) uint32) Uint32List { acc := NilUint32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ListList: Uint64List->uint64 */ func MapUint64ToUint64ListList(m Uint64ListList, f func(Uint64List) uint64) Uint64List { acc := NilUint64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ListList: Uint64List->uintptr */ func MapUintptrToUint64ListList(m Uint64ListList, f func(Uint64List) uintptr) UintptrList { acc := NilUintptrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ListList: Uint64List->byte */ func MapByteToUint64ListList(m Uint64ListList, f func(Uint64List) byte) ByteList { acc := NilByteList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ListList: Uint64List->rune */ func MapRuneToUint64ListList(m Uint64ListList, f func(Uint64List) rune) RuneList { acc := NilRuneList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ListList: Uint64List->float32 */ func MapFloat32ToUint64ListList(m Uint64ListList, f func(Uint64List) float32) Float32List { acc := NilFloat32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ListList: Uint64List->float64 */ func MapFloat64ToUint64ListList(m Uint64ListList, f func(Uint64List) float64) Float64List { acc := NilFloat64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ListList: Uint64List->complex64 */ func MapComplex64ToUint64ListList(m Uint64ListList, f func(Uint64List) complex64) Complex64List { acc := NilComplex64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ListList: Uint64List->complex128 */ func MapComplex128ToUint64ListList(m Uint64ListList, f func(Uint64List) complex128) Complex128List { acc := NilComplex128List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ListList: Uint64List->Any */ func MapAnyToUint64ListList(m Uint64ListList, f func(Uint64List) Any) AnyList { acc := NilAnyList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ListList: Uint64List->BoolOption */ func MapBoolOptionToUint64ListList(m Uint64ListList, f func(Uint64List) BoolOption) BoolOptionList { acc := NilBoolOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ListList: Uint64List->StringOption */ func MapStringOptionToUint64ListList(m Uint64ListList, f func(Uint64List) StringOption) StringOptionList { acc := NilStringOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ListList: Uint64List->IntOption */ func MapIntOptionToUint64ListList(m Uint64ListList, f func(Uint64List) IntOption) IntOptionList { acc := NilIntOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ListList: Uint64List->Int8Option */ func MapInt8OptionToUint64ListList(m Uint64ListList, f func(Uint64List) Int8Option) Int8OptionList { acc := NilInt8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ListList: Uint64List->Int16Option */ func MapInt16OptionToUint64ListList(m Uint64ListList, f func(Uint64List) Int16Option) Int16OptionList { acc := NilInt16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ListList: Uint64List->Int32Option */ func MapInt32OptionToUint64ListList(m Uint64ListList, f func(Uint64List) Int32Option) Int32OptionList { acc := NilInt32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ListList: Uint64List->Int64Option */ func MapInt64OptionToUint64ListList(m Uint64ListList, f func(Uint64List) Int64Option) Int64OptionList { acc := NilInt64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ListList: Uint64List->UintOption */ func MapUintOptionToUint64ListList(m Uint64ListList, f func(Uint64List) UintOption) UintOptionList { acc := NilUintOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ListList: Uint64List->Uint8Option */ func MapUint8OptionToUint64ListList(m Uint64ListList, f func(Uint64List) Uint8Option) Uint8OptionList { acc := NilUint8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ListList: Uint64List->Uint16Option */ func MapUint16OptionToUint64ListList(m Uint64ListList, f func(Uint64List) Uint16Option) Uint16OptionList { acc := NilUint16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ListList: Uint64List->Uint32Option */ func MapUint32OptionToUint64ListList(m Uint64ListList, f func(Uint64List) Uint32Option) Uint32OptionList { acc := NilUint32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ListList: Uint64List->Uint64Option */ func MapUint64OptionToUint64ListList(m Uint64ListList, f func(Uint64List) Uint64Option) Uint64OptionList { acc := NilUint64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ListList: Uint64List->UintptrOption */ func MapUintptrOptionToUint64ListList(m Uint64ListList, f func(Uint64List) UintptrOption) UintptrOptionList { acc := NilUintptrOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ListList: Uint64List->ByteOption */ func MapByteOptionToUint64ListList(m Uint64ListList, f func(Uint64List) ByteOption) ByteOptionList { acc := NilByteOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ListList: Uint64List->RuneOption */ func MapRuneOptionToUint64ListList(m Uint64ListList, f func(Uint64List) RuneOption) RuneOptionList { acc := NilRuneOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ListList: Uint64List->Float32Option */ func MapFloat32OptionToUint64ListList(m Uint64ListList, f func(Uint64List) Float32Option) Float32OptionList { acc := NilFloat32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ListList: Uint64List->Float64Option */ func MapFloat64OptionToUint64ListList(m Uint64ListList, f func(Uint64List) Float64Option) Float64OptionList { acc := NilFloat64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ListList: Uint64List->Complex64Option */ func MapComplex64OptionToUint64ListList(m Uint64ListList, f func(Uint64List) Complex64Option) Complex64OptionList { acc := NilComplex64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ListList: Uint64List->Complex128Option */ func MapComplex128OptionToUint64ListList(m Uint64ListList, f func(Uint64List) Complex128Option) Complex128OptionList { acc := NilComplex128OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ListList: Uint64List->AnyOption */ func MapAnyOptionToUint64ListList(m Uint64ListList, f func(Uint64List) AnyOption) AnyOptionList { acc := NilAnyOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ListList: Uint64List->[]bool */ func MapBoolArrToUint64ListList(m Uint64ListList, f func(Uint64List) []bool) BoolArrList { acc := NilBoolArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ListList: Uint64List->[]string */ func MapStringArrToUint64ListList(m Uint64ListList, f func(Uint64List) []string) StringArrList { acc := NilStringArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ListList: Uint64List->[]int */ func MapIntArrToUint64ListList(m Uint64ListList, f func(Uint64List) []int) IntArrList { acc := NilIntArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ListList: Uint64List->[]int8 */ func MapInt8ArrToUint64ListList(m Uint64ListList, f func(Uint64List) []int8) Int8ArrList { acc := NilInt8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ListList: Uint64List->[]int16 */ func MapInt16ArrToUint64ListList(m Uint64ListList, f func(Uint64List) []int16) Int16ArrList { acc := NilInt16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ListList: Uint64List->[]int32 */ func MapInt32ArrToUint64ListList(m Uint64ListList, f func(Uint64List) []int32) Int32ArrList { acc := NilInt32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ListList: Uint64List->[]int64 */ func MapInt64ArrToUint64ListList(m Uint64ListList, f func(Uint64List) []int64) Int64ArrList { acc := NilInt64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ListList: Uint64List->[]uint */ func MapUintArrToUint64ListList(m Uint64ListList, f func(Uint64List) []uint) UintArrList { acc := NilUintArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ListList: Uint64List->[]uint8 */ func MapUint8ArrToUint64ListList(m Uint64ListList, f func(Uint64List) []uint8) Uint8ArrList { acc := NilUint8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ListList: Uint64List->[]uint16 */ func MapUint16ArrToUint64ListList(m Uint64ListList, f func(Uint64List) []uint16) Uint16ArrList { acc := NilUint16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ListList: Uint64List->[]uint32 */ func MapUint32ArrToUint64ListList(m Uint64ListList, f func(Uint64List) []uint32) Uint32ArrList { acc := NilUint32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ListList: Uint64List->[]uint64 */ func MapUint64ArrToUint64ListList(m Uint64ListList, f func(Uint64List) []uint64) Uint64ArrList { acc := NilUint64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ListList: Uint64List->[]uintptr */ func MapUintptrArrToUint64ListList(m Uint64ListList, f func(Uint64List) []uintptr) UintptrArrList { acc := NilUintptrArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ListList: Uint64List->[]byte */ func MapByteArrToUint64ListList(m Uint64ListList, f func(Uint64List) []byte) ByteArrList { acc := NilByteArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ListList: Uint64List->[]rune */ func MapRuneArrToUint64ListList(m Uint64ListList, f func(Uint64List) []rune) RuneArrList { acc := NilRuneArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ListList: Uint64List->[]float32 */ func MapFloat32ArrToUint64ListList(m Uint64ListList, f func(Uint64List) []float32) Float32ArrList { acc := NilFloat32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ListList: Uint64List->[]float64 */ func MapFloat64ArrToUint64ListList(m Uint64ListList, f func(Uint64List) []float64) Float64ArrList { acc := NilFloat64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ListList: Uint64List->[]complex64 */ func MapComplex64ArrToUint64ListList(m Uint64ListList, f func(Uint64List) []complex64) Complex64ArrList { acc := NilComplex64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ListList: Uint64List->[]complex128 */ func MapComplex128ArrToUint64ListList(m Uint64ListList, f func(Uint64List) []complex128) Complex128ArrList { acc := NilComplex128ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ListList: Uint64List->[]Any */ func MapAnyArrToUint64ListList(m Uint64ListList, f func(Uint64List) []Any) AnyArrList { acc := NilAnyArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ListList: Uint64List->BoolList */ func MapBoolListToUint64ListList(m Uint64ListList, f func(Uint64List) BoolList) BoolListList { acc := NilBoolListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ListList: Uint64List->StringList */ func MapStringListToUint64ListList(m Uint64ListList, f func(Uint64List) StringList) StringListList { acc := NilStringListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ListList: Uint64List->IntList */ func MapIntListToUint64ListList(m Uint64ListList, f func(Uint64List) IntList) IntListList { acc := NilIntListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ListList: Uint64List->Int8List */ func MapInt8ListToUint64ListList(m Uint64ListList, f func(Uint64List) Int8List) Int8ListList { acc := NilInt8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ListList: Uint64List->Int16List */ func MapInt16ListToUint64ListList(m Uint64ListList, f func(Uint64List) Int16List) Int16ListList { acc := NilInt16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ListList: Uint64List->Int32List */ func MapInt32ListToUint64ListList(m Uint64ListList, f func(Uint64List) Int32List) Int32ListList { acc := NilInt32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ListList: Uint64List->Int64List */ func MapInt64ListToUint64ListList(m Uint64ListList, f func(Uint64List) Int64List) Int64ListList { acc := NilInt64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ListList: Uint64List->UintList */ func MapUintListToUint64ListList(m Uint64ListList, f func(Uint64List) UintList) UintListList { acc := NilUintListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ListList: Uint64List->Uint8List */ func MapUint8ListToUint64ListList(m Uint64ListList, f func(Uint64List) Uint8List) Uint8ListList { acc := NilUint8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ListList: Uint64List->Uint16List */ func MapUint16ListToUint64ListList(m Uint64ListList, f func(Uint64List) Uint16List) Uint16ListList { acc := NilUint16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ListList: Uint64List->Uint32List */ func MapUint32ListToUint64ListList(m Uint64ListList, f func(Uint64List) Uint32List) Uint32ListList { acc := NilUint32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ListList: Uint64List->Uint64List */ func MapUint64ListToUint64ListList(m Uint64ListList, f func(Uint64List) Uint64List) Uint64ListList { acc := NilUint64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ListList: Uint64List->UintptrList */ func MapUintptrListToUint64ListList(m Uint64ListList, f func(Uint64List) UintptrList) UintptrListList { acc := NilUintptrListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ListList: Uint64List->ByteList */ func MapByteListToUint64ListList(m Uint64ListList, f func(Uint64List) ByteList) ByteListList { acc := NilByteListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ListList: Uint64List->RuneList */ func MapRuneListToUint64ListList(m Uint64ListList, f func(Uint64List) RuneList) RuneListList { acc := NilRuneListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ListList: Uint64List->Float32List */ func MapFloat32ListToUint64ListList(m Uint64ListList, f func(Uint64List) Float32List) Float32ListList { acc := NilFloat32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ListList: Uint64List->Float64List */ func MapFloat64ListToUint64ListList(m Uint64ListList, f func(Uint64List) Float64List) Float64ListList { acc := NilFloat64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ListList: Uint64List->Complex64List */ func MapComplex64ListToUint64ListList(m Uint64ListList, f func(Uint64List) Complex64List) Complex64ListList { acc := NilComplex64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ListList: Uint64List->Complex128List */ func MapComplex128ListToUint64ListList(m Uint64ListList, f func(Uint64List) Complex128List) Complex128ListList { acc := NilComplex128ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Uint64ListList: Uint64List->AnyList */ func MapAnyListToUint64ListList(m Uint64ListList, f func(Uint64List) AnyList) AnyListList { acc := NilAnyListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrListList: UintptrList->bool */ func MapBoolToUintptrListList(m UintptrListList, f func(UintptrList) bool) BoolList { acc := NilBoolList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrListList: UintptrList->string */ func MapStringToUintptrListList(m UintptrListList, f func(UintptrList) string) StringList { acc := NilStringList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrListList: UintptrList->int */ func MapIntToUintptrListList(m UintptrListList, f func(UintptrList) int) IntList { acc := NilIntList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrListList: UintptrList->int8 */ func MapInt8ToUintptrListList(m UintptrListList, f func(UintptrList) int8) Int8List { acc := NilInt8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrListList: UintptrList->int16 */ func MapInt16ToUintptrListList(m UintptrListList, f func(UintptrList) int16) Int16List { acc := NilInt16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrListList: UintptrList->int32 */ func MapInt32ToUintptrListList(m UintptrListList, f func(UintptrList) int32) Int32List { acc := NilInt32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrListList: UintptrList->int64 */ func MapInt64ToUintptrListList(m UintptrListList, f func(UintptrList) int64) Int64List { acc := NilInt64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrListList: UintptrList->uint */ func MapUintToUintptrListList(m UintptrListList, f func(UintptrList) uint) UintList { acc := NilUintList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrListList: UintptrList->uint8 */ func MapUint8ToUintptrListList(m UintptrListList, f func(UintptrList) uint8) Uint8List { acc := NilUint8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrListList: UintptrList->uint16 */ func MapUint16ToUintptrListList(m UintptrListList, f func(UintptrList) uint16) Uint16List { acc := NilUint16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrListList: UintptrList->uint32 */ func MapUint32ToUintptrListList(m UintptrListList, f func(UintptrList) uint32) Uint32List { acc := NilUint32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrListList: UintptrList->uint64 */ func MapUint64ToUintptrListList(m UintptrListList, f func(UintptrList) uint64) Uint64List { acc := NilUint64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrListList: UintptrList->uintptr */ func MapUintptrToUintptrListList(m UintptrListList, f func(UintptrList) uintptr) UintptrList { acc := NilUintptrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrListList: UintptrList->byte */ func MapByteToUintptrListList(m UintptrListList, f func(UintptrList) byte) ByteList { acc := NilByteList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrListList: UintptrList->rune */ func MapRuneToUintptrListList(m UintptrListList, f func(UintptrList) rune) RuneList { acc := NilRuneList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrListList: UintptrList->float32 */ func MapFloat32ToUintptrListList(m UintptrListList, f func(UintptrList) float32) Float32List { acc := NilFloat32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrListList: UintptrList->float64 */ func MapFloat64ToUintptrListList(m UintptrListList, f func(UintptrList) float64) Float64List { acc := NilFloat64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrListList: UintptrList->complex64 */ func MapComplex64ToUintptrListList(m UintptrListList, f func(UintptrList) complex64) Complex64List { acc := NilComplex64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrListList: UintptrList->complex128 */ func MapComplex128ToUintptrListList(m UintptrListList, f func(UintptrList) complex128) Complex128List { acc := NilComplex128List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrListList: UintptrList->Any */ func MapAnyToUintptrListList(m UintptrListList, f func(UintptrList) Any) AnyList { acc := NilAnyList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrListList: UintptrList->BoolOption */ func MapBoolOptionToUintptrListList(m UintptrListList, f func(UintptrList) BoolOption) BoolOptionList { acc := NilBoolOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrListList: UintptrList->StringOption */ func MapStringOptionToUintptrListList(m UintptrListList, f func(UintptrList) StringOption) StringOptionList { acc := NilStringOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrListList: UintptrList->IntOption */ func MapIntOptionToUintptrListList(m UintptrListList, f func(UintptrList) IntOption) IntOptionList { acc := NilIntOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrListList: UintptrList->Int8Option */ func MapInt8OptionToUintptrListList(m UintptrListList, f func(UintptrList) Int8Option) Int8OptionList { acc := NilInt8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrListList: UintptrList->Int16Option */ func MapInt16OptionToUintptrListList(m UintptrListList, f func(UintptrList) Int16Option) Int16OptionList { acc := NilInt16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrListList: UintptrList->Int32Option */ func MapInt32OptionToUintptrListList(m UintptrListList, f func(UintptrList) Int32Option) Int32OptionList { acc := NilInt32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrListList: UintptrList->Int64Option */ func MapInt64OptionToUintptrListList(m UintptrListList, f func(UintptrList) Int64Option) Int64OptionList { acc := NilInt64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrListList: UintptrList->UintOption */ func MapUintOptionToUintptrListList(m UintptrListList, f func(UintptrList) UintOption) UintOptionList { acc := NilUintOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrListList: UintptrList->Uint8Option */ func MapUint8OptionToUintptrListList(m UintptrListList, f func(UintptrList) Uint8Option) Uint8OptionList { acc := NilUint8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrListList: UintptrList->Uint16Option */ func MapUint16OptionToUintptrListList(m UintptrListList, f func(UintptrList) Uint16Option) Uint16OptionList { acc := NilUint16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrListList: UintptrList->Uint32Option */ func MapUint32OptionToUintptrListList(m UintptrListList, f func(UintptrList) Uint32Option) Uint32OptionList { acc := NilUint32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrListList: UintptrList->Uint64Option */ func MapUint64OptionToUintptrListList(m UintptrListList, f func(UintptrList) Uint64Option) Uint64OptionList { acc := NilUint64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrListList: UintptrList->UintptrOption */ func MapUintptrOptionToUintptrListList(m UintptrListList, f func(UintptrList) UintptrOption) UintptrOptionList { acc := NilUintptrOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrListList: UintptrList->ByteOption */ func MapByteOptionToUintptrListList(m UintptrListList, f func(UintptrList) ByteOption) ByteOptionList { acc := NilByteOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrListList: UintptrList->RuneOption */ func MapRuneOptionToUintptrListList(m UintptrListList, f func(UintptrList) RuneOption) RuneOptionList { acc := NilRuneOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrListList: UintptrList->Float32Option */ func MapFloat32OptionToUintptrListList(m UintptrListList, f func(UintptrList) Float32Option) Float32OptionList { acc := NilFloat32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrListList: UintptrList->Float64Option */ func MapFloat64OptionToUintptrListList(m UintptrListList, f func(UintptrList) Float64Option) Float64OptionList { acc := NilFloat64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrListList: UintptrList->Complex64Option */ func MapComplex64OptionToUintptrListList(m UintptrListList, f func(UintptrList) Complex64Option) Complex64OptionList { acc := NilComplex64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrListList: UintptrList->Complex128Option */ func MapComplex128OptionToUintptrListList(m UintptrListList, f func(UintptrList) Complex128Option) Complex128OptionList { acc := NilComplex128OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrListList: UintptrList->AnyOption */ func MapAnyOptionToUintptrListList(m UintptrListList, f func(UintptrList) AnyOption) AnyOptionList { acc := NilAnyOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrListList: UintptrList->[]bool */ func MapBoolArrToUintptrListList(m UintptrListList, f func(UintptrList) []bool) BoolArrList { acc := NilBoolArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrListList: UintptrList->[]string */ func MapStringArrToUintptrListList(m UintptrListList, f func(UintptrList) []string) StringArrList { acc := NilStringArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrListList: UintptrList->[]int */ func MapIntArrToUintptrListList(m UintptrListList, f func(UintptrList) []int) IntArrList { acc := NilIntArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrListList: UintptrList->[]int8 */ func MapInt8ArrToUintptrListList(m UintptrListList, f func(UintptrList) []int8) Int8ArrList { acc := NilInt8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrListList: UintptrList->[]int16 */ func MapInt16ArrToUintptrListList(m UintptrListList, f func(UintptrList) []int16) Int16ArrList { acc := NilInt16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrListList: UintptrList->[]int32 */ func MapInt32ArrToUintptrListList(m UintptrListList, f func(UintptrList) []int32) Int32ArrList { acc := NilInt32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrListList: UintptrList->[]int64 */ func MapInt64ArrToUintptrListList(m UintptrListList, f func(UintptrList) []int64) Int64ArrList { acc := NilInt64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrListList: UintptrList->[]uint */ func MapUintArrToUintptrListList(m UintptrListList, f func(UintptrList) []uint) UintArrList { acc := NilUintArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrListList: UintptrList->[]uint8 */ func MapUint8ArrToUintptrListList(m UintptrListList, f func(UintptrList) []uint8) Uint8ArrList { acc := NilUint8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrListList: UintptrList->[]uint16 */ func MapUint16ArrToUintptrListList(m UintptrListList, f func(UintptrList) []uint16) Uint16ArrList { acc := NilUint16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrListList: UintptrList->[]uint32 */ func MapUint32ArrToUintptrListList(m UintptrListList, f func(UintptrList) []uint32) Uint32ArrList { acc := NilUint32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrListList: UintptrList->[]uint64 */ func MapUint64ArrToUintptrListList(m UintptrListList, f func(UintptrList) []uint64) Uint64ArrList { acc := NilUint64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrListList: UintptrList->[]uintptr */ func MapUintptrArrToUintptrListList(m UintptrListList, f func(UintptrList) []uintptr) UintptrArrList { acc := NilUintptrArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrListList: UintptrList->[]byte */ func MapByteArrToUintptrListList(m UintptrListList, f func(UintptrList) []byte) ByteArrList { acc := NilByteArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrListList: UintptrList->[]rune */ func MapRuneArrToUintptrListList(m UintptrListList, f func(UintptrList) []rune) RuneArrList { acc := NilRuneArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrListList: UintptrList->[]float32 */ func MapFloat32ArrToUintptrListList(m UintptrListList, f func(UintptrList) []float32) Float32ArrList { acc := NilFloat32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrListList: UintptrList->[]float64 */ func MapFloat64ArrToUintptrListList(m UintptrListList, f func(UintptrList) []float64) Float64ArrList { acc := NilFloat64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrListList: UintptrList->[]complex64 */ func MapComplex64ArrToUintptrListList(m UintptrListList, f func(UintptrList) []complex64) Complex64ArrList { acc := NilComplex64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrListList: UintptrList->[]complex128 */ func MapComplex128ArrToUintptrListList(m UintptrListList, f func(UintptrList) []complex128) Complex128ArrList { acc := NilComplex128ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrListList: UintptrList->[]Any */ func MapAnyArrToUintptrListList(m UintptrListList, f func(UintptrList) []Any) AnyArrList { acc := NilAnyArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrListList: UintptrList->BoolList */ func MapBoolListToUintptrListList(m UintptrListList, f func(UintptrList) BoolList) BoolListList { acc := NilBoolListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrListList: UintptrList->StringList */ func MapStringListToUintptrListList(m UintptrListList, f func(UintptrList) StringList) StringListList { acc := NilStringListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrListList: UintptrList->IntList */ func MapIntListToUintptrListList(m UintptrListList, f func(UintptrList) IntList) IntListList { acc := NilIntListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrListList: UintptrList->Int8List */ func MapInt8ListToUintptrListList(m UintptrListList, f func(UintptrList) Int8List) Int8ListList { acc := NilInt8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrListList: UintptrList->Int16List */ func MapInt16ListToUintptrListList(m UintptrListList, f func(UintptrList) Int16List) Int16ListList { acc := NilInt16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrListList: UintptrList->Int32List */ func MapInt32ListToUintptrListList(m UintptrListList, f func(UintptrList) Int32List) Int32ListList { acc := NilInt32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrListList: UintptrList->Int64List */ func MapInt64ListToUintptrListList(m UintptrListList, f func(UintptrList) Int64List) Int64ListList { acc := NilInt64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrListList: UintptrList->UintList */ func MapUintListToUintptrListList(m UintptrListList, f func(UintptrList) UintList) UintListList { acc := NilUintListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrListList: UintptrList->Uint8List */ func MapUint8ListToUintptrListList(m UintptrListList, f func(UintptrList) Uint8List) Uint8ListList { acc := NilUint8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrListList: UintptrList->Uint16List */ func MapUint16ListToUintptrListList(m UintptrListList, f func(UintptrList) Uint16List) Uint16ListList { acc := NilUint16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrListList: UintptrList->Uint32List */ func MapUint32ListToUintptrListList(m UintptrListList, f func(UintptrList) Uint32List) Uint32ListList { acc := NilUint32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrListList: UintptrList->Uint64List */ func MapUint64ListToUintptrListList(m UintptrListList, f func(UintptrList) Uint64List) Uint64ListList { acc := NilUint64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrListList: UintptrList->UintptrList */ func MapUintptrListToUintptrListList(m UintptrListList, f func(UintptrList) UintptrList) UintptrListList { acc := NilUintptrListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrListList: UintptrList->ByteList */ func MapByteListToUintptrListList(m UintptrListList, f func(UintptrList) ByteList) ByteListList { acc := NilByteListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrListList: UintptrList->RuneList */ func MapRuneListToUintptrListList(m UintptrListList, f func(UintptrList) RuneList) RuneListList { acc := NilRuneListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrListList: UintptrList->Float32List */ func MapFloat32ListToUintptrListList(m UintptrListList, f func(UintptrList) Float32List) Float32ListList { acc := NilFloat32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrListList: UintptrList->Float64List */ func MapFloat64ListToUintptrListList(m UintptrListList, f func(UintptrList) Float64List) Float64ListList { acc := NilFloat64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrListList: UintptrList->Complex64List */ func MapComplex64ListToUintptrListList(m UintptrListList, f func(UintptrList) Complex64List) Complex64ListList { acc := NilComplex64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrListList: UintptrList->Complex128List */ func MapComplex128ListToUintptrListList(m UintptrListList, f func(UintptrList) Complex128List) Complex128ListList { acc := NilComplex128ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* UintptrListList: UintptrList->AnyList */ func MapAnyListToUintptrListList(m UintptrListList, f func(UintptrList) AnyList) AnyListList { acc := NilAnyListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteListList: ByteList->bool */ func MapBoolToByteListList(m ByteListList, f func(ByteList) bool) BoolList { acc := NilBoolList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteListList: ByteList->string */ func MapStringToByteListList(m ByteListList, f func(ByteList) string) StringList { acc := NilStringList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteListList: ByteList->int */ func MapIntToByteListList(m ByteListList, f func(ByteList) int) IntList { acc := NilIntList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteListList: ByteList->int8 */ func MapInt8ToByteListList(m ByteListList, f func(ByteList) int8) Int8List { acc := NilInt8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteListList: ByteList->int16 */ func MapInt16ToByteListList(m ByteListList, f func(ByteList) int16) Int16List { acc := NilInt16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteListList: ByteList->int32 */ func MapInt32ToByteListList(m ByteListList, f func(ByteList) int32) Int32List { acc := NilInt32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteListList: ByteList->int64 */ func MapInt64ToByteListList(m ByteListList, f func(ByteList) int64) Int64List { acc := NilInt64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteListList: ByteList->uint */ func MapUintToByteListList(m ByteListList, f func(ByteList) uint) UintList { acc := NilUintList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteListList: ByteList->uint8 */ func MapUint8ToByteListList(m ByteListList, f func(ByteList) uint8) Uint8List { acc := NilUint8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteListList: ByteList->uint16 */ func MapUint16ToByteListList(m ByteListList, f func(ByteList) uint16) Uint16List { acc := NilUint16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteListList: ByteList->uint32 */ func MapUint32ToByteListList(m ByteListList, f func(ByteList) uint32) Uint32List { acc := NilUint32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteListList: ByteList->uint64 */ func MapUint64ToByteListList(m ByteListList, f func(ByteList) uint64) Uint64List { acc := NilUint64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteListList: ByteList->uintptr */ func MapUintptrToByteListList(m ByteListList, f func(ByteList) uintptr) UintptrList { acc := NilUintptrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteListList: ByteList->byte */ func MapByteToByteListList(m ByteListList, f func(ByteList) byte) ByteList { acc := NilByteList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteListList: ByteList->rune */ func MapRuneToByteListList(m ByteListList, f func(ByteList) rune) RuneList { acc := NilRuneList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteListList: ByteList->float32 */ func MapFloat32ToByteListList(m ByteListList, f func(ByteList) float32) Float32List { acc := NilFloat32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteListList: ByteList->float64 */ func MapFloat64ToByteListList(m ByteListList, f func(ByteList) float64) Float64List { acc := NilFloat64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteListList: ByteList->complex64 */ func MapComplex64ToByteListList(m ByteListList, f func(ByteList) complex64) Complex64List { acc := NilComplex64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteListList: ByteList->complex128 */ func MapComplex128ToByteListList(m ByteListList, f func(ByteList) complex128) Complex128List { acc := NilComplex128List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteListList: ByteList->Any */ func MapAnyToByteListList(m ByteListList, f func(ByteList) Any) AnyList { acc := NilAnyList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteListList: ByteList->BoolOption */ func MapBoolOptionToByteListList(m ByteListList, f func(ByteList) BoolOption) BoolOptionList { acc := NilBoolOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteListList: ByteList->StringOption */ func MapStringOptionToByteListList(m ByteListList, f func(ByteList) StringOption) StringOptionList { acc := NilStringOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteListList: ByteList->IntOption */ func MapIntOptionToByteListList(m ByteListList, f func(ByteList) IntOption) IntOptionList { acc := NilIntOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteListList: ByteList->Int8Option */ func MapInt8OptionToByteListList(m ByteListList, f func(ByteList) Int8Option) Int8OptionList { acc := NilInt8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteListList: ByteList->Int16Option */ func MapInt16OptionToByteListList(m ByteListList, f func(ByteList) Int16Option) Int16OptionList { acc := NilInt16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteListList: ByteList->Int32Option */ func MapInt32OptionToByteListList(m ByteListList, f func(ByteList) Int32Option) Int32OptionList { acc := NilInt32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteListList: ByteList->Int64Option */ func MapInt64OptionToByteListList(m ByteListList, f func(ByteList) Int64Option) Int64OptionList { acc := NilInt64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteListList: ByteList->UintOption */ func MapUintOptionToByteListList(m ByteListList, f func(ByteList) UintOption) UintOptionList { acc := NilUintOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteListList: ByteList->Uint8Option */ func MapUint8OptionToByteListList(m ByteListList, f func(ByteList) Uint8Option) Uint8OptionList { acc := NilUint8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteListList: ByteList->Uint16Option */ func MapUint16OptionToByteListList(m ByteListList, f func(ByteList) Uint16Option) Uint16OptionList { acc := NilUint16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteListList: ByteList->Uint32Option */ func MapUint32OptionToByteListList(m ByteListList, f func(ByteList) Uint32Option) Uint32OptionList { acc := NilUint32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteListList: ByteList->Uint64Option */ func MapUint64OptionToByteListList(m ByteListList, f func(ByteList) Uint64Option) Uint64OptionList { acc := NilUint64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteListList: ByteList->UintptrOption */ func MapUintptrOptionToByteListList(m ByteListList, f func(ByteList) UintptrOption) UintptrOptionList { acc := NilUintptrOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteListList: ByteList->ByteOption */ func MapByteOptionToByteListList(m ByteListList, f func(ByteList) ByteOption) ByteOptionList { acc := NilByteOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteListList: ByteList->RuneOption */ func MapRuneOptionToByteListList(m ByteListList, f func(ByteList) RuneOption) RuneOptionList { acc := NilRuneOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteListList: ByteList->Float32Option */ func MapFloat32OptionToByteListList(m ByteListList, f func(ByteList) Float32Option) Float32OptionList { acc := NilFloat32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteListList: ByteList->Float64Option */ func MapFloat64OptionToByteListList(m ByteListList, f func(ByteList) Float64Option) Float64OptionList { acc := NilFloat64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteListList: ByteList->Complex64Option */ func MapComplex64OptionToByteListList(m ByteListList, f func(ByteList) Complex64Option) Complex64OptionList { acc := NilComplex64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteListList: ByteList->Complex128Option */ func MapComplex128OptionToByteListList(m ByteListList, f func(ByteList) Complex128Option) Complex128OptionList { acc := NilComplex128OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteListList: ByteList->AnyOption */ func MapAnyOptionToByteListList(m ByteListList, f func(ByteList) AnyOption) AnyOptionList { acc := NilAnyOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteListList: ByteList->[]bool */ func MapBoolArrToByteListList(m ByteListList, f func(ByteList) []bool) BoolArrList { acc := NilBoolArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteListList: ByteList->[]string */ func MapStringArrToByteListList(m ByteListList, f func(ByteList) []string) StringArrList { acc := NilStringArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteListList: ByteList->[]int */ func MapIntArrToByteListList(m ByteListList, f func(ByteList) []int) IntArrList { acc := NilIntArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteListList: ByteList->[]int8 */ func MapInt8ArrToByteListList(m ByteListList, f func(ByteList) []int8) Int8ArrList { acc := NilInt8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteListList: ByteList->[]int16 */ func MapInt16ArrToByteListList(m ByteListList, f func(ByteList) []int16) Int16ArrList { acc := NilInt16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteListList: ByteList->[]int32 */ func MapInt32ArrToByteListList(m ByteListList, f func(ByteList) []int32) Int32ArrList { acc := NilInt32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteListList: ByteList->[]int64 */ func MapInt64ArrToByteListList(m ByteListList, f func(ByteList) []int64) Int64ArrList { acc := NilInt64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteListList: ByteList->[]uint */ func MapUintArrToByteListList(m ByteListList, f func(ByteList) []uint) UintArrList { acc := NilUintArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteListList: ByteList->[]uint8 */ func MapUint8ArrToByteListList(m ByteListList, f func(ByteList) []uint8) Uint8ArrList { acc := NilUint8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteListList: ByteList->[]uint16 */ func MapUint16ArrToByteListList(m ByteListList, f func(ByteList) []uint16) Uint16ArrList { acc := NilUint16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteListList: ByteList->[]uint32 */ func MapUint32ArrToByteListList(m ByteListList, f func(ByteList) []uint32) Uint32ArrList { acc := NilUint32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteListList: ByteList->[]uint64 */ func MapUint64ArrToByteListList(m ByteListList, f func(ByteList) []uint64) Uint64ArrList { acc := NilUint64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteListList: ByteList->[]uintptr */ func MapUintptrArrToByteListList(m ByteListList, f func(ByteList) []uintptr) UintptrArrList { acc := NilUintptrArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteListList: ByteList->[]byte */ func MapByteArrToByteListList(m ByteListList, f func(ByteList) []byte) ByteArrList { acc := NilByteArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteListList: ByteList->[]rune */ func MapRuneArrToByteListList(m ByteListList, f func(ByteList) []rune) RuneArrList { acc := NilRuneArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteListList: ByteList->[]float32 */ func MapFloat32ArrToByteListList(m ByteListList, f func(ByteList) []float32) Float32ArrList { acc := NilFloat32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteListList: ByteList->[]float64 */ func MapFloat64ArrToByteListList(m ByteListList, f func(ByteList) []float64) Float64ArrList { acc := NilFloat64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteListList: ByteList->[]complex64 */ func MapComplex64ArrToByteListList(m ByteListList, f func(ByteList) []complex64) Complex64ArrList { acc := NilComplex64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteListList: ByteList->[]complex128 */ func MapComplex128ArrToByteListList(m ByteListList, f func(ByteList) []complex128) Complex128ArrList { acc := NilComplex128ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteListList: ByteList->[]Any */ func MapAnyArrToByteListList(m ByteListList, f func(ByteList) []Any) AnyArrList { acc := NilAnyArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteListList: ByteList->BoolList */ func MapBoolListToByteListList(m ByteListList, f func(ByteList) BoolList) BoolListList { acc := NilBoolListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteListList: ByteList->StringList */ func MapStringListToByteListList(m ByteListList, f func(ByteList) StringList) StringListList { acc := NilStringListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteListList: ByteList->IntList */ func MapIntListToByteListList(m ByteListList, f func(ByteList) IntList) IntListList { acc := NilIntListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteListList: ByteList->Int8List */ func MapInt8ListToByteListList(m ByteListList, f func(ByteList) Int8List) Int8ListList { acc := NilInt8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteListList: ByteList->Int16List */ func MapInt16ListToByteListList(m ByteListList, f func(ByteList) Int16List) Int16ListList { acc := NilInt16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteListList: ByteList->Int32List */ func MapInt32ListToByteListList(m ByteListList, f func(ByteList) Int32List) Int32ListList { acc := NilInt32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteListList: ByteList->Int64List */ func MapInt64ListToByteListList(m ByteListList, f func(ByteList) Int64List) Int64ListList { acc := NilInt64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteListList: ByteList->UintList */ func MapUintListToByteListList(m ByteListList, f func(ByteList) UintList) UintListList { acc := NilUintListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteListList: ByteList->Uint8List */ func MapUint8ListToByteListList(m ByteListList, f func(ByteList) Uint8List) Uint8ListList { acc := NilUint8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteListList: ByteList->Uint16List */ func MapUint16ListToByteListList(m ByteListList, f func(ByteList) Uint16List) Uint16ListList { acc := NilUint16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteListList: ByteList->Uint32List */ func MapUint32ListToByteListList(m ByteListList, f func(ByteList) Uint32List) Uint32ListList { acc := NilUint32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteListList: ByteList->Uint64List */ func MapUint64ListToByteListList(m ByteListList, f func(ByteList) Uint64List) Uint64ListList { acc := NilUint64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteListList: ByteList->UintptrList */ func MapUintptrListToByteListList(m ByteListList, f func(ByteList) UintptrList) UintptrListList { acc := NilUintptrListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteListList: ByteList->ByteList */ func MapByteListToByteListList(m ByteListList, f func(ByteList) ByteList) ByteListList { acc := NilByteListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteListList: ByteList->RuneList */ func MapRuneListToByteListList(m ByteListList, f func(ByteList) RuneList) RuneListList { acc := NilRuneListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteListList: ByteList->Float32List */ func MapFloat32ListToByteListList(m ByteListList, f func(ByteList) Float32List) Float32ListList { acc := NilFloat32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteListList: ByteList->Float64List */ func MapFloat64ListToByteListList(m ByteListList, f func(ByteList) Float64List) Float64ListList { acc := NilFloat64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteListList: ByteList->Complex64List */ func MapComplex64ListToByteListList(m ByteListList, f func(ByteList) Complex64List) Complex64ListList { acc := NilComplex64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteListList: ByteList->Complex128List */ func MapComplex128ListToByteListList(m ByteListList, f func(ByteList) Complex128List) Complex128ListList { acc := NilComplex128ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* ByteListList: ByteList->AnyList */ func MapAnyListToByteListList(m ByteListList, f func(ByteList) AnyList) AnyListList { acc := NilAnyListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneListList: RuneList->bool */ func MapBoolToRuneListList(m RuneListList, f func(RuneList) bool) BoolList { acc := NilBoolList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneListList: RuneList->string */ func MapStringToRuneListList(m RuneListList, f func(RuneList) string) StringList { acc := NilStringList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneListList: RuneList->int */ func MapIntToRuneListList(m RuneListList, f func(RuneList) int) IntList { acc := NilIntList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneListList: RuneList->int8 */ func MapInt8ToRuneListList(m RuneListList, f func(RuneList) int8) Int8List { acc := NilInt8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneListList: RuneList->int16 */ func MapInt16ToRuneListList(m RuneListList, f func(RuneList) int16) Int16List { acc := NilInt16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneListList: RuneList->int32 */ func MapInt32ToRuneListList(m RuneListList, f func(RuneList) int32) Int32List { acc := NilInt32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneListList: RuneList->int64 */ func MapInt64ToRuneListList(m RuneListList, f func(RuneList) int64) Int64List { acc := NilInt64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneListList: RuneList->uint */ func MapUintToRuneListList(m RuneListList, f func(RuneList) uint) UintList { acc := NilUintList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneListList: RuneList->uint8 */ func MapUint8ToRuneListList(m RuneListList, f func(RuneList) uint8) Uint8List { acc := NilUint8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneListList: RuneList->uint16 */ func MapUint16ToRuneListList(m RuneListList, f func(RuneList) uint16) Uint16List { acc := NilUint16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneListList: RuneList->uint32 */ func MapUint32ToRuneListList(m RuneListList, f func(RuneList) uint32) Uint32List { acc := NilUint32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneListList: RuneList->uint64 */ func MapUint64ToRuneListList(m RuneListList, f func(RuneList) uint64) Uint64List { acc := NilUint64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneListList: RuneList->uintptr */ func MapUintptrToRuneListList(m RuneListList, f func(RuneList) uintptr) UintptrList { acc := NilUintptrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneListList: RuneList->byte */ func MapByteToRuneListList(m RuneListList, f func(RuneList) byte) ByteList { acc := NilByteList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneListList: RuneList->rune */ func MapRuneToRuneListList(m RuneListList, f func(RuneList) rune) RuneList { acc := NilRuneList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneListList: RuneList->float32 */ func MapFloat32ToRuneListList(m RuneListList, f func(RuneList) float32) Float32List { acc := NilFloat32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneListList: RuneList->float64 */ func MapFloat64ToRuneListList(m RuneListList, f func(RuneList) float64) Float64List { acc := NilFloat64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneListList: RuneList->complex64 */ func MapComplex64ToRuneListList(m RuneListList, f func(RuneList) complex64) Complex64List { acc := NilComplex64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneListList: RuneList->complex128 */ func MapComplex128ToRuneListList(m RuneListList, f func(RuneList) complex128) Complex128List { acc := NilComplex128List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneListList: RuneList->Any */ func MapAnyToRuneListList(m RuneListList, f func(RuneList) Any) AnyList { acc := NilAnyList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneListList: RuneList->BoolOption */ func MapBoolOptionToRuneListList(m RuneListList, f func(RuneList) BoolOption) BoolOptionList { acc := NilBoolOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneListList: RuneList->StringOption */ func MapStringOptionToRuneListList(m RuneListList, f func(RuneList) StringOption) StringOptionList { acc := NilStringOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneListList: RuneList->IntOption */ func MapIntOptionToRuneListList(m RuneListList, f func(RuneList) IntOption) IntOptionList { acc := NilIntOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneListList: RuneList->Int8Option */ func MapInt8OptionToRuneListList(m RuneListList, f func(RuneList) Int8Option) Int8OptionList { acc := NilInt8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneListList: RuneList->Int16Option */ func MapInt16OptionToRuneListList(m RuneListList, f func(RuneList) Int16Option) Int16OptionList { acc := NilInt16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneListList: RuneList->Int32Option */ func MapInt32OptionToRuneListList(m RuneListList, f func(RuneList) Int32Option) Int32OptionList { acc := NilInt32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneListList: RuneList->Int64Option */ func MapInt64OptionToRuneListList(m RuneListList, f func(RuneList) Int64Option) Int64OptionList { acc := NilInt64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneListList: RuneList->UintOption */ func MapUintOptionToRuneListList(m RuneListList, f func(RuneList) UintOption) UintOptionList { acc := NilUintOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneListList: RuneList->Uint8Option */ func MapUint8OptionToRuneListList(m RuneListList, f func(RuneList) Uint8Option) Uint8OptionList { acc := NilUint8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneListList: RuneList->Uint16Option */ func MapUint16OptionToRuneListList(m RuneListList, f func(RuneList) Uint16Option) Uint16OptionList { acc := NilUint16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneListList: RuneList->Uint32Option */ func MapUint32OptionToRuneListList(m RuneListList, f func(RuneList) Uint32Option) Uint32OptionList { acc := NilUint32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneListList: RuneList->Uint64Option */ func MapUint64OptionToRuneListList(m RuneListList, f func(RuneList) Uint64Option) Uint64OptionList { acc := NilUint64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneListList: RuneList->UintptrOption */ func MapUintptrOptionToRuneListList(m RuneListList, f func(RuneList) UintptrOption) UintptrOptionList { acc := NilUintptrOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneListList: RuneList->ByteOption */ func MapByteOptionToRuneListList(m RuneListList, f func(RuneList) ByteOption) ByteOptionList { acc := NilByteOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneListList: RuneList->RuneOption */ func MapRuneOptionToRuneListList(m RuneListList, f func(RuneList) RuneOption) RuneOptionList { acc := NilRuneOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneListList: RuneList->Float32Option */ func MapFloat32OptionToRuneListList(m RuneListList, f func(RuneList) Float32Option) Float32OptionList { acc := NilFloat32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneListList: RuneList->Float64Option */ func MapFloat64OptionToRuneListList(m RuneListList, f func(RuneList) Float64Option) Float64OptionList { acc := NilFloat64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneListList: RuneList->Complex64Option */ func MapComplex64OptionToRuneListList(m RuneListList, f func(RuneList) Complex64Option) Complex64OptionList { acc := NilComplex64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneListList: RuneList->Complex128Option */ func MapComplex128OptionToRuneListList(m RuneListList, f func(RuneList) Complex128Option) Complex128OptionList { acc := NilComplex128OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneListList: RuneList->AnyOption */ func MapAnyOptionToRuneListList(m RuneListList, f func(RuneList) AnyOption) AnyOptionList { acc := NilAnyOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneListList: RuneList->[]bool */ func MapBoolArrToRuneListList(m RuneListList, f func(RuneList) []bool) BoolArrList { acc := NilBoolArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneListList: RuneList->[]string */ func MapStringArrToRuneListList(m RuneListList, f func(RuneList) []string) StringArrList { acc := NilStringArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneListList: RuneList->[]int */ func MapIntArrToRuneListList(m RuneListList, f func(RuneList) []int) IntArrList { acc := NilIntArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneListList: RuneList->[]int8 */ func MapInt8ArrToRuneListList(m RuneListList, f func(RuneList) []int8) Int8ArrList { acc := NilInt8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneListList: RuneList->[]int16 */ func MapInt16ArrToRuneListList(m RuneListList, f func(RuneList) []int16) Int16ArrList { acc := NilInt16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneListList: RuneList->[]int32 */ func MapInt32ArrToRuneListList(m RuneListList, f func(RuneList) []int32) Int32ArrList { acc := NilInt32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneListList: RuneList->[]int64 */ func MapInt64ArrToRuneListList(m RuneListList, f func(RuneList) []int64) Int64ArrList { acc := NilInt64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneListList: RuneList->[]uint */ func MapUintArrToRuneListList(m RuneListList, f func(RuneList) []uint) UintArrList { acc := NilUintArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneListList: RuneList->[]uint8 */ func MapUint8ArrToRuneListList(m RuneListList, f func(RuneList) []uint8) Uint8ArrList { acc := NilUint8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneListList: RuneList->[]uint16 */ func MapUint16ArrToRuneListList(m RuneListList, f func(RuneList) []uint16) Uint16ArrList { acc := NilUint16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneListList: RuneList->[]uint32 */ func MapUint32ArrToRuneListList(m RuneListList, f func(RuneList) []uint32) Uint32ArrList { acc := NilUint32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneListList: RuneList->[]uint64 */ func MapUint64ArrToRuneListList(m RuneListList, f func(RuneList) []uint64) Uint64ArrList { acc := NilUint64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneListList: RuneList->[]uintptr */ func MapUintptrArrToRuneListList(m RuneListList, f func(RuneList) []uintptr) UintptrArrList { acc := NilUintptrArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneListList: RuneList->[]byte */ func MapByteArrToRuneListList(m RuneListList, f func(RuneList) []byte) ByteArrList { acc := NilByteArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneListList: RuneList->[]rune */ func MapRuneArrToRuneListList(m RuneListList, f func(RuneList) []rune) RuneArrList { acc := NilRuneArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneListList: RuneList->[]float32 */ func MapFloat32ArrToRuneListList(m RuneListList, f func(RuneList) []float32) Float32ArrList { acc := NilFloat32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneListList: RuneList->[]float64 */ func MapFloat64ArrToRuneListList(m RuneListList, f func(RuneList) []float64) Float64ArrList { acc := NilFloat64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneListList: RuneList->[]complex64 */ func MapComplex64ArrToRuneListList(m RuneListList, f func(RuneList) []complex64) Complex64ArrList { acc := NilComplex64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneListList: RuneList->[]complex128 */ func MapComplex128ArrToRuneListList(m RuneListList, f func(RuneList) []complex128) Complex128ArrList { acc := NilComplex128ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneListList: RuneList->[]Any */ func MapAnyArrToRuneListList(m RuneListList, f func(RuneList) []Any) AnyArrList { acc := NilAnyArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneListList: RuneList->BoolList */ func MapBoolListToRuneListList(m RuneListList, f func(RuneList) BoolList) BoolListList { acc := NilBoolListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneListList: RuneList->StringList */ func MapStringListToRuneListList(m RuneListList, f func(RuneList) StringList) StringListList { acc := NilStringListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneListList: RuneList->IntList */ func MapIntListToRuneListList(m RuneListList, f func(RuneList) IntList) IntListList { acc := NilIntListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneListList: RuneList->Int8List */ func MapInt8ListToRuneListList(m RuneListList, f func(RuneList) Int8List) Int8ListList { acc := NilInt8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneListList: RuneList->Int16List */ func MapInt16ListToRuneListList(m RuneListList, f func(RuneList) Int16List) Int16ListList { acc := NilInt16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneListList: RuneList->Int32List */ func MapInt32ListToRuneListList(m RuneListList, f func(RuneList) Int32List) Int32ListList { acc := NilInt32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneListList: RuneList->Int64List */ func MapInt64ListToRuneListList(m RuneListList, f func(RuneList) Int64List) Int64ListList { acc := NilInt64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneListList: RuneList->UintList */ func MapUintListToRuneListList(m RuneListList, f func(RuneList) UintList) UintListList { acc := NilUintListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneListList: RuneList->Uint8List */ func MapUint8ListToRuneListList(m RuneListList, f func(RuneList) Uint8List) Uint8ListList { acc := NilUint8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneListList: RuneList->Uint16List */ func MapUint16ListToRuneListList(m RuneListList, f func(RuneList) Uint16List) Uint16ListList { acc := NilUint16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneListList: RuneList->Uint32List */ func MapUint32ListToRuneListList(m RuneListList, f func(RuneList) Uint32List) Uint32ListList { acc := NilUint32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneListList: RuneList->Uint64List */ func MapUint64ListToRuneListList(m RuneListList, f func(RuneList) Uint64List) Uint64ListList { acc := NilUint64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneListList: RuneList->UintptrList */ func MapUintptrListToRuneListList(m RuneListList, f func(RuneList) UintptrList) UintptrListList { acc := NilUintptrListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneListList: RuneList->ByteList */ func MapByteListToRuneListList(m RuneListList, f func(RuneList) ByteList) ByteListList { acc := NilByteListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneListList: RuneList->RuneList */ func MapRuneListToRuneListList(m RuneListList, f func(RuneList) RuneList) RuneListList { acc := NilRuneListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneListList: RuneList->Float32List */ func MapFloat32ListToRuneListList(m RuneListList, f func(RuneList) Float32List) Float32ListList { acc := NilFloat32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneListList: RuneList->Float64List */ func MapFloat64ListToRuneListList(m RuneListList, f func(RuneList) Float64List) Float64ListList { acc := NilFloat64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneListList: RuneList->Complex64List */ func MapComplex64ListToRuneListList(m RuneListList, f func(RuneList) Complex64List) Complex64ListList { acc := NilComplex64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneListList: RuneList->Complex128List */ func MapComplex128ListToRuneListList(m RuneListList, f func(RuneList) Complex128List) Complex128ListList { acc := NilComplex128ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* RuneListList: RuneList->AnyList */ func MapAnyListToRuneListList(m RuneListList, f func(RuneList) AnyList) AnyListList { acc := NilAnyListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ListList: Float32List->bool */ func MapBoolToFloat32ListList(m Float32ListList, f func(Float32List) bool) BoolList { acc := NilBoolList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ListList: Float32List->string */ func MapStringToFloat32ListList(m Float32ListList, f func(Float32List) string) StringList { acc := NilStringList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ListList: Float32List->int */ func MapIntToFloat32ListList(m Float32ListList, f func(Float32List) int) IntList { acc := NilIntList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ListList: Float32List->int8 */ func MapInt8ToFloat32ListList(m Float32ListList, f func(Float32List) int8) Int8List { acc := NilInt8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ListList: Float32List->int16 */ func MapInt16ToFloat32ListList(m Float32ListList, f func(Float32List) int16) Int16List { acc := NilInt16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ListList: Float32List->int32 */ func MapInt32ToFloat32ListList(m Float32ListList, f func(Float32List) int32) Int32List { acc := NilInt32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ListList: Float32List->int64 */ func MapInt64ToFloat32ListList(m Float32ListList, f func(Float32List) int64) Int64List { acc := NilInt64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ListList: Float32List->uint */ func MapUintToFloat32ListList(m Float32ListList, f func(Float32List) uint) UintList { acc := NilUintList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ListList: Float32List->uint8 */ func MapUint8ToFloat32ListList(m Float32ListList, f func(Float32List) uint8) Uint8List { acc := NilUint8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ListList: Float32List->uint16 */ func MapUint16ToFloat32ListList(m Float32ListList, f func(Float32List) uint16) Uint16List { acc := NilUint16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ListList: Float32List->uint32 */ func MapUint32ToFloat32ListList(m Float32ListList, f func(Float32List) uint32) Uint32List { acc := NilUint32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ListList: Float32List->uint64 */ func MapUint64ToFloat32ListList(m Float32ListList, f func(Float32List) uint64) Uint64List { acc := NilUint64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ListList: Float32List->uintptr */ func MapUintptrToFloat32ListList(m Float32ListList, f func(Float32List) uintptr) UintptrList { acc := NilUintptrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ListList: Float32List->byte */ func MapByteToFloat32ListList(m Float32ListList, f func(Float32List) byte) ByteList { acc := NilByteList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ListList: Float32List->rune */ func MapRuneToFloat32ListList(m Float32ListList, f func(Float32List) rune) RuneList { acc := NilRuneList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ListList: Float32List->float32 */ func MapFloat32ToFloat32ListList(m Float32ListList, f func(Float32List) float32) Float32List { acc := NilFloat32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ListList: Float32List->float64 */ func MapFloat64ToFloat32ListList(m Float32ListList, f func(Float32List) float64) Float64List { acc := NilFloat64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ListList: Float32List->complex64 */ func MapComplex64ToFloat32ListList(m Float32ListList, f func(Float32List) complex64) Complex64List { acc := NilComplex64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ListList: Float32List->complex128 */ func MapComplex128ToFloat32ListList(m Float32ListList, f func(Float32List) complex128) Complex128List { acc := NilComplex128List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ListList: Float32List->Any */ func MapAnyToFloat32ListList(m Float32ListList, f func(Float32List) Any) AnyList { acc := NilAnyList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ListList: Float32List->BoolOption */ func MapBoolOptionToFloat32ListList(m Float32ListList, f func(Float32List) BoolOption) BoolOptionList { acc := NilBoolOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ListList: Float32List->StringOption */ func MapStringOptionToFloat32ListList(m Float32ListList, f func(Float32List) StringOption) StringOptionList { acc := NilStringOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ListList: Float32List->IntOption */ func MapIntOptionToFloat32ListList(m Float32ListList, f func(Float32List) IntOption) IntOptionList { acc := NilIntOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ListList: Float32List->Int8Option */ func MapInt8OptionToFloat32ListList(m Float32ListList, f func(Float32List) Int8Option) Int8OptionList { acc := NilInt8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ListList: Float32List->Int16Option */ func MapInt16OptionToFloat32ListList(m Float32ListList, f func(Float32List) Int16Option) Int16OptionList { acc := NilInt16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ListList: Float32List->Int32Option */ func MapInt32OptionToFloat32ListList(m Float32ListList, f func(Float32List) Int32Option) Int32OptionList { acc := NilInt32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ListList: Float32List->Int64Option */ func MapInt64OptionToFloat32ListList(m Float32ListList, f func(Float32List) Int64Option) Int64OptionList { acc := NilInt64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ListList: Float32List->UintOption */ func MapUintOptionToFloat32ListList(m Float32ListList, f func(Float32List) UintOption) UintOptionList { acc := NilUintOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ListList: Float32List->Uint8Option */ func MapUint8OptionToFloat32ListList(m Float32ListList, f func(Float32List) Uint8Option) Uint8OptionList { acc := NilUint8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ListList: Float32List->Uint16Option */ func MapUint16OptionToFloat32ListList(m Float32ListList, f func(Float32List) Uint16Option) Uint16OptionList { acc := NilUint16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ListList: Float32List->Uint32Option */ func MapUint32OptionToFloat32ListList(m Float32ListList, f func(Float32List) Uint32Option) Uint32OptionList { acc := NilUint32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ListList: Float32List->Uint64Option */ func MapUint64OptionToFloat32ListList(m Float32ListList, f func(Float32List) Uint64Option) Uint64OptionList { acc := NilUint64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ListList: Float32List->UintptrOption */ func MapUintptrOptionToFloat32ListList(m Float32ListList, f func(Float32List) UintptrOption) UintptrOptionList { acc := NilUintptrOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ListList: Float32List->ByteOption */ func MapByteOptionToFloat32ListList(m Float32ListList, f func(Float32List) ByteOption) ByteOptionList { acc := NilByteOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ListList: Float32List->RuneOption */ func MapRuneOptionToFloat32ListList(m Float32ListList, f func(Float32List) RuneOption) RuneOptionList { acc := NilRuneOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ListList: Float32List->Float32Option */ func MapFloat32OptionToFloat32ListList(m Float32ListList, f func(Float32List) Float32Option) Float32OptionList { acc := NilFloat32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ListList: Float32List->Float64Option */ func MapFloat64OptionToFloat32ListList(m Float32ListList, f func(Float32List) Float64Option) Float64OptionList { acc := NilFloat64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ListList: Float32List->Complex64Option */ func MapComplex64OptionToFloat32ListList(m Float32ListList, f func(Float32List) Complex64Option) Complex64OptionList { acc := NilComplex64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ListList: Float32List->Complex128Option */ func MapComplex128OptionToFloat32ListList(m Float32ListList, f func(Float32List) Complex128Option) Complex128OptionList { acc := NilComplex128OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ListList: Float32List->AnyOption */ func MapAnyOptionToFloat32ListList(m Float32ListList, f func(Float32List) AnyOption) AnyOptionList { acc := NilAnyOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ListList: Float32List->[]bool */ func MapBoolArrToFloat32ListList(m Float32ListList, f func(Float32List) []bool) BoolArrList { acc := NilBoolArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ListList: Float32List->[]string */ func MapStringArrToFloat32ListList(m Float32ListList, f func(Float32List) []string) StringArrList { acc := NilStringArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ListList: Float32List->[]int */ func MapIntArrToFloat32ListList(m Float32ListList, f func(Float32List) []int) IntArrList { acc := NilIntArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ListList: Float32List->[]int8 */ func MapInt8ArrToFloat32ListList(m Float32ListList, f func(Float32List) []int8) Int8ArrList { acc := NilInt8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ListList: Float32List->[]int16 */ func MapInt16ArrToFloat32ListList(m Float32ListList, f func(Float32List) []int16) Int16ArrList { acc := NilInt16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ListList: Float32List->[]int32 */ func MapInt32ArrToFloat32ListList(m Float32ListList, f func(Float32List) []int32) Int32ArrList { acc := NilInt32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ListList: Float32List->[]int64 */ func MapInt64ArrToFloat32ListList(m Float32ListList, f func(Float32List) []int64) Int64ArrList { acc := NilInt64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ListList: Float32List->[]uint */ func MapUintArrToFloat32ListList(m Float32ListList, f func(Float32List) []uint) UintArrList { acc := NilUintArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ListList: Float32List->[]uint8 */ func MapUint8ArrToFloat32ListList(m Float32ListList, f func(Float32List) []uint8) Uint8ArrList { acc := NilUint8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ListList: Float32List->[]uint16 */ func MapUint16ArrToFloat32ListList(m Float32ListList, f func(Float32List) []uint16) Uint16ArrList { acc := NilUint16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ListList: Float32List->[]uint32 */ func MapUint32ArrToFloat32ListList(m Float32ListList, f func(Float32List) []uint32) Uint32ArrList { acc := NilUint32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ListList: Float32List->[]uint64 */ func MapUint64ArrToFloat32ListList(m Float32ListList, f func(Float32List) []uint64) Uint64ArrList { acc := NilUint64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ListList: Float32List->[]uintptr */ func MapUintptrArrToFloat32ListList(m Float32ListList, f func(Float32List) []uintptr) UintptrArrList { acc := NilUintptrArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ListList: Float32List->[]byte */ func MapByteArrToFloat32ListList(m Float32ListList, f func(Float32List) []byte) ByteArrList { acc := NilByteArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ListList: Float32List->[]rune */ func MapRuneArrToFloat32ListList(m Float32ListList, f func(Float32List) []rune) RuneArrList { acc := NilRuneArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ListList: Float32List->[]float32 */ func MapFloat32ArrToFloat32ListList(m Float32ListList, f func(Float32List) []float32) Float32ArrList { acc := NilFloat32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ListList: Float32List->[]float64 */ func MapFloat64ArrToFloat32ListList(m Float32ListList, f func(Float32List) []float64) Float64ArrList { acc := NilFloat64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ListList: Float32List->[]complex64 */ func MapComplex64ArrToFloat32ListList(m Float32ListList, f func(Float32List) []complex64) Complex64ArrList { acc := NilComplex64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ListList: Float32List->[]complex128 */ func MapComplex128ArrToFloat32ListList(m Float32ListList, f func(Float32List) []complex128) Complex128ArrList { acc := NilComplex128ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ListList: Float32List->[]Any */ func MapAnyArrToFloat32ListList(m Float32ListList, f func(Float32List) []Any) AnyArrList { acc := NilAnyArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ListList: Float32List->BoolList */ func MapBoolListToFloat32ListList(m Float32ListList, f func(Float32List) BoolList) BoolListList { acc := NilBoolListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ListList: Float32List->StringList */ func MapStringListToFloat32ListList(m Float32ListList, f func(Float32List) StringList) StringListList { acc := NilStringListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ListList: Float32List->IntList */ func MapIntListToFloat32ListList(m Float32ListList, f func(Float32List) IntList) IntListList { acc := NilIntListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ListList: Float32List->Int8List */ func MapInt8ListToFloat32ListList(m Float32ListList, f func(Float32List) Int8List) Int8ListList { acc := NilInt8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ListList: Float32List->Int16List */ func MapInt16ListToFloat32ListList(m Float32ListList, f func(Float32List) Int16List) Int16ListList { acc := NilInt16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ListList: Float32List->Int32List */ func MapInt32ListToFloat32ListList(m Float32ListList, f func(Float32List) Int32List) Int32ListList { acc := NilInt32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ListList: Float32List->Int64List */ func MapInt64ListToFloat32ListList(m Float32ListList, f func(Float32List) Int64List) Int64ListList { acc := NilInt64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ListList: Float32List->UintList */ func MapUintListToFloat32ListList(m Float32ListList, f func(Float32List) UintList) UintListList { acc := NilUintListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ListList: Float32List->Uint8List */ func MapUint8ListToFloat32ListList(m Float32ListList, f func(Float32List) Uint8List) Uint8ListList { acc := NilUint8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ListList: Float32List->Uint16List */ func MapUint16ListToFloat32ListList(m Float32ListList, f func(Float32List) Uint16List) Uint16ListList { acc := NilUint16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ListList: Float32List->Uint32List */ func MapUint32ListToFloat32ListList(m Float32ListList, f func(Float32List) Uint32List) Uint32ListList { acc := NilUint32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ListList: Float32List->Uint64List */ func MapUint64ListToFloat32ListList(m Float32ListList, f func(Float32List) Uint64List) Uint64ListList { acc := NilUint64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ListList: Float32List->UintptrList */ func MapUintptrListToFloat32ListList(m Float32ListList, f func(Float32List) UintptrList) UintptrListList { acc := NilUintptrListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ListList: Float32List->ByteList */ func MapByteListToFloat32ListList(m Float32ListList, f func(Float32List) ByteList) ByteListList { acc := NilByteListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ListList: Float32List->RuneList */ func MapRuneListToFloat32ListList(m Float32ListList, f func(Float32List) RuneList) RuneListList { acc := NilRuneListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ListList: Float32List->Float32List */ func MapFloat32ListToFloat32ListList(m Float32ListList, f func(Float32List) Float32List) Float32ListList { acc := NilFloat32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ListList: Float32List->Float64List */ func MapFloat64ListToFloat32ListList(m Float32ListList, f func(Float32List) Float64List) Float64ListList { acc := NilFloat64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ListList: Float32List->Complex64List */ func MapComplex64ListToFloat32ListList(m Float32ListList, f func(Float32List) Complex64List) Complex64ListList { acc := NilComplex64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ListList: Float32List->Complex128List */ func MapComplex128ListToFloat32ListList(m Float32ListList, f func(Float32List) Complex128List) Complex128ListList { acc := NilComplex128ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float32ListList: Float32List->AnyList */ func MapAnyListToFloat32ListList(m Float32ListList, f func(Float32List) AnyList) AnyListList { acc := NilAnyListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ListList: Float64List->bool */ func MapBoolToFloat64ListList(m Float64ListList, f func(Float64List) bool) BoolList { acc := NilBoolList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ListList: Float64List->string */ func MapStringToFloat64ListList(m Float64ListList, f func(Float64List) string) StringList { acc := NilStringList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ListList: Float64List->int */ func MapIntToFloat64ListList(m Float64ListList, f func(Float64List) int) IntList { acc := NilIntList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ListList: Float64List->int8 */ func MapInt8ToFloat64ListList(m Float64ListList, f func(Float64List) int8) Int8List { acc := NilInt8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ListList: Float64List->int16 */ func MapInt16ToFloat64ListList(m Float64ListList, f func(Float64List) int16) Int16List { acc := NilInt16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ListList: Float64List->int32 */ func MapInt32ToFloat64ListList(m Float64ListList, f func(Float64List) int32) Int32List { acc := NilInt32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ListList: Float64List->int64 */ func MapInt64ToFloat64ListList(m Float64ListList, f func(Float64List) int64) Int64List { acc := NilInt64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ListList: Float64List->uint */ func MapUintToFloat64ListList(m Float64ListList, f func(Float64List) uint) UintList { acc := NilUintList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ListList: Float64List->uint8 */ func MapUint8ToFloat64ListList(m Float64ListList, f func(Float64List) uint8) Uint8List { acc := NilUint8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ListList: Float64List->uint16 */ func MapUint16ToFloat64ListList(m Float64ListList, f func(Float64List) uint16) Uint16List { acc := NilUint16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ListList: Float64List->uint32 */ func MapUint32ToFloat64ListList(m Float64ListList, f func(Float64List) uint32) Uint32List { acc := NilUint32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ListList: Float64List->uint64 */ func MapUint64ToFloat64ListList(m Float64ListList, f func(Float64List) uint64) Uint64List { acc := NilUint64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ListList: Float64List->uintptr */ func MapUintptrToFloat64ListList(m Float64ListList, f func(Float64List) uintptr) UintptrList { acc := NilUintptrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ListList: Float64List->byte */ func MapByteToFloat64ListList(m Float64ListList, f func(Float64List) byte) ByteList { acc := NilByteList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ListList: Float64List->rune */ func MapRuneToFloat64ListList(m Float64ListList, f func(Float64List) rune) RuneList { acc := NilRuneList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ListList: Float64List->float32 */ func MapFloat32ToFloat64ListList(m Float64ListList, f func(Float64List) float32) Float32List { acc := NilFloat32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ListList: Float64List->float64 */ func MapFloat64ToFloat64ListList(m Float64ListList, f func(Float64List) float64) Float64List { acc := NilFloat64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ListList: Float64List->complex64 */ func MapComplex64ToFloat64ListList(m Float64ListList, f func(Float64List) complex64) Complex64List { acc := NilComplex64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ListList: Float64List->complex128 */ func MapComplex128ToFloat64ListList(m Float64ListList, f func(Float64List) complex128) Complex128List { acc := NilComplex128List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ListList: Float64List->Any */ func MapAnyToFloat64ListList(m Float64ListList, f func(Float64List) Any) AnyList { acc := NilAnyList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ListList: Float64List->BoolOption */ func MapBoolOptionToFloat64ListList(m Float64ListList, f func(Float64List) BoolOption) BoolOptionList { acc := NilBoolOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ListList: Float64List->StringOption */ func MapStringOptionToFloat64ListList(m Float64ListList, f func(Float64List) StringOption) StringOptionList { acc := NilStringOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ListList: Float64List->IntOption */ func MapIntOptionToFloat64ListList(m Float64ListList, f func(Float64List) IntOption) IntOptionList { acc := NilIntOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ListList: Float64List->Int8Option */ func MapInt8OptionToFloat64ListList(m Float64ListList, f func(Float64List) Int8Option) Int8OptionList { acc := NilInt8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ListList: Float64List->Int16Option */ func MapInt16OptionToFloat64ListList(m Float64ListList, f func(Float64List) Int16Option) Int16OptionList { acc := NilInt16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ListList: Float64List->Int32Option */ func MapInt32OptionToFloat64ListList(m Float64ListList, f func(Float64List) Int32Option) Int32OptionList { acc := NilInt32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ListList: Float64List->Int64Option */ func MapInt64OptionToFloat64ListList(m Float64ListList, f func(Float64List) Int64Option) Int64OptionList { acc := NilInt64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ListList: Float64List->UintOption */ func MapUintOptionToFloat64ListList(m Float64ListList, f func(Float64List) UintOption) UintOptionList { acc := NilUintOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ListList: Float64List->Uint8Option */ func MapUint8OptionToFloat64ListList(m Float64ListList, f func(Float64List) Uint8Option) Uint8OptionList { acc := NilUint8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ListList: Float64List->Uint16Option */ func MapUint16OptionToFloat64ListList(m Float64ListList, f func(Float64List) Uint16Option) Uint16OptionList { acc := NilUint16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ListList: Float64List->Uint32Option */ func MapUint32OptionToFloat64ListList(m Float64ListList, f func(Float64List) Uint32Option) Uint32OptionList { acc := NilUint32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ListList: Float64List->Uint64Option */ func MapUint64OptionToFloat64ListList(m Float64ListList, f func(Float64List) Uint64Option) Uint64OptionList { acc := NilUint64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ListList: Float64List->UintptrOption */ func MapUintptrOptionToFloat64ListList(m Float64ListList, f func(Float64List) UintptrOption) UintptrOptionList { acc := NilUintptrOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ListList: Float64List->ByteOption */ func MapByteOptionToFloat64ListList(m Float64ListList, f func(Float64List) ByteOption) ByteOptionList { acc := NilByteOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ListList: Float64List->RuneOption */ func MapRuneOptionToFloat64ListList(m Float64ListList, f func(Float64List) RuneOption) RuneOptionList { acc := NilRuneOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ListList: Float64List->Float32Option */ func MapFloat32OptionToFloat64ListList(m Float64ListList, f func(Float64List) Float32Option) Float32OptionList { acc := NilFloat32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ListList: Float64List->Float64Option */ func MapFloat64OptionToFloat64ListList(m Float64ListList, f func(Float64List) Float64Option) Float64OptionList { acc := NilFloat64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ListList: Float64List->Complex64Option */ func MapComplex64OptionToFloat64ListList(m Float64ListList, f func(Float64List) Complex64Option) Complex64OptionList { acc := NilComplex64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ListList: Float64List->Complex128Option */ func MapComplex128OptionToFloat64ListList(m Float64ListList, f func(Float64List) Complex128Option) Complex128OptionList { acc := NilComplex128OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ListList: Float64List->AnyOption */ func MapAnyOptionToFloat64ListList(m Float64ListList, f func(Float64List) AnyOption) AnyOptionList { acc := NilAnyOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ListList: Float64List->[]bool */ func MapBoolArrToFloat64ListList(m Float64ListList, f func(Float64List) []bool) BoolArrList { acc := NilBoolArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ListList: Float64List->[]string */ func MapStringArrToFloat64ListList(m Float64ListList, f func(Float64List) []string) StringArrList { acc := NilStringArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ListList: Float64List->[]int */ func MapIntArrToFloat64ListList(m Float64ListList, f func(Float64List) []int) IntArrList { acc := NilIntArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ListList: Float64List->[]int8 */ func MapInt8ArrToFloat64ListList(m Float64ListList, f func(Float64List) []int8) Int8ArrList { acc := NilInt8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ListList: Float64List->[]int16 */ func MapInt16ArrToFloat64ListList(m Float64ListList, f func(Float64List) []int16) Int16ArrList { acc := NilInt16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ListList: Float64List->[]int32 */ func MapInt32ArrToFloat64ListList(m Float64ListList, f func(Float64List) []int32) Int32ArrList { acc := NilInt32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ListList: Float64List->[]int64 */ func MapInt64ArrToFloat64ListList(m Float64ListList, f func(Float64List) []int64) Int64ArrList { acc := NilInt64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ListList: Float64List->[]uint */ func MapUintArrToFloat64ListList(m Float64ListList, f func(Float64List) []uint) UintArrList { acc := NilUintArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ListList: Float64List->[]uint8 */ func MapUint8ArrToFloat64ListList(m Float64ListList, f func(Float64List) []uint8) Uint8ArrList { acc := NilUint8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ListList: Float64List->[]uint16 */ func MapUint16ArrToFloat64ListList(m Float64ListList, f func(Float64List) []uint16) Uint16ArrList { acc := NilUint16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ListList: Float64List->[]uint32 */ func MapUint32ArrToFloat64ListList(m Float64ListList, f func(Float64List) []uint32) Uint32ArrList { acc := NilUint32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ListList: Float64List->[]uint64 */ func MapUint64ArrToFloat64ListList(m Float64ListList, f func(Float64List) []uint64) Uint64ArrList { acc := NilUint64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ListList: Float64List->[]uintptr */ func MapUintptrArrToFloat64ListList(m Float64ListList, f func(Float64List) []uintptr) UintptrArrList { acc := NilUintptrArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ListList: Float64List->[]byte */ func MapByteArrToFloat64ListList(m Float64ListList, f func(Float64List) []byte) ByteArrList { acc := NilByteArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ListList: Float64List->[]rune */ func MapRuneArrToFloat64ListList(m Float64ListList, f func(Float64List) []rune) RuneArrList { acc := NilRuneArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ListList: Float64List->[]float32 */ func MapFloat32ArrToFloat64ListList(m Float64ListList, f func(Float64List) []float32) Float32ArrList { acc := NilFloat32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ListList: Float64List->[]float64 */ func MapFloat64ArrToFloat64ListList(m Float64ListList, f func(Float64List) []float64) Float64ArrList { acc := NilFloat64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ListList: Float64List->[]complex64 */ func MapComplex64ArrToFloat64ListList(m Float64ListList, f func(Float64List) []complex64) Complex64ArrList { acc := NilComplex64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ListList: Float64List->[]complex128 */ func MapComplex128ArrToFloat64ListList(m Float64ListList, f func(Float64List) []complex128) Complex128ArrList { acc := NilComplex128ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ListList: Float64List->[]Any */ func MapAnyArrToFloat64ListList(m Float64ListList, f func(Float64List) []Any) AnyArrList { acc := NilAnyArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ListList: Float64List->BoolList */ func MapBoolListToFloat64ListList(m Float64ListList, f func(Float64List) BoolList) BoolListList { acc := NilBoolListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ListList: Float64List->StringList */ func MapStringListToFloat64ListList(m Float64ListList, f func(Float64List) StringList) StringListList { acc := NilStringListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ListList: Float64List->IntList */ func MapIntListToFloat64ListList(m Float64ListList, f func(Float64List) IntList) IntListList { acc := NilIntListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ListList: Float64List->Int8List */ func MapInt8ListToFloat64ListList(m Float64ListList, f func(Float64List) Int8List) Int8ListList { acc := NilInt8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ListList: Float64List->Int16List */ func MapInt16ListToFloat64ListList(m Float64ListList, f func(Float64List) Int16List) Int16ListList { acc := NilInt16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ListList: Float64List->Int32List */ func MapInt32ListToFloat64ListList(m Float64ListList, f func(Float64List) Int32List) Int32ListList { acc := NilInt32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ListList: Float64List->Int64List */ func MapInt64ListToFloat64ListList(m Float64ListList, f func(Float64List) Int64List) Int64ListList { acc := NilInt64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ListList: Float64List->UintList */ func MapUintListToFloat64ListList(m Float64ListList, f func(Float64List) UintList) UintListList { acc := NilUintListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ListList: Float64List->Uint8List */ func MapUint8ListToFloat64ListList(m Float64ListList, f func(Float64List) Uint8List) Uint8ListList { acc := NilUint8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ListList: Float64List->Uint16List */ func MapUint16ListToFloat64ListList(m Float64ListList, f func(Float64List) Uint16List) Uint16ListList { acc := NilUint16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ListList: Float64List->Uint32List */ func MapUint32ListToFloat64ListList(m Float64ListList, f func(Float64List) Uint32List) Uint32ListList { acc := NilUint32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ListList: Float64List->Uint64List */ func MapUint64ListToFloat64ListList(m Float64ListList, f func(Float64List) Uint64List) Uint64ListList { acc := NilUint64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ListList: Float64List->UintptrList */ func MapUintptrListToFloat64ListList(m Float64ListList, f func(Float64List) UintptrList) UintptrListList { acc := NilUintptrListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ListList: Float64List->ByteList */ func MapByteListToFloat64ListList(m Float64ListList, f func(Float64List) ByteList) ByteListList { acc := NilByteListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ListList: Float64List->RuneList */ func MapRuneListToFloat64ListList(m Float64ListList, f func(Float64List) RuneList) RuneListList { acc := NilRuneListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ListList: Float64List->Float32List */ func MapFloat32ListToFloat64ListList(m Float64ListList, f func(Float64List) Float32List) Float32ListList { acc := NilFloat32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ListList: Float64List->Float64List */ func MapFloat64ListToFloat64ListList(m Float64ListList, f func(Float64List) Float64List) Float64ListList { acc := NilFloat64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ListList: Float64List->Complex64List */ func MapComplex64ListToFloat64ListList(m Float64ListList, f func(Float64List) Complex64List) Complex64ListList { acc := NilComplex64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ListList: Float64List->Complex128List */ func MapComplex128ListToFloat64ListList(m Float64ListList, f func(Float64List) Complex128List) Complex128ListList { acc := NilComplex128ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Float64ListList: Float64List->AnyList */ func MapAnyListToFloat64ListList(m Float64ListList, f func(Float64List) AnyList) AnyListList { acc := NilAnyListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ListList: Complex64List->bool */ func MapBoolToComplex64ListList(m Complex64ListList, f func(Complex64List) bool) BoolList { acc := NilBoolList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ListList: Complex64List->string */ func MapStringToComplex64ListList(m Complex64ListList, f func(Complex64List) string) StringList { acc := NilStringList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ListList: Complex64List->int */ func MapIntToComplex64ListList(m Complex64ListList, f func(Complex64List) int) IntList { acc := NilIntList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ListList: Complex64List->int8 */ func MapInt8ToComplex64ListList(m Complex64ListList, f func(Complex64List) int8) Int8List { acc := NilInt8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ListList: Complex64List->int16 */ func MapInt16ToComplex64ListList(m Complex64ListList, f func(Complex64List) int16) Int16List { acc := NilInt16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ListList: Complex64List->int32 */ func MapInt32ToComplex64ListList(m Complex64ListList, f func(Complex64List) int32) Int32List { acc := NilInt32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ListList: Complex64List->int64 */ func MapInt64ToComplex64ListList(m Complex64ListList, f func(Complex64List) int64) Int64List { acc := NilInt64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ListList: Complex64List->uint */ func MapUintToComplex64ListList(m Complex64ListList, f func(Complex64List) uint) UintList { acc := NilUintList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ListList: Complex64List->uint8 */ func MapUint8ToComplex64ListList(m Complex64ListList, f func(Complex64List) uint8) Uint8List { acc := NilUint8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ListList: Complex64List->uint16 */ func MapUint16ToComplex64ListList(m Complex64ListList, f func(Complex64List) uint16) Uint16List { acc := NilUint16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ListList: Complex64List->uint32 */ func MapUint32ToComplex64ListList(m Complex64ListList, f func(Complex64List) uint32) Uint32List { acc := NilUint32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ListList: Complex64List->uint64 */ func MapUint64ToComplex64ListList(m Complex64ListList, f func(Complex64List) uint64) Uint64List { acc := NilUint64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ListList: Complex64List->uintptr */ func MapUintptrToComplex64ListList(m Complex64ListList, f func(Complex64List) uintptr) UintptrList { acc := NilUintptrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ListList: Complex64List->byte */ func MapByteToComplex64ListList(m Complex64ListList, f func(Complex64List) byte) ByteList { acc := NilByteList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ListList: Complex64List->rune */ func MapRuneToComplex64ListList(m Complex64ListList, f func(Complex64List) rune) RuneList { acc := NilRuneList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ListList: Complex64List->float32 */ func MapFloat32ToComplex64ListList(m Complex64ListList, f func(Complex64List) float32) Float32List { acc := NilFloat32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ListList: Complex64List->float64 */ func MapFloat64ToComplex64ListList(m Complex64ListList, f func(Complex64List) float64) Float64List { acc := NilFloat64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ListList: Complex64List->complex64 */ func MapComplex64ToComplex64ListList(m Complex64ListList, f func(Complex64List) complex64) Complex64List { acc := NilComplex64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ListList: Complex64List->complex128 */ func MapComplex128ToComplex64ListList(m Complex64ListList, f func(Complex64List) complex128) Complex128List { acc := NilComplex128List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ListList: Complex64List->Any */ func MapAnyToComplex64ListList(m Complex64ListList, f func(Complex64List) Any) AnyList { acc := NilAnyList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ListList: Complex64List->BoolOption */ func MapBoolOptionToComplex64ListList(m Complex64ListList, f func(Complex64List) BoolOption) BoolOptionList { acc := NilBoolOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ListList: Complex64List->StringOption */ func MapStringOptionToComplex64ListList(m Complex64ListList, f func(Complex64List) StringOption) StringOptionList { acc := NilStringOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ListList: Complex64List->IntOption */ func MapIntOptionToComplex64ListList(m Complex64ListList, f func(Complex64List) IntOption) IntOptionList { acc := NilIntOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ListList: Complex64List->Int8Option */ func MapInt8OptionToComplex64ListList(m Complex64ListList, f func(Complex64List) Int8Option) Int8OptionList { acc := NilInt8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ListList: Complex64List->Int16Option */ func MapInt16OptionToComplex64ListList(m Complex64ListList, f func(Complex64List) Int16Option) Int16OptionList { acc := NilInt16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ListList: Complex64List->Int32Option */ func MapInt32OptionToComplex64ListList(m Complex64ListList, f func(Complex64List) Int32Option) Int32OptionList { acc := NilInt32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ListList: Complex64List->Int64Option */ func MapInt64OptionToComplex64ListList(m Complex64ListList, f func(Complex64List) Int64Option) Int64OptionList { acc := NilInt64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ListList: Complex64List->UintOption */ func MapUintOptionToComplex64ListList(m Complex64ListList, f func(Complex64List) UintOption) UintOptionList { acc := NilUintOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ListList: Complex64List->Uint8Option */ func MapUint8OptionToComplex64ListList(m Complex64ListList, f func(Complex64List) Uint8Option) Uint8OptionList { acc := NilUint8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ListList: Complex64List->Uint16Option */ func MapUint16OptionToComplex64ListList(m Complex64ListList, f func(Complex64List) Uint16Option) Uint16OptionList { acc := NilUint16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ListList: Complex64List->Uint32Option */ func MapUint32OptionToComplex64ListList(m Complex64ListList, f func(Complex64List) Uint32Option) Uint32OptionList { acc := NilUint32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ListList: Complex64List->Uint64Option */ func MapUint64OptionToComplex64ListList(m Complex64ListList, f func(Complex64List) Uint64Option) Uint64OptionList { acc := NilUint64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ListList: Complex64List->UintptrOption */ func MapUintptrOptionToComplex64ListList(m Complex64ListList, f func(Complex64List) UintptrOption) UintptrOptionList { acc := NilUintptrOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ListList: Complex64List->ByteOption */ func MapByteOptionToComplex64ListList(m Complex64ListList, f func(Complex64List) ByteOption) ByteOptionList { acc := NilByteOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ListList: Complex64List->RuneOption */ func MapRuneOptionToComplex64ListList(m Complex64ListList, f func(Complex64List) RuneOption) RuneOptionList { acc := NilRuneOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ListList: Complex64List->Float32Option */ func MapFloat32OptionToComplex64ListList(m Complex64ListList, f func(Complex64List) Float32Option) Float32OptionList { acc := NilFloat32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ListList: Complex64List->Float64Option */ func MapFloat64OptionToComplex64ListList(m Complex64ListList, f func(Complex64List) Float64Option) Float64OptionList { acc := NilFloat64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ListList: Complex64List->Complex64Option */ func MapComplex64OptionToComplex64ListList(m Complex64ListList, f func(Complex64List) Complex64Option) Complex64OptionList { acc := NilComplex64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ListList: Complex64List->Complex128Option */ func MapComplex128OptionToComplex64ListList(m Complex64ListList, f func(Complex64List) Complex128Option) Complex128OptionList { acc := NilComplex128OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ListList: Complex64List->AnyOption */ func MapAnyOptionToComplex64ListList(m Complex64ListList, f func(Complex64List) AnyOption) AnyOptionList { acc := NilAnyOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ListList: Complex64List->[]bool */ func MapBoolArrToComplex64ListList(m Complex64ListList, f func(Complex64List) []bool) BoolArrList { acc := NilBoolArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ListList: Complex64List->[]string */ func MapStringArrToComplex64ListList(m Complex64ListList, f func(Complex64List) []string) StringArrList { acc := NilStringArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ListList: Complex64List->[]int */ func MapIntArrToComplex64ListList(m Complex64ListList, f func(Complex64List) []int) IntArrList { acc := NilIntArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ListList: Complex64List->[]int8 */ func MapInt8ArrToComplex64ListList(m Complex64ListList, f func(Complex64List) []int8) Int8ArrList { acc := NilInt8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ListList: Complex64List->[]int16 */ func MapInt16ArrToComplex64ListList(m Complex64ListList, f func(Complex64List) []int16) Int16ArrList { acc := NilInt16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ListList: Complex64List->[]int32 */ func MapInt32ArrToComplex64ListList(m Complex64ListList, f func(Complex64List) []int32) Int32ArrList { acc := NilInt32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ListList: Complex64List->[]int64 */ func MapInt64ArrToComplex64ListList(m Complex64ListList, f func(Complex64List) []int64) Int64ArrList { acc := NilInt64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ListList: Complex64List->[]uint */ func MapUintArrToComplex64ListList(m Complex64ListList, f func(Complex64List) []uint) UintArrList { acc := NilUintArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ListList: Complex64List->[]uint8 */ func MapUint8ArrToComplex64ListList(m Complex64ListList, f func(Complex64List) []uint8) Uint8ArrList { acc := NilUint8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ListList: Complex64List->[]uint16 */ func MapUint16ArrToComplex64ListList(m Complex64ListList, f func(Complex64List) []uint16) Uint16ArrList { acc := NilUint16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ListList: Complex64List->[]uint32 */ func MapUint32ArrToComplex64ListList(m Complex64ListList, f func(Complex64List) []uint32) Uint32ArrList { acc := NilUint32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ListList: Complex64List->[]uint64 */ func MapUint64ArrToComplex64ListList(m Complex64ListList, f func(Complex64List) []uint64) Uint64ArrList { acc := NilUint64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ListList: Complex64List->[]uintptr */ func MapUintptrArrToComplex64ListList(m Complex64ListList, f func(Complex64List) []uintptr) UintptrArrList { acc := NilUintptrArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ListList: Complex64List->[]byte */ func MapByteArrToComplex64ListList(m Complex64ListList, f func(Complex64List) []byte) ByteArrList { acc := NilByteArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ListList: Complex64List->[]rune */ func MapRuneArrToComplex64ListList(m Complex64ListList, f func(Complex64List) []rune) RuneArrList { acc := NilRuneArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ListList: Complex64List->[]float32 */ func MapFloat32ArrToComplex64ListList(m Complex64ListList, f func(Complex64List) []float32) Float32ArrList { acc := NilFloat32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ListList: Complex64List->[]float64 */ func MapFloat64ArrToComplex64ListList(m Complex64ListList, f func(Complex64List) []float64) Float64ArrList { acc := NilFloat64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ListList: Complex64List->[]complex64 */ func MapComplex64ArrToComplex64ListList(m Complex64ListList, f func(Complex64List) []complex64) Complex64ArrList { acc := NilComplex64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ListList: Complex64List->[]complex128 */ func MapComplex128ArrToComplex64ListList(m Complex64ListList, f func(Complex64List) []complex128) Complex128ArrList { acc := NilComplex128ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ListList: Complex64List->[]Any */ func MapAnyArrToComplex64ListList(m Complex64ListList, f func(Complex64List) []Any) AnyArrList { acc := NilAnyArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ListList: Complex64List->BoolList */ func MapBoolListToComplex64ListList(m Complex64ListList, f func(Complex64List) BoolList) BoolListList { acc := NilBoolListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ListList: Complex64List->StringList */ func MapStringListToComplex64ListList(m Complex64ListList, f func(Complex64List) StringList) StringListList { acc := NilStringListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ListList: Complex64List->IntList */ func MapIntListToComplex64ListList(m Complex64ListList, f func(Complex64List) IntList) IntListList { acc := NilIntListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ListList: Complex64List->Int8List */ func MapInt8ListToComplex64ListList(m Complex64ListList, f func(Complex64List) Int8List) Int8ListList { acc := NilInt8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ListList: Complex64List->Int16List */ func MapInt16ListToComplex64ListList(m Complex64ListList, f func(Complex64List) Int16List) Int16ListList { acc := NilInt16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ListList: Complex64List->Int32List */ func MapInt32ListToComplex64ListList(m Complex64ListList, f func(Complex64List) Int32List) Int32ListList { acc := NilInt32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ListList: Complex64List->Int64List */ func MapInt64ListToComplex64ListList(m Complex64ListList, f func(Complex64List) Int64List) Int64ListList { acc := NilInt64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ListList: Complex64List->UintList */ func MapUintListToComplex64ListList(m Complex64ListList, f func(Complex64List) UintList) UintListList { acc := NilUintListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ListList: Complex64List->Uint8List */ func MapUint8ListToComplex64ListList(m Complex64ListList, f func(Complex64List) Uint8List) Uint8ListList { acc := NilUint8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ListList: Complex64List->Uint16List */ func MapUint16ListToComplex64ListList(m Complex64ListList, f func(Complex64List) Uint16List) Uint16ListList { acc := NilUint16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ListList: Complex64List->Uint32List */ func MapUint32ListToComplex64ListList(m Complex64ListList, f func(Complex64List) Uint32List) Uint32ListList { acc := NilUint32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ListList: Complex64List->Uint64List */ func MapUint64ListToComplex64ListList(m Complex64ListList, f func(Complex64List) Uint64List) Uint64ListList { acc := NilUint64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ListList: Complex64List->UintptrList */ func MapUintptrListToComplex64ListList(m Complex64ListList, f func(Complex64List) UintptrList) UintptrListList { acc := NilUintptrListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ListList: Complex64List->ByteList */ func MapByteListToComplex64ListList(m Complex64ListList, f func(Complex64List) ByteList) ByteListList { acc := NilByteListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ListList: Complex64List->RuneList */ func MapRuneListToComplex64ListList(m Complex64ListList, f func(Complex64List) RuneList) RuneListList { acc := NilRuneListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ListList: Complex64List->Float32List */ func MapFloat32ListToComplex64ListList(m Complex64ListList, f func(Complex64List) Float32List) Float32ListList { acc := NilFloat32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ListList: Complex64List->Float64List */ func MapFloat64ListToComplex64ListList(m Complex64ListList, f func(Complex64List) Float64List) Float64ListList { acc := NilFloat64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ListList: Complex64List->Complex64List */ func MapComplex64ListToComplex64ListList(m Complex64ListList, f func(Complex64List) Complex64List) Complex64ListList { acc := NilComplex64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ListList: Complex64List->Complex128List */ func MapComplex128ListToComplex64ListList(m Complex64ListList, f func(Complex64List) Complex128List) Complex128ListList { acc := NilComplex128ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex64ListList: Complex64List->AnyList */ func MapAnyListToComplex64ListList(m Complex64ListList, f func(Complex64List) AnyList) AnyListList { acc := NilAnyListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ListList: Complex128List->bool */ func MapBoolToComplex128ListList(m Complex128ListList, f func(Complex128List) bool) BoolList { acc := NilBoolList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ListList: Complex128List->string */ func MapStringToComplex128ListList(m Complex128ListList, f func(Complex128List) string) StringList { acc := NilStringList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ListList: Complex128List->int */ func MapIntToComplex128ListList(m Complex128ListList, f func(Complex128List) int) IntList { acc := NilIntList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ListList: Complex128List->int8 */ func MapInt8ToComplex128ListList(m Complex128ListList, f func(Complex128List) int8) Int8List { acc := NilInt8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ListList: Complex128List->int16 */ func MapInt16ToComplex128ListList(m Complex128ListList, f func(Complex128List) int16) Int16List { acc := NilInt16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ListList: Complex128List->int32 */ func MapInt32ToComplex128ListList(m Complex128ListList, f func(Complex128List) int32) Int32List { acc := NilInt32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ListList: Complex128List->int64 */ func MapInt64ToComplex128ListList(m Complex128ListList, f func(Complex128List) int64) Int64List { acc := NilInt64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ListList: Complex128List->uint */ func MapUintToComplex128ListList(m Complex128ListList, f func(Complex128List) uint) UintList { acc := NilUintList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ListList: Complex128List->uint8 */ func MapUint8ToComplex128ListList(m Complex128ListList, f func(Complex128List) uint8) Uint8List { acc := NilUint8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ListList: Complex128List->uint16 */ func MapUint16ToComplex128ListList(m Complex128ListList, f func(Complex128List) uint16) Uint16List { acc := NilUint16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ListList: Complex128List->uint32 */ func MapUint32ToComplex128ListList(m Complex128ListList, f func(Complex128List) uint32) Uint32List { acc := NilUint32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ListList: Complex128List->uint64 */ func MapUint64ToComplex128ListList(m Complex128ListList, f func(Complex128List) uint64) Uint64List { acc := NilUint64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ListList: Complex128List->uintptr */ func MapUintptrToComplex128ListList(m Complex128ListList, f func(Complex128List) uintptr) UintptrList { acc := NilUintptrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ListList: Complex128List->byte */ func MapByteToComplex128ListList(m Complex128ListList, f func(Complex128List) byte) ByteList { acc := NilByteList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ListList: Complex128List->rune */ func MapRuneToComplex128ListList(m Complex128ListList, f func(Complex128List) rune) RuneList { acc := NilRuneList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ListList: Complex128List->float32 */ func MapFloat32ToComplex128ListList(m Complex128ListList, f func(Complex128List) float32) Float32List { acc := NilFloat32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ListList: Complex128List->float64 */ func MapFloat64ToComplex128ListList(m Complex128ListList, f func(Complex128List) float64) Float64List { acc := NilFloat64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ListList: Complex128List->complex64 */ func MapComplex64ToComplex128ListList(m Complex128ListList, f func(Complex128List) complex64) Complex64List { acc := NilComplex64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ListList: Complex128List->complex128 */ func MapComplex128ToComplex128ListList(m Complex128ListList, f func(Complex128List) complex128) Complex128List { acc := NilComplex128List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ListList: Complex128List->Any */ func MapAnyToComplex128ListList(m Complex128ListList, f func(Complex128List) Any) AnyList { acc := NilAnyList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ListList: Complex128List->BoolOption */ func MapBoolOptionToComplex128ListList(m Complex128ListList, f func(Complex128List) BoolOption) BoolOptionList { acc := NilBoolOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ListList: Complex128List->StringOption */ func MapStringOptionToComplex128ListList(m Complex128ListList, f func(Complex128List) StringOption) StringOptionList { acc := NilStringOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ListList: Complex128List->IntOption */ func MapIntOptionToComplex128ListList(m Complex128ListList, f func(Complex128List) IntOption) IntOptionList { acc := NilIntOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ListList: Complex128List->Int8Option */ func MapInt8OptionToComplex128ListList(m Complex128ListList, f func(Complex128List) Int8Option) Int8OptionList { acc := NilInt8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ListList: Complex128List->Int16Option */ func MapInt16OptionToComplex128ListList(m Complex128ListList, f func(Complex128List) Int16Option) Int16OptionList { acc := NilInt16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ListList: Complex128List->Int32Option */ func MapInt32OptionToComplex128ListList(m Complex128ListList, f func(Complex128List) Int32Option) Int32OptionList { acc := NilInt32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ListList: Complex128List->Int64Option */ func MapInt64OptionToComplex128ListList(m Complex128ListList, f func(Complex128List) Int64Option) Int64OptionList { acc := NilInt64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ListList: Complex128List->UintOption */ func MapUintOptionToComplex128ListList(m Complex128ListList, f func(Complex128List) UintOption) UintOptionList { acc := NilUintOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ListList: Complex128List->Uint8Option */ func MapUint8OptionToComplex128ListList(m Complex128ListList, f func(Complex128List) Uint8Option) Uint8OptionList { acc := NilUint8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ListList: Complex128List->Uint16Option */ func MapUint16OptionToComplex128ListList(m Complex128ListList, f func(Complex128List) Uint16Option) Uint16OptionList { acc := NilUint16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ListList: Complex128List->Uint32Option */ func MapUint32OptionToComplex128ListList(m Complex128ListList, f func(Complex128List) Uint32Option) Uint32OptionList { acc := NilUint32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ListList: Complex128List->Uint64Option */ func MapUint64OptionToComplex128ListList(m Complex128ListList, f func(Complex128List) Uint64Option) Uint64OptionList { acc := NilUint64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ListList: Complex128List->UintptrOption */ func MapUintptrOptionToComplex128ListList(m Complex128ListList, f func(Complex128List) UintptrOption) UintptrOptionList { acc := NilUintptrOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ListList: Complex128List->ByteOption */ func MapByteOptionToComplex128ListList(m Complex128ListList, f func(Complex128List) ByteOption) ByteOptionList { acc := NilByteOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ListList: Complex128List->RuneOption */ func MapRuneOptionToComplex128ListList(m Complex128ListList, f func(Complex128List) RuneOption) RuneOptionList { acc := NilRuneOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ListList: Complex128List->Float32Option */ func MapFloat32OptionToComplex128ListList(m Complex128ListList, f func(Complex128List) Float32Option) Float32OptionList { acc := NilFloat32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ListList: Complex128List->Float64Option */ func MapFloat64OptionToComplex128ListList(m Complex128ListList, f func(Complex128List) Float64Option) Float64OptionList { acc := NilFloat64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ListList: Complex128List->Complex64Option */ func MapComplex64OptionToComplex128ListList(m Complex128ListList, f func(Complex128List) Complex64Option) Complex64OptionList { acc := NilComplex64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ListList: Complex128List->Complex128Option */ func MapComplex128OptionToComplex128ListList(m Complex128ListList, f func(Complex128List) Complex128Option) Complex128OptionList { acc := NilComplex128OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ListList: Complex128List->AnyOption */ func MapAnyOptionToComplex128ListList(m Complex128ListList, f func(Complex128List) AnyOption) AnyOptionList { acc := NilAnyOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ListList: Complex128List->[]bool */ func MapBoolArrToComplex128ListList(m Complex128ListList, f func(Complex128List) []bool) BoolArrList { acc := NilBoolArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ListList: Complex128List->[]string */ func MapStringArrToComplex128ListList(m Complex128ListList, f func(Complex128List) []string) StringArrList { acc := NilStringArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ListList: Complex128List->[]int */ func MapIntArrToComplex128ListList(m Complex128ListList, f func(Complex128List) []int) IntArrList { acc := NilIntArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ListList: Complex128List->[]int8 */ func MapInt8ArrToComplex128ListList(m Complex128ListList, f func(Complex128List) []int8) Int8ArrList { acc := NilInt8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ListList: Complex128List->[]int16 */ func MapInt16ArrToComplex128ListList(m Complex128ListList, f func(Complex128List) []int16) Int16ArrList { acc := NilInt16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ListList: Complex128List->[]int32 */ func MapInt32ArrToComplex128ListList(m Complex128ListList, f func(Complex128List) []int32) Int32ArrList { acc := NilInt32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ListList: Complex128List->[]int64 */ func MapInt64ArrToComplex128ListList(m Complex128ListList, f func(Complex128List) []int64) Int64ArrList { acc := NilInt64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ListList: Complex128List->[]uint */ func MapUintArrToComplex128ListList(m Complex128ListList, f func(Complex128List) []uint) UintArrList { acc := NilUintArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ListList: Complex128List->[]uint8 */ func MapUint8ArrToComplex128ListList(m Complex128ListList, f func(Complex128List) []uint8) Uint8ArrList { acc := NilUint8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ListList: Complex128List->[]uint16 */ func MapUint16ArrToComplex128ListList(m Complex128ListList, f func(Complex128List) []uint16) Uint16ArrList { acc := NilUint16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ListList: Complex128List->[]uint32 */ func MapUint32ArrToComplex128ListList(m Complex128ListList, f func(Complex128List) []uint32) Uint32ArrList { acc := NilUint32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ListList: Complex128List->[]uint64 */ func MapUint64ArrToComplex128ListList(m Complex128ListList, f func(Complex128List) []uint64) Uint64ArrList { acc := NilUint64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ListList: Complex128List->[]uintptr */ func MapUintptrArrToComplex128ListList(m Complex128ListList, f func(Complex128List) []uintptr) UintptrArrList { acc := NilUintptrArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ListList: Complex128List->[]byte */ func MapByteArrToComplex128ListList(m Complex128ListList, f func(Complex128List) []byte) ByteArrList { acc := NilByteArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ListList: Complex128List->[]rune */ func MapRuneArrToComplex128ListList(m Complex128ListList, f func(Complex128List) []rune) RuneArrList { acc := NilRuneArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ListList: Complex128List->[]float32 */ func MapFloat32ArrToComplex128ListList(m Complex128ListList, f func(Complex128List) []float32) Float32ArrList { acc := NilFloat32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ListList: Complex128List->[]float64 */ func MapFloat64ArrToComplex128ListList(m Complex128ListList, f func(Complex128List) []float64) Float64ArrList { acc := NilFloat64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ListList: Complex128List->[]complex64 */ func MapComplex64ArrToComplex128ListList(m Complex128ListList, f func(Complex128List) []complex64) Complex64ArrList { acc := NilComplex64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ListList: Complex128List->[]complex128 */ func MapComplex128ArrToComplex128ListList(m Complex128ListList, f func(Complex128List) []complex128) Complex128ArrList { acc := NilComplex128ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ListList: Complex128List->[]Any */ func MapAnyArrToComplex128ListList(m Complex128ListList, f func(Complex128List) []Any) AnyArrList { acc := NilAnyArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ListList: Complex128List->BoolList */ func MapBoolListToComplex128ListList(m Complex128ListList, f func(Complex128List) BoolList) BoolListList { acc := NilBoolListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ListList: Complex128List->StringList */ func MapStringListToComplex128ListList(m Complex128ListList, f func(Complex128List) StringList) StringListList { acc := NilStringListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ListList: Complex128List->IntList */ func MapIntListToComplex128ListList(m Complex128ListList, f func(Complex128List) IntList) IntListList { acc := NilIntListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ListList: Complex128List->Int8List */ func MapInt8ListToComplex128ListList(m Complex128ListList, f func(Complex128List) Int8List) Int8ListList { acc := NilInt8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ListList: Complex128List->Int16List */ func MapInt16ListToComplex128ListList(m Complex128ListList, f func(Complex128List) Int16List) Int16ListList { acc := NilInt16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ListList: Complex128List->Int32List */ func MapInt32ListToComplex128ListList(m Complex128ListList, f func(Complex128List) Int32List) Int32ListList { acc := NilInt32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ListList: Complex128List->Int64List */ func MapInt64ListToComplex128ListList(m Complex128ListList, f func(Complex128List) Int64List) Int64ListList { acc := NilInt64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ListList: Complex128List->UintList */ func MapUintListToComplex128ListList(m Complex128ListList, f func(Complex128List) UintList) UintListList { acc := NilUintListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ListList: Complex128List->Uint8List */ func MapUint8ListToComplex128ListList(m Complex128ListList, f func(Complex128List) Uint8List) Uint8ListList { acc := NilUint8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ListList: Complex128List->Uint16List */ func MapUint16ListToComplex128ListList(m Complex128ListList, f func(Complex128List) Uint16List) Uint16ListList { acc := NilUint16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ListList: Complex128List->Uint32List */ func MapUint32ListToComplex128ListList(m Complex128ListList, f func(Complex128List) Uint32List) Uint32ListList { acc := NilUint32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ListList: Complex128List->Uint64List */ func MapUint64ListToComplex128ListList(m Complex128ListList, f func(Complex128List) Uint64List) Uint64ListList { acc := NilUint64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ListList: Complex128List->UintptrList */ func MapUintptrListToComplex128ListList(m Complex128ListList, f func(Complex128List) UintptrList) UintptrListList { acc := NilUintptrListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ListList: Complex128List->ByteList */ func MapByteListToComplex128ListList(m Complex128ListList, f func(Complex128List) ByteList) ByteListList { acc := NilByteListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ListList: Complex128List->RuneList */ func MapRuneListToComplex128ListList(m Complex128ListList, f func(Complex128List) RuneList) RuneListList { acc := NilRuneListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ListList: Complex128List->Float32List */ func MapFloat32ListToComplex128ListList(m Complex128ListList, f func(Complex128List) Float32List) Float32ListList { acc := NilFloat32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ListList: Complex128List->Float64List */ func MapFloat64ListToComplex128ListList(m Complex128ListList, f func(Complex128List) Float64List) Float64ListList { acc := NilFloat64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ListList: Complex128List->Complex64List */ func MapComplex64ListToComplex128ListList(m Complex128ListList, f func(Complex128List) Complex64List) Complex64ListList { acc := NilComplex64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ListList: Complex128List->Complex128List */ func MapComplex128ListToComplex128ListList(m Complex128ListList, f func(Complex128List) Complex128List) Complex128ListList { acc := NilComplex128ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* Complex128ListList: Complex128List->AnyList */ func MapAnyListToComplex128ListList(m Complex128ListList, f func(Complex128List) AnyList) AnyListList { acc := NilAnyListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyListList: AnyList->bool */ func MapBoolToAnyListList(m AnyListList, f func(AnyList) bool) BoolList { acc := NilBoolList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyListList: AnyList->string */ func MapStringToAnyListList(m AnyListList, f func(AnyList) string) StringList { acc := NilStringList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyListList: AnyList->int */ func MapIntToAnyListList(m AnyListList, f func(AnyList) int) IntList { acc := NilIntList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyListList: AnyList->int8 */ func MapInt8ToAnyListList(m AnyListList, f func(AnyList) int8) Int8List { acc := NilInt8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyListList: AnyList->int16 */ func MapInt16ToAnyListList(m AnyListList, f func(AnyList) int16) Int16List { acc := NilInt16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyListList: AnyList->int32 */ func MapInt32ToAnyListList(m AnyListList, f func(AnyList) int32) Int32List { acc := NilInt32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyListList: AnyList->int64 */ func MapInt64ToAnyListList(m AnyListList, f func(AnyList) int64) Int64List { acc := NilInt64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyListList: AnyList->uint */ func MapUintToAnyListList(m AnyListList, f func(AnyList) uint) UintList { acc := NilUintList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyListList: AnyList->uint8 */ func MapUint8ToAnyListList(m AnyListList, f func(AnyList) uint8) Uint8List { acc := NilUint8List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyListList: AnyList->uint16 */ func MapUint16ToAnyListList(m AnyListList, f func(AnyList) uint16) Uint16List { acc := NilUint16List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyListList: AnyList->uint32 */ func MapUint32ToAnyListList(m AnyListList, f func(AnyList) uint32) Uint32List { acc := NilUint32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyListList: AnyList->uint64 */ func MapUint64ToAnyListList(m AnyListList, f func(AnyList) uint64) Uint64List { acc := NilUint64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyListList: AnyList->uintptr */ func MapUintptrToAnyListList(m AnyListList, f func(AnyList) uintptr) UintptrList { acc := NilUintptrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyListList: AnyList->byte */ func MapByteToAnyListList(m AnyListList, f func(AnyList) byte) ByteList { acc := NilByteList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyListList: AnyList->rune */ func MapRuneToAnyListList(m AnyListList, f func(AnyList) rune) RuneList { acc := NilRuneList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyListList: AnyList->float32 */ func MapFloat32ToAnyListList(m AnyListList, f func(AnyList) float32) Float32List { acc := NilFloat32List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyListList: AnyList->float64 */ func MapFloat64ToAnyListList(m AnyListList, f func(AnyList) float64) Float64List { acc := NilFloat64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyListList: AnyList->complex64 */ func MapComplex64ToAnyListList(m AnyListList, f func(AnyList) complex64) Complex64List { acc := NilComplex64List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyListList: AnyList->complex128 */ func MapComplex128ToAnyListList(m AnyListList, f func(AnyList) complex128) Complex128List { acc := NilComplex128List; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyListList: AnyList->Any */ func MapAnyToAnyListList(m AnyListList, f func(AnyList) Any) AnyList { acc := NilAnyList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyListList: AnyList->BoolOption */ func MapBoolOptionToAnyListList(m AnyListList, f func(AnyList) BoolOption) BoolOptionList { acc := NilBoolOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyListList: AnyList->StringOption */ func MapStringOptionToAnyListList(m AnyListList, f func(AnyList) StringOption) StringOptionList { acc := NilStringOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyListList: AnyList->IntOption */ func MapIntOptionToAnyListList(m AnyListList, f func(AnyList) IntOption) IntOptionList { acc := NilIntOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyListList: AnyList->Int8Option */ func MapInt8OptionToAnyListList(m AnyListList, f func(AnyList) Int8Option) Int8OptionList { acc := NilInt8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyListList: AnyList->Int16Option */ func MapInt16OptionToAnyListList(m AnyListList, f func(AnyList) Int16Option) Int16OptionList { acc := NilInt16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyListList: AnyList->Int32Option */ func MapInt32OptionToAnyListList(m AnyListList, f func(AnyList) Int32Option) Int32OptionList { acc := NilInt32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyListList: AnyList->Int64Option */ func MapInt64OptionToAnyListList(m AnyListList, f func(AnyList) Int64Option) Int64OptionList { acc := NilInt64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyListList: AnyList->UintOption */ func MapUintOptionToAnyListList(m AnyListList, f func(AnyList) UintOption) UintOptionList { acc := NilUintOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyListList: AnyList->Uint8Option */ func MapUint8OptionToAnyListList(m AnyListList, f func(AnyList) Uint8Option) Uint8OptionList { acc := NilUint8OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyListList: AnyList->Uint16Option */ func MapUint16OptionToAnyListList(m AnyListList, f func(AnyList) Uint16Option) Uint16OptionList { acc := NilUint16OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyListList: AnyList->Uint32Option */ func MapUint32OptionToAnyListList(m AnyListList, f func(AnyList) Uint32Option) Uint32OptionList { acc := NilUint32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyListList: AnyList->Uint64Option */ func MapUint64OptionToAnyListList(m AnyListList, f func(AnyList) Uint64Option) Uint64OptionList { acc := NilUint64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyListList: AnyList->UintptrOption */ func MapUintptrOptionToAnyListList(m AnyListList, f func(AnyList) UintptrOption) UintptrOptionList { acc := NilUintptrOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyListList: AnyList->ByteOption */ func MapByteOptionToAnyListList(m AnyListList, f func(AnyList) ByteOption) ByteOptionList { acc := NilByteOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyListList: AnyList->RuneOption */ func MapRuneOptionToAnyListList(m AnyListList, f func(AnyList) RuneOption) RuneOptionList { acc := NilRuneOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyListList: AnyList->Float32Option */ func MapFloat32OptionToAnyListList(m AnyListList, f func(AnyList) Float32Option) Float32OptionList { acc := NilFloat32OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyListList: AnyList->Float64Option */ func MapFloat64OptionToAnyListList(m AnyListList, f func(AnyList) Float64Option) Float64OptionList { acc := NilFloat64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyListList: AnyList->Complex64Option */ func MapComplex64OptionToAnyListList(m AnyListList, f func(AnyList) Complex64Option) Complex64OptionList { acc := NilComplex64OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyListList: AnyList->Complex128Option */ func MapComplex128OptionToAnyListList(m AnyListList, f func(AnyList) Complex128Option) Complex128OptionList { acc := NilComplex128OptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyListList: AnyList->AnyOption */ func MapAnyOptionToAnyListList(m AnyListList, f func(AnyList) AnyOption) AnyOptionList { acc := NilAnyOptionList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyListList: AnyList->[]bool */ func MapBoolArrToAnyListList(m AnyListList, f func(AnyList) []bool) BoolArrList { acc := NilBoolArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyListList: AnyList->[]string */ func MapStringArrToAnyListList(m AnyListList, f func(AnyList) []string) StringArrList { acc := NilStringArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyListList: AnyList->[]int */ func MapIntArrToAnyListList(m AnyListList, f func(AnyList) []int) IntArrList { acc := NilIntArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyListList: AnyList->[]int8 */ func MapInt8ArrToAnyListList(m AnyListList, f func(AnyList) []int8) Int8ArrList { acc := NilInt8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyListList: AnyList->[]int16 */ func MapInt16ArrToAnyListList(m AnyListList, f func(AnyList) []int16) Int16ArrList { acc := NilInt16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyListList: AnyList->[]int32 */ func MapInt32ArrToAnyListList(m AnyListList, f func(AnyList) []int32) Int32ArrList { acc := NilInt32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyListList: AnyList->[]int64 */ func MapInt64ArrToAnyListList(m AnyListList, f func(AnyList) []int64) Int64ArrList { acc := NilInt64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyListList: AnyList->[]uint */ func MapUintArrToAnyListList(m AnyListList, f func(AnyList) []uint) UintArrList { acc := NilUintArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyListList: AnyList->[]uint8 */ func MapUint8ArrToAnyListList(m AnyListList, f func(AnyList) []uint8) Uint8ArrList { acc := NilUint8ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyListList: AnyList->[]uint16 */ func MapUint16ArrToAnyListList(m AnyListList, f func(AnyList) []uint16) Uint16ArrList { acc := NilUint16ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyListList: AnyList->[]uint32 */ func MapUint32ArrToAnyListList(m AnyListList, f func(AnyList) []uint32) Uint32ArrList { acc := NilUint32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyListList: AnyList->[]uint64 */ func MapUint64ArrToAnyListList(m AnyListList, f func(AnyList) []uint64) Uint64ArrList { acc := NilUint64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyListList: AnyList->[]uintptr */ func MapUintptrArrToAnyListList(m AnyListList, f func(AnyList) []uintptr) UintptrArrList { acc := NilUintptrArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyListList: AnyList->[]byte */ func MapByteArrToAnyListList(m AnyListList, f func(AnyList) []byte) ByteArrList { acc := NilByteArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyListList: AnyList->[]rune */ func MapRuneArrToAnyListList(m AnyListList, f func(AnyList) []rune) RuneArrList { acc := NilRuneArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyListList: AnyList->[]float32 */ func MapFloat32ArrToAnyListList(m AnyListList, f func(AnyList) []float32) Float32ArrList { acc := NilFloat32ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyListList: AnyList->[]float64 */ func MapFloat64ArrToAnyListList(m AnyListList, f func(AnyList) []float64) Float64ArrList { acc := NilFloat64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyListList: AnyList->[]complex64 */ func MapComplex64ArrToAnyListList(m AnyListList, f func(AnyList) []complex64) Complex64ArrList { acc := NilComplex64ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyListList: AnyList->[]complex128 */ func MapComplex128ArrToAnyListList(m AnyListList, f func(AnyList) []complex128) Complex128ArrList { acc := NilComplex128ArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyListList: AnyList->[]Any */ func MapAnyArrToAnyListList(m AnyListList, f func(AnyList) []Any) AnyArrList { acc := NilAnyArrList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyListList: AnyList->BoolList */ func MapBoolListToAnyListList(m AnyListList, f func(AnyList) BoolList) BoolListList { acc := NilBoolListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyListList: AnyList->StringList */ func MapStringListToAnyListList(m AnyListList, f func(AnyList) StringList) StringListList { acc := NilStringListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyListList: AnyList->IntList */ func MapIntListToAnyListList(m AnyListList, f func(AnyList) IntList) IntListList { acc := NilIntListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyListList: AnyList->Int8List */ func MapInt8ListToAnyListList(m AnyListList, f func(AnyList) Int8List) Int8ListList { acc := NilInt8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyListList: AnyList->Int16List */ func MapInt16ListToAnyListList(m AnyListList, f func(AnyList) Int16List) Int16ListList { acc := NilInt16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyListList: AnyList->Int32List */ func MapInt32ListToAnyListList(m AnyListList, f func(AnyList) Int32List) Int32ListList { acc := NilInt32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyListList: AnyList->Int64List */ func MapInt64ListToAnyListList(m AnyListList, f func(AnyList) Int64List) Int64ListList { acc := NilInt64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyListList: AnyList->UintList */ func MapUintListToAnyListList(m AnyListList, f func(AnyList) UintList) UintListList { acc := NilUintListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyListList: AnyList->Uint8List */ func MapUint8ListToAnyListList(m AnyListList, f func(AnyList) Uint8List) Uint8ListList { acc := NilUint8ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyListList: AnyList->Uint16List */ func MapUint16ListToAnyListList(m AnyListList, f func(AnyList) Uint16List) Uint16ListList { acc := NilUint16ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyListList: AnyList->Uint32List */ func MapUint32ListToAnyListList(m AnyListList, f func(AnyList) Uint32List) Uint32ListList { acc := NilUint32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyListList: AnyList->Uint64List */ func MapUint64ListToAnyListList(m AnyListList, f func(AnyList) Uint64List) Uint64ListList { acc := NilUint64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyListList: AnyList->UintptrList */ func MapUintptrListToAnyListList(m AnyListList, f func(AnyList) UintptrList) UintptrListList { acc := NilUintptrListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyListList: AnyList->ByteList */ func MapByteListToAnyListList(m AnyListList, f func(AnyList) ByteList) ByteListList { acc := NilByteListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyListList: AnyList->RuneList */ func MapRuneListToAnyListList(m AnyListList, f func(AnyList) RuneList) RuneListList { acc := NilRuneListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyListList: AnyList->Float32List */ func MapFloat32ListToAnyListList(m AnyListList, f func(AnyList) Float32List) Float32ListList { acc := NilFloat32ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyListList: AnyList->Float64List */ func MapFloat64ListToAnyListList(m AnyListList, f func(AnyList) Float64List) Float64ListList { acc := NilFloat64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyListList: AnyList->Complex64List */ func MapComplex64ListToAnyListList(m AnyListList, f func(AnyList) Complex64List) Complex64ListList { acc := NilComplex64ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyListList: AnyList->Complex128List */ func MapComplex128ListToAnyListList(m AnyListList, f func(AnyList) Complex128List) Complex128ListList { acc := NilComplex128ListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }
/* AnyListList: AnyList->AnyList */ func MapAnyListToAnyListList(m AnyListList, f func(AnyList) AnyList) AnyListList { acc := NilAnyListList; xs := m; for xs.NonEmpty() { acc = acc.Cons(f(*xs.head)); xs = *xs.tail }; return acc.Reverse() }