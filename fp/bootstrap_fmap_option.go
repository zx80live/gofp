// bootstrap_fmap_option.go
// DO NOT EDIT THIS FILE WAS GENERATED AUTOMATICALLY BY https://github.com/zx80live/gofp-bootstrap

package fp


/* BoolOption: bool->bool */ func MapBoolToBoolOption(m BoolOption, f func(bool) bool) BoolOption {  if m.IsDefined() { return Bool(f(*m.value)) } else { return NoneBoolOption }  }
/* BoolOption: bool->string */ func MapStringToBoolOption(m BoolOption, f func(bool) string) StringOption {  if m.IsDefined() { return String(f(*m.value)) } else { return NoneStringOption }  }
/* BoolOption: bool->int */ func MapIntToBoolOption(m BoolOption, f func(bool) int) IntOption {  if m.IsDefined() { return Int(f(*m.value)) } else { return NoneIntOption }  }
/* BoolOption: bool->int8 */ func MapInt8ToBoolOption(m BoolOption, f func(bool) int8) Int8Option {  if m.IsDefined() { return Int8(f(*m.value)) } else { return NoneInt8Option }  }
/* BoolOption: bool->int16 */ func MapInt16ToBoolOption(m BoolOption, f func(bool) int16) Int16Option {  if m.IsDefined() { return Int16(f(*m.value)) } else { return NoneInt16Option }  }
/* BoolOption: bool->int32 */ func MapInt32ToBoolOption(m BoolOption, f func(bool) int32) Int32Option {  if m.IsDefined() { return Int32(f(*m.value)) } else { return NoneInt32Option }  }
/* BoolOption: bool->int64 */ func MapInt64ToBoolOption(m BoolOption, f func(bool) int64) Int64Option {  if m.IsDefined() { return Int64(f(*m.value)) } else { return NoneInt64Option }  }
/* BoolOption: bool->uint */ func MapUintToBoolOption(m BoolOption, f func(bool) uint) UintOption {  if m.IsDefined() { return Uint(f(*m.value)) } else { return NoneUintOption }  }
/* BoolOption: bool->uint8 */ func MapUint8ToBoolOption(m BoolOption, f func(bool) uint8) Uint8Option {  if m.IsDefined() { return Uint8(f(*m.value)) } else { return NoneUint8Option }  }
/* BoolOption: bool->uint16 */ func MapUint16ToBoolOption(m BoolOption, f func(bool) uint16) Uint16Option {  if m.IsDefined() { return Uint16(f(*m.value)) } else { return NoneUint16Option }  }
/* BoolOption: bool->uint32 */ func MapUint32ToBoolOption(m BoolOption, f func(bool) uint32) Uint32Option {  if m.IsDefined() { return Uint32(f(*m.value)) } else { return NoneUint32Option }  }
/* BoolOption: bool->uint64 */ func MapUint64ToBoolOption(m BoolOption, f func(bool) uint64) Uint64Option {  if m.IsDefined() { return Uint64(f(*m.value)) } else { return NoneUint64Option }  }
/* BoolOption: bool->uintptr */ func MapUintptrToBoolOption(m BoolOption, f func(bool) uintptr) UintptrOption {  if m.IsDefined() { return Uintptr(f(*m.value)) } else { return NoneUintptrOption }  }
/* BoolOption: bool->byte */ func MapByteToBoolOption(m BoolOption, f func(bool) byte) ByteOption {  if m.IsDefined() { return Byte(f(*m.value)) } else { return NoneByteOption }  }
/* BoolOption: bool->rune */ func MapRuneToBoolOption(m BoolOption, f func(bool) rune) RuneOption {  if m.IsDefined() { return Rune(f(*m.value)) } else { return NoneRuneOption }  }
/* BoolOption: bool->float32 */ func MapFloat32ToBoolOption(m BoolOption, f func(bool) float32) Float32Option {  if m.IsDefined() { return Float32(f(*m.value)) } else { return NoneFloat32Option }  }
/* BoolOption: bool->float64 */ func MapFloat64ToBoolOption(m BoolOption, f func(bool) float64) Float64Option {  if m.IsDefined() { return Float64(f(*m.value)) } else { return NoneFloat64Option }  }
/* BoolOption: bool->complex64 */ func MapComplex64ToBoolOption(m BoolOption, f func(bool) complex64) Complex64Option {  if m.IsDefined() { return Complex64(f(*m.value)) } else { return NoneComplex64Option }  }
/* BoolOption: bool->complex128 */ func MapComplex128ToBoolOption(m BoolOption, f func(bool) complex128) Complex128Option {  if m.IsDefined() { return Complex128(f(*m.value)) } else { return NoneComplex128Option }  }
/* BoolOption: bool->Any */ func MapAnyToBoolOption(m BoolOption, f func(bool) Any) AnyOption {  if m.IsDefined() { return AnyOpt(f(*m.value)) } else { return NoneAnyOption }  }
/* BoolOption: bool->BoolOption */ func MapBoolOptionToBoolOption(m BoolOption, f func(bool) BoolOption) BoolOptionOption {  if m.IsDefined() { return BoolBool(f(*m.value)) } else { return NoneBoolOptionOption }  }
/* BoolOption: bool->StringOption */ func MapStringOptionToBoolOption(m BoolOption, f func(bool) StringOption) StringOptionOption {  if m.IsDefined() { return StringString(f(*m.value)) } else { return NoneStringOptionOption }  }
/* BoolOption: bool->IntOption */ func MapIntOptionToBoolOption(m BoolOption, f func(bool) IntOption) IntOptionOption {  if m.IsDefined() { return IntInt(f(*m.value)) } else { return NoneIntOptionOption }  }
/* BoolOption: bool->Int8Option */ func MapInt8OptionToBoolOption(m BoolOption, f func(bool) Int8Option) Int8OptionOption {  if m.IsDefined() { return Int8Int8(f(*m.value)) } else { return NoneInt8OptionOption }  }
/* BoolOption: bool->Int16Option */ func MapInt16OptionToBoolOption(m BoolOption, f func(bool) Int16Option) Int16OptionOption {  if m.IsDefined() { return Int16Int16(f(*m.value)) } else { return NoneInt16OptionOption }  }
/* BoolOption: bool->Int32Option */ func MapInt32OptionToBoolOption(m BoolOption, f func(bool) Int32Option) Int32OptionOption {  if m.IsDefined() { return Int32Int32(f(*m.value)) } else { return NoneInt32OptionOption }  }
/* BoolOption: bool->Int64Option */ func MapInt64OptionToBoolOption(m BoolOption, f func(bool) Int64Option) Int64OptionOption {  if m.IsDefined() { return Int64Int64(f(*m.value)) } else { return NoneInt64OptionOption }  }
/* BoolOption: bool->UintOption */ func MapUintOptionToBoolOption(m BoolOption, f func(bool) UintOption) UintOptionOption {  if m.IsDefined() { return UintUint(f(*m.value)) } else { return NoneUintOptionOption }  }
/* BoolOption: bool->Uint8Option */ func MapUint8OptionToBoolOption(m BoolOption, f func(bool) Uint8Option) Uint8OptionOption {  if m.IsDefined() { return Uint8Uint8(f(*m.value)) } else { return NoneUint8OptionOption }  }
/* BoolOption: bool->Uint16Option */ func MapUint16OptionToBoolOption(m BoolOption, f func(bool) Uint16Option) Uint16OptionOption {  if m.IsDefined() { return Uint16Uint16(f(*m.value)) } else { return NoneUint16OptionOption }  }
/* BoolOption: bool->Uint32Option */ func MapUint32OptionToBoolOption(m BoolOption, f func(bool) Uint32Option) Uint32OptionOption {  if m.IsDefined() { return Uint32Uint32(f(*m.value)) } else { return NoneUint32OptionOption }  }
/* BoolOption: bool->Uint64Option */ func MapUint64OptionToBoolOption(m BoolOption, f func(bool) Uint64Option) Uint64OptionOption {  if m.IsDefined() { return Uint64Uint64(f(*m.value)) } else { return NoneUint64OptionOption }  }
/* BoolOption: bool->UintptrOption */ func MapUintptrOptionToBoolOption(m BoolOption, f func(bool) UintptrOption) UintptrOptionOption {  if m.IsDefined() { return UintptrUintptr(f(*m.value)) } else { return NoneUintptrOptionOption }  }
/* BoolOption: bool->ByteOption */ func MapByteOptionToBoolOption(m BoolOption, f func(bool) ByteOption) ByteOptionOption {  if m.IsDefined() { return ByteByte(f(*m.value)) } else { return NoneByteOptionOption }  }
/* BoolOption: bool->RuneOption */ func MapRuneOptionToBoolOption(m BoolOption, f func(bool) RuneOption) RuneOptionOption {  if m.IsDefined() { return RuneRune(f(*m.value)) } else { return NoneRuneOptionOption }  }
/* BoolOption: bool->Float32Option */ func MapFloat32OptionToBoolOption(m BoolOption, f func(bool) Float32Option) Float32OptionOption {  if m.IsDefined() { return Float32Float32(f(*m.value)) } else { return NoneFloat32OptionOption }  }
/* BoolOption: bool->Float64Option */ func MapFloat64OptionToBoolOption(m BoolOption, f func(bool) Float64Option) Float64OptionOption {  if m.IsDefined() { return Float64Float64(f(*m.value)) } else { return NoneFloat64OptionOption }  }
/* BoolOption: bool->Complex64Option */ func MapComplex64OptionToBoolOption(m BoolOption, f func(bool) Complex64Option) Complex64OptionOption {  if m.IsDefined() { return Complex64Complex64(f(*m.value)) } else { return NoneComplex64OptionOption }  }
/* BoolOption: bool->Complex128Option */ func MapComplex128OptionToBoolOption(m BoolOption, f func(bool) Complex128Option) Complex128OptionOption {  if m.IsDefined() { return Complex128Complex128(f(*m.value)) } else { return NoneComplex128OptionOption }  }
/* BoolOption: bool->AnyOption */ func MapAnyOptionToBoolOption(m BoolOption, f func(bool) AnyOption) AnyOptionOption {  if m.IsDefined() { return AnyOptAny(f(*m.value)) } else { return NoneAnyOptionOption }  }
/* BoolOption: bool->[]bool */ func MapBoolArrToBoolOption(m BoolOption, f func(bool) []bool) BoolArrOption {  if m.IsDefined() { return BoolArrOpt(f(*m.value)) } else { return NoneBoolArrOption }  }
/* BoolOption: bool->[]string */ func MapStringArrToBoolOption(m BoolOption, f func(bool) []string) StringArrOption {  if m.IsDefined() { return StringArrOpt(f(*m.value)) } else { return NoneStringArrOption }  }
/* BoolOption: bool->[]int */ func MapIntArrToBoolOption(m BoolOption, f func(bool) []int) IntArrOption {  if m.IsDefined() { return IntArrOpt(f(*m.value)) } else { return NoneIntArrOption }  }
/* BoolOption: bool->[]int8 */ func MapInt8ArrToBoolOption(m BoolOption, f func(bool) []int8) Int8ArrOption {  if m.IsDefined() { return Int8ArrOpt(f(*m.value)) } else { return NoneInt8ArrOption }  }
/* BoolOption: bool->[]int16 */ func MapInt16ArrToBoolOption(m BoolOption, f func(bool) []int16) Int16ArrOption {  if m.IsDefined() { return Int16ArrOpt(f(*m.value)) } else { return NoneInt16ArrOption }  }
/* BoolOption: bool->[]int32 */ func MapInt32ArrToBoolOption(m BoolOption, f func(bool) []int32) Int32ArrOption {  if m.IsDefined() { return Int32ArrOpt(f(*m.value)) } else { return NoneInt32ArrOption }  }
/* BoolOption: bool->[]int64 */ func MapInt64ArrToBoolOption(m BoolOption, f func(bool) []int64) Int64ArrOption {  if m.IsDefined() { return Int64ArrOpt(f(*m.value)) } else { return NoneInt64ArrOption }  }
/* BoolOption: bool->[]uint */ func MapUintArrToBoolOption(m BoolOption, f func(bool) []uint) UintArrOption {  if m.IsDefined() { return UintArrOpt(f(*m.value)) } else { return NoneUintArrOption }  }
/* BoolOption: bool->[]uint8 */ func MapUint8ArrToBoolOption(m BoolOption, f func(bool) []uint8) Uint8ArrOption {  if m.IsDefined() { return Uint8ArrOpt(f(*m.value)) } else { return NoneUint8ArrOption }  }
/* BoolOption: bool->[]uint16 */ func MapUint16ArrToBoolOption(m BoolOption, f func(bool) []uint16) Uint16ArrOption {  if m.IsDefined() { return Uint16ArrOpt(f(*m.value)) } else { return NoneUint16ArrOption }  }
/* BoolOption: bool->[]uint32 */ func MapUint32ArrToBoolOption(m BoolOption, f func(bool) []uint32) Uint32ArrOption {  if m.IsDefined() { return Uint32ArrOpt(f(*m.value)) } else { return NoneUint32ArrOption }  }
/* BoolOption: bool->[]uint64 */ func MapUint64ArrToBoolOption(m BoolOption, f func(bool) []uint64) Uint64ArrOption {  if m.IsDefined() { return Uint64ArrOpt(f(*m.value)) } else { return NoneUint64ArrOption }  }
/* BoolOption: bool->[]uintptr */ func MapUintptrArrToBoolOption(m BoolOption, f func(bool) []uintptr) UintptrArrOption {  if m.IsDefined() { return UintptrArrOpt(f(*m.value)) } else { return NoneUintptrArrOption }  }
/* BoolOption: bool->[]byte */ func MapByteArrToBoolOption(m BoolOption, f func(bool) []byte) ByteArrOption {  if m.IsDefined() { return ByteArrOpt(f(*m.value)) } else { return NoneByteArrOption }  }
/* BoolOption: bool->[]rune */ func MapRuneArrToBoolOption(m BoolOption, f func(bool) []rune) RuneArrOption {  if m.IsDefined() { return RuneArrOpt(f(*m.value)) } else { return NoneRuneArrOption }  }
/* BoolOption: bool->[]float32 */ func MapFloat32ArrToBoolOption(m BoolOption, f func(bool) []float32) Float32ArrOption {  if m.IsDefined() { return Float32ArrOpt(f(*m.value)) } else { return NoneFloat32ArrOption }  }
/* BoolOption: bool->[]float64 */ func MapFloat64ArrToBoolOption(m BoolOption, f func(bool) []float64) Float64ArrOption {  if m.IsDefined() { return Float64ArrOpt(f(*m.value)) } else { return NoneFloat64ArrOption }  }
/* BoolOption: bool->[]complex64 */ func MapComplex64ArrToBoolOption(m BoolOption, f func(bool) []complex64) Complex64ArrOption {  if m.IsDefined() { return Complex64ArrOpt(f(*m.value)) } else { return NoneComplex64ArrOption }  }
/* BoolOption: bool->[]complex128 */ func MapComplex128ArrToBoolOption(m BoolOption, f func(bool) []complex128) Complex128ArrOption {  if m.IsDefined() { return Complex128ArrOpt(f(*m.value)) } else { return NoneComplex128ArrOption }  }
/* BoolOption: bool->[]Any */ func MapAnyArrToBoolOption(m BoolOption, f func(bool) []Any) AnyArrOption {  if m.IsDefined() { return AnyArrOpt(f(*m.value)) } else { return NoneAnyArrOption }  }
/* BoolOption: bool->BoolList */ func MapBoolListToBoolOption(m BoolOption, f func(bool) BoolList) BoolListOption {  if m.IsDefined() { return BoolListOpt(f(*m.value)) } else { return NoneBoolListOption }  }
/* BoolOption: bool->StringList */ func MapStringListToBoolOption(m BoolOption, f func(bool) StringList) StringListOption {  if m.IsDefined() { return StringListOpt(f(*m.value)) } else { return NoneStringListOption }  }
/* BoolOption: bool->IntList */ func MapIntListToBoolOption(m BoolOption, f func(bool) IntList) IntListOption {  if m.IsDefined() { return IntListOpt(f(*m.value)) } else { return NoneIntListOption }  }
/* BoolOption: bool->Int8List */ func MapInt8ListToBoolOption(m BoolOption, f func(bool) Int8List) Int8ListOption {  if m.IsDefined() { return Int8ListOpt(f(*m.value)) } else { return NoneInt8ListOption }  }
/* BoolOption: bool->Int16List */ func MapInt16ListToBoolOption(m BoolOption, f func(bool) Int16List) Int16ListOption {  if m.IsDefined() { return Int16ListOpt(f(*m.value)) } else { return NoneInt16ListOption }  }
/* BoolOption: bool->Int32List */ func MapInt32ListToBoolOption(m BoolOption, f func(bool) Int32List) Int32ListOption {  if m.IsDefined() { return Int32ListOpt(f(*m.value)) } else { return NoneInt32ListOption }  }
/* BoolOption: bool->Int64List */ func MapInt64ListToBoolOption(m BoolOption, f func(bool) Int64List) Int64ListOption {  if m.IsDefined() { return Int64ListOpt(f(*m.value)) } else { return NoneInt64ListOption }  }
/* BoolOption: bool->UintList */ func MapUintListToBoolOption(m BoolOption, f func(bool) UintList) UintListOption {  if m.IsDefined() { return UintListOpt(f(*m.value)) } else { return NoneUintListOption }  }
/* BoolOption: bool->Uint8List */ func MapUint8ListToBoolOption(m BoolOption, f func(bool) Uint8List) Uint8ListOption {  if m.IsDefined() { return Uint8ListOpt(f(*m.value)) } else { return NoneUint8ListOption }  }
/* BoolOption: bool->Uint16List */ func MapUint16ListToBoolOption(m BoolOption, f func(bool) Uint16List) Uint16ListOption {  if m.IsDefined() { return Uint16ListOpt(f(*m.value)) } else { return NoneUint16ListOption }  }
/* BoolOption: bool->Uint32List */ func MapUint32ListToBoolOption(m BoolOption, f func(bool) Uint32List) Uint32ListOption {  if m.IsDefined() { return Uint32ListOpt(f(*m.value)) } else { return NoneUint32ListOption }  }
/* BoolOption: bool->Uint64List */ func MapUint64ListToBoolOption(m BoolOption, f func(bool) Uint64List) Uint64ListOption {  if m.IsDefined() { return Uint64ListOpt(f(*m.value)) } else { return NoneUint64ListOption }  }
/* BoolOption: bool->UintptrList */ func MapUintptrListToBoolOption(m BoolOption, f func(bool) UintptrList) UintptrListOption {  if m.IsDefined() { return UintptrListOpt(f(*m.value)) } else { return NoneUintptrListOption }  }
/* BoolOption: bool->ByteList */ func MapByteListToBoolOption(m BoolOption, f func(bool) ByteList) ByteListOption {  if m.IsDefined() { return ByteListOpt(f(*m.value)) } else { return NoneByteListOption }  }
/* BoolOption: bool->RuneList */ func MapRuneListToBoolOption(m BoolOption, f func(bool) RuneList) RuneListOption {  if m.IsDefined() { return RuneListOpt(f(*m.value)) } else { return NoneRuneListOption }  }
/* BoolOption: bool->Float32List */ func MapFloat32ListToBoolOption(m BoolOption, f func(bool) Float32List) Float32ListOption {  if m.IsDefined() { return Float32ListOpt(f(*m.value)) } else { return NoneFloat32ListOption }  }
/* BoolOption: bool->Float64List */ func MapFloat64ListToBoolOption(m BoolOption, f func(bool) Float64List) Float64ListOption {  if m.IsDefined() { return Float64ListOpt(f(*m.value)) } else { return NoneFloat64ListOption }  }
/* BoolOption: bool->Complex64List */ func MapComplex64ListToBoolOption(m BoolOption, f func(bool) Complex64List) Complex64ListOption {  if m.IsDefined() { return Complex64ListOpt(f(*m.value)) } else { return NoneComplex64ListOption }  }
/* BoolOption: bool->Complex128List */ func MapComplex128ListToBoolOption(m BoolOption, f func(bool) Complex128List) Complex128ListOption {  if m.IsDefined() { return Complex128ListOpt(f(*m.value)) } else { return NoneComplex128ListOption }  }
/* BoolOption: bool->AnyList */ func MapAnyListToBoolOption(m BoolOption, f func(bool) AnyList) AnyListOption {  if m.IsDefined() { return AnyListOpt(f(*m.value)) } else { return NoneAnyListOption }  }
/* StringOption: string->bool */ func MapBoolToStringOption(m StringOption, f func(string) bool) BoolOption {  if m.IsDefined() { return Bool(f(*m.value)) } else { return NoneBoolOption }  }
/* StringOption: string->string */ func MapStringToStringOption(m StringOption, f func(string) string) StringOption {  if m.IsDefined() { return String(f(*m.value)) } else { return NoneStringOption }  }
/* StringOption: string->int */ func MapIntToStringOption(m StringOption, f func(string) int) IntOption {  if m.IsDefined() { return Int(f(*m.value)) } else { return NoneIntOption }  }
/* StringOption: string->int8 */ func MapInt8ToStringOption(m StringOption, f func(string) int8) Int8Option {  if m.IsDefined() { return Int8(f(*m.value)) } else { return NoneInt8Option }  }
/* StringOption: string->int16 */ func MapInt16ToStringOption(m StringOption, f func(string) int16) Int16Option {  if m.IsDefined() { return Int16(f(*m.value)) } else { return NoneInt16Option }  }
/* StringOption: string->int32 */ func MapInt32ToStringOption(m StringOption, f func(string) int32) Int32Option {  if m.IsDefined() { return Int32(f(*m.value)) } else { return NoneInt32Option }  }
/* StringOption: string->int64 */ func MapInt64ToStringOption(m StringOption, f func(string) int64) Int64Option {  if m.IsDefined() { return Int64(f(*m.value)) } else { return NoneInt64Option }  }
/* StringOption: string->uint */ func MapUintToStringOption(m StringOption, f func(string) uint) UintOption {  if m.IsDefined() { return Uint(f(*m.value)) } else { return NoneUintOption }  }
/* StringOption: string->uint8 */ func MapUint8ToStringOption(m StringOption, f func(string) uint8) Uint8Option {  if m.IsDefined() { return Uint8(f(*m.value)) } else { return NoneUint8Option }  }
/* StringOption: string->uint16 */ func MapUint16ToStringOption(m StringOption, f func(string) uint16) Uint16Option {  if m.IsDefined() { return Uint16(f(*m.value)) } else { return NoneUint16Option }  }
/* StringOption: string->uint32 */ func MapUint32ToStringOption(m StringOption, f func(string) uint32) Uint32Option {  if m.IsDefined() { return Uint32(f(*m.value)) } else { return NoneUint32Option }  }
/* StringOption: string->uint64 */ func MapUint64ToStringOption(m StringOption, f func(string) uint64) Uint64Option {  if m.IsDefined() { return Uint64(f(*m.value)) } else { return NoneUint64Option }  }
/* StringOption: string->uintptr */ func MapUintptrToStringOption(m StringOption, f func(string) uintptr) UintptrOption {  if m.IsDefined() { return Uintptr(f(*m.value)) } else { return NoneUintptrOption }  }
/* StringOption: string->byte */ func MapByteToStringOption(m StringOption, f func(string) byte) ByteOption {  if m.IsDefined() { return Byte(f(*m.value)) } else { return NoneByteOption }  }
/* StringOption: string->rune */ func MapRuneToStringOption(m StringOption, f func(string) rune) RuneOption {  if m.IsDefined() { return Rune(f(*m.value)) } else { return NoneRuneOption }  }
/* StringOption: string->float32 */ func MapFloat32ToStringOption(m StringOption, f func(string) float32) Float32Option {  if m.IsDefined() { return Float32(f(*m.value)) } else { return NoneFloat32Option }  }
/* StringOption: string->float64 */ func MapFloat64ToStringOption(m StringOption, f func(string) float64) Float64Option {  if m.IsDefined() { return Float64(f(*m.value)) } else { return NoneFloat64Option }  }
/* StringOption: string->complex64 */ func MapComplex64ToStringOption(m StringOption, f func(string) complex64) Complex64Option {  if m.IsDefined() { return Complex64(f(*m.value)) } else { return NoneComplex64Option }  }
/* StringOption: string->complex128 */ func MapComplex128ToStringOption(m StringOption, f func(string) complex128) Complex128Option {  if m.IsDefined() { return Complex128(f(*m.value)) } else { return NoneComplex128Option }  }
/* StringOption: string->Any */ func MapAnyToStringOption(m StringOption, f func(string) Any) AnyOption {  if m.IsDefined() { return AnyOpt(f(*m.value)) } else { return NoneAnyOption }  }
/* StringOption: string->BoolOption */ func MapBoolOptionToStringOption(m StringOption, f func(string) BoolOption) BoolOptionOption {  if m.IsDefined() { return BoolBool(f(*m.value)) } else { return NoneBoolOptionOption }  }
/* StringOption: string->StringOption */ func MapStringOptionToStringOption(m StringOption, f func(string) StringOption) StringOptionOption {  if m.IsDefined() { return StringString(f(*m.value)) } else { return NoneStringOptionOption }  }
/* StringOption: string->IntOption */ func MapIntOptionToStringOption(m StringOption, f func(string) IntOption) IntOptionOption {  if m.IsDefined() { return IntInt(f(*m.value)) } else { return NoneIntOptionOption }  }
/* StringOption: string->Int8Option */ func MapInt8OptionToStringOption(m StringOption, f func(string) Int8Option) Int8OptionOption {  if m.IsDefined() { return Int8Int8(f(*m.value)) } else { return NoneInt8OptionOption }  }
/* StringOption: string->Int16Option */ func MapInt16OptionToStringOption(m StringOption, f func(string) Int16Option) Int16OptionOption {  if m.IsDefined() { return Int16Int16(f(*m.value)) } else { return NoneInt16OptionOption }  }
/* StringOption: string->Int32Option */ func MapInt32OptionToStringOption(m StringOption, f func(string) Int32Option) Int32OptionOption {  if m.IsDefined() { return Int32Int32(f(*m.value)) } else { return NoneInt32OptionOption }  }
/* StringOption: string->Int64Option */ func MapInt64OptionToStringOption(m StringOption, f func(string) Int64Option) Int64OptionOption {  if m.IsDefined() { return Int64Int64(f(*m.value)) } else { return NoneInt64OptionOption }  }
/* StringOption: string->UintOption */ func MapUintOptionToStringOption(m StringOption, f func(string) UintOption) UintOptionOption {  if m.IsDefined() { return UintUint(f(*m.value)) } else { return NoneUintOptionOption }  }
/* StringOption: string->Uint8Option */ func MapUint8OptionToStringOption(m StringOption, f func(string) Uint8Option) Uint8OptionOption {  if m.IsDefined() { return Uint8Uint8(f(*m.value)) } else { return NoneUint8OptionOption }  }
/* StringOption: string->Uint16Option */ func MapUint16OptionToStringOption(m StringOption, f func(string) Uint16Option) Uint16OptionOption {  if m.IsDefined() { return Uint16Uint16(f(*m.value)) } else { return NoneUint16OptionOption }  }
/* StringOption: string->Uint32Option */ func MapUint32OptionToStringOption(m StringOption, f func(string) Uint32Option) Uint32OptionOption {  if m.IsDefined() { return Uint32Uint32(f(*m.value)) } else { return NoneUint32OptionOption }  }
/* StringOption: string->Uint64Option */ func MapUint64OptionToStringOption(m StringOption, f func(string) Uint64Option) Uint64OptionOption {  if m.IsDefined() { return Uint64Uint64(f(*m.value)) } else { return NoneUint64OptionOption }  }
/* StringOption: string->UintptrOption */ func MapUintptrOptionToStringOption(m StringOption, f func(string) UintptrOption) UintptrOptionOption {  if m.IsDefined() { return UintptrUintptr(f(*m.value)) } else { return NoneUintptrOptionOption }  }
/* StringOption: string->ByteOption */ func MapByteOptionToStringOption(m StringOption, f func(string) ByteOption) ByteOptionOption {  if m.IsDefined() { return ByteByte(f(*m.value)) } else { return NoneByteOptionOption }  }
/* StringOption: string->RuneOption */ func MapRuneOptionToStringOption(m StringOption, f func(string) RuneOption) RuneOptionOption {  if m.IsDefined() { return RuneRune(f(*m.value)) } else { return NoneRuneOptionOption }  }
/* StringOption: string->Float32Option */ func MapFloat32OptionToStringOption(m StringOption, f func(string) Float32Option) Float32OptionOption {  if m.IsDefined() { return Float32Float32(f(*m.value)) } else { return NoneFloat32OptionOption }  }
/* StringOption: string->Float64Option */ func MapFloat64OptionToStringOption(m StringOption, f func(string) Float64Option) Float64OptionOption {  if m.IsDefined() { return Float64Float64(f(*m.value)) } else { return NoneFloat64OptionOption }  }
/* StringOption: string->Complex64Option */ func MapComplex64OptionToStringOption(m StringOption, f func(string) Complex64Option) Complex64OptionOption {  if m.IsDefined() { return Complex64Complex64(f(*m.value)) } else { return NoneComplex64OptionOption }  }
/* StringOption: string->Complex128Option */ func MapComplex128OptionToStringOption(m StringOption, f func(string) Complex128Option) Complex128OptionOption {  if m.IsDefined() { return Complex128Complex128(f(*m.value)) } else { return NoneComplex128OptionOption }  }
/* StringOption: string->AnyOption */ func MapAnyOptionToStringOption(m StringOption, f func(string) AnyOption) AnyOptionOption {  if m.IsDefined() { return AnyOptAny(f(*m.value)) } else { return NoneAnyOptionOption }  }
/* StringOption: string->[]bool */ func MapBoolArrToStringOption(m StringOption, f func(string) []bool) BoolArrOption {  if m.IsDefined() { return BoolArrOpt(f(*m.value)) } else { return NoneBoolArrOption }  }
/* StringOption: string->[]string */ func MapStringArrToStringOption(m StringOption, f func(string) []string) StringArrOption {  if m.IsDefined() { return StringArrOpt(f(*m.value)) } else { return NoneStringArrOption }  }
/* StringOption: string->[]int */ func MapIntArrToStringOption(m StringOption, f func(string) []int) IntArrOption {  if m.IsDefined() { return IntArrOpt(f(*m.value)) } else { return NoneIntArrOption }  }
/* StringOption: string->[]int8 */ func MapInt8ArrToStringOption(m StringOption, f func(string) []int8) Int8ArrOption {  if m.IsDefined() { return Int8ArrOpt(f(*m.value)) } else { return NoneInt8ArrOption }  }
/* StringOption: string->[]int16 */ func MapInt16ArrToStringOption(m StringOption, f func(string) []int16) Int16ArrOption {  if m.IsDefined() { return Int16ArrOpt(f(*m.value)) } else { return NoneInt16ArrOption }  }
/* StringOption: string->[]int32 */ func MapInt32ArrToStringOption(m StringOption, f func(string) []int32) Int32ArrOption {  if m.IsDefined() { return Int32ArrOpt(f(*m.value)) } else { return NoneInt32ArrOption }  }
/* StringOption: string->[]int64 */ func MapInt64ArrToStringOption(m StringOption, f func(string) []int64) Int64ArrOption {  if m.IsDefined() { return Int64ArrOpt(f(*m.value)) } else { return NoneInt64ArrOption }  }
/* StringOption: string->[]uint */ func MapUintArrToStringOption(m StringOption, f func(string) []uint) UintArrOption {  if m.IsDefined() { return UintArrOpt(f(*m.value)) } else { return NoneUintArrOption }  }
/* StringOption: string->[]uint8 */ func MapUint8ArrToStringOption(m StringOption, f func(string) []uint8) Uint8ArrOption {  if m.IsDefined() { return Uint8ArrOpt(f(*m.value)) } else { return NoneUint8ArrOption }  }
/* StringOption: string->[]uint16 */ func MapUint16ArrToStringOption(m StringOption, f func(string) []uint16) Uint16ArrOption {  if m.IsDefined() { return Uint16ArrOpt(f(*m.value)) } else { return NoneUint16ArrOption }  }
/* StringOption: string->[]uint32 */ func MapUint32ArrToStringOption(m StringOption, f func(string) []uint32) Uint32ArrOption {  if m.IsDefined() { return Uint32ArrOpt(f(*m.value)) } else { return NoneUint32ArrOption }  }
/* StringOption: string->[]uint64 */ func MapUint64ArrToStringOption(m StringOption, f func(string) []uint64) Uint64ArrOption {  if m.IsDefined() { return Uint64ArrOpt(f(*m.value)) } else { return NoneUint64ArrOption }  }
/* StringOption: string->[]uintptr */ func MapUintptrArrToStringOption(m StringOption, f func(string) []uintptr) UintptrArrOption {  if m.IsDefined() { return UintptrArrOpt(f(*m.value)) } else { return NoneUintptrArrOption }  }
/* StringOption: string->[]byte */ func MapByteArrToStringOption(m StringOption, f func(string) []byte) ByteArrOption {  if m.IsDefined() { return ByteArrOpt(f(*m.value)) } else { return NoneByteArrOption }  }
/* StringOption: string->[]rune */ func MapRuneArrToStringOption(m StringOption, f func(string) []rune) RuneArrOption {  if m.IsDefined() { return RuneArrOpt(f(*m.value)) } else { return NoneRuneArrOption }  }
/* StringOption: string->[]float32 */ func MapFloat32ArrToStringOption(m StringOption, f func(string) []float32) Float32ArrOption {  if m.IsDefined() { return Float32ArrOpt(f(*m.value)) } else { return NoneFloat32ArrOption }  }
/* StringOption: string->[]float64 */ func MapFloat64ArrToStringOption(m StringOption, f func(string) []float64) Float64ArrOption {  if m.IsDefined() { return Float64ArrOpt(f(*m.value)) } else { return NoneFloat64ArrOption }  }
/* StringOption: string->[]complex64 */ func MapComplex64ArrToStringOption(m StringOption, f func(string) []complex64) Complex64ArrOption {  if m.IsDefined() { return Complex64ArrOpt(f(*m.value)) } else { return NoneComplex64ArrOption }  }
/* StringOption: string->[]complex128 */ func MapComplex128ArrToStringOption(m StringOption, f func(string) []complex128) Complex128ArrOption {  if m.IsDefined() { return Complex128ArrOpt(f(*m.value)) } else { return NoneComplex128ArrOption }  }
/* StringOption: string->[]Any */ func MapAnyArrToStringOption(m StringOption, f func(string) []Any) AnyArrOption {  if m.IsDefined() { return AnyArrOpt(f(*m.value)) } else { return NoneAnyArrOption }  }
/* StringOption: string->BoolList */ func MapBoolListToStringOption(m StringOption, f func(string) BoolList) BoolListOption {  if m.IsDefined() { return BoolListOpt(f(*m.value)) } else { return NoneBoolListOption }  }
/* StringOption: string->StringList */ func MapStringListToStringOption(m StringOption, f func(string) StringList) StringListOption {  if m.IsDefined() { return StringListOpt(f(*m.value)) } else { return NoneStringListOption }  }
/* StringOption: string->IntList */ func MapIntListToStringOption(m StringOption, f func(string) IntList) IntListOption {  if m.IsDefined() { return IntListOpt(f(*m.value)) } else { return NoneIntListOption }  }
/* StringOption: string->Int8List */ func MapInt8ListToStringOption(m StringOption, f func(string) Int8List) Int8ListOption {  if m.IsDefined() { return Int8ListOpt(f(*m.value)) } else { return NoneInt8ListOption }  }
/* StringOption: string->Int16List */ func MapInt16ListToStringOption(m StringOption, f func(string) Int16List) Int16ListOption {  if m.IsDefined() { return Int16ListOpt(f(*m.value)) } else { return NoneInt16ListOption }  }
/* StringOption: string->Int32List */ func MapInt32ListToStringOption(m StringOption, f func(string) Int32List) Int32ListOption {  if m.IsDefined() { return Int32ListOpt(f(*m.value)) } else { return NoneInt32ListOption }  }
/* StringOption: string->Int64List */ func MapInt64ListToStringOption(m StringOption, f func(string) Int64List) Int64ListOption {  if m.IsDefined() { return Int64ListOpt(f(*m.value)) } else { return NoneInt64ListOption }  }
/* StringOption: string->UintList */ func MapUintListToStringOption(m StringOption, f func(string) UintList) UintListOption {  if m.IsDefined() { return UintListOpt(f(*m.value)) } else { return NoneUintListOption }  }
/* StringOption: string->Uint8List */ func MapUint8ListToStringOption(m StringOption, f func(string) Uint8List) Uint8ListOption {  if m.IsDefined() { return Uint8ListOpt(f(*m.value)) } else { return NoneUint8ListOption }  }
/* StringOption: string->Uint16List */ func MapUint16ListToStringOption(m StringOption, f func(string) Uint16List) Uint16ListOption {  if m.IsDefined() { return Uint16ListOpt(f(*m.value)) } else { return NoneUint16ListOption }  }
/* StringOption: string->Uint32List */ func MapUint32ListToStringOption(m StringOption, f func(string) Uint32List) Uint32ListOption {  if m.IsDefined() { return Uint32ListOpt(f(*m.value)) } else { return NoneUint32ListOption }  }
/* StringOption: string->Uint64List */ func MapUint64ListToStringOption(m StringOption, f func(string) Uint64List) Uint64ListOption {  if m.IsDefined() { return Uint64ListOpt(f(*m.value)) } else { return NoneUint64ListOption }  }
/* StringOption: string->UintptrList */ func MapUintptrListToStringOption(m StringOption, f func(string) UintptrList) UintptrListOption {  if m.IsDefined() { return UintptrListOpt(f(*m.value)) } else { return NoneUintptrListOption }  }
/* StringOption: string->ByteList */ func MapByteListToStringOption(m StringOption, f func(string) ByteList) ByteListOption {  if m.IsDefined() { return ByteListOpt(f(*m.value)) } else { return NoneByteListOption }  }
/* StringOption: string->RuneList */ func MapRuneListToStringOption(m StringOption, f func(string) RuneList) RuneListOption {  if m.IsDefined() { return RuneListOpt(f(*m.value)) } else { return NoneRuneListOption }  }
/* StringOption: string->Float32List */ func MapFloat32ListToStringOption(m StringOption, f func(string) Float32List) Float32ListOption {  if m.IsDefined() { return Float32ListOpt(f(*m.value)) } else { return NoneFloat32ListOption }  }
/* StringOption: string->Float64List */ func MapFloat64ListToStringOption(m StringOption, f func(string) Float64List) Float64ListOption {  if m.IsDefined() { return Float64ListOpt(f(*m.value)) } else { return NoneFloat64ListOption }  }
/* StringOption: string->Complex64List */ func MapComplex64ListToStringOption(m StringOption, f func(string) Complex64List) Complex64ListOption {  if m.IsDefined() { return Complex64ListOpt(f(*m.value)) } else { return NoneComplex64ListOption }  }
/* StringOption: string->Complex128List */ func MapComplex128ListToStringOption(m StringOption, f func(string) Complex128List) Complex128ListOption {  if m.IsDefined() { return Complex128ListOpt(f(*m.value)) } else { return NoneComplex128ListOption }  }
/* StringOption: string->AnyList */ func MapAnyListToStringOption(m StringOption, f func(string) AnyList) AnyListOption {  if m.IsDefined() { return AnyListOpt(f(*m.value)) } else { return NoneAnyListOption }  }
/* IntOption: int->bool */ func MapBoolToIntOption(m IntOption, f func(int) bool) BoolOption {  if m.IsDefined() { return Bool(f(*m.value)) } else { return NoneBoolOption }  }
/* IntOption: int->string */ func MapStringToIntOption(m IntOption, f func(int) string) StringOption {  if m.IsDefined() { return String(f(*m.value)) } else { return NoneStringOption }  }
/* IntOption: int->int */ func MapIntToIntOption(m IntOption, f func(int) int) IntOption {  if m.IsDefined() { return Int(f(*m.value)) } else { return NoneIntOption }  }
/* IntOption: int->int8 */ func MapInt8ToIntOption(m IntOption, f func(int) int8) Int8Option {  if m.IsDefined() { return Int8(f(*m.value)) } else { return NoneInt8Option }  }
/* IntOption: int->int16 */ func MapInt16ToIntOption(m IntOption, f func(int) int16) Int16Option {  if m.IsDefined() { return Int16(f(*m.value)) } else { return NoneInt16Option }  }
/* IntOption: int->int32 */ func MapInt32ToIntOption(m IntOption, f func(int) int32) Int32Option {  if m.IsDefined() { return Int32(f(*m.value)) } else { return NoneInt32Option }  }
/* IntOption: int->int64 */ func MapInt64ToIntOption(m IntOption, f func(int) int64) Int64Option {  if m.IsDefined() { return Int64(f(*m.value)) } else { return NoneInt64Option }  }
/* IntOption: int->uint */ func MapUintToIntOption(m IntOption, f func(int) uint) UintOption {  if m.IsDefined() { return Uint(f(*m.value)) } else { return NoneUintOption }  }
/* IntOption: int->uint8 */ func MapUint8ToIntOption(m IntOption, f func(int) uint8) Uint8Option {  if m.IsDefined() { return Uint8(f(*m.value)) } else { return NoneUint8Option }  }
/* IntOption: int->uint16 */ func MapUint16ToIntOption(m IntOption, f func(int) uint16) Uint16Option {  if m.IsDefined() { return Uint16(f(*m.value)) } else { return NoneUint16Option }  }
/* IntOption: int->uint32 */ func MapUint32ToIntOption(m IntOption, f func(int) uint32) Uint32Option {  if m.IsDefined() { return Uint32(f(*m.value)) } else { return NoneUint32Option }  }
/* IntOption: int->uint64 */ func MapUint64ToIntOption(m IntOption, f func(int) uint64) Uint64Option {  if m.IsDefined() { return Uint64(f(*m.value)) } else { return NoneUint64Option }  }
/* IntOption: int->uintptr */ func MapUintptrToIntOption(m IntOption, f func(int) uintptr) UintptrOption {  if m.IsDefined() { return Uintptr(f(*m.value)) } else { return NoneUintptrOption }  }
/* IntOption: int->byte */ func MapByteToIntOption(m IntOption, f func(int) byte) ByteOption {  if m.IsDefined() { return Byte(f(*m.value)) } else { return NoneByteOption }  }
/* IntOption: int->rune */ func MapRuneToIntOption(m IntOption, f func(int) rune) RuneOption {  if m.IsDefined() { return Rune(f(*m.value)) } else { return NoneRuneOption }  }
/* IntOption: int->float32 */ func MapFloat32ToIntOption(m IntOption, f func(int) float32) Float32Option {  if m.IsDefined() { return Float32(f(*m.value)) } else { return NoneFloat32Option }  }
/* IntOption: int->float64 */ func MapFloat64ToIntOption(m IntOption, f func(int) float64) Float64Option {  if m.IsDefined() { return Float64(f(*m.value)) } else { return NoneFloat64Option }  }
/* IntOption: int->complex64 */ func MapComplex64ToIntOption(m IntOption, f func(int) complex64) Complex64Option {  if m.IsDefined() { return Complex64(f(*m.value)) } else { return NoneComplex64Option }  }
/* IntOption: int->complex128 */ func MapComplex128ToIntOption(m IntOption, f func(int) complex128) Complex128Option {  if m.IsDefined() { return Complex128(f(*m.value)) } else { return NoneComplex128Option }  }
/* IntOption: int->Any */ func MapAnyToIntOption(m IntOption, f func(int) Any) AnyOption {  if m.IsDefined() { return AnyOpt(f(*m.value)) } else { return NoneAnyOption }  }
/* IntOption: int->BoolOption */ func MapBoolOptionToIntOption(m IntOption, f func(int) BoolOption) BoolOptionOption {  if m.IsDefined() { return BoolBool(f(*m.value)) } else { return NoneBoolOptionOption }  }
/* IntOption: int->StringOption */ func MapStringOptionToIntOption(m IntOption, f func(int) StringOption) StringOptionOption {  if m.IsDefined() { return StringString(f(*m.value)) } else { return NoneStringOptionOption }  }
/* IntOption: int->IntOption */ func MapIntOptionToIntOption(m IntOption, f func(int) IntOption) IntOptionOption {  if m.IsDefined() { return IntInt(f(*m.value)) } else { return NoneIntOptionOption }  }
/* IntOption: int->Int8Option */ func MapInt8OptionToIntOption(m IntOption, f func(int) Int8Option) Int8OptionOption {  if m.IsDefined() { return Int8Int8(f(*m.value)) } else { return NoneInt8OptionOption }  }
/* IntOption: int->Int16Option */ func MapInt16OptionToIntOption(m IntOption, f func(int) Int16Option) Int16OptionOption {  if m.IsDefined() { return Int16Int16(f(*m.value)) } else { return NoneInt16OptionOption }  }
/* IntOption: int->Int32Option */ func MapInt32OptionToIntOption(m IntOption, f func(int) Int32Option) Int32OptionOption {  if m.IsDefined() { return Int32Int32(f(*m.value)) } else { return NoneInt32OptionOption }  }
/* IntOption: int->Int64Option */ func MapInt64OptionToIntOption(m IntOption, f func(int) Int64Option) Int64OptionOption {  if m.IsDefined() { return Int64Int64(f(*m.value)) } else { return NoneInt64OptionOption }  }
/* IntOption: int->UintOption */ func MapUintOptionToIntOption(m IntOption, f func(int) UintOption) UintOptionOption {  if m.IsDefined() { return UintUint(f(*m.value)) } else { return NoneUintOptionOption }  }
/* IntOption: int->Uint8Option */ func MapUint8OptionToIntOption(m IntOption, f func(int) Uint8Option) Uint8OptionOption {  if m.IsDefined() { return Uint8Uint8(f(*m.value)) } else { return NoneUint8OptionOption }  }
/* IntOption: int->Uint16Option */ func MapUint16OptionToIntOption(m IntOption, f func(int) Uint16Option) Uint16OptionOption {  if m.IsDefined() { return Uint16Uint16(f(*m.value)) } else { return NoneUint16OptionOption }  }
/* IntOption: int->Uint32Option */ func MapUint32OptionToIntOption(m IntOption, f func(int) Uint32Option) Uint32OptionOption {  if m.IsDefined() { return Uint32Uint32(f(*m.value)) } else { return NoneUint32OptionOption }  }
/* IntOption: int->Uint64Option */ func MapUint64OptionToIntOption(m IntOption, f func(int) Uint64Option) Uint64OptionOption {  if m.IsDefined() { return Uint64Uint64(f(*m.value)) } else { return NoneUint64OptionOption }  }
/* IntOption: int->UintptrOption */ func MapUintptrOptionToIntOption(m IntOption, f func(int) UintptrOption) UintptrOptionOption {  if m.IsDefined() { return UintptrUintptr(f(*m.value)) } else { return NoneUintptrOptionOption }  }
/* IntOption: int->ByteOption */ func MapByteOptionToIntOption(m IntOption, f func(int) ByteOption) ByteOptionOption {  if m.IsDefined() { return ByteByte(f(*m.value)) } else { return NoneByteOptionOption }  }
/* IntOption: int->RuneOption */ func MapRuneOptionToIntOption(m IntOption, f func(int) RuneOption) RuneOptionOption {  if m.IsDefined() { return RuneRune(f(*m.value)) } else { return NoneRuneOptionOption }  }
/* IntOption: int->Float32Option */ func MapFloat32OptionToIntOption(m IntOption, f func(int) Float32Option) Float32OptionOption {  if m.IsDefined() { return Float32Float32(f(*m.value)) } else { return NoneFloat32OptionOption }  }
/* IntOption: int->Float64Option */ func MapFloat64OptionToIntOption(m IntOption, f func(int) Float64Option) Float64OptionOption {  if m.IsDefined() { return Float64Float64(f(*m.value)) } else { return NoneFloat64OptionOption }  }
/* IntOption: int->Complex64Option */ func MapComplex64OptionToIntOption(m IntOption, f func(int) Complex64Option) Complex64OptionOption {  if m.IsDefined() { return Complex64Complex64(f(*m.value)) } else { return NoneComplex64OptionOption }  }
/* IntOption: int->Complex128Option */ func MapComplex128OptionToIntOption(m IntOption, f func(int) Complex128Option) Complex128OptionOption {  if m.IsDefined() { return Complex128Complex128(f(*m.value)) } else { return NoneComplex128OptionOption }  }
/* IntOption: int->AnyOption */ func MapAnyOptionToIntOption(m IntOption, f func(int) AnyOption) AnyOptionOption {  if m.IsDefined() { return AnyOptAny(f(*m.value)) } else { return NoneAnyOptionOption }  }
/* IntOption: int->[]bool */ func MapBoolArrToIntOption(m IntOption, f func(int) []bool) BoolArrOption {  if m.IsDefined() { return BoolArrOpt(f(*m.value)) } else { return NoneBoolArrOption }  }
/* IntOption: int->[]string */ func MapStringArrToIntOption(m IntOption, f func(int) []string) StringArrOption {  if m.IsDefined() { return StringArrOpt(f(*m.value)) } else { return NoneStringArrOption }  }
/* IntOption: int->[]int */ func MapIntArrToIntOption(m IntOption, f func(int) []int) IntArrOption {  if m.IsDefined() { return IntArrOpt(f(*m.value)) } else { return NoneIntArrOption }  }
/* IntOption: int->[]int8 */ func MapInt8ArrToIntOption(m IntOption, f func(int) []int8) Int8ArrOption {  if m.IsDefined() { return Int8ArrOpt(f(*m.value)) } else { return NoneInt8ArrOption }  }
/* IntOption: int->[]int16 */ func MapInt16ArrToIntOption(m IntOption, f func(int) []int16) Int16ArrOption {  if m.IsDefined() { return Int16ArrOpt(f(*m.value)) } else { return NoneInt16ArrOption }  }
/* IntOption: int->[]int32 */ func MapInt32ArrToIntOption(m IntOption, f func(int) []int32) Int32ArrOption {  if m.IsDefined() { return Int32ArrOpt(f(*m.value)) } else { return NoneInt32ArrOption }  }
/* IntOption: int->[]int64 */ func MapInt64ArrToIntOption(m IntOption, f func(int) []int64) Int64ArrOption {  if m.IsDefined() { return Int64ArrOpt(f(*m.value)) } else { return NoneInt64ArrOption }  }
/* IntOption: int->[]uint */ func MapUintArrToIntOption(m IntOption, f func(int) []uint) UintArrOption {  if m.IsDefined() { return UintArrOpt(f(*m.value)) } else { return NoneUintArrOption }  }
/* IntOption: int->[]uint8 */ func MapUint8ArrToIntOption(m IntOption, f func(int) []uint8) Uint8ArrOption {  if m.IsDefined() { return Uint8ArrOpt(f(*m.value)) } else { return NoneUint8ArrOption }  }
/* IntOption: int->[]uint16 */ func MapUint16ArrToIntOption(m IntOption, f func(int) []uint16) Uint16ArrOption {  if m.IsDefined() { return Uint16ArrOpt(f(*m.value)) } else { return NoneUint16ArrOption }  }
/* IntOption: int->[]uint32 */ func MapUint32ArrToIntOption(m IntOption, f func(int) []uint32) Uint32ArrOption {  if m.IsDefined() { return Uint32ArrOpt(f(*m.value)) } else { return NoneUint32ArrOption }  }
/* IntOption: int->[]uint64 */ func MapUint64ArrToIntOption(m IntOption, f func(int) []uint64) Uint64ArrOption {  if m.IsDefined() { return Uint64ArrOpt(f(*m.value)) } else { return NoneUint64ArrOption }  }
/* IntOption: int->[]uintptr */ func MapUintptrArrToIntOption(m IntOption, f func(int) []uintptr) UintptrArrOption {  if m.IsDefined() { return UintptrArrOpt(f(*m.value)) } else { return NoneUintptrArrOption }  }
/* IntOption: int->[]byte */ func MapByteArrToIntOption(m IntOption, f func(int) []byte) ByteArrOption {  if m.IsDefined() { return ByteArrOpt(f(*m.value)) } else { return NoneByteArrOption }  }
/* IntOption: int->[]rune */ func MapRuneArrToIntOption(m IntOption, f func(int) []rune) RuneArrOption {  if m.IsDefined() { return RuneArrOpt(f(*m.value)) } else { return NoneRuneArrOption }  }
/* IntOption: int->[]float32 */ func MapFloat32ArrToIntOption(m IntOption, f func(int) []float32) Float32ArrOption {  if m.IsDefined() { return Float32ArrOpt(f(*m.value)) } else { return NoneFloat32ArrOption }  }
/* IntOption: int->[]float64 */ func MapFloat64ArrToIntOption(m IntOption, f func(int) []float64) Float64ArrOption {  if m.IsDefined() { return Float64ArrOpt(f(*m.value)) } else { return NoneFloat64ArrOption }  }
/* IntOption: int->[]complex64 */ func MapComplex64ArrToIntOption(m IntOption, f func(int) []complex64) Complex64ArrOption {  if m.IsDefined() { return Complex64ArrOpt(f(*m.value)) } else { return NoneComplex64ArrOption }  }
/* IntOption: int->[]complex128 */ func MapComplex128ArrToIntOption(m IntOption, f func(int) []complex128) Complex128ArrOption {  if m.IsDefined() { return Complex128ArrOpt(f(*m.value)) } else { return NoneComplex128ArrOption }  }
/* IntOption: int->[]Any */ func MapAnyArrToIntOption(m IntOption, f func(int) []Any) AnyArrOption {  if m.IsDefined() { return AnyArrOpt(f(*m.value)) } else { return NoneAnyArrOption }  }
/* IntOption: int->BoolList */ func MapBoolListToIntOption(m IntOption, f func(int) BoolList) BoolListOption {  if m.IsDefined() { return BoolListOpt(f(*m.value)) } else { return NoneBoolListOption }  }
/* IntOption: int->StringList */ func MapStringListToIntOption(m IntOption, f func(int) StringList) StringListOption {  if m.IsDefined() { return StringListOpt(f(*m.value)) } else { return NoneStringListOption }  }
/* IntOption: int->IntList */ func MapIntListToIntOption(m IntOption, f func(int) IntList) IntListOption {  if m.IsDefined() { return IntListOpt(f(*m.value)) } else { return NoneIntListOption }  }
/* IntOption: int->Int8List */ func MapInt8ListToIntOption(m IntOption, f func(int) Int8List) Int8ListOption {  if m.IsDefined() { return Int8ListOpt(f(*m.value)) } else { return NoneInt8ListOption }  }
/* IntOption: int->Int16List */ func MapInt16ListToIntOption(m IntOption, f func(int) Int16List) Int16ListOption {  if m.IsDefined() { return Int16ListOpt(f(*m.value)) } else { return NoneInt16ListOption }  }
/* IntOption: int->Int32List */ func MapInt32ListToIntOption(m IntOption, f func(int) Int32List) Int32ListOption {  if m.IsDefined() { return Int32ListOpt(f(*m.value)) } else { return NoneInt32ListOption }  }
/* IntOption: int->Int64List */ func MapInt64ListToIntOption(m IntOption, f func(int) Int64List) Int64ListOption {  if m.IsDefined() { return Int64ListOpt(f(*m.value)) } else { return NoneInt64ListOption }  }
/* IntOption: int->UintList */ func MapUintListToIntOption(m IntOption, f func(int) UintList) UintListOption {  if m.IsDefined() { return UintListOpt(f(*m.value)) } else { return NoneUintListOption }  }
/* IntOption: int->Uint8List */ func MapUint8ListToIntOption(m IntOption, f func(int) Uint8List) Uint8ListOption {  if m.IsDefined() { return Uint8ListOpt(f(*m.value)) } else { return NoneUint8ListOption }  }
/* IntOption: int->Uint16List */ func MapUint16ListToIntOption(m IntOption, f func(int) Uint16List) Uint16ListOption {  if m.IsDefined() { return Uint16ListOpt(f(*m.value)) } else { return NoneUint16ListOption }  }
/* IntOption: int->Uint32List */ func MapUint32ListToIntOption(m IntOption, f func(int) Uint32List) Uint32ListOption {  if m.IsDefined() { return Uint32ListOpt(f(*m.value)) } else { return NoneUint32ListOption }  }
/* IntOption: int->Uint64List */ func MapUint64ListToIntOption(m IntOption, f func(int) Uint64List) Uint64ListOption {  if m.IsDefined() { return Uint64ListOpt(f(*m.value)) } else { return NoneUint64ListOption }  }
/* IntOption: int->UintptrList */ func MapUintptrListToIntOption(m IntOption, f func(int) UintptrList) UintptrListOption {  if m.IsDefined() { return UintptrListOpt(f(*m.value)) } else { return NoneUintptrListOption }  }
/* IntOption: int->ByteList */ func MapByteListToIntOption(m IntOption, f func(int) ByteList) ByteListOption {  if m.IsDefined() { return ByteListOpt(f(*m.value)) } else { return NoneByteListOption }  }
/* IntOption: int->RuneList */ func MapRuneListToIntOption(m IntOption, f func(int) RuneList) RuneListOption {  if m.IsDefined() { return RuneListOpt(f(*m.value)) } else { return NoneRuneListOption }  }
/* IntOption: int->Float32List */ func MapFloat32ListToIntOption(m IntOption, f func(int) Float32List) Float32ListOption {  if m.IsDefined() { return Float32ListOpt(f(*m.value)) } else { return NoneFloat32ListOption }  }
/* IntOption: int->Float64List */ func MapFloat64ListToIntOption(m IntOption, f func(int) Float64List) Float64ListOption {  if m.IsDefined() { return Float64ListOpt(f(*m.value)) } else { return NoneFloat64ListOption }  }
/* IntOption: int->Complex64List */ func MapComplex64ListToIntOption(m IntOption, f func(int) Complex64List) Complex64ListOption {  if m.IsDefined() { return Complex64ListOpt(f(*m.value)) } else { return NoneComplex64ListOption }  }
/* IntOption: int->Complex128List */ func MapComplex128ListToIntOption(m IntOption, f func(int) Complex128List) Complex128ListOption {  if m.IsDefined() { return Complex128ListOpt(f(*m.value)) } else { return NoneComplex128ListOption }  }
/* IntOption: int->AnyList */ func MapAnyListToIntOption(m IntOption, f func(int) AnyList) AnyListOption {  if m.IsDefined() { return AnyListOpt(f(*m.value)) } else { return NoneAnyListOption }  }
/* Int8Option: int8->bool */ func MapBoolToInt8Option(m Int8Option, f func(int8) bool) BoolOption {  if m.IsDefined() { return Bool(f(*m.value)) } else { return NoneBoolOption }  }
/* Int8Option: int8->string */ func MapStringToInt8Option(m Int8Option, f func(int8) string) StringOption {  if m.IsDefined() { return String(f(*m.value)) } else { return NoneStringOption }  }
/* Int8Option: int8->int */ func MapIntToInt8Option(m Int8Option, f func(int8) int) IntOption {  if m.IsDefined() { return Int(f(*m.value)) } else { return NoneIntOption }  }
/* Int8Option: int8->int8 */ func MapInt8ToInt8Option(m Int8Option, f func(int8) int8) Int8Option {  if m.IsDefined() { return Int8(f(*m.value)) } else { return NoneInt8Option }  }
/* Int8Option: int8->int16 */ func MapInt16ToInt8Option(m Int8Option, f func(int8) int16) Int16Option {  if m.IsDefined() { return Int16(f(*m.value)) } else { return NoneInt16Option }  }
/* Int8Option: int8->int32 */ func MapInt32ToInt8Option(m Int8Option, f func(int8) int32) Int32Option {  if m.IsDefined() { return Int32(f(*m.value)) } else { return NoneInt32Option }  }
/* Int8Option: int8->int64 */ func MapInt64ToInt8Option(m Int8Option, f func(int8) int64) Int64Option {  if m.IsDefined() { return Int64(f(*m.value)) } else { return NoneInt64Option }  }
/* Int8Option: int8->uint */ func MapUintToInt8Option(m Int8Option, f func(int8) uint) UintOption {  if m.IsDefined() { return Uint(f(*m.value)) } else { return NoneUintOption }  }
/* Int8Option: int8->uint8 */ func MapUint8ToInt8Option(m Int8Option, f func(int8) uint8) Uint8Option {  if m.IsDefined() { return Uint8(f(*m.value)) } else { return NoneUint8Option }  }
/* Int8Option: int8->uint16 */ func MapUint16ToInt8Option(m Int8Option, f func(int8) uint16) Uint16Option {  if m.IsDefined() { return Uint16(f(*m.value)) } else { return NoneUint16Option }  }
/* Int8Option: int8->uint32 */ func MapUint32ToInt8Option(m Int8Option, f func(int8) uint32) Uint32Option {  if m.IsDefined() { return Uint32(f(*m.value)) } else { return NoneUint32Option }  }
/* Int8Option: int8->uint64 */ func MapUint64ToInt8Option(m Int8Option, f func(int8) uint64) Uint64Option {  if m.IsDefined() { return Uint64(f(*m.value)) } else { return NoneUint64Option }  }
/* Int8Option: int8->uintptr */ func MapUintptrToInt8Option(m Int8Option, f func(int8) uintptr) UintptrOption {  if m.IsDefined() { return Uintptr(f(*m.value)) } else { return NoneUintptrOption }  }
/* Int8Option: int8->byte */ func MapByteToInt8Option(m Int8Option, f func(int8) byte) ByteOption {  if m.IsDefined() { return Byte(f(*m.value)) } else { return NoneByteOption }  }
/* Int8Option: int8->rune */ func MapRuneToInt8Option(m Int8Option, f func(int8) rune) RuneOption {  if m.IsDefined() { return Rune(f(*m.value)) } else { return NoneRuneOption }  }
/* Int8Option: int8->float32 */ func MapFloat32ToInt8Option(m Int8Option, f func(int8) float32) Float32Option {  if m.IsDefined() { return Float32(f(*m.value)) } else { return NoneFloat32Option }  }
/* Int8Option: int8->float64 */ func MapFloat64ToInt8Option(m Int8Option, f func(int8) float64) Float64Option {  if m.IsDefined() { return Float64(f(*m.value)) } else { return NoneFloat64Option }  }
/* Int8Option: int8->complex64 */ func MapComplex64ToInt8Option(m Int8Option, f func(int8) complex64) Complex64Option {  if m.IsDefined() { return Complex64(f(*m.value)) } else { return NoneComplex64Option }  }
/* Int8Option: int8->complex128 */ func MapComplex128ToInt8Option(m Int8Option, f func(int8) complex128) Complex128Option {  if m.IsDefined() { return Complex128(f(*m.value)) } else { return NoneComplex128Option }  }
/* Int8Option: int8->Any */ func MapAnyToInt8Option(m Int8Option, f func(int8) Any) AnyOption {  if m.IsDefined() { return AnyOpt(f(*m.value)) } else { return NoneAnyOption }  }
/* Int8Option: int8->BoolOption */ func MapBoolOptionToInt8Option(m Int8Option, f func(int8) BoolOption) BoolOptionOption {  if m.IsDefined() { return BoolBool(f(*m.value)) } else { return NoneBoolOptionOption }  }
/* Int8Option: int8->StringOption */ func MapStringOptionToInt8Option(m Int8Option, f func(int8) StringOption) StringOptionOption {  if m.IsDefined() { return StringString(f(*m.value)) } else { return NoneStringOptionOption }  }
/* Int8Option: int8->IntOption */ func MapIntOptionToInt8Option(m Int8Option, f func(int8) IntOption) IntOptionOption {  if m.IsDefined() { return IntInt(f(*m.value)) } else { return NoneIntOptionOption }  }
/* Int8Option: int8->Int8Option */ func MapInt8OptionToInt8Option(m Int8Option, f func(int8) Int8Option) Int8OptionOption {  if m.IsDefined() { return Int8Int8(f(*m.value)) } else { return NoneInt8OptionOption }  }
/* Int8Option: int8->Int16Option */ func MapInt16OptionToInt8Option(m Int8Option, f func(int8) Int16Option) Int16OptionOption {  if m.IsDefined() { return Int16Int16(f(*m.value)) } else { return NoneInt16OptionOption }  }
/* Int8Option: int8->Int32Option */ func MapInt32OptionToInt8Option(m Int8Option, f func(int8) Int32Option) Int32OptionOption {  if m.IsDefined() { return Int32Int32(f(*m.value)) } else { return NoneInt32OptionOption }  }
/* Int8Option: int8->Int64Option */ func MapInt64OptionToInt8Option(m Int8Option, f func(int8) Int64Option) Int64OptionOption {  if m.IsDefined() { return Int64Int64(f(*m.value)) } else { return NoneInt64OptionOption }  }
/* Int8Option: int8->UintOption */ func MapUintOptionToInt8Option(m Int8Option, f func(int8) UintOption) UintOptionOption {  if m.IsDefined() { return UintUint(f(*m.value)) } else { return NoneUintOptionOption }  }
/* Int8Option: int8->Uint8Option */ func MapUint8OptionToInt8Option(m Int8Option, f func(int8) Uint8Option) Uint8OptionOption {  if m.IsDefined() { return Uint8Uint8(f(*m.value)) } else { return NoneUint8OptionOption }  }
/* Int8Option: int8->Uint16Option */ func MapUint16OptionToInt8Option(m Int8Option, f func(int8) Uint16Option) Uint16OptionOption {  if m.IsDefined() { return Uint16Uint16(f(*m.value)) } else { return NoneUint16OptionOption }  }
/* Int8Option: int8->Uint32Option */ func MapUint32OptionToInt8Option(m Int8Option, f func(int8) Uint32Option) Uint32OptionOption {  if m.IsDefined() { return Uint32Uint32(f(*m.value)) } else { return NoneUint32OptionOption }  }
/* Int8Option: int8->Uint64Option */ func MapUint64OptionToInt8Option(m Int8Option, f func(int8) Uint64Option) Uint64OptionOption {  if m.IsDefined() { return Uint64Uint64(f(*m.value)) } else { return NoneUint64OptionOption }  }
/* Int8Option: int8->UintptrOption */ func MapUintptrOptionToInt8Option(m Int8Option, f func(int8) UintptrOption) UintptrOptionOption {  if m.IsDefined() { return UintptrUintptr(f(*m.value)) } else { return NoneUintptrOptionOption }  }
/* Int8Option: int8->ByteOption */ func MapByteOptionToInt8Option(m Int8Option, f func(int8) ByteOption) ByteOptionOption {  if m.IsDefined() { return ByteByte(f(*m.value)) } else { return NoneByteOptionOption }  }
/* Int8Option: int8->RuneOption */ func MapRuneOptionToInt8Option(m Int8Option, f func(int8) RuneOption) RuneOptionOption {  if m.IsDefined() { return RuneRune(f(*m.value)) } else { return NoneRuneOptionOption }  }
/* Int8Option: int8->Float32Option */ func MapFloat32OptionToInt8Option(m Int8Option, f func(int8) Float32Option) Float32OptionOption {  if m.IsDefined() { return Float32Float32(f(*m.value)) } else { return NoneFloat32OptionOption }  }
/* Int8Option: int8->Float64Option */ func MapFloat64OptionToInt8Option(m Int8Option, f func(int8) Float64Option) Float64OptionOption {  if m.IsDefined() { return Float64Float64(f(*m.value)) } else { return NoneFloat64OptionOption }  }
/* Int8Option: int8->Complex64Option */ func MapComplex64OptionToInt8Option(m Int8Option, f func(int8) Complex64Option) Complex64OptionOption {  if m.IsDefined() { return Complex64Complex64(f(*m.value)) } else { return NoneComplex64OptionOption }  }
/* Int8Option: int8->Complex128Option */ func MapComplex128OptionToInt8Option(m Int8Option, f func(int8) Complex128Option) Complex128OptionOption {  if m.IsDefined() { return Complex128Complex128(f(*m.value)) } else { return NoneComplex128OptionOption }  }
/* Int8Option: int8->AnyOption */ func MapAnyOptionToInt8Option(m Int8Option, f func(int8) AnyOption) AnyOptionOption {  if m.IsDefined() { return AnyOptAny(f(*m.value)) } else { return NoneAnyOptionOption }  }
/* Int8Option: int8->[]bool */ func MapBoolArrToInt8Option(m Int8Option, f func(int8) []bool) BoolArrOption {  if m.IsDefined() { return BoolArrOpt(f(*m.value)) } else { return NoneBoolArrOption }  }
/* Int8Option: int8->[]string */ func MapStringArrToInt8Option(m Int8Option, f func(int8) []string) StringArrOption {  if m.IsDefined() { return StringArrOpt(f(*m.value)) } else { return NoneStringArrOption }  }
/* Int8Option: int8->[]int */ func MapIntArrToInt8Option(m Int8Option, f func(int8) []int) IntArrOption {  if m.IsDefined() { return IntArrOpt(f(*m.value)) } else { return NoneIntArrOption }  }
/* Int8Option: int8->[]int8 */ func MapInt8ArrToInt8Option(m Int8Option, f func(int8) []int8) Int8ArrOption {  if m.IsDefined() { return Int8ArrOpt(f(*m.value)) } else { return NoneInt8ArrOption }  }
/* Int8Option: int8->[]int16 */ func MapInt16ArrToInt8Option(m Int8Option, f func(int8) []int16) Int16ArrOption {  if m.IsDefined() { return Int16ArrOpt(f(*m.value)) } else { return NoneInt16ArrOption }  }
/* Int8Option: int8->[]int32 */ func MapInt32ArrToInt8Option(m Int8Option, f func(int8) []int32) Int32ArrOption {  if m.IsDefined() { return Int32ArrOpt(f(*m.value)) } else { return NoneInt32ArrOption }  }
/* Int8Option: int8->[]int64 */ func MapInt64ArrToInt8Option(m Int8Option, f func(int8) []int64) Int64ArrOption {  if m.IsDefined() { return Int64ArrOpt(f(*m.value)) } else { return NoneInt64ArrOption }  }
/* Int8Option: int8->[]uint */ func MapUintArrToInt8Option(m Int8Option, f func(int8) []uint) UintArrOption {  if m.IsDefined() { return UintArrOpt(f(*m.value)) } else { return NoneUintArrOption }  }
/* Int8Option: int8->[]uint8 */ func MapUint8ArrToInt8Option(m Int8Option, f func(int8) []uint8) Uint8ArrOption {  if m.IsDefined() { return Uint8ArrOpt(f(*m.value)) } else { return NoneUint8ArrOption }  }
/* Int8Option: int8->[]uint16 */ func MapUint16ArrToInt8Option(m Int8Option, f func(int8) []uint16) Uint16ArrOption {  if m.IsDefined() { return Uint16ArrOpt(f(*m.value)) } else { return NoneUint16ArrOption }  }
/* Int8Option: int8->[]uint32 */ func MapUint32ArrToInt8Option(m Int8Option, f func(int8) []uint32) Uint32ArrOption {  if m.IsDefined() { return Uint32ArrOpt(f(*m.value)) } else { return NoneUint32ArrOption }  }
/* Int8Option: int8->[]uint64 */ func MapUint64ArrToInt8Option(m Int8Option, f func(int8) []uint64) Uint64ArrOption {  if m.IsDefined() { return Uint64ArrOpt(f(*m.value)) } else { return NoneUint64ArrOption }  }
/* Int8Option: int8->[]uintptr */ func MapUintptrArrToInt8Option(m Int8Option, f func(int8) []uintptr) UintptrArrOption {  if m.IsDefined() { return UintptrArrOpt(f(*m.value)) } else { return NoneUintptrArrOption }  }
/* Int8Option: int8->[]byte */ func MapByteArrToInt8Option(m Int8Option, f func(int8) []byte) ByteArrOption {  if m.IsDefined() { return ByteArrOpt(f(*m.value)) } else { return NoneByteArrOption }  }
/* Int8Option: int8->[]rune */ func MapRuneArrToInt8Option(m Int8Option, f func(int8) []rune) RuneArrOption {  if m.IsDefined() { return RuneArrOpt(f(*m.value)) } else { return NoneRuneArrOption }  }
/* Int8Option: int8->[]float32 */ func MapFloat32ArrToInt8Option(m Int8Option, f func(int8) []float32) Float32ArrOption {  if m.IsDefined() { return Float32ArrOpt(f(*m.value)) } else { return NoneFloat32ArrOption }  }
/* Int8Option: int8->[]float64 */ func MapFloat64ArrToInt8Option(m Int8Option, f func(int8) []float64) Float64ArrOption {  if m.IsDefined() { return Float64ArrOpt(f(*m.value)) } else { return NoneFloat64ArrOption }  }
/* Int8Option: int8->[]complex64 */ func MapComplex64ArrToInt8Option(m Int8Option, f func(int8) []complex64) Complex64ArrOption {  if m.IsDefined() { return Complex64ArrOpt(f(*m.value)) } else { return NoneComplex64ArrOption }  }
/* Int8Option: int8->[]complex128 */ func MapComplex128ArrToInt8Option(m Int8Option, f func(int8) []complex128) Complex128ArrOption {  if m.IsDefined() { return Complex128ArrOpt(f(*m.value)) } else { return NoneComplex128ArrOption }  }
/* Int8Option: int8->[]Any */ func MapAnyArrToInt8Option(m Int8Option, f func(int8) []Any) AnyArrOption {  if m.IsDefined() { return AnyArrOpt(f(*m.value)) } else { return NoneAnyArrOption }  }
/* Int8Option: int8->BoolList */ func MapBoolListToInt8Option(m Int8Option, f func(int8) BoolList) BoolListOption {  if m.IsDefined() { return BoolListOpt(f(*m.value)) } else { return NoneBoolListOption }  }
/* Int8Option: int8->StringList */ func MapStringListToInt8Option(m Int8Option, f func(int8) StringList) StringListOption {  if m.IsDefined() { return StringListOpt(f(*m.value)) } else { return NoneStringListOption }  }
/* Int8Option: int8->IntList */ func MapIntListToInt8Option(m Int8Option, f func(int8) IntList) IntListOption {  if m.IsDefined() { return IntListOpt(f(*m.value)) } else { return NoneIntListOption }  }
/* Int8Option: int8->Int8List */ func MapInt8ListToInt8Option(m Int8Option, f func(int8) Int8List) Int8ListOption {  if m.IsDefined() { return Int8ListOpt(f(*m.value)) } else { return NoneInt8ListOption }  }
/* Int8Option: int8->Int16List */ func MapInt16ListToInt8Option(m Int8Option, f func(int8) Int16List) Int16ListOption {  if m.IsDefined() { return Int16ListOpt(f(*m.value)) } else { return NoneInt16ListOption }  }
/* Int8Option: int8->Int32List */ func MapInt32ListToInt8Option(m Int8Option, f func(int8) Int32List) Int32ListOption {  if m.IsDefined() { return Int32ListOpt(f(*m.value)) } else { return NoneInt32ListOption }  }
/* Int8Option: int8->Int64List */ func MapInt64ListToInt8Option(m Int8Option, f func(int8) Int64List) Int64ListOption {  if m.IsDefined() { return Int64ListOpt(f(*m.value)) } else { return NoneInt64ListOption }  }
/* Int8Option: int8->UintList */ func MapUintListToInt8Option(m Int8Option, f func(int8) UintList) UintListOption {  if m.IsDefined() { return UintListOpt(f(*m.value)) } else { return NoneUintListOption }  }
/* Int8Option: int8->Uint8List */ func MapUint8ListToInt8Option(m Int8Option, f func(int8) Uint8List) Uint8ListOption {  if m.IsDefined() { return Uint8ListOpt(f(*m.value)) } else { return NoneUint8ListOption }  }
/* Int8Option: int8->Uint16List */ func MapUint16ListToInt8Option(m Int8Option, f func(int8) Uint16List) Uint16ListOption {  if m.IsDefined() { return Uint16ListOpt(f(*m.value)) } else { return NoneUint16ListOption }  }
/* Int8Option: int8->Uint32List */ func MapUint32ListToInt8Option(m Int8Option, f func(int8) Uint32List) Uint32ListOption {  if m.IsDefined() { return Uint32ListOpt(f(*m.value)) } else { return NoneUint32ListOption }  }
/* Int8Option: int8->Uint64List */ func MapUint64ListToInt8Option(m Int8Option, f func(int8) Uint64List) Uint64ListOption {  if m.IsDefined() { return Uint64ListOpt(f(*m.value)) } else { return NoneUint64ListOption }  }
/* Int8Option: int8->UintptrList */ func MapUintptrListToInt8Option(m Int8Option, f func(int8) UintptrList) UintptrListOption {  if m.IsDefined() { return UintptrListOpt(f(*m.value)) } else { return NoneUintptrListOption }  }
/* Int8Option: int8->ByteList */ func MapByteListToInt8Option(m Int8Option, f func(int8) ByteList) ByteListOption {  if m.IsDefined() { return ByteListOpt(f(*m.value)) } else { return NoneByteListOption }  }
/* Int8Option: int8->RuneList */ func MapRuneListToInt8Option(m Int8Option, f func(int8) RuneList) RuneListOption {  if m.IsDefined() { return RuneListOpt(f(*m.value)) } else { return NoneRuneListOption }  }
/* Int8Option: int8->Float32List */ func MapFloat32ListToInt8Option(m Int8Option, f func(int8) Float32List) Float32ListOption {  if m.IsDefined() { return Float32ListOpt(f(*m.value)) } else { return NoneFloat32ListOption }  }
/* Int8Option: int8->Float64List */ func MapFloat64ListToInt8Option(m Int8Option, f func(int8) Float64List) Float64ListOption {  if m.IsDefined() { return Float64ListOpt(f(*m.value)) } else { return NoneFloat64ListOption }  }
/* Int8Option: int8->Complex64List */ func MapComplex64ListToInt8Option(m Int8Option, f func(int8) Complex64List) Complex64ListOption {  if m.IsDefined() { return Complex64ListOpt(f(*m.value)) } else { return NoneComplex64ListOption }  }
/* Int8Option: int8->Complex128List */ func MapComplex128ListToInt8Option(m Int8Option, f func(int8) Complex128List) Complex128ListOption {  if m.IsDefined() { return Complex128ListOpt(f(*m.value)) } else { return NoneComplex128ListOption }  }
/* Int8Option: int8->AnyList */ func MapAnyListToInt8Option(m Int8Option, f func(int8) AnyList) AnyListOption {  if m.IsDefined() { return AnyListOpt(f(*m.value)) } else { return NoneAnyListOption }  }
/* Int16Option: int16->bool */ func MapBoolToInt16Option(m Int16Option, f func(int16) bool) BoolOption {  if m.IsDefined() { return Bool(f(*m.value)) } else { return NoneBoolOption }  }
/* Int16Option: int16->string */ func MapStringToInt16Option(m Int16Option, f func(int16) string) StringOption {  if m.IsDefined() { return String(f(*m.value)) } else { return NoneStringOption }  }
/* Int16Option: int16->int */ func MapIntToInt16Option(m Int16Option, f func(int16) int) IntOption {  if m.IsDefined() { return Int(f(*m.value)) } else { return NoneIntOption }  }
/* Int16Option: int16->int8 */ func MapInt8ToInt16Option(m Int16Option, f func(int16) int8) Int8Option {  if m.IsDefined() { return Int8(f(*m.value)) } else { return NoneInt8Option }  }
/* Int16Option: int16->int16 */ func MapInt16ToInt16Option(m Int16Option, f func(int16) int16) Int16Option {  if m.IsDefined() { return Int16(f(*m.value)) } else { return NoneInt16Option }  }
/* Int16Option: int16->int32 */ func MapInt32ToInt16Option(m Int16Option, f func(int16) int32) Int32Option {  if m.IsDefined() { return Int32(f(*m.value)) } else { return NoneInt32Option }  }
/* Int16Option: int16->int64 */ func MapInt64ToInt16Option(m Int16Option, f func(int16) int64) Int64Option {  if m.IsDefined() { return Int64(f(*m.value)) } else { return NoneInt64Option }  }
/* Int16Option: int16->uint */ func MapUintToInt16Option(m Int16Option, f func(int16) uint) UintOption {  if m.IsDefined() { return Uint(f(*m.value)) } else { return NoneUintOption }  }
/* Int16Option: int16->uint8 */ func MapUint8ToInt16Option(m Int16Option, f func(int16) uint8) Uint8Option {  if m.IsDefined() { return Uint8(f(*m.value)) } else { return NoneUint8Option }  }
/* Int16Option: int16->uint16 */ func MapUint16ToInt16Option(m Int16Option, f func(int16) uint16) Uint16Option {  if m.IsDefined() { return Uint16(f(*m.value)) } else { return NoneUint16Option }  }
/* Int16Option: int16->uint32 */ func MapUint32ToInt16Option(m Int16Option, f func(int16) uint32) Uint32Option {  if m.IsDefined() { return Uint32(f(*m.value)) } else { return NoneUint32Option }  }
/* Int16Option: int16->uint64 */ func MapUint64ToInt16Option(m Int16Option, f func(int16) uint64) Uint64Option {  if m.IsDefined() { return Uint64(f(*m.value)) } else { return NoneUint64Option }  }
/* Int16Option: int16->uintptr */ func MapUintptrToInt16Option(m Int16Option, f func(int16) uintptr) UintptrOption {  if m.IsDefined() { return Uintptr(f(*m.value)) } else { return NoneUintptrOption }  }
/* Int16Option: int16->byte */ func MapByteToInt16Option(m Int16Option, f func(int16) byte) ByteOption {  if m.IsDefined() { return Byte(f(*m.value)) } else { return NoneByteOption }  }
/* Int16Option: int16->rune */ func MapRuneToInt16Option(m Int16Option, f func(int16) rune) RuneOption {  if m.IsDefined() { return Rune(f(*m.value)) } else { return NoneRuneOption }  }
/* Int16Option: int16->float32 */ func MapFloat32ToInt16Option(m Int16Option, f func(int16) float32) Float32Option {  if m.IsDefined() { return Float32(f(*m.value)) } else { return NoneFloat32Option }  }
/* Int16Option: int16->float64 */ func MapFloat64ToInt16Option(m Int16Option, f func(int16) float64) Float64Option {  if m.IsDefined() { return Float64(f(*m.value)) } else { return NoneFloat64Option }  }
/* Int16Option: int16->complex64 */ func MapComplex64ToInt16Option(m Int16Option, f func(int16) complex64) Complex64Option {  if m.IsDefined() { return Complex64(f(*m.value)) } else { return NoneComplex64Option }  }
/* Int16Option: int16->complex128 */ func MapComplex128ToInt16Option(m Int16Option, f func(int16) complex128) Complex128Option {  if m.IsDefined() { return Complex128(f(*m.value)) } else { return NoneComplex128Option }  }
/* Int16Option: int16->Any */ func MapAnyToInt16Option(m Int16Option, f func(int16) Any) AnyOption {  if m.IsDefined() { return AnyOpt(f(*m.value)) } else { return NoneAnyOption }  }
/* Int16Option: int16->BoolOption */ func MapBoolOptionToInt16Option(m Int16Option, f func(int16) BoolOption) BoolOptionOption {  if m.IsDefined() { return BoolBool(f(*m.value)) } else { return NoneBoolOptionOption }  }
/* Int16Option: int16->StringOption */ func MapStringOptionToInt16Option(m Int16Option, f func(int16) StringOption) StringOptionOption {  if m.IsDefined() { return StringString(f(*m.value)) } else { return NoneStringOptionOption }  }
/* Int16Option: int16->IntOption */ func MapIntOptionToInt16Option(m Int16Option, f func(int16) IntOption) IntOptionOption {  if m.IsDefined() { return IntInt(f(*m.value)) } else { return NoneIntOptionOption }  }
/* Int16Option: int16->Int8Option */ func MapInt8OptionToInt16Option(m Int16Option, f func(int16) Int8Option) Int8OptionOption {  if m.IsDefined() { return Int8Int8(f(*m.value)) } else { return NoneInt8OptionOption }  }
/* Int16Option: int16->Int16Option */ func MapInt16OptionToInt16Option(m Int16Option, f func(int16) Int16Option) Int16OptionOption {  if m.IsDefined() { return Int16Int16(f(*m.value)) } else { return NoneInt16OptionOption }  }
/* Int16Option: int16->Int32Option */ func MapInt32OptionToInt16Option(m Int16Option, f func(int16) Int32Option) Int32OptionOption {  if m.IsDefined() { return Int32Int32(f(*m.value)) } else { return NoneInt32OptionOption }  }
/* Int16Option: int16->Int64Option */ func MapInt64OptionToInt16Option(m Int16Option, f func(int16) Int64Option) Int64OptionOption {  if m.IsDefined() { return Int64Int64(f(*m.value)) } else { return NoneInt64OptionOption }  }
/* Int16Option: int16->UintOption */ func MapUintOptionToInt16Option(m Int16Option, f func(int16) UintOption) UintOptionOption {  if m.IsDefined() { return UintUint(f(*m.value)) } else { return NoneUintOptionOption }  }
/* Int16Option: int16->Uint8Option */ func MapUint8OptionToInt16Option(m Int16Option, f func(int16) Uint8Option) Uint8OptionOption {  if m.IsDefined() { return Uint8Uint8(f(*m.value)) } else { return NoneUint8OptionOption }  }
/* Int16Option: int16->Uint16Option */ func MapUint16OptionToInt16Option(m Int16Option, f func(int16) Uint16Option) Uint16OptionOption {  if m.IsDefined() { return Uint16Uint16(f(*m.value)) } else { return NoneUint16OptionOption }  }
/* Int16Option: int16->Uint32Option */ func MapUint32OptionToInt16Option(m Int16Option, f func(int16) Uint32Option) Uint32OptionOption {  if m.IsDefined() { return Uint32Uint32(f(*m.value)) } else { return NoneUint32OptionOption }  }
/* Int16Option: int16->Uint64Option */ func MapUint64OptionToInt16Option(m Int16Option, f func(int16) Uint64Option) Uint64OptionOption {  if m.IsDefined() { return Uint64Uint64(f(*m.value)) } else { return NoneUint64OptionOption }  }
/* Int16Option: int16->UintptrOption */ func MapUintptrOptionToInt16Option(m Int16Option, f func(int16) UintptrOption) UintptrOptionOption {  if m.IsDefined() { return UintptrUintptr(f(*m.value)) } else { return NoneUintptrOptionOption }  }
/* Int16Option: int16->ByteOption */ func MapByteOptionToInt16Option(m Int16Option, f func(int16) ByteOption) ByteOptionOption {  if m.IsDefined() { return ByteByte(f(*m.value)) } else { return NoneByteOptionOption }  }
/* Int16Option: int16->RuneOption */ func MapRuneOptionToInt16Option(m Int16Option, f func(int16) RuneOption) RuneOptionOption {  if m.IsDefined() { return RuneRune(f(*m.value)) } else { return NoneRuneOptionOption }  }
/* Int16Option: int16->Float32Option */ func MapFloat32OptionToInt16Option(m Int16Option, f func(int16) Float32Option) Float32OptionOption {  if m.IsDefined() { return Float32Float32(f(*m.value)) } else { return NoneFloat32OptionOption }  }
/* Int16Option: int16->Float64Option */ func MapFloat64OptionToInt16Option(m Int16Option, f func(int16) Float64Option) Float64OptionOption {  if m.IsDefined() { return Float64Float64(f(*m.value)) } else { return NoneFloat64OptionOption }  }
/* Int16Option: int16->Complex64Option */ func MapComplex64OptionToInt16Option(m Int16Option, f func(int16) Complex64Option) Complex64OptionOption {  if m.IsDefined() { return Complex64Complex64(f(*m.value)) } else { return NoneComplex64OptionOption }  }
/* Int16Option: int16->Complex128Option */ func MapComplex128OptionToInt16Option(m Int16Option, f func(int16) Complex128Option) Complex128OptionOption {  if m.IsDefined() { return Complex128Complex128(f(*m.value)) } else { return NoneComplex128OptionOption }  }
/* Int16Option: int16->AnyOption */ func MapAnyOptionToInt16Option(m Int16Option, f func(int16) AnyOption) AnyOptionOption {  if m.IsDefined() { return AnyOptAny(f(*m.value)) } else { return NoneAnyOptionOption }  }
/* Int16Option: int16->[]bool */ func MapBoolArrToInt16Option(m Int16Option, f func(int16) []bool) BoolArrOption {  if m.IsDefined() { return BoolArrOpt(f(*m.value)) } else { return NoneBoolArrOption }  }
/* Int16Option: int16->[]string */ func MapStringArrToInt16Option(m Int16Option, f func(int16) []string) StringArrOption {  if m.IsDefined() { return StringArrOpt(f(*m.value)) } else { return NoneStringArrOption }  }
/* Int16Option: int16->[]int */ func MapIntArrToInt16Option(m Int16Option, f func(int16) []int) IntArrOption {  if m.IsDefined() { return IntArrOpt(f(*m.value)) } else { return NoneIntArrOption }  }
/* Int16Option: int16->[]int8 */ func MapInt8ArrToInt16Option(m Int16Option, f func(int16) []int8) Int8ArrOption {  if m.IsDefined() { return Int8ArrOpt(f(*m.value)) } else { return NoneInt8ArrOption }  }
/* Int16Option: int16->[]int16 */ func MapInt16ArrToInt16Option(m Int16Option, f func(int16) []int16) Int16ArrOption {  if m.IsDefined() { return Int16ArrOpt(f(*m.value)) } else { return NoneInt16ArrOption }  }
/* Int16Option: int16->[]int32 */ func MapInt32ArrToInt16Option(m Int16Option, f func(int16) []int32) Int32ArrOption {  if m.IsDefined() { return Int32ArrOpt(f(*m.value)) } else { return NoneInt32ArrOption }  }
/* Int16Option: int16->[]int64 */ func MapInt64ArrToInt16Option(m Int16Option, f func(int16) []int64) Int64ArrOption {  if m.IsDefined() { return Int64ArrOpt(f(*m.value)) } else { return NoneInt64ArrOption }  }
/* Int16Option: int16->[]uint */ func MapUintArrToInt16Option(m Int16Option, f func(int16) []uint) UintArrOption {  if m.IsDefined() { return UintArrOpt(f(*m.value)) } else { return NoneUintArrOption }  }
/* Int16Option: int16->[]uint8 */ func MapUint8ArrToInt16Option(m Int16Option, f func(int16) []uint8) Uint8ArrOption {  if m.IsDefined() { return Uint8ArrOpt(f(*m.value)) } else { return NoneUint8ArrOption }  }
/* Int16Option: int16->[]uint16 */ func MapUint16ArrToInt16Option(m Int16Option, f func(int16) []uint16) Uint16ArrOption {  if m.IsDefined() { return Uint16ArrOpt(f(*m.value)) } else { return NoneUint16ArrOption }  }
/* Int16Option: int16->[]uint32 */ func MapUint32ArrToInt16Option(m Int16Option, f func(int16) []uint32) Uint32ArrOption {  if m.IsDefined() { return Uint32ArrOpt(f(*m.value)) } else { return NoneUint32ArrOption }  }
/* Int16Option: int16->[]uint64 */ func MapUint64ArrToInt16Option(m Int16Option, f func(int16) []uint64) Uint64ArrOption {  if m.IsDefined() { return Uint64ArrOpt(f(*m.value)) } else { return NoneUint64ArrOption }  }
/* Int16Option: int16->[]uintptr */ func MapUintptrArrToInt16Option(m Int16Option, f func(int16) []uintptr) UintptrArrOption {  if m.IsDefined() { return UintptrArrOpt(f(*m.value)) } else { return NoneUintptrArrOption }  }
/* Int16Option: int16->[]byte */ func MapByteArrToInt16Option(m Int16Option, f func(int16) []byte) ByteArrOption {  if m.IsDefined() { return ByteArrOpt(f(*m.value)) } else { return NoneByteArrOption }  }
/* Int16Option: int16->[]rune */ func MapRuneArrToInt16Option(m Int16Option, f func(int16) []rune) RuneArrOption {  if m.IsDefined() { return RuneArrOpt(f(*m.value)) } else { return NoneRuneArrOption }  }
/* Int16Option: int16->[]float32 */ func MapFloat32ArrToInt16Option(m Int16Option, f func(int16) []float32) Float32ArrOption {  if m.IsDefined() { return Float32ArrOpt(f(*m.value)) } else { return NoneFloat32ArrOption }  }
/* Int16Option: int16->[]float64 */ func MapFloat64ArrToInt16Option(m Int16Option, f func(int16) []float64) Float64ArrOption {  if m.IsDefined() { return Float64ArrOpt(f(*m.value)) } else { return NoneFloat64ArrOption }  }
/* Int16Option: int16->[]complex64 */ func MapComplex64ArrToInt16Option(m Int16Option, f func(int16) []complex64) Complex64ArrOption {  if m.IsDefined() { return Complex64ArrOpt(f(*m.value)) } else { return NoneComplex64ArrOption }  }
/* Int16Option: int16->[]complex128 */ func MapComplex128ArrToInt16Option(m Int16Option, f func(int16) []complex128) Complex128ArrOption {  if m.IsDefined() { return Complex128ArrOpt(f(*m.value)) } else { return NoneComplex128ArrOption }  }
/* Int16Option: int16->[]Any */ func MapAnyArrToInt16Option(m Int16Option, f func(int16) []Any) AnyArrOption {  if m.IsDefined() { return AnyArrOpt(f(*m.value)) } else { return NoneAnyArrOption }  }
/* Int16Option: int16->BoolList */ func MapBoolListToInt16Option(m Int16Option, f func(int16) BoolList) BoolListOption {  if m.IsDefined() { return BoolListOpt(f(*m.value)) } else { return NoneBoolListOption }  }
/* Int16Option: int16->StringList */ func MapStringListToInt16Option(m Int16Option, f func(int16) StringList) StringListOption {  if m.IsDefined() { return StringListOpt(f(*m.value)) } else { return NoneStringListOption }  }
/* Int16Option: int16->IntList */ func MapIntListToInt16Option(m Int16Option, f func(int16) IntList) IntListOption {  if m.IsDefined() { return IntListOpt(f(*m.value)) } else { return NoneIntListOption }  }
/* Int16Option: int16->Int8List */ func MapInt8ListToInt16Option(m Int16Option, f func(int16) Int8List) Int8ListOption {  if m.IsDefined() { return Int8ListOpt(f(*m.value)) } else { return NoneInt8ListOption }  }
/* Int16Option: int16->Int16List */ func MapInt16ListToInt16Option(m Int16Option, f func(int16) Int16List) Int16ListOption {  if m.IsDefined() { return Int16ListOpt(f(*m.value)) } else { return NoneInt16ListOption }  }
/* Int16Option: int16->Int32List */ func MapInt32ListToInt16Option(m Int16Option, f func(int16) Int32List) Int32ListOption {  if m.IsDefined() { return Int32ListOpt(f(*m.value)) } else { return NoneInt32ListOption }  }
/* Int16Option: int16->Int64List */ func MapInt64ListToInt16Option(m Int16Option, f func(int16) Int64List) Int64ListOption {  if m.IsDefined() { return Int64ListOpt(f(*m.value)) } else { return NoneInt64ListOption }  }
/* Int16Option: int16->UintList */ func MapUintListToInt16Option(m Int16Option, f func(int16) UintList) UintListOption {  if m.IsDefined() { return UintListOpt(f(*m.value)) } else { return NoneUintListOption }  }
/* Int16Option: int16->Uint8List */ func MapUint8ListToInt16Option(m Int16Option, f func(int16) Uint8List) Uint8ListOption {  if m.IsDefined() { return Uint8ListOpt(f(*m.value)) } else { return NoneUint8ListOption }  }
/* Int16Option: int16->Uint16List */ func MapUint16ListToInt16Option(m Int16Option, f func(int16) Uint16List) Uint16ListOption {  if m.IsDefined() { return Uint16ListOpt(f(*m.value)) } else { return NoneUint16ListOption }  }
/* Int16Option: int16->Uint32List */ func MapUint32ListToInt16Option(m Int16Option, f func(int16) Uint32List) Uint32ListOption {  if m.IsDefined() { return Uint32ListOpt(f(*m.value)) } else { return NoneUint32ListOption }  }
/* Int16Option: int16->Uint64List */ func MapUint64ListToInt16Option(m Int16Option, f func(int16) Uint64List) Uint64ListOption {  if m.IsDefined() { return Uint64ListOpt(f(*m.value)) } else { return NoneUint64ListOption }  }
/* Int16Option: int16->UintptrList */ func MapUintptrListToInt16Option(m Int16Option, f func(int16) UintptrList) UintptrListOption {  if m.IsDefined() { return UintptrListOpt(f(*m.value)) } else { return NoneUintptrListOption }  }
/* Int16Option: int16->ByteList */ func MapByteListToInt16Option(m Int16Option, f func(int16) ByteList) ByteListOption {  if m.IsDefined() { return ByteListOpt(f(*m.value)) } else { return NoneByteListOption }  }
/* Int16Option: int16->RuneList */ func MapRuneListToInt16Option(m Int16Option, f func(int16) RuneList) RuneListOption {  if m.IsDefined() { return RuneListOpt(f(*m.value)) } else { return NoneRuneListOption }  }
/* Int16Option: int16->Float32List */ func MapFloat32ListToInt16Option(m Int16Option, f func(int16) Float32List) Float32ListOption {  if m.IsDefined() { return Float32ListOpt(f(*m.value)) } else { return NoneFloat32ListOption }  }
/* Int16Option: int16->Float64List */ func MapFloat64ListToInt16Option(m Int16Option, f func(int16) Float64List) Float64ListOption {  if m.IsDefined() { return Float64ListOpt(f(*m.value)) } else { return NoneFloat64ListOption }  }
/* Int16Option: int16->Complex64List */ func MapComplex64ListToInt16Option(m Int16Option, f func(int16) Complex64List) Complex64ListOption {  if m.IsDefined() { return Complex64ListOpt(f(*m.value)) } else { return NoneComplex64ListOption }  }
/* Int16Option: int16->Complex128List */ func MapComplex128ListToInt16Option(m Int16Option, f func(int16) Complex128List) Complex128ListOption {  if m.IsDefined() { return Complex128ListOpt(f(*m.value)) } else { return NoneComplex128ListOption }  }
/* Int16Option: int16->AnyList */ func MapAnyListToInt16Option(m Int16Option, f func(int16) AnyList) AnyListOption {  if m.IsDefined() { return AnyListOpt(f(*m.value)) } else { return NoneAnyListOption }  }
/* Int32Option: int32->bool */ func MapBoolToInt32Option(m Int32Option, f func(int32) bool) BoolOption {  if m.IsDefined() { return Bool(f(*m.value)) } else { return NoneBoolOption }  }
/* Int32Option: int32->string */ func MapStringToInt32Option(m Int32Option, f func(int32) string) StringOption {  if m.IsDefined() { return String(f(*m.value)) } else { return NoneStringOption }  }
/* Int32Option: int32->int */ func MapIntToInt32Option(m Int32Option, f func(int32) int) IntOption {  if m.IsDefined() { return Int(f(*m.value)) } else { return NoneIntOption }  }
/* Int32Option: int32->int8 */ func MapInt8ToInt32Option(m Int32Option, f func(int32) int8) Int8Option {  if m.IsDefined() { return Int8(f(*m.value)) } else { return NoneInt8Option }  }
/* Int32Option: int32->int16 */ func MapInt16ToInt32Option(m Int32Option, f func(int32) int16) Int16Option {  if m.IsDefined() { return Int16(f(*m.value)) } else { return NoneInt16Option }  }
/* Int32Option: int32->int32 */ func MapInt32ToInt32Option(m Int32Option, f func(int32) int32) Int32Option {  if m.IsDefined() { return Int32(f(*m.value)) } else { return NoneInt32Option }  }
/* Int32Option: int32->int64 */ func MapInt64ToInt32Option(m Int32Option, f func(int32) int64) Int64Option {  if m.IsDefined() { return Int64(f(*m.value)) } else { return NoneInt64Option }  }
/* Int32Option: int32->uint */ func MapUintToInt32Option(m Int32Option, f func(int32) uint) UintOption {  if m.IsDefined() { return Uint(f(*m.value)) } else { return NoneUintOption }  }
/* Int32Option: int32->uint8 */ func MapUint8ToInt32Option(m Int32Option, f func(int32) uint8) Uint8Option {  if m.IsDefined() { return Uint8(f(*m.value)) } else { return NoneUint8Option }  }
/* Int32Option: int32->uint16 */ func MapUint16ToInt32Option(m Int32Option, f func(int32) uint16) Uint16Option {  if m.IsDefined() { return Uint16(f(*m.value)) } else { return NoneUint16Option }  }
/* Int32Option: int32->uint32 */ func MapUint32ToInt32Option(m Int32Option, f func(int32) uint32) Uint32Option {  if m.IsDefined() { return Uint32(f(*m.value)) } else { return NoneUint32Option }  }
/* Int32Option: int32->uint64 */ func MapUint64ToInt32Option(m Int32Option, f func(int32) uint64) Uint64Option {  if m.IsDefined() { return Uint64(f(*m.value)) } else { return NoneUint64Option }  }
/* Int32Option: int32->uintptr */ func MapUintptrToInt32Option(m Int32Option, f func(int32) uintptr) UintptrOption {  if m.IsDefined() { return Uintptr(f(*m.value)) } else { return NoneUintptrOption }  }
/* Int32Option: int32->byte */ func MapByteToInt32Option(m Int32Option, f func(int32) byte) ByteOption {  if m.IsDefined() { return Byte(f(*m.value)) } else { return NoneByteOption }  }
/* Int32Option: int32->rune */ func MapRuneToInt32Option(m Int32Option, f func(int32) rune) RuneOption {  if m.IsDefined() { return Rune(f(*m.value)) } else { return NoneRuneOption }  }
/* Int32Option: int32->float32 */ func MapFloat32ToInt32Option(m Int32Option, f func(int32) float32) Float32Option {  if m.IsDefined() { return Float32(f(*m.value)) } else { return NoneFloat32Option }  }
/* Int32Option: int32->float64 */ func MapFloat64ToInt32Option(m Int32Option, f func(int32) float64) Float64Option {  if m.IsDefined() { return Float64(f(*m.value)) } else { return NoneFloat64Option }  }
/* Int32Option: int32->complex64 */ func MapComplex64ToInt32Option(m Int32Option, f func(int32) complex64) Complex64Option {  if m.IsDefined() { return Complex64(f(*m.value)) } else { return NoneComplex64Option }  }
/* Int32Option: int32->complex128 */ func MapComplex128ToInt32Option(m Int32Option, f func(int32) complex128) Complex128Option {  if m.IsDefined() { return Complex128(f(*m.value)) } else { return NoneComplex128Option }  }
/* Int32Option: int32->Any */ func MapAnyToInt32Option(m Int32Option, f func(int32) Any) AnyOption {  if m.IsDefined() { return AnyOpt(f(*m.value)) } else { return NoneAnyOption }  }
/* Int32Option: int32->BoolOption */ func MapBoolOptionToInt32Option(m Int32Option, f func(int32) BoolOption) BoolOptionOption {  if m.IsDefined() { return BoolBool(f(*m.value)) } else { return NoneBoolOptionOption }  }
/* Int32Option: int32->StringOption */ func MapStringOptionToInt32Option(m Int32Option, f func(int32) StringOption) StringOptionOption {  if m.IsDefined() { return StringString(f(*m.value)) } else { return NoneStringOptionOption }  }
/* Int32Option: int32->IntOption */ func MapIntOptionToInt32Option(m Int32Option, f func(int32) IntOption) IntOptionOption {  if m.IsDefined() { return IntInt(f(*m.value)) } else { return NoneIntOptionOption }  }
/* Int32Option: int32->Int8Option */ func MapInt8OptionToInt32Option(m Int32Option, f func(int32) Int8Option) Int8OptionOption {  if m.IsDefined() { return Int8Int8(f(*m.value)) } else { return NoneInt8OptionOption }  }
/* Int32Option: int32->Int16Option */ func MapInt16OptionToInt32Option(m Int32Option, f func(int32) Int16Option) Int16OptionOption {  if m.IsDefined() { return Int16Int16(f(*m.value)) } else { return NoneInt16OptionOption }  }
/* Int32Option: int32->Int32Option */ func MapInt32OptionToInt32Option(m Int32Option, f func(int32) Int32Option) Int32OptionOption {  if m.IsDefined() { return Int32Int32(f(*m.value)) } else { return NoneInt32OptionOption }  }
/* Int32Option: int32->Int64Option */ func MapInt64OptionToInt32Option(m Int32Option, f func(int32) Int64Option) Int64OptionOption {  if m.IsDefined() { return Int64Int64(f(*m.value)) } else { return NoneInt64OptionOption }  }
/* Int32Option: int32->UintOption */ func MapUintOptionToInt32Option(m Int32Option, f func(int32) UintOption) UintOptionOption {  if m.IsDefined() { return UintUint(f(*m.value)) } else { return NoneUintOptionOption }  }
/* Int32Option: int32->Uint8Option */ func MapUint8OptionToInt32Option(m Int32Option, f func(int32) Uint8Option) Uint8OptionOption {  if m.IsDefined() { return Uint8Uint8(f(*m.value)) } else { return NoneUint8OptionOption }  }
/* Int32Option: int32->Uint16Option */ func MapUint16OptionToInt32Option(m Int32Option, f func(int32) Uint16Option) Uint16OptionOption {  if m.IsDefined() { return Uint16Uint16(f(*m.value)) } else { return NoneUint16OptionOption }  }
/* Int32Option: int32->Uint32Option */ func MapUint32OptionToInt32Option(m Int32Option, f func(int32) Uint32Option) Uint32OptionOption {  if m.IsDefined() { return Uint32Uint32(f(*m.value)) } else { return NoneUint32OptionOption }  }
/* Int32Option: int32->Uint64Option */ func MapUint64OptionToInt32Option(m Int32Option, f func(int32) Uint64Option) Uint64OptionOption {  if m.IsDefined() { return Uint64Uint64(f(*m.value)) } else { return NoneUint64OptionOption }  }
/* Int32Option: int32->UintptrOption */ func MapUintptrOptionToInt32Option(m Int32Option, f func(int32) UintptrOption) UintptrOptionOption {  if m.IsDefined() { return UintptrUintptr(f(*m.value)) } else { return NoneUintptrOptionOption }  }
/* Int32Option: int32->ByteOption */ func MapByteOptionToInt32Option(m Int32Option, f func(int32) ByteOption) ByteOptionOption {  if m.IsDefined() { return ByteByte(f(*m.value)) } else { return NoneByteOptionOption }  }
/* Int32Option: int32->RuneOption */ func MapRuneOptionToInt32Option(m Int32Option, f func(int32) RuneOption) RuneOptionOption {  if m.IsDefined() { return RuneRune(f(*m.value)) } else { return NoneRuneOptionOption }  }
/* Int32Option: int32->Float32Option */ func MapFloat32OptionToInt32Option(m Int32Option, f func(int32) Float32Option) Float32OptionOption {  if m.IsDefined() { return Float32Float32(f(*m.value)) } else { return NoneFloat32OptionOption }  }
/* Int32Option: int32->Float64Option */ func MapFloat64OptionToInt32Option(m Int32Option, f func(int32) Float64Option) Float64OptionOption {  if m.IsDefined() { return Float64Float64(f(*m.value)) } else { return NoneFloat64OptionOption }  }
/* Int32Option: int32->Complex64Option */ func MapComplex64OptionToInt32Option(m Int32Option, f func(int32) Complex64Option) Complex64OptionOption {  if m.IsDefined() { return Complex64Complex64(f(*m.value)) } else { return NoneComplex64OptionOption }  }
/* Int32Option: int32->Complex128Option */ func MapComplex128OptionToInt32Option(m Int32Option, f func(int32) Complex128Option) Complex128OptionOption {  if m.IsDefined() { return Complex128Complex128(f(*m.value)) } else { return NoneComplex128OptionOption }  }
/* Int32Option: int32->AnyOption */ func MapAnyOptionToInt32Option(m Int32Option, f func(int32) AnyOption) AnyOptionOption {  if m.IsDefined() { return AnyOptAny(f(*m.value)) } else { return NoneAnyOptionOption }  }
/* Int32Option: int32->[]bool */ func MapBoolArrToInt32Option(m Int32Option, f func(int32) []bool) BoolArrOption {  if m.IsDefined() { return BoolArrOpt(f(*m.value)) } else { return NoneBoolArrOption }  }
/* Int32Option: int32->[]string */ func MapStringArrToInt32Option(m Int32Option, f func(int32) []string) StringArrOption {  if m.IsDefined() { return StringArrOpt(f(*m.value)) } else { return NoneStringArrOption }  }
/* Int32Option: int32->[]int */ func MapIntArrToInt32Option(m Int32Option, f func(int32) []int) IntArrOption {  if m.IsDefined() { return IntArrOpt(f(*m.value)) } else { return NoneIntArrOption }  }
/* Int32Option: int32->[]int8 */ func MapInt8ArrToInt32Option(m Int32Option, f func(int32) []int8) Int8ArrOption {  if m.IsDefined() { return Int8ArrOpt(f(*m.value)) } else { return NoneInt8ArrOption }  }
/* Int32Option: int32->[]int16 */ func MapInt16ArrToInt32Option(m Int32Option, f func(int32) []int16) Int16ArrOption {  if m.IsDefined() { return Int16ArrOpt(f(*m.value)) } else { return NoneInt16ArrOption }  }
/* Int32Option: int32->[]int32 */ func MapInt32ArrToInt32Option(m Int32Option, f func(int32) []int32) Int32ArrOption {  if m.IsDefined() { return Int32ArrOpt(f(*m.value)) } else { return NoneInt32ArrOption }  }
/* Int32Option: int32->[]int64 */ func MapInt64ArrToInt32Option(m Int32Option, f func(int32) []int64) Int64ArrOption {  if m.IsDefined() { return Int64ArrOpt(f(*m.value)) } else { return NoneInt64ArrOption }  }
/* Int32Option: int32->[]uint */ func MapUintArrToInt32Option(m Int32Option, f func(int32) []uint) UintArrOption {  if m.IsDefined() { return UintArrOpt(f(*m.value)) } else { return NoneUintArrOption }  }
/* Int32Option: int32->[]uint8 */ func MapUint8ArrToInt32Option(m Int32Option, f func(int32) []uint8) Uint8ArrOption {  if m.IsDefined() { return Uint8ArrOpt(f(*m.value)) } else { return NoneUint8ArrOption }  }
/* Int32Option: int32->[]uint16 */ func MapUint16ArrToInt32Option(m Int32Option, f func(int32) []uint16) Uint16ArrOption {  if m.IsDefined() { return Uint16ArrOpt(f(*m.value)) } else { return NoneUint16ArrOption }  }
/* Int32Option: int32->[]uint32 */ func MapUint32ArrToInt32Option(m Int32Option, f func(int32) []uint32) Uint32ArrOption {  if m.IsDefined() { return Uint32ArrOpt(f(*m.value)) } else { return NoneUint32ArrOption }  }
/* Int32Option: int32->[]uint64 */ func MapUint64ArrToInt32Option(m Int32Option, f func(int32) []uint64) Uint64ArrOption {  if m.IsDefined() { return Uint64ArrOpt(f(*m.value)) } else { return NoneUint64ArrOption }  }
/* Int32Option: int32->[]uintptr */ func MapUintptrArrToInt32Option(m Int32Option, f func(int32) []uintptr) UintptrArrOption {  if m.IsDefined() { return UintptrArrOpt(f(*m.value)) } else { return NoneUintptrArrOption }  }
/* Int32Option: int32->[]byte */ func MapByteArrToInt32Option(m Int32Option, f func(int32) []byte) ByteArrOption {  if m.IsDefined() { return ByteArrOpt(f(*m.value)) } else { return NoneByteArrOption }  }
/* Int32Option: int32->[]rune */ func MapRuneArrToInt32Option(m Int32Option, f func(int32) []rune) RuneArrOption {  if m.IsDefined() { return RuneArrOpt(f(*m.value)) } else { return NoneRuneArrOption }  }
/* Int32Option: int32->[]float32 */ func MapFloat32ArrToInt32Option(m Int32Option, f func(int32) []float32) Float32ArrOption {  if m.IsDefined() { return Float32ArrOpt(f(*m.value)) } else { return NoneFloat32ArrOption }  }
/* Int32Option: int32->[]float64 */ func MapFloat64ArrToInt32Option(m Int32Option, f func(int32) []float64) Float64ArrOption {  if m.IsDefined() { return Float64ArrOpt(f(*m.value)) } else { return NoneFloat64ArrOption }  }
/* Int32Option: int32->[]complex64 */ func MapComplex64ArrToInt32Option(m Int32Option, f func(int32) []complex64) Complex64ArrOption {  if m.IsDefined() { return Complex64ArrOpt(f(*m.value)) } else { return NoneComplex64ArrOption }  }
/* Int32Option: int32->[]complex128 */ func MapComplex128ArrToInt32Option(m Int32Option, f func(int32) []complex128) Complex128ArrOption {  if m.IsDefined() { return Complex128ArrOpt(f(*m.value)) } else { return NoneComplex128ArrOption }  }
/* Int32Option: int32->[]Any */ func MapAnyArrToInt32Option(m Int32Option, f func(int32) []Any) AnyArrOption {  if m.IsDefined() { return AnyArrOpt(f(*m.value)) } else { return NoneAnyArrOption }  }
/* Int32Option: int32->BoolList */ func MapBoolListToInt32Option(m Int32Option, f func(int32) BoolList) BoolListOption {  if m.IsDefined() { return BoolListOpt(f(*m.value)) } else { return NoneBoolListOption }  }
/* Int32Option: int32->StringList */ func MapStringListToInt32Option(m Int32Option, f func(int32) StringList) StringListOption {  if m.IsDefined() { return StringListOpt(f(*m.value)) } else { return NoneStringListOption }  }
/* Int32Option: int32->IntList */ func MapIntListToInt32Option(m Int32Option, f func(int32) IntList) IntListOption {  if m.IsDefined() { return IntListOpt(f(*m.value)) } else { return NoneIntListOption }  }
/* Int32Option: int32->Int8List */ func MapInt8ListToInt32Option(m Int32Option, f func(int32) Int8List) Int8ListOption {  if m.IsDefined() { return Int8ListOpt(f(*m.value)) } else { return NoneInt8ListOption }  }
/* Int32Option: int32->Int16List */ func MapInt16ListToInt32Option(m Int32Option, f func(int32) Int16List) Int16ListOption {  if m.IsDefined() { return Int16ListOpt(f(*m.value)) } else { return NoneInt16ListOption }  }
/* Int32Option: int32->Int32List */ func MapInt32ListToInt32Option(m Int32Option, f func(int32) Int32List) Int32ListOption {  if m.IsDefined() { return Int32ListOpt(f(*m.value)) } else { return NoneInt32ListOption }  }
/* Int32Option: int32->Int64List */ func MapInt64ListToInt32Option(m Int32Option, f func(int32) Int64List) Int64ListOption {  if m.IsDefined() { return Int64ListOpt(f(*m.value)) } else { return NoneInt64ListOption }  }
/* Int32Option: int32->UintList */ func MapUintListToInt32Option(m Int32Option, f func(int32) UintList) UintListOption {  if m.IsDefined() { return UintListOpt(f(*m.value)) } else { return NoneUintListOption }  }
/* Int32Option: int32->Uint8List */ func MapUint8ListToInt32Option(m Int32Option, f func(int32) Uint8List) Uint8ListOption {  if m.IsDefined() { return Uint8ListOpt(f(*m.value)) } else { return NoneUint8ListOption }  }
/* Int32Option: int32->Uint16List */ func MapUint16ListToInt32Option(m Int32Option, f func(int32) Uint16List) Uint16ListOption {  if m.IsDefined() { return Uint16ListOpt(f(*m.value)) } else { return NoneUint16ListOption }  }
/* Int32Option: int32->Uint32List */ func MapUint32ListToInt32Option(m Int32Option, f func(int32) Uint32List) Uint32ListOption {  if m.IsDefined() { return Uint32ListOpt(f(*m.value)) } else { return NoneUint32ListOption }  }
/* Int32Option: int32->Uint64List */ func MapUint64ListToInt32Option(m Int32Option, f func(int32) Uint64List) Uint64ListOption {  if m.IsDefined() { return Uint64ListOpt(f(*m.value)) } else { return NoneUint64ListOption }  }
/* Int32Option: int32->UintptrList */ func MapUintptrListToInt32Option(m Int32Option, f func(int32) UintptrList) UintptrListOption {  if m.IsDefined() { return UintptrListOpt(f(*m.value)) } else { return NoneUintptrListOption }  }
/* Int32Option: int32->ByteList */ func MapByteListToInt32Option(m Int32Option, f func(int32) ByteList) ByteListOption {  if m.IsDefined() { return ByteListOpt(f(*m.value)) } else { return NoneByteListOption }  }
/* Int32Option: int32->RuneList */ func MapRuneListToInt32Option(m Int32Option, f func(int32) RuneList) RuneListOption {  if m.IsDefined() { return RuneListOpt(f(*m.value)) } else { return NoneRuneListOption }  }
/* Int32Option: int32->Float32List */ func MapFloat32ListToInt32Option(m Int32Option, f func(int32) Float32List) Float32ListOption {  if m.IsDefined() { return Float32ListOpt(f(*m.value)) } else { return NoneFloat32ListOption }  }
/* Int32Option: int32->Float64List */ func MapFloat64ListToInt32Option(m Int32Option, f func(int32) Float64List) Float64ListOption {  if m.IsDefined() { return Float64ListOpt(f(*m.value)) } else { return NoneFloat64ListOption }  }
/* Int32Option: int32->Complex64List */ func MapComplex64ListToInt32Option(m Int32Option, f func(int32) Complex64List) Complex64ListOption {  if m.IsDefined() { return Complex64ListOpt(f(*m.value)) } else { return NoneComplex64ListOption }  }
/* Int32Option: int32->Complex128List */ func MapComplex128ListToInt32Option(m Int32Option, f func(int32) Complex128List) Complex128ListOption {  if m.IsDefined() { return Complex128ListOpt(f(*m.value)) } else { return NoneComplex128ListOption }  }
/* Int32Option: int32->AnyList */ func MapAnyListToInt32Option(m Int32Option, f func(int32) AnyList) AnyListOption {  if m.IsDefined() { return AnyListOpt(f(*m.value)) } else { return NoneAnyListOption }  }
/* Int64Option: int64->bool */ func MapBoolToInt64Option(m Int64Option, f func(int64) bool) BoolOption {  if m.IsDefined() { return Bool(f(*m.value)) } else { return NoneBoolOption }  }
/* Int64Option: int64->string */ func MapStringToInt64Option(m Int64Option, f func(int64) string) StringOption {  if m.IsDefined() { return String(f(*m.value)) } else { return NoneStringOption }  }
/* Int64Option: int64->int */ func MapIntToInt64Option(m Int64Option, f func(int64) int) IntOption {  if m.IsDefined() { return Int(f(*m.value)) } else { return NoneIntOption }  }
/* Int64Option: int64->int8 */ func MapInt8ToInt64Option(m Int64Option, f func(int64) int8) Int8Option {  if m.IsDefined() { return Int8(f(*m.value)) } else { return NoneInt8Option }  }
/* Int64Option: int64->int16 */ func MapInt16ToInt64Option(m Int64Option, f func(int64) int16) Int16Option {  if m.IsDefined() { return Int16(f(*m.value)) } else { return NoneInt16Option }  }
/* Int64Option: int64->int32 */ func MapInt32ToInt64Option(m Int64Option, f func(int64) int32) Int32Option {  if m.IsDefined() { return Int32(f(*m.value)) } else { return NoneInt32Option }  }
/* Int64Option: int64->int64 */ func MapInt64ToInt64Option(m Int64Option, f func(int64) int64) Int64Option {  if m.IsDefined() { return Int64(f(*m.value)) } else { return NoneInt64Option }  }
/* Int64Option: int64->uint */ func MapUintToInt64Option(m Int64Option, f func(int64) uint) UintOption {  if m.IsDefined() { return Uint(f(*m.value)) } else { return NoneUintOption }  }
/* Int64Option: int64->uint8 */ func MapUint8ToInt64Option(m Int64Option, f func(int64) uint8) Uint8Option {  if m.IsDefined() { return Uint8(f(*m.value)) } else { return NoneUint8Option }  }
/* Int64Option: int64->uint16 */ func MapUint16ToInt64Option(m Int64Option, f func(int64) uint16) Uint16Option {  if m.IsDefined() { return Uint16(f(*m.value)) } else { return NoneUint16Option }  }
/* Int64Option: int64->uint32 */ func MapUint32ToInt64Option(m Int64Option, f func(int64) uint32) Uint32Option {  if m.IsDefined() { return Uint32(f(*m.value)) } else { return NoneUint32Option }  }
/* Int64Option: int64->uint64 */ func MapUint64ToInt64Option(m Int64Option, f func(int64) uint64) Uint64Option {  if m.IsDefined() { return Uint64(f(*m.value)) } else { return NoneUint64Option }  }
/* Int64Option: int64->uintptr */ func MapUintptrToInt64Option(m Int64Option, f func(int64) uintptr) UintptrOption {  if m.IsDefined() { return Uintptr(f(*m.value)) } else { return NoneUintptrOption }  }
/* Int64Option: int64->byte */ func MapByteToInt64Option(m Int64Option, f func(int64) byte) ByteOption {  if m.IsDefined() { return Byte(f(*m.value)) } else { return NoneByteOption }  }
/* Int64Option: int64->rune */ func MapRuneToInt64Option(m Int64Option, f func(int64) rune) RuneOption {  if m.IsDefined() { return Rune(f(*m.value)) } else { return NoneRuneOption }  }
/* Int64Option: int64->float32 */ func MapFloat32ToInt64Option(m Int64Option, f func(int64) float32) Float32Option {  if m.IsDefined() { return Float32(f(*m.value)) } else { return NoneFloat32Option }  }
/* Int64Option: int64->float64 */ func MapFloat64ToInt64Option(m Int64Option, f func(int64) float64) Float64Option {  if m.IsDefined() { return Float64(f(*m.value)) } else { return NoneFloat64Option }  }
/* Int64Option: int64->complex64 */ func MapComplex64ToInt64Option(m Int64Option, f func(int64) complex64) Complex64Option {  if m.IsDefined() { return Complex64(f(*m.value)) } else { return NoneComplex64Option }  }
/* Int64Option: int64->complex128 */ func MapComplex128ToInt64Option(m Int64Option, f func(int64) complex128) Complex128Option {  if m.IsDefined() { return Complex128(f(*m.value)) } else { return NoneComplex128Option }  }
/* Int64Option: int64->Any */ func MapAnyToInt64Option(m Int64Option, f func(int64) Any) AnyOption {  if m.IsDefined() { return AnyOpt(f(*m.value)) } else { return NoneAnyOption }  }
/* Int64Option: int64->BoolOption */ func MapBoolOptionToInt64Option(m Int64Option, f func(int64) BoolOption) BoolOptionOption {  if m.IsDefined() { return BoolBool(f(*m.value)) } else { return NoneBoolOptionOption }  }
/* Int64Option: int64->StringOption */ func MapStringOptionToInt64Option(m Int64Option, f func(int64) StringOption) StringOptionOption {  if m.IsDefined() { return StringString(f(*m.value)) } else { return NoneStringOptionOption }  }
/* Int64Option: int64->IntOption */ func MapIntOptionToInt64Option(m Int64Option, f func(int64) IntOption) IntOptionOption {  if m.IsDefined() { return IntInt(f(*m.value)) } else { return NoneIntOptionOption }  }
/* Int64Option: int64->Int8Option */ func MapInt8OptionToInt64Option(m Int64Option, f func(int64) Int8Option) Int8OptionOption {  if m.IsDefined() { return Int8Int8(f(*m.value)) } else { return NoneInt8OptionOption }  }
/* Int64Option: int64->Int16Option */ func MapInt16OptionToInt64Option(m Int64Option, f func(int64) Int16Option) Int16OptionOption {  if m.IsDefined() { return Int16Int16(f(*m.value)) } else { return NoneInt16OptionOption }  }
/* Int64Option: int64->Int32Option */ func MapInt32OptionToInt64Option(m Int64Option, f func(int64) Int32Option) Int32OptionOption {  if m.IsDefined() { return Int32Int32(f(*m.value)) } else { return NoneInt32OptionOption }  }
/* Int64Option: int64->Int64Option */ func MapInt64OptionToInt64Option(m Int64Option, f func(int64) Int64Option) Int64OptionOption {  if m.IsDefined() { return Int64Int64(f(*m.value)) } else { return NoneInt64OptionOption }  }
/* Int64Option: int64->UintOption */ func MapUintOptionToInt64Option(m Int64Option, f func(int64) UintOption) UintOptionOption {  if m.IsDefined() { return UintUint(f(*m.value)) } else { return NoneUintOptionOption }  }
/* Int64Option: int64->Uint8Option */ func MapUint8OptionToInt64Option(m Int64Option, f func(int64) Uint8Option) Uint8OptionOption {  if m.IsDefined() { return Uint8Uint8(f(*m.value)) } else { return NoneUint8OptionOption }  }
/* Int64Option: int64->Uint16Option */ func MapUint16OptionToInt64Option(m Int64Option, f func(int64) Uint16Option) Uint16OptionOption {  if m.IsDefined() { return Uint16Uint16(f(*m.value)) } else { return NoneUint16OptionOption }  }
/* Int64Option: int64->Uint32Option */ func MapUint32OptionToInt64Option(m Int64Option, f func(int64) Uint32Option) Uint32OptionOption {  if m.IsDefined() { return Uint32Uint32(f(*m.value)) } else { return NoneUint32OptionOption }  }
/* Int64Option: int64->Uint64Option */ func MapUint64OptionToInt64Option(m Int64Option, f func(int64) Uint64Option) Uint64OptionOption {  if m.IsDefined() { return Uint64Uint64(f(*m.value)) } else { return NoneUint64OptionOption }  }
/* Int64Option: int64->UintptrOption */ func MapUintptrOptionToInt64Option(m Int64Option, f func(int64) UintptrOption) UintptrOptionOption {  if m.IsDefined() { return UintptrUintptr(f(*m.value)) } else { return NoneUintptrOptionOption }  }
/* Int64Option: int64->ByteOption */ func MapByteOptionToInt64Option(m Int64Option, f func(int64) ByteOption) ByteOptionOption {  if m.IsDefined() { return ByteByte(f(*m.value)) } else { return NoneByteOptionOption }  }
/* Int64Option: int64->RuneOption */ func MapRuneOptionToInt64Option(m Int64Option, f func(int64) RuneOption) RuneOptionOption {  if m.IsDefined() { return RuneRune(f(*m.value)) } else { return NoneRuneOptionOption }  }
/* Int64Option: int64->Float32Option */ func MapFloat32OptionToInt64Option(m Int64Option, f func(int64) Float32Option) Float32OptionOption {  if m.IsDefined() { return Float32Float32(f(*m.value)) } else { return NoneFloat32OptionOption }  }
/* Int64Option: int64->Float64Option */ func MapFloat64OptionToInt64Option(m Int64Option, f func(int64) Float64Option) Float64OptionOption {  if m.IsDefined() { return Float64Float64(f(*m.value)) } else { return NoneFloat64OptionOption }  }
/* Int64Option: int64->Complex64Option */ func MapComplex64OptionToInt64Option(m Int64Option, f func(int64) Complex64Option) Complex64OptionOption {  if m.IsDefined() { return Complex64Complex64(f(*m.value)) } else { return NoneComplex64OptionOption }  }
/* Int64Option: int64->Complex128Option */ func MapComplex128OptionToInt64Option(m Int64Option, f func(int64) Complex128Option) Complex128OptionOption {  if m.IsDefined() { return Complex128Complex128(f(*m.value)) } else { return NoneComplex128OptionOption }  }
/* Int64Option: int64->AnyOption */ func MapAnyOptionToInt64Option(m Int64Option, f func(int64) AnyOption) AnyOptionOption {  if m.IsDefined() { return AnyOptAny(f(*m.value)) } else { return NoneAnyOptionOption }  }
/* Int64Option: int64->[]bool */ func MapBoolArrToInt64Option(m Int64Option, f func(int64) []bool) BoolArrOption {  if m.IsDefined() { return BoolArrOpt(f(*m.value)) } else { return NoneBoolArrOption }  }
/* Int64Option: int64->[]string */ func MapStringArrToInt64Option(m Int64Option, f func(int64) []string) StringArrOption {  if m.IsDefined() { return StringArrOpt(f(*m.value)) } else { return NoneStringArrOption }  }
/* Int64Option: int64->[]int */ func MapIntArrToInt64Option(m Int64Option, f func(int64) []int) IntArrOption {  if m.IsDefined() { return IntArrOpt(f(*m.value)) } else { return NoneIntArrOption }  }
/* Int64Option: int64->[]int8 */ func MapInt8ArrToInt64Option(m Int64Option, f func(int64) []int8) Int8ArrOption {  if m.IsDefined() { return Int8ArrOpt(f(*m.value)) } else { return NoneInt8ArrOption }  }
/* Int64Option: int64->[]int16 */ func MapInt16ArrToInt64Option(m Int64Option, f func(int64) []int16) Int16ArrOption {  if m.IsDefined() { return Int16ArrOpt(f(*m.value)) } else { return NoneInt16ArrOption }  }
/* Int64Option: int64->[]int32 */ func MapInt32ArrToInt64Option(m Int64Option, f func(int64) []int32) Int32ArrOption {  if m.IsDefined() { return Int32ArrOpt(f(*m.value)) } else { return NoneInt32ArrOption }  }
/* Int64Option: int64->[]int64 */ func MapInt64ArrToInt64Option(m Int64Option, f func(int64) []int64) Int64ArrOption {  if m.IsDefined() { return Int64ArrOpt(f(*m.value)) } else { return NoneInt64ArrOption }  }
/* Int64Option: int64->[]uint */ func MapUintArrToInt64Option(m Int64Option, f func(int64) []uint) UintArrOption {  if m.IsDefined() { return UintArrOpt(f(*m.value)) } else { return NoneUintArrOption }  }
/* Int64Option: int64->[]uint8 */ func MapUint8ArrToInt64Option(m Int64Option, f func(int64) []uint8) Uint8ArrOption {  if m.IsDefined() { return Uint8ArrOpt(f(*m.value)) } else { return NoneUint8ArrOption }  }
/* Int64Option: int64->[]uint16 */ func MapUint16ArrToInt64Option(m Int64Option, f func(int64) []uint16) Uint16ArrOption {  if m.IsDefined() { return Uint16ArrOpt(f(*m.value)) } else { return NoneUint16ArrOption }  }
/* Int64Option: int64->[]uint32 */ func MapUint32ArrToInt64Option(m Int64Option, f func(int64) []uint32) Uint32ArrOption {  if m.IsDefined() { return Uint32ArrOpt(f(*m.value)) } else { return NoneUint32ArrOption }  }
/* Int64Option: int64->[]uint64 */ func MapUint64ArrToInt64Option(m Int64Option, f func(int64) []uint64) Uint64ArrOption {  if m.IsDefined() { return Uint64ArrOpt(f(*m.value)) } else { return NoneUint64ArrOption }  }
/* Int64Option: int64->[]uintptr */ func MapUintptrArrToInt64Option(m Int64Option, f func(int64) []uintptr) UintptrArrOption {  if m.IsDefined() { return UintptrArrOpt(f(*m.value)) } else { return NoneUintptrArrOption }  }
/* Int64Option: int64->[]byte */ func MapByteArrToInt64Option(m Int64Option, f func(int64) []byte) ByteArrOption {  if m.IsDefined() { return ByteArrOpt(f(*m.value)) } else { return NoneByteArrOption }  }
/* Int64Option: int64->[]rune */ func MapRuneArrToInt64Option(m Int64Option, f func(int64) []rune) RuneArrOption {  if m.IsDefined() { return RuneArrOpt(f(*m.value)) } else { return NoneRuneArrOption }  }
/* Int64Option: int64->[]float32 */ func MapFloat32ArrToInt64Option(m Int64Option, f func(int64) []float32) Float32ArrOption {  if m.IsDefined() { return Float32ArrOpt(f(*m.value)) } else { return NoneFloat32ArrOption }  }
/* Int64Option: int64->[]float64 */ func MapFloat64ArrToInt64Option(m Int64Option, f func(int64) []float64) Float64ArrOption {  if m.IsDefined() { return Float64ArrOpt(f(*m.value)) } else { return NoneFloat64ArrOption }  }
/* Int64Option: int64->[]complex64 */ func MapComplex64ArrToInt64Option(m Int64Option, f func(int64) []complex64) Complex64ArrOption {  if m.IsDefined() { return Complex64ArrOpt(f(*m.value)) } else { return NoneComplex64ArrOption }  }
/* Int64Option: int64->[]complex128 */ func MapComplex128ArrToInt64Option(m Int64Option, f func(int64) []complex128) Complex128ArrOption {  if m.IsDefined() { return Complex128ArrOpt(f(*m.value)) } else { return NoneComplex128ArrOption }  }
/* Int64Option: int64->[]Any */ func MapAnyArrToInt64Option(m Int64Option, f func(int64) []Any) AnyArrOption {  if m.IsDefined() { return AnyArrOpt(f(*m.value)) } else { return NoneAnyArrOption }  }
/* Int64Option: int64->BoolList */ func MapBoolListToInt64Option(m Int64Option, f func(int64) BoolList) BoolListOption {  if m.IsDefined() { return BoolListOpt(f(*m.value)) } else { return NoneBoolListOption }  }
/* Int64Option: int64->StringList */ func MapStringListToInt64Option(m Int64Option, f func(int64) StringList) StringListOption {  if m.IsDefined() { return StringListOpt(f(*m.value)) } else { return NoneStringListOption }  }
/* Int64Option: int64->IntList */ func MapIntListToInt64Option(m Int64Option, f func(int64) IntList) IntListOption {  if m.IsDefined() { return IntListOpt(f(*m.value)) } else { return NoneIntListOption }  }
/* Int64Option: int64->Int8List */ func MapInt8ListToInt64Option(m Int64Option, f func(int64) Int8List) Int8ListOption {  if m.IsDefined() { return Int8ListOpt(f(*m.value)) } else { return NoneInt8ListOption }  }
/* Int64Option: int64->Int16List */ func MapInt16ListToInt64Option(m Int64Option, f func(int64) Int16List) Int16ListOption {  if m.IsDefined() { return Int16ListOpt(f(*m.value)) } else { return NoneInt16ListOption }  }
/* Int64Option: int64->Int32List */ func MapInt32ListToInt64Option(m Int64Option, f func(int64) Int32List) Int32ListOption {  if m.IsDefined() { return Int32ListOpt(f(*m.value)) } else { return NoneInt32ListOption }  }
/* Int64Option: int64->Int64List */ func MapInt64ListToInt64Option(m Int64Option, f func(int64) Int64List) Int64ListOption {  if m.IsDefined() { return Int64ListOpt(f(*m.value)) } else { return NoneInt64ListOption }  }
/* Int64Option: int64->UintList */ func MapUintListToInt64Option(m Int64Option, f func(int64) UintList) UintListOption {  if m.IsDefined() { return UintListOpt(f(*m.value)) } else { return NoneUintListOption }  }
/* Int64Option: int64->Uint8List */ func MapUint8ListToInt64Option(m Int64Option, f func(int64) Uint8List) Uint8ListOption {  if m.IsDefined() { return Uint8ListOpt(f(*m.value)) } else { return NoneUint8ListOption }  }
/* Int64Option: int64->Uint16List */ func MapUint16ListToInt64Option(m Int64Option, f func(int64) Uint16List) Uint16ListOption {  if m.IsDefined() { return Uint16ListOpt(f(*m.value)) } else { return NoneUint16ListOption }  }
/* Int64Option: int64->Uint32List */ func MapUint32ListToInt64Option(m Int64Option, f func(int64) Uint32List) Uint32ListOption {  if m.IsDefined() { return Uint32ListOpt(f(*m.value)) } else { return NoneUint32ListOption }  }
/* Int64Option: int64->Uint64List */ func MapUint64ListToInt64Option(m Int64Option, f func(int64) Uint64List) Uint64ListOption {  if m.IsDefined() { return Uint64ListOpt(f(*m.value)) } else { return NoneUint64ListOption }  }
/* Int64Option: int64->UintptrList */ func MapUintptrListToInt64Option(m Int64Option, f func(int64) UintptrList) UintptrListOption {  if m.IsDefined() { return UintptrListOpt(f(*m.value)) } else { return NoneUintptrListOption }  }
/* Int64Option: int64->ByteList */ func MapByteListToInt64Option(m Int64Option, f func(int64) ByteList) ByteListOption {  if m.IsDefined() { return ByteListOpt(f(*m.value)) } else { return NoneByteListOption }  }
/* Int64Option: int64->RuneList */ func MapRuneListToInt64Option(m Int64Option, f func(int64) RuneList) RuneListOption {  if m.IsDefined() { return RuneListOpt(f(*m.value)) } else { return NoneRuneListOption }  }
/* Int64Option: int64->Float32List */ func MapFloat32ListToInt64Option(m Int64Option, f func(int64) Float32List) Float32ListOption {  if m.IsDefined() { return Float32ListOpt(f(*m.value)) } else { return NoneFloat32ListOption }  }
/* Int64Option: int64->Float64List */ func MapFloat64ListToInt64Option(m Int64Option, f func(int64) Float64List) Float64ListOption {  if m.IsDefined() { return Float64ListOpt(f(*m.value)) } else { return NoneFloat64ListOption }  }
/* Int64Option: int64->Complex64List */ func MapComplex64ListToInt64Option(m Int64Option, f func(int64) Complex64List) Complex64ListOption {  if m.IsDefined() { return Complex64ListOpt(f(*m.value)) } else { return NoneComplex64ListOption }  }
/* Int64Option: int64->Complex128List */ func MapComplex128ListToInt64Option(m Int64Option, f func(int64) Complex128List) Complex128ListOption {  if m.IsDefined() { return Complex128ListOpt(f(*m.value)) } else { return NoneComplex128ListOption }  }
/* Int64Option: int64->AnyList */ func MapAnyListToInt64Option(m Int64Option, f func(int64) AnyList) AnyListOption {  if m.IsDefined() { return AnyListOpt(f(*m.value)) } else { return NoneAnyListOption }  }
/* UintOption: uint->bool */ func MapBoolToUintOption(m UintOption, f func(uint) bool) BoolOption {  if m.IsDefined() { return Bool(f(*m.value)) } else { return NoneBoolOption }  }
/* UintOption: uint->string */ func MapStringToUintOption(m UintOption, f func(uint) string) StringOption {  if m.IsDefined() { return String(f(*m.value)) } else { return NoneStringOption }  }
/* UintOption: uint->int */ func MapIntToUintOption(m UintOption, f func(uint) int) IntOption {  if m.IsDefined() { return Int(f(*m.value)) } else { return NoneIntOption }  }
/* UintOption: uint->int8 */ func MapInt8ToUintOption(m UintOption, f func(uint) int8) Int8Option {  if m.IsDefined() { return Int8(f(*m.value)) } else { return NoneInt8Option }  }
/* UintOption: uint->int16 */ func MapInt16ToUintOption(m UintOption, f func(uint) int16) Int16Option {  if m.IsDefined() { return Int16(f(*m.value)) } else { return NoneInt16Option }  }
/* UintOption: uint->int32 */ func MapInt32ToUintOption(m UintOption, f func(uint) int32) Int32Option {  if m.IsDefined() { return Int32(f(*m.value)) } else { return NoneInt32Option }  }
/* UintOption: uint->int64 */ func MapInt64ToUintOption(m UintOption, f func(uint) int64) Int64Option {  if m.IsDefined() { return Int64(f(*m.value)) } else { return NoneInt64Option }  }
/* UintOption: uint->uint */ func MapUintToUintOption(m UintOption, f func(uint) uint) UintOption {  if m.IsDefined() { return Uint(f(*m.value)) } else { return NoneUintOption }  }
/* UintOption: uint->uint8 */ func MapUint8ToUintOption(m UintOption, f func(uint) uint8) Uint8Option {  if m.IsDefined() { return Uint8(f(*m.value)) } else { return NoneUint8Option }  }
/* UintOption: uint->uint16 */ func MapUint16ToUintOption(m UintOption, f func(uint) uint16) Uint16Option {  if m.IsDefined() { return Uint16(f(*m.value)) } else { return NoneUint16Option }  }
/* UintOption: uint->uint32 */ func MapUint32ToUintOption(m UintOption, f func(uint) uint32) Uint32Option {  if m.IsDefined() { return Uint32(f(*m.value)) } else { return NoneUint32Option }  }
/* UintOption: uint->uint64 */ func MapUint64ToUintOption(m UintOption, f func(uint) uint64) Uint64Option {  if m.IsDefined() { return Uint64(f(*m.value)) } else { return NoneUint64Option }  }
/* UintOption: uint->uintptr */ func MapUintptrToUintOption(m UintOption, f func(uint) uintptr) UintptrOption {  if m.IsDefined() { return Uintptr(f(*m.value)) } else { return NoneUintptrOption }  }
/* UintOption: uint->byte */ func MapByteToUintOption(m UintOption, f func(uint) byte) ByteOption {  if m.IsDefined() { return Byte(f(*m.value)) } else { return NoneByteOption }  }
/* UintOption: uint->rune */ func MapRuneToUintOption(m UintOption, f func(uint) rune) RuneOption {  if m.IsDefined() { return Rune(f(*m.value)) } else { return NoneRuneOption }  }
/* UintOption: uint->float32 */ func MapFloat32ToUintOption(m UintOption, f func(uint) float32) Float32Option {  if m.IsDefined() { return Float32(f(*m.value)) } else { return NoneFloat32Option }  }
/* UintOption: uint->float64 */ func MapFloat64ToUintOption(m UintOption, f func(uint) float64) Float64Option {  if m.IsDefined() { return Float64(f(*m.value)) } else { return NoneFloat64Option }  }
/* UintOption: uint->complex64 */ func MapComplex64ToUintOption(m UintOption, f func(uint) complex64) Complex64Option {  if m.IsDefined() { return Complex64(f(*m.value)) } else { return NoneComplex64Option }  }
/* UintOption: uint->complex128 */ func MapComplex128ToUintOption(m UintOption, f func(uint) complex128) Complex128Option {  if m.IsDefined() { return Complex128(f(*m.value)) } else { return NoneComplex128Option }  }
/* UintOption: uint->Any */ func MapAnyToUintOption(m UintOption, f func(uint) Any) AnyOption {  if m.IsDefined() { return AnyOpt(f(*m.value)) } else { return NoneAnyOption }  }
/* UintOption: uint->BoolOption */ func MapBoolOptionToUintOption(m UintOption, f func(uint) BoolOption) BoolOptionOption {  if m.IsDefined() { return BoolBool(f(*m.value)) } else { return NoneBoolOptionOption }  }
/* UintOption: uint->StringOption */ func MapStringOptionToUintOption(m UintOption, f func(uint) StringOption) StringOptionOption {  if m.IsDefined() { return StringString(f(*m.value)) } else { return NoneStringOptionOption }  }
/* UintOption: uint->IntOption */ func MapIntOptionToUintOption(m UintOption, f func(uint) IntOption) IntOptionOption {  if m.IsDefined() { return IntInt(f(*m.value)) } else { return NoneIntOptionOption }  }
/* UintOption: uint->Int8Option */ func MapInt8OptionToUintOption(m UintOption, f func(uint) Int8Option) Int8OptionOption {  if m.IsDefined() { return Int8Int8(f(*m.value)) } else { return NoneInt8OptionOption }  }
/* UintOption: uint->Int16Option */ func MapInt16OptionToUintOption(m UintOption, f func(uint) Int16Option) Int16OptionOption {  if m.IsDefined() { return Int16Int16(f(*m.value)) } else { return NoneInt16OptionOption }  }
/* UintOption: uint->Int32Option */ func MapInt32OptionToUintOption(m UintOption, f func(uint) Int32Option) Int32OptionOption {  if m.IsDefined() { return Int32Int32(f(*m.value)) } else { return NoneInt32OptionOption }  }
/* UintOption: uint->Int64Option */ func MapInt64OptionToUintOption(m UintOption, f func(uint) Int64Option) Int64OptionOption {  if m.IsDefined() { return Int64Int64(f(*m.value)) } else { return NoneInt64OptionOption }  }
/* UintOption: uint->UintOption */ func MapUintOptionToUintOption(m UintOption, f func(uint) UintOption) UintOptionOption {  if m.IsDefined() { return UintUint(f(*m.value)) } else { return NoneUintOptionOption }  }
/* UintOption: uint->Uint8Option */ func MapUint8OptionToUintOption(m UintOption, f func(uint) Uint8Option) Uint8OptionOption {  if m.IsDefined() { return Uint8Uint8(f(*m.value)) } else { return NoneUint8OptionOption }  }
/* UintOption: uint->Uint16Option */ func MapUint16OptionToUintOption(m UintOption, f func(uint) Uint16Option) Uint16OptionOption {  if m.IsDefined() { return Uint16Uint16(f(*m.value)) } else { return NoneUint16OptionOption }  }
/* UintOption: uint->Uint32Option */ func MapUint32OptionToUintOption(m UintOption, f func(uint) Uint32Option) Uint32OptionOption {  if m.IsDefined() { return Uint32Uint32(f(*m.value)) } else { return NoneUint32OptionOption }  }
/* UintOption: uint->Uint64Option */ func MapUint64OptionToUintOption(m UintOption, f func(uint) Uint64Option) Uint64OptionOption {  if m.IsDefined() { return Uint64Uint64(f(*m.value)) } else { return NoneUint64OptionOption }  }
/* UintOption: uint->UintptrOption */ func MapUintptrOptionToUintOption(m UintOption, f func(uint) UintptrOption) UintptrOptionOption {  if m.IsDefined() { return UintptrUintptr(f(*m.value)) } else { return NoneUintptrOptionOption }  }
/* UintOption: uint->ByteOption */ func MapByteOptionToUintOption(m UintOption, f func(uint) ByteOption) ByteOptionOption {  if m.IsDefined() { return ByteByte(f(*m.value)) } else { return NoneByteOptionOption }  }
/* UintOption: uint->RuneOption */ func MapRuneOptionToUintOption(m UintOption, f func(uint) RuneOption) RuneOptionOption {  if m.IsDefined() { return RuneRune(f(*m.value)) } else { return NoneRuneOptionOption }  }
/* UintOption: uint->Float32Option */ func MapFloat32OptionToUintOption(m UintOption, f func(uint) Float32Option) Float32OptionOption {  if m.IsDefined() { return Float32Float32(f(*m.value)) } else { return NoneFloat32OptionOption }  }
/* UintOption: uint->Float64Option */ func MapFloat64OptionToUintOption(m UintOption, f func(uint) Float64Option) Float64OptionOption {  if m.IsDefined() { return Float64Float64(f(*m.value)) } else { return NoneFloat64OptionOption }  }
/* UintOption: uint->Complex64Option */ func MapComplex64OptionToUintOption(m UintOption, f func(uint) Complex64Option) Complex64OptionOption {  if m.IsDefined() { return Complex64Complex64(f(*m.value)) } else { return NoneComplex64OptionOption }  }
/* UintOption: uint->Complex128Option */ func MapComplex128OptionToUintOption(m UintOption, f func(uint) Complex128Option) Complex128OptionOption {  if m.IsDefined() { return Complex128Complex128(f(*m.value)) } else { return NoneComplex128OptionOption }  }
/* UintOption: uint->AnyOption */ func MapAnyOptionToUintOption(m UintOption, f func(uint) AnyOption) AnyOptionOption {  if m.IsDefined() { return AnyOptAny(f(*m.value)) } else { return NoneAnyOptionOption }  }
/* UintOption: uint->[]bool */ func MapBoolArrToUintOption(m UintOption, f func(uint) []bool) BoolArrOption {  if m.IsDefined() { return BoolArrOpt(f(*m.value)) } else { return NoneBoolArrOption }  }
/* UintOption: uint->[]string */ func MapStringArrToUintOption(m UintOption, f func(uint) []string) StringArrOption {  if m.IsDefined() { return StringArrOpt(f(*m.value)) } else { return NoneStringArrOption }  }
/* UintOption: uint->[]int */ func MapIntArrToUintOption(m UintOption, f func(uint) []int) IntArrOption {  if m.IsDefined() { return IntArrOpt(f(*m.value)) } else { return NoneIntArrOption }  }
/* UintOption: uint->[]int8 */ func MapInt8ArrToUintOption(m UintOption, f func(uint) []int8) Int8ArrOption {  if m.IsDefined() { return Int8ArrOpt(f(*m.value)) } else { return NoneInt8ArrOption }  }
/* UintOption: uint->[]int16 */ func MapInt16ArrToUintOption(m UintOption, f func(uint) []int16) Int16ArrOption {  if m.IsDefined() { return Int16ArrOpt(f(*m.value)) } else { return NoneInt16ArrOption }  }
/* UintOption: uint->[]int32 */ func MapInt32ArrToUintOption(m UintOption, f func(uint) []int32) Int32ArrOption {  if m.IsDefined() { return Int32ArrOpt(f(*m.value)) } else { return NoneInt32ArrOption }  }
/* UintOption: uint->[]int64 */ func MapInt64ArrToUintOption(m UintOption, f func(uint) []int64) Int64ArrOption {  if m.IsDefined() { return Int64ArrOpt(f(*m.value)) } else { return NoneInt64ArrOption }  }
/* UintOption: uint->[]uint */ func MapUintArrToUintOption(m UintOption, f func(uint) []uint) UintArrOption {  if m.IsDefined() { return UintArrOpt(f(*m.value)) } else { return NoneUintArrOption }  }
/* UintOption: uint->[]uint8 */ func MapUint8ArrToUintOption(m UintOption, f func(uint) []uint8) Uint8ArrOption {  if m.IsDefined() { return Uint8ArrOpt(f(*m.value)) } else { return NoneUint8ArrOption }  }
/* UintOption: uint->[]uint16 */ func MapUint16ArrToUintOption(m UintOption, f func(uint) []uint16) Uint16ArrOption {  if m.IsDefined() { return Uint16ArrOpt(f(*m.value)) } else { return NoneUint16ArrOption }  }
/* UintOption: uint->[]uint32 */ func MapUint32ArrToUintOption(m UintOption, f func(uint) []uint32) Uint32ArrOption {  if m.IsDefined() { return Uint32ArrOpt(f(*m.value)) } else { return NoneUint32ArrOption }  }
/* UintOption: uint->[]uint64 */ func MapUint64ArrToUintOption(m UintOption, f func(uint) []uint64) Uint64ArrOption {  if m.IsDefined() { return Uint64ArrOpt(f(*m.value)) } else { return NoneUint64ArrOption }  }
/* UintOption: uint->[]uintptr */ func MapUintptrArrToUintOption(m UintOption, f func(uint) []uintptr) UintptrArrOption {  if m.IsDefined() { return UintptrArrOpt(f(*m.value)) } else { return NoneUintptrArrOption }  }
/* UintOption: uint->[]byte */ func MapByteArrToUintOption(m UintOption, f func(uint) []byte) ByteArrOption {  if m.IsDefined() { return ByteArrOpt(f(*m.value)) } else { return NoneByteArrOption }  }
/* UintOption: uint->[]rune */ func MapRuneArrToUintOption(m UintOption, f func(uint) []rune) RuneArrOption {  if m.IsDefined() { return RuneArrOpt(f(*m.value)) } else { return NoneRuneArrOption }  }
/* UintOption: uint->[]float32 */ func MapFloat32ArrToUintOption(m UintOption, f func(uint) []float32) Float32ArrOption {  if m.IsDefined() { return Float32ArrOpt(f(*m.value)) } else { return NoneFloat32ArrOption }  }
/* UintOption: uint->[]float64 */ func MapFloat64ArrToUintOption(m UintOption, f func(uint) []float64) Float64ArrOption {  if m.IsDefined() { return Float64ArrOpt(f(*m.value)) } else { return NoneFloat64ArrOption }  }
/* UintOption: uint->[]complex64 */ func MapComplex64ArrToUintOption(m UintOption, f func(uint) []complex64) Complex64ArrOption {  if m.IsDefined() { return Complex64ArrOpt(f(*m.value)) } else { return NoneComplex64ArrOption }  }
/* UintOption: uint->[]complex128 */ func MapComplex128ArrToUintOption(m UintOption, f func(uint) []complex128) Complex128ArrOption {  if m.IsDefined() { return Complex128ArrOpt(f(*m.value)) } else { return NoneComplex128ArrOption }  }
/* UintOption: uint->[]Any */ func MapAnyArrToUintOption(m UintOption, f func(uint) []Any) AnyArrOption {  if m.IsDefined() { return AnyArrOpt(f(*m.value)) } else { return NoneAnyArrOption }  }
/* UintOption: uint->BoolList */ func MapBoolListToUintOption(m UintOption, f func(uint) BoolList) BoolListOption {  if m.IsDefined() { return BoolListOpt(f(*m.value)) } else { return NoneBoolListOption }  }
/* UintOption: uint->StringList */ func MapStringListToUintOption(m UintOption, f func(uint) StringList) StringListOption {  if m.IsDefined() { return StringListOpt(f(*m.value)) } else { return NoneStringListOption }  }
/* UintOption: uint->IntList */ func MapIntListToUintOption(m UintOption, f func(uint) IntList) IntListOption {  if m.IsDefined() { return IntListOpt(f(*m.value)) } else { return NoneIntListOption }  }
/* UintOption: uint->Int8List */ func MapInt8ListToUintOption(m UintOption, f func(uint) Int8List) Int8ListOption {  if m.IsDefined() { return Int8ListOpt(f(*m.value)) } else { return NoneInt8ListOption }  }
/* UintOption: uint->Int16List */ func MapInt16ListToUintOption(m UintOption, f func(uint) Int16List) Int16ListOption {  if m.IsDefined() { return Int16ListOpt(f(*m.value)) } else { return NoneInt16ListOption }  }
/* UintOption: uint->Int32List */ func MapInt32ListToUintOption(m UintOption, f func(uint) Int32List) Int32ListOption {  if m.IsDefined() { return Int32ListOpt(f(*m.value)) } else { return NoneInt32ListOption }  }
/* UintOption: uint->Int64List */ func MapInt64ListToUintOption(m UintOption, f func(uint) Int64List) Int64ListOption {  if m.IsDefined() { return Int64ListOpt(f(*m.value)) } else { return NoneInt64ListOption }  }
/* UintOption: uint->UintList */ func MapUintListToUintOption(m UintOption, f func(uint) UintList) UintListOption {  if m.IsDefined() { return UintListOpt(f(*m.value)) } else { return NoneUintListOption }  }
/* UintOption: uint->Uint8List */ func MapUint8ListToUintOption(m UintOption, f func(uint) Uint8List) Uint8ListOption {  if m.IsDefined() { return Uint8ListOpt(f(*m.value)) } else { return NoneUint8ListOption }  }
/* UintOption: uint->Uint16List */ func MapUint16ListToUintOption(m UintOption, f func(uint) Uint16List) Uint16ListOption {  if m.IsDefined() { return Uint16ListOpt(f(*m.value)) } else { return NoneUint16ListOption }  }
/* UintOption: uint->Uint32List */ func MapUint32ListToUintOption(m UintOption, f func(uint) Uint32List) Uint32ListOption {  if m.IsDefined() { return Uint32ListOpt(f(*m.value)) } else { return NoneUint32ListOption }  }
/* UintOption: uint->Uint64List */ func MapUint64ListToUintOption(m UintOption, f func(uint) Uint64List) Uint64ListOption {  if m.IsDefined() { return Uint64ListOpt(f(*m.value)) } else { return NoneUint64ListOption }  }
/* UintOption: uint->UintptrList */ func MapUintptrListToUintOption(m UintOption, f func(uint) UintptrList) UintptrListOption {  if m.IsDefined() { return UintptrListOpt(f(*m.value)) } else { return NoneUintptrListOption }  }
/* UintOption: uint->ByteList */ func MapByteListToUintOption(m UintOption, f func(uint) ByteList) ByteListOption {  if m.IsDefined() { return ByteListOpt(f(*m.value)) } else { return NoneByteListOption }  }
/* UintOption: uint->RuneList */ func MapRuneListToUintOption(m UintOption, f func(uint) RuneList) RuneListOption {  if m.IsDefined() { return RuneListOpt(f(*m.value)) } else { return NoneRuneListOption }  }
/* UintOption: uint->Float32List */ func MapFloat32ListToUintOption(m UintOption, f func(uint) Float32List) Float32ListOption {  if m.IsDefined() { return Float32ListOpt(f(*m.value)) } else { return NoneFloat32ListOption }  }
/* UintOption: uint->Float64List */ func MapFloat64ListToUintOption(m UintOption, f func(uint) Float64List) Float64ListOption {  if m.IsDefined() { return Float64ListOpt(f(*m.value)) } else { return NoneFloat64ListOption }  }
/* UintOption: uint->Complex64List */ func MapComplex64ListToUintOption(m UintOption, f func(uint) Complex64List) Complex64ListOption {  if m.IsDefined() { return Complex64ListOpt(f(*m.value)) } else { return NoneComplex64ListOption }  }
/* UintOption: uint->Complex128List */ func MapComplex128ListToUintOption(m UintOption, f func(uint) Complex128List) Complex128ListOption {  if m.IsDefined() { return Complex128ListOpt(f(*m.value)) } else { return NoneComplex128ListOption }  }
/* UintOption: uint->AnyList */ func MapAnyListToUintOption(m UintOption, f func(uint) AnyList) AnyListOption {  if m.IsDefined() { return AnyListOpt(f(*m.value)) } else { return NoneAnyListOption }  }
/* Uint8Option: uint8->bool */ func MapBoolToUint8Option(m Uint8Option, f func(uint8) bool) BoolOption {  if m.IsDefined() { return Bool(f(*m.value)) } else { return NoneBoolOption }  }
/* Uint8Option: uint8->string */ func MapStringToUint8Option(m Uint8Option, f func(uint8) string) StringOption {  if m.IsDefined() { return String(f(*m.value)) } else { return NoneStringOption }  }
/* Uint8Option: uint8->int */ func MapIntToUint8Option(m Uint8Option, f func(uint8) int) IntOption {  if m.IsDefined() { return Int(f(*m.value)) } else { return NoneIntOption }  }
/* Uint8Option: uint8->int8 */ func MapInt8ToUint8Option(m Uint8Option, f func(uint8) int8) Int8Option {  if m.IsDefined() { return Int8(f(*m.value)) } else { return NoneInt8Option }  }
/* Uint8Option: uint8->int16 */ func MapInt16ToUint8Option(m Uint8Option, f func(uint8) int16) Int16Option {  if m.IsDefined() { return Int16(f(*m.value)) } else { return NoneInt16Option }  }
/* Uint8Option: uint8->int32 */ func MapInt32ToUint8Option(m Uint8Option, f func(uint8) int32) Int32Option {  if m.IsDefined() { return Int32(f(*m.value)) } else { return NoneInt32Option }  }
/* Uint8Option: uint8->int64 */ func MapInt64ToUint8Option(m Uint8Option, f func(uint8) int64) Int64Option {  if m.IsDefined() { return Int64(f(*m.value)) } else { return NoneInt64Option }  }
/* Uint8Option: uint8->uint */ func MapUintToUint8Option(m Uint8Option, f func(uint8) uint) UintOption {  if m.IsDefined() { return Uint(f(*m.value)) } else { return NoneUintOption }  }
/* Uint8Option: uint8->uint8 */ func MapUint8ToUint8Option(m Uint8Option, f func(uint8) uint8) Uint8Option {  if m.IsDefined() { return Uint8(f(*m.value)) } else { return NoneUint8Option }  }
/* Uint8Option: uint8->uint16 */ func MapUint16ToUint8Option(m Uint8Option, f func(uint8) uint16) Uint16Option {  if m.IsDefined() { return Uint16(f(*m.value)) } else { return NoneUint16Option }  }
/* Uint8Option: uint8->uint32 */ func MapUint32ToUint8Option(m Uint8Option, f func(uint8) uint32) Uint32Option {  if m.IsDefined() { return Uint32(f(*m.value)) } else { return NoneUint32Option }  }
/* Uint8Option: uint8->uint64 */ func MapUint64ToUint8Option(m Uint8Option, f func(uint8) uint64) Uint64Option {  if m.IsDefined() { return Uint64(f(*m.value)) } else { return NoneUint64Option }  }
/* Uint8Option: uint8->uintptr */ func MapUintptrToUint8Option(m Uint8Option, f func(uint8) uintptr) UintptrOption {  if m.IsDefined() { return Uintptr(f(*m.value)) } else { return NoneUintptrOption }  }
/* Uint8Option: uint8->byte */ func MapByteToUint8Option(m Uint8Option, f func(uint8) byte) ByteOption {  if m.IsDefined() { return Byte(f(*m.value)) } else { return NoneByteOption }  }
/* Uint8Option: uint8->rune */ func MapRuneToUint8Option(m Uint8Option, f func(uint8) rune) RuneOption {  if m.IsDefined() { return Rune(f(*m.value)) } else { return NoneRuneOption }  }
/* Uint8Option: uint8->float32 */ func MapFloat32ToUint8Option(m Uint8Option, f func(uint8) float32) Float32Option {  if m.IsDefined() { return Float32(f(*m.value)) } else { return NoneFloat32Option }  }
/* Uint8Option: uint8->float64 */ func MapFloat64ToUint8Option(m Uint8Option, f func(uint8) float64) Float64Option {  if m.IsDefined() { return Float64(f(*m.value)) } else { return NoneFloat64Option }  }
/* Uint8Option: uint8->complex64 */ func MapComplex64ToUint8Option(m Uint8Option, f func(uint8) complex64) Complex64Option {  if m.IsDefined() { return Complex64(f(*m.value)) } else { return NoneComplex64Option }  }
/* Uint8Option: uint8->complex128 */ func MapComplex128ToUint8Option(m Uint8Option, f func(uint8) complex128) Complex128Option {  if m.IsDefined() { return Complex128(f(*m.value)) } else { return NoneComplex128Option }  }
/* Uint8Option: uint8->Any */ func MapAnyToUint8Option(m Uint8Option, f func(uint8) Any) AnyOption {  if m.IsDefined() { return AnyOpt(f(*m.value)) } else { return NoneAnyOption }  }
/* Uint8Option: uint8->BoolOption */ func MapBoolOptionToUint8Option(m Uint8Option, f func(uint8) BoolOption) BoolOptionOption {  if m.IsDefined() { return BoolBool(f(*m.value)) } else { return NoneBoolOptionOption }  }
/* Uint8Option: uint8->StringOption */ func MapStringOptionToUint8Option(m Uint8Option, f func(uint8) StringOption) StringOptionOption {  if m.IsDefined() { return StringString(f(*m.value)) } else { return NoneStringOptionOption }  }
/* Uint8Option: uint8->IntOption */ func MapIntOptionToUint8Option(m Uint8Option, f func(uint8) IntOption) IntOptionOption {  if m.IsDefined() { return IntInt(f(*m.value)) } else { return NoneIntOptionOption }  }
/* Uint8Option: uint8->Int8Option */ func MapInt8OptionToUint8Option(m Uint8Option, f func(uint8) Int8Option) Int8OptionOption {  if m.IsDefined() { return Int8Int8(f(*m.value)) } else { return NoneInt8OptionOption }  }
/* Uint8Option: uint8->Int16Option */ func MapInt16OptionToUint8Option(m Uint8Option, f func(uint8) Int16Option) Int16OptionOption {  if m.IsDefined() { return Int16Int16(f(*m.value)) } else { return NoneInt16OptionOption }  }
/* Uint8Option: uint8->Int32Option */ func MapInt32OptionToUint8Option(m Uint8Option, f func(uint8) Int32Option) Int32OptionOption {  if m.IsDefined() { return Int32Int32(f(*m.value)) } else { return NoneInt32OptionOption }  }
/* Uint8Option: uint8->Int64Option */ func MapInt64OptionToUint8Option(m Uint8Option, f func(uint8) Int64Option) Int64OptionOption {  if m.IsDefined() { return Int64Int64(f(*m.value)) } else { return NoneInt64OptionOption }  }
/* Uint8Option: uint8->UintOption */ func MapUintOptionToUint8Option(m Uint8Option, f func(uint8) UintOption) UintOptionOption {  if m.IsDefined() { return UintUint(f(*m.value)) } else { return NoneUintOptionOption }  }
/* Uint8Option: uint8->Uint8Option */ func MapUint8OptionToUint8Option(m Uint8Option, f func(uint8) Uint8Option) Uint8OptionOption {  if m.IsDefined() { return Uint8Uint8(f(*m.value)) } else { return NoneUint8OptionOption }  }
/* Uint8Option: uint8->Uint16Option */ func MapUint16OptionToUint8Option(m Uint8Option, f func(uint8) Uint16Option) Uint16OptionOption {  if m.IsDefined() { return Uint16Uint16(f(*m.value)) } else { return NoneUint16OptionOption }  }
/* Uint8Option: uint8->Uint32Option */ func MapUint32OptionToUint8Option(m Uint8Option, f func(uint8) Uint32Option) Uint32OptionOption {  if m.IsDefined() { return Uint32Uint32(f(*m.value)) } else { return NoneUint32OptionOption }  }
/* Uint8Option: uint8->Uint64Option */ func MapUint64OptionToUint8Option(m Uint8Option, f func(uint8) Uint64Option) Uint64OptionOption {  if m.IsDefined() { return Uint64Uint64(f(*m.value)) } else { return NoneUint64OptionOption }  }
/* Uint8Option: uint8->UintptrOption */ func MapUintptrOptionToUint8Option(m Uint8Option, f func(uint8) UintptrOption) UintptrOptionOption {  if m.IsDefined() { return UintptrUintptr(f(*m.value)) } else { return NoneUintptrOptionOption }  }
/* Uint8Option: uint8->ByteOption */ func MapByteOptionToUint8Option(m Uint8Option, f func(uint8) ByteOption) ByteOptionOption {  if m.IsDefined() { return ByteByte(f(*m.value)) } else { return NoneByteOptionOption }  }
/* Uint8Option: uint8->RuneOption */ func MapRuneOptionToUint8Option(m Uint8Option, f func(uint8) RuneOption) RuneOptionOption {  if m.IsDefined() { return RuneRune(f(*m.value)) } else { return NoneRuneOptionOption }  }
/* Uint8Option: uint8->Float32Option */ func MapFloat32OptionToUint8Option(m Uint8Option, f func(uint8) Float32Option) Float32OptionOption {  if m.IsDefined() { return Float32Float32(f(*m.value)) } else { return NoneFloat32OptionOption }  }
/* Uint8Option: uint8->Float64Option */ func MapFloat64OptionToUint8Option(m Uint8Option, f func(uint8) Float64Option) Float64OptionOption {  if m.IsDefined() { return Float64Float64(f(*m.value)) } else { return NoneFloat64OptionOption }  }
/* Uint8Option: uint8->Complex64Option */ func MapComplex64OptionToUint8Option(m Uint8Option, f func(uint8) Complex64Option) Complex64OptionOption {  if m.IsDefined() { return Complex64Complex64(f(*m.value)) } else { return NoneComplex64OptionOption }  }
/* Uint8Option: uint8->Complex128Option */ func MapComplex128OptionToUint8Option(m Uint8Option, f func(uint8) Complex128Option) Complex128OptionOption {  if m.IsDefined() { return Complex128Complex128(f(*m.value)) } else { return NoneComplex128OptionOption }  }
/* Uint8Option: uint8->AnyOption */ func MapAnyOptionToUint8Option(m Uint8Option, f func(uint8) AnyOption) AnyOptionOption {  if m.IsDefined() { return AnyOptAny(f(*m.value)) } else { return NoneAnyOptionOption }  }
/* Uint8Option: uint8->[]bool */ func MapBoolArrToUint8Option(m Uint8Option, f func(uint8) []bool) BoolArrOption {  if m.IsDefined() { return BoolArrOpt(f(*m.value)) } else { return NoneBoolArrOption }  }
/* Uint8Option: uint8->[]string */ func MapStringArrToUint8Option(m Uint8Option, f func(uint8) []string) StringArrOption {  if m.IsDefined() { return StringArrOpt(f(*m.value)) } else { return NoneStringArrOption }  }
/* Uint8Option: uint8->[]int */ func MapIntArrToUint8Option(m Uint8Option, f func(uint8) []int) IntArrOption {  if m.IsDefined() { return IntArrOpt(f(*m.value)) } else { return NoneIntArrOption }  }
/* Uint8Option: uint8->[]int8 */ func MapInt8ArrToUint8Option(m Uint8Option, f func(uint8) []int8) Int8ArrOption {  if m.IsDefined() { return Int8ArrOpt(f(*m.value)) } else { return NoneInt8ArrOption }  }
/* Uint8Option: uint8->[]int16 */ func MapInt16ArrToUint8Option(m Uint8Option, f func(uint8) []int16) Int16ArrOption {  if m.IsDefined() { return Int16ArrOpt(f(*m.value)) } else { return NoneInt16ArrOption }  }
/* Uint8Option: uint8->[]int32 */ func MapInt32ArrToUint8Option(m Uint8Option, f func(uint8) []int32) Int32ArrOption {  if m.IsDefined() { return Int32ArrOpt(f(*m.value)) } else { return NoneInt32ArrOption }  }
/* Uint8Option: uint8->[]int64 */ func MapInt64ArrToUint8Option(m Uint8Option, f func(uint8) []int64) Int64ArrOption {  if m.IsDefined() { return Int64ArrOpt(f(*m.value)) } else { return NoneInt64ArrOption }  }
/* Uint8Option: uint8->[]uint */ func MapUintArrToUint8Option(m Uint8Option, f func(uint8) []uint) UintArrOption {  if m.IsDefined() { return UintArrOpt(f(*m.value)) } else { return NoneUintArrOption }  }
/* Uint8Option: uint8->[]uint8 */ func MapUint8ArrToUint8Option(m Uint8Option, f func(uint8) []uint8) Uint8ArrOption {  if m.IsDefined() { return Uint8ArrOpt(f(*m.value)) } else { return NoneUint8ArrOption }  }
/* Uint8Option: uint8->[]uint16 */ func MapUint16ArrToUint8Option(m Uint8Option, f func(uint8) []uint16) Uint16ArrOption {  if m.IsDefined() { return Uint16ArrOpt(f(*m.value)) } else { return NoneUint16ArrOption }  }
/* Uint8Option: uint8->[]uint32 */ func MapUint32ArrToUint8Option(m Uint8Option, f func(uint8) []uint32) Uint32ArrOption {  if m.IsDefined() { return Uint32ArrOpt(f(*m.value)) } else { return NoneUint32ArrOption }  }
/* Uint8Option: uint8->[]uint64 */ func MapUint64ArrToUint8Option(m Uint8Option, f func(uint8) []uint64) Uint64ArrOption {  if m.IsDefined() { return Uint64ArrOpt(f(*m.value)) } else { return NoneUint64ArrOption }  }
/* Uint8Option: uint8->[]uintptr */ func MapUintptrArrToUint8Option(m Uint8Option, f func(uint8) []uintptr) UintptrArrOption {  if m.IsDefined() { return UintptrArrOpt(f(*m.value)) } else { return NoneUintptrArrOption }  }
/* Uint8Option: uint8->[]byte */ func MapByteArrToUint8Option(m Uint8Option, f func(uint8) []byte) ByteArrOption {  if m.IsDefined() { return ByteArrOpt(f(*m.value)) } else { return NoneByteArrOption }  }
/* Uint8Option: uint8->[]rune */ func MapRuneArrToUint8Option(m Uint8Option, f func(uint8) []rune) RuneArrOption {  if m.IsDefined() { return RuneArrOpt(f(*m.value)) } else { return NoneRuneArrOption }  }
/* Uint8Option: uint8->[]float32 */ func MapFloat32ArrToUint8Option(m Uint8Option, f func(uint8) []float32) Float32ArrOption {  if m.IsDefined() { return Float32ArrOpt(f(*m.value)) } else { return NoneFloat32ArrOption }  }
/* Uint8Option: uint8->[]float64 */ func MapFloat64ArrToUint8Option(m Uint8Option, f func(uint8) []float64) Float64ArrOption {  if m.IsDefined() { return Float64ArrOpt(f(*m.value)) } else { return NoneFloat64ArrOption }  }
/* Uint8Option: uint8->[]complex64 */ func MapComplex64ArrToUint8Option(m Uint8Option, f func(uint8) []complex64) Complex64ArrOption {  if m.IsDefined() { return Complex64ArrOpt(f(*m.value)) } else { return NoneComplex64ArrOption }  }
/* Uint8Option: uint8->[]complex128 */ func MapComplex128ArrToUint8Option(m Uint8Option, f func(uint8) []complex128) Complex128ArrOption {  if m.IsDefined() { return Complex128ArrOpt(f(*m.value)) } else { return NoneComplex128ArrOption }  }
/* Uint8Option: uint8->[]Any */ func MapAnyArrToUint8Option(m Uint8Option, f func(uint8) []Any) AnyArrOption {  if m.IsDefined() { return AnyArrOpt(f(*m.value)) } else { return NoneAnyArrOption }  }
/* Uint8Option: uint8->BoolList */ func MapBoolListToUint8Option(m Uint8Option, f func(uint8) BoolList) BoolListOption {  if m.IsDefined() { return BoolListOpt(f(*m.value)) } else { return NoneBoolListOption }  }
/* Uint8Option: uint8->StringList */ func MapStringListToUint8Option(m Uint8Option, f func(uint8) StringList) StringListOption {  if m.IsDefined() { return StringListOpt(f(*m.value)) } else { return NoneStringListOption }  }
/* Uint8Option: uint8->IntList */ func MapIntListToUint8Option(m Uint8Option, f func(uint8) IntList) IntListOption {  if m.IsDefined() { return IntListOpt(f(*m.value)) } else { return NoneIntListOption }  }
/* Uint8Option: uint8->Int8List */ func MapInt8ListToUint8Option(m Uint8Option, f func(uint8) Int8List) Int8ListOption {  if m.IsDefined() { return Int8ListOpt(f(*m.value)) } else { return NoneInt8ListOption }  }
/* Uint8Option: uint8->Int16List */ func MapInt16ListToUint8Option(m Uint8Option, f func(uint8) Int16List) Int16ListOption {  if m.IsDefined() { return Int16ListOpt(f(*m.value)) } else { return NoneInt16ListOption }  }
/* Uint8Option: uint8->Int32List */ func MapInt32ListToUint8Option(m Uint8Option, f func(uint8) Int32List) Int32ListOption {  if m.IsDefined() { return Int32ListOpt(f(*m.value)) } else { return NoneInt32ListOption }  }
/* Uint8Option: uint8->Int64List */ func MapInt64ListToUint8Option(m Uint8Option, f func(uint8) Int64List) Int64ListOption {  if m.IsDefined() { return Int64ListOpt(f(*m.value)) } else { return NoneInt64ListOption }  }
/* Uint8Option: uint8->UintList */ func MapUintListToUint8Option(m Uint8Option, f func(uint8) UintList) UintListOption {  if m.IsDefined() { return UintListOpt(f(*m.value)) } else { return NoneUintListOption }  }
/* Uint8Option: uint8->Uint8List */ func MapUint8ListToUint8Option(m Uint8Option, f func(uint8) Uint8List) Uint8ListOption {  if m.IsDefined() { return Uint8ListOpt(f(*m.value)) } else { return NoneUint8ListOption }  }
/* Uint8Option: uint8->Uint16List */ func MapUint16ListToUint8Option(m Uint8Option, f func(uint8) Uint16List) Uint16ListOption {  if m.IsDefined() { return Uint16ListOpt(f(*m.value)) } else { return NoneUint16ListOption }  }
/* Uint8Option: uint8->Uint32List */ func MapUint32ListToUint8Option(m Uint8Option, f func(uint8) Uint32List) Uint32ListOption {  if m.IsDefined() { return Uint32ListOpt(f(*m.value)) } else { return NoneUint32ListOption }  }
/* Uint8Option: uint8->Uint64List */ func MapUint64ListToUint8Option(m Uint8Option, f func(uint8) Uint64List) Uint64ListOption {  if m.IsDefined() { return Uint64ListOpt(f(*m.value)) } else { return NoneUint64ListOption }  }
/* Uint8Option: uint8->UintptrList */ func MapUintptrListToUint8Option(m Uint8Option, f func(uint8) UintptrList) UintptrListOption {  if m.IsDefined() { return UintptrListOpt(f(*m.value)) } else { return NoneUintptrListOption }  }
/* Uint8Option: uint8->ByteList */ func MapByteListToUint8Option(m Uint8Option, f func(uint8) ByteList) ByteListOption {  if m.IsDefined() { return ByteListOpt(f(*m.value)) } else { return NoneByteListOption }  }
/* Uint8Option: uint8->RuneList */ func MapRuneListToUint8Option(m Uint8Option, f func(uint8) RuneList) RuneListOption {  if m.IsDefined() { return RuneListOpt(f(*m.value)) } else { return NoneRuneListOption }  }
/* Uint8Option: uint8->Float32List */ func MapFloat32ListToUint8Option(m Uint8Option, f func(uint8) Float32List) Float32ListOption {  if m.IsDefined() { return Float32ListOpt(f(*m.value)) } else { return NoneFloat32ListOption }  }
/* Uint8Option: uint8->Float64List */ func MapFloat64ListToUint8Option(m Uint8Option, f func(uint8) Float64List) Float64ListOption {  if m.IsDefined() { return Float64ListOpt(f(*m.value)) } else { return NoneFloat64ListOption }  }
/* Uint8Option: uint8->Complex64List */ func MapComplex64ListToUint8Option(m Uint8Option, f func(uint8) Complex64List) Complex64ListOption {  if m.IsDefined() { return Complex64ListOpt(f(*m.value)) } else { return NoneComplex64ListOption }  }
/* Uint8Option: uint8->Complex128List */ func MapComplex128ListToUint8Option(m Uint8Option, f func(uint8) Complex128List) Complex128ListOption {  if m.IsDefined() { return Complex128ListOpt(f(*m.value)) } else { return NoneComplex128ListOption }  }
/* Uint8Option: uint8->AnyList */ func MapAnyListToUint8Option(m Uint8Option, f func(uint8) AnyList) AnyListOption {  if m.IsDefined() { return AnyListOpt(f(*m.value)) } else { return NoneAnyListOption }  }
/* Uint16Option: uint16->bool */ func MapBoolToUint16Option(m Uint16Option, f func(uint16) bool) BoolOption {  if m.IsDefined() { return Bool(f(*m.value)) } else { return NoneBoolOption }  }
/* Uint16Option: uint16->string */ func MapStringToUint16Option(m Uint16Option, f func(uint16) string) StringOption {  if m.IsDefined() { return String(f(*m.value)) } else { return NoneStringOption }  }
/* Uint16Option: uint16->int */ func MapIntToUint16Option(m Uint16Option, f func(uint16) int) IntOption {  if m.IsDefined() { return Int(f(*m.value)) } else { return NoneIntOption }  }
/* Uint16Option: uint16->int8 */ func MapInt8ToUint16Option(m Uint16Option, f func(uint16) int8) Int8Option {  if m.IsDefined() { return Int8(f(*m.value)) } else { return NoneInt8Option }  }
/* Uint16Option: uint16->int16 */ func MapInt16ToUint16Option(m Uint16Option, f func(uint16) int16) Int16Option {  if m.IsDefined() { return Int16(f(*m.value)) } else { return NoneInt16Option }  }
/* Uint16Option: uint16->int32 */ func MapInt32ToUint16Option(m Uint16Option, f func(uint16) int32) Int32Option {  if m.IsDefined() { return Int32(f(*m.value)) } else { return NoneInt32Option }  }
/* Uint16Option: uint16->int64 */ func MapInt64ToUint16Option(m Uint16Option, f func(uint16) int64) Int64Option {  if m.IsDefined() { return Int64(f(*m.value)) } else { return NoneInt64Option }  }
/* Uint16Option: uint16->uint */ func MapUintToUint16Option(m Uint16Option, f func(uint16) uint) UintOption {  if m.IsDefined() { return Uint(f(*m.value)) } else { return NoneUintOption }  }
/* Uint16Option: uint16->uint8 */ func MapUint8ToUint16Option(m Uint16Option, f func(uint16) uint8) Uint8Option {  if m.IsDefined() { return Uint8(f(*m.value)) } else { return NoneUint8Option }  }
/* Uint16Option: uint16->uint16 */ func MapUint16ToUint16Option(m Uint16Option, f func(uint16) uint16) Uint16Option {  if m.IsDefined() { return Uint16(f(*m.value)) } else { return NoneUint16Option }  }
/* Uint16Option: uint16->uint32 */ func MapUint32ToUint16Option(m Uint16Option, f func(uint16) uint32) Uint32Option {  if m.IsDefined() { return Uint32(f(*m.value)) } else { return NoneUint32Option }  }
/* Uint16Option: uint16->uint64 */ func MapUint64ToUint16Option(m Uint16Option, f func(uint16) uint64) Uint64Option {  if m.IsDefined() { return Uint64(f(*m.value)) } else { return NoneUint64Option }  }
/* Uint16Option: uint16->uintptr */ func MapUintptrToUint16Option(m Uint16Option, f func(uint16) uintptr) UintptrOption {  if m.IsDefined() { return Uintptr(f(*m.value)) } else { return NoneUintptrOption }  }
/* Uint16Option: uint16->byte */ func MapByteToUint16Option(m Uint16Option, f func(uint16) byte) ByteOption {  if m.IsDefined() { return Byte(f(*m.value)) } else { return NoneByteOption }  }
/* Uint16Option: uint16->rune */ func MapRuneToUint16Option(m Uint16Option, f func(uint16) rune) RuneOption {  if m.IsDefined() { return Rune(f(*m.value)) } else { return NoneRuneOption }  }
/* Uint16Option: uint16->float32 */ func MapFloat32ToUint16Option(m Uint16Option, f func(uint16) float32) Float32Option {  if m.IsDefined() { return Float32(f(*m.value)) } else { return NoneFloat32Option }  }
/* Uint16Option: uint16->float64 */ func MapFloat64ToUint16Option(m Uint16Option, f func(uint16) float64) Float64Option {  if m.IsDefined() { return Float64(f(*m.value)) } else { return NoneFloat64Option }  }
/* Uint16Option: uint16->complex64 */ func MapComplex64ToUint16Option(m Uint16Option, f func(uint16) complex64) Complex64Option {  if m.IsDefined() { return Complex64(f(*m.value)) } else { return NoneComplex64Option }  }
/* Uint16Option: uint16->complex128 */ func MapComplex128ToUint16Option(m Uint16Option, f func(uint16) complex128) Complex128Option {  if m.IsDefined() { return Complex128(f(*m.value)) } else { return NoneComplex128Option }  }
/* Uint16Option: uint16->Any */ func MapAnyToUint16Option(m Uint16Option, f func(uint16) Any) AnyOption {  if m.IsDefined() { return AnyOpt(f(*m.value)) } else { return NoneAnyOption }  }
/* Uint16Option: uint16->BoolOption */ func MapBoolOptionToUint16Option(m Uint16Option, f func(uint16) BoolOption) BoolOptionOption {  if m.IsDefined() { return BoolBool(f(*m.value)) } else { return NoneBoolOptionOption }  }
/* Uint16Option: uint16->StringOption */ func MapStringOptionToUint16Option(m Uint16Option, f func(uint16) StringOption) StringOptionOption {  if m.IsDefined() { return StringString(f(*m.value)) } else { return NoneStringOptionOption }  }
/* Uint16Option: uint16->IntOption */ func MapIntOptionToUint16Option(m Uint16Option, f func(uint16) IntOption) IntOptionOption {  if m.IsDefined() { return IntInt(f(*m.value)) } else { return NoneIntOptionOption }  }
/* Uint16Option: uint16->Int8Option */ func MapInt8OptionToUint16Option(m Uint16Option, f func(uint16) Int8Option) Int8OptionOption {  if m.IsDefined() { return Int8Int8(f(*m.value)) } else { return NoneInt8OptionOption }  }
/* Uint16Option: uint16->Int16Option */ func MapInt16OptionToUint16Option(m Uint16Option, f func(uint16) Int16Option) Int16OptionOption {  if m.IsDefined() { return Int16Int16(f(*m.value)) } else { return NoneInt16OptionOption }  }
/* Uint16Option: uint16->Int32Option */ func MapInt32OptionToUint16Option(m Uint16Option, f func(uint16) Int32Option) Int32OptionOption {  if m.IsDefined() { return Int32Int32(f(*m.value)) } else { return NoneInt32OptionOption }  }
/* Uint16Option: uint16->Int64Option */ func MapInt64OptionToUint16Option(m Uint16Option, f func(uint16) Int64Option) Int64OptionOption {  if m.IsDefined() { return Int64Int64(f(*m.value)) } else { return NoneInt64OptionOption }  }
/* Uint16Option: uint16->UintOption */ func MapUintOptionToUint16Option(m Uint16Option, f func(uint16) UintOption) UintOptionOption {  if m.IsDefined() { return UintUint(f(*m.value)) } else { return NoneUintOptionOption }  }
/* Uint16Option: uint16->Uint8Option */ func MapUint8OptionToUint16Option(m Uint16Option, f func(uint16) Uint8Option) Uint8OptionOption {  if m.IsDefined() { return Uint8Uint8(f(*m.value)) } else { return NoneUint8OptionOption }  }
/* Uint16Option: uint16->Uint16Option */ func MapUint16OptionToUint16Option(m Uint16Option, f func(uint16) Uint16Option) Uint16OptionOption {  if m.IsDefined() { return Uint16Uint16(f(*m.value)) } else { return NoneUint16OptionOption }  }
/* Uint16Option: uint16->Uint32Option */ func MapUint32OptionToUint16Option(m Uint16Option, f func(uint16) Uint32Option) Uint32OptionOption {  if m.IsDefined() { return Uint32Uint32(f(*m.value)) } else { return NoneUint32OptionOption }  }
/* Uint16Option: uint16->Uint64Option */ func MapUint64OptionToUint16Option(m Uint16Option, f func(uint16) Uint64Option) Uint64OptionOption {  if m.IsDefined() { return Uint64Uint64(f(*m.value)) } else { return NoneUint64OptionOption }  }
/* Uint16Option: uint16->UintptrOption */ func MapUintptrOptionToUint16Option(m Uint16Option, f func(uint16) UintptrOption) UintptrOptionOption {  if m.IsDefined() { return UintptrUintptr(f(*m.value)) } else { return NoneUintptrOptionOption }  }
/* Uint16Option: uint16->ByteOption */ func MapByteOptionToUint16Option(m Uint16Option, f func(uint16) ByteOption) ByteOptionOption {  if m.IsDefined() { return ByteByte(f(*m.value)) } else { return NoneByteOptionOption }  }
/* Uint16Option: uint16->RuneOption */ func MapRuneOptionToUint16Option(m Uint16Option, f func(uint16) RuneOption) RuneOptionOption {  if m.IsDefined() { return RuneRune(f(*m.value)) } else { return NoneRuneOptionOption }  }
/* Uint16Option: uint16->Float32Option */ func MapFloat32OptionToUint16Option(m Uint16Option, f func(uint16) Float32Option) Float32OptionOption {  if m.IsDefined() { return Float32Float32(f(*m.value)) } else { return NoneFloat32OptionOption }  }
/* Uint16Option: uint16->Float64Option */ func MapFloat64OptionToUint16Option(m Uint16Option, f func(uint16) Float64Option) Float64OptionOption {  if m.IsDefined() { return Float64Float64(f(*m.value)) } else { return NoneFloat64OptionOption }  }
/* Uint16Option: uint16->Complex64Option */ func MapComplex64OptionToUint16Option(m Uint16Option, f func(uint16) Complex64Option) Complex64OptionOption {  if m.IsDefined() { return Complex64Complex64(f(*m.value)) } else { return NoneComplex64OptionOption }  }
/* Uint16Option: uint16->Complex128Option */ func MapComplex128OptionToUint16Option(m Uint16Option, f func(uint16) Complex128Option) Complex128OptionOption {  if m.IsDefined() { return Complex128Complex128(f(*m.value)) } else { return NoneComplex128OptionOption }  }
/* Uint16Option: uint16->AnyOption */ func MapAnyOptionToUint16Option(m Uint16Option, f func(uint16) AnyOption) AnyOptionOption {  if m.IsDefined() { return AnyOptAny(f(*m.value)) } else { return NoneAnyOptionOption }  }
/* Uint16Option: uint16->[]bool */ func MapBoolArrToUint16Option(m Uint16Option, f func(uint16) []bool) BoolArrOption {  if m.IsDefined() { return BoolArrOpt(f(*m.value)) } else { return NoneBoolArrOption }  }
/* Uint16Option: uint16->[]string */ func MapStringArrToUint16Option(m Uint16Option, f func(uint16) []string) StringArrOption {  if m.IsDefined() { return StringArrOpt(f(*m.value)) } else { return NoneStringArrOption }  }
/* Uint16Option: uint16->[]int */ func MapIntArrToUint16Option(m Uint16Option, f func(uint16) []int) IntArrOption {  if m.IsDefined() { return IntArrOpt(f(*m.value)) } else { return NoneIntArrOption }  }
/* Uint16Option: uint16->[]int8 */ func MapInt8ArrToUint16Option(m Uint16Option, f func(uint16) []int8) Int8ArrOption {  if m.IsDefined() { return Int8ArrOpt(f(*m.value)) } else { return NoneInt8ArrOption }  }
/* Uint16Option: uint16->[]int16 */ func MapInt16ArrToUint16Option(m Uint16Option, f func(uint16) []int16) Int16ArrOption {  if m.IsDefined() { return Int16ArrOpt(f(*m.value)) } else { return NoneInt16ArrOption }  }
/* Uint16Option: uint16->[]int32 */ func MapInt32ArrToUint16Option(m Uint16Option, f func(uint16) []int32) Int32ArrOption {  if m.IsDefined() { return Int32ArrOpt(f(*m.value)) } else { return NoneInt32ArrOption }  }
/* Uint16Option: uint16->[]int64 */ func MapInt64ArrToUint16Option(m Uint16Option, f func(uint16) []int64) Int64ArrOption {  if m.IsDefined() { return Int64ArrOpt(f(*m.value)) } else { return NoneInt64ArrOption }  }
/* Uint16Option: uint16->[]uint */ func MapUintArrToUint16Option(m Uint16Option, f func(uint16) []uint) UintArrOption {  if m.IsDefined() { return UintArrOpt(f(*m.value)) } else { return NoneUintArrOption }  }
/* Uint16Option: uint16->[]uint8 */ func MapUint8ArrToUint16Option(m Uint16Option, f func(uint16) []uint8) Uint8ArrOption {  if m.IsDefined() { return Uint8ArrOpt(f(*m.value)) } else { return NoneUint8ArrOption }  }
/* Uint16Option: uint16->[]uint16 */ func MapUint16ArrToUint16Option(m Uint16Option, f func(uint16) []uint16) Uint16ArrOption {  if m.IsDefined() { return Uint16ArrOpt(f(*m.value)) } else { return NoneUint16ArrOption }  }
/* Uint16Option: uint16->[]uint32 */ func MapUint32ArrToUint16Option(m Uint16Option, f func(uint16) []uint32) Uint32ArrOption {  if m.IsDefined() { return Uint32ArrOpt(f(*m.value)) } else { return NoneUint32ArrOption }  }
/* Uint16Option: uint16->[]uint64 */ func MapUint64ArrToUint16Option(m Uint16Option, f func(uint16) []uint64) Uint64ArrOption {  if m.IsDefined() { return Uint64ArrOpt(f(*m.value)) } else { return NoneUint64ArrOption }  }
/* Uint16Option: uint16->[]uintptr */ func MapUintptrArrToUint16Option(m Uint16Option, f func(uint16) []uintptr) UintptrArrOption {  if m.IsDefined() { return UintptrArrOpt(f(*m.value)) } else { return NoneUintptrArrOption }  }
/* Uint16Option: uint16->[]byte */ func MapByteArrToUint16Option(m Uint16Option, f func(uint16) []byte) ByteArrOption {  if m.IsDefined() { return ByteArrOpt(f(*m.value)) } else { return NoneByteArrOption }  }
/* Uint16Option: uint16->[]rune */ func MapRuneArrToUint16Option(m Uint16Option, f func(uint16) []rune) RuneArrOption {  if m.IsDefined() { return RuneArrOpt(f(*m.value)) } else { return NoneRuneArrOption }  }
/* Uint16Option: uint16->[]float32 */ func MapFloat32ArrToUint16Option(m Uint16Option, f func(uint16) []float32) Float32ArrOption {  if m.IsDefined() { return Float32ArrOpt(f(*m.value)) } else { return NoneFloat32ArrOption }  }
/* Uint16Option: uint16->[]float64 */ func MapFloat64ArrToUint16Option(m Uint16Option, f func(uint16) []float64) Float64ArrOption {  if m.IsDefined() { return Float64ArrOpt(f(*m.value)) } else { return NoneFloat64ArrOption }  }
/* Uint16Option: uint16->[]complex64 */ func MapComplex64ArrToUint16Option(m Uint16Option, f func(uint16) []complex64) Complex64ArrOption {  if m.IsDefined() { return Complex64ArrOpt(f(*m.value)) } else { return NoneComplex64ArrOption }  }
/* Uint16Option: uint16->[]complex128 */ func MapComplex128ArrToUint16Option(m Uint16Option, f func(uint16) []complex128) Complex128ArrOption {  if m.IsDefined() { return Complex128ArrOpt(f(*m.value)) } else { return NoneComplex128ArrOption }  }
/* Uint16Option: uint16->[]Any */ func MapAnyArrToUint16Option(m Uint16Option, f func(uint16) []Any) AnyArrOption {  if m.IsDefined() { return AnyArrOpt(f(*m.value)) } else { return NoneAnyArrOption }  }
/* Uint16Option: uint16->BoolList */ func MapBoolListToUint16Option(m Uint16Option, f func(uint16) BoolList) BoolListOption {  if m.IsDefined() { return BoolListOpt(f(*m.value)) } else { return NoneBoolListOption }  }
/* Uint16Option: uint16->StringList */ func MapStringListToUint16Option(m Uint16Option, f func(uint16) StringList) StringListOption {  if m.IsDefined() { return StringListOpt(f(*m.value)) } else { return NoneStringListOption }  }
/* Uint16Option: uint16->IntList */ func MapIntListToUint16Option(m Uint16Option, f func(uint16) IntList) IntListOption {  if m.IsDefined() { return IntListOpt(f(*m.value)) } else { return NoneIntListOption }  }
/* Uint16Option: uint16->Int8List */ func MapInt8ListToUint16Option(m Uint16Option, f func(uint16) Int8List) Int8ListOption {  if m.IsDefined() { return Int8ListOpt(f(*m.value)) } else { return NoneInt8ListOption }  }
/* Uint16Option: uint16->Int16List */ func MapInt16ListToUint16Option(m Uint16Option, f func(uint16) Int16List) Int16ListOption {  if m.IsDefined() { return Int16ListOpt(f(*m.value)) } else { return NoneInt16ListOption }  }
/* Uint16Option: uint16->Int32List */ func MapInt32ListToUint16Option(m Uint16Option, f func(uint16) Int32List) Int32ListOption {  if m.IsDefined() { return Int32ListOpt(f(*m.value)) } else { return NoneInt32ListOption }  }
/* Uint16Option: uint16->Int64List */ func MapInt64ListToUint16Option(m Uint16Option, f func(uint16) Int64List) Int64ListOption {  if m.IsDefined() { return Int64ListOpt(f(*m.value)) } else { return NoneInt64ListOption }  }
/* Uint16Option: uint16->UintList */ func MapUintListToUint16Option(m Uint16Option, f func(uint16) UintList) UintListOption {  if m.IsDefined() { return UintListOpt(f(*m.value)) } else { return NoneUintListOption }  }
/* Uint16Option: uint16->Uint8List */ func MapUint8ListToUint16Option(m Uint16Option, f func(uint16) Uint8List) Uint8ListOption {  if m.IsDefined() { return Uint8ListOpt(f(*m.value)) } else { return NoneUint8ListOption }  }
/* Uint16Option: uint16->Uint16List */ func MapUint16ListToUint16Option(m Uint16Option, f func(uint16) Uint16List) Uint16ListOption {  if m.IsDefined() { return Uint16ListOpt(f(*m.value)) } else { return NoneUint16ListOption }  }
/* Uint16Option: uint16->Uint32List */ func MapUint32ListToUint16Option(m Uint16Option, f func(uint16) Uint32List) Uint32ListOption {  if m.IsDefined() { return Uint32ListOpt(f(*m.value)) } else { return NoneUint32ListOption }  }
/* Uint16Option: uint16->Uint64List */ func MapUint64ListToUint16Option(m Uint16Option, f func(uint16) Uint64List) Uint64ListOption {  if m.IsDefined() { return Uint64ListOpt(f(*m.value)) } else { return NoneUint64ListOption }  }
/* Uint16Option: uint16->UintptrList */ func MapUintptrListToUint16Option(m Uint16Option, f func(uint16) UintptrList) UintptrListOption {  if m.IsDefined() { return UintptrListOpt(f(*m.value)) } else { return NoneUintptrListOption }  }
/* Uint16Option: uint16->ByteList */ func MapByteListToUint16Option(m Uint16Option, f func(uint16) ByteList) ByteListOption {  if m.IsDefined() { return ByteListOpt(f(*m.value)) } else { return NoneByteListOption }  }
/* Uint16Option: uint16->RuneList */ func MapRuneListToUint16Option(m Uint16Option, f func(uint16) RuneList) RuneListOption {  if m.IsDefined() { return RuneListOpt(f(*m.value)) } else { return NoneRuneListOption }  }
/* Uint16Option: uint16->Float32List */ func MapFloat32ListToUint16Option(m Uint16Option, f func(uint16) Float32List) Float32ListOption {  if m.IsDefined() { return Float32ListOpt(f(*m.value)) } else { return NoneFloat32ListOption }  }
/* Uint16Option: uint16->Float64List */ func MapFloat64ListToUint16Option(m Uint16Option, f func(uint16) Float64List) Float64ListOption {  if m.IsDefined() { return Float64ListOpt(f(*m.value)) } else { return NoneFloat64ListOption }  }
/* Uint16Option: uint16->Complex64List */ func MapComplex64ListToUint16Option(m Uint16Option, f func(uint16) Complex64List) Complex64ListOption {  if m.IsDefined() { return Complex64ListOpt(f(*m.value)) } else { return NoneComplex64ListOption }  }
/* Uint16Option: uint16->Complex128List */ func MapComplex128ListToUint16Option(m Uint16Option, f func(uint16) Complex128List) Complex128ListOption {  if m.IsDefined() { return Complex128ListOpt(f(*m.value)) } else { return NoneComplex128ListOption }  }
/* Uint16Option: uint16->AnyList */ func MapAnyListToUint16Option(m Uint16Option, f func(uint16) AnyList) AnyListOption {  if m.IsDefined() { return AnyListOpt(f(*m.value)) } else { return NoneAnyListOption }  }
/* Uint32Option: uint32->bool */ func MapBoolToUint32Option(m Uint32Option, f func(uint32) bool) BoolOption {  if m.IsDefined() { return Bool(f(*m.value)) } else { return NoneBoolOption }  }
/* Uint32Option: uint32->string */ func MapStringToUint32Option(m Uint32Option, f func(uint32) string) StringOption {  if m.IsDefined() { return String(f(*m.value)) } else { return NoneStringOption }  }
/* Uint32Option: uint32->int */ func MapIntToUint32Option(m Uint32Option, f func(uint32) int) IntOption {  if m.IsDefined() { return Int(f(*m.value)) } else { return NoneIntOption }  }
/* Uint32Option: uint32->int8 */ func MapInt8ToUint32Option(m Uint32Option, f func(uint32) int8) Int8Option {  if m.IsDefined() { return Int8(f(*m.value)) } else { return NoneInt8Option }  }
/* Uint32Option: uint32->int16 */ func MapInt16ToUint32Option(m Uint32Option, f func(uint32) int16) Int16Option {  if m.IsDefined() { return Int16(f(*m.value)) } else { return NoneInt16Option }  }
/* Uint32Option: uint32->int32 */ func MapInt32ToUint32Option(m Uint32Option, f func(uint32) int32) Int32Option {  if m.IsDefined() { return Int32(f(*m.value)) } else { return NoneInt32Option }  }
/* Uint32Option: uint32->int64 */ func MapInt64ToUint32Option(m Uint32Option, f func(uint32) int64) Int64Option {  if m.IsDefined() { return Int64(f(*m.value)) } else { return NoneInt64Option }  }
/* Uint32Option: uint32->uint */ func MapUintToUint32Option(m Uint32Option, f func(uint32) uint) UintOption {  if m.IsDefined() { return Uint(f(*m.value)) } else { return NoneUintOption }  }
/* Uint32Option: uint32->uint8 */ func MapUint8ToUint32Option(m Uint32Option, f func(uint32) uint8) Uint8Option {  if m.IsDefined() { return Uint8(f(*m.value)) } else { return NoneUint8Option }  }
/* Uint32Option: uint32->uint16 */ func MapUint16ToUint32Option(m Uint32Option, f func(uint32) uint16) Uint16Option {  if m.IsDefined() { return Uint16(f(*m.value)) } else { return NoneUint16Option }  }
/* Uint32Option: uint32->uint32 */ func MapUint32ToUint32Option(m Uint32Option, f func(uint32) uint32) Uint32Option {  if m.IsDefined() { return Uint32(f(*m.value)) } else { return NoneUint32Option }  }
/* Uint32Option: uint32->uint64 */ func MapUint64ToUint32Option(m Uint32Option, f func(uint32) uint64) Uint64Option {  if m.IsDefined() { return Uint64(f(*m.value)) } else { return NoneUint64Option }  }
/* Uint32Option: uint32->uintptr */ func MapUintptrToUint32Option(m Uint32Option, f func(uint32) uintptr) UintptrOption {  if m.IsDefined() { return Uintptr(f(*m.value)) } else { return NoneUintptrOption }  }
/* Uint32Option: uint32->byte */ func MapByteToUint32Option(m Uint32Option, f func(uint32) byte) ByteOption {  if m.IsDefined() { return Byte(f(*m.value)) } else { return NoneByteOption }  }
/* Uint32Option: uint32->rune */ func MapRuneToUint32Option(m Uint32Option, f func(uint32) rune) RuneOption {  if m.IsDefined() { return Rune(f(*m.value)) } else { return NoneRuneOption }  }
/* Uint32Option: uint32->float32 */ func MapFloat32ToUint32Option(m Uint32Option, f func(uint32) float32) Float32Option {  if m.IsDefined() { return Float32(f(*m.value)) } else { return NoneFloat32Option }  }
/* Uint32Option: uint32->float64 */ func MapFloat64ToUint32Option(m Uint32Option, f func(uint32) float64) Float64Option {  if m.IsDefined() { return Float64(f(*m.value)) } else { return NoneFloat64Option }  }
/* Uint32Option: uint32->complex64 */ func MapComplex64ToUint32Option(m Uint32Option, f func(uint32) complex64) Complex64Option {  if m.IsDefined() { return Complex64(f(*m.value)) } else { return NoneComplex64Option }  }
/* Uint32Option: uint32->complex128 */ func MapComplex128ToUint32Option(m Uint32Option, f func(uint32) complex128) Complex128Option {  if m.IsDefined() { return Complex128(f(*m.value)) } else { return NoneComplex128Option }  }
/* Uint32Option: uint32->Any */ func MapAnyToUint32Option(m Uint32Option, f func(uint32) Any) AnyOption {  if m.IsDefined() { return AnyOpt(f(*m.value)) } else { return NoneAnyOption }  }
/* Uint32Option: uint32->BoolOption */ func MapBoolOptionToUint32Option(m Uint32Option, f func(uint32) BoolOption) BoolOptionOption {  if m.IsDefined() { return BoolBool(f(*m.value)) } else { return NoneBoolOptionOption }  }
/* Uint32Option: uint32->StringOption */ func MapStringOptionToUint32Option(m Uint32Option, f func(uint32) StringOption) StringOptionOption {  if m.IsDefined() { return StringString(f(*m.value)) } else { return NoneStringOptionOption }  }
/* Uint32Option: uint32->IntOption */ func MapIntOptionToUint32Option(m Uint32Option, f func(uint32) IntOption) IntOptionOption {  if m.IsDefined() { return IntInt(f(*m.value)) } else { return NoneIntOptionOption }  }
/* Uint32Option: uint32->Int8Option */ func MapInt8OptionToUint32Option(m Uint32Option, f func(uint32) Int8Option) Int8OptionOption {  if m.IsDefined() { return Int8Int8(f(*m.value)) } else { return NoneInt8OptionOption }  }
/* Uint32Option: uint32->Int16Option */ func MapInt16OptionToUint32Option(m Uint32Option, f func(uint32) Int16Option) Int16OptionOption {  if m.IsDefined() { return Int16Int16(f(*m.value)) } else { return NoneInt16OptionOption }  }
/* Uint32Option: uint32->Int32Option */ func MapInt32OptionToUint32Option(m Uint32Option, f func(uint32) Int32Option) Int32OptionOption {  if m.IsDefined() { return Int32Int32(f(*m.value)) } else { return NoneInt32OptionOption }  }
/* Uint32Option: uint32->Int64Option */ func MapInt64OptionToUint32Option(m Uint32Option, f func(uint32) Int64Option) Int64OptionOption {  if m.IsDefined() { return Int64Int64(f(*m.value)) } else { return NoneInt64OptionOption }  }
/* Uint32Option: uint32->UintOption */ func MapUintOptionToUint32Option(m Uint32Option, f func(uint32) UintOption) UintOptionOption {  if m.IsDefined() { return UintUint(f(*m.value)) } else { return NoneUintOptionOption }  }
/* Uint32Option: uint32->Uint8Option */ func MapUint8OptionToUint32Option(m Uint32Option, f func(uint32) Uint8Option) Uint8OptionOption {  if m.IsDefined() { return Uint8Uint8(f(*m.value)) } else { return NoneUint8OptionOption }  }
/* Uint32Option: uint32->Uint16Option */ func MapUint16OptionToUint32Option(m Uint32Option, f func(uint32) Uint16Option) Uint16OptionOption {  if m.IsDefined() { return Uint16Uint16(f(*m.value)) } else { return NoneUint16OptionOption }  }
/* Uint32Option: uint32->Uint32Option */ func MapUint32OptionToUint32Option(m Uint32Option, f func(uint32) Uint32Option) Uint32OptionOption {  if m.IsDefined() { return Uint32Uint32(f(*m.value)) } else { return NoneUint32OptionOption }  }
/* Uint32Option: uint32->Uint64Option */ func MapUint64OptionToUint32Option(m Uint32Option, f func(uint32) Uint64Option) Uint64OptionOption {  if m.IsDefined() { return Uint64Uint64(f(*m.value)) } else { return NoneUint64OptionOption }  }
/* Uint32Option: uint32->UintptrOption */ func MapUintptrOptionToUint32Option(m Uint32Option, f func(uint32) UintptrOption) UintptrOptionOption {  if m.IsDefined() { return UintptrUintptr(f(*m.value)) } else { return NoneUintptrOptionOption }  }
/* Uint32Option: uint32->ByteOption */ func MapByteOptionToUint32Option(m Uint32Option, f func(uint32) ByteOption) ByteOptionOption {  if m.IsDefined() { return ByteByte(f(*m.value)) } else { return NoneByteOptionOption }  }
/* Uint32Option: uint32->RuneOption */ func MapRuneOptionToUint32Option(m Uint32Option, f func(uint32) RuneOption) RuneOptionOption {  if m.IsDefined() { return RuneRune(f(*m.value)) } else { return NoneRuneOptionOption }  }
/* Uint32Option: uint32->Float32Option */ func MapFloat32OptionToUint32Option(m Uint32Option, f func(uint32) Float32Option) Float32OptionOption {  if m.IsDefined() { return Float32Float32(f(*m.value)) } else { return NoneFloat32OptionOption }  }
/* Uint32Option: uint32->Float64Option */ func MapFloat64OptionToUint32Option(m Uint32Option, f func(uint32) Float64Option) Float64OptionOption {  if m.IsDefined() { return Float64Float64(f(*m.value)) } else { return NoneFloat64OptionOption }  }
/* Uint32Option: uint32->Complex64Option */ func MapComplex64OptionToUint32Option(m Uint32Option, f func(uint32) Complex64Option) Complex64OptionOption {  if m.IsDefined() { return Complex64Complex64(f(*m.value)) } else { return NoneComplex64OptionOption }  }
/* Uint32Option: uint32->Complex128Option */ func MapComplex128OptionToUint32Option(m Uint32Option, f func(uint32) Complex128Option) Complex128OptionOption {  if m.IsDefined() { return Complex128Complex128(f(*m.value)) } else { return NoneComplex128OptionOption }  }
/* Uint32Option: uint32->AnyOption */ func MapAnyOptionToUint32Option(m Uint32Option, f func(uint32) AnyOption) AnyOptionOption {  if m.IsDefined() { return AnyOptAny(f(*m.value)) } else { return NoneAnyOptionOption }  }
/* Uint32Option: uint32->[]bool */ func MapBoolArrToUint32Option(m Uint32Option, f func(uint32) []bool) BoolArrOption {  if m.IsDefined() { return BoolArrOpt(f(*m.value)) } else { return NoneBoolArrOption }  }
/* Uint32Option: uint32->[]string */ func MapStringArrToUint32Option(m Uint32Option, f func(uint32) []string) StringArrOption {  if m.IsDefined() { return StringArrOpt(f(*m.value)) } else { return NoneStringArrOption }  }
/* Uint32Option: uint32->[]int */ func MapIntArrToUint32Option(m Uint32Option, f func(uint32) []int) IntArrOption {  if m.IsDefined() { return IntArrOpt(f(*m.value)) } else { return NoneIntArrOption }  }
/* Uint32Option: uint32->[]int8 */ func MapInt8ArrToUint32Option(m Uint32Option, f func(uint32) []int8) Int8ArrOption {  if m.IsDefined() { return Int8ArrOpt(f(*m.value)) } else { return NoneInt8ArrOption }  }
/* Uint32Option: uint32->[]int16 */ func MapInt16ArrToUint32Option(m Uint32Option, f func(uint32) []int16) Int16ArrOption {  if m.IsDefined() { return Int16ArrOpt(f(*m.value)) } else { return NoneInt16ArrOption }  }
/* Uint32Option: uint32->[]int32 */ func MapInt32ArrToUint32Option(m Uint32Option, f func(uint32) []int32) Int32ArrOption {  if m.IsDefined() { return Int32ArrOpt(f(*m.value)) } else { return NoneInt32ArrOption }  }
/* Uint32Option: uint32->[]int64 */ func MapInt64ArrToUint32Option(m Uint32Option, f func(uint32) []int64) Int64ArrOption {  if m.IsDefined() { return Int64ArrOpt(f(*m.value)) } else { return NoneInt64ArrOption }  }
/* Uint32Option: uint32->[]uint */ func MapUintArrToUint32Option(m Uint32Option, f func(uint32) []uint) UintArrOption {  if m.IsDefined() { return UintArrOpt(f(*m.value)) } else { return NoneUintArrOption }  }
/* Uint32Option: uint32->[]uint8 */ func MapUint8ArrToUint32Option(m Uint32Option, f func(uint32) []uint8) Uint8ArrOption {  if m.IsDefined() { return Uint8ArrOpt(f(*m.value)) } else { return NoneUint8ArrOption }  }
/* Uint32Option: uint32->[]uint16 */ func MapUint16ArrToUint32Option(m Uint32Option, f func(uint32) []uint16) Uint16ArrOption {  if m.IsDefined() { return Uint16ArrOpt(f(*m.value)) } else { return NoneUint16ArrOption }  }
/* Uint32Option: uint32->[]uint32 */ func MapUint32ArrToUint32Option(m Uint32Option, f func(uint32) []uint32) Uint32ArrOption {  if m.IsDefined() { return Uint32ArrOpt(f(*m.value)) } else { return NoneUint32ArrOption }  }
/* Uint32Option: uint32->[]uint64 */ func MapUint64ArrToUint32Option(m Uint32Option, f func(uint32) []uint64) Uint64ArrOption {  if m.IsDefined() { return Uint64ArrOpt(f(*m.value)) } else { return NoneUint64ArrOption }  }
/* Uint32Option: uint32->[]uintptr */ func MapUintptrArrToUint32Option(m Uint32Option, f func(uint32) []uintptr) UintptrArrOption {  if m.IsDefined() { return UintptrArrOpt(f(*m.value)) } else { return NoneUintptrArrOption }  }
/* Uint32Option: uint32->[]byte */ func MapByteArrToUint32Option(m Uint32Option, f func(uint32) []byte) ByteArrOption {  if m.IsDefined() { return ByteArrOpt(f(*m.value)) } else { return NoneByteArrOption }  }
/* Uint32Option: uint32->[]rune */ func MapRuneArrToUint32Option(m Uint32Option, f func(uint32) []rune) RuneArrOption {  if m.IsDefined() { return RuneArrOpt(f(*m.value)) } else { return NoneRuneArrOption }  }
/* Uint32Option: uint32->[]float32 */ func MapFloat32ArrToUint32Option(m Uint32Option, f func(uint32) []float32) Float32ArrOption {  if m.IsDefined() { return Float32ArrOpt(f(*m.value)) } else { return NoneFloat32ArrOption }  }
/* Uint32Option: uint32->[]float64 */ func MapFloat64ArrToUint32Option(m Uint32Option, f func(uint32) []float64) Float64ArrOption {  if m.IsDefined() { return Float64ArrOpt(f(*m.value)) } else { return NoneFloat64ArrOption }  }
/* Uint32Option: uint32->[]complex64 */ func MapComplex64ArrToUint32Option(m Uint32Option, f func(uint32) []complex64) Complex64ArrOption {  if m.IsDefined() { return Complex64ArrOpt(f(*m.value)) } else { return NoneComplex64ArrOption }  }
/* Uint32Option: uint32->[]complex128 */ func MapComplex128ArrToUint32Option(m Uint32Option, f func(uint32) []complex128) Complex128ArrOption {  if m.IsDefined() { return Complex128ArrOpt(f(*m.value)) } else { return NoneComplex128ArrOption }  }
/* Uint32Option: uint32->[]Any */ func MapAnyArrToUint32Option(m Uint32Option, f func(uint32) []Any) AnyArrOption {  if m.IsDefined() { return AnyArrOpt(f(*m.value)) } else { return NoneAnyArrOption }  }
/* Uint32Option: uint32->BoolList */ func MapBoolListToUint32Option(m Uint32Option, f func(uint32) BoolList) BoolListOption {  if m.IsDefined() { return BoolListOpt(f(*m.value)) } else { return NoneBoolListOption }  }
/* Uint32Option: uint32->StringList */ func MapStringListToUint32Option(m Uint32Option, f func(uint32) StringList) StringListOption {  if m.IsDefined() { return StringListOpt(f(*m.value)) } else { return NoneStringListOption }  }
/* Uint32Option: uint32->IntList */ func MapIntListToUint32Option(m Uint32Option, f func(uint32) IntList) IntListOption {  if m.IsDefined() { return IntListOpt(f(*m.value)) } else { return NoneIntListOption }  }
/* Uint32Option: uint32->Int8List */ func MapInt8ListToUint32Option(m Uint32Option, f func(uint32) Int8List) Int8ListOption {  if m.IsDefined() { return Int8ListOpt(f(*m.value)) } else { return NoneInt8ListOption }  }
/* Uint32Option: uint32->Int16List */ func MapInt16ListToUint32Option(m Uint32Option, f func(uint32) Int16List) Int16ListOption {  if m.IsDefined() { return Int16ListOpt(f(*m.value)) } else { return NoneInt16ListOption }  }
/* Uint32Option: uint32->Int32List */ func MapInt32ListToUint32Option(m Uint32Option, f func(uint32) Int32List) Int32ListOption {  if m.IsDefined() { return Int32ListOpt(f(*m.value)) } else { return NoneInt32ListOption }  }
/* Uint32Option: uint32->Int64List */ func MapInt64ListToUint32Option(m Uint32Option, f func(uint32) Int64List) Int64ListOption {  if m.IsDefined() { return Int64ListOpt(f(*m.value)) } else { return NoneInt64ListOption }  }
/* Uint32Option: uint32->UintList */ func MapUintListToUint32Option(m Uint32Option, f func(uint32) UintList) UintListOption {  if m.IsDefined() { return UintListOpt(f(*m.value)) } else { return NoneUintListOption }  }
/* Uint32Option: uint32->Uint8List */ func MapUint8ListToUint32Option(m Uint32Option, f func(uint32) Uint8List) Uint8ListOption {  if m.IsDefined() { return Uint8ListOpt(f(*m.value)) } else { return NoneUint8ListOption }  }
/* Uint32Option: uint32->Uint16List */ func MapUint16ListToUint32Option(m Uint32Option, f func(uint32) Uint16List) Uint16ListOption {  if m.IsDefined() { return Uint16ListOpt(f(*m.value)) } else { return NoneUint16ListOption }  }
/* Uint32Option: uint32->Uint32List */ func MapUint32ListToUint32Option(m Uint32Option, f func(uint32) Uint32List) Uint32ListOption {  if m.IsDefined() { return Uint32ListOpt(f(*m.value)) } else { return NoneUint32ListOption }  }
/* Uint32Option: uint32->Uint64List */ func MapUint64ListToUint32Option(m Uint32Option, f func(uint32) Uint64List) Uint64ListOption {  if m.IsDefined() { return Uint64ListOpt(f(*m.value)) } else { return NoneUint64ListOption }  }
/* Uint32Option: uint32->UintptrList */ func MapUintptrListToUint32Option(m Uint32Option, f func(uint32) UintptrList) UintptrListOption {  if m.IsDefined() { return UintptrListOpt(f(*m.value)) } else { return NoneUintptrListOption }  }
/* Uint32Option: uint32->ByteList */ func MapByteListToUint32Option(m Uint32Option, f func(uint32) ByteList) ByteListOption {  if m.IsDefined() { return ByteListOpt(f(*m.value)) } else { return NoneByteListOption }  }
/* Uint32Option: uint32->RuneList */ func MapRuneListToUint32Option(m Uint32Option, f func(uint32) RuneList) RuneListOption {  if m.IsDefined() { return RuneListOpt(f(*m.value)) } else { return NoneRuneListOption }  }
/* Uint32Option: uint32->Float32List */ func MapFloat32ListToUint32Option(m Uint32Option, f func(uint32) Float32List) Float32ListOption {  if m.IsDefined() { return Float32ListOpt(f(*m.value)) } else { return NoneFloat32ListOption }  }
/* Uint32Option: uint32->Float64List */ func MapFloat64ListToUint32Option(m Uint32Option, f func(uint32) Float64List) Float64ListOption {  if m.IsDefined() { return Float64ListOpt(f(*m.value)) } else { return NoneFloat64ListOption }  }
/* Uint32Option: uint32->Complex64List */ func MapComplex64ListToUint32Option(m Uint32Option, f func(uint32) Complex64List) Complex64ListOption {  if m.IsDefined() { return Complex64ListOpt(f(*m.value)) } else { return NoneComplex64ListOption }  }
/* Uint32Option: uint32->Complex128List */ func MapComplex128ListToUint32Option(m Uint32Option, f func(uint32) Complex128List) Complex128ListOption {  if m.IsDefined() { return Complex128ListOpt(f(*m.value)) } else { return NoneComplex128ListOption }  }
/* Uint32Option: uint32->AnyList */ func MapAnyListToUint32Option(m Uint32Option, f func(uint32) AnyList) AnyListOption {  if m.IsDefined() { return AnyListOpt(f(*m.value)) } else { return NoneAnyListOption }  }
/* Uint64Option: uint64->bool */ func MapBoolToUint64Option(m Uint64Option, f func(uint64) bool) BoolOption {  if m.IsDefined() { return Bool(f(*m.value)) } else { return NoneBoolOption }  }
/* Uint64Option: uint64->string */ func MapStringToUint64Option(m Uint64Option, f func(uint64) string) StringOption {  if m.IsDefined() { return String(f(*m.value)) } else { return NoneStringOption }  }
/* Uint64Option: uint64->int */ func MapIntToUint64Option(m Uint64Option, f func(uint64) int) IntOption {  if m.IsDefined() { return Int(f(*m.value)) } else { return NoneIntOption }  }
/* Uint64Option: uint64->int8 */ func MapInt8ToUint64Option(m Uint64Option, f func(uint64) int8) Int8Option {  if m.IsDefined() { return Int8(f(*m.value)) } else { return NoneInt8Option }  }
/* Uint64Option: uint64->int16 */ func MapInt16ToUint64Option(m Uint64Option, f func(uint64) int16) Int16Option {  if m.IsDefined() { return Int16(f(*m.value)) } else { return NoneInt16Option }  }
/* Uint64Option: uint64->int32 */ func MapInt32ToUint64Option(m Uint64Option, f func(uint64) int32) Int32Option {  if m.IsDefined() { return Int32(f(*m.value)) } else { return NoneInt32Option }  }
/* Uint64Option: uint64->int64 */ func MapInt64ToUint64Option(m Uint64Option, f func(uint64) int64) Int64Option {  if m.IsDefined() { return Int64(f(*m.value)) } else { return NoneInt64Option }  }
/* Uint64Option: uint64->uint */ func MapUintToUint64Option(m Uint64Option, f func(uint64) uint) UintOption {  if m.IsDefined() { return Uint(f(*m.value)) } else { return NoneUintOption }  }
/* Uint64Option: uint64->uint8 */ func MapUint8ToUint64Option(m Uint64Option, f func(uint64) uint8) Uint8Option {  if m.IsDefined() { return Uint8(f(*m.value)) } else { return NoneUint8Option }  }
/* Uint64Option: uint64->uint16 */ func MapUint16ToUint64Option(m Uint64Option, f func(uint64) uint16) Uint16Option {  if m.IsDefined() { return Uint16(f(*m.value)) } else { return NoneUint16Option }  }
/* Uint64Option: uint64->uint32 */ func MapUint32ToUint64Option(m Uint64Option, f func(uint64) uint32) Uint32Option {  if m.IsDefined() { return Uint32(f(*m.value)) } else { return NoneUint32Option }  }
/* Uint64Option: uint64->uint64 */ func MapUint64ToUint64Option(m Uint64Option, f func(uint64) uint64) Uint64Option {  if m.IsDefined() { return Uint64(f(*m.value)) } else { return NoneUint64Option }  }
/* Uint64Option: uint64->uintptr */ func MapUintptrToUint64Option(m Uint64Option, f func(uint64) uintptr) UintptrOption {  if m.IsDefined() { return Uintptr(f(*m.value)) } else { return NoneUintptrOption }  }
/* Uint64Option: uint64->byte */ func MapByteToUint64Option(m Uint64Option, f func(uint64) byte) ByteOption {  if m.IsDefined() { return Byte(f(*m.value)) } else { return NoneByteOption }  }
/* Uint64Option: uint64->rune */ func MapRuneToUint64Option(m Uint64Option, f func(uint64) rune) RuneOption {  if m.IsDefined() { return Rune(f(*m.value)) } else { return NoneRuneOption }  }
/* Uint64Option: uint64->float32 */ func MapFloat32ToUint64Option(m Uint64Option, f func(uint64) float32) Float32Option {  if m.IsDefined() { return Float32(f(*m.value)) } else { return NoneFloat32Option }  }
/* Uint64Option: uint64->float64 */ func MapFloat64ToUint64Option(m Uint64Option, f func(uint64) float64) Float64Option {  if m.IsDefined() { return Float64(f(*m.value)) } else { return NoneFloat64Option }  }
/* Uint64Option: uint64->complex64 */ func MapComplex64ToUint64Option(m Uint64Option, f func(uint64) complex64) Complex64Option {  if m.IsDefined() { return Complex64(f(*m.value)) } else { return NoneComplex64Option }  }
/* Uint64Option: uint64->complex128 */ func MapComplex128ToUint64Option(m Uint64Option, f func(uint64) complex128) Complex128Option {  if m.IsDefined() { return Complex128(f(*m.value)) } else { return NoneComplex128Option }  }
/* Uint64Option: uint64->Any */ func MapAnyToUint64Option(m Uint64Option, f func(uint64) Any) AnyOption {  if m.IsDefined() { return AnyOpt(f(*m.value)) } else { return NoneAnyOption }  }
/* Uint64Option: uint64->BoolOption */ func MapBoolOptionToUint64Option(m Uint64Option, f func(uint64) BoolOption) BoolOptionOption {  if m.IsDefined() { return BoolBool(f(*m.value)) } else { return NoneBoolOptionOption }  }
/* Uint64Option: uint64->StringOption */ func MapStringOptionToUint64Option(m Uint64Option, f func(uint64) StringOption) StringOptionOption {  if m.IsDefined() { return StringString(f(*m.value)) } else { return NoneStringOptionOption }  }
/* Uint64Option: uint64->IntOption */ func MapIntOptionToUint64Option(m Uint64Option, f func(uint64) IntOption) IntOptionOption {  if m.IsDefined() { return IntInt(f(*m.value)) } else { return NoneIntOptionOption }  }
/* Uint64Option: uint64->Int8Option */ func MapInt8OptionToUint64Option(m Uint64Option, f func(uint64) Int8Option) Int8OptionOption {  if m.IsDefined() { return Int8Int8(f(*m.value)) } else { return NoneInt8OptionOption }  }
/* Uint64Option: uint64->Int16Option */ func MapInt16OptionToUint64Option(m Uint64Option, f func(uint64) Int16Option) Int16OptionOption {  if m.IsDefined() { return Int16Int16(f(*m.value)) } else { return NoneInt16OptionOption }  }
/* Uint64Option: uint64->Int32Option */ func MapInt32OptionToUint64Option(m Uint64Option, f func(uint64) Int32Option) Int32OptionOption {  if m.IsDefined() { return Int32Int32(f(*m.value)) } else { return NoneInt32OptionOption }  }
/* Uint64Option: uint64->Int64Option */ func MapInt64OptionToUint64Option(m Uint64Option, f func(uint64) Int64Option) Int64OptionOption {  if m.IsDefined() { return Int64Int64(f(*m.value)) } else { return NoneInt64OptionOption }  }
/* Uint64Option: uint64->UintOption */ func MapUintOptionToUint64Option(m Uint64Option, f func(uint64) UintOption) UintOptionOption {  if m.IsDefined() { return UintUint(f(*m.value)) } else { return NoneUintOptionOption }  }
/* Uint64Option: uint64->Uint8Option */ func MapUint8OptionToUint64Option(m Uint64Option, f func(uint64) Uint8Option) Uint8OptionOption {  if m.IsDefined() { return Uint8Uint8(f(*m.value)) } else { return NoneUint8OptionOption }  }
/* Uint64Option: uint64->Uint16Option */ func MapUint16OptionToUint64Option(m Uint64Option, f func(uint64) Uint16Option) Uint16OptionOption {  if m.IsDefined() { return Uint16Uint16(f(*m.value)) } else { return NoneUint16OptionOption }  }
/* Uint64Option: uint64->Uint32Option */ func MapUint32OptionToUint64Option(m Uint64Option, f func(uint64) Uint32Option) Uint32OptionOption {  if m.IsDefined() { return Uint32Uint32(f(*m.value)) } else { return NoneUint32OptionOption }  }
/* Uint64Option: uint64->Uint64Option */ func MapUint64OptionToUint64Option(m Uint64Option, f func(uint64) Uint64Option) Uint64OptionOption {  if m.IsDefined() { return Uint64Uint64(f(*m.value)) } else { return NoneUint64OptionOption }  }
/* Uint64Option: uint64->UintptrOption */ func MapUintptrOptionToUint64Option(m Uint64Option, f func(uint64) UintptrOption) UintptrOptionOption {  if m.IsDefined() { return UintptrUintptr(f(*m.value)) } else { return NoneUintptrOptionOption }  }
/* Uint64Option: uint64->ByteOption */ func MapByteOptionToUint64Option(m Uint64Option, f func(uint64) ByteOption) ByteOptionOption {  if m.IsDefined() { return ByteByte(f(*m.value)) } else { return NoneByteOptionOption }  }
/* Uint64Option: uint64->RuneOption */ func MapRuneOptionToUint64Option(m Uint64Option, f func(uint64) RuneOption) RuneOptionOption {  if m.IsDefined() { return RuneRune(f(*m.value)) } else { return NoneRuneOptionOption }  }
/* Uint64Option: uint64->Float32Option */ func MapFloat32OptionToUint64Option(m Uint64Option, f func(uint64) Float32Option) Float32OptionOption {  if m.IsDefined() { return Float32Float32(f(*m.value)) } else { return NoneFloat32OptionOption }  }
/* Uint64Option: uint64->Float64Option */ func MapFloat64OptionToUint64Option(m Uint64Option, f func(uint64) Float64Option) Float64OptionOption {  if m.IsDefined() { return Float64Float64(f(*m.value)) } else { return NoneFloat64OptionOption }  }
/* Uint64Option: uint64->Complex64Option */ func MapComplex64OptionToUint64Option(m Uint64Option, f func(uint64) Complex64Option) Complex64OptionOption {  if m.IsDefined() { return Complex64Complex64(f(*m.value)) } else { return NoneComplex64OptionOption }  }
/* Uint64Option: uint64->Complex128Option */ func MapComplex128OptionToUint64Option(m Uint64Option, f func(uint64) Complex128Option) Complex128OptionOption {  if m.IsDefined() { return Complex128Complex128(f(*m.value)) } else { return NoneComplex128OptionOption }  }
/* Uint64Option: uint64->AnyOption */ func MapAnyOptionToUint64Option(m Uint64Option, f func(uint64) AnyOption) AnyOptionOption {  if m.IsDefined() { return AnyOptAny(f(*m.value)) } else { return NoneAnyOptionOption }  }
/* Uint64Option: uint64->[]bool */ func MapBoolArrToUint64Option(m Uint64Option, f func(uint64) []bool) BoolArrOption {  if m.IsDefined() { return BoolArrOpt(f(*m.value)) } else { return NoneBoolArrOption }  }
/* Uint64Option: uint64->[]string */ func MapStringArrToUint64Option(m Uint64Option, f func(uint64) []string) StringArrOption {  if m.IsDefined() { return StringArrOpt(f(*m.value)) } else { return NoneStringArrOption }  }
/* Uint64Option: uint64->[]int */ func MapIntArrToUint64Option(m Uint64Option, f func(uint64) []int) IntArrOption {  if m.IsDefined() { return IntArrOpt(f(*m.value)) } else { return NoneIntArrOption }  }
/* Uint64Option: uint64->[]int8 */ func MapInt8ArrToUint64Option(m Uint64Option, f func(uint64) []int8) Int8ArrOption {  if m.IsDefined() { return Int8ArrOpt(f(*m.value)) } else { return NoneInt8ArrOption }  }
/* Uint64Option: uint64->[]int16 */ func MapInt16ArrToUint64Option(m Uint64Option, f func(uint64) []int16) Int16ArrOption {  if m.IsDefined() { return Int16ArrOpt(f(*m.value)) } else { return NoneInt16ArrOption }  }
/* Uint64Option: uint64->[]int32 */ func MapInt32ArrToUint64Option(m Uint64Option, f func(uint64) []int32) Int32ArrOption {  if m.IsDefined() { return Int32ArrOpt(f(*m.value)) } else { return NoneInt32ArrOption }  }
/* Uint64Option: uint64->[]int64 */ func MapInt64ArrToUint64Option(m Uint64Option, f func(uint64) []int64) Int64ArrOption {  if m.IsDefined() { return Int64ArrOpt(f(*m.value)) } else { return NoneInt64ArrOption }  }
/* Uint64Option: uint64->[]uint */ func MapUintArrToUint64Option(m Uint64Option, f func(uint64) []uint) UintArrOption {  if m.IsDefined() { return UintArrOpt(f(*m.value)) } else { return NoneUintArrOption }  }
/* Uint64Option: uint64->[]uint8 */ func MapUint8ArrToUint64Option(m Uint64Option, f func(uint64) []uint8) Uint8ArrOption {  if m.IsDefined() { return Uint8ArrOpt(f(*m.value)) } else { return NoneUint8ArrOption }  }
/* Uint64Option: uint64->[]uint16 */ func MapUint16ArrToUint64Option(m Uint64Option, f func(uint64) []uint16) Uint16ArrOption {  if m.IsDefined() { return Uint16ArrOpt(f(*m.value)) } else { return NoneUint16ArrOption }  }
/* Uint64Option: uint64->[]uint32 */ func MapUint32ArrToUint64Option(m Uint64Option, f func(uint64) []uint32) Uint32ArrOption {  if m.IsDefined() { return Uint32ArrOpt(f(*m.value)) } else { return NoneUint32ArrOption }  }
/* Uint64Option: uint64->[]uint64 */ func MapUint64ArrToUint64Option(m Uint64Option, f func(uint64) []uint64) Uint64ArrOption {  if m.IsDefined() { return Uint64ArrOpt(f(*m.value)) } else { return NoneUint64ArrOption }  }
/* Uint64Option: uint64->[]uintptr */ func MapUintptrArrToUint64Option(m Uint64Option, f func(uint64) []uintptr) UintptrArrOption {  if m.IsDefined() { return UintptrArrOpt(f(*m.value)) } else { return NoneUintptrArrOption }  }
/* Uint64Option: uint64->[]byte */ func MapByteArrToUint64Option(m Uint64Option, f func(uint64) []byte) ByteArrOption {  if m.IsDefined() { return ByteArrOpt(f(*m.value)) } else { return NoneByteArrOption }  }
/* Uint64Option: uint64->[]rune */ func MapRuneArrToUint64Option(m Uint64Option, f func(uint64) []rune) RuneArrOption {  if m.IsDefined() { return RuneArrOpt(f(*m.value)) } else { return NoneRuneArrOption }  }
/* Uint64Option: uint64->[]float32 */ func MapFloat32ArrToUint64Option(m Uint64Option, f func(uint64) []float32) Float32ArrOption {  if m.IsDefined() { return Float32ArrOpt(f(*m.value)) } else { return NoneFloat32ArrOption }  }
/* Uint64Option: uint64->[]float64 */ func MapFloat64ArrToUint64Option(m Uint64Option, f func(uint64) []float64) Float64ArrOption {  if m.IsDefined() { return Float64ArrOpt(f(*m.value)) } else { return NoneFloat64ArrOption }  }
/* Uint64Option: uint64->[]complex64 */ func MapComplex64ArrToUint64Option(m Uint64Option, f func(uint64) []complex64) Complex64ArrOption {  if m.IsDefined() { return Complex64ArrOpt(f(*m.value)) } else { return NoneComplex64ArrOption }  }
/* Uint64Option: uint64->[]complex128 */ func MapComplex128ArrToUint64Option(m Uint64Option, f func(uint64) []complex128) Complex128ArrOption {  if m.IsDefined() { return Complex128ArrOpt(f(*m.value)) } else { return NoneComplex128ArrOption }  }
/* Uint64Option: uint64->[]Any */ func MapAnyArrToUint64Option(m Uint64Option, f func(uint64) []Any) AnyArrOption {  if m.IsDefined() { return AnyArrOpt(f(*m.value)) } else { return NoneAnyArrOption }  }
/* Uint64Option: uint64->BoolList */ func MapBoolListToUint64Option(m Uint64Option, f func(uint64) BoolList) BoolListOption {  if m.IsDefined() { return BoolListOpt(f(*m.value)) } else { return NoneBoolListOption }  }
/* Uint64Option: uint64->StringList */ func MapStringListToUint64Option(m Uint64Option, f func(uint64) StringList) StringListOption {  if m.IsDefined() { return StringListOpt(f(*m.value)) } else { return NoneStringListOption }  }
/* Uint64Option: uint64->IntList */ func MapIntListToUint64Option(m Uint64Option, f func(uint64) IntList) IntListOption {  if m.IsDefined() { return IntListOpt(f(*m.value)) } else { return NoneIntListOption }  }
/* Uint64Option: uint64->Int8List */ func MapInt8ListToUint64Option(m Uint64Option, f func(uint64) Int8List) Int8ListOption {  if m.IsDefined() { return Int8ListOpt(f(*m.value)) } else { return NoneInt8ListOption }  }
/* Uint64Option: uint64->Int16List */ func MapInt16ListToUint64Option(m Uint64Option, f func(uint64) Int16List) Int16ListOption {  if m.IsDefined() { return Int16ListOpt(f(*m.value)) } else { return NoneInt16ListOption }  }
/* Uint64Option: uint64->Int32List */ func MapInt32ListToUint64Option(m Uint64Option, f func(uint64) Int32List) Int32ListOption {  if m.IsDefined() { return Int32ListOpt(f(*m.value)) } else { return NoneInt32ListOption }  }
/* Uint64Option: uint64->Int64List */ func MapInt64ListToUint64Option(m Uint64Option, f func(uint64) Int64List) Int64ListOption {  if m.IsDefined() { return Int64ListOpt(f(*m.value)) } else { return NoneInt64ListOption }  }
/* Uint64Option: uint64->UintList */ func MapUintListToUint64Option(m Uint64Option, f func(uint64) UintList) UintListOption {  if m.IsDefined() { return UintListOpt(f(*m.value)) } else { return NoneUintListOption }  }
/* Uint64Option: uint64->Uint8List */ func MapUint8ListToUint64Option(m Uint64Option, f func(uint64) Uint8List) Uint8ListOption {  if m.IsDefined() { return Uint8ListOpt(f(*m.value)) } else { return NoneUint8ListOption }  }
/* Uint64Option: uint64->Uint16List */ func MapUint16ListToUint64Option(m Uint64Option, f func(uint64) Uint16List) Uint16ListOption {  if m.IsDefined() { return Uint16ListOpt(f(*m.value)) } else { return NoneUint16ListOption }  }
/* Uint64Option: uint64->Uint32List */ func MapUint32ListToUint64Option(m Uint64Option, f func(uint64) Uint32List) Uint32ListOption {  if m.IsDefined() { return Uint32ListOpt(f(*m.value)) } else { return NoneUint32ListOption }  }
/* Uint64Option: uint64->Uint64List */ func MapUint64ListToUint64Option(m Uint64Option, f func(uint64) Uint64List) Uint64ListOption {  if m.IsDefined() { return Uint64ListOpt(f(*m.value)) } else { return NoneUint64ListOption }  }
/* Uint64Option: uint64->UintptrList */ func MapUintptrListToUint64Option(m Uint64Option, f func(uint64) UintptrList) UintptrListOption {  if m.IsDefined() { return UintptrListOpt(f(*m.value)) } else { return NoneUintptrListOption }  }
/* Uint64Option: uint64->ByteList */ func MapByteListToUint64Option(m Uint64Option, f func(uint64) ByteList) ByteListOption {  if m.IsDefined() { return ByteListOpt(f(*m.value)) } else { return NoneByteListOption }  }
/* Uint64Option: uint64->RuneList */ func MapRuneListToUint64Option(m Uint64Option, f func(uint64) RuneList) RuneListOption {  if m.IsDefined() { return RuneListOpt(f(*m.value)) } else { return NoneRuneListOption }  }
/* Uint64Option: uint64->Float32List */ func MapFloat32ListToUint64Option(m Uint64Option, f func(uint64) Float32List) Float32ListOption {  if m.IsDefined() { return Float32ListOpt(f(*m.value)) } else { return NoneFloat32ListOption }  }
/* Uint64Option: uint64->Float64List */ func MapFloat64ListToUint64Option(m Uint64Option, f func(uint64) Float64List) Float64ListOption {  if m.IsDefined() { return Float64ListOpt(f(*m.value)) } else { return NoneFloat64ListOption }  }
/* Uint64Option: uint64->Complex64List */ func MapComplex64ListToUint64Option(m Uint64Option, f func(uint64) Complex64List) Complex64ListOption {  if m.IsDefined() { return Complex64ListOpt(f(*m.value)) } else { return NoneComplex64ListOption }  }
/* Uint64Option: uint64->Complex128List */ func MapComplex128ListToUint64Option(m Uint64Option, f func(uint64) Complex128List) Complex128ListOption {  if m.IsDefined() { return Complex128ListOpt(f(*m.value)) } else { return NoneComplex128ListOption }  }
/* Uint64Option: uint64->AnyList */ func MapAnyListToUint64Option(m Uint64Option, f func(uint64) AnyList) AnyListOption {  if m.IsDefined() { return AnyListOpt(f(*m.value)) } else { return NoneAnyListOption }  }
/* UintptrOption: uintptr->bool */ func MapBoolToUintptrOption(m UintptrOption, f func(uintptr) bool) BoolOption {  if m.IsDefined() { return Bool(f(*m.value)) } else { return NoneBoolOption }  }
/* UintptrOption: uintptr->string */ func MapStringToUintptrOption(m UintptrOption, f func(uintptr) string) StringOption {  if m.IsDefined() { return String(f(*m.value)) } else { return NoneStringOption }  }
/* UintptrOption: uintptr->int */ func MapIntToUintptrOption(m UintptrOption, f func(uintptr) int) IntOption {  if m.IsDefined() { return Int(f(*m.value)) } else { return NoneIntOption }  }
/* UintptrOption: uintptr->int8 */ func MapInt8ToUintptrOption(m UintptrOption, f func(uintptr) int8) Int8Option {  if m.IsDefined() { return Int8(f(*m.value)) } else { return NoneInt8Option }  }
/* UintptrOption: uintptr->int16 */ func MapInt16ToUintptrOption(m UintptrOption, f func(uintptr) int16) Int16Option {  if m.IsDefined() { return Int16(f(*m.value)) } else { return NoneInt16Option }  }
/* UintptrOption: uintptr->int32 */ func MapInt32ToUintptrOption(m UintptrOption, f func(uintptr) int32) Int32Option {  if m.IsDefined() { return Int32(f(*m.value)) } else { return NoneInt32Option }  }
/* UintptrOption: uintptr->int64 */ func MapInt64ToUintptrOption(m UintptrOption, f func(uintptr) int64) Int64Option {  if m.IsDefined() { return Int64(f(*m.value)) } else { return NoneInt64Option }  }
/* UintptrOption: uintptr->uint */ func MapUintToUintptrOption(m UintptrOption, f func(uintptr) uint) UintOption {  if m.IsDefined() { return Uint(f(*m.value)) } else { return NoneUintOption }  }
/* UintptrOption: uintptr->uint8 */ func MapUint8ToUintptrOption(m UintptrOption, f func(uintptr) uint8) Uint8Option {  if m.IsDefined() { return Uint8(f(*m.value)) } else { return NoneUint8Option }  }
/* UintptrOption: uintptr->uint16 */ func MapUint16ToUintptrOption(m UintptrOption, f func(uintptr) uint16) Uint16Option {  if m.IsDefined() { return Uint16(f(*m.value)) } else { return NoneUint16Option }  }
/* UintptrOption: uintptr->uint32 */ func MapUint32ToUintptrOption(m UintptrOption, f func(uintptr) uint32) Uint32Option {  if m.IsDefined() { return Uint32(f(*m.value)) } else { return NoneUint32Option }  }
/* UintptrOption: uintptr->uint64 */ func MapUint64ToUintptrOption(m UintptrOption, f func(uintptr) uint64) Uint64Option {  if m.IsDefined() { return Uint64(f(*m.value)) } else { return NoneUint64Option }  }
/* UintptrOption: uintptr->uintptr */ func MapUintptrToUintptrOption(m UintptrOption, f func(uintptr) uintptr) UintptrOption {  if m.IsDefined() { return Uintptr(f(*m.value)) } else { return NoneUintptrOption }  }
/* UintptrOption: uintptr->byte */ func MapByteToUintptrOption(m UintptrOption, f func(uintptr) byte) ByteOption {  if m.IsDefined() { return Byte(f(*m.value)) } else { return NoneByteOption }  }
/* UintptrOption: uintptr->rune */ func MapRuneToUintptrOption(m UintptrOption, f func(uintptr) rune) RuneOption {  if m.IsDefined() { return Rune(f(*m.value)) } else { return NoneRuneOption }  }
/* UintptrOption: uintptr->float32 */ func MapFloat32ToUintptrOption(m UintptrOption, f func(uintptr) float32) Float32Option {  if m.IsDefined() { return Float32(f(*m.value)) } else { return NoneFloat32Option }  }
/* UintptrOption: uintptr->float64 */ func MapFloat64ToUintptrOption(m UintptrOption, f func(uintptr) float64) Float64Option {  if m.IsDefined() { return Float64(f(*m.value)) } else { return NoneFloat64Option }  }
/* UintptrOption: uintptr->complex64 */ func MapComplex64ToUintptrOption(m UintptrOption, f func(uintptr) complex64) Complex64Option {  if m.IsDefined() { return Complex64(f(*m.value)) } else { return NoneComplex64Option }  }
/* UintptrOption: uintptr->complex128 */ func MapComplex128ToUintptrOption(m UintptrOption, f func(uintptr) complex128) Complex128Option {  if m.IsDefined() { return Complex128(f(*m.value)) } else { return NoneComplex128Option }  }
/* UintptrOption: uintptr->Any */ func MapAnyToUintptrOption(m UintptrOption, f func(uintptr) Any) AnyOption {  if m.IsDefined() { return AnyOpt(f(*m.value)) } else { return NoneAnyOption }  }
/* UintptrOption: uintptr->BoolOption */ func MapBoolOptionToUintptrOption(m UintptrOption, f func(uintptr) BoolOption) BoolOptionOption {  if m.IsDefined() { return BoolBool(f(*m.value)) } else { return NoneBoolOptionOption }  }
/* UintptrOption: uintptr->StringOption */ func MapStringOptionToUintptrOption(m UintptrOption, f func(uintptr) StringOption) StringOptionOption {  if m.IsDefined() { return StringString(f(*m.value)) } else { return NoneStringOptionOption }  }
/* UintptrOption: uintptr->IntOption */ func MapIntOptionToUintptrOption(m UintptrOption, f func(uintptr) IntOption) IntOptionOption {  if m.IsDefined() { return IntInt(f(*m.value)) } else { return NoneIntOptionOption }  }
/* UintptrOption: uintptr->Int8Option */ func MapInt8OptionToUintptrOption(m UintptrOption, f func(uintptr) Int8Option) Int8OptionOption {  if m.IsDefined() { return Int8Int8(f(*m.value)) } else { return NoneInt8OptionOption }  }
/* UintptrOption: uintptr->Int16Option */ func MapInt16OptionToUintptrOption(m UintptrOption, f func(uintptr) Int16Option) Int16OptionOption {  if m.IsDefined() { return Int16Int16(f(*m.value)) } else { return NoneInt16OptionOption }  }
/* UintptrOption: uintptr->Int32Option */ func MapInt32OptionToUintptrOption(m UintptrOption, f func(uintptr) Int32Option) Int32OptionOption {  if m.IsDefined() { return Int32Int32(f(*m.value)) } else { return NoneInt32OptionOption }  }
/* UintptrOption: uintptr->Int64Option */ func MapInt64OptionToUintptrOption(m UintptrOption, f func(uintptr) Int64Option) Int64OptionOption {  if m.IsDefined() { return Int64Int64(f(*m.value)) } else { return NoneInt64OptionOption }  }
/* UintptrOption: uintptr->UintOption */ func MapUintOptionToUintptrOption(m UintptrOption, f func(uintptr) UintOption) UintOptionOption {  if m.IsDefined() { return UintUint(f(*m.value)) } else { return NoneUintOptionOption }  }
/* UintptrOption: uintptr->Uint8Option */ func MapUint8OptionToUintptrOption(m UintptrOption, f func(uintptr) Uint8Option) Uint8OptionOption {  if m.IsDefined() { return Uint8Uint8(f(*m.value)) } else { return NoneUint8OptionOption }  }
/* UintptrOption: uintptr->Uint16Option */ func MapUint16OptionToUintptrOption(m UintptrOption, f func(uintptr) Uint16Option) Uint16OptionOption {  if m.IsDefined() { return Uint16Uint16(f(*m.value)) } else { return NoneUint16OptionOption }  }
/* UintptrOption: uintptr->Uint32Option */ func MapUint32OptionToUintptrOption(m UintptrOption, f func(uintptr) Uint32Option) Uint32OptionOption {  if m.IsDefined() { return Uint32Uint32(f(*m.value)) } else { return NoneUint32OptionOption }  }
/* UintptrOption: uintptr->Uint64Option */ func MapUint64OptionToUintptrOption(m UintptrOption, f func(uintptr) Uint64Option) Uint64OptionOption {  if m.IsDefined() { return Uint64Uint64(f(*m.value)) } else { return NoneUint64OptionOption }  }
/* UintptrOption: uintptr->UintptrOption */ func MapUintptrOptionToUintptrOption(m UintptrOption, f func(uintptr) UintptrOption) UintptrOptionOption {  if m.IsDefined() { return UintptrUintptr(f(*m.value)) } else { return NoneUintptrOptionOption }  }
/* UintptrOption: uintptr->ByteOption */ func MapByteOptionToUintptrOption(m UintptrOption, f func(uintptr) ByteOption) ByteOptionOption {  if m.IsDefined() { return ByteByte(f(*m.value)) } else { return NoneByteOptionOption }  }
/* UintptrOption: uintptr->RuneOption */ func MapRuneOptionToUintptrOption(m UintptrOption, f func(uintptr) RuneOption) RuneOptionOption {  if m.IsDefined() { return RuneRune(f(*m.value)) } else { return NoneRuneOptionOption }  }
/* UintptrOption: uintptr->Float32Option */ func MapFloat32OptionToUintptrOption(m UintptrOption, f func(uintptr) Float32Option) Float32OptionOption {  if m.IsDefined() { return Float32Float32(f(*m.value)) } else { return NoneFloat32OptionOption }  }
/* UintptrOption: uintptr->Float64Option */ func MapFloat64OptionToUintptrOption(m UintptrOption, f func(uintptr) Float64Option) Float64OptionOption {  if m.IsDefined() { return Float64Float64(f(*m.value)) } else { return NoneFloat64OptionOption }  }
/* UintptrOption: uintptr->Complex64Option */ func MapComplex64OptionToUintptrOption(m UintptrOption, f func(uintptr) Complex64Option) Complex64OptionOption {  if m.IsDefined() { return Complex64Complex64(f(*m.value)) } else { return NoneComplex64OptionOption }  }
/* UintptrOption: uintptr->Complex128Option */ func MapComplex128OptionToUintptrOption(m UintptrOption, f func(uintptr) Complex128Option) Complex128OptionOption {  if m.IsDefined() { return Complex128Complex128(f(*m.value)) } else { return NoneComplex128OptionOption }  }
/* UintptrOption: uintptr->AnyOption */ func MapAnyOptionToUintptrOption(m UintptrOption, f func(uintptr) AnyOption) AnyOptionOption {  if m.IsDefined() { return AnyOptAny(f(*m.value)) } else { return NoneAnyOptionOption }  }
/* UintptrOption: uintptr->[]bool */ func MapBoolArrToUintptrOption(m UintptrOption, f func(uintptr) []bool) BoolArrOption {  if m.IsDefined() { return BoolArrOpt(f(*m.value)) } else { return NoneBoolArrOption }  }
/* UintptrOption: uintptr->[]string */ func MapStringArrToUintptrOption(m UintptrOption, f func(uintptr) []string) StringArrOption {  if m.IsDefined() { return StringArrOpt(f(*m.value)) } else { return NoneStringArrOption }  }
/* UintptrOption: uintptr->[]int */ func MapIntArrToUintptrOption(m UintptrOption, f func(uintptr) []int) IntArrOption {  if m.IsDefined() { return IntArrOpt(f(*m.value)) } else { return NoneIntArrOption }  }
/* UintptrOption: uintptr->[]int8 */ func MapInt8ArrToUintptrOption(m UintptrOption, f func(uintptr) []int8) Int8ArrOption {  if m.IsDefined() { return Int8ArrOpt(f(*m.value)) } else { return NoneInt8ArrOption }  }
/* UintptrOption: uintptr->[]int16 */ func MapInt16ArrToUintptrOption(m UintptrOption, f func(uintptr) []int16) Int16ArrOption {  if m.IsDefined() { return Int16ArrOpt(f(*m.value)) } else { return NoneInt16ArrOption }  }
/* UintptrOption: uintptr->[]int32 */ func MapInt32ArrToUintptrOption(m UintptrOption, f func(uintptr) []int32) Int32ArrOption {  if m.IsDefined() { return Int32ArrOpt(f(*m.value)) } else { return NoneInt32ArrOption }  }
/* UintptrOption: uintptr->[]int64 */ func MapInt64ArrToUintptrOption(m UintptrOption, f func(uintptr) []int64) Int64ArrOption {  if m.IsDefined() { return Int64ArrOpt(f(*m.value)) } else { return NoneInt64ArrOption }  }
/* UintptrOption: uintptr->[]uint */ func MapUintArrToUintptrOption(m UintptrOption, f func(uintptr) []uint) UintArrOption {  if m.IsDefined() { return UintArrOpt(f(*m.value)) } else { return NoneUintArrOption }  }
/* UintptrOption: uintptr->[]uint8 */ func MapUint8ArrToUintptrOption(m UintptrOption, f func(uintptr) []uint8) Uint8ArrOption {  if m.IsDefined() { return Uint8ArrOpt(f(*m.value)) } else { return NoneUint8ArrOption }  }
/* UintptrOption: uintptr->[]uint16 */ func MapUint16ArrToUintptrOption(m UintptrOption, f func(uintptr) []uint16) Uint16ArrOption {  if m.IsDefined() { return Uint16ArrOpt(f(*m.value)) } else { return NoneUint16ArrOption }  }
/* UintptrOption: uintptr->[]uint32 */ func MapUint32ArrToUintptrOption(m UintptrOption, f func(uintptr) []uint32) Uint32ArrOption {  if m.IsDefined() { return Uint32ArrOpt(f(*m.value)) } else { return NoneUint32ArrOption }  }
/* UintptrOption: uintptr->[]uint64 */ func MapUint64ArrToUintptrOption(m UintptrOption, f func(uintptr) []uint64) Uint64ArrOption {  if m.IsDefined() { return Uint64ArrOpt(f(*m.value)) } else { return NoneUint64ArrOption }  }
/* UintptrOption: uintptr->[]uintptr */ func MapUintptrArrToUintptrOption(m UintptrOption, f func(uintptr) []uintptr) UintptrArrOption {  if m.IsDefined() { return UintptrArrOpt(f(*m.value)) } else { return NoneUintptrArrOption }  }
/* UintptrOption: uintptr->[]byte */ func MapByteArrToUintptrOption(m UintptrOption, f func(uintptr) []byte) ByteArrOption {  if m.IsDefined() { return ByteArrOpt(f(*m.value)) } else { return NoneByteArrOption }  }
/* UintptrOption: uintptr->[]rune */ func MapRuneArrToUintptrOption(m UintptrOption, f func(uintptr) []rune) RuneArrOption {  if m.IsDefined() { return RuneArrOpt(f(*m.value)) } else { return NoneRuneArrOption }  }
/* UintptrOption: uintptr->[]float32 */ func MapFloat32ArrToUintptrOption(m UintptrOption, f func(uintptr) []float32) Float32ArrOption {  if m.IsDefined() { return Float32ArrOpt(f(*m.value)) } else { return NoneFloat32ArrOption }  }
/* UintptrOption: uintptr->[]float64 */ func MapFloat64ArrToUintptrOption(m UintptrOption, f func(uintptr) []float64) Float64ArrOption {  if m.IsDefined() { return Float64ArrOpt(f(*m.value)) } else { return NoneFloat64ArrOption }  }
/* UintptrOption: uintptr->[]complex64 */ func MapComplex64ArrToUintptrOption(m UintptrOption, f func(uintptr) []complex64) Complex64ArrOption {  if m.IsDefined() { return Complex64ArrOpt(f(*m.value)) } else { return NoneComplex64ArrOption }  }
/* UintptrOption: uintptr->[]complex128 */ func MapComplex128ArrToUintptrOption(m UintptrOption, f func(uintptr) []complex128) Complex128ArrOption {  if m.IsDefined() { return Complex128ArrOpt(f(*m.value)) } else { return NoneComplex128ArrOption }  }
/* UintptrOption: uintptr->[]Any */ func MapAnyArrToUintptrOption(m UintptrOption, f func(uintptr) []Any) AnyArrOption {  if m.IsDefined() { return AnyArrOpt(f(*m.value)) } else { return NoneAnyArrOption }  }
/* UintptrOption: uintptr->BoolList */ func MapBoolListToUintptrOption(m UintptrOption, f func(uintptr) BoolList) BoolListOption {  if m.IsDefined() { return BoolListOpt(f(*m.value)) } else { return NoneBoolListOption }  }
/* UintptrOption: uintptr->StringList */ func MapStringListToUintptrOption(m UintptrOption, f func(uintptr) StringList) StringListOption {  if m.IsDefined() { return StringListOpt(f(*m.value)) } else { return NoneStringListOption }  }
/* UintptrOption: uintptr->IntList */ func MapIntListToUintptrOption(m UintptrOption, f func(uintptr) IntList) IntListOption {  if m.IsDefined() { return IntListOpt(f(*m.value)) } else { return NoneIntListOption }  }
/* UintptrOption: uintptr->Int8List */ func MapInt8ListToUintptrOption(m UintptrOption, f func(uintptr) Int8List) Int8ListOption {  if m.IsDefined() { return Int8ListOpt(f(*m.value)) } else { return NoneInt8ListOption }  }
/* UintptrOption: uintptr->Int16List */ func MapInt16ListToUintptrOption(m UintptrOption, f func(uintptr) Int16List) Int16ListOption {  if m.IsDefined() { return Int16ListOpt(f(*m.value)) } else { return NoneInt16ListOption }  }
/* UintptrOption: uintptr->Int32List */ func MapInt32ListToUintptrOption(m UintptrOption, f func(uintptr) Int32List) Int32ListOption {  if m.IsDefined() { return Int32ListOpt(f(*m.value)) } else { return NoneInt32ListOption }  }
/* UintptrOption: uintptr->Int64List */ func MapInt64ListToUintptrOption(m UintptrOption, f func(uintptr) Int64List) Int64ListOption {  if m.IsDefined() { return Int64ListOpt(f(*m.value)) } else { return NoneInt64ListOption }  }
/* UintptrOption: uintptr->UintList */ func MapUintListToUintptrOption(m UintptrOption, f func(uintptr) UintList) UintListOption {  if m.IsDefined() { return UintListOpt(f(*m.value)) } else { return NoneUintListOption }  }
/* UintptrOption: uintptr->Uint8List */ func MapUint8ListToUintptrOption(m UintptrOption, f func(uintptr) Uint8List) Uint8ListOption {  if m.IsDefined() { return Uint8ListOpt(f(*m.value)) } else { return NoneUint8ListOption }  }
/* UintptrOption: uintptr->Uint16List */ func MapUint16ListToUintptrOption(m UintptrOption, f func(uintptr) Uint16List) Uint16ListOption {  if m.IsDefined() { return Uint16ListOpt(f(*m.value)) } else { return NoneUint16ListOption }  }
/* UintptrOption: uintptr->Uint32List */ func MapUint32ListToUintptrOption(m UintptrOption, f func(uintptr) Uint32List) Uint32ListOption {  if m.IsDefined() { return Uint32ListOpt(f(*m.value)) } else { return NoneUint32ListOption }  }
/* UintptrOption: uintptr->Uint64List */ func MapUint64ListToUintptrOption(m UintptrOption, f func(uintptr) Uint64List) Uint64ListOption {  if m.IsDefined() { return Uint64ListOpt(f(*m.value)) } else { return NoneUint64ListOption }  }
/* UintptrOption: uintptr->UintptrList */ func MapUintptrListToUintptrOption(m UintptrOption, f func(uintptr) UintptrList) UintptrListOption {  if m.IsDefined() { return UintptrListOpt(f(*m.value)) } else { return NoneUintptrListOption }  }
/* UintptrOption: uintptr->ByteList */ func MapByteListToUintptrOption(m UintptrOption, f func(uintptr) ByteList) ByteListOption {  if m.IsDefined() { return ByteListOpt(f(*m.value)) } else { return NoneByteListOption }  }
/* UintptrOption: uintptr->RuneList */ func MapRuneListToUintptrOption(m UintptrOption, f func(uintptr) RuneList) RuneListOption {  if m.IsDefined() { return RuneListOpt(f(*m.value)) } else { return NoneRuneListOption }  }
/* UintptrOption: uintptr->Float32List */ func MapFloat32ListToUintptrOption(m UintptrOption, f func(uintptr) Float32List) Float32ListOption {  if m.IsDefined() { return Float32ListOpt(f(*m.value)) } else { return NoneFloat32ListOption }  }
/* UintptrOption: uintptr->Float64List */ func MapFloat64ListToUintptrOption(m UintptrOption, f func(uintptr) Float64List) Float64ListOption {  if m.IsDefined() { return Float64ListOpt(f(*m.value)) } else { return NoneFloat64ListOption }  }
/* UintptrOption: uintptr->Complex64List */ func MapComplex64ListToUintptrOption(m UintptrOption, f func(uintptr) Complex64List) Complex64ListOption {  if m.IsDefined() { return Complex64ListOpt(f(*m.value)) } else { return NoneComplex64ListOption }  }
/* UintptrOption: uintptr->Complex128List */ func MapComplex128ListToUintptrOption(m UintptrOption, f func(uintptr) Complex128List) Complex128ListOption {  if m.IsDefined() { return Complex128ListOpt(f(*m.value)) } else { return NoneComplex128ListOption }  }
/* UintptrOption: uintptr->AnyList */ func MapAnyListToUintptrOption(m UintptrOption, f func(uintptr) AnyList) AnyListOption {  if m.IsDefined() { return AnyListOpt(f(*m.value)) } else { return NoneAnyListOption }  }
/* ByteOption: byte->bool */ func MapBoolToByteOption(m ByteOption, f func(byte) bool) BoolOption {  if m.IsDefined() { return Bool(f(*m.value)) } else { return NoneBoolOption }  }
/* ByteOption: byte->string */ func MapStringToByteOption(m ByteOption, f func(byte) string) StringOption {  if m.IsDefined() { return String(f(*m.value)) } else { return NoneStringOption }  }
/* ByteOption: byte->int */ func MapIntToByteOption(m ByteOption, f func(byte) int) IntOption {  if m.IsDefined() { return Int(f(*m.value)) } else { return NoneIntOption }  }
/* ByteOption: byte->int8 */ func MapInt8ToByteOption(m ByteOption, f func(byte) int8) Int8Option {  if m.IsDefined() { return Int8(f(*m.value)) } else { return NoneInt8Option }  }
/* ByteOption: byte->int16 */ func MapInt16ToByteOption(m ByteOption, f func(byte) int16) Int16Option {  if m.IsDefined() { return Int16(f(*m.value)) } else { return NoneInt16Option }  }
/* ByteOption: byte->int32 */ func MapInt32ToByteOption(m ByteOption, f func(byte) int32) Int32Option {  if m.IsDefined() { return Int32(f(*m.value)) } else { return NoneInt32Option }  }
/* ByteOption: byte->int64 */ func MapInt64ToByteOption(m ByteOption, f func(byte) int64) Int64Option {  if m.IsDefined() { return Int64(f(*m.value)) } else { return NoneInt64Option }  }
/* ByteOption: byte->uint */ func MapUintToByteOption(m ByteOption, f func(byte) uint) UintOption {  if m.IsDefined() { return Uint(f(*m.value)) } else { return NoneUintOption }  }
/* ByteOption: byte->uint8 */ func MapUint8ToByteOption(m ByteOption, f func(byte) uint8) Uint8Option {  if m.IsDefined() { return Uint8(f(*m.value)) } else { return NoneUint8Option }  }
/* ByteOption: byte->uint16 */ func MapUint16ToByteOption(m ByteOption, f func(byte) uint16) Uint16Option {  if m.IsDefined() { return Uint16(f(*m.value)) } else { return NoneUint16Option }  }
/* ByteOption: byte->uint32 */ func MapUint32ToByteOption(m ByteOption, f func(byte) uint32) Uint32Option {  if m.IsDefined() { return Uint32(f(*m.value)) } else { return NoneUint32Option }  }
/* ByteOption: byte->uint64 */ func MapUint64ToByteOption(m ByteOption, f func(byte) uint64) Uint64Option {  if m.IsDefined() { return Uint64(f(*m.value)) } else { return NoneUint64Option }  }
/* ByteOption: byte->uintptr */ func MapUintptrToByteOption(m ByteOption, f func(byte) uintptr) UintptrOption {  if m.IsDefined() { return Uintptr(f(*m.value)) } else { return NoneUintptrOption }  }
/* ByteOption: byte->byte */ func MapByteToByteOption(m ByteOption, f func(byte) byte) ByteOption {  if m.IsDefined() { return Byte(f(*m.value)) } else { return NoneByteOption }  }
/* ByteOption: byte->rune */ func MapRuneToByteOption(m ByteOption, f func(byte) rune) RuneOption {  if m.IsDefined() { return Rune(f(*m.value)) } else { return NoneRuneOption }  }
/* ByteOption: byte->float32 */ func MapFloat32ToByteOption(m ByteOption, f func(byte) float32) Float32Option {  if m.IsDefined() { return Float32(f(*m.value)) } else { return NoneFloat32Option }  }
/* ByteOption: byte->float64 */ func MapFloat64ToByteOption(m ByteOption, f func(byte) float64) Float64Option {  if m.IsDefined() { return Float64(f(*m.value)) } else { return NoneFloat64Option }  }
/* ByteOption: byte->complex64 */ func MapComplex64ToByteOption(m ByteOption, f func(byte) complex64) Complex64Option {  if m.IsDefined() { return Complex64(f(*m.value)) } else { return NoneComplex64Option }  }
/* ByteOption: byte->complex128 */ func MapComplex128ToByteOption(m ByteOption, f func(byte) complex128) Complex128Option {  if m.IsDefined() { return Complex128(f(*m.value)) } else { return NoneComplex128Option }  }
/* ByteOption: byte->Any */ func MapAnyToByteOption(m ByteOption, f func(byte) Any) AnyOption {  if m.IsDefined() { return AnyOpt(f(*m.value)) } else { return NoneAnyOption }  }
/* ByteOption: byte->BoolOption */ func MapBoolOptionToByteOption(m ByteOption, f func(byte) BoolOption) BoolOptionOption {  if m.IsDefined() { return BoolBool(f(*m.value)) } else { return NoneBoolOptionOption }  }
/* ByteOption: byte->StringOption */ func MapStringOptionToByteOption(m ByteOption, f func(byte) StringOption) StringOptionOption {  if m.IsDefined() { return StringString(f(*m.value)) } else { return NoneStringOptionOption }  }
/* ByteOption: byte->IntOption */ func MapIntOptionToByteOption(m ByteOption, f func(byte) IntOption) IntOptionOption {  if m.IsDefined() { return IntInt(f(*m.value)) } else { return NoneIntOptionOption }  }
/* ByteOption: byte->Int8Option */ func MapInt8OptionToByteOption(m ByteOption, f func(byte) Int8Option) Int8OptionOption {  if m.IsDefined() { return Int8Int8(f(*m.value)) } else { return NoneInt8OptionOption }  }
/* ByteOption: byte->Int16Option */ func MapInt16OptionToByteOption(m ByteOption, f func(byte) Int16Option) Int16OptionOption {  if m.IsDefined() { return Int16Int16(f(*m.value)) } else { return NoneInt16OptionOption }  }
/* ByteOption: byte->Int32Option */ func MapInt32OptionToByteOption(m ByteOption, f func(byte) Int32Option) Int32OptionOption {  if m.IsDefined() { return Int32Int32(f(*m.value)) } else { return NoneInt32OptionOption }  }
/* ByteOption: byte->Int64Option */ func MapInt64OptionToByteOption(m ByteOption, f func(byte) Int64Option) Int64OptionOption {  if m.IsDefined() { return Int64Int64(f(*m.value)) } else { return NoneInt64OptionOption }  }
/* ByteOption: byte->UintOption */ func MapUintOptionToByteOption(m ByteOption, f func(byte) UintOption) UintOptionOption {  if m.IsDefined() { return UintUint(f(*m.value)) } else { return NoneUintOptionOption }  }
/* ByteOption: byte->Uint8Option */ func MapUint8OptionToByteOption(m ByteOption, f func(byte) Uint8Option) Uint8OptionOption {  if m.IsDefined() { return Uint8Uint8(f(*m.value)) } else { return NoneUint8OptionOption }  }
/* ByteOption: byte->Uint16Option */ func MapUint16OptionToByteOption(m ByteOption, f func(byte) Uint16Option) Uint16OptionOption {  if m.IsDefined() { return Uint16Uint16(f(*m.value)) } else { return NoneUint16OptionOption }  }
/* ByteOption: byte->Uint32Option */ func MapUint32OptionToByteOption(m ByteOption, f func(byte) Uint32Option) Uint32OptionOption {  if m.IsDefined() { return Uint32Uint32(f(*m.value)) } else { return NoneUint32OptionOption }  }
/* ByteOption: byte->Uint64Option */ func MapUint64OptionToByteOption(m ByteOption, f func(byte) Uint64Option) Uint64OptionOption {  if m.IsDefined() { return Uint64Uint64(f(*m.value)) } else { return NoneUint64OptionOption }  }
/* ByteOption: byte->UintptrOption */ func MapUintptrOptionToByteOption(m ByteOption, f func(byte) UintptrOption) UintptrOptionOption {  if m.IsDefined() { return UintptrUintptr(f(*m.value)) } else { return NoneUintptrOptionOption }  }
/* ByteOption: byte->ByteOption */ func MapByteOptionToByteOption(m ByteOption, f func(byte) ByteOption) ByteOptionOption {  if m.IsDefined() { return ByteByte(f(*m.value)) } else { return NoneByteOptionOption }  }
/* ByteOption: byte->RuneOption */ func MapRuneOptionToByteOption(m ByteOption, f func(byte) RuneOption) RuneOptionOption {  if m.IsDefined() { return RuneRune(f(*m.value)) } else { return NoneRuneOptionOption }  }
/* ByteOption: byte->Float32Option */ func MapFloat32OptionToByteOption(m ByteOption, f func(byte) Float32Option) Float32OptionOption {  if m.IsDefined() { return Float32Float32(f(*m.value)) } else { return NoneFloat32OptionOption }  }
/* ByteOption: byte->Float64Option */ func MapFloat64OptionToByteOption(m ByteOption, f func(byte) Float64Option) Float64OptionOption {  if m.IsDefined() { return Float64Float64(f(*m.value)) } else { return NoneFloat64OptionOption }  }
/* ByteOption: byte->Complex64Option */ func MapComplex64OptionToByteOption(m ByteOption, f func(byte) Complex64Option) Complex64OptionOption {  if m.IsDefined() { return Complex64Complex64(f(*m.value)) } else { return NoneComplex64OptionOption }  }
/* ByteOption: byte->Complex128Option */ func MapComplex128OptionToByteOption(m ByteOption, f func(byte) Complex128Option) Complex128OptionOption {  if m.IsDefined() { return Complex128Complex128(f(*m.value)) } else { return NoneComplex128OptionOption }  }
/* ByteOption: byte->AnyOption */ func MapAnyOptionToByteOption(m ByteOption, f func(byte) AnyOption) AnyOptionOption {  if m.IsDefined() { return AnyOptAny(f(*m.value)) } else { return NoneAnyOptionOption }  }
/* ByteOption: byte->[]bool */ func MapBoolArrToByteOption(m ByteOption, f func(byte) []bool) BoolArrOption {  if m.IsDefined() { return BoolArrOpt(f(*m.value)) } else { return NoneBoolArrOption }  }
/* ByteOption: byte->[]string */ func MapStringArrToByteOption(m ByteOption, f func(byte) []string) StringArrOption {  if m.IsDefined() { return StringArrOpt(f(*m.value)) } else { return NoneStringArrOption }  }
/* ByteOption: byte->[]int */ func MapIntArrToByteOption(m ByteOption, f func(byte) []int) IntArrOption {  if m.IsDefined() { return IntArrOpt(f(*m.value)) } else { return NoneIntArrOption }  }
/* ByteOption: byte->[]int8 */ func MapInt8ArrToByteOption(m ByteOption, f func(byte) []int8) Int8ArrOption {  if m.IsDefined() { return Int8ArrOpt(f(*m.value)) } else { return NoneInt8ArrOption }  }
/* ByteOption: byte->[]int16 */ func MapInt16ArrToByteOption(m ByteOption, f func(byte) []int16) Int16ArrOption {  if m.IsDefined() { return Int16ArrOpt(f(*m.value)) } else { return NoneInt16ArrOption }  }
/* ByteOption: byte->[]int32 */ func MapInt32ArrToByteOption(m ByteOption, f func(byte) []int32) Int32ArrOption {  if m.IsDefined() { return Int32ArrOpt(f(*m.value)) } else { return NoneInt32ArrOption }  }
/* ByteOption: byte->[]int64 */ func MapInt64ArrToByteOption(m ByteOption, f func(byte) []int64) Int64ArrOption {  if m.IsDefined() { return Int64ArrOpt(f(*m.value)) } else { return NoneInt64ArrOption }  }
/* ByteOption: byte->[]uint */ func MapUintArrToByteOption(m ByteOption, f func(byte) []uint) UintArrOption {  if m.IsDefined() { return UintArrOpt(f(*m.value)) } else { return NoneUintArrOption }  }
/* ByteOption: byte->[]uint8 */ func MapUint8ArrToByteOption(m ByteOption, f func(byte) []uint8) Uint8ArrOption {  if m.IsDefined() { return Uint8ArrOpt(f(*m.value)) } else { return NoneUint8ArrOption }  }
/* ByteOption: byte->[]uint16 */ func MapUint16ArrToByteOption(m ByteOption, f func(byte) []uint16) Uint16ArrOption {  if m.IsDefined() { return Uint16ArrOpt(f(*m.value)) } else { return NoneUint16ArrOption }  }
/* ByteOption: byte->[]uint32 */ func MapUint32ArrToByteOption(m ByteOption, f func(byte) []uint32) Uint32ArrOption {  if m.IsDefined() { return Uint32ArrOpt(f(*m.value)) } else { return NoneUint32ArrOption }  }
/* ByteOption: byte->[]uint64 */ func MapUint64ArrToByteOption(m ByteOption, f func(byte) []uint64) Uint64ArrOption {  if m.IsDefined() { return Uint64ArrOpt(f(*m.value)) } else { return NoneUint64ArrOption }  }
/* ByteOption: byte->[]uintptr */ func MapUintptrArrToByteOption(m ByteOption, f func(byte) []uintptr) UintptrArrOption {  if m.IsDefined() { return UintptrArrOpt(f(*m.value)) } else { return NoneUintptrArrOption }  }
/* ByteOption: byte->[]byte */ func MapByteArrToByteOption(m ByteOption, f func(byte) []byte) ByteArrOption {  if m.IsDefined() { return ByteArrOpt(f(*m.value)) } else { return NoneByteArrOption }  }
/* ByteOption: byte->[]rune */ func MapRuneArrToByteOption(m ByteOption, f func(byte) []rune) RuneArrOption {  if m.IsDefined() { return RuneArrOpt(f(*m.value)) } else { return NoneRuneArrOption }  }
/* ByteOption: byte->[]float32 */ func MapFloat32ArrToByteOption(m ByteOption, f func(byte) []float32) Float32ArrOption {  if m.IsDefined() { return Float32ArrOpt(f(*m.value)) } else { return NoneFloat32ArrOption }  }
/* ByteOption: byte->[]float64 */ func MapFloat64ArrToByteOption(m ByteOption, f func(byte) []float64) Float64ArrOption {  if m.IsDefined() { return Float64ArrOpt(f(*m.value)) } else { return NoneFloat64ArrOption }  }
/* ByteOption: byte->[]complex64 */ func MapComplex64ArrToByteOption(m ByteOption, f func(byte) []complex64) Complex64ArrOption {  if m.IsDefined() { return Complex64ArrOpt(f(*m.value)) } else { return NoneComplex64ArrOption }  }
/* ByteOption: byte->[]complex128 */ func MapComplex128ArrToByteOption(m ByteOption, f func(byte) []complex128) Complex128ArrOption {  if m.IsDefined() { return Complex128ArrOpt(f(*m.value)) } else { return NoneComplex128ArrOption }  }
/* ByteOption: byte->[]Any */ func MapAnyArrToByteOption(m ByteOption, f func(byte) []Any) AnyArrOption {  if m.IsDefined() { return AnyArrOpt(f(*m.value)) } else { return NoneAnyArrOption }  }
/* ByteOption: byte->BoolList */ func MapBoolListToByteOption(m ByteOption, f func(byte) BoolList) BoolListOption {  if m.IsDefined() { return BoolListOpt(f(*m.value)) } else { return NoneBoolListOption }  }
/* ByteOption: byte->StringList */ func MapStringListToByteOption(m ByteOption, f func(byte) StringList) StringListOption {  if m.IsDefined() { return StringListOpt(f(*m.value)) } else { return NoneStringListOption }  }
/* ByteOption: byte->IntList */ func MapIntListToByteOption(m ByteOption, f func(byte) IntList) IntListOption {  if m.IsDefined() { return IntListOpt(f(*m.value)) } else { return NoneIntListOption }  }
/* ByteOption: byte->Int8List */ func MapInt8ListToByteOption(m ByteOption, f func(byte) Int8List) Int8ListOption {  if m.IsDefined() { return Int8ListOpt(f(*m.value)) } else { return NoneInt8ListOption }  }
/* ByteOption: byte->Int16List */ func MapInt16ListToByteOption(m ByteOption, f func(byte) Int16List) Int16ListOption {  if m.IsDefined() { return Int16ListOpt(f(*m.value)) } else { return NoneInt16ListOption }  }
/* ByteOption: byte->Int32List */ func MapInt32ListToByteOption(m ByteOption, f func(byte) Int32List) Int32ListOption {  if m.IsDefined() { return Int32ListOpt(f(*m.value)) } else { return NoneInt32ListOption }  }
/* ByteOption: byte->Int64List */ func MapInt64ListToByteOption(m ByteOption, f func(byte) Int64List) Int64ListOption {  if m.IsDefined() { return Int64ListOpt(f(*m.value)) } else { return NoneInt64ListOption }  }
/* ByteOption: byte->UintList */ func MapUintListToByteOption(m ByteOption, f func(byte) UintList) UintListOption {  if m.IsDefined() { return UintListOpt(f(*m.value)) } else { return NoneUintListOption }  }
/* ByteOption: byte->Uint8List */ func MapUint8ListToByteOption(m ByteOption, f func(byte) Uint8List) Uint8ListOption {  if m.IsDefined() { return Uint8ListOpt(f(*m.value)) } else { return NoneUint8ListOption }  }
/* ByteOption: byte->Uint16List */ func MapUint16ListToByteOption(m ByteOption, f func(byte) Uint16List) Uint16ListOption {  if m.IsDefined() { return Uint16ListOpt(f(*m.value)) } else { return NoneUint16ListOption }  }
/* ByteOption: byte->Uint32List */ func MapUint32ListToByteOption(m ByteOption, f func(byte) Uint32List) Uint32ListOption {  if m.IsDefined() { return Uint32ListOpt(f(*m.value)) } else { return NoneUint32ListOption }  }
/* ByteOption: byte->Uint64List */ func MapUint64ListToByteOption(m ByteOption, f func(byte) Uint64List) Uint64ListOption {  if m.IsDefined() { return Uint64ListOpt(f(*m.value)) } else { return NoneUint64ListOption }  }
/* ByteOption: byte->UintptrList */ func MapUintptrListToByteOption(m ByteOption, f func(byte) UintptrList) UintptrListOption {  if m.IsDefined() { return UintptrListOpt(f(*m.value)) } else { return NoneUintptrListOption }  }
/* ByteOption: byte->ByteList */ func MapByteListToByteOption(m ByteOption, f func(byte) ByteList) ByteListOption {  if m.IsDefined() { return ByteListOpt(f(*m.value)) } else { return NoneByteListOption }  }
/* ByteOption: byte->RuneList */ func MapRuneListToByteOption(m ByteOption, f func(byte) RuneList) RuneListOption {  if m.IsDefined() { return RuneListOpt(f(*m.value)) } else { return NoneRuneListOption }  }
/* ByteOption: byte->Float32List */ func MapFloat32ListToByteOption(m ByteOption, f func(byte) Float32List) Float32ListOption {  if m.IsDefined() { return Float32ListOpt(f(*m.value)) } else { return NoneFloat32ListOption }  }
/* ByteOption: byte->Float64List */ func MapFloat64ListToByteOption(m ByteOption, f func(byte) Float64List) Float64ListOption {  if m.IsDefined() { return Float64ListOpt(f(*m.value)) } else { return NoneFloat64ListOption }  }
/* ByteOption: byte->Complex64List */ func MapComplex64ListToByteOption(m ByteOption, f func(byte) Complex64List) Complex64ListOption {  if m.IsDefined() { return Complex64ListOpt(f(*m.value)) } else { return NoneComplex64ListOption }  }
/* ByteOption: byte->Complex128List */ func MapComplex128ListToByteOption(m ByteOption, f func(byte) Complex128List) Complex128ListOption {  if m.IsDefined() { return Complex128ListOpt(f(*m.value)) } else { return NoneComplex128ListOption }  }
/* ByteOption: byte->AnyList */ func MapAnyListToByteOption(m ByteOption, f func(byte) AnyList) AnyListOption {  if m.IsDefined() { return AnyListOpt(f(*m.value)) } else { return NoneAnyListOption }  }
/* RuneOption: rune->bool */ func MapBoolToRuneOption(m RuneOption, f func(rune) bool) BoolOption {  if m.IsDefined() { return Bool(f(*m.value)) } else { return NoneBoolOption }  }
/* RuneOption: rune->string */ func MapStringToRuneOption(m RuneOption, f func(rune) string) StringOption {  if m.IsDefined() { return String(f(*m.value)) } else { return NoneStringOption }  }
/* RuneOption: rune->int */ func MapIntToRuneOption(m RuneOption, f func(rune) int) IntOption {  if m.IsDefined() { return Int(f(*m.value)) } else { return NoneIntOption }  }
/* RuneOption: rune->int8 */ func MapInt8ToRuneOption(m RuneOption, f func(rune) int8) Int8Option {  if m.IsDefined() { return Int8(f(*m.value)) } else { return NoneInt8Option }  }
/* RuneOption: rune->int16 */ func MapInt16ToRuneOption(m RuneOption, f func(rune) int16) Int16Option {  if m.IsDefined() { return Int16(f(*m.value)) } else { return NoneInt16Option }  }
/* RuneOption: rune->int32 */ func MapInt32ToRuneOption(m RuneOption, f func(rune) int32) Int32Option {  if m.IsDefined() { return Int32(f(*m.value)) } else { return NoneInt32Option }  }
/* RuneOption: rune->int64 */ func MapInt64ToRuneOption(m RuneOption, f func(rune) int64) Int64Option {  if m.IsDefined() { return Int64(f(*m.value)) } else { return NoneInt64Option }  }
/* RuneOption: rune->uint */ func MapUintToRuneOption(m RuneOption, f func(rune) uint) UintOption {  if m.IsDefined() { return Uint(f(*m.value)) } else { return NoneUintOption }  }
/* RuneOption: rune->uint8 */ func MapUint8ToRuneOption(m RuneOption, f func(rune) uint8) Uint8Option {  if m.IsDefined() { return Uint8(f(*m.value)) } else { return NoneUint8Option }  }
/* RuneOption: rune->uint16 */ func MapUint16ToRuneOption(m RuneOption, f func(rune) uint16) Uint16Option {  if m.IsDefined() { return Uint16(f(*m.value)) } else { return NoneUint16Option }  }
/* RuneOption: rune->uint32 */ func MapUint32ToRuneOption(m RuneOption, f func(rune) uint32) Uint32Option {  if m.IsDefined() { return Uint32(f(*m.value)) } else { return NoneUint32Option }  }
/* RuneOption: rune->uint64 */ func MapUint64ToRuneOption(m RuneOption, f func(rune) uint64) Uint64Option {  if m.IsDefined() { return Uint64(f(*m.value)) } else { return NoneUint64Option }  }
/* RuneOption: rune->uintptr */ func MapUintptrToRuneOption(m RuneOption, f func(rune) uintptr) UintptrOption {  if m.IsDefined() { return Uintptr(f(*m.value)) } else { return NoneUintptrOption }  }
/* RuneOption: rune->byte */ func MapByteToRuneOption(m RuneOption, f func(rune) byte) ByteOption {  if m.IsDefined() { return Byte(f(*m.value)) } else { return NoneByteOption }  }
/* RuneOption: rune->rune */ func MapRuneToRuneOption(m RuneOption, f func(rune) rune) RuneOption {  if m.IsDefined() { return Rune(f(*m.value)) } else { return NoneRuneOption }  }
/* RuneOption: rune->float32 */ func MapFloat32ToRuneOption(m RuneOption, f func(rune) float32) Float32Option {  if m.IsDefined() { return Float32(f(*m.value)) } else { return NoneFloat32Option }  }
/* RuneOption: rune->float64 */ func MapFloat64ToRuneOption(m RuneOption, f func(rune) float64) Float64Option {  if m.IsDefined() { return Float64(f(*m.value)) } else { return NoneFloat64Option }  }
/* RuneOption: rune->complex64 */ func MapComplex64ToRuneOption(m RuneOption, f func(rune) complex64) Complex64Option {  if m.IsDefined() { return Complex64(f(*m.value)) } else { return NoneComplex64Option }  }
/* RuneOption: rune->complex128 */ func MapComplex128ToRuneOption(m RuneOption, f func(rune) complex128) Complex128Option {  if m.IsDefined() { return Complex128(f(*m.value)) } else { return NoneComplex128Option }  }
/* RuneOption: rune->Any */ func MapAnyToRuneOption(m RuneOption, f func(rune) Any) AnyOption {  if m.IsDefined() { return AnyOpt(f(*m.value)) } else { return NoneAnyOption }  }
/* RuneOption: rune->BoolOption */ func MapBoolOptionToRuneOption(m RuneOption, f func(rune) BoolOption) BoolOptionOption {  if m.IsDefined() { return BoolBool(f(*m.value)) } else { return NoneBoolOptionOption }  }
/* RuneOption: rune->StringOption */ func MapStringOptionToRuneOption(m RuneOption, f func(rune) StringOption) StringOptionOption {  if m.IsDefined() { return StringString(f(*m.value)) } else { return NoneStringOptionOption }  }
/* RuneOption: rune->IntOption */ func MapIntOptionToRuneOption(m RuneOption, f func(rune) IntOption) IntOptionOption {  if m.IsDefined() { return IntInt(f(*m.value)) } else { return NoneIntOptionOption }  }
/* RuneOption: rune->Int8Option */ func MapInt8OptionToRuneOption(m RuneOption, f func(rune) Int8Option) Int8OptionOption {  if m.IsDefined() { return Int8Int8(f(*m.value)) } else { return NoneInt8OptionOption }  }
/* RuneOption: rune->Int16Option */ func MapInt16OptionToRuneOption(m RuneOption, f func(rune) Int16Option) Int16OptionOption {  if m.IsDefined() { return Int16Int16(f(*m.value)) } else { return NoneInt16OptionOption }  }
/* RuneOption: rune->Int32Option */ func MapInt32OptionToRuneOption(m RuneOption, f func(rune) Int32Option) Int32OptionOption {  if m.IsDefined() { return Int32Int32(f(*m.value)) } else { return NoneInt32OptionOption }  }
/* RuneOption: rune->Int64Option */ func MapInt64OptionToRuneOption(m RuneOption, f func(rune) Int64Option) Int64OptionOption {  if m.IsDefined() { return Int64Int64(f(*m.value)) } else { return NoneInt64OptionOption }  }
/* RuneOption: rune->UintOption */ func MapUintOptionToRuneOption(m RuneOption, f func(rune) UintOption) UintOptionOption {  if m.IsDefined() { return UintUint(f(*m.value)) } else { return NoneUintOptionOption }  }
/* RuneOption: rune->Uint8Option */ func MapUint8OptionToRuneOption(m RuneOption, f func(rune) Uint8Option) Uint8OptionOption {  if m.IsDefined() { return Uint8Uint8(f(*m.value)) } else { return NoneUint8OptionOption }  }
/* RuneOption: rune->Uint16Option */ func MapUint16OptionToRuneOption(m RuneOption, f func(rune) Uint16Option) Uint16OptionOption {  if m.IsDefined() { return Uint16Uint16(f(*m.value)) } else { return NoneUint16OptionOption }  }
/* RuneOption: rune->Uint32Option */ func MapUint32OptionToRuneOption(m RuneOption, f func(rune) Uint32Option) Uint32OptionOption {  if m.IsDefined() { return Uint32Uint32(f(*m.value)) } else { return NoneUint32OptionOption }  }
/* RuneOption: rune->Uint64Option */ func MapUint64OptionToRuneOption(m RuneOption, f func(rune) Uint64Option) Uint64OptionOption {  if m.IsDefined() { return Uint64Uint64(f(*m.value)) } else { return NoneUint64OptionOption }  }
/* RuneOption: rune->UintptrOption */ func MapUintptrOptionToRuneOption(m RuneOption, f func(rune) UintptrOption) UintptrOptionOption {  if m.IsDefined() { return UintptrUintptr(f(*m.value)) } else { return NoneUintptrOptionOption }  }
/* RuneOption: rune->ByteOption */ func MapByteOptionToRuneOption(m RuneOption, f func(rune) ByteOption) ByteOptionOption {  if m.IsDefined() { return ByteByte(f(*m.value)) } else { return NoneByteOptionOption }  }
/* RuneOption: rune->RuneOption */ func MapRuneOptionToRuneOption(m RuneOption, f func(rune) RuneOption) RuneOptionOption {  if m.IsDefined() { return RuneRune(f(*m.value)) } else { return NoneRuneOptionOption }  }
/* RuneOption: rune->Float32Option */ func MapFloat32OptionToRuneOption(m RuneOption, f func(rune) Float32Option) Float32OptionOption {  if m.IsDefined() { return Float32Float32(f(*m.value)) } else { return NoneFloat32OptionOption }  }
/* RuneOption: rune->Float64Option */ func MapFloat64OptionToRuneOption(m RuneOption, f func(rune) Float64Option) Float64OptionOption {  if m.IsDefined() { return Float64Float64(f(*m.value)) } else { return NoneFloat64OptionOption }  }
/* RuneOption: rune->Complex64Option */ func MapComplex64OptionToRuneOption(m RuneOption, f func(rune) Complex64Option) Complex64OptionOption {  if m.IsDefined() { return Complex64Complex64(f(*m.value)) } else { return NoneComplex64OptionOption }  }
/* RuneOption: rune->Complex128Option */ func MapComplex128OptionToRuneOption(m RuneOption, f func(rune) Complex128Option) Complex128OptionOption {  if m.IsDefined() { return Complex128Complex128(f(*m.value)) } else { return NoneComplex128OptionOption }  }
/* RuneOption: rune->AnyOption */ func MapAnyOptionToRuneOption(m RuneOption, f func(rune) AnyOption) AnyOptionOption {  if m.IsDefined() { return AnyOptAny(f(*m.value)) } else { return NoneAnyOptionOption }  }
/* RuneOption: rune->[]bool */ func MapBoolArrToRuneOption(m RuneOption, f func(rune) []bool) BoolArrOption {  if m.IsDefined() { return BoolArrOpt(f(*m.value)) } else { return NoneBoolArrOption }  }
/* RuneOption: rune->[]string */ func MapStringArrToRuneOption(m RuneOption, f func(rune) []string) StringArrOption {  if m.IsDefined() { return StringArrOpt(f(*m.value)) } else { return NoneStringArrOption }  }
/* RuneOption: rune->[]int */ func MapIntArrToRuneOption(m RuneOption, f func(rune) []int) IntArrOption {  if m.IsDefined() { return IntArrOpt(f(*m.value)) } else { return NoneIntArrOption }  }
/* RuneOption: rune->[]int8 */ func MapInt8ArrToRuneOption(m RuneOption, f func(rune) []int8) Int8ArrOption {  if m.IsDefined() { return Int8ArrOpt(f(*m.value)) } else { return NoneInt8ArrOption }  }
/* RuneOption: rune->[]int16 */ func MapInt16ArrToRuneOption(m RuneOption, f func(rune) []int16) Int16ArrOption {  if m.IsDefined() { return Int16ArrOpt(f(*m.value)) } else { return NoneInt16ArrOption }  }
/* RuneOption: rune->[]int32 */ func MapInt32ArrToRuneOption(m RuneOption, f func(rune) []int32) Int32ArrOption {  if m.IsDefined() { return Int32ArrOpt(f(*m.value)) } else { return NoneInt32ArrOption }  }
/* RuneOption: rune->[]int64 */ func MapInt64ArrToRuneOption(m RuneOption, f func(rune) []int64) Int64ArrOption {  if m.IsDefined() { return Int64ArrOpt(f(*m.value)) } else { return NoneInt64ArrOption }  }
/* RuneOption: rune->[]uint */ func MapUintArrToRuneOption(m RuneOption, f func(rune) []uint) UintArrOption {  if m.IsDefined() { return UintArrOpt(f(*m.value)) } else { return NoneUintArrOption }  }
/* RuneOption: rune->[]uint8 */ func MapUint8ArrToRuneOption(m RuneOption, f func(rune) []uint8) Uint8ArrOption {  if m.IsDefined() { return Uint8ArrOpt(f(*m.value)) } else { return NoneUint8ArrOption }  }
/* RuneOption: rune->[]uint16 */ func MapUint16ArrToRuneOption(m RuneOption, f func(rune) []uint16) Uint16ArrOption {  if m.IsDefined() { return Uint16ArrOpt(f(*m.value)) } else { return NoneUint16ArrOption }  }
/* RuneOption: rune->[]uint32 */ func MapUint32ArrToRuneOption(m RuneOption, f func(rune) []uint32) Uint32ArrOption {  if m.IsDefined() { return Uint32ArrOpt(f(*m.value)) } else { return NoneUint32ArrOption }  }
/* RuneOption: rune->[]uint64 */ func MapUint64ArrToRuneOption(m RuneOption, f func(rune) []uint64) Uint64ArrOption {  if m.IsDefined() { return Uint64ArrOpt(f(*m.value)) } else { return NoneUint64ArrOption }  }
/* RuneOption: rune->[]uintptr */ func MapUintptrArrToRuneOption(m RuneOption, f func(rune) []uintptr) UintptrArrOption {  if m.IsDefined() { return UintptrArrOpt(f(*m.value)) } else { return NoneUintptrArrOption }  }
/* RuneOption: rune->[]byte */ func MapByteArrToRuneOption(m RuneOption, f func(rune) []byte) ByteArrOption {  if m.IsDefined() { return ByteArrOpt(f(*m.value)) } else { return NoneByteArrOption }  }
/* RuneOption: rune->[]rune */ func MapRuneArrToRuneOption(m RuneOption, f func(rune) []rune) RuneArrOption {  if m.IsDefined() { return RuneArrOpt(f(*m.value)) } else { return NoneRuneArrOption }  }
/* RuneOption: rune->[]float32 */ func MapFloat32ArrToRuneOption(m RuneOption, f func(rune) []float32) Float32ArrOption {  if m.IsDefined() { return Float32ArrOpt(f(*m.value)) } else { return NoneFloat32ArrOption }  }
/* RuneOption: rune->[]float64 */ func MapFloat64ArrToRuneOption(m RuneOption, f func(rune) []float64) Float64ArrOption {  if m.IsDefined() { return Float64ArrOpt(f(*m.value)) } else { return NoneFloat64ArrOption }  }
/* RuneOption: rune->[]complex64 */ func MapComplex64ArrToRuneOption(m RuneOption, f func(rune) []complex64) Complex64ArrOption {  if m.IsDefined() { return Complex64ArrOpt(f(*m.value)) } else { return NoneComplex64ArrOption }  }
/* RuneOption: rune->[]complex128 */ func MapComplex128ArrToRuneOption(m RuneOption, f func(rune) []complex128) Complex128ArrOption {  if m.IsDefined() { return Complex128ArrOpt(f(*m.value)) } else { return NoneComplex128ArrOption }  }
/* RuneOption: rune->[]Any */ func MapAnyArrToRuneOption(m RuneOption, f func(rune) []Any) AnyArrOption {  if m.IsDefined() { return AnyArrOpt(f(*m.value)) } else { return NoneAnyArrOption }  }
/* RuneOption: rune->BoolList */ func MapBoolListToRuneOption(m RuneOption, f func(rune) BoolList) BoolListOption {  if m.IsDefined() { return BoolListOpt(f(*m.value)) } else { return NoneBoolListOption }  }
/* RuneOption: rune->StringList */ func MapStringListToRuneOption(m RuneOption, f func(rune) StringList) StringListOption {  if m.IsDefined() { return StringListOpt(f(*m.value)) } else { return NoneStringListOption }  }
/* RuneOption: rune->IntList */ func MapIntListToRuneOption(m RuneOption, f func(rune) IntList) IntListOption {  if m.IsDefined() { return IntListOpt(f(*m.value)) } else { return NoneIntListOption }  }
/* RuneOption: rune->Int8List */ func MapInt8ListToRuneOption(m RuneOption, f func(rune) Int8List) Int8ListOption {  if m.IsDefined() { return Int8ListOpt(f(*m.value)) } else { return NoneInt8ListOption }  }
/* RuneOption: rune->Int16List */ func MapInt16ListToRuneOption(m RuneOption, f func(rune) Int16List) Int16ListOption {  if m.IsDefined() { return Int16ListOpt(f(*m.value)) } else { return NoneInt16ListOption }  }
/* RuneOption: rune->Int32List */ func MapInt32ListToRuneOption(m RuneOption, f func(rune) Int32List) Int32ListOption {  if m.IsDefined() { return Int32ListOpt(f(*m.value)) } else { return NoneInt32ListOption }  }
/* RuneOption: rune->Int64List */ func MapInt64ListToRuneOption(m RuneOption, f func(rune) Int64List) Int64ListOption {  if m.IsDefined() { return Int64ListOpt(f(*m.value)) } else { return NoneInt64ListOption }  }
/* RuneOption: rune->UintList */ func MapUintListToRuneOption(m RuneOption, f func(rune) UintList) UintListOption {  if m.IsDefined() { return UintListOpt(f(*m.value)) } else { return NoneUintListOption }  }
/* RuneOption: rune->Uint8List */ func MapUint8ListToRuneOption(m RuneOption, f func(rune) Uint8List) Uint8ListOption {  if m.IsDefined() { return Uint8ListOpt(f(*m.value)) } else { return NoneUint8ListOption }  }
/* RuneOption: rune->Uint16List */ func MapUint16ListToRuneOption(m RuneOption, f func(rune) Uint16List) Uint16ListOption {  if m.IsDefined() { return Uint16ListOpt(f(*m.value)) } else { return NoneUint16ListOption }  }
/* RuneOption: rune->Uint32List */ func MapUint32ListToRuneOption(m RuneOption, f func(rune) Uint32List) Uint32ListOption {  if m.IsDefined() { return Uint32ListOpt(f(*m.value)) } else { return NoneUint32ListOption }  }
/* RuneOption: rune->Uint64List */ func MapUint64ListToRuneOption(m RuneOption, f func(rune) Uint64List) Uint64ListOption {  if m.IsDefined() { return Uint64ListOpt(f(*m.value)) } else { return NoneUint64ListOption }  }
/* RuneOption: rune->UintptrList */ func MapUintptrListToRuneOption(m RuneOption, f func(rune) UintptrList) UintptrListOption {  if m.IsDefined() { return UintptrListOpt(f(*m.value)) } else { return NoneUintptrListOption }  }
/* RuneOption: rune->ByteList */ func MapByteListToRuneOption(m RuneOption, f func(rune) ByteList) ByteListOption {  if m.IsDefined() { return ByteListOpt(f(*m.value)) } else { return NoneByteListOption }  }
/* RuneOption: rune->RuneList */ func MapRuneListToRuneOption(m RuneOption, f func(rune) RuneList) RuneListOption {  if m.IsDefined() { return RuneListOpt(f(*m.value)) } else { return NoneRuneListOption }  }
/* RuneOption: rune->Float32List */ func MapFloat32ListToRuneOption(m RuneOption, f func(rune) Float32List) Float32ListOption {  if m.IsDefined() { return Float32ListOpt(f(*m.value)) } else { return NoneFloat32ListOption }  }
/* RuneOption: rune->Float64List */ func MapFloat64ListToRuneOption(m RuneOption, f func(rune) Float64List) Float64ListOption {  if m.IsDefined() { return Float64ListOpt(f(*m.value)) } else { return NoneFloat64ListOption }  }
/* RuneOption: rune->Complex64List */ func MapComplex64ListToRuneOption(m RuneOption, f func(rune) Complex64List) Complex64ListOption {  if m.IsDefined() { return Complex64ListOpt(f(*m.value)) } else { return NoneComplex64ListOption }  }
/* RuneOption: rune->Complex128List */ func MapComplex128ListToRuneOption(m RuneOption, f func(rune) Complex128List) Complex128ListOption {  if m.IsDefined() { return Complex128ListOpt(f(*m.value)) } else { return NoneComplex128ListOption }  }
/* RuneOption: rune->AnyList */ func MapAnyListToRuneOption(m RuneOption, f func(rune) AnyList) AnyListOption {  if m.IsDefined() { return AnyListOpt(f(*m.value)) } else { return NoneAnyListOption }  }
/* Float32Option: float32->bool */ func MapBoolToFloat32Option(m Float32Option, f func(float32) bool) BoolOption {  if m.IsDefined() { return Bool(f(*m.value)) } else { return NoneBoolOption }  }
/* Float32Option: float32->string */ func MapStringToFloat32Option(m Float32Option, f func(float32) string) StringOption {  if m.IsDefined() { return String(f(*m.value)) } else { return NoneStringOption }  }
/* Float32Option: float32->int */ func MapIntToFloat32Option(m Float32Option, f func(float32) int) IntOption {  if m.IsDefined() { return Int(f(*m.value)) } else { return NoneIntOption }  }
/* Float32Option: float32->int8 */ func MapInt8ToFloat32Option(m Float32Option, f func(float32) int8) Int8Option {  if m.IsDefined() { return Int8(f(*m.value)) } else { return NoneInt8Option }  }
/* Float32Option: float32->int16 */ func MapInt16ToFloat32Option(m Float32Option, f func(float32) int16) Int16Option {  if m.IsDefined() { return Int16(f(*m.value)) } else { return NoneInt16Option }  }
/* Float32Option: float32->int32 */ func MapInt32ToFloat32Option(m Float32Option, f func(float32) int32) Int32Option {  if m.IsDefined() { return Int32(f(*m.value)) } else { return NoneInt32Option }  }
/* Float32Option: float32->int64 */ func MapInt64ToFloat32Option(m Float32Option, f func(float32) int64) Int64Option {  if m.IsDefined() { return Int64(f(*m.value)) } else { return NoneInt64Option }  }
/* Float32Option: float32->uint */ func MapUintToFloat32Option(m Float32Option, f func(float32) uint) UintOption {  if m.IsDefined() { return Uint(f(*m.value)) } else { return NoneUintOption }  }
/* Float32Option: float32->uint8 */ func MapUint8ToFloat32Option(m Float32Option, f func(float32) uint8) Uint8Option {  if m.IsDefined() { return Uint8(f(*m.value)) } else { return NoneUint8Option }  }
/* Float32Option: float32->uint16 */ func MapUint16ToFloat32Option(m Float32Option, f func(float32) uint16) Uint16Option {  if m.IsDefined() { return Uint16(f(*m.value)) } else { return NoneUint16Option }  }
/* Float32Option: float32->uint32 */ func MapUint32ToFloat32Option(m Float32Option, f func(float32) uint32) Uint32Option {  if m.IsDefined() { return Uint32(f(*m.value)) } else { return NoneUint32Option }  }
/* Float32Option: float32->uint64 */ func MapUint64ToFloat32Option(m Float32Option, f func(float32) uint64) Uint64Option {  if m.IsDefined() { return Uint64(f(*m.value)) } else { return NoneUint64Option }  }
/* Float32Option: float32->uintptr */ func MapUintptrToFloat32Option(m Float32Option, f func(float32) uintptr) UintptrOption {  if m.IsDefined() { return Uintptr(f(*m.value)) } else { return NoneUintptrOption }  }
/* Float32Option: float32->byte */ func MapByteToFloat32Option(m Float32Option, f func(float32) byte) ByteOption {  if m.IsDefined() { return Byte(f(*m.value)) } else { return NoneByteOption }  }
/* Float32Option: float32->rune */ func MapRuneToFloat32Option(m Float32Option, f func(float32) rune) RuneOption {  if m.IsDefined() { return Rune(f(*m.value)) } else { return NoneRuneOption }  }
/* Float32Option: float32->float32 */ func MapFloat32ToFloat32Option(m Float32Option, f func(float32) float32) Float32Option {  if m.IsDefined() { return Float32(f(*m.value)) } else { return NoneFloat32Option }  }
/* Float32Option: float32->float64 */ func MapFloat64ToFloat32Option(m Float32Option, f func(float32) float64) Float64Option {  if m.IsDefined() { return Float64(f(*m.value)) } else { return NoneFloat64Option }  }
/* Float32Option: float32->complex64 */ func MapComplex64ToFloat32Option(m Float32Option, f func(float32) complex64) Complex64Option {  if m.IsDefined() { return Complex64(f(*m.value)) } else { return NoneComplex64Option }  }
/* Float32Option: float32->complex128 */ func MapComplex128ToFloat32Option(m Float32Option, f func(float32) complex128) Complex128Option {  if m.IsDefined() { return Complex128(f(*m.value)) } else { return NoneComplex128Option }  }
/* Float32Option: float32->Any */ func MapAnyToFloat32Option(m Float32Option, f func(float32) Any) AnyOption {  if m.IsDefined() { return AnyOpt(f(*m.value)) } else { return NoneAnyOption }  }
/* Float32Option: float32->BoolOption */ func MapBoolOptionToFloat32Option(m Float32Option, f func(float32) BoolOption) BoolOptionOption {  if m.IsDefined() { return BoolBool(f(*m.value)) } else { return NoneBoolOptionOption }  }
/* Float32Option: float32->StringOption */ func MapStringOptionToFloat32Option(m Float32Option, f func(float32) StringOption) StringOptionOption {  if m.IsDefined() { return StringString(f(*m.value)) } else { return NoneStringOptionOption }  }
/* Float32Option: float32->IntOption */ func MapIntOptionToFloat32Option(m Float32Option, f func(float32) IntOption) IntOptionOption {  if m.IsDefined() { return IntInt(f(*m.value)) } else { return NoneIntOptionOption }  }
/* Float32Option: float32->Int8Option */ func MapInt8OptionToFloat32Option(m Float32Option, f func(float32) Int8Option) Int8OptionOption {  if m.IsDefined() { return Int8Int8(f(*m.value)) } else { return NoneInt8OptionOption }  }
/* Float32Option: float32->Int16Option */ func MapInt16OptionToFloat32Option(m Float32Option, f func(float32) Int16Option) Int16OptionOption {  if m.IsDefined() { return Int16Int16(f(*m.value)) } else { return NoneInt16OptionOption }  }
/* Float32Option: float32->Int32Option */ func MapInt32OptionToFloat32Option(m Float32Option, f func(float32) Int32Option) Int32OptionOption {  if m.IsDefined() { return Int32Int32(f(*m.value)) } else { return NoneInt32OptionOption }  }
/* Float32Option: float32->Int64Option */ func MapInt64OptionToFloat32Option(m Float32Option, f func(float32) Int64Option) Int64OptionOption {  if m.IsDefined() { return Int64Int64(f(*m.value)) } else { return NoneInt64OptionOption }  }
/* Float32Option: float32->UintOption */ func MapUintOptionToFloat32Option(m Float32Option, f func(float32) UintOption) UintOptionOption {  if m.IsDefined() { return UintUint(f(*m.value)) } else { return NoneUintOptionOption }  }
/* Float32Option: float32->Uint8Option */ func MapUint8OptionToFloat32Option(m Float32Option, f func(float32) Uint8Option) Uint8OptionOption {  if m.IsDefined() { return Uint8Uint8(f(*m.value)) } else { return NoneUint8OptionOption }  }
/* Float32Option: float32->Uint16Option */ func MapUint16OptionToFloat32Option(m Float32Option, f func(float32) Uint16Option) Uint16OptionOption {  if m.IsDefined() { return Uint16Uint16(f(*m.value)) } else { return NoneUint16OptionOption }  }
/* Float32Option: float32->Uint32Option */ func MapUint32OptionToFloat32Option(m Float32Option, f func(float32) Uint32Option) Uint32OptionOption {  if m.IsDefined() { return Uint32Uint32(f(*m.value)) } else { return NoneUint32OptionOption }  }
/* Float32Option: float32->Uint64Option */ func MapUint64OptionToFloat32Option(m Float32Option, f func(float32) Uint64Option) Uint64OptionOption {  if m.IsDefined() { return Uint64Uint64(f(*m.value)) } else { return NoneUint64OptionOption }  }
/* Float32Option: float32->UintptrOption */ func MapUintptrOptionToFloat32Option(m Float32Option, f func(float32) UintptrOption) UintptrOptionOption {  if m.IsDefined() { return UintptrUintptr(f(*m.value)) } else { return NoneUintptrOptionOption }  }
/* Float32Option: float32->ByteOption */ func MapByteOptionToFloat32Option(m Float32Option, f func(float32) ByteOption) ByteOptionOption {  if m.IsDefined() { return ByteByte(f(*m.value)) } else { return NoneByteOptionOption }  }
/* Float32Option: float32->RuneOption */ func MapRuneOptionToFloat32Option(m Float32Option, f func(float32) RuneOption) RuneOptionOption {  if m.IsDefined() { return RuneRune(f(*m.value)) } else { return NoneRuneOptionOption }  }
/* Float32Option: float32->Float32Option */ func MapFloat32OptionToFloat32Option(m Float32Option, f func(float32) Float32Option) Float32OptionOption {  if m.IsDefined() { return Float32Float32(f(*m.value)) } else { return NoneFloat32OptionOption }  }
/* Float32Option: float32->Float64Option */ func MapFloat64OptionToFloat32Option(m Float32Option, f func(float32) Float64Option) Float64OptionOption {  if m.IsDefined() { return Float64Float64(f(*m.value)) } else { return NoneFloat64OptionOption }  }
/* Float32Option: float32->Complex64Option */ func MapComplex64OptionToFloat32Option(m Float32Option, f func(float32) Complex64Option) Complex64OptionOption {  if m.IsDefined() { return Complex64Complex64(f(*m.value)) } else { return NoneComplex64OptionOption }  }
/* Float32Option: float32->Complex128Option */ func MapComplex128OptionToFloat32Option(m Float32Option, f func(float32) Complex128Option) Complex128OptionOption {  if m.IsDefined() { return Complex128Complex128(f(*m.value)) } else { return NoneComplex128OptionOption }  }
/* Float32Option: float32->AnyOption */ func MapAnyOptionToFloat32Option(m Float32Option, f func(float32) AnyOption) AnyOptionOption {  if m.IsDefined() { return AnyOptAny(f(*m.value)) } else { return NoneAnyOptionOption }  }
/* Float32Option: float32->[]bool */ func MapBoolArrToFloat32Option(m Float32Option, f func(float32) []bool) BoolArrOption {  if m.IsDefined() { return BoolArrOpt(f(*m.value)) } else { return NoneBoolArrOption }  }
/* Float32Option: float32->[]string */ func MapStringArrToFloat32Option(m Float32Option, f func(float32) []string) StringArrOption {  if m.IsDefined() { return StringArrOpt(f(*m.value)) } else { return NoneStringArrOption }  }
/* Float32Option: float32->[]int */ func MapIntArrToFloat32Option(m Float32Option, f func(float32) []int) IntArrOption {  if m.IsDefined() { return IntArrOpt(f(*m.value)) } else { return NoneIntArrOption }  }
/* Float32Option: float32->[]int8 */ func MapInt8ArrToFloat32Option(m Float32Option, f func(float32) []int8) Int8ArrOption {  if m.IsDefined() { return Int8ArrOpt(f(*m.value)) } else { return NoneInt8ArrOption }  }
/* Float32Option: float32->[]int16 */ func MapInt16ArrToFloat32Option(m Float32Option, f func(float32) []int16) Int16ArrOption {  if m.IsDefined() { return Int16ArrOpt(f(*m.value)) } else { return NoneInt16ArrOption }  }
/* Float32Option: float32->[]int32 */ func MapInt32ArrToFloat32Option(m Float32Option, f func(float32) []int32) Int32ArrOption {  if m.IsDefined() { return Int32ArrOpt(f(*m.value)) } else { return NoneInt32ArrOption }  }
/* Float32Option: float32->[]int64 */ func MapInt64ArrToFloat32Option(m Float32Option, f func(float32) []int64) Int64ArrOption {  if m.IsDefined() { return Int64ArrOpt(f(*m.value)) } else { return NoneInt64ArrOption }  }
/* Float32Option: float32->[]uint */ func MapUintArrToFloat32Option(m Float32Option, f func(float32) []uint) UintArrOption {  if m.IsDefined() { return UintArrOpt(f(*m.value)) } else { return NoneUintArrOption }  }
/* Float32Option: float32->[]uint8 */ func MapUint8ArrToFloat32Option(m Float32Option, f func(float32) []uint8) Uint8ArrOption {  if m.IsDefined() { return Uint8ArrOpt(f(*m.value)) } else { return NoneUint8ArrOption }  }
/* Float32Option: float32->[]uint16 */ func MapUint16ArrToFloat32Option(m Float32Option, f func(float32) []uint16) Uint16ArrOption {  if m.IsDefined() { return Uint16ArrOpt(f(*m.value)) } else { return NoneUint16ArrOption }  }
/* Float32Option: float32->[]uint32 */ func MapUint32ArrToFloat32Option(m Float32Option, f func(float32) []uint32) Uint32ArrOption {  if m.IsDefined() { return Uint32ArrOpt(f(*m.value)) } else { return NoneUint32ArrOption }  }
/* Float32Option: float32->[]uint64 */ func MapUint64ArrToFloat32Option(m Float32Option, f func(float32) []uint64) Uint64ArrOption {  if m.IsDefined() { return Uint64ArrOpt(f(*m.value)) } else { return NoneUint64ArrOption }  }
/* Float32Option: float32->[]uintptr */ func MapUintptrArrToFloat32Option(m Float32Option, f func(float32) []uintptr) UintptrArrOption {  if m.IsDefined() { return UintptrArrOpt(f(*m.value)) } else { return NoneUintptrArrOption }  }
/* Float32Option: float32->[]byte */ func MapByteArrToFloat32Option(m Float32Option, f func(float32) []byte) ByteArrOption {  if m.IsDefined() { return ByteArrOpt(f(*m.value)) } else { return NoneByteArrOption }  }
/* Float32Option: float32->[]rune */ func MapRuneArrToFloat32Option(m Float32Option, f func(float32) []rune) RuneArrOption {  if m.IsDefined() { return RuneArrOpt(f(*m.value)) } else { return NoneRuneArrOption }  }
/* Float32Option: float32->[]float32 */ func MapFloat32ArrToFloat32Option(m Float32Option, f func(float32) []float32) Float32ArrOption {  if m.IsDefined() { return Float32ArrOpt(f(*m.value)) } else { return NoneFloat32ArrOption }  }
/* Float32Option: float32->[]float64 */ func MapFloat64ArrToFloat32Option(m Float32Option, f func(float32) []float64) Float64ArrOption {  if m.IsDefined() { return Float64ArrOpt(f(*m.value)) } else { return NoneFloat64ArrOption }  }
/* Float32Option: float32->[]complex64 */ func MapComplex64ArrToFloat32Option(m Float32Option, f func(float32) []complex64) Complex64ArrOption {  if m.IsDefined() { return Complex64ArrOpt(f(*m.value)) } else { return NoneComplex64ArrOption }  }
/* Float32Option: float32->[]complex128 */ func MapComplex128ArrToFloat32Option(m Float32Option, f func(float32) []complex128) Complex128ArrOption {  if m.IsDefined() { return Complex128ArrOpt(f(*m.value)) } else { return NoneComplex128ArrOption }  }
/* Float32Option: float32->[]Any */ func MapAnyArrToFloat32Option(m Float32Option, f func(float32) []Any) AnyArrOption {  if m.IsDefined() { return AnyArrOpt(f(*m.value)) } else { return NoneAnyArrOption }  }
/* Float32Option: float32->BoolList */ func MapBoolListToFloat32Option(m Float32Option, f func(float32) BoolList) BoolListOption {  if m.IsDefined() { return BoolListOpt(f(*m.value)) } else { return NoneBoolListOption }  }
/* Float32Option: float32->StringList */ func MapStringListToFloat32Option(m Float32Option, f func(float32) StringList) StringListOption {  if m.IsDefined() { return StringListOpt(f(*m.value)) } else { return NoneStringListOption }  }
/* Float32Option: float32->IntList */ func MapIntListToFloat32Option(m Float32Option, f func(float32) IntList) IntListOption {  if m.IsDefined() { return IntListOpt(f(*m.value)) } else { return NoneIntListOption }  }
/* Float32Option: float32->Int8List */ func MapInt8ListToFloat32Option(m Float32Option, f func(float32) Int8List) Int8ListOption {  if m.IsDefined() { return Int8ListOpt(f(*m.value)) } else { return NoneInt8ListOption }  }
/* Float32Option: float32->Int16List */ func MapInt16ListToFloat32Option(m Float32Option, f func(float32) Int16List) Int16ListOption {  if m.IsDefined() { return Int16ListOpt(f(*m.value)) } else { return NoneInt16ListOption }  }
/* Float32Option: float32->Int32List */ func MapInt32ListToFloat32Option(m Float32Option, f func(float32) Int32List) Int32ListOption {  if m.IsDefined() { return Int32ListOpt(f(*m.value)) } else { return NoneInt32ListOption }  }
/* Float32Option: float32->Int64List */ func MapInt64ListToFloat32Option(m Float32Option, f func(float32) Int64List) Int64ListOption {  if m.IsDefined() { return Int64ListOpt(f(*m.value)) } else { return NoneInt64ListOption }  }
/* Float32Option: float32->UintList */ func MapUintListToFloat32Option(m Float32Option, f func(float32) UintList) UintListOption {  if m.IsDefined() { return UintListOpt(f(*m.value)) } else { return NoneUintListOption }  }
/* Float32Option: float32->Uint8List */ func MapUint8ListToFloat32Option(m Float32Option, f func(float32) Uint8List) Uint8ListOption {  if m.IsDefined() { return Uint8ListOpt(f(*m.value)) } else { return NoneUint8ListOption }  }
/* Float32Option: float32->Uint16List */ func MapUint16ListToFloat32Option(m Float32Option, f func(float32) Uint16List) Uint16ListOption {  if m.IsDefined() { return Uint16ListOpt(f(*m.value)) } else { return NoneUint16ListOption }  }
/* Float32Option: float32->Uint32List */ func MapUint32ListToFloat32Option(m Float32Option, f func(float32) Uint32List) Uint32ListOption {  if m.IsDefined() { return Uint32ListOpt(f(*m.value)) } else { return NoneUint32ListOption }  }
/* Float32Option: float32->Uint64List */ func MapUint64ListToFloat32Option(m Float32Option, f func(float32) Uint64List) Uint64ListOption {  if m.IsDefined() { return Uint64ListOpt(f(*m.value)) } else { return NoneUint64ListOption }  }
/* Float32Option: float32->UintptrList */ func MapUintptrListToFloat32Option(m Float32Option, f func(float32) UintptrList) UintptrListOption {  if m.IsDefined() { return UintptrListOpt(f(*m.value)) } else { return NoneUintptrListOption }  }
/* Float32Option: float32->ByteList */ func MapByteListToFloat32Option(m Float32Option, f func(float32) ByteList) ByteListOption {  if m.IsDefined() { return ByteListOpt(f(*m.value)) } else { return NoneByteListOption }  }
/* Float32Option: float32->RuneList */ func MapRuneListToFloat32Option(m Float32Option, f func(float32) RuneList) RuneListOption {  if m.IsDefined() { return RuneListOpt(f(*m.value)) } else { return NoneRuneListOption }  }
/* Float32Option: float32->Float32List */ func MapFloat32ListToFloat32Option(m Float32Option, f func(float32) Float32List) Float32ListOption {  if m.IsDefined() { return Float32ListOpt(f(*m.value)) } else { return NoneFloat32ListOption }  }
/* Float32Option: float32->Float64List */ func MapFloat64ListToFloat32Option(m Float32Option, f func(float32) Float64List) Float64ListOption {  if m.IsDefined() { return Float64ListOpt(f(*m.value)) } else { return NoneFloat64ListOption }  }
/* Float32Option: float32->Complex64List */ func MapComplex64ListToFloat32Option(m Float32Option, f func(float32) Complex64List) Complex64ListOption {  if m.IsDefined() { return Complex64ListOpt(f(*m.value)) } else { return NoneComplex64ListOption }  }
/* Float32Option: float32->Complex128List */ func MapComplex128ListToFloat32Option(m Float32Option, f func(float32) Complex128List) Complex128ListOption {  if m.IsDefined() { return Complex128ListOpt(f(*m.value)) } else { return NoneComplex128ListOption }  }
/* Float32Option: float32->AnyList */ func MapAnyListToFloat32Option(m Float32Option, f func(float32) AnyList) AnyListOption {  if m.IsDefined() { return AnyListOpt(f(*m.value)) } else { return NoneAnyListOption }  }
/* Float64Option: float64->bool */ func MapBoolToFloat64Option(m Float64Option, f func(float64) bool) BoolOption {  if m.IsDefined() { return Bool(f(*m.value)) } else { return NoneBoolOption }  }
/* Float64Option: float64->string */ func MapStringToFloat64Option(m Float64Option, f func(float64) string) StringOption {  if m.IsDefined() { return String(f(*m.value)) } else { return NoneStringOption }  }
/* Float64Option: float64->int */ func MapIntToFloat64Option(m Float64Option, f func(float64) int) IntOption {  if m.IsDefined() { return Int(f(*m.value)) } else { return NoneIntOption }  }
/* Float64Option: float64->int8 */ func MapInt8ToFloat64Option(m Float64Option, f func(float64) int8) Int8Option {  if m.IsDefined() { return Int8(f(*m.value)) } else { return NoneInt8Option }  }
/* Float64Option: float64->int16 */ func MapInt16ToFloat64Option(m Float64Option, f func(float64) int16) Int16Option {  if m.IsDefined() { return Int16(f(*m.value)) } else { return NoneInt16Option }  }
/* Float64Option: float64->int32 */ func MapInt32ToFloat64Option(m Float64Option, f func(float64) int32) Int32Option {  if m.IsDefined() { return Int32(f(*m.value)) } else { return NoneInt32Option }  }
/* Float64Option: float64->int64 */ func MapInt64ToFloat64Option(m Float64Option, f func(float64) int64) Int64Option {  if m.IsDefined() { return Int64(f(*m.value)) } else { return NoneInt64Option }  }
/* Float64Option: float64->uint */ func MapUintToFloat64Option(m Float64Option, f func(float64) uint) UintOption {  if m.IsDefined() { return Uint(f(*m.value)) } else { return NoneUintOption }  }
/* Float64Option: float64->uint8 */ func MapUint8ToFloat64Option(m Float64Option, f func(float64) uint8) Uint8Option {  if m.IsDefined() { return Uint8(f(*m.value)) } else { return NoneUint8Option }  }
/* Float64Option: float64->uint16 */ func MapUint16ToFloat64Option(m Float64Option, f func(float64) uint16) Uint16Option {  if m.IsDefined() { return Uint16(f(*m.value)) } else { return NoneUint16Option }  }
/* Float64Option: float64->uint32 */ func MapUint32ToFloat64Option(m Float64Option, f func(float64) uint32) Uint32Option {  if m.IsDefined() { return Uint32(f(*m.value)) } else { return NoneUint32Option }  }
/* Float64Option: float64->uint64 */ func MapUint64ToFloat64Option(m Float64Option, f func(float64) uint64) Uint64Option {  if m.IsDefined() { return Uint64(f(*m.value)) } else { return NoneUint64Option }  }
/* Float64Option: float64->uintptr */ func MapUintptrToFloat64Option(m Float64Option, f func(float64) uintptr) UintptrOption {  if m.IsDefined() { return Uintptr(f(*m.value)) } else { return NoneUintptrOption }  }
/* Float64Option: float64->byte */ func MapByteToFloat64Option(m Float64Option, f func(float64) byte) ByteOption {  if m.IsDefined() { return Byte(f(*m.value)) } else { return NoneByteOption }  }
/* Float64Option: float64->rune */ func MapRuneToFloat64Option(m Float64Option, f func(float64) rune) RuneOption {  if m.IsDefined() { return Rune(f(*m.value)) } else { return NoneRuneOption }  }
/* Float64Option: float64->float32 */ func MapFloat32ToFloat64Option(m Float64Option, f func(float64) float32) Float32Option {  if m.IsDefined() { return Float32(f(*m.value)) } else { return NoneFloat32Option }  }
/* Float64Option: float64->float64 */ func MapFloat64ToFloat64Option(m Float64Option, f func(float64) float64) Float64Option {  if m.IsDefined() { return Float64(f(*m.value)) } else { return NoneFloat64Option }  }
/* Float64Option: float64->complex64 */ func MapComplex64ToFloat64Option(m Float64Option, f func(float64) complex64) Complex64Option {  if m.IsDefined() { return Complex64(f(*m.value)) } else { return NoneComplex64Option }  }
/* Float64Option: float64->complex128 */ func MapComplex128ToFloat64Option(m Float64Option, f func(float64) complex128) Complex128Option {  if m.IsDefined() { return Complex128(f(*m.value)) } else { return NoneComplex128Option }  }
/* Float64Option: float64->Any */ func MapAnyToFloat64Option(m Float64Option, f func(float64) Any) AnyOption {  if m.IsDefined() { return AnyOpt(f(*m.value)) } else { return NoneAnyOption }  }
/* Float64Option: float64->BoolOption */ func MapBoolOptionToFloat64Option(m Float64Option, f func(float64) BoolOption) BoolOptionOption {  if m.IsDefined() { return BoolBool(f(*m.value)) } else { return NoneBoolOptionOption }  }
/* Float64Option: float64->StringOption */ func MapStringOptionToFloat64Option(m Float64Option, f func(float64) StringOption) StringOptionOption {  if m.IsDefined() { return StringString(f(*m.value)) } else { return NoneStringOptionOption }  }
/* Float64Option: float64->IntOption */ func MapIntOptionToFloat64Option(m Float64Option, f func(float64) IntOption) IntOptionOption {  if m.IsDefined() { return IntInt(f(*m.value)) } else { return NoneIntOptionOption }  }
/* Float64Option: float64->Int8Option */ func MapInt8OptionToFloat64Option(m Float64Option, f func(float64) Int8Option) Int8OptionOption {  if m.IsDefined() { return Int8Int8(f(*m.value)) } else { return NoneInt8OptionOption }  }
/* Float64Option: float64->Int16Option */ func MapInt16OptionToFloat64Option(m Float64Option, f func(float64) Int16Option) Int16OptionOption {  if m.IsDefined() { return Int16Int16(f(*m.value)) } else { return NoneInt16OptionOption }  }
/* Float64Option: float64->Int32Option */ func MapInt32OptionToFloat64Option(m Float64Option, f func(float64) Int32Option) Int32OptionOption {  if m.IsDefined() { return Int32Int32(f(*m.value)) } else { return NoneInt32OptionOption }  }
/* Float64Option: float64->Int64Option */ func MapInt64OptionToFloat64Option(m Float64Option, f func(float64) Int64Option) Int64OptionOption {  if m.IsDefined() { return Int64Int64(f(*m.value)) } else { return NoneInt64OptionOption }  }
/* Float64Option: float64->UintOption */ func MapUintOptionToFloat64Option(m Float64Option, f func(float64) UintOption) UintOptionOption {  if m.IsDefined() { return UintUint(f(*m.value)) } else { return NoneUintOptionOption }  }
/* Float64Option: float64->Uint8Option */ func MapUint8OptionToFloat64Option(m Float64Option, f func(float64) Uint8Option) Uint8OptionOption {  if m.IsDefined() { return Uint8Uint8(f(*m.value)) } else { return NoneUint8OptionOption }  }
/* Float64Option: float64->Uint16Option */ func MapUint16OptionToFloat64Option(m Float64Option, f func(float64) Uint16Option) Uint16OptionOption {  if m.IsDefined() { return Uint16Uint16(f(*m.value)) } else { return NoneUint16OptionOption }  }
/* Float64Option: float64->Uint32Option */ func MapUint32OptionToFloat64Option(m Float64Option, f func(float64) Uint32Option) Uint32OptionOption {  if m.IsDefined() { return Uint32Uint32(f(*m.value)) } else { return NoneUint32OptionOption }  }
/* Float64Option: float64->Uint64Option */ func MapUint64OptionToFloat64Option(m Float64Option, f func(float64) Uint64Option) Uint64OptionOption {  if m.IsDefined() { return Uint64Uint64(f(*m.value)) } else { return NoneUint64OptionOption }  }
/* Float64Option: float64->UintptrOption */ func MapUintptrOptionToFloat64Option(m Float64Option, f func(float64) UintptrOption) UintptrOptionOption {  if m.IsDefined() { return UintptrUintptr(f(*m.value)) } else { return NoneUintptrOptionOption }  }
/* Float64Option: float64->ByteOption */ func MapByteOptionToFloat64Option(m Float64Option, f func(float64) ByteOption) ByteOptionOption {  if m.IsDefined() { return ByteByte(f(*m.value)) } else { return NoneByteOptionOption }  }
/* Float64Option: float64->RuneOption */ func MapRuneOptionToFloat64Option(m Float64Option, f func(float64) RuneOption) RuneOptionOption {  if m.IsDefined() { return RuneRune(f(*m.value)) } else { return NoneRuneOptionOption }  }
/* Float64Option: float64->Float32Option */ func MapFloat32OptionToFloat64Option(m Float64Option, f func(float64) Float32Option) Float32OptionOption {  if m.IsDefined() { return Float32Float32(f(*m.value)) } else { return NoneFloat32OptionOption }  }
/* Float64Option: float64->Float64Option */ func MapFloat64OptionToFloat64Option(m Float64Option, f func(float64) Float64Option) Float64OptionOption {  if m.IsDefined() { return Float64Float64(f(*m.value)) } else { return NoneFloat64OptionOption }  }
/* Float64Option: float64->Complex64Option */ func MapComplex64OptionToFloat64Option(m Float64Option, f func(float64) Complex64Option) Complex64OptionOption {  if m.IsDefined() { return Complex64Complex64(f(*m.value)) } else { return NoneComplex64OptionOption }  }
/* Float64Option: float64->Complex128Option */ func MapComplex128OptionToFloat64Option(m Float64Option, f func(float64) Complex128Option) Complex128OptionOption {  if m.IsDefined() { return Complex128Complex128(f(*m.value)) } else { return NoneComplex128OptionOption }  }
/* Float64Option: float64->AnyOption */ func MapAnyOptionToFloat64Option(m Float64Option, f func(float64) AnyOption) AnyOptionOption {  if m.IsDefined() { return AnyOptAny(f(*m.value)) } else { return NoneAnyOptionOption }  }
/* Float64Option: float64->[]bool */ func MapBoolArrToFloat64Option(m Float64Option, f func(float64) []bool) BoolArrOption {  if m.IsDefined() { return BoolArrOpt(f(*m.value)) } else { return NoneBoolArrOption }  }
/* Float64Option: float64->[]string */ func MapStringArrToFloat64Option(m Float64Option, f func(float64) []string) StringArrOption {  if m.IsDefined() { return StringArrOpt(f(*m.value)) } else { return NoneStringArrOption }  }
/* Float64Option: float64->[]int */ func MapIntArrToFloat64Option(m Float64Option, f func(float64) []int) IntArrOption {  if m.IsDefined() { return IntArrOpt(f(*m.value)) } else { return NoneIntArrOption }  }
/* Float64Option: float64->[]int8 */ func MapInt8ArrToFloat64Option(m Float64Option, f func(float64) []int8) Int8ArrOption {  if m.IsDefined() { return Int8ArrOpt(f(*m.value)) } else { return NoneInt8ArrOption }  }
/* Float64Option: float64->[]int16 */ func MapInt16ArrToFloat64Option(m Float64Option, f func(float64) []int16) Int16ArrOption {  if m.IsDefined() { return Int16ArrOpt(f(*m.value)) } else { return NoneInt16ArrOption }  }
/* Float64Option: float64->[]int32 */ func MapInt32ArrToFloat64Option(m Float64Option, f func(float64) []int32) Int32ArrOption {  if m.IsDefined() { return Int32ArrOpt(f(*m.value)) } else { return NoneInt32ArrOption }  }
/* Float64Option: float64->[]int64 */ func MapInt64ArrToFloat64Option(m Float64Option, f func(float64) []int64) Int64ArrOption {  if m.IsDefined() { return Int64ArrOpt(f(*m.value)) } else { return NoneInt64ArrOption }  }
/* Float64Option: float64->[]uint */ func MapUintArrToFloat64Option(m Float64Option, f func(float64) []uint) UintArrOption {  if m.IsDefined() { return UintArrOpt(f(*m.value)) } else { return NoneUintArrOption }  }
/* Float64Option: float64->[]uint8 */ func MapUint8ArrToFloat64Option(m Float64Option, f func(float64) []uint8) Uint8ArrOption {  if m.IsDefined() { return Uint8ArrOpt(f(*m.value)) } else { return NoneUint8ArrOption }  }
/* Float64Option: float64->[]uint16 */ func MapUint16ArrToFloat64Option(m Float64Option, f func(float64) []uint16) Uint16ArrOption {  if m.IsDefined() { return Uint16ArrOpt(f(*m.value)) } else { return NoneUint16ArrOption }  }
/* Float64Option: float64->[]uint32 */ func MapUint32ArrToFloat64Option(m Float64Option, f func(float64) []uint32) Uint32ArrOption {  if m.IsDefined() { return Uint32ArrOpt(f(*m.value)) } else { return NoneUint32ArrOption }  }
/* Float64Option: float64->[]uint64 */ func MapUint64ArrToFloat64Option(m Float64Option, f func(float64) []uint64) Uint64ArrOption {  if m.IsDefined() { return Uint64ArrOpt(f(*m.value)) } else { return NoneUint64ArrOption }  }
/* Float64Option: float64->[]uintptr */ func MapUintptrArrToFloat64Option(m Float64Option, f func(float64) []uintptr) UintptrArrOption {  if m.IsDefined() { return UintptrArrOpt(f(*m.value)) } else { return NoneUintptrArrOption }  }
/* Float64Option: float64->[]byte */ func MapByteArrToFloat64Option(m Float64Option, f func(float64) []byte) ByteArrOption {  if m.IsDefined() { return ByteArrOpt(f(*m.value)) } else { return NoneByteArrOption }  }
/* Float64Option: float64->[]rune */ func MapRuneArrToFloat64Option(m Float64Option, f func(float64) []rune) RuneArrOption {  if m.IsDefined() { return RuneArrOpt(f(*m.value)) } else { return NoneRuneArrOption }  }
/* Float64Option: float64->[]float32 */ func MapFloat32ArrToFloat64Option(m Float64Option, f func(float64) []float32) Float32ArrOption {  if m.IsDefined() { return Float32ArrOpt(f(*m.value)) } else { return NoneFloat32ArrOption }  }
/* Float64Option: float64->[]float64 */ func MapFloat64ArrToFloat64Option(m Float64Option, f func(float64) []float64) Float64ArrOption {  if m.IsDefined() { return Float64ArrOpt(f(*m.value)) } else { return NoneFloat64ArrOption }  }
/* Float64Option: float64->[]complex64 */ func MapComplex64ArrToFloat64Option(m Float64Option, f func(float64) []complex64) Complex64ArrOption {  if m.IsDefined() { return Complex64ArrOpt(f(*m.value)) } else { return NoneComplex64ArrOption }  }
/* Float64Option: float64->[]complex128 */ func MapComplex128ArrToFloat64Option(m Float64Option, f func(float64) []complex128) Complex128ArrOption {  if m.IsDefined() { return Complex128ArrOpt(f(*m.value)) } else { return NoneComplex128ArrOption }  }
/* Float64Option: float64->[]Any */ func MapAnyArrToFloat64Option(m Float64Option, f func(float64) []Any) AnyArrOption {  if m.IsDefined() { return AnyArrOpt(f(*m.value)) } else { return NoneAnyArrOption }  }
/* Float64Option: float64->BoolList */ func MapBoolListToFloat64Option(m Float64Option, f func(float64) BoolList) BoolListOption {  if m.IsDefined() { return BoolListOpt(f(*m.value)) } else { return NoneBoolListOption }  }
/* Float64Option: float64->StringList */ func MapStringListToFloat64Option(m Float64Option, f func(float64) StringList) StringListOption {  if m.IsDefined() { return StringListOpt(f(*m.value)) } else { return NoneStringListOption }  }
/* Float64Option: float64->IntList */ func MapIntListToFloat64Option(m Float64Option, f func(float64) IntList) IntListOption {  if m.IsDefined() { return IntListOpt(f(*m.value)) } else { return NoneIntListOption }  }
/* Float64Option: float64->Int8List */ func MapInt8ListToFloat64Option(m Float64Option, f func(float64) Int8List) Int8ListOption {  if m.IsDefined() { return Int8ListOpt(f(*m.value)) } else { return NoneInt8ListOption }  }
/* Float64Option: float64->Int16List */ func MapInt16ListToFloat64Option(m Float64Option, f func(float64) Int16List) Int16ListOption {  if m.IsDefined() { return Int16ListOpt(f(*m.value)) } else { return NoneInt16ListOption }  }
/* Float64Option: float64->Int32List */ func MapInt32ListToFloat64Option(m Float64Option, f func(float64) Int32List) Int32ListOption {  if m.IsDefined() { return Int32ListOpt(f(*m.value)) } else { return NoneInt32ListOption }  }
/* Float64Option: float64->Int64List */ func MapInt64ListToFloat64Option(m Float64Option, f func(float64) Int64List) Int64ListOption {  if m.IsDefined() { return Int64ListOpt(f(*m.value)) } else { return NoneInt64ListOption }  }
/* Float64Option: float64->UintList */ func MapUintListToFloat64Option(m Float64Option, f func(float64) UintList) UintListOption {  if m.IsDefined() { return UintListOpt(f(*m.value)) } else { return NoneUintListOption }  }
/* Float64Option: float64->Uint8List */ func MapUint8ListToFloat64Option(m Float64Option, f func(float64) Uint8List) Uint8ListOption {  if m.IsDefined() { return Uint8ListOpt(f(*m.value)) } else { return NoneUint8ListOption }  }
/* Float64Option: float64->Uint16List */ func MapUint16ListToFloat64Option(m Float64Option, f func(float64) Uint16List) Uint16ListOption {  if m.IsDefined() { return Uint16ListOpt(f(*m.value)) } else { return NoneUint16ListOption }  }
/* Float64Option: float64->Uint32List */ func MapUint32ListToFloat64Option(m Float64Option, f func(float64) Uint32List) Uint32ListOption {  if m.IsDefined() { return Uint32ListOpt(f(*m.value)) } else { return NoneUint32ListOption }  }
/* Float64Option: float64->Uint64List */ func MapUint64ListToFloat64Option(m Float64Option, f func(float64) Uint64List) Uint64ListOption {  if m.IsDefined() { return Uint64ListOpt(f(*m.value)) } else { return NoneUint64ListOption }  }
/* Float64Option: float64->UintptrList */ func MapUintptrListToFloat64Option(m Float64Option, f func(float64) UintptrList) UintptrListOption {  if m.IsDefined() { return UintptrListOpt(f(*m.value)) } else { return NoneUintptrListOption }  }
/* Float64Option: float64->ByteList */ func MapByteListToFloat64Option(m Float64Option, f func(float64) ByteList) ByteListOption {  if m.IsDefined() { return ByteListOpt(f(*m.value)) } else { return NoneByteListOption }  }
/* Float64Option: float64->RuneList */ func MapRuneListToFloat64Option(m Float64Option, f func(float64) RuneList) RuneListOption {  if m.IsDefined() { return RuneListOpt(f(*m.value)) } else { return NoneRuneListOption }  }
/* Float64Option: float64->Float32List */ func MapFloat32ListToFloat64Option(m Float64Option, f func(float64) Float32List) Float32ListOption {  if m.IsDefined() { return Float32ListOpt(f(*m.value)) } else { return NoneFloat32ListOption }  }
/* Float64Option: float64->Float64List */ func MapFloat64ListToFloat64Option(m Float64Option, f func(float64) Float64List) Float64ListOption {  if m.IsDefined() { return Float64ListOpt(f(*m.value)) } else { return NoneFloat64ListOption }  }
/* Float64Option: float64->Complex64List */ func MapComplex64ListToFloat64Option(m Float64Option, f func(float64) Complex64List) Complex64ListOption {  if m.IsDefined() { return Complex64ListOpt(f(*m.value)) } else { return NoneComplex64ListOption }  }
/* Float64Option: float64->Complex128List */ func MapComplex128ListToFloat64Option(m Float64Option, f func(float64) Complex128List) Complex128ListOption {  if m.IsDefined() { return Complex128ListOpt(f(*m.value)) } else { return NoneComplex128ListOption }  }
/* Float64Option: float64->AnyList */ func MapAnyListToFloat64Option(m Float64Option, f func(float64) AnyList) AnyListOption {  if m.IsDefined() { return AnyListOpt(f(*m.value)) } else { return NoneAnyListOption }  }
/* Complex64Option: complex64->bool */ func MapBoolToComplex64Option(m Complex64Option, f func(complex64) bool) BoolOption {  if m.IsDefined() { return Bool(f(*m.value)) } else { return NoneBoolOption }  }
/* Complex64Option: complex64->string */ func MapStringToComplex64Option(m Complex64Option, f func(complex64) string) StringOption {  if m.IsDefined() { return String(f(*m.value)) } else { return NoneStringOption }  }
/* Complex64Option: complex64->int */ func MapIntToComplex64Option(m Complex64Option, f func(complex64) int) IntOption {  if m.IsDefined() { return Int(f(*m.value)) } else { return NoneIntOption }  }
/* Complex64Option: complex64->int8 */ func MapInt8ToComplex64Option(m Complex64Option, f func(complex64) int8) Int8Option {  if m.IsDefined() { return Int8(f(*m.value)) } else { return NoneInt8Option }  }
/* Complex64Option: complex64->int16 */ func MapInt16ToComplex64Option(m Complex64Option, f func(complex64) int16) Int16Option {  if m.IsDefined() { return Int16(f(*m.value)) } else { return NoneInt16Option }  }
/* Complex64Option: complex64->int32 */ func MapInt32ToComplex64Option(m Complex64Option, f func(complex64) int32) Int32Option {  if m.IsDefined() { return Int32(f(*m.value)) } else { return NoneInt32Option }  }
/* Complex64Option: complex64->int64 */ func MapInt64ToComplex64Option(m Complex64Option, f func(complex64) int64) Int64Option {  if m.IsDefined() { return Int64(f(*m.value)) } else { return NoneInt64Option }  }
/* Complex64Option: complex64->uint */ func MapUintToComplex64Option(m Complex64Option, f func(complex64) uint) UintOption {  if m.IsDefined() { return Uint(f(*m.value)) } else { return NoneUintOption }  }
/* Complex64Option: complex64->uint8 */ func MapUint8ToComplex64Option(m Complex64Option, f func(complex64) uint8) Uint8Option {  if m.IsDefined() { return Uint8(f(*m.value)) } else { return NoneUint8Option }  }
/* Complex64Option: complex64->uint16 */ func MapUint16ToComplex64Option(m Complex64Option, f func(complex64) uint16) Uint16Option {  if m.IsDefined() { return Uint16(f(*m.value)) } else { return NoneUint16Option }  }
/* Complex64Option: complex64->uint32 */ func MapUint32ToComplex64Option(m Complex64Option, f func(complex64) uint32) Uint32Option {  if m.IsDefined() { return Uint32(f(*m.value)) } else { return NoneUint32Option }  }
/* Complex64Option: complex64->uint64 */ func MapUint64ToComplex64Option(m Complex64Option, f func(complex64) uint64) Uint64Option {  if m.IsDefined() { return Uint64(f(*m.value)) } else { return NoneUint64Option }  }
/* Complex64Option: complex64->uintptr */ func MapUintptrToComplex64Option(m Complex64Option, f func(complex64) uintptr) UintptrOption {  if m.IsDefined() { return Uintptr(f(*m.value)) } else { return NoneUintptrOption }  }
/* Complex64Option: complex64->byte */ func MapByteToComplex64Option(m Complex64Option, f func(complex64) byte) ByteOption {  if m.IsDefined() { return Byte(f(*m.value)) } else { return NoneByteOption }  }
/* Complex64Option: complex64->rune */ func MapRuneToComplex64Option(m Complex64Option, f func(complex64) rune) RuneOption {  if m.IsDefined() { return Rune(f(*m.value)) } else { return NoneRuneOption }  }
/* Complex64Option: complex64->float32 */ func MapFloat32ToComplex64Option(m Complex64Option, f func(complex64) float32) Float32Option {  if m.IsDefined() { return Float32(f(*m.value)) } else { return NoneFloat32Option }  }
/* Complex64Option: complex64->float64 */ func MapFloat64ToComplex64Option(m Complex64Option, f func(complex64) float64) Float64Option {  if m.IsDefined() { return Float64(f(*m.value)) } else { return NoneFloat64Option }  }
/* Complex64Option: complex64->complex64 */ func MapComplex64ToComplex64Option(m Complex64Option, f func(complex64) complex64) Complex64Option {  if m.IsDefined() { return Complex64(f(*m.value)) } else { return NoneComplex64Option }  }
/* Complex64Option: complex64->complex128 */ func MapComplex128ToComplex64Option(m Complex64Option, f func(complex64) complex128) Complex128Option {  if m.IsDefined() { return Complex128(f(*m.value)) } else { return NoneComplex128Option }  }
/* Complex64Option: complex64->Any */ func MapAnyToComplex64Option(m Complex64Option, f func(complex64) Any) AnyOption {  if m.IsDefined() { return AnyOpt(f(*m.value)) } else { return NoneAnyOption }  }
/* Complex64Option: complex64->BoolOption */ func MapBoolOptionToComplex64Option(m Complex64Option, f func(complex64) BoolOption) BoolOptionOption {  if m.IsDefined() { return BoolBool(f(*m.value)) } else { return NoneBoolOptionOption }  }
/* Complex64Option: complex64->StringOption */ func MapStringOptionToComplex64Option(m Complex64Option, f func(complex64) StringOption) StringOptionOption {  if m.IsDefined() { return StringString(f(*m.value)) } else { return NoneStringOptionOption }  }
/* Complex64Option: complex64->IntOption */ func MapIntOptionToComplex64Option(m Complex64Option, f func(complex64) IntOption) IntOptionOption {  if m.IsDefined() { return IntInt(f(*m.value)) } else { return NoneIntOptionOption }  }
/* Complex64Option: complex64->Int8Option */ func MapInt8OptionToComplex64Option(m Complex64Option, f func(complex64) Int8Option) Int8OptionOption {  if m.IsDefined() { return Int8Int8(f(*m.value)) } else { return NoneInt8OptionOption }  }
/* Complex64Option: complex64->Int16Option */ func MapInt16OptionToComplex64Option(m Complex64Option, f func(complex64) Int16Option) Int16OptionOption {  if m.IsDefined() { return Int16Int16(f(*m.value)) } else { return NoneInt16OptionOption }  }
/* Complex64Option: complex64->Int32Option */ func MapInt32OptionToComplex64Option(m Complex64Option, f func(complex64) Int32Option) Int32OptionOption {  if m.IsDefined() { return Int32Int32(f(*m.value)) } else { return NoneInt32OptionOption }  }
/* Complex64Option: complex64->Int64Option */ func MapInt64OptionToComplex64Option(m Complex64Option, f func(complex64) Int64Option) Int64OptionOption {  if m.IsDefined() { return Int64Int64(f(*m.value)) } else { return NoneInt64OptionOption }  }
/* Complex64Option: complex64->UintOption */ func MapUintOptionToComplex64Option(m Complex64Option, f func(complex64) UintOption) UintOptionOption {  if m.IsDefined() { return UintUint(f(*m.value)) } else { return NoneUintOptionOption }  }
/* Complex64Option: complex64->Uint8Option */ func MapUint8OptionToComplex64Option(m Complex64Option, f func(complex64) Uint8Option) Uint8OptionOption {  if m.IsDefined() { return Uint8Uint8(f(*m.value)) } else { return NoneUint8OptionOption }  }
/* Complex64Option: complex64->Uint16Option */ func MapUint16OptionToComplex64Option(m Complex64Option, f func(complex64) Uint16Option) Uint16OptionOption {  if m.IsDefined() { return Uint16Uint16(f(*m.value)) } else { return NoneUint16OptionOption }  }
/* Complex64Option: complex64->Uint32Option */ func MapUint32OptionToComplex64Option(m Complex64Option, f func(complex64) Uint32Option) Uint32OptionOption {  if m.IsDefined() { return Uint32Uint32(f(*m.value)) } else { return NoneUint32OptionOption }  }
/* Complex64Option: complex64->Uint64Option */ func MapUint64OptionToComplex64Option(m Complex64Option, f func(complex64) Uint64Option) Uint64OptionOption {  if m.IsDefined() { return Uint64Uint64(f(*m.value)) } else { return NoneUint64OptionOption }  }
/* Complex64Option: complex64->UintptrOption */ func MapUintptrOptionToComplex64Option(m Complex64Option, f func(complex64) UintptrOption) UintptrOptionOption {  if m.IsDefined() { return UintptrUintptr(f(*m.value)) } else { return NoneUintptrOptionOption }  }
/* Complex64Option: complex64->ByteOption */ func MapByteOptionToComplex64Option(m Complex64Option, f func(complex64) ByteOption) ByteOptionOption {  if m.IsDefined() { return ByteByte(f(*m.value)) } else { return NoneByteOptionOption }  }
/* Complex64Option: complex64->RuneOption */ func MapRuneOptionToComplex64Option(m Complex64Option, f func(complex64) RuneOption) RuneOptionOption {  if m.IsDefined() { return RuneRune(f(*m.value)) } else { return NoneRuneOptionOption }  }
/* Complex64Option: complex64->Float32Option */ func MapFloat32OptionToComplex64Option(m Complex64Option, f func(complex64) Float32Option) Float32OptionOption {  if m.IsDefined() { return Float32Float32(f(*m.value)) } else { return NoneFloat32OptionOption }  }
/* Complex64Option: complex64->Float64Option */ func MapFloat64OptionToComplex64Option(m Complex64Option, f func(complex64) Float64Option) Float64OptionOption {  if m.IsDefined() { return Float64Float64(f(*m.value)) } else { return NoneFloat64OptionOption }  }
/* Complex64Option: complex64->Complex64Option */ func MapComplex64OptionToComplex64Option(m Complex64Option, f func(complex64) Complex64Option) Complex64OptionOption {  if m.IsDefined() { return Complex64Complex64(f(*m.value)) } else { return NoneComplex64OptionOption }  }
/* Complex64Option: complex64->Complex128Option */ func MapComplex128OptionToComplex64Option(m Complex64Option, f func(complex64) Complex128Option) Complex128OptionOption {  if m.IsDefined() { return Complex128Complex128(f(*m.value)) } else { return NoneComplex128OptionOption }  }
/* Complex64Option: complex64->AnyOption */ func MapAnyOptionToComplex64Option(m Complex64Option, f func(complex64) AnyOption) AnyOptionOption {  if m.IsDefined() { return AnyOptAny(f(*m.value)) } else { return NoneAnyOptionOption }  }
/* Complex64Option: complex64->[]bool */ func MapBoolArrToComplex64Option(m Complex64Option, f func(complex64) []bool) BoolArrOption {  if m.IsDefined() { return BoolArrOpt(f(*m.value)) } else { return NoneBoolArrOption }  }
/* Complex64Option: complex64->[]string */ func MapStringArrToComplex64Option(m Complex64Option, f func(complex64) []string) StringArrOption {  if m.IsDefined() { return StringArrOpt(f(*m.value)) } else { return NoneStringArrOption }  }
/* Complex64Option: complex64->[]int */ func MapIntArrToComplex64Option(m Complex64Option, f func(complex64) []int) IntArrOption {  if m.IsDefined() { return IntArrOpt(f(*m.value)) } else { return NoneIntArrOption }  }
/* Complex64Option: complex64->[]int8 */ func MapInt8ArrToComplex64Option(m Complex64Option, f func(complex64) []int8) Int8ArrOption {  if m.IsDefined() { return Int8ArrOpt(f(*m.value)) } else { return NoneInt8ArrOption }  }
/* Complex64Option: complex64->[]int16 */ func MapInt16ArrToComplex64Option(m Complex64Option, f func(complex64) []int16) Int16ArrOption {  if m.IsDefined() { return Int16ArrOpt(f(*m.value)) } else { return NoneInt16ArrOption }  }
/* Complex64Option: complex64->[]int32 */ func MapInt32ArrToComplex64Option(m Complex64Option, f func(complex64) []int32) Int32ArrOption {  if m.IsDefined() { return Int32ArrOpt(f(*m.value)) } else { return NoneInt32ArrOption }  }
/* Complex64Option: complex64->[]int64 */ func MapInt64ArrToComplex64Option(m Complex64Option, f func(complex64) []int64) Int64ArrOption {  if m.IsDefined() { return Int64ArrOpt(f(*m.value)) } else { return NoneInt64ArrOption }  }
/* Complex64Option: complex64->[]uint */ func MapUintArrToComplex64Option(m Complex64Option, f func(complex64) []uint) UintArrOption {  if m.IsDefined() { return UintArrOpt(f(*m.value)) } else { return NoneUintArrOption }  }
/* Complex64Option: complex64->[]uint8 */ func MapUint8ArrToComplex64Option(m Complex64Option, f func(complex64) []uint8) Uint8ArrOption {  if m.IsDefined() { return Uint8ArrOpt(f(*m.value)) } else { return NoneUint8ArrOption }  }
/* Complex64Option: complex64->[]uint16 */ func MapUint16ArrToComplex64Option(m Complex64Option, f func(complex64) []uint16) Uint16ArrOption {  if m.IsDefined() { return Uint16ArrOpt(f(*m.value)) } else { return NoneUint16ArrOption }  }
/* Complex64Option: complex64->[]uint32 */ func MapUint32ArrToComplex64Option(m Complex64Option, f func(complex64) []uint32) Uint32ArrOption {  if m.IsDefined() { return Uint32ArrOpt(f(*m.value)) } else { return NoneUint32ArrOption }  }
/* Complex64Option: complex64->[]uint64 */ func MapUint64ArrToComplex64Option(m Complex64Option, f func(complex64) []uint64) Uint64ArrOption {  if m.IsDefined() { return Uint64ArrOpt(f(*m.value)) } else { return NoneUint64ArrOption }  }
/* Complex64Option: complex64->[]uintptr */ func MapUintptrArrToComplex64Option(m Complex64Option, f func(complex64) []uintptr) UintptrArrOption {  if m.IsDefined() { return UintptrArrOpt(f(*m.value)) } else { return NoneUintptrArrOption }  }
/* Complex64Option: complex64->[]byte */ func MapByteArrToComplex64Option(m Complex64Option, f func(complex64) []byte) ByteArrOption {  if m.IsDefined() { return ByteArrOpt(f(*m.value)) } else { return NoneByteArrOption }  }
/* Complex64Option: complex64->[]rune */ func MapRuneArrToComplex64Option(m Complex64Option, f func(complex64) []rune) RuneArrOption {  if m.IsDefined() { return RuneArrOpt(f(*m.value)) } else { return NoneRuneArrOption }  }
/* Complex64Option: complex64->[]float32 */ func MapFloat32ArrToComplex64Option(m Complex64Option, f func(complex64) []float32) Float32ArrOption {  if m.IsDefined() { return Float32ArrOpt(f(*m.value)) } else { return NoneFloat32ArrOption }  }
/* Complex64Option: complex64->[]float64 */ func MapFloat64ArrToComplex64Option(m Complex64Option, f func(complex64) []float64) Float64ArrOption {  if m.IsDefined() { return Float64ArrOpt(f(*m.value)) } else { return NoneFloat64ArrOption }  }
/* Complex64Option: complex64->[]complex64 */ func MapComplex64ArrToComplex64Option(m Complex64Option, f func(complex64) []complex64) Complex64ArrOption {  if m.IsDefined() { return Complex64ArrOpt(f(*m.value)) } else { return NoneComplex64ArrOption }  }
/* Complex64Option: complex64->[]complex128 */ func MapComplex128ArrToComplex64Option(m Complex64Option, f func(complex64) []complex128) Complex128ArrOption {  if m.IsDefined() { return Complex128ArrOpt(f(*m.value)) } else { return NoneComplex128ArrOption }  }
/* Complex64Option: complex64->[]Any */ func MapAnyArrToComplex64Option(m Complex64Option, f func(complex64) []Any) AnyArrOption {  if m.IsDefined() { return AnyArrOpt(f(*m.value)) } else { return NoneAnyArrOption }  }
/* Complex64Option: complex64->BoolList */ func MapBoolListToComplex64Option(m Complex64Option, f func(complex64) BoolList) BoolListOption {  if m.IsDefined() { return BoolListOpt(f(*m.value)) } else { return NoneBoolListOption }  }
/* Complex64Option: complex64->StringList */ func MapStringListToComplex64Option(m Complex64Option, f func(complex64) StringList) StringListOption {  if m.IsDefined() { return StringListOpt(f(*m.value)) } else { return NoneStringListOption }  }
/* Complex64Option: complex64->IntList */ func MapIntListToComplex64Option(m Complex64Option, f func(complex64) IntList) IntListOption {  if m.IsDefined() { return IntListOpt(f(*m.value)) } else { return NoneIntListOption }  }
/* Complex64Option: complex64->Int8List */ func MapInt8ListToComplex64Option(m Complex64Option, f func(complex64) Int8List) Int8ListOption {  if m.IsDefined() { return Int8ListOpt(f(*m.value)) } else { return NoneInt8ListOption }  }
/* Complex64Option: complex64->Int16List */ func MapInt16ListToComplex64Option(m Complex64Option, f func(complex64) Int16List) Int16ListOption {  if m.IsDefined() { return Int16ListOpt(f(*m.value)) } else { return NoneInt16ListOption }  }
/* Complex64Option: complex64->Int32List */ func MapInt32ListToComplex64Option(m Complex64Option, f func(complex64) Int32List) Int32ListOption {  if m.IsDefined() { return Int32ListOpt(f(*m.value)) } else { return NoneInt32ListOption }  }
/* Complex64Option: complex64->Int64List */ func MapInt64ListToComplex64Option(m Complex64Option, f func(complex64) Int64List) Int64ListOption {  if m.IsDefined() { return Int64ListOpt(f(*m.value)) } else { return NoneInt64ListOption }  }
/* Complex64Option: complex64->UintList */ func MapUintListToComplex64Option(m Complex64Option, f func(complex64) UintList) UintListOption {  if m.IsDefined() { return UintListOpt(f(*m.value)) } else { return NoneUintListOption }  }
/* Complex64Option: complex64->Uint8List */ func MapUint8ListToComplex64Option(m Complex64Option, f func(complex64) Uint8List) Uint8ListOption {  if m.IsDefined() { return Uint8ListOpt(f(*m.value)) } else { return NoneUint8ListOption }  }
/* Complex64Option: complex64->Uint16List */ func MapUint16ListToComplex64Option(m Complex64Option, f func(complex64) Uint16List) Uint16ListOption {  if m.IsDefined() { return Uint16ListOpt(f(*m.value)) } else { return NoneUint16ListOption }  }
/* Complex64Option: complex64->Uint32List */ func MapUint32ListToComplex64Option(m Complex64Option, f func(complex64) Uint32List) Uint32ListOption {  if m.IsDefined() { return Uint32ListOpt(f(*m.value)) } else { return NoneUint32ListOption }  }
/* Complex64Option: complex64->Uint64List */ func MapUint64ListToComplex64Option(m Complex64Option, f func(complex64) Uint64List) Uint64ListOption {  if m.IsDefined() { return Uint64ListOpt(f(*m.value)) } else { return NoneUint64ListOption }  }
/* Complex64Option: complex64->UintptrList */ func MapUintptrListToComplex64Option(m Complex64Option, f func(complex64) UintptrList) UintptrListOption {  if m.IsDefined() { return UintptrListOpt(f(*m.value)) } else { return NoneUintptrListOption }  }
/* Complex64Option: complex64->ByteList */ func MapByteListToComplex64Option(m Complex64Option, f func(complex64) ByteList) ByteListOption {  if m.IsDefined() { return ByteListOpt(f(*m.value)) } else { return NoneByteListOption }  }
/* Complex64Option: complex64->RuneList */ func MapRuneListToComplex64Option(m Complex64Option, f func(complex64) RuneList) RuneListOption {  if m.IsDefined() { return RuneListOpt(f(*m.value)) } else { return NoneRuneListOption }  }
/* Complex64Option: complex64->Float32List */ func MapFloat32ListToComplex64Option(m Complex64Option, f func(complex64) Float32List) Float32ListOption {  if m.IsDefined() { return Float32ListOpt(f(*m.value)) } else { return NoneFloat32ListOption }  }
/* Complex64Option: complex64->Float64List */ func MapFloat64ListToComplex64Option(m Complex64Option, f func(complex64) Float64List) Float64ListOption {  if m.IsDefined() { return Float64ListOpt(f(*m.value)) } else { return NoneFloat64ListOption }  }
/* Complex64Option: complex64->Complex64List */ func MapComplex64ListToComplex64Option(m Complex64Option, f func(complex64) Complex64List) Complex64ListOption {  if m.IsDefined() { return Complex64ListOpt(f(*m.value)) } else { return NoneComplex64ListOption }  }
/* Complex64Option: complex64->Complex128List */ func MapComplex128ListToComplex64Option(m Complex64Option, f func(complex64) Complex128List) Complex128ListOption {  if m.IsDefined() { return Complex128ListOpt(f(*m.value)) } else { return NoneComplex128ListOption }  }
/* Complex64Option: complex64->AnyList */ func MapAnyListToComplex64Option(m Complex64Option, f func(complex64) AnyList) AnyListOption {  if m.IsDefined() { return AnyListOpt(f(*m.value)) } else { return NoneAnyListOption }  }
/* Complex128Option: complex128->bool */ func MapBoolToComplex128Option(m Complex128Option, f func(complex128) bool) BoolOption {  if m.IsDefined() { return Bool(f(*m.value)) } else { return NoneBoolOption }  }
/* Complex128Option: complex128->string */ func MapStringToComplex128Option(m Complex128Option, f func(complex128) string) StringOption {  if m.IsDefined() { return String(f(*m.value)) } else { return NoneStringOption }  }
/* Complex128Option: complex128->int */ func MapIntToComplex128Option(m Complex128Option, f func(complex128) int) IntOption {  if m.IsDefined() { return Int(f(*m.value)) } else { return NoneIntOption }  }
/* Complex128Option: complex128->int8 */ func MapInt8ToComplex128Option(m Complex128Option, f func(complex128) int8) Int8Option {  if m.IsDefined() { return Int8(f(*m.value)) } else { return NoneInt8Option }  }
/* Complex128Option: complex128->int16 */ func MapInt16ToComplex128Option(m Complex128Option, f func(complex128) int16) Int16Option {  if m.IsDefined() { return Int16(f(*m.value)) } else { return NoneInt16Option }  }
/* Complex128Option: complex128->int32 */ func MapInt32ToComplex128Option(m Complex128Option, f func(complex128) int32) Int32Option {  if m.IsDefined() { return Int32(f(*m.value)) } else { return NoneInt32Option }  }
/* Complex128Option: complex128->int64 */ func MapInt64ToComplex128Option(m Complex128Option, f func(complex128) int64) Int64Option {  if m.IsDefined() { return Int64(f(*m.value)) } else { return NoneInt64Option }  }
/* Complex128Option: complex128->uint */ func MapUintToComplex128Option(m Complex128Option, f func(complex128) uint) UintOption {  if m.IsDefined() { return Uint(f(*m.value)) } else { return NoneUintOption }  }
/* Complex128Option: complex128->uint8 */ func MapUint8ToComplex128Option(m Complex128Option, f func(complex128) uint8) Uint8Option {  if m.IsDefined() { return Uint8(f(*m.value)) } else { return NoneUint8Option }  }
/* Complex128Option: complex128->uint16 */ func MapUint16ToComplex128Option(m Complex128Option, f func(complex128) uint16) Uint16Option {  if m.IsDefined() { return Uint16(f(*m.value)) } else { return NoneUint16Option }  }
/* Complex128Option: complex128->uint32 */ func MapUint32ToComplex128Option(m Complex128Option, f func(complex128) uint32) Uint32Option {  if m.IsDefined() { return Uint32(f(*m.value)) } else { return NoneUint32Option }  }
/* Complex128Option: complex128->uint64 */ func MapUint64ToComplex128Option(m Complex128Option, f func(complex128) uint64) Uint64Option {  if m.IsDefined() { return Uint64(f(*m.value)) } else { return NoneUint64Option }  }
/* Complex128Option: complex128->uintptr */ func MapUintptrToComplex128Option(m Complex128Option, f func(complex128) uintptr) UintptrOption {  if m.IsDefined() { return Uintptr(f(*m.value)) } else { return NoneUintptrOption }  }
/* Complex128Option: complex128->byte */ func MapByteToComplex128Option(m Complex128Option, f func(complex128) byte) ByteOption {  if m.IsDefined() { return Byte(f(*m.value)) } else { return NoneByteOption }  }
/* Complex128Option: complex128->rune */ func MapRuneToComplex128Option(m Complex128Option, f func(complex128) rune) RuneOption {  if m.IsDefined() { return Rune(f(*m.value)) } else { return NoneRuneOption }  }
/* Complex128Option: complex128->float32 */ func MapFloat32ToComplex128Option(m Complex128Option, f func(complex128) float32) Float32Option {  if m.IsDefined() { return Float32(f(*m.value)) } else { return NoneFloat32Option }  }
/* Complex128Option: complex128->float64 */ func MapFloat64ToComplex128Option(m Complex128Option, f func(complex128) float64) Float64Option {  if m.IsDefined() { return Float64(f(*m.value)) } else { return NoneFloat64Option }  }
/* Complex128Option: complex128->complex64 */ func MapComplex64ToComplex128Option(m Complex128Option, f func(complex128) complex64) Complex64Option {  if m.IsDefined() { return Complex64(f(*m.value)) } else { return NoneComplex64Option }  }
/* Complex128Option: complex128->complex128 */ func MapComplex128ToComplex128Option(m Complex128Option, f func(complex128) complex128) Complex128Option {  if m.IsDefined() { return Complex128(f(*m.value)) } else { return NoneComplex128Option }  }
/* Complex128Option: complex128->Any */ func MapAnyToComplex128Option(m Complex128Option, f func(complex128) Any) AnyOption {  if m.IsDefined() { return AnyOpt(f(*m.value)) } else { return NoneAnyOption }  }
/* Complex128Option: complex128->BoolOption */ func MapBoolOptionToComplex128Option(m Complex128Option, f func(complex128) BoolOption) BoolOptionOption {  if m.IsDefined() { return BoolBool(f(*m.value)) } else { return NoneBoolOptionOption }  }
/* Complex128Option: complex128->StringOption */ func MapStringOptionToComplex128Option(m Complex128Option, f func(complex128) StringOption) StringOptionOption {  if m.IsDefined() { return StringString(f(*m.value)) } else { return NoneStringOptionOption }  }
/* Complex128Option: complex128->IntOption */ func MapIntOptionToComplex128Option(m Complex128Option, f func(complex128) IntOption) IntOptionOption {  if m.IsDefined() { return IntInt(f(*m.value)) } else { return NoneIntOptionOption }  }
/* Complex128Option: complex128->Int8Option */ func MapInt8OptionToComplex128Option(m Complex128Option, f func(complex128) Int8Option) Int8OptionOption {  if m.IsDefined() { return Int8Int8(f(*m.value)) } else { return NoneInt8OptionOption }  }
/* Complex128Option: complex128->Int16Option */ func MapInt16OptionToComplex128Option(m Complex128Option, f func(complex128) Int16Option) Int16OptionOption {  if m.IsDefined() { return Int16Int16(f(*m.value)) } else { return NoneInt16OptionOption }  }
/* Complex128Option: complex128->Int32Option */ func MapInt32OptionToComplex128Option(m Complex128Option, f func(complex128) Int32Option) Int32OptionOption {  if m.IsDefined() { return Int32Int32(f(*m.value)) } else { return NoneInt32OptionOption }  }
/* Complex128Option: complex128->Int64Option */ func MapInt64OptionToComplex128Option(m Complex128Option, f func(complex128) Int64Option) Int64OptionOption {  if m.IsDefined() { return Int64Int64(f(*m.value)) } else { return NoneInt64OptionOption }  }
/* Complex128Option: complex128->UintOption */ func MapUintOptionToComplex128Option(m Complex128Option, f func(complex128) UintOption) UintOptionOption {  if m.IsDefined() { return UintUint(f(*m.value)) } else { return NoneUintOptionOption }  }
/* Complex128Option: complex128->Uint8Option */ func MapUint8OptionToComplex128Option(m Complex128Option, f func(complex128) Uint8Option) Uint8OptionOption {  if m.IsDefined() { return Uint8Uint8(f(*m.value)) } else { return NoneUint8OptionOption }  }
/* Complex128Option: complex128->Uint16Option */ func MapUint16OptionToComplex128Option(m Complex128Option, f func(complex128) Uint16Option) Uint16OptionOption {  if m.IsDefined() { return Uint16Uint16(f(*m.value)) } else { return NoneUint16OptionOption }  }
/* Complex128Option: complex128->Uint32Option */ func MapUint32OptionToComplex128Option(m Complex128Option, f func(complex128) Uint32Option) Uint32OptionOption {  if m.IsDefined() { return Uint32Uint32(f(*m.value)) } else { return NoneUint32OptionOption }  }
/* Complex128Option: complex128->Uint64Option */ func MapUint64OptionToComplex128Option(m Complex128Option, f func(complex128) Uint64Option) Uint64OptionOption {  if m.IsDefined() { return Uint64Uint64(f(*m.value)) } else { return NoneUint64OptionOption }  }
/* Complex128Option: complex128->UintptrOption */ func MapUintptrOptionToComplex128Option(m Complex128Option, f func(complex128) UintptrOption) UintptrOptionOption {  if m.IsDefined() { return UintptrUintptr(f(*m.value)) } else { return NoneUintptrOptionOption }  }
/* Complex128Option: complex128->ByteOption */ func MapByteOptionToComplex128Option(m Complex128Option, f func(complex128) ByteOption) ByteOptionOption {  if m.IsDefined() { return ByteByte(f(*m.value)) } else { return NoneByteOptionOption }  }
/* Complex128Option: complex128->RuneOption */ func MapRuneOptionToComplex128Option(m Complex128Option, f func(complex128) RuneOption) RuneOptionOption {  if m.IsDefined() { return RuneRune(f(*m.value)) } else { return NoneRuneOptionOption }  }
/* Complex128Option: complex128->Float32Option */ func MapFloat32OptionToComplex128Option(m Complex128Option, f func(complex128) Float32Option) Float32OptionOption {  if m.IsDefined() { return Float32Float32(f(*m.value)) } else { return NoneFloat32OptionOption }  }
/* Complex128Option: complex128->Float64Option */ func MapFloat64OptionToComplex128Option(m Complex128Option, f func(complex128) Float64Option) Float64OptionOption {  if m.IsDefined() { return Float64Float64(f(*m.value)) } else { return NoneFloat64OptionOption }  }
/* Complex128Option: complex128->Complex64Option */ func MapComplex64OptionToComplex128Option(m Complex128Option, f func(complex128) Complex64Option) Complex64OptionOption {  if m.IsDefined() { return Complex64Complex64(f(*m.value)) } else { return NoneComplex64OptionOption }  }
/* Complex128Option: complex128->Complex128Option */ func MapComplex128OptionToComplex128Option(m Complex128Option, f func(complex128) Complex128Option) Complex128OptionOption {  if m.IsDefined() { return Complex128Complex128(f(*m.value)) } else { return NoneComplex128OptionOption }  }
/* Complex128Option: complex128->AnyOption */ func MapAnyOptionToComplex128Option(m Complex128Option, f func(complex128) AnyOption) AnyOptionOption {  if m.IsDefined() { return AnyOptAny(f(*m.value)) } else { return NoneAnyOptionOption }  }
/* Complex128Option: complex128->[]bool */ func MapBoolArrToComplex128Option(m Complex128Option, f func(complex128) []bool) BoolArrOption {  if m.IsDefined() { return BoolArrOpt(f(*m.value)) } else { return NoneBoolArrOption }  }
/* Complex128Option: complex128->[]string */ func MapStringArrToComplex128Option(m Complex128Option, f func(complex128) []string) StringArrOption {  if m.IsDefined() { return StringArrOpt(f(*m.value)) } else { return NoneStringArrOption }  }
/* Complex128Option: complex128->[]int */ func MapIntArrToComplex128Option(m Complex128Option, f func(complex128) []int) IntArrOption {  if m.IsDefined() { return IntArrOpt(f(*m.value)) } else { return NoneIntArrOption }  }
/* Complex128Option: complex128->[]int8 */ func MapInt8ArrToComplex128Option(m Complex128Option, f func(complex128) []int8) Int8ArrOption {  if m.IsDefined() { return Int8ArrOpt(f(*m.value)) } else { return NoneInt8ArrOption }  }
/* Complex128Option: complex128->[]int16 */ func MapInt16ArrToComplex128Option(m Complex128Option, f func(complex128) []int16) Int16ArrOption {  if m.IsDefined() { return Int16ArrOpt(f(*m.value)) } else { return NoneInt16ArrOption }  }
/* Complex128Option: complex128->[]int32 */ func MapInt32ArrToComplex128Option(m Complex128Option, f func(complex128) []int32) Int32ArrOption {  if m.IsDefined() { return Int32ArrOpt(f(*m.value)) } else { return NoneInt32ArrOption }  }
/* Complex128Option: complex128->[]int64 */ func MapInt64ArrToComplex128Option(m Complex128Option, f func(complex128) []int64) Int64ArrOption {  if m.IsDefined() { return Int64ArrOpt(f(*m.value)) } else { return NoneInt64ArrOption }  }
/* Complex128Option: complex128->[]uint */ func MapUintArrToComplex128Option(m Complex128Option, f func(complex128) []uint) UintArrOption {  if m.IsDefined() { return UintArrOpt(f(*m.value)) } else { return NoneUintArrOption }  }
/* Complex128Option: complex128->[]uint8 */ func MapUint8ArrToComplex128Option(m Complex128Option, f func(complex128) []uint8) Uint8ArrOption {  if m.IsDefined() { return Uint8ArrOpt(f(*m.value)) } else { return NoneUint8ArrOption }  }
/* Complex128Option: complex128->[]uint16 */ func MapUint16ArrToComplex128Option(m Complex128Option, f func(complex128) []uint16) Uint16ArrOption {  if m.IsDefined() { return Uint16ArrOpt(f(*m.value)) } else { return NoneUint16ArrOption }  }
/* Complex128Option: complex128->[]uint32 */ func MapUint32ArrToComplex128Option(m Complex128Option, f func(complex128) []uint32) Uint32ArrOption {  if m.IsDefined() { return Uint32ArrOpt(f(*m.value)) } else { return NoneUint32ArrOption }  }
/* Complex128Option: complex128->[]uint64 */ func MapUint64ArrToComplex128Option(m Complex128Option, f func(complex128) []uint64) Uint64ArrOption {  if m.IsDefined() { return Uint64ArrOpt(f(*m.value)) } else { return NoneUint64ArrOption }  }
/* Complex128Option: complex128->[]uintptr */ func MapUintptrArrToComplex128Option(m Complex128Option, f func(complex128) []uintptr) UintptrArrOption {  if m.IsDefined() { return UintptrArrOpt(f(*m.value)) } else { return NoneUintptrArrOption }  }
/* Complex128Option: complex128->[]byte */ func MapByteArrToComplex128Option(m Complex128Option, f func(complex128) []byte) ByteArrOption {  if m.IsDefined() { return ByteArrOpt(f(*m.value)) } else { return NoneByteArrOption }  }
/* Complex128Option: complex128->[]rune */ func MapRuneArrToComplex128Option(m Complex128Option, f func(complex128) []rune) RuneArrOption {  if m.IsDefined() { return RuneArrOpt(f(*m.value)) } else { return NoneRuneArrOption }  }
/* Complex128Option: complex128->[]float32 */ func MapFloat32ArrToComplex128Option(m Complex128Option, f func(complex128) []float32) Float32ArrOption {  if m.IsDefined() { return Float32ArrOpt(f(*m.value)) } else { return NoneFloat32ArrOption }  }
/* Complex128Option: complex128->[]float64 */ func MapFloat64ArrToComplex128Option(m Complex128Option, f func(complex128) []float64) Float64ArrOption {  if m.IsDefined() { return Float64ArrOpt(f(*m.value)) } else { return NoneFloat64ArrOption }  }
/* Complex128Option: complex128->[]complex64 */ func MapComplex64ArrToComplex128Option(m Complex128Option, f func(complex128) []complex64) Complex64ArrOption {  if m.IsDefined() { return Complex64ArrOpt(f(*m.value)) } else { return NoneComplex64ArrOption }  }
/* Complex128Option: complex128->[]complex128 */ func MapComplex128ArrToComplex128Option(m Complex128Option, f func(complex128) []complex128) Complex128ArrOption {  if m.IsDefined() { return Complex128ArrOpt(f(*m.value)) } else { return NoneComplex128ArrOption }  }
/* Complex128Option: complex128->[]Any */ func MapAnyArrToComplex128Option(m Complex128Option, f func(complex128) []Any) AnyArrOption {  if m.IsDefined() { return AnyArrOpt(f(*m.value)) } else { return NoneAnyArrOption }  }
/* Complex128Option: complex128->BoolList */ func MapBoolListToComplex128Option(m Complex128Option, f func(complex128) BoolList) BoolListOption {  if m.IsDefined() { return BoolListOpt(f(*m.value)) } else { return NoneBoolListOption }  }
/* Complex128Option: complex128->StringList */ func MapStringListToComplex128Option(m Complex128Option, f func(complex128) StringList) StringListOption {  if m.IsDefined() { return StringListOpt(f(*m.value)) } else { return NoneStringListOption }  }
/* Complex128Option: complex128->IntList */ func MapIntListToComplex128Option(m Complex128Option, f func(complex128) IntList) IntListOption {  if m.IsDefined() { return IntListOpt(f(*m.value)) } else { return NoneIntListOption }  }
/* Complex128Option: complex128->Int8List */ func MapInt8ListToComplex128Option(m Complex128Option, f func(complex128) Int8List) Int8ListOption {  if m.IsDefined() { return Int8ListOpt(f(*m.value)) } else { return NoneInt8ListOption }  }
/* Complex128Option: complex128->Int16List */ func MapInt16ListToComplex128Option(m Complex128Option, f func(complex128) Int16List) Int16ListOption {  if m.IsDefined() { return Int16ListOpt(f(*m.value)) } else { return NoneInt16ListOption }  }
/* Complex128Option: complex128->Int32List */ func MapInt32ListToComplex128Option(m Complex128Option, f func(complex128) Int32List) Int32ListOption {  if m.IsDefined() { return Int32ListOpt(f(*m.value)) } else { return NoneInt32ListOption }  }
/* Complex128Option: complex128->Int64List */ func MapInt64ListToComplex128Option(m Complex128Option, f func(complex128) Int64List) Int64ListOption {  if m.IsDefined() { return Int64ListOpt(f(*m.value)) } else { return NoneInt64ListOption }  }
/* Complex128Option: complex128->UintList */ func MapUintListToComplex128Option(m Complex128Option, f func(complex128) UintList) UintListOption {  if m.IsDefined() { return UintListOpt(f(*m.value)) } else { return NoneUintListOption }  }
/* Complex128Option: complex128->Uint8List */ func MapUint8ListToComplex128Option(m Complex128Option, f func(complex128) Uint8List) Uint8ListOption {  if m.IsDefined() { return Uint8ListOpt(f(*m.value)) } else { return NoneUint8ListOption }  }
/* Complex128Option: complex128->Uint16List */ func MapUint16ListToComplex128Option(m Complex128Option, f func(complex128) Uint16List) Uint16ListOption {  if m.IsDefined() { return Uint16ListOpt(f(*m.value)) } else { return NoneUint16ListOption }  }
/* Complex128Option: complex128->Uint32List */ func MapUint32ListToComplex128Option(m Complex128Option, f func(complex128) Uint32List) Uint32ListOption {  if m.IsDefined() { return Uint32ListOpt(f(*m.value)) } else { return NoneUint32ListOption }  }
/* Complex128Option: complex128->Uint64List */ func MapUint64ListToComplex128Option(m Complex128Option, f func(complex128) Uint64List) Uint64ListOption {  if m.IsDefined() { return Uint64ListOpt(f(*m.value)) } else { return NoneUint64ListOption }  }
/* Complex128Option: complex128->UintptrList */ func MapUintptrListToComplex128Option(m Complex128Option, f func(complex128) UintptrList) UintptrListOption {  if m.IsDefined() { return UintptrListOpt(f(*m.value)) } else { return NoneUintptrListOption }  }
/* Complex128Option: complex128->ByteList */ func MapByteListToComplex128Option(m Complex128Option, f func(complex128) ByteList) ByteListOption {  if m.IsDefined() { return ByteListOpt(f(*m.value)) } else { return NoneByteListOption }  }
/* Complex128Option: complex128->RuneList */ func MapRuneListToComplex128Option(m Complex128Option, f func(complex128) RuneList) RuneListOption {  if m.IsDefined() { return RuneListOpt(f(*m.value)) } else { return NoneRuneListOption }  }
/* Complex128Option: complex128->Float32List */ func MapFloat32ListToComplex128Option(m Complex128Option, f func(complex128) Float32List) Float32ListOption {  if m.IsDefined() { return Float32ListOpt(f(*m.value)) } else { return NoneFloat32ListOption }  }
/* Complex128Option: complex128->Float64List */ func MapFloat64ListToComplex128Option(m Complex128Option, f func(complex128) Float64List) Float64ListOption {  if m.IsDefined() { return Float64ListOpt(f(*m.value)) } else { return NoneFloat64ListOption }  }
/* Complex128Option: complex128->Complex64List */ func MapComplex64ListToComplex128Option(m Complex128Option, f func(complex128) Complex64List) Complex64ListOption {  if m.IsDefined() { return Complex64ListOpt(f(*m.value)) } else { return NoneComplex64ListOption }  }
/* Complex128Option: complex128->Complex128List */ func MapComplex128ListToComplex128Option(m Complex128Option, f func(complex128) Complex128List) Complex128ListOption {  if m.IsDefined() { return Complex128ListOpt(f(*m.value)) } else { return NoneComplex128ListOption }  }
/* Complex128Option: complex128->AnyList */ func MapAnyListToComplex128Option(m Complex128Option, f func(complex128) AnyList) AnyListOption {  if m.IsDefined() { return AnyListOpt(f(*m.value)) } else { return NoneAnyListOption }  }
/* AnyOption: Any->bool */ func MapBoolToAnyOption(m AnyOption, f func(Any) bool) BoolOption {  if m.IsDefined() { return Bool(f(*m.value)) } else { return NoneBoolOption }  }
/* AnyOption: Any->string */ func MapStringToAnyOption(m AnyOption, f func(Any) string) StringOption {  if m.IsDefined() { return String(f(*m.value)) } else { return NoneStringOption }  }
/* AnyOption: Any->int */ func MapIntToAnyOption(m AnyOption, f func(Any) int) IntOption {  if m.IsDefined() { return Int(f(*m.value)) } else { return NoneIntOption }  }
/* AnyOption: Any->int8 */ func MapInt8ToAnyOption(m AnyOption, f func(Any) int8) Int8Option {  if m.IsDefined() { return Int8(f(*m.value)) } else { return NoneInt8Option }  }
/* AnyOption: Any->int16 */ func MapInt16ToAnyOption(m AnyOption, f func(Any) int16) Int16Option {  if m.IsDefined() { return Int16(f(*m.value)) } else { return NoneInt16Option }  }
/* AnyOption: Any->int32 */ func MapInt32ToAnyOption(m AnyOption, f func(Any) int32) Int32Option {  if m.IsDefined() { return Int32(f(*m.value)) } else { return NoneInt32Option }  }
/* AnyOption: Any->int64 */ func MapInt64ToAnyOption(m AnyOption, f func(Any) int64) Int64Option {  if m.IsDefined() { return Int64(f(*m.value)) } else { return NoneInt64Option }  }
/* AnyOption: Any->uint */ func MapUintToAnyOption(m AnyOption, f func(Any) uint) UintOption {  if m.IsDefined() { return Uint(f(*m.value)) } else { return NoneUintOption }  }
/* AnyOption: Any->uint8 */ func MapUint8ToAnyOption(m AnyOption, f func(Any) uint8) Uint8Option {  if m.IsDefined() { return Uint8(f(*m.value)) } else { return NoneUint8Option }  }
/* AnyOption: Any->uint16 */ func MapUint16ToAnyOption(m AnyOption, f func(Any) uint16) Uint16Option {  if m.IsDefined() { return Uint16(f(*m.value)) } else { return NoneUint16Option }  }
/* AnyOption: Any->uint32 */ func MapUint32ToAnyOption(m AnyOption, f func(Any) uint32) Uint32Option {  if m.IsDefined() { return Uint32(f(*m.value)) } else { return NoneUint32Option }  }
/* AnyOption: Any->uint64 */ func MapUint64ToAnyOption(m AnyOption, f func(Any) uint64) Uint64Option {  if m.IsDefined() { return Uint64(f(*m.value)) } else { return NoneUint64Option }  }
/* AnyOption: Any->uintptr */ func MapUintptrToAnyOption(m AnyOption, f func(Any) uintptr) UintptrOption {  if m.IsDefined() { return Uintptr(f(*m.value)) } else { return NoneUintptrOption }  }
/* AnyOption: Any->byte */ func MapByteToAnyOption(m AnyOption, f func(Any) byte) ByteOption {  if m.IsDefined() { return Byte(f(*m.value)) } else { return NoneByteOption }  }
/* AnyOption: Any->rune */ func MapRuneToAnyOption(m AnyOption, f func(Any) rune) RuneOption {  if m.IsDefined() { return Rune(f(*m.value)) } else { return NoneRuneOption }  }
/* AnyOption: Any->float32 */ func MapFloat32ToAnyOption(m AnyOption, f func(Any) float32) Float32Option {  if m.IsDefined() { return Float32(f(*m.value)) } else { return NoneFloat32Option }  }
/* AnyOption: Any->float64 */ func MapFloat64ToAnyOption(m AnyOption, f func(Any) float64) Float64Option {  if m.IsDefined() { return Float64(f(*m.value)) } else { return NoneFloat64Option }  }
/* AnyOption: Any->complex64 */ func MapComplex64ToAnyOption(m AnyOption, f func(Any) complex64) Complex64Option {  if m.IsDefined() { return Complex64(f(*m.value)) } else { return NoneComplex64Option }  }
/* AnyOption: Any->complex128 */ func MapComplex128ToAnyOption(m AnyOption, f func(Any) complex128) Complex128Option {  if m.IsDefined() { return Complex128(f(*m.value)) } else { return NoneComplex128Option }  }
/* AnyOption: Any->Any */ func MapAnyToAnyOption(m AnyOption, f func(Any) Any) AnyOption {  if m.IsDefined() { return AnyOpt(f(*m.value)) } else { return NoneAnyOption }  }
/* AnyOption: Any->BoolOption */ func MapBoolOptionToAnyOption(m AnyOption, f func(Any) BoolOption) BoolOptionOption {  if m.IsDefined() { return BoolBool(f(*m.value)) } else { return NoneBoolOptionOption }  }
/* AnyOption: Any->StringOption */ func MapStringOptionToAnyOption(m AnyOption, f func(Any) StringOption) StringOptionOption {  if m.IsDefined() { return StringString(f(*m.value)) } else { return NoneStringOptionOption }  }
/* AnyOption: Any->IntOption */ func MapIntOptionToAnyOption(m AnyOption, f func(Any) IntOption) IntOptionOption {  if m.IsDefined() { return IntInt(f(*m.value)) } else { return NoneIntOptionOption }  }
/* AnyOption: Any->Int8Option */ func MapInt8OptionToAnyOption(m AnyOption, f func(Any) Int8Option) Int8OptionOption {  if m.IsDefined() { return Int8Int8(f(*m.value)) } else { return NoneInt8OptionOption }  }
/* AnyOption: Any->Int16Option */ func MapInt16OptionToAnyOption(m AnyOption, f func(Any) Int16Option) Int16OptionOption {  if m.IsDefined() { return Int16Int16(f(*m.value)) } else { return NoneInt16OptionOption }  }
/* AnyOption: Any->Int32Option */ func MapInt32OptionToAnyOption(m AnyOption, f func(Any) Int32Option) Int32OptionOption {  if m.IsDefined() { return Int32Int32(f(*m.value)) } else { return NoneInt32OptionOption }  }
/* AnyOption: Any->Int64Option */ func MapInt64OptionToAnyOption(m AnyOption, f func(Any) Int64Option) Int64OptionOption {  if m.IsDefined() { return Int64Int64(f(*m.value)) } else { return NoneInt64OptionOption }  }
/* AnyOption: Any->UintOption */ func MapUintOptionToAnyOption(m AnyOption, f func(Any) UintOption) UintOptionOption {  if m.IsDefined() { return UintUint(f(*m.value)) } else { return NoneUintOptionOption }  }
/* AnyOption: Any->Uint8Option */ func MapUint8OptionToAnyOption(m AnyOption, f func(Any) Uint8Option) Uint8OptionOption {  if m.IsDefined() { return Uint8Uint8(f(*m.value)) } else { return NoneUint8OptionOption }  }
/* AnyOption: Any->Uint16Option */ func MapUint16OptionToAnyOption(m AnyOption, f func(Any) Uint16Option) Uint16OptionOption {  if m.IsDefined() { return Uint16Uint16(f(*m.value)) } else { return NoneUint16OptionOption }  }
/* AnyOption: Any->Uint32Option */ func MapUint32OptionToAnyOption(m AnyOption, f func(Any) Uint32Option) Uint32OptionOption {  if m.IsDefined() { return Uint32Uint32(f(*m.value)) } else { return NoneUint32OptionOption }  }
/* AnyOption: Any->Uint64Option */ func MapUint64OptionToAnyOption(m AnyOption, f func(Any) Uint64Option) Uint64OptionOption {  if m.IsDefined() { return Uint64Uint64(f(*m.value)) } else { return NoneUint64OptionOption }  }
/* AnyOption: Any->UintptrOption */ func MapUintptrOptionToAnyOption(m AnyOption, f func(Any) UintptrOption) UintptrOptionOption {  if m.IsDefined() { return UintptrUintptr(f(*m.value)) } else { return NoneUintptrOptionOption }  }
/* AnyOption: Any->ByteOption */ func MapByteOptionToAnyOption(m AnyOption, f func(Any) ByteOption) ByteOptionOption {  if m.IsDefined() { return ByteByte(f(*m.value)) } else { return NoneByteOptionOption }  }
/* AnyOption: Any->RuneOption */ func MapRuneOptionToAnyOption(m AnyOption, f func(Any) RuneOption) RuneOptionOption {  if m.IsDefined() { return RuneRune(f(*m.value)) } else { return NoneRuneOptionOption }  }
/* AnyOption: Any->Float32Option */ func MapFloat32OptionToAnyOption(m AnyOption, f func(Any) Float32Option) Float32OptionOption {  if m.IsDefined() { return Float32Float32(f(*m.value)) } else { return NoneFloat32OptionOption }  }
/* AnyOption: Any->Float64Option */ func MapFloat64OptionToAnyOption(m AnyOption, f func(Any) Float64Option) Float64OptionOption {  if m.IsDefined() { return Float64Float64(f(*m.value)) } else { return NoneFloat64OptionOption }  }
/* AnyOption: Any->Complex64Option */ func MapComplex64OptionToAnyOption(m AnyOption, f func(Any) Complex64Option) Complex64OptionOption {  if m.IsDefined() { return Complex64Complex64(f(*m.value)) } else { return NoneComplex64OptionOption }  }
/* AnyOption: Any->Complex128Option */ func MapComplex128OptionToAnyOption(m AnyOption, f func(Any) Complex128Option) Complex128OptionOption {  if m.IsDefined() { return Complex128Complex128(f(*m.value)) } else { return NoneComplex128OptionOption }  }
/* AnyOption: Any->AnyOption */ func MapAnyOptionToAnyOption(m AnyOption, f func(Any) AnyOption) AnyOptionOption {  if m.IsDefined() { return AnyOptAny(f(*m.value)) } else { return NoneAnyOptionOption }  }
/* AnyOption: Any->[]bool */ func MapBoolArrToAnyOption(m AnyOption, f func(Any) []bool) BoolArrOption {  if m.IsDefined() { return BoolArrOpt(f(*m.value)) } else { return NoneBoolArrOption }  }
/* AnyOption: Any->[]string */ func MapStringArrToAnyOption(m AnyOption, f func(Any) []string) StringArrOption {  if m.IsDefined() { return StringArrOpt(f(*m.value)) } else { return NoneStringArrOption }  }
/* AnyOption: Any->[]int */ func MapIntArrToAnyOption(m AnyOption, f func(Any) []int) IntArrOption {  if m.IsDefined() { return IntArrOpt(f(*m.value)) } else { return NoneIntArrOption }  }
/* AnyOption: Any->[]int8 */ func MapInt8ArrToAnyOption(m AnyOption, f func(Any) []int8) Int8ArrOption {  if m.IsDefined() { return Int8ArrOpt(f(*m.value)) } else { return NoneInt8ArrOption }  }
/* AnyOption: Any->[]int16 */ func MapInt16ArrToAnyOption(m AnyOption, f func(Any) []int16) Int16ArrOption {  if m.IsDefined() { return Int16ArrOpt(f(*m.value)) } else { return NoneInt16ArrOption }  }
/* AnyOption: Any->[]int32 */ func MapInt32ArrToAnyOption(m AnyOption, f func(Any) []int32) Int32ArrOption {  if m.IsDefined() { return Int32ArrOpt(f(*m.value)) } else { return NoneInt32ArrOption }  }
/* AnyOption: Any->[]int64 */ func MapInt64ArrToAnyOption(m AnyOption, f func(Any) []int64) Int64ArrOption {  if m.IsDefined() { return Int64ArrOpt(f(*m.value)) } else { return NoneInt64ArrOption }  }
/* AnyOption: Any->[]uint */ func MapUintArrToAnyOption(m AnyOption, f func(Any) []uint) UintArrOption {  if m.IsDefined() { return UintArrOpt(f(*m.value)) } else { return NoneUintArrOption }  }
/* AnyOption: Any->[]uint8 */ func MapUint8ArrToAnyOption(m AnyOption, f func(Any) []uint8) Uint8ArrOption {  if m.IsDefined() { return Uint8ArrOpt(f(*m.value)) } else { return NoneUint8ArrOption }  }
/* AnyOption: Any->[]uint16 */ func MapUint16ArrToAnyOption(m AnyOption, f func(Any) []uint16) Uint16ArrOption {  if m.IsDefined() { return Uint16ArrOpt(f(*m.value)) } else { return NoneUint16ArrOption }  }
/* AnyOption: Any->[]uint32 */ func MapUint32ArrToAnyOption(m AnyOption, f func(Any) []uint32) Uint32ArrOption {  if m.IsDefined() { return Uint32ArrOpt(f(*m.value)) } else { return NoneUint32ArrOption }  }
/* AnyOption: Any->[]uint64 */ func MapUint64ArrToAnyOption(m AnyOption, f func(Any) []uint64) Uint64ArrOption {  if m.IsDefined() { return Uint64ArrOpt(f(*m.value)) } else { return NoneUint64ArrOption }  }
/* AnyOption: Any->[]uintptr */ func MapUintptrArrToAnyOption(m AnyOption, f func(Any) []uintptr) UintptrArrOption {  if m.IsDefined() { return UintptrArrOpt(f(*m.value)) } else { return NoneUintptrArrOption }  }
/* AnyOption: Any->[]byte */ func MapByteArrToAnyOption(m AnyOption, f func(Any) []byte) ByteArrOption {  if m.IsDefined() { return ByteArrOpt(f(*m.value)) } else { return NoneByteArrOption }  }
/* AnyOption: Any->[]rune */ func MapRuneArrToAnyOption(m AnyOption, f func(Any) []rune) RuneArrOption {  if m.IsDefined() { return RuneArrOpt(f(*m.value)) } else { return NoneRuneArrOption }  }
/* AnyOption: Any->[]float32 */ func MapFloat32ArrToAnyOption(m AnyOption, f func(Any) []float32) Float32ArrOption {  if m.IsDefined() { return Float32ArrOpt(f(*m.value)) } else { return NoneFloat32ArrOption }  }
/* AnyOption: Any->[]float64 */ func MapFloat64ArrToAnyOption(m AnyOption, f func(Any) []float64) Float64ArrOption {  if m.IsDefined() { return Float64ArrOpt(f(*m.value)) } else { return NoneFloat64ArrOption }  }
/* AnyOption: Any->[]complex64 */ func MapComplex64ArrToAnyOption(m AnyOption, f func(Any) []complex64) Complex64ArrOption {  if m.IsDefined() { return Complex64ArrOpt(f(*m.value)) } else { return NoneComplex64ArrOption }  }
/* AnyOption: Any->[]complex128 */ func MapComplex128ArrToAnyOption(m AnyOption, f func(Any) []complex128) Complex128ArrOption {  if m.IsDefined() { return Complex128ArrOpt(f(*m.value)) } else { return NoneComplex128ArrOption }  }
/* AnyOption: Any->[]Any */ func MapAnyArrToAnyOption(m AnyOption, f func(Any) []Any) AnyArrOption {  if m.IsDefined() { return AnyArrOpt(f(*m.value)) } else { return NoneAnyArrOption }  }
/* AnyOption: Any->BoolList */ func MapBoolListToAnyOption(m AnyOption, f func(Any) BoolList) BoolListOption {  if m.IsDefined() { return BoolListOpt(f(*m.value)) } else { return NoneBoolListOption }  }
/* AnyOption: Any->StringList */ func MapStringListToAnyOption(m AnyOption, f func(Any) StringList) StringListOption {  if m.IsDefined() { return StringListOpt(f(*m.value)) } else { return NoneStringListOption }  }
/* AnyOption: Any->IntList */ func MapIntListToAnyOption(m AnyOption, f func(Any) IntList) IntListOption {  if m.IsDefined() { return IntListOpt(f(*m.value)) } else { return NoneIntListOption }  }
/* AnyOption: Any->Int8List */ func MapInt8ListToAnyOption(m AnyOption, f func(Any) Int8List) Int8ListOption {  if m.IsDefined() { return Int8ListOpt(f(*m.value)) } else { return NoneInt8ListOption }  }
/* AnyOption: Any->Int16List */ func MapInt16ListToAnyOption(m AnyOption, f func(Any) Int16List) Int16ListOption {  if m.IsDefined() { return Int16ListOpt(f(*m.value)) } else { return NoneInt16ListOption }  }
/* AnyOption: Any->Int32List */ func MapInt32ListToAnyOption(m AnyOption, f func(Any) Int32List) Int32ListOption {  if m.IsDefined() { return Int32ListOpt(f(*m.value)) } else { return NoneInt32ListOption }  }
/* AnyOption: Any->Int64List */ func MapInt64ListToAnyOption(m AnyOption, f func(Any) Int64List) Int64ListOption {  if m.IsDefined() { return Int64ListOpt(f(*m.value)) } else { return NoneInt64ListOption }  }
/* AnyOption: Any->UintList */ func MapUintListToAnyOption(m AnyOption, f func(Any) UintList) UintListOption {  if m.IsDefined() { return UintListOpt(f(*m.value)) } else { return NoneUintListOption }  }
/* AnyOption: Any->Uint8List */ func MapUint8ListToAnyOption(m AnyOption, f func(Any) Uint8List) Uint8ListOption {  if m.IsDefined() { return Uint8ListOpt(f(*m.value)) } else { return NoneUint8ListOption }  }
/* AnyOption: Any->Uint16List */ func MapUint16ListToAnyOption(m AnyOption, f func(Any) Uint16List) Uint16ListOption {  if m.IsDefined() { return Uint16ListOpt(f(*m.value)) } else { return NoneUint16ListOption }  }
/* AnyOption: Any->Uint32List */ func MapUint32ListToAnyOption(m AnyOption, f func(Any) Uint32List) Uint32ListOption {  if m.IsDefined() { return Uint32ListOpt(f(*m.value)) } else { return NoneUint32ListOption }  }
/* AnyOption: Any->Uint64List */ func MapUint64ListToAnyOption(m AnyOption, f func(Any) Uint64List) Uint64ListOption {  if m.IsDefined() { return Uint64ListOpt(f(*m.value)) } else { return NoneUint64ListOption }  }
/* AnyOption: Any->UintptrList */ func MapUintptrListToAnyOption(m AnyOption, f func(Any) UintptrList) UintptrListOption {  if m.IsDefined() { return UintptrListOpt(f(*m.value)) } else { return NoneUintptrListOption }  }
/* AnyOption: Any->ByteList */ func MapByteListToAnyOption(m AnyOption, f func(Any) ByteList) ByteListOption {  if m.IsDefined() { return ByteListOpt(f(*m.value)) } else { return NoneByteListOption }  }
/* AnyOption: Any->RuneList */ func MapRuneListToAnyOption(m AnyOption, f func(Any) RuneList) RuneListOption {  if m.IsDefined() { return RuneListOpt(f(*m.value)) } else { return NoneRuneListOption }  }
/* AnyOption: Any->Float32List */ func MapFloat32ListToAnyOption(m AnyOption, f func(Any) Float32List) Float32ListOption {  if m.IsDefined() { return Float32ListOpt(f(*m.value)) } else { return NoneFloat32ListOption }  }
/* AnyOption: Any->Float64List */ func MapFloat64ListToAnyOption(m AnyOption, f func(Any) Float64List) Float64ListOption {  if m.IsDefined() { return Float64ListOpt(f(*m.value)) } else { return NoneFloat64ListOption }  }
/* AnyOption: Any->Complex64List */ func MapComplex64ListToAnyOption(m AnyOption, f func(Any) Complex64List) Complex64ListOption {  if m.IsDefined() { return Complex64ListOpt(f(*m.value)) } else { return NoneComplex64ListOption }  }
/* AnyOption: Any->Complex128List */ func MapComplex128ListToAnyOption(m AnyOption, f func(Any) Complex128List) Complex128ListOption {  if m.IsDefined() { return Complex128ListOpt(f(*m.value)) } else { return NoneComplex128ListOption }  }
/* AnyOption: Any->AnyList */ func MapAnyListToAnyOption(m AnyOption, f func(Any) AnyList) AnyListOption {  if m.IsDefined() { return AnyListOpt(f(*m.value)) } else { return NoneAnyListOption }  }
/* BoolArrOption: []bool->bool */ func MapBoolToBoolArrOption(m BoolArrOption, f func([]bool) bool) BoolOption {  if m.IsDefined() { return Bool(f(*m.value)) } else { return NoneBoolOption }  }
/* BoolArrOption: []bool->string */ func MapStringToBoolArrOption(m BoolArrOption, f func([]bool) string) StringOption {  if m.IsDefined() { return String(f(*m.value)) } else { return NoneStringOption }  }
/* BoolArrOption: []bool->int */ func MapIntToBoolArrOption(m BoolArrOption, f func([]bool) int) IntOption {  if m.IsDefined() { return Int(f(*m.value)) } else { return NoneIntOption }  }
/* BoolArrOption: []bool->int8 */ func MapInt8ToBoolArrOption(m BoolArrOption, f func([]bool) int8) Int8Option {  if m.IsDefined() { return Int8(f(*m.value)) } else { return NoneInt8Option }  }
/* BoolArrOption: []bool->int16 */ func MapInt16ToBoolArrOption(m BoolArrOption, f func([]bool) int16) Int16Option {  if m.IsDefined() { return Int16(f(*m.value)) } else { return NoneInt16Option }  }
/* BoolArrOption: []bool->int32 */ func MapInt32ToBoolArrOption(m BoolArrOption, f func([]bool) int32) Int32Option {  if m.IsDefined() { return Int32(f(*m.value)) } else { return NoneInt32Option }  }
/* BoolArrOption: []bool->int64 */ func MapInt64ToBoolArrOption(m BoolArrOption, f func([]bool) int64) Int64Option {  if m.IsDefined() { return Int64(f(*m.value)) } else { return NoneInt64Option }  }
/* BoolArrOption: []bool->uint */ func MapUintToBoolArrOption(m BoolArrOption, f func([]bool) uint) UintOption {  if m.IsDefined() { return Uint(f(*m.value)) } else { return NoneUintOption }  }
/* BoolArrOption: []bool->uint8 */ func MapUint8ToBoolArrOption(m BoolArrOption, f func([]bool) uint8) Uint8Option {  if m.IsDefined() { return Uint8(f(*m.value)) } else { return NoneUint8Option }  }
/* BoolArrOption: []bool->uint16 */ func MapUint16ToBoolArrOption(m BoolArrOption, f func([]bool) uint16) Uint16Option {  if m.IsDefined() { return Uint16(f(*m.value)) } else { return NoneUint16Option }  }
/* BoolArrOption: []bool->uint32 */ func MapUint32ToBoolArrOption(m BoolArrOption, f func([]bool) uint32) Uint32Option {  if m.IsDefined() { return Uint32(f(*m.value)) } else { return NoneUint32Option }  }
/* BoolArrOption: []bool->uint64 */ func MapUint64ToBoolArrOption(m BoolArrOption, f func([]bool) uint64) Uint64Option {  if m.IsDefined() { return Uint64(f(*m.value)) } else { return NoneUint64Option }  }
/* BoolArrOption: []bool->uintptr */ func MapUintptrToBoolArrOption(m BoolArrOption, f func([]bool) uintptr) UintptrOption {  if m.IsDefined() { return Uintptr(f(*m.value)) } else { return NoneUintptrOption }  }
/* BoolArrOption: []bool->byte */ func MapByteToBoolArrOption(m BoolArrOption, f func([]bool) byte) ByteOption {  if m.IsDefined() { return Byte(f(*m.value)) } else { return NoneByteOption }  }
/* BoolArrOption: []bool->rune */ func MapRuneToBoolArrOption(m BoolArrOption, f func([]bool) rune) RuneOption {  if m.IsDefined() { return Rune(f(*m.value)) } else { return NoneRuneOption }  }
/* BoolArrOption: []bool->float32 */ func MapFloat32ToBoolArrOption(m BoolArrOption, f func([]bool) float32) Float32Option {  if m.IsDefined() { return Float32(f(*m.value)) } else { return NoneFloat32Option }  }
/* BoolArrOption: []bool->float64 */ func MapFloat64ToBoolArrOption(m BoolArrOption, f func([]bool) float64) Float64Option {  if m.IsDefined() { return Float64(f(*m.value)) } else { return NoneFloat64Option }  }
/* BoolArrOption: []bool->complex64 */ func MapComplex64ToBoolArrOption(m BoolArrOption, f func([]bool) complex64) Complex64Option {  if m.IsDefined() { return Complex64(f(*m.value)) } else { return NoneComplex64Option }  }
/* BoolArrOption: []bool->complex128 */ func MapComplex128ToBoolArrOption(m BoolArrOption, f func([]bool) complex128) Complex128Option {  if m.IsDefined() { return Complex128(f(*m.value)) } else { return NoneComplex128Option }  }
/* BoolArrOption: []bool->Any */ func MapAnyToBoolArrOption(m BoolArrOption, f func([]bool) Any) AnyOption {  if m.IsDefined() { return AnyOpt(f(*m.value)) } else { return NoneAnyOption }  }
/* BoolArrOption: []bool->BoolOption */ func MapBoolOptionToBoolArrOption(m BoolArrOption, f func([]bool) BoolOption) BoolOptionOption {  if m.IsDefined() { return BoolBool(f(*m.value)) } else { return NoneBoolOptionOption }  }
/* BoolArrOption: []bool->StringOption */ func MapStringOptionToBoolArrOption(m BoolArrOption, f func([]bool) StringOption) StringOptionOption {  if m.IsDefined() { return StringString(f(*m.value)) } else { return NoneStringOptionOption }  }
/* BoolArrOption: []bool->IntOption */ func MapIntOptionToBoolArrOption(m BoolArrOption, f func([]bool) IntOption) IntOptionOption {  if m.IsDefined() { return IntInt(f(*m.value)) } else { return NoneIntOptionOption }  }
/* BoolArrOption: []bool->Int8Option */ func MapInt8OptionToBoolArrOption(m BoolArrOption, f func([]bool) Int8Option) Int8OptionOption {  if m.IsDefined() { return Int8Int8(f(*m.value)) } else { return NoneInt8OptionOption }  }
/* BoolArrOption: []bool->Int16Option */ func MapInt16OptionToBoolArrOption(m BoolArrOption, f func([]bool) Int16Option) Int16OptionOption {  if m.IsDefined() { return Int16Int16(f(*m.value)) } else { return NoneInt16OptionOption }  }
/* BoolArrOption: []bool->Int32Option */ func MapInt32OptionToBoolArrOption(m BoolArrOption, f func([]bool) Int32Option) Int32OptionOption {  if m.IsDefined() { return Int32Int32(f(*m.value)) } else { return NoneInt32OptionOption }  }
/* BoolArrOption: []bool->Int64Option */ func MapInt64OptionToBoolArrOption(m BoolArrOption, f func([]bool) Int64Option) Int64OptionOption {  if m.IsDefined() { return Int64Int64(f(*m.value)) } else { return NoneInt64OptionOption }  }
/* BoolArrOption: []bool->UintOption */ func MapUintOptionToBoolArrOption(m BoolArrOption, f func([]bool) UintOption) UintOptionOption {  if m.IsDefined() { return UintUint(f(*m.value)) } else { return NoneUintOptionOption }  }
/* BoolArrOption: []bool->Uint8Option */ func MapUint8OptionToBoolArrOption(m BoolArrOption, f func([]bool) Uint8Option) Uint8OptionOption {  if m.IsDefined() { return Uint8Uint8(f(*m.value)) } else { return NoneUint8OptionOption }  }
/* BoolArrOption: []bool->Uint16Option */ func MapUint16OptionToBoolArrOption(m BoolArrOption, f func([]bool) Uint16Option) Uint16OptionOption {  if m.IsDefined() { return Uint16Uint16(f(*m.value)) } else { return NoneUint16OptionOption }  }
/* BoolArrOption: []bool->Uint32Option */ func MapUint32OptionToBoolArrOption(m BoolArrOption, f func([]bool) Uint32Option) Uint32OptionOption {  if m.IsDefined() { return Uint32Uint32(f(*m.value)) } else { return NoneUint32OptionOption }  }
/* BoolArrOption: []bool->Uint64Option */ func MapUint64OptionToBoolArrOption(m BoolArrOption, f func([]bool) Uint64Option) Uint64OptionOption {  if m.IsDefined() { return Uint64Uint64(f(*m.value)) } else { return NoneUint64OptionOption }  }
/* BoolArrOption: []bool->UintptrOption */ func MapUintptrOptionToBoolArrOption(m BoolArrOption, f func([]bool) UintptrOption) UintptrOptionOption {  if m.IsDefined() { return UintptrUintptr(f(*m.value)) } else { return NoneUintptrOptionOption }  }
/* BoolArrOption: []bool->ByteOption */ func MapByteOptionToBoolArrOption(m BoolArrOption, f func([]bool) ByteOption) ByteOptionOption {  if m.IsDefined() { return ByteByte(f(*m.value)) } else { return NoneByteOptionOption }  }
/* BoolArrOption: []bool->RuneOption */ func MapRuneOptionToBoolArrOption(m BoolArrOption, f func([]bool) RuneOption) RuneOptionOption {  if m.IsDefined() { return RuneRune(f(*m.value)) } else { return NoneRuneOptionOption }  }
/* BoolArrOption: []bool->Float32Option */ func MapFloat32OptionToBoolArrOption(m BoolArrOption, f func([]bool) Float32Option) Float32OptionOption {  if m.IsDefined() { return Float32Float32(f(*m.value)) } else { return NoneFloat32OptionOption }  }
/* BoolArrOption: []bool->Float64Option */ func MapFloat64OptionToBoolArrOption(m BoolArrOption, f func([]bool) Float64Option) Float64OptionOption {  if m.IsDefined() { return Float64Float64(f(*m.value)) } else { return NoneFloat64OptionOption }  }
/* BoolArrOption: []bool->Complex64Option */ func MapComplex64OptionToBoolArrOption(m BoolArrOption, f func([]bool) Complex64Option) Complex64OptionOption {  if m.IsDefined() { return Complex64Complex64(f(*m.value)) } else { return NoneComplex64OptionOption }  }
/* BoolArrOption: []bool->Complex128Option */ func MapComplex128OptionToBoolArrOption(m BoolArrOption, f func([]bool) Complex128Option) Complex128OptionOption {  if m.IsDefined() { return Complex128Complex128(f(*m.value)) } else { return NoneComplex128OptionOption }  }
/* BoolArrOption: []bool->AnyOption */ func MapAnyOptionToBoolArrOption(m BoolArrOption, f func([]bool) AnyOption) AnyOptionOption {  if m.IsDefined() { return AnyOptAny(f(*m.value)) } else { return NoneAnyOptionOption }  }
/* BoolArrOption: []bool->[]bool */ func MapBoolArrToBoolArrOption(m BoolArrOption, f func([]bool) []bool) BoolArrOption {  if m.IsDefined() { return BoolArrOpt(f(*m.value)) } else { return NoneBoolArrOption }  }
/* BoolArrOption: []bool->[]string */ func MapStringArrToBoolArrOption(m BoolArrOption, f func([]bool) []string) StringArrOption {  if m.IsDefined() { return StringArrOpt(f(*m.value)) } else { return NoneStringArrOption }  }
/* BoolArrOption: []bool->[]int */ func MapIntArrToBoolArrOption(m BoolArrOption, f func([]bool) []int) IntArrOption {  if m.IsDefined() { return IntArrOpt(f(*m.value)) } else { return NoneIntArrOption }  }
/* BoolArrOption: []bool->[]int8 */ func MapInt8ArrToBoolArrOption(m BoolArrOption, f func([]bool) []int8) Int8ArrOption {  if m.IsDefined() { return Int8ArrOpt(f(*m.value)) } else { return NoneInt8ArrOption }  }
/* BoolArrOption: []bool->[]int16 */ func MapInt16ArrToBoolArrOption(m BoolArrOption, f func([]bool) []int16) Int16ArrOption {  if m.IsDefined() { return Int16ArrOpt(f(*m.value)) } else { return NoneInt16ArrOption }  }
/* BoolArrOption: []bool->[]int32 */ func MapInt32ArrToBoolArrOption(m BoolArrOption, f func([]bool) []int32) Int32ArrOption {  if m.IsDefined() { return Int32ArrOpt(f(*m.value)) } else { return NoneInt32ArrOption }  }
/* BoolArrOption: []bool->[]int64 */ func MapInt64ArrToBoolArrOption(m BoolArrOption, f func([]bool) []int64) Int64ArrOption {  if m.IsDefined() { return Int64ArrOpt(f(*m.value)) } else { return NoneInt64ArrOption }  }
/* BoolArrOption: []bool->[]uint */ func MapUintArrToBoolArrOption(m BoolArrOption, f func([]bool) []uint) UintArrOption {  if m.IsDefined() { return UintArrOpt(f(*m.value)) } else { return NoneUintArrOption }  }
/* BoolArrOption: []bool->[]uint8 */ func MapUint8ArrToBoolArrOption(m BoolArrOption, f func([]bool) []uint8) Uint8ArrOption {  if m.IsDefined() { return Uint8ArrOpt(f(*m.value)) } else { return NoneUint8ArrOption }  }
/* BoolArrOption: []bool->[]uint16 */ func MapUint16ArrToBoolArrOption(m BoolArrOption, f func([]bool) []uint16) Uint16ArrOption {  if m.IsDefined() { return Uint16ArrOpt(f(*m.value)) } else { return NoneUint16ArrOption }  }
/* BoolArrOption: []bool->[]uint32 */ func MapUint32ArrToBoolArrOption(m BoolArrOption, f func([]bool) []uint32) Uint32ArrOption {  if m.IsDefined() { return Uint32ArrOpt(f(*m.value)) } else { return NoneUint32ArrOption }  }
/* BoolArrOption: []bool->[]uint64 */ func MapUint64ArrToBoolArrOption(m BoolArrOption, f func([]bool) []uint64) Uint64ArrOption {  if m.IsDefined() { return Uint64ArrOpt(f(*m.value)) } else { return NoneUint64ArrOption }  }
/* BoolArrOption: []bool->[]uintptr */ func MapUintptrArrToBoolArrOption(m BoolArrOption, f func([]bool) []uintptr) UintptrArrOption {  if m.IsDefined() { return UintptrArrOpt(f(*m.value)) } else { return NoneUintptrArrOption }  }
/* BoolArrOption: []bool->[]byte */ func MapByteArrToBoolArrOption(m BoolArrOption, f func([]bool) []byte) ByteArrOption {  if m.IsDefined() { return ByteArrOpt(f(*m.value)) } else { return NoneByteArrOption }  }
/* BoolArrOption: []bool->[]rune */ func MapRuneArrToBoolArrOption(m BoolArrOption, f func([]bool) []rune) RuneArrOption {  if m.IsDefined() { return RuneArrOpt(f(*m.value)) } else { return NoneRuneArrOption }  }
/* BoolArrOption: []bool->[]float32 */ func MapFloat32ArrToBoolArrOption(m BoolArrOption, f func([]bool) []float32) Float32ArrOption {  if m.IsDefined() { return Float32ArrOpt(f(*m.value)) } else { return NoneFloat32ArrOption }  }
/* BoolArrOption: []bool->[]float64 */ func MapFloat64ArrToBoolArrOption(m BoolArrOption, f func([]bool) []float64) Float64ArrOption {  if m.IsDefined() { return Float64ArrOpt(f(*m.value)) } else { return NoneFloat64ArrOption }  }
/* BoolArrOption: []bool->[]complex64 */ func MapComplex64ArrToBoolArrOption(m BoolArrOption, f func([]bool) []complex64) Complex64ArrOption {  if m.IsDefined() { return Complex64ArrOpt(f(*m.value)) } else { return NoneComplex64ArrOption }  }
/* BoolArrOption: []bool->[]complex128 */ func MapComplex128ArrToBoolArrOption(m BoolArrOption, f func([]bool) []complex128) Complex128ArrOption {  if m.IsDefined() { return Complex128ArrOpt(f(*m.value)) } else { return NoneComplex128ArrOption }  }
/* BoolArrOption: []bool->[]Any */ func MapAnyArrToBoolArrOption(m BoolArrOption, f func([]bool) []Any) AnyArrOption {  if m.IsDefined() { return AnyArrOpt(f(*m.value)) } else { return NoneAnyArrOption }  }
/* BoolArrOption: []bool->BoolList */ func MapBoolListToBoolArrOption(m BoolArrOption, f func([]bool) BoolList) BoolListOption {  if m.IsDefined() { return BoolListOpt(f(*m.value)) } else { return NoneBoolListOption }  }
/* BoolArrOption: []bool->StringList */ func MapStringListToBoolArrOption(m BoolArrOption, f func([]bool) StringList) StringListOption {  if m.IsDefined() { return StringListOpt(f(*m.value)) } else { return NoneStringListOption }  }
/* BoolArrOption: []bool->IntList */ func MapIntListToBoolArrOption(m BoolArrOption, f func([]bool) IntList) IntListOption {  if m.IsDefined() { return IntListOpt(f(*m.value)) } else { return NoneIntListOption }  }
/* BoolArrOption: []bool->Int8List */ func MapInt8ListToBoolArrOption(m BoolArrOption, f func([]bool) Int8List) Int8ListOption {  if m.IsDefined() { return Int8ListOpt(f(*m.value)) } else { return NoneInt8ListOption }  }
/* BoolArrOption: []bool->Int16List */ func MapInt16ListToBoolArrOption(m BoolArrOption, f func([]bool) Int16List) Int16ListOption {  if m.IsDefined() { return Int16ListOpt(f(*m.value)) } else { return NoneInt16ListOption }  }
/* BoolArrOption: []bool->Int32List */ func MapInt32ListToBoolArrOption(m BoolArrOption, f func([]bool) Int32List) Int32ListOption {  if m.IsDefined() { return Int32ListOpt(f(*m.value)) } else { return NoneInt32ListOption }  }
/* BoolArrOption: []bool->Int64List */ func MapInt64ListToBoolArrOption(m BoolArrOption, f func([]bool) Int64List) Int64ListOption {  if m.IsDefined() { return Int64ListOpt(f(*m.value)) } else { return NoneInt64ListOption }  }
/* BoolArrOption: []bool->UintList */ func MapUintListToBoolArrOption(m BoolArrOption, f func([]bool) UintList) UintListOption {  if m.IsDefined() { return UintListOpt(f(*m.value)) } else { return NoneUintListOption }  }
/* BoolArrOption: []bool->Uint8List */ func MapUint8ListToBoolArrOption(m BoolArrOption, f func([]bool) Uint8List) Uint8ListOption {  if m.IsDefined() { return Uint8ListOpt(f(*m.value)) } else { return NoneUint8ListOption }  }
/* BoolArrOption: []bool->Uint16List */ func MapUint16ListToBoolArrOption(m BoolArrOption, f func([]bool) Uint16List) Uint16ListOption {  if m.IsDefined() { return Uint16ListOpt(f(*m.value)) } else { return NoneUint16ListOption }  }
/* BoolArrOption: []bool->Uint32List */ func MapUint32ListToBoolArrOption(m BoolArrOption, f func([]bool) Uint32List) Uint32ListOption {  if m.IsDefined() { return Uint32ListOpt(f(*m.value)) } else { return NoneUint32ListOption }  }
/* BoolArrOption: []bool->Uint64List */ func MapUint64ListToBoolArrOption(m BoolArrOption, f func([]bool) Uint64List) Uint64ListOption {  if m.IsDefined() { return Uint64ListOpt(f(*m.value)) } else { return NoneUint64ListOption }  }
/* BoolArrOption: []bool->UintptrList */ func MapUintptrListToBoolArrOption(m BoolArrOption, f func([]bool) UintptrList) UintptrListOption {  if m.IsDefined() { return UintptrListOpt(f(*m.value)) } else { return NoneUintptrListOption }  }
/* BoolArrOption: []bool->ByteList */ func MapByteListToBoolArrOption(m BoolArrOption, f func([]bool) ByteList) ByteListOption {  if m.IsDefined() { return ByteListOpt(f(*m.value)) } else { return NoneByteListOption }  }
/* BoolArrOption: []bool->RuneList */ func MapRuneListToBoolArrOption(m BoolArrOption, f func([]bool) RuneList) RuneListOption {  if m.IsDefined() { return RuneListOpt(f(*m.value)) } else { return NoneRuneListOption }  }
/* BoolArrOption: []bool->Float32List */ func MapFloat32ListToBoolArrOption(m BoolArrOption, f func([]bool) Float32List) Float32ListOption {  if m.IsDefined() { return Float32ListOpt(f(*m.value)) } else { return NoneFloat32ListOption }  }
/* BoolArrOption: []bool->Float64List */ func MapFloat64ListToBoolArrOption(m BoolArrOption, f func([]bool) Float64List) Float64ListOption {  if m.IsDefined() { return Float64ListOpt(f(*m.value)) } else { return NoneFloat64ListOption }  }
/* BoolArrOption: []bool->Complex64List */ func MapComplex64ListToBoolArrOption(m BoolArrOption, f func([]bool) Complex64List) Complex64ListOption {  if m.IsDefined() { return Complex64ListOpt(f(*m.value)) } else { return NoneComplex64ListOption }  }
/* BoolArrOption: []bool->Complex128List */ func MapComplex128ListToBoolArrOption(m BoolArrOption, f func([]bool) Complex128List) Complex128ListOption {  if m.IsDefined() { return Complex128ListOpt(f(*m.value)) } else { return NoneComplex128ListOption }  }
/* BoolArrOption: []bool->AnyList */ func MapAnyListToBoolArrOption(m BoolArrOption, f func([]bool) AnyList) AnyListOption {  if m.IsDefined() { return AnyListOpt(f(*m.value)) } else { return NoneAnyListOption }  }
/* StringArrOption: []string->bool */ func MapBoolToStringArrOption(m StringArrOption, f func([]string) bool) BoolOption {  if m.IsDefined() { return Bool(f(*m.value)) } else { return NoneBoolOption }  }
/* StringArrOption: []string->string */ func MapStringToStringArrOption(m StringArrOption, f func([]string) string) StringOption {  if m.IsDefined() { return String(f(*m.value)) } else { return NoneStringOption }  }
/* StringArrOption: []string->int */ func MapIntToStringArrOption(m StringArrOption, f func([]string) int) IntOption {  if m.IsDefined() { return Int(f(*m.value)) } else { return NoneIntOption }  }
/* StringArrOption: []string->int8 */ func MapInt8ToStringArrOption(m StringArrOption, f func([]string) int8) Int8Option {  if m.IsDefined() { return Int8(f(*m.value)) } else { return NoneInt8Option }  }
/* StringArrOption: []string->int16 */ func MapInt16ToStringArrOption(m StringArrOption, f func([]string) int16) Int16Option {  if m.IsDefined() { return Int16(f(*m.value)) } else { return NoneInt16Option }  }
/* StringArrOption: []string->int32 */ func MapInt32ToStringArrOption(m StringArrOption, f func([]string) int32) Int32Option {  if m.IsDefined() { return Int32(f(*m.value)) } else { return NoneInt32Option }  }
/* StringArrOption: []string->int64 */ func MapInt64ToStringArrOption(m StringArrOption, f func([]string) int64) Int64Option {  if m.IsDefined() { return Int64(f(*m.value)) } else { return NoneInt64Option }  }
/* StringArrOption: []string->uint */ func MapUintToStringArrOption(m StringArrOption, f func([]string) uint) UintOption {  if m.IsDefined() { return Uint(f(*m.value)) } else { return NoneUintOption }  }
/* StringArrOption: []string->uint8 */ func MapUint8ToStringArrOption(m StringArrOption, f func([]string) uint8) Uint8Option {  if m.IsDefined() { return Uint8(f(*m.value)) } else { return NoneUint8Option }  }
/* StringArrOption: []string->uint16 */ func MapUint16ToStringArrOption(m StringArrOption, f func([]string) uint16) Uint16Option {  if m.IsDefined() { return Uint16(f(*m.value)) } else { return NoneUint16Option }  }
/* StringArrOption: []string->uint32 */ func MapUint32ToStringArrOption(m StringArrOption, f func([]string) uint32) Uint32Option {  if m.IsDefined() { return Uint32(f(*m.value)) } else { return NoneUint32Option }  }
/* StringArrOption: []string->uint64 */ func MapUint64ToStringArrOption(m StringArrOption, f func([]string) uint64) Uint64Option {  if m.IsDefined() { return Uint64(f(*m.value)) } else { return NoneUint64Option }  }
/* StringArrOption: []string->uintptr */ func MapUintptrToStringArrOption(m StringArrOption, f func([]string) uintptr) UintptrOption {  if m.IsDefined() { return Uintptr(f(*m.value)) } else { return NoneUintptrOption }  }
/* StringArrOption: []string->byte */ func MapByteToStringArrOption(m StringArrOption, f func([]string) byte) ByteOption {  if m.IsDefined() { return Byte(f(*m.value)) } else { return NoneByteOption }  }
/* StringArrOption: []string->rune */ func MapRuneToStringArrOption(m StringArrOption, f func([]string) rune) RuneOption {  if m.IsDefined() { return Rune(f(*m.value)) } else { return NoneRuneOption }  }
/* StringArrOption: []string->float32 */ func MapFloat32ToStringArrOption(m StringArrOption, f func([]string) float32) Float32Option {  if m.IsDefined() { return Float32(f(*m.value)) } else { return NoneFloat32Option }  }
/* StringArrOption: []string->float64 */ func MapFloat64ToStringArrOption(m StringArrOption, f func([]string) float64) Float64Option {  if m.IsDefined() { return Float64(f(*m.value)) } else { return NoneFloat64Option }  }
/* StringArrOption: []string->complex64 */ func MapComplex64ToStringArrOption(m StringArrOption, f func([]string) complex64) Complex64Option {  if m.IsDefined() { return Complex64(f(*m.value)) } else { return NoneComplex64Option }  }
/* StringArrOption: []string->complex128 */ func MapComplex128ToStringArrOption(m StringArrOption, f func([]string) complex128) Complex128Option {  if m.IsDefined() { return Complex128(f(*m.value)) } else { return NoneComplex128Option }  }
/* StringArrOption: []string->Any */ func MapAnyToStringArrOption(m StringArrOption, f func([]string) Any) AnyOption {  if m.IsDefined() { return AnyOpt(f(*m.value)) } else { return NoneAnyOption }  }
/* StringArrOption: []string->BoolOption */ func MapBoolOptionToStringArrOption(m StringArrOption, f func([]string) BoolOption) BoolOptionOption {  if m.IsDefined() { return BoolBool(f(*m.value)) } else { return NoneBoolOptionOption }  }
/* StringArrOption: []string->StringOption */ func MapStringOptionToStringArrOption(m StringArrOption, f func([]string) StringOption) StringOptionOption {  if m.IsDefined() { return StringString(f(*m.value)) } else { return NoneStringOptionOption }  }
/* StringArrOption: []string->IntOption */ func MapIntOptionToStringArrOption(m StringArrOption, f func([]string) IntOption) IntOptionOption {  if m.IsDefined() { return IntInt(f(*m.value)) } else { return NoneIntOptionOption }  }
/* StringArrOption: []string->Int8Option */ func MapInt8OptionToStringArrOption(m StringArrOption, f func([]string) Int8Option) Int8OptionOption {  if m.IsDefined() { return Int8Int8(f(*m.value)) } else { return NoneInt8OptionOption }  }
/* StringArrOption: []string->Int16Option */ func MapInt16OptionToStringArrOption(m StringArrOption, f func([]string) Int16Option) Int16OptionOption {  if m.IsDefined() { return Int16Int16(f(*m.value)) } else { return NoneInt16OptionOption }  }
/* StringArrOption: []string->Int32Option */ func MapInt32OptionToStringArrOption(m StringArrOption, f func([]string) Int32Option) Int32OptionOption {  if m.IsDefined() { return Int32Int32(f(*m.value)) } else { return NoneInt32OptionOption }  }
/* StringArrOption: []string->Int64Option */ func MapInt64OptionToStringArrOption(m StringArrOption, f func([]string) Int64Option) Int64OptionOption {  if m.IsDefined() { return Int64Int64(f(*m.value)) } else { return NoneInt64OptionOption }  }
/* StringArrOption: []string->UintOption */ func MapUintOptionToStringArrOption(m StringArrOption, f func([]string) UintOption) UintOptionOption {  if m.IsDefined() { return UintUint(f(*m.value)) } else { return NoneUintOptionOption }  }
/* StringArrOption: []string->Uint8Option */ func MapUint8OptionToStringArrOption(m StringArrOption, f func([]string) Uint8Option) Uint8OptionOption {  if m.IsDefined() { return Uint8Uint8(f(*m.value)) } else { return NoneUint8OptionOption }  }
/* StringArrOption: []string->Uint16Option */ func MapUint16OptionToStringArrOption(m StringArrOption, f func([]string) Uint16Option) Uint16OptionOption {  if m.IsDefined() { return Uint16Uint16(f(*m.value)) } else { return NoneUint16OptionOption }  }
/* StringArrOption: []string->Uint32Option */ func MapUint32OptionToStringArrOption(m StringArrOption, f func([]string) Uint32Option) Uint32OptionOption {  if m.IsDefined() { return Uint32Uint32(f(*m.value)) } else { return NoneUint32OptionOption }  }
/* StringArrOption: []string->Uint64Option */ func MapUint64OptionToStringArrOption(m StringArrOption, f func([]string) Uint64Option) Uint64OptionOption {  if m.IsDefined() { return Uint64Uint64(f(*m.value)) } else { return NoneUint64OptionOption }  }
/* StringArrOption: []string->UintptrOption */ func MapUintptrOptionToStringArrOption(m StringArrOption, f func([]string) UintptrOption) UintptrOptionOption {  if m.IsDefined() { return UintptrUintptr(f(*m.value)) } else { return NoneUintptrOptionOption }  }
/* StringArrOption: []string->ByteOption */ func MapByteOptionToStringArrOption(m StringArrOption, f func([]string) ByteOption) ByteOptionOption {  if m.IsDefined() { return ByteByte(f(*m.value)) } else { return NoneByteOptionOption }  }
/* StringArrOption: []string->RuneOption */ func MapRuneOptionToStringArrOption(m StringArrOption, f func([]string) RuneOption) RuneOptionOption {  if m.IsDefined() { return RuneRune(f(*m.value)) } else { return NoneRuneOptionOption }  }
/* StringArrOption: []string->Float32Option */ func MapFloat32OptionToStringArrOption(m StringArrOption, f func([]string) Float32Option) Float32OptionOption {  if m.IsDefined() { return Float32Float32(f(*m.value)) } else { return NoneFloat32OptionOption }  }
/* StringArrOption: []string->Float64Option */ func MapFloat64OptionToStringArrOption(m StringArrOption, f func([]string) Float64Option) Float64OptionOption {  if m.IsDefined() { return Float64Float64(f(*m.value)) } else { return NoneFloat64OptionOption }  }
/* StringArrOption: []string->Complex64Option */ func MapComplex64OptionToStringArrOption(m StringArrOption, f func([]string) Complex64Option) Complex64OptionOption {  if m.IsDefined() { return Complex64Complex64(f(*m.value)) } else { return NoneComplex64OptionOption }  }
/* StringArrOption: []string->Complex128Option */ func MapComplex128OptionToStringArrOption(m StringArrOption, f func([]string) Complex128Option) Complex128OptionOption {  if m.IsDefined() { return Complex128Complex128(f(*m.value)) } else { return NoneComplex128OptionOption }  }
/* StringArrOption: []string->AnyOption */ func MapAnyOptionToStringArrOption(m StringArrOption, f func([]string) AnyOption) AnyOptionOption {  if m.IsDefined() { return AnyOptAny(f(*m.value)) } else { return NoneAnyOptionOption }  }
/* StringArrOption: []string->[]bool */ func MapBoolArrToStringArrOption(m StringArrOption, f func([]string) []bool) BoolArrOption {  if m.IsDefined() { return BoolArrOpt(f(*m.value)) } else { return NoneBoolArrOption }  }
/* StringArrOption: []string->[]string */ func MapStringArrToStringArrOption(m StringArrOption, f func([]string) []string) StringArrOption {  if m.IsDefined() { return StringArrOpt(f(*m.value)) } else { return NoneStringArrOption }  }
/* StringArrOption: []string->[]int */ func MapIntArrToStringArrOption(m StringArrOption, f func([]string) []int) IntArrOption {  if m.IsDefined() { return IntArrOpt(f(*m.value)) } else { return NoneIntArrOption }  }
/* StringArrOption: []string->[]int8 */ func MapInt8ArrToStringArrOption(m StringArrOption, f func([]string) []int8) Int8ArrOption {  if m.IsDefined() { return Int8ArrOpt(f(*m.value)) } else { return NoneInt8ArrOption }  }
/* StringArrOption: []string->[]int16 */ func MapInt16ArrToStringArrOption(m StringArrOption, f func([]string) []int16) Int16ArrOption {  if m.IsDefined() { return Int16ArrOpt(f(*m.value)) } else { return NoneInt16ArrOption }  }
/* StringArrOption: []string->[]int32 */ func MapInt32ArrToStringArrOption(m StringArrOption, f func([]string) []int32) Int32ArrOption {  if m.IsDefined() { return Int32ArrOpt(f(*m.value)) } else { return NoneInt32ArrOption }  }
/* StringArrOption: []string->[]int64 */ func MapInt64ArrToStringArrOption(m StringArrOption, f func([]string) []int64) Int64ArrOption {  if m.IsDefined() { return Int64ArrOpt(f(*m.value)) } else { return NoneInt64ArrOption }  }
/* StringArrOption: []string->[]uint */ func MapUintArrToStringArrOption(m StringArrOption, f func([]string) []uint) UintArrOption {  if m.IsDefined() { return UintArrOpt(f(*m.value)) } else { return NoneUintArrOption }  }
/* StringArrOption: []string->[]uint8 */ func MapUint8ArrToStringArrOption(m StringArrOption, f func([]string) []uint8) Uint8ArrOption {  if m.IsDefined() { return Uint8ArrOpt(f(*m.value)) } else { return NoneUint8ArrOption }  }
/* StringArrOption: []string->[]uint16 */ func MapUint16ArrToStringArrOption(m StringArrOption, f func([]string) []uint16) Uint16ArrOption {  if m.IsDefined() { return Uint16ArrOpt(f(*m.value)) } else { return NoneUint16ArrOption }  }
/* StringArrOption: []string->[]uint32 */ func MapUint32ArrToStringArrOption(m StringArrOption, f func([]string) []uint32) Uint32ArrOption {  if m.IsDefined() { return Uint32ArrOpt(f(*m.value)) } else { return NoneUint32ArrOption }  }
/* StringArrOption: []string->[]uint64 */ func MapUint64ArrToStringArrOption(m StringArrOption, f func([]string) []uint64) Uint64ArrOption {  if m.IsDefined() { return Uint64ArrOpt(f(*m.value)) } else { return NoneUint64ArrOption }  }
/* StringArrOption: []string->[]uintptr */ func MapUintptrArrToStringArrOption(m StringArrOption, f func([]string) []uintptr) UintptrArrOption {  if m.IsDefined() { return UintptrArrOpt(f(*m.value)) } else { return NoneUintptrArrOption }  }
/* StringArrOption: []string->[]byte */ func MapByteArrToStringArrOption(m StringArrOption, f func([]string) []byte) ByteArrOption {  if m.IsDefined() { return ByteArrOpt(f(*m.value)) } else { return NoneByteArrOption }  }
/* StringArrOption: []string->[]rune */ func MapRuneArrToStringArrOption(m StringArrOption, f func([]string) []rune) RuneArrOption {  if m.IsDefined() { return RuneArrOpt(f(*m.value)) } else { return NoneRuneArrOption }  }
/* StringArrOption: []string->[]float32 */ func MapFloat32ArrToStringArrOption(m StringArrOption, f func([]string) []float32) Float32ArrOption {  if m.IsDefined() { return Float32ArrOpt(f(*m.value)) } else { return NoneFloat32ArrOption }  }
/* StringArrOption: []string->[]float64 */ func MapFloat64ArrToStringArrOption(m StringArrOption, f func([]string) []float64) Float64ArrOption {  if m.IsDefined() { return Float64ArrOpt(f(*m.value)) } else { return NoneFloat64ArrOption }  }
/* StringArrOption: []string->[]complex64 */ func MapComplex64ArrToStringArrOption(m StringArrOption, f func([]string) []complex64) Complex64ArrOption {  if m.IsDefined() { return Complex64ArrOpt(f(*m.value)) } else { return NoneComplex64ArrOption }  }
/* StringArrOption: []string->[]complex128 */ func MapComplex128ArrToStringArrOption(m StringArrOption, f func([]string) []complex128) Complex128ArrOption {  if m.IsDefined() { return Complex128ArrOpt(f(*m.value)) } else { return NoneComplex128ArrOption }  }
/* StringArrOption: []string->[]Any */ func MapAnyArrToStringArrOption(m StringArrOption, f func([]string) []Any) AnyArrOption {  if m.IsDefined() { return AnyArrOpt(f(*m.value)) } else { return NoneAnyArrOption }  }
/* StringArrOption: []string->BoolList */ func MapBoolListToStringArrOption(m StringArrOption, f func([]string) BoolList) BoolListOption {  if m.IsDefined() { return BoolListOpt(f(*m.value)) } else { return NoneBoolListOption }  }
/* StringArrOption: []string->StringList */ func MapStringListToStringArrOption(m StringArrOption, f func([]string) StringList) StringListOption {  if m.IsDefined() { return StringListOpt(f(*m.value)) } else { return NoneStringListOption }  }
/* StringArrOption: []string->IntList */ func MapIntListToStringArrOption(m StringArrOption, f func([]string) IntList) IntListOption {  if m.IsDefined() { return IntListOpt(f(*m.value)) } else { return NoneIntListOption }  }
/* StringArrOption: []string->Int8List */ func MapInt8ListToStringArrOption(m StringArrOption, f func([]string) Int8List) Int8ListOption {  if m.IsDefined() { return Int8ListOpt(f(*m.value)) } else { return NoneInt8ListOption }  }
/* StringArrOption: []string->Int16List */ func MapInt16ListToStringArrOption(m StringArrOption, f func([]string) Int16List) Int16ListOption {  if m.IsDefined() { return Int16ListOpt(f(*m.value)) } else { return NoneInt16ListOption }  }
/* StringArrOption: []string->Int32List */ func MapInt32ListToStringArrOption(m StringArrOption, f func([]string) Int32List) Int32ListOption {  if m.IsDefined() { return Int32ListOpt(f(*m.value)) } else { return NoneInt32ListOption }  }
/* StringArrOption: []string->Int64List */ func MapInt64ListToStringArrOption(m StringArrOption, f func([]string) Int64List) Int64ListOption {  if m.IsDefined() { return Int64ListOpt(f(*m.value)) } else { return NoneInt64ListOption }  }
/* StringArrOption: []string->UintList */ func MapUintListToStringArrOption(m StringArrOption, f func([]string) UintList) UintListOption {  if m.IsDefined() { return UintListOpt(f(*m.value)) } else { return NoneUintListOption }  }
/* StringArrOption: []string->Uint8List */ func MapUint8ListToStringArrOption(m StringArrOption, f func([]string) Uint8List) Uint8ListOption {  if m.IsDefined() { return Uint8ListOpt(f(*m.value)) } else { return NoneUint8ListOption }  }
/* StringArrOption: []string->Uint16List */ func MapUint16ListToStringArrOption(m StringArrOption, f func([]string) Uint16List) Uint16ListOption {  if m.IsDefined() { return Uint16ListOpt(f(*m.value)) } else { return NoneUint16ListOption }  }
/* StringArrOption: []string->Uint32List */ func MapUint32ListToStringArrOption(m StringArrOption, f func([]string) Uint32List) Uint32ListOption {  if m.IsDefined() { return Uint32ListOpt(f(*m.value)) } else { return NoneUint32ListOption }  }
/* StringArrOption: []string->Uint64List */ func MapUint64ListToStringArrOption(m StringArrOption, f func([]string) Uint64List) Uint64ListOption {  if m.IsDefined() { return Uint64ListOpt(f(*m.value)) } else { return NoneUint64ListOption }  }
/* StringArrOption: []string->UintptrList */ func MapUintptrListToStringArrOption(m StringArrOption, f func([]string) UintptrList) UintptrListOption {  if m.IsDefined() { return UintptrListOpt(f(*m.value)) } else { return NoneUintptrListOption }  }
/* StringArrOption: []string->ByteList */ func MapByteListToStringArrOption(m StringArrOption, f func([]string) ByteList) ByteListOption {  if m.IsDefined() { return ByteListOpt(f(*m.value)) } else { return NoneByteListOption }  }
/* StringArrOption: []string->RuneList */ func MapRuneListToStringArrOption(m StringArrOption, f func([]string) RuneList) RuneListOption {  if m.IsDefined() { return RuneListOpt(f(*m.value)) } else { return NoneRuneListOption }  }
/* StringArrOption: []string->Float32List */ func MapFloat32ListToStringArrOption(m StringArrOption, f func([]string) Float32List) Float32ListOption {  if m.IsDefined() { return Float32ListOpt(f(*m.value)) } else { return NoneFloat32ListOption }  }
/* StringArrOption: []string->Float64List */ func MapFloat64ListToStringArrOption(m StringArrOption, f func([]string) Float64List) Float64ListOption {  if m.IsDefined() { return Float64ListOpt(f(*m.value)) } else { return NoneFloat64ListOption }  }
/* StringArrOption: []string->Complex64List */ func MapComplex64ListToStringArrOption(m StringArrOption, f func([]string) Complex64List) Complex64ListOption {  if m.IsDefined() { return Complex64ListOpt(f(*m.value)) } else { return NoneComplex64ListOption }  }
/* StringArrOption: []string->Complex128List */ func MapComplex128ListToStringArrOption(m StringArrOption, f func([]string) Complex128List) Complex128ListOption {  if m.IsDefined() { return Complex128ListOpt(f(*m.value)) } else { return NoneComplex128ListOption }  }
/* StringArrOption: []string->AnyList */ func MapAnyListToStringArrOption(m StringArrOption, f func([]string) AnyList) AnyListOption {  if m.IsDefined() { return AnyListOpt(f(*m.value)) } else { return NoneAnyListOption }  }
/* IntArrOption: []int->bool */ func MapBoolToIntArrOption(m IntArrOption, f func([]int) bool) BoolOption {  if m.IsDefined() { return Bool(f(*m.value)) } else { return NoneBoolOption }  }
/* IntArrOption: []int->string */ func MapStringToIntArrOption(m IntArrOption, f func([]int) string) StringOption {  if m.IsDefined() { return String(f(*m.value)) } else { return NoneStringOption }  }
/* IntArrOption: []int->int */ func MapIntToIntArrOption(m IntArrOption, f func([]int) int) IntOption {  if m.IsDefined() { return Int(f(*m.value)) } else { return NoneIntOption }  }
/* IntArrOption: []int->int8 */ func MapInt8ToIntArrOption(m IntArrOption, f func([]int) int8) Int8Option {  if m.IsDefined() { return Int8(f(*m.value)) } else { return NoneInt8Option }  }
/* IntArrOption: []int->int16 */ func MapInt16ToIntArrOption(m IntArrOption, f func([]int) int16) Int16Option {  if m.IsDefined() { return Int16(f(*m.value)) } else { return NoneInt16Option }  }
/* IntArrOption: []int->int32 */ func MapInt32ToIntArrOption(m IntArrOption, f func([]int) int32) Int32Option {  if m.IsDefined() { return Int32(f(*m.value)) } else { return NoneInt32Option }  }
/* IntArrOption: []int->int64 */ func MapInt64ToIntArrOption(m IntArrOption, f func([]int) int64) Int64Option {  if m.IsDefined() { return Int64(f(*m.value)) } else { return NoneInt64Option }  }
/* IntArrOption: []int->uint */ func MapUintToIntArrOption(m IntArrOption, f func([]int) uint) UintOption {  if m.IsDefined() { return Uint(f(*m.value)) } else { return NoneUintOption }  }
/* IntArrOption: []int->uint8 */ func MapUint8ToIntArrOption(m IntArrOption, f func([]int) uint8) Uint8Option {  if m.IsDefined() { return Uint8(f(*m.value)) } else { return NoneUint8Option }  }
/* IntArrOption: []int->uint16 */ func MapUint16ToIntArrOption(m IntArrOption, f func([]int) uint16) Uint16Option {  if m.IsDefined() { return Uint16(f(*m.value)) } else { return NoneUint16Option }  }
/* IntArrOption: []int->uint32 */ func MapUint32ToIntArrOption(m IntArrOption, f func([]int) uint32) Uint32Option {  if m.IsDefined() { return Uint32(f(*m.value)) } else { return NoneUint32Option }  }
/* IntArrOption: []int->uint64 */ func MapUint64ToIntArrOption(m IntArrOption, f func([]int) uint64) Uint64Option {  if m.IsDefined() { return Uint64(f(*m.value)) } else { return NoneUint64Option }  }
/* IntArrOption: []int->uintptr */ func MapUintptrToIntArrOption(m IntArrOption, f func([]int) uintptr) UintptrOption {  if m.IsDefined() { return Uintptr(f(*m.value)) } else { return NoneUintptrOption }  }
/* IntArrOption: []int->byte */ func MapByteToIntArrOption(m IntArrOption, f func([]int) byte) ByteOption {  if m.IsDefined() { return Byte(f(*m.value)) } else { return NoneByteOption }  }
/* IntArrOption: []int->rune */ func MapRuneToIntArrOption(m IntArrOption, f func([]int) rune) RuneOption {  if m.IsDefined() { return Rune(f(*m.value)) } else { return NoneRuneOption }  }
/* IntArrOption: []int->float32 */ func MapFloat32ToIntArrOption(m IntArrOption, f func([]int) float32) Float32Option {  if m.IsDefined() { return Float32(f(*m.value)) } else { return NoneFloat32Option }  }
/* IntArrOption: []int->float64 */ func MapFloat64ToIntArrOption(m IntArrOption, f func([]int) float64) Float64Option {  if m.IsDefined() { return Float64(f(*m.value)) } else { return NoneFloat64Option }  }
/* IntArrOption: []int->complex64 */ func MapComplex64ToIntArrOption(m IntArrOption, f func([]int) complex64) Complex64Option {  if m.IsDefined() { return Complex64(f(*m.value)) } else { return NoneComplex64Option }  }
/* IntArrOption: []int->complex128 */ func MapComplex128ToIntArrOption(m IntArrOption, f func([]int) complex128) Complex128Option {  if m.IsDefined() { return Complex128(f(*m.value)) } else { return NoneComplex128Option }  }
/* IntArrOption: []int->Any */ func MapAnyToIntArrOption(m IntArrOption, f func([]int) Any) AnyOption {  if m.IsDefined() { return AnyOpt(f(*m.value)) } else { return NoneAnyOption }  }
/* IntArrOption: []int->BoolOption */ func MapBoolOptionToIntArrOption(m IntArrOption, f func([]int) BoolOption) BoolOptionOption {  if m.IsDefined() { return BoolBool(f(*m.value)) } else { return NoneBoolOptionOption }  }
/* IntArrOption: []int->StringOption */ func MapStringOptionToIntArrOption(m IntArrOption, f func([]int) StringOption) StringOptionOption {  if m.IsDefined() { return StringString(f(*m.value)) } else { return NoneStringOptionOption }  }
/* IntArrOption: []int->IntOption */ func MapIntOptionToIntArrOption(m IntArrOption, f func([]int) IntOption) IntOptionOption {  if m.IsDefined() { return IntInt(f(*m.value)) } else { return NoneIntOptionOption }  }
/* IntArrOption: []int->Int8Option */ func MapInt8OptionToIntArrOption(m IntArrOption, f func([]int) Int8Option) Int8OptionOption {  if m.IsDefined() { return Int8Int8(f(*m.value)) } else { return NoneInt8OptionOption }  }
/* IntArrOption: []int->Int16Option */ func MapInt16OptionToIntArrOption(m IntArrOption, f func([]int) Int16Option) Int16OptionOption {  if m.IsDefined() { return Int16Int16(f(*m.value)) } else { return NoneInt16OptionOption }  }
/* IntArrOption: []int->Int32Option */ func MapInt32OptionToIntArrOption(m IntArrOption, f func([]int) Int32Option) Int32OptionOption {  if m.IsDefined() { return Int32Int32(f(*m.value)) } else { return NoneInt32OptionOption }  }
/* IntArrOption: []int->Int64Option */ func MapInt64OptionToIntArrOption(m IntArrOption, f func([]int) Int64Option) Int64OptionOption {  if m.IsDefined() { return Int64Int64(f(*m.value)) } else { return NoneInt64OptionOption }  }
/* IntArrOption: []int->UintOption */ func MapUintOptionToIntArrOption(m IntArrOption, f func([]int) UintOption) UintOptionOption {  if m.IsDefined() { return UintUint(f(*m.value)) } else { return NoneUintOptionOption }  }
/* IntArrOption: []int->Uint8Option */ func MapUint8OptionToIntArrOption(m IntArrOption, f func([]int) Uint8Option) Uint8OptionOption {  if m.IsDefined() { return Uint8Uint8(f(*m.value)) } else { return NoneUint8OptionOption }  }
/* IntArrOption: []int->Uint16Option */ func MapUint16OptionToIntArrOption(m IntArrOption, f func([]int) Uint16Option) Uint16OptionOption {  if m.IsDefined() { return Uint16Uint16(f(*m.value)) } else { return NoneUint16OptionOption }  }
/* IntArrOption: []int->Uint32Option */ func MapUint32OptionToIntArrOption(m IntArrOption, f func([]int) Uint32Option) Uint32OptionOption {  if m.IsDefined() { return Uint32Uint32(f(*m.value)) } else { return NoneUint32OptionOption }  }
/* IntArrOption: []int->Uint64Option */ func MapUint64OptionToIntArrOption(m IntArrOption, f func([]int) Uint64Option) Uint64OptionOption {  if m.IsDefined() { return Uint64Uint64(f(*m.value)) } else { return NoneUint64OptionOption }  }
/* IntArrOption: []int->UintptrOption */ func MapUintptrOptionToIntArrOption(m IntArrOption, f func([]int) UintptrOption) UintptrOptionOption {  if m.IsDefined() { return UintptrUintptr(f(*m.value)) } else { return NoneUintptrOptionOption }  }
/* IntArrOption: []int->ByteOption */ func MapByteOptionToIntArrOption(m IntArrOption, f func([]int) ByteOption) ByteOptionOption {  if m.IsDefined() { return ByteByte(f(*m.value)) } else { return NoneByteOptionOption }  }
/* IntArrOption: []int->RuneOption */ func MapRuneOptionToIntArrOption(m IntArrOption, f func([]int) RuneOption) RuneOptionOption {  if m.IsDefined() { return RuneRune(f(*m.value)) } else { return NoneRuneOptionOption }  }
/* IntArrOption: []int->Float32Option */ func MapFloat32OptionToIntArrOption(m IntArrOption, f func([]int) Float32Option) Float32OptionOption {  if m.IsDefined() { return Float32Float32(f(*m.value)) } else { return NoneFloat32OptionOption }  }
/* IntArrOption: []int->Float64Option */ func MapFloat64OptionToIntArrOption(m IntArrOption, f func([]int) Float64Option) Float64OptionOption {  if m.IsDefined() { return Float64Float64(f(*m.value)) } else { return NoneFloat64OptionOption }  }
/* IntArrOption: []int->Complex64Option */ func MapComplex64OptionToIntArrOption(m IntArrOption, f func([]int) Complex64Option) Complex64OptionOption {  if m.IsDefined() { return Complex64Complex64(f(*m.value)) } else { return NoneComplex64OptionOption }  }
/* IntArrOption: []int->Complex128Option */ func MapComplex128OptionToIntArrOption(m IntArrOption, f func([]int) Complex128Option) Complex128OptionOption {  if m.IsDefined() { return Complex128Complex128(f(*m.value)) } else { return NoneComplex128OptionOption }  }
/* IntArrOption: []int->AnyOption */ func MapAnyOptionToIntArrOption(m IntArrOption, f func([]int) AnyOption) AnyOptionOption {  if m.IsDefined() { return AnyOptAny(f(*m.value)) } else { return NoneAnyOptionOption }  }
/* IntArrOption: []int->[]bool */ func MapBoolArrToIntArrOption(m IntArrOption, f func([]int) []bool) BoolArrOption {  if m.IsDefined() { return BoolArrOpt(f(*m.value)) } else { return NoneBoolArrOption }  }
/* IntArrOption: []int->[]string */ func MapStringArrToIntArrOption(m IntArrOption, f func([]int) []string) StringArrOption {  if m.IsDefined() { return StringArrOpt(f(*m.value)) } else { return NoneStringArrOption }  }
/* IntArrOption: []int->[]int */ func MapIntArrToIntArrOption(m IntArrOption, f func([]int) []int) IntArrOption {  if m.IsDefined() { return IntArrOpt(f(*m.value)) } else { return NoneIntArrOption }  }
/* IntArrOption: []int->[]int8 */ func MapInt8ArrToIntArrOption(m IntArrOption, f func([]int) []int8) Int8ArrOption {  if m.IsDefined() { return Int8ArrOpt(f(*m.value)) } else { return NoneInt8ArrOption }  }
/* IntArrOption: []int->[]int16 */ func MapInt16ArrToIntArrOption(m IntArrOption, f func([]int) []int16) Int16ArrOption {  if m.IsDefined() { return Int16ArrOpt(f(*m.value)) } else { return NoneInt16ArrOption }  }
/* IntArrOption: []int->[]int32 */ func MapInt32ArrToIntArrOption(m IntArrOption, f func([]int) []int32) Int32ArrOption {  if m.IsDefined() { return Int32ArrOpt(f(*m.value)) } else { return NoneInt32ArrOption }  }
/* IntArrOption: []int->[]int64 */ func MapInt64ArrToIntArrOption(m IntArrOption, f func([]int) []int64) Int64ArrOption {  if m.IsDefined() { return Int64ArrOpt(f(*m.value)) } else { return NoneInt64ArrOption }  }
/* IntArrOption: []int->[]uint */ func MapUintArrToIntArrOption(m IntArrOption, f func([]int) []uint) UintArrOption {  if m.IsDefined() { return UintArrOpt(f(*m.value)) } else { return NoneUintArrOption }  }
/* IntArrOption: []int->[]uint8 */ func MapUint8ArrToIntArrOption(m IntArrOption, f func([]int) []uint8) Uint8ArrOption {  if m.IsDefined() { return Uint8ArrOpt(f(*m.value)) } else { return NoneUint8ArrOption }  }
/* IntArrOption: []int->[]uint16 */ func MapUint16ArrToIntArrOption(m IntArrOption, f func([]int) []uint16) Uint16ArrOption {  if m.IsDefined() { return Uint16ArrOpt(f(*m.value)) } else { return NoneUint16ArrOption }  }
/* IntArrOption: []int->[]uint32 */ func MapUint32ArrToIntArrOption(m IntArrOption, f func([]int) []uint32) Uint32ArrOption {  if m.IsDefined() { return Uint32ArrOpt(f(*m.value)) } else { return NoneUint32ArrOption }  }
/* IntArrOption: []int->[]uint64 */ func MapUint64ArrToIntArrOption(m IntArrOption, f func([]int) []uint64) Uint64ArrOption {  if m.IsDefined() { return Uint64ArrOpt(f(*m.value)) } else { return NoneUint64ArrOption }  }
/* IntArrOption: []int->[]uintptr */ func MapUintptrArrToIntArrOption(m IntArrOption, f func([]int) []uintptr) UintptrArrOption {  if m.IsDefined() { return UintptrArrOpt(f(*m.value)) } else { return NoneUintptrArrOption }  }
/* IntArrOption: []int->[]byte */ func MapByteArrToIntArrOption(m IntArrOption, f func([]int) []byte) ByteArrOption {  if m.IsDefined() { return ByteArrOpt(f(*m.value)) } else { return NoneByteArrOption }  }
/* IntArrOption: []int->[]rune */ func MapRuneArrToIntArrOption(m IntArrOption, f func([]int) []rune) RuneArrOption {  if m.IsDefined() { return RuneArrOpt(f(*m.value)) } else { return NoneRuneArrOption }  }
/* IntArrOption: []int->[]float32 */ func MapFloat32ArrToIntArrOption(m IntArrOption, f func([]int) []float32) Float32ArrOption {  if m.IsDefined() { return Float32ArrOpt(f(*m.value)) } else { return NoneFloat32ArrOption }  }
/* IntArrOption: []int->[]float64 */ func MapFloat64ArrToIntArrOption(m IntArrOption, f func([]int) []float64) Float64ArrOption {  if m.IsDefined() { return Float64ArrOpt(f(*m.value)) } else { return NoneFloat64ArrOption }  }
/* IntArrOption: []int->[]complex64 */ func MapComplex64ArrToIntArrOption(m IntArrOption, f func([]int) []complex64) Complex64ArrOption {  if m.IsDefined() { return Complex64ArrOpt(f(*m.value)) } else { return NoneComplex64ArrOption }  }
/* IntArrOption: []int->[]complex128 */ func MapComplex128ArrToIntArrOption(m IntArrOption, f func([]int) []complex128) Complex128ArrOption {  if m.IsDefined() { return Complex128ArrOpt(f(*m.value)) } else { return NoneComplex128ArrOption }  }
/* IntArrOption: []int->[]Any */ func MapAnyArrToIntArrOption(m IntArrOption, f func([]int) []Any) AnyArrOption {  if m.IsDefined() { return AnyArrOpt(f(*m.value)) } else { return NoneAnyArrOption }  }
/* IntArrOption: []int->BoolList */ func MapBoolListToIntArrOption(m IntArrOption, f func([]int) BoolList) BoolListOption {  if m.IsDefined() { return BoolListOpt(f(*m.value)) } else { return NoneBoolListOption }  }
/* IntArrOption: []int->StringList */ func MapStringListToIntArrOption(m IntArrOption, f func([]int) StringList) StringListOption {  if m.IsDefined() { return StringListOpt(f(*m.value)) } else { return NoneStringListOption }  }
/* IntArrOption: []int->IntList */ func MapIntListToIntArrOption(m IntArrOption, f func([]int) IntList) IntListOption {  if m.IsDefined() { return IntListOpt(f(*m.value)) } else { return NoneIntListOption }  }
/* IntArrOption: []int->Int8List */ func MapInt8ListToIntArrOption(m IntArrOption, f func([]int) Int8List) Int8ListOption {  if m.IsDefined() { return Int8ListOpt(f(*m.value)) } else { return NoneInt8ListOption }  }
/* IntArrOption: []int->Int16List */ func MapInt16ListToIntArrOption(m IntArrOption, f func([]int) Int16List) Int16ListOption {  if m.IsDefined() { return Int16ListOpt(f(*m.value)) } else { return NoneInt16ListOption }  }
/* IntArrOption: []int->Int32List */ func MapInt32ListToIntArrOption(m IntArrOption, f func([]int) Int32List) Int32ListOption {  if m.IsDefined() { return Int32ListOpt(f(*m.value)) } else { return NoneInt32ListOption }  }
/* IntArrOption: []int->Int64List */ func MapInt64ListToIntArrOption(m IntArrOption, f func([]int) Int64List) Int64ListOption {  if m.IsDefined() { return Int64ListOpt(f(*m.value)) } else { return NoneInt64ListOption }  }
/* IntArrOption: []int->UintList */ func MapUintListToIntArrOption(m IntArrOption, f func([]int) UintList) UintListOption {  if m.IsDefined() { return UintListOpt(f(*m.value)) } else { return NoneUintListOption }  }
/* IntArrOption: []int->Uint8List */ func MapUint8ListToIntArrOption(m IntArrOption, f func([]int) Uint8List) Uint8ListOption {  if m.IsDefined() { return Uint8ListOpt(f(*m.value)) } else { return NoneUint8ListOption }  }
/* IntArrOption: []int->Uint16List */ func MapUint16ListToIntArrOption(m IntArrOption, f func([]int) Uint16List) Uint16ListOption {  if m.IsDefined() { return Uint16ListOpt(f(*m.value)) } else { return NoneUint16ListOption }  }
/* IntArrOption: []int->Uint32List */ func MapUint32ListToIntArrOption(m IntArrOption, f func([]int) Uint32List) Uint32ListOption {  if m.IsDefined() { return Uint32ListOpt(f(*m.value)) } else { return NoneUint32ListOption }  }
/* IntArrOption: []int->Uint64List */ func MapUint64ListToIntArrOption(m IntArrOption, f func([]int) Uint64List) Uint64ListOption {  if m.IsDefined() { return Uint64ListOpt(f(*m.value)) } else { return NoneUint64ListOption }  }
/* IntArrOption: []int->UintptrList */ func MapUintptrListToIntArrOption(m IntArrOption, f func([]int) UintptrList) UintptrListOption {  if m.IsDefined() { return UintptrListOpt(f(*m.value)) } else { return NoneUintptrListOption }  }
/* IntArrOption: []int->ByteList */ func MapByteListToIntArrOption(m IntArrOption, f func([]int) ByteList) ByteListOption {  if m.IsDefined() { return ByteListOpt(f(*m.value)) } else { return NoneByteListOption }  }
/* IntArrOption: []int->RuneList */ func MapRuneListToIntArrOption(m IntArrOption, f func([]int) RuneList) RuneListOption {  if m.IsDefined() { return RuneListOpt(f(*m.value)) } else { return NoneRuneListOption }  }
/* IntArrOption: []int->Float32List */ func MapFloat32ListToIntArrOption(m IntArrOption, f func([]int) Float32List) Float32ListOption {  if m.IsDefined() { return Float32ListOpt(f(*m.value)) } else { return NoneFloat32ListOption }  }
/* IntArrOption: []int->Float64List */ func MapFloat64ListToIntArrOption(m IntArrOption, f func([]int) Float64List) Float64ListOption {  if m.IsDefined() { return Float64ListOpt(f(*m.value)) } else { return NoneFloat64ListOption }  }
/* IntArrOption: []int->Complex64List */ func MapComplex64ListToIntArrOption(m IntArrOption, f func([]int) Complex64List) Complex64ListOption {  if m.IsDefined() { return Complex64ListOpt(f(*m.value)) } else { return NoneComplex64ListOption }  }
/* IntArrOption: []int->Complex128List */ func MapComplex128ListToIntArrOption(m IntArrOption, f func([]int) Complex128List) Complex128ListOption {  if m.IsDefined() { return Complex128ListOpt(f(*m.value)) } else { return NoneComplex128ListOption }  }
/* IntArrOption: []int->AnyList */ func MapAnyListToIntArrOption(m IntArrOption, f func([]int) AnyList) AnyListOption {  if m.IsDefined() { return AnyListOpt(f(*m.value)) } else { return NoneAnyListOption }  }
/* Int8ArrOption: []int8->bool */ func MapBoolToInt8ArrOption(m Int8ArrOption, f func([]int8) bool) BoolOption {  if m.IsDefined() { return Bool(f(*m.value)) } else { return NoneBoolOption }  }
/* Int8ArrOption: []int8->string */ func MapStringToInt8ArrOption(m Int8ArrOption, f func([]int8) string) StringOption {  if m.IsDefined() { return String(f(*m.value)) } else { return NoneStringOption }  }
/* Int8ArrOption: []int8->int */ func MapIntToInt8ArrOption(m Int8ArrOption, f func([]int8) int) IntOption {  if m.IsDefined() { return Int(f(*m.value)) } else { return NoneIntOption }  }
/* Int8ArrOption: []int8->int8 */ func MapInt8ToInt8ArrOption(m Int8ArrOption, f func([]int8) int8) Int8Option {  if m.IsDefined() { return Int8(f(*m.value)) } else { return NoneInt8Option }  }
/* Int8ArrOption: []int8->int16 */ func MapInt16ToInt8ArrOption(m Int8ArrOption, f func([]int8) int16) Int16Option {  if m.IsDefined() { return Int16(f(*m.value)) } else { return NoneInt16Option }  }
/* Int8ArrOption: []int8->int32 */ func MapInt32ToInt8ArrOption(m Int8ArrOption, f func([]int8) int32) Int32Option {  if m.IsDefined() { return Int32(f(*m.value)) } else { return NoneInt32Option }  }
/* Int8ArrOption: []int8->int64 */ func MapInt64ToInt8ArrOption(m Int8ArrOption, f func([]int8) int64) Int64Option {  if m.IsDefined() { return Int64(f(*m.value)) } else { return NoneInt64Option }  }
/* Int8ArrOption: []int8->uint */ func MapUintToInt8ArrOption(m Int8ArrOption, f func([]int8) uint) UintOption {  if m.IsDefined() { return Uint(f(*m.value)) } else { return NoneUintOption }  }
/* Int8ArrOption: []int8->uint8 */ func MapUint8ToInt8ArrOption(m Int8ArrOption, f func([]int8) uint8) Uint8Option {  if m.IsDefined() { return Uint8(f(*m.value)) } else { return NoneUint8Option }  }
/* Int8ArrOption: []int8->uint16 */ func MapUint16ToInt8ArrOption(m Int8ArrOption, f func([]int8) uint16) Uint16Option {  if m.IsDefined() { return Uint16(f(*m.value)) } else { return NoneUint16Option }  }
/* Int8ArrOption: []int8->uint32 */ func MapUint32ToInt8ArrOption(m Int8ArrOption, f func([]int8) uint32) Uint32Option {  if m.IsDefined() { return Uint32(f(*m.value)) } else { return NoneUint32Option }  }
/* Int8ArrOption: []int8->uint64 */ func MapUint64ToInt8ArrOption(m Int8ArrOption, f func([]int8) uint64) Uint64Option {  if m.IsDefined() { return Uint64(f(*m.value)) } else { return NoneUint64Option }  }
/* Int8ArrOption: []int8->uintptr */ func MapUintptrToInt8ArrOption(m Int8ArrOption, f func([]int8) uintptr) UintptrOption {  if m.IsDefined() { return Uintptr(f(*m.value)) } else { return NoneUintptrOption }  }
/* Int8ArrOption: []int8->byte */ func MapByteToInt8ArrOption(m Int8ArrOption, f func([]int8) byte) ByteOption {  if m.IsDefined() { return Byte(f(*m.value)) } else { return NoneByteOption }  }
/* Int8ArrOption: []int8->rune */ func MapRuneToInt8ArrOption(m Int8ArrOption, f func([]int8) rune) RuneOption {  if m.IsDefined() { return Rune(f(*m.value)) } else { return NoneRuneOption }  }
/* Int8ArrOption: []int8->float32 */ func MapFloat32ToInt8ArrOption(m Int8ArrOption, f func([]int8) float32) Float32Option {  if m.IsDefined() { return Float32(f(*m.value)) } else { return NoneFloat32Option }  }
/* Int8ArrOption: []int8->float64 */ func MapFloat64ToInt8ArrOption(m Int8ArrOption, f func([]int8) float64) Float64Option {  if m.IsDefined() { return Float64(f(*m.value)) } else { return NoneFloat64Option }  }
/* Int8ArrOption: []int8->complex64 */ func MapComplex64ToInt8ArrOption(m Int8ArrOption, f func([]int8) complex64) Complex64Option {  if m.IsDefined() { return Complex64(f(*m.value)) } else { return NoneComplex64Option }  }
/* Int8ArrOption: []int8->complex128 */ func MapComplex128ToInt8ArrOption(m Int8ArrOption, f func([]int8) complex128) Complex128Option {  if m.IsDefined() { return Complex128(f(*m.value)) } else { return NoneComplex128Option }  }
/* Int8ArrOption: []int8->Any */ func MapAnyToInt8ArrOption(m Int8ArrOption, f func([]int8) Any) AnyOption {  if m.IsDefined() { return AnyOpt(f(*m.value)) } else { return NoneAnyOption }  }
/* Int8ArrOption: []int8->BoolOption */ func MapBoolOptionToInt8ArrOption(m Int8ArrOption, f func([]int8) BoolOption) BoolOptionOption {  if m.IsDefined() { return BoolBool(f(*m.value)) } else { return NoneBoolOptionOption }  }
/* Int8ArrOption: []int8->StringOption */ func MapStringOptionToInt8ArrOption(m Int8ArrOption, f func([]int8) StringOption) StringOptionOption {  if m.IsDefined() { return StringString(f(*m.value)) } else { return NoneStringOptionOption }  }
/* Int8ArrOption: []int8->IntOption */ func MapIntOptionToInt8ArrOption(m Int8ArrOption, f func([]int8) IntOption) IntOptionOption {  if m.IsDefined() { return IntInt(f(*m.value)) } else { return NoneIntOptionOption }  }
/* Int8ArrOption: []int8->Int8Option */ func MapInt8OptionToInt8ArrOption(m Int8ArrOption, f func([]int8) Int8Option) Int8OptionOption {  if m.IsDefined() { return Int8Int8(f(*m.value)) } else { return NoneInt8OptionOption }  }
/* Int8ArrOption: []int8->Int16Option */ func MapInt16OptionToInt8ArrOption(m Int8ArrOption, f func([]int8) Int16Option) Int16OptionOption {  if m.IsDefined() { return Int16Int16(f(*m.value)) } else { return NoneInt16OptionOption }  }
/* Int8ArrOption: []int8->Int32Option */ func MapInt32OptionToInt8ArrOption(m Int8ArrOption, f func([]int8) Int32Option) Int32OptionOption {  if m.IsDefined() { return Int32Int32(f(*m.value)) } else { return NoneInt32OptionOption }  }
/* Int8ArrOption: []int8->Int64Option */ func MapInt64OptionToInt8ArrOption(m Int8ArrOption, f func([]int8) Int64Option) Int64OptionOption {  if m.IsDefined() { return Int64Int64(f(*m.value)) } else { return NoneInt64OptionOption }  }
/* Int8ArrOption: []int8->UintOption */ func MapUintOptionToInt8ArrOption(m Int8ArrOption, f func([]int8) UintOption) UintOptionOption {  if m.IsDefined() { return UintUint(f(*m.value)) } else { return NoneUintOptionOption }  }
/* Int8ArrOption: []int8->Uint8Option */ func MapUint8OptionToInt8ArrOption(m Int8ArrOption, f func([]int8) Uint8Option) Uint8OptionOption {  if m.IsDefined() { return Uint8Uint8(f(*m.value)) } else { return NoneUint8OptionOption }  }
/* Int8ArrOption: []int8->Uint16Option */ func MapUint16OptionToInt8ArrOption(m Int8ArrOption, f func([]int8) Uint16Option) Uint16OptionOption {  if m.IsDefined() { return Uint16Uint16(f(*m.value)) } else { return NoneUint16OptionOption }  }
/* Int8ArrOption: []int8->Uint32Option */ func MapUint32OptionToInt8ArrOption(m Int8ArrOption, f func([]int8) Uint32Option) Uint32OptionOption {  if m.IsDefined() { return Uint32Uint32(f(*m.value)) } else { return NoneUint32OptionOption }  }
/* Int8ArrOption: []int8->Uint64Option */ func MapUint64OptionToInt8ArrOption(m Int8ArrOption, f func([]int8) Uint64Option) Uint64OptionOption {  if m.IsDefined() { return Uint64Uint64(f(*m.value)) } else { return NoneUint64OptionOption }  }
/* Int8ArrOption: []int8->UintptrOption */ func MapUintptrOptionToInt8ArrOption(m Int8ArrOption, f func([]int8) UintptrOption) UintptrOptionOption {  if m.IsDefined() { return UintptrUintptr(f(*m.value)) } else { return NoneUintptrOptionOption }  }
/* Int8ArrOption: []int8->ByteOption */ func MapByteOptionToInt8ArrOption(m Int8ArrOption, f func([]int8) ByteOption) ByteOptionOption {  if m.IsDefined() { return ByteByte(f(*m.value)) } else { return NoneByteOptionOption }  }
/* Int8ArrOption: []int8->RuneOption */ func MapRuneOptionToInt8ArrOption(m Int8ArrOption, f func([]int8) RuneOption) RuneOptionOption {  if m.IsDefined() { return RuneRune(f(*m.value)) } else { return NoneRuneOptionOption }  }
/* Int8ArrOption: []int8->Float32Option */ func MapFloat32OptionToInt8ArrOption(m Int8ArrOption, f func([]int8) Float32Option) Float32OptionOption {  if m.IsDefined() { return Float32Float32(f(*m.value)) } else { return NoneFloat32OptionOption }  }
/* Int8ArrOption: []int8->Float64Option */ func MapFloat64OptionToInt8ArrOption(m Int8ArrOption, f func([]int8) Float64Option) Float64OptionOption {  if m.IsDefined() { return Float64Float64(f(*m.value)) } else { return NoneFloat64OptionOption }  }
/* Int8ArrOption: []int8->Complex64Option */ func MapComplex64OptionToInt8ArrOption(m Int8ArrOption, f func([]int8) Complex64Option) Complex64OptionOption {  if m.IsDefined() { return Complex64Complex64(f(*m.value)) } else { return NoneComplex64OptionOption }  }
/* Int8ArrOption: []int8->Complex128Option */ func MapComplex128OptionToInt8ArrOption(m Int8ArrOption, f func([]int8) Complex128Option) Complex128OptionOption {  if m.IsDefined() { return Complex128Complex128(f(*m.value)) } else { return NoneComplex128OptionOption }  }
/* Int8ArrOption: []int8->AnyOption */ func MapAnyOptionToInt8ArrOption(m Int8ArrOption, f func([]int8) AnyOption) AnyOptionOption {  if m.IsDefined() { return AnyOptAny(f(*m.value)) } else { return NoneAnyOptionOption }  }
/* Int8ArrOption: []int8->[]bool */ func MapBoolArrToInt8ArrOption(m Int8ArrOption, f func([]int8) []bool) BoolArrOption {  if m.IsDefined() { return BoolArrOpt(f(*m.value)) } else { return NoneBoolArrOption }  }
/* Int8ArrOption: []int8->[]string */ func MapStringArrToInt8ArrOption(m Int8ArrOption, f func([]int8) []string) StringArrOption {  if m.IsDefined() { return StringArrOpt(f(*m.value)) } else { return NoneStringArrOption }  }
/* Int8ArrOption: []int8->[]int */ func MapIntArrToInt8ArrOption(m Int8ArrOption, f func([]int8) []int) IntArrOption {  if m.IsDefined() { return IntArrOpt(f(*m.value)) } else { return NoneIntArrOption }  }
/* Int8ArrOption: []int8->[]int8 */ func MapInt8ArrToInt8ArrOption(m Int8ArrOption, f func([]int8) []int8) Int8ArrOption {  if m.IsDefined() { return Int8ArrOpt(f(*m.value)) } else { return NoneInt8ArrOption }  }
/* Int8ArrOption: []int8->[]int16 */ func MapInt16ArrToInt8ArrOption(m Int8ArrOption, f func([]int8) []int16) Int16ArrOption {  if m.IsDefined() { return Int16ArrOpt(f(*m.value)) } else { return NoneInt16ArrOption }  }
/* Int8ArrOption: []int8->[]int32 */ func MapInt32ArrToInt8ArrOption(m Int8ArrOption, f func([]int8) []int32) Int32ArrOption {  if m.IsDefined() { return Int32ArrOpt(f(*m.value)) } else { return NoneInt32ArrOption }  }
/* Int8ArrOption: []int8->[]int64 */ func MapInt64ArrToInt8ArrOption(m Int8ArrOption, f func([]int8) []int64) Int64ArrOption {  if m.IsDefined() { return Int64ArrOpt(f(*m.value)) } else { return NoneInt64ArrOption }  }
/* Int8ArrOption: []int8->[]uint */ func MapUintArrToInt8ArrOption(m Int8ArrOption, f func([]int8) []uint) UintArrOption {  if m.IsDefined() { return UintArrOpt(f(*m.value)) } else { return NoneUintArrOption }  }
/* Int8ArrOption: []int8->[]uint8 */ func MapUint8ArrToInt8ArrOption(m Int8ArrOption, f func([]int8) []uint8) Uint8ArrOption {  if m.IsDefined() { return Uint8ArrOpt(f(*m.value)) } else { return NoneUint8ArrOption }  }
/* Int8ArrOption: []int8->[]uint16 */ func MapUint16ArrToInt8ArrOption(m Int8ArrOption, f func([]int8) []uint16) Uint16ArrOption {  if m.IsDefined() { return Uint16ArrOpt(f(*m.value)) } else { return NoneUint16ArrOption }  }
/* Int8ArrOption: []int8->[]uint32 */ func MapUint32ArrToInt8ArrOption(m Int8ArrOption, f func([]int8) []uint32) Uint32ArrOption {  if m.IsDefined() { return Uint32ArrOpt(f(*m.value)) } else { return NoneUint32ArrOption }  }
/* Int8ArrOption: []int8->[]uint64 */ func MapUint64ArrToInt8ArrOption(m Int8ArrOption, f func([]int8) []uint64) Uint64ArrOption {  if m.IsDefined() { return Uint64ArrOpt(f(*m.value)) } else { return NoneUint64ArrOption }  }
/* Int8ArrOption: []int8->[]uintptr */ func MapUintptrArrToInt8ArrOption(m Int8ArrOption, f func([]int8) []uintptr) UintptrArrOption {  if m.IsDefined() { return UintptrArrOpt(f(*m.value)) } else { return NoneUintptrArrOption }  }
/* Int8ArrOption: []int8->[]byte */ func MapByteArrToInt8ArrOption(m Int8ArrOption, f func([]int8) []byte) ByteArrOption {  if m.IsDefined() { return ByteArrOpt(f(*m.value)) } else { return NoneByteArrOption }  }
/* Int8ArrOption: []int8->[]rune */ func MapRuneArrToInt8ArrOption(m Int8ArrOption, f func([]int8) []rune) RuneArrOption {  if m.IsDefined() { return RuneArrOpt(f(*m.value)) } else { return NoneRuneArrOption }  }
/* Int8ArrOption: []int8->[]float32 */ func MapFloat32ArrToInt8ArrOption(m Int8ArrOption, f func([]int8) []float32) Float32ArrOption {  if m.IsDefined() { return Float32ArrOpt(f(*m.value)) } else { return NoneFloat32ArrOption }  }
/* Int8ArrOption: []int8->[]float64 */ func MapFloat64ArrToInt8ArrOption(m Int8ArrOption, f func([]int8) []float64) Float64ArrOption {  if m.IsDefined() { return Float64ArrOpt(f(*m.value)) } else { return NoneFloat64ArrOption }  }
/* Int8ArrOption: []int8->[]complex64 */ func MapComplex64ArrToInt8ArrOption(m Int8ArrOption, f func([]int8) []complex64) Complex64ArrOption {  if m.IsDefined() { return Complex64ArrOpt(f(*m.value)) } else { return NoneComplex64ArrOption }  }
/* Int8ArrOption: []int8->[]complex128 */ func MapComplex128ArrToInt8ArrOption(m Int8ArrOption, f func([]int8) []complex128) Complex128ArrOption {  if m.IsDefined() { return Complex128ArrOpt(f(*m.value)) } else { return NoneComplex128ArrOption }  }
/* Int8ArrOption: []int8->[]Any */ func MapAnyArrToInt8ArrOption(m Int8ArrOption, f func([]int8) []Any) AnyArrOption {  if m.IsDefined() { return AnyArrOpt(f(*m.value)) } else { return NoneAnyArrOption }  }
/* Int8ArrOption: []int8->BoolList */ func MapBoolListToInt8ArrOption(m Int8ArrOption, f func([]int8) BoolList) BoolListOption {  if m.IsDefined() { return BoolListOpt(f(*m.value)) } else { return NoneBoolListOption }  }
/* Int8ArrOption: []int8->StringList */ func MapStringListToInt8ArrOption(m Int8ArrOption, f func([]int8) StringList) StringListOption {  if m.IsDefined() { return StringListOpt(f(*m.value)) } else { return NoneStringListOption }  }
/* Int8ArrOption: []int8->IntList */ func MapIntListToInt8ArrOption(m Int8ArrOption, f func([]int8) IntList) IntListOption {  if m.IsDefined() { return IntListOpt(f(*m.value)) } else { return NoneIntListOption }  }
/* Int8ArrOption: []int8->Int8List */ func MapInt8ListToInt8ArrOption(m Int8ArrOption, f func([]int8) Int8List) Int8ListOption {  if m.IsDefined() { return Int8ListOpt(f(*m.value)) } else { return NoneInt8ListOption }  }
/* Int8ArrOption: []int8->Int16List */ func MapInt16ListToInt8ArrOption(m Int8ArrOption, f func([]int8) Int16List) Int16ListOption {  if m.IsDefined() { return Int16ListOpt(f(*m.value)) } else { return NoneInt16ListOption }  }
/* Int8ArrOption: []int8->Int32List */ func MapInt32ListToInt8ArrOption(m Int8ArrOption, f func([]int8) Int32List) Int32ListOption {  if m.IsDefined() { return Int32ListOpt(f(*m.value)) } else { return NoneInt32ListOption }  }
/* Int8ArrOption: []int8->Int64List */ func MapInt64ListToInt8ArrOption(m Int8ArrOption, f func([]int8) Int64List) Int64ListOption {  if m.IsDefined() { return Int64ListOpt(f(*m.value)) } else { return NoneInt64ListOption }  }
/* Int8ArrOption: []int8->UintList */ func MapUintListToInt8ArrOption(m Int8ArrOption, f func([]int8) UintList) UintListOption {  if m.IsDefined() { return UintListOpt(f(*m.value)) } else { return NoneUintListOption }  }
/* Int8ArrOption: []int8->Uint8List */ func MapUint8ListToInt8ArrOption(m Int8ArrOption, f func([]int8) Uint8List) Uint8ListOption {  if m.IsDefined() { return Uint8ListOpt(f(*m.value)) } else { return NoneUint8ListOption }  }
/* Int8ArrOption: []int8->Uint16List */ func MapUint16ListToInt8ArrOption(m Int8ArrOption, f func([]int8) Uint16List) Uint16ListOption {  if m.IsDefined() { return Uint16ListOpt(f(*m.value)) } else { return NoneUint16ListOption }  }
/* Int8ArrOption: []int8->Uint32List */ func MapUint32ListToInt8ArrOption(m Int8ArrOption, f func([]int8) Uint32List) Uint32ListOption {  if m.IsDefined() { return Uint32ListOpt(f(*m.value)) } else { return NoneUint32ListOption }  }
/* Int8ArrOption: []int8->Uint64List */ func MapUint64ListToInt8ArrOption(m Int8ArrOption, f func([]int8) Uint64List) Uint64ListOption {  if m.IsDefined() { return Uint64ListOpt(f(*m.value)) } else { return NoneUint64ListOption }  }
/* Int8ArrOption: []int8->UintptrList */ func MapUintptrListToInt8ArrOption(m Int8ArrOption, f func([]int8) UintptrList) UintptrListOption {  if m.IsDefined() { return UintptrListOpt(f(*m.value)) } else { return NoneUintptrListOption }  }
/* Int8ArrOption: []int8->ByteList */ func MapByteListToInt8ArrOption(m Int8ArrOption, f func([]int8) ByteList) ByteListOption {  if m.IsDefined() { return ByteListOpt(f(*m.value)) } else { return NoneByteListOption }  }
/* Int8ArrOption: []int8->RuneList */ func MapRuneListToInt8ArrOption(m Int8ArrOption, f func([]int8) RuneList) RuneListOption {  if m.IsDefined() { return RuneListOpt(f(*m.value)) } else { return NoneRuneListOption }  }
/* Int8ArrOption: []int8->Float32List */ func MapFloat32ListToInt8ArrOption(m Int8ArrOption, f func([]int8) Float32List) Float32ListOption {  if m.IsDefined() { return Float32ListOpt(f(*m.value)) } else { return NoneFloat32ListOption }  }
/* Int8ArrOption: []int8->Float64List */ func MapFloat64ListToInt8ArrOption(m Int8ArrOption, f func([]int8) Float64List) Float64ListOption {  if m.IsDefined() { return Float64ListOpt(f(*m.value)) } else { return NoneFloat64ListOption }  }
/* Int8ArrOption: []int8->Complex64List */ func MapComplex64ListToInt8ArrOption(m Int8ArrOption, f func([]int8) Complex64List) Complex64ListOption {  if m.IsDefined() { return Complex64ListOpt(f(*m.value)) } else { return NoneComplex64ListOption }  }
/* Int8ArrOption: []int8->Complex128List */ func MapComplex128ListToInt8ArrOption(m Int8ArrOption, f func([]int8) Complex128List) Complex128ListOption {  if m.IsDefined() { return Complex128ListOpt(f(*m.value)) } else { return NoneComplex128ListOption }  }
/* Int8ArrOption: []int8->AnyList */ func MapAnyListToInt8ArrOption(m Int8ArrOption, f func([]int8) AnyList) AnyListOption {  if m.IsDefined() { return AnyListOpt(f(*m.value)) } else { return NoneAnyListOption }  }
/* Int16ArrOption: []int16->bool */ func MapBoolToInt16ArrOption(m Int16ArrOption, f func([]int16) bool) BoolOption {  if m.IsDefined() { return Bool(f(*m.value)) } else { return NoneBoolOption }  }
/* Int16ArrOption: []int16->string */ func MapStringToInt16ArrOption(m Int16ArrOption, f func([]int16) string) StringOption {  if m.IsDefined() { return String(f(*m.value)) } else { return NoneStringOption }  }
/* Int16ArrOption: []int16->int */ func MapIntToInt16ArrOption(m Int16ArrOption, f func([]int16) int) IntOption {  if m.IsDefined() { return Int(f(*m.value)) } else { return NoneIntOption }  }
/* Int16ArrOption: []int16->int8 */ func MapInt8ToInt16ArrOption(m Int16ArrOption, f func([]int16) int8) Int8Option {  if m.IsDefined() { return Int8(f(*m.value)) } else { return NoneInt8Option }  }
/* Int16ArrOption: []int16->int16 */ func MapInt16ToInt16ArrOption(m Int16ArrOption, f func([]int16) int16) Int16Option {  if m.IsDefined() { return Int16(f(*m.value)) } else { return NoneInt16Option }  }
/* Int16ArrOption: []int16->int32 */ func MapInt32ToInt16ArrOption(m Int16ArrOption, f func([]int16) int32) Int32Option {  if m.IsDefined() { return Int32(f(*m.value)) } else { return NoneInt32Option }  }
/* Int16ArrOption: []int16->int64 */ func MapInt64ToInt16ArrOption(m Int16ArrOption, f func([]int16) int64) Int64Option {  if m.IsDefined() { return Int64(f(*m.value)) } else { return NoneInt64Option }  }
/* Int16ArrOption: []int16->uint */ func MapUintToInt16ArrOption(m Int16ArrOption, f func([]int16) uint) UintOption {  if m.IsDefined() { return Uint(f(*m.value)) } else { return NoneUintOption }  }
/* Int16ArrOption: []int16->uint8 */ func MapUint8ToInt16ArrOption(m Int16ArrOption, f func([]int16) uint8) Uint8Option {  if m.IsDefined() { return Uint8(f(*m.value)) } else { return NoneUint8Option }  }
/* Int16ArrOption: []int16->uint16 */ func MapUint16ToInt16ArrOption(m Int16ArrOption, f func([]int16) uint16) Uint16Option {  if m.IsDefined() { return Uint16(f(*m.value)) } else { return NoneUint16Option }  }
/* Int16ArrOption: []int16->uint32 */ func MapUint32ToInt16ArrOption(m Int16ArrOption, f func([]int16) uint32) Uint32Option {  if m.IsDefined() { return Uint32(f(*m.value)) } else { return NoneUint32Option }  }
/* Int16ArrOption: []int16->uint64 */ func MapUint64ToInt16ArrOption(m Int16ArrOption, f func([]int16) uint64) Uint64Option {  if m.IsDefined() { return Uint64(f(*m.value)) } else { return NoneUint64Option }  }
/* Int16ArrOption: []int16->uintptr */ func MapUintptrToInt16ArrOption(m Int16ArrOption, f func([]int16) uintptr) UintptrOption {  if m.IsDefined() { return Uintptr(f(*m.value)) } else { return NoneUintptrOption }  }
/* Int16ArrOption: []int16->byte */ func MapByteToInt16ArrOption(m Int16ArrOption, f func([]int16) byte) ByteOption {  if m.IsDefined() { return Byte(f(*m.value)) } else { return NoneByteOption }  }
/* Int16ArrOption: []int16->rune */ func MapRuneToInt16ArrOption(m Int16ArrOption, f func([]int16) rune) RuneOption {  if m.IsDefined() { return Rune(f(*m.value)) } else { return NoneRuneOption }  }
/* Int16ArrOption: []int16->float32 */ func MapFloat32ToInt16ArrOption(m Int16ArrOption, f func([]int16) float32) Float32Option {  if m.IsDefined() { return Float32(f(*m.value)) } else { return NoneFloat32Option }  }
/* Int16ArrOption: []int16->float64 */ func MapFloat64ToInt16ArrOption(m Int16ArrOption, f func([]int16) float64) Float64Option {  if m.IsDefined() { return Float64(f(*m.value)) } else { return NoneFloat64Option }  }
/* Int16ArrOption: []int16->complex64 */ func MapComplex64ToInt16ArrOption(m Int16ArrOption, f func([]int16) complex64) Complex64Option {  if m.IsDefined() { return Complex64(f(*m.value)) } else { return NoneComplex64Option }  }
/* Int16ArrOption: []int16->complex128 */ func MapComplex128ToInt16ArrOption(m Int16ArrOption, f func([]int16) complex128) Complex128Option {  if m.IsDefined() { return Complex128(f(*m.value)) } else { return NoneComplex128Option }  }
/* Int16ArrOption: []int16->Any */ func MapAnyToInt16ArrOption(m Int16ArrOption, f func([]int16) Any) AnyOption {  if m.IsDefined() { return AnyOpt(f(*m.value)) } else { return NoneAnyOption }  }
/* Int16ArrOption: []int16->BoolOption */ func MapBoolOptionToInt16ArrOption(m Int16ArrOption, f func([]int16) BoolOption) BoolOptionOption {  if m.IsDefined() { return BoolBool(f(*m.value)) } else { return NoneBoolOptionOption }  }
/* Int16ArrOption: []int16->StringOption */ func MapStringOptionToInt16ArrOption(m Int16ArrOption, f func([]int16) StringOption) StringOptionOption {  if m.IsDefined() { return StringString(f(*m.value)) } else { return NoneStringOptionOption }  }
/* Int16ArrOption: []int16->IntOption */ func MapIntOptionToInt16ArrOption(m Int16ArrOption, f func([]int16) IntOption) IntOptionOption {  if m.IsDefined() { return IntInt(f(*m.value)) } else { return NoneIntOptionOption }  }
/* Int16ArrOption: []int16->Int8Option */ func MapInt8OptionToInt16ArrOption(m Int16ArrOption, f func([]int16) Int8Option) Int8OptionOption {  if m.IsDefined() { return Int8Int8(f(*m.value)) } else { return NoneInt8OptionOption }  }
/* Int16ArrOption: []int16->Int16Option */ func MapInt16OptionToInt16ArrOption(m Int16ArrOption, f func([]int16) Int16Option) Int16OptionOption {  if m.IsDefined() { return Int16Int16(f(*m.value)) } else { return NoneInt16OptionOption }  }
/* Int16ArrOption: []int16->Int32Option */ func MapInt32OptionToInt16ArrOption(m Int16ArrOption, f func([]int16) Int32Option) Int32OptionOption {  if m.IsDefined() { return Int32Int32(f(*m.value)) } else { return NoneInt32OptionOption }  }
/* Int16ArrOption: []int16->Int64Option */ func MapInt64OptionToInt16ArrOption(m Int16ArrOption, f func([]int16) Int64Option) Int64OptionOption {  if m.IsDefined() { return Int64Int64(f(*m.value)) } else { return NoneInt64OptionOption }  }
/* Int16ArrOption: []int16->UintOption */ func MapUintOptionToInt16ArrOption(m Int16ArrOption, f func([]int16) UintOption) UintOptionOption {  if m.IsDefined() { return UintUint(f(*m.value)) } else { return NoneUintOptionOption }  }
/* Int16ArrOption: []int16->Uint8Option */ func MapUint8OptionToInt16ArrOption(m Int16ArrOption, f func([]int16) Uint8Option) Uint8OptionOption {  if m.IsDefined() { return Uint8Uint8(f(*m.value)) } else { return NoneUint8OptionOption }  }
/* Int16ArrOption: []int16->Uint16Option */ func MapUint16OptionToInt16ArrOption(m Int16ArrOption, f func([]int16) Uint16Option) Uint16OptionOption {  if m.IsDefined() { return Uint16Uint16(f(*m.value)) } else { return NoneUint16OptionOption }  }
/* Int16ArrOption: []int16->Uint32Option */ func MapUint32OptionToInt16ArrOption(m Int16ArrOption, f func([]int16) Uint32Option) Uint32OptionOption {  if m.IsDefined() { return Uint32Uint32(f(*m.value)) } else { return NoneUint32OptionOption }  }
/* Int16ArrOption: []int16->Uint64Option */ func MapUint64OptionToInt16ArrOption(m Int16ArrOption, f func([]int16) Uint64Option) Uint64OptionOption {  if m.IsDefined() { return Uint64Uint64(f(*m.value)) } else { return NoneUint64OptionOption }  }
/* Int16ArrOption: []int16->UintptrOption */ func MapUintptrOptionToInt16ArrOption(m Int16ArrOption, f func([]int16) UintptrOption) UintptrOptionOption {  if m.IsDefined() { return UintptrUintptr(f(*m.value)) } else { return NoneUintptrOptionOption }  }
/* Int16ArrOption: []int16->ByteOption */ func MapByteOptionToInt16ArrOption(m Int16ArrOption, f func([]int16) ByteOption) ByteOptionOption {  if m.IsDefined() { return ByteByte(f(*m.value)) } else { return NoneByteOptionOption }  }
/* Int16ArrOption: []int16->RuneOption */ func MapRuneOptionToInt16ArrOption(m Int16ArrOption, f func([]int16) RuneOption) RuneOptionOption {  if m.IsDefined() { return RuneRune(f(*m.value)) } else { return NoneRuneOptionOption }  }
/* Int16ArrOption: []int16->Float32Option */ func MapFloat32OptionToInt16ArrOption(m Int16ArrOption, f func([]int16) Float32Option) Float32OptionOption {  if m.IsDefined() { return Float32Float32(f(*m.value)) } else { return NoneFloat32OptionOption }  }
/* Int16ArrOption: []int16->Float64Option */ func MapFloat64OptionToInt16ArrOption(m Int16ArrOption, f func([]int16) Float64Option) Float64OptionOption {  if m.IsDefined() { return Float64Float64(f(*m.value)) } else { return NoneFloat64OptionOption }  }
/* Int16ArrOption: []int16->Complex64Option */ func MapComplex64OptionToInt16ArrOption(m Int16ArrOption, f func([]int16) Complex64Option) Complex64OptionOption {  if m.IsDefined() { return Complex64Complex64(f(*m.value)) } else { return NoneComplex64OptionOption }  }
/* Int16ArrOption: []int16->Complex128Option */ func MapComplex128OptionToInt16ArrOption(m Int16ArrOption, f func([]int16) Complex128Option) Complex128OptionOption {  if m.IsDefined() { return Complex128Complex128(f(*m.value)) } else { return NoneComplex128OptionOption }  }
/* Int16ArrOption: []int16->AnyOption */ func MapAnyOptionToInt16ArrOption(m Int16ArrOption, f func([]int16) AnyOption) AnyOptionOption {  if m.IsDefined() { return AnyOptAny(f(*m.value)) } else { return NoneAnyOptionOption }  }
/* Int16ArrOption: []int16->[]bool */ func MapBoolArrToInt16ArrOption(m Int16ArrOption, f func([]int16) []bool) BoolArrOption {  if m.IsDefined() { return BoolArrOpt(f(*m.value)) } else { return NoneBoolArrOption }  }
/* Int16ArrOption: []int16->[]string */ func MapStringArrToInt16ArrOption(m Int16ArrOption, f func([]int16) []string) StringArrOption {  if m.IsDefined() { return StringArrOpt(f(*m.value)) } else { return NoneStringArrOption }  }
/* Int16ArrOption: []int16->[]int */ func MapIntArrToInt16ArrOption(m Int16ArrOption, f func([]int16) []int) IntArrOption {  if m.IsDefined() { return IntArrOpt(f(*m.value)) } else { return NoneIntArrOption }  }
/* Int16ArrOption: []int16->[]int8 */ func MapInt8ArrToInt16ArrOption(m Int16ArrOption, f func([]int16) []int8) Int8ArrOption {  if m.IsDefined() { return Int8ArrOpt(f(*m.value)) } else { return NoneInt8ArrOption }  }
/* Int16ArrOption: []int16->[]int16 */ func MapInt16ArrToInt16ArrOption(m Int16ArrOption, f func([]int16) []int16) Int16ArrOption {  if m.IsDefined() { return Int16ArrOpt(f(*m.value)) } else { return NoneInt16ArrOption }  }
/* Int16ArrOption: []int16->[]int32 */ func MapInt32ArrToInt16ArrOption(m Int16ArrOption, f func([]int16) []int32) Int32ArrOption {  if m.IsDefined() { return Int32ArrOpt(f(*m.value)) } else { return NoneInt32ArrOption }  }
/* Int16ArrOption: []int16->[]int64 */ func MapInt64ArrToInt16ArrOption(m Int16ArrOption, f func([]int16) []int64) Int64ArrOption {  if m.IsDefined() { return Int64ArrOpt(f(*m.value)) } else { return NoneInt64ArrOption }  }
/* Int16ArrOption: []int16->[]uint */ func MapUintArrToInt16ArrOption(m Int16ArrOption, f func([]int16) []uint) UintArrOption {  if m.IsDefined() { return UintArrOpt(f(*m.value)) } else { return NoneUintArrOption }  }
/* Int16ArrOption: []int16->[]uint8 */ func MapUint8ArrToInt16ArrOption(m Int16ArrOption, f func([]int16) []uint8) Uint8ArrOption {  if m.IsDefined() { return Uint8ArrOpt(f(*m.value)) } else { return NoneUint8ArrOption }  }
/* Int16ArrOption: []int16->[]uint16 */ func MapUint16ArrToInt16ArrOption(m Int16ArrOption, f func([]int16) []uint16) Uint16ArrOption {  if m.IsDefined() { return Uint16ArrOpt(f(*m.value)) } else { return NoneUint16ArrOption }  }
/* Int16ArrOption: []int16->[]uint32 */ func MapUint32ArrToInt16ArrOption(m Int16ArrOption, f func([]int16) []uint32) Uint32ArrOption {  if m.IsDefined() { return Uint32ArrOpt(f(*m.value)) } else { return NoneUint32ArrOption }  }
/* Int16ArrOption: []int16->[]uint64 */ func MapUint64ArrToInt16ArrOption(m Int16ArrOption, f func([]int16) []uint64) Uint64ArrOption {  if m.IsDefined() { return Uint64ArrOpt(f(*m.value)) } else { return NoneUint64ArrOption }  }
/* Int16ArrOption: []int16->[]uintptr */ func MapUintptrArrToInt16ArrOption(m Int16ArrOption, f func([]int16) []uintptr) UintptrArrOption {  if m.IsDefined() { return UintptrArrOpt(f(*m.value)) } else { return NoneUintptrArrOption }  }
/* Int16ArrOption: []int16->[]byte */ func MapByteArrToInt16ArrOption(m Int16ArrOption, f func([]int16) []byte) ByteArrOption {  if m.IsDefined() { return ByteArrOpt(f(*m.value)) } else { return NoneByteArrOption }  }
/* Int16ArrOption: []int16->[]rune */ func MapRuneArrToInt16ArrOption(m Int16ArrOption, f func([]int16) []rune) RuneArrOption {  if m.IsDefined() { return RuneArrOpt(f(*m.value)) } else { return NoneRuneArrOption }  }
/* Int16ArrOption: []int16->[]float32 */ func MapFloat32ArrToInt16ArrOption(m Int16ArrOption, f func([]int16) []float32) Float32ArrOption {  if m.IsDefined() { return Float32ArrOpt(f(*m.value)) } else { return NoneFloat32ArrOption }  }
/* Int16ArrOption: []int16->[]float64 */ func MapFloat64ArrToInt16ArrOption(m Int16ArrOption, f func([]int16) []float64) Float64ArrOption {  if m.IsDefined() { return Float64ArrOpt(f(*m.value)) } else { return NoneFloat64ArrOption }  }
/* Int16ArrOption: []int16->[]complex64 */ func MapComplex64ArrToInt16ArrOption(m Int16ArrOption, f func([]int16) []complex64) Complex64ArrOption {  if m.IsDefined() { return Complex64ArrOpt(f(*m.value)) } else { return NoneComplex64ArrOption }  }
/* Int16ArrOption: []int16->[]complex128 */ func MapComplex128ArrToInt16ArrOption(m Int16ArrOption, f func([]int16) []complex128) Complex128ArrOption {  if m.IsDefined() { return Complex128ArrOpt(f(*m.value)) } else { return NoneComplex128ArrOption }  }
/* Int16ArrOption: []int16->[]Any */ func MapAnyArrToInt16ArrOption(m Int16ArrOption, f func([]int16) []Any) AnyArrOption {  if m.IsDefined() { return AnyArrOpt(f(*m.value)) } else { return NoneAnyArrOption }  }
/* Int16ArrOption: []int16->BoolList */ func MapBoolListToInt16ArrOption(m Int16ArrOption, f func([]int16) BoolList) BoolListOption {  if m.IsDefined() { return BoolListOpt(f(*m.value)) } else { return NoneBoolListOption }  }
/* Int16ArrOption: []int16->StringList */ func MapStringListToInt16ArrOption(m Int16ArrOption, f func([]int16) StringList) StringListOption {  if m.IsDefined() { return StringListOpt(f(*m.value)) } else { return NoneStringListOption }  }
/* Int16ArrOption: []int16->IntList */ func MapIntListToInt16ArrOption(m Int16ArrOption, f func([]int16) IntList) IntListOption {  if m.IsDefined() { return IntListOpt(f(*m.value)) } else { return NoneIntListOption }  }
/* Int16ArrOption: []int16->Int8List */ func MapInt8ListToInt16ArrOption(m Int16ArrOption, f func([]int16) Int8List) Int8ListOption {  if m.IsDefined() { return Int8ListOpt(f(*m.value)) } else { return NoneInt8ListOption }  }
/* Int16ArrOption: []int16->Int16List */ func MapInt16ListToInt16ArrOption(m Int16ArrOption, f func([]int16) Int16List) Int16ListOption {  if m.IsDefined() { return Int16ListOpt(f(*m.value)) } else { return NoneInt16ListOption }  }
/* Int16ArrOption: []int16->Int32List */ func MapInt32ListToInt16ArrOption(m Int16ArrOption, f func([]int16) Int32List) Int32ListOption {  if m.IsDefined() { return Int32ListOpt(f(*m.value)) } else { return NoneInt32ListOption }  }
/* Int16ArrOption: []int16->Int64List */ func MapInt64ListToInt16ArrOption(m Int16ArrOption, f func([]int16) Int64List) Int64ListOption {  if m.IsDefined() { return Int64ListOpt(f(*m.value)) } else { return NoneInt64ListOption }  }
/* Int16ArrOption: []int16->UintList */ func MapUintListToInt16ArrOption(m Int16ArrOption, f func([]int16) UintList) UintListOption {  if m.IsDefined() { return UintListOpt(f(*m.value)) } else { return NoneUintListOption }  }
/* Int16ArrOption: []int16->Uint8List */ func MapUint8ListToInt16ArrOption(m Int16ArrOption, f func([]int16) Uint8List) Uint8ListOption {  if m.IsDefined() { return Uint8ListOpt(f(*m.value)) } else { return NoneUint8ListOption }  }
/* Int16ArrOption: []int16->Uint16List */ func MapUint16ListToInt16ArrOption(m Int16ArrOption, f func([]int16) Uint16List) Uint16ListOption {  if m.IsDefined() { return Uint16ListOpt(f(*m.value)) } else { return NoneUint16ListOption }  }
/* Int16ArrOption: []int16->Uint32List */ func MapUint32ListToInt16ArrOption(m Int16ArrOption, f func([]int16) Uint32List) Uint32ListOption {  if m.IsDefined() { return Uint32ListOpt(f(*m.value)) } else { return NoneUint32ListOption }  }
/* Int16ArrOption: []int16->Uint64List */ func MapUint64ListToInt16ArrOption(m Int16ArrOption, f func([]int16) Uint64List) Uint64ListOption {  if m.IsDefined() { return Uint64ListOpt(f(*m.value)) } else { return NoneUint64ListOption }  }
/* Int16ArrOption: []int16->UintptrList */ func MapUintptrListToInt16ArrOption(m Int16ArrOption, f func([]int16) UintptrList) UintptrListOption {  if m.IsDefined() { return UintptrListOpt(f(*m.value)) } else { return NoneUintptrListOption }  }
/* Int16ArrOption: []int16->ByteList */ func MapByteListToInt16ArrOption(m Int16ArrOption, f func([]int16) ByteList) ByteListOption {  if m.IsDefined() { return ByteListOpt(f(*m.value)) } else { return NoneByteListOption }  }
/* Int16ArrOption: []int16->RuneList */ func MapRuneListToInt16ArrOption(m Int16ArrOption, f func([]int16) RuneList) RuneListOption {  if m.IsDefined() { return RuneListOpt(f(*m.value)) } else { return NoneRuneListOption }  }
/* Int16ArrOption: []int16->Float32List */ func MapFloat32ListToInt16ArrOption(m Int16ArrOption, f func([]int16) Float32List) Float32ListOption {  if m.IsDefined() { return Float32ListOpt(f(*m.value)) } else { return NoneFloat32ListOption }  }
/* Int16ArrOption: []int16->Float64List */ func MapFloat64ListToInt16ArrOption(m Int16ArrOption, f func([]int16) Float64List) Float64ListOption {  if m.IsDefined() { return Float64ListOpt(f(*m.value)) } else { return NoneFloat64ListOption }  }
/* Int16ArrOption: []int16->Complex64List */ func MapComplex64ListToInt16ArrOption(m Int16ArrOption, f func([]int16) Complex64List) Complex64ListOption {  if m.IsDefined() { return Complex64ListOpt(f(*m.value)) } else { return NoneComplex64ListOption }  }
/* Int16ArrOption: []int16->Complex128List */ func MapComplex128ListToInt16ArrOption(m Int16ArrOption, f func([]int16) Complex128List) Complex128ListOption {  if m.IsDefined() { return Complex128ListOpt(f(*m.value)) } else { return NoneComplex128ListOption }  }
/* Int16ArrOption: []int16->AnyList */ func MapAnyListToInt16ArrOption(m Int16ArrOption, f func([]int16) AnyList) AnyListOption {  if m.IsDefined() { return AnyListOpt(f(*m.value)) } else { return NoneAnyListOption }  }
/* Int32ArrOption: []int32->bool */ func MapBoolToInt32ArrOption(m Int32ArrOption, f func([]int32) bool) BoolOption {  if m.IsDefined() { return Bool(f(*m.value)) } else { return NoneBoolOption }  }
/* Int32ArrOption: []int32->string */ func MapStringToInt32ArrOption(m Int32ArrOption, f func([]int32) string) StringOption {  if m.IsDefined() { return String(f(*m.value)) } else { return NoneStringOption }  }
/* Int32ArrOption: []int32->int */ func MapIntToInt32ArrOption(m Int32ArrOption, f func([]int32) int) IntOption {  if m.IsDefined() { return Int(f(*m.value)) } else { return NoneIntOption }  }
/* Int32ArrOption: []int32->int8 */ func MapInt8ToInt32ArrOption(m Int32ArrOption, f func([]int32) int8) Int8Option {  if m.IsDefined() { return Int8(f(*m.value)) } else { return NoneInt8Option }  }
/* Int32ArrOption: []int32->int16 */ func MapInt16ToInt32ArrOption(m Int32ArrOption, f func([]int32) int16) Int16Option {  if m.IsDefined() { return Int16(f(*m.value)) } else { return NoneInt16Option }  }
/* Int32ArrOption: []int32->int32 */ func MapInt32ToInt32ArrOption(m Int32ArrOption, f func([]int32) int32) Int32Option {  if m.IsDefined() { return Int32(f(*m.value)) } else { return NoneInt32Option }  }
/* Int32ArrOption: []int32->int64 */ func MapInt64ToInt32ArrOption(m Int32ArrOption, f func([]int32) int64) Int64Option {  if m.IsDefined() { return Int64(f(*m.value)) } else { return NoneInt64Option }  }
/* Int32ArrOption: []int32->uint */ func MapUintToInt32ArrOption(m Int32ArrOption, f func([]int32) uint) UintOption {  if m.IsDefined() { return Uint(f(*m.value)) } else { return NoneUintOption }  }
/* Int32ArrOption: []int32->uint8 */ func MapUint8ToInt32ArrOption(m Int32ArrOption, f func([]int32) uint8) Uint8Option {  if m.IsDefined() { return Uint8(f(*m.value)) } else { return NoneUint8Option }  }
/* Int32ArrOption: []int32->uint16 */ func MapUint16ToInt32ArrOption(m Int32ArrOption, f func([]int32) uint16) Uint16Option {  if m.IsDefined() { return Uint16(f(*m.value)) } else { return NoneUint16Option }  }
/* Int32ArrOption: []int32->uint32 */ func MapUint32ToInt32ArrOption(m Int32ArrOption, f func([]int32) uint32) Uint32Option {  if m.IsDefined() { return Uint32(f(*m.value)) } else { return NoneUint32Option }  }
/* Int32ArrOption: []int32->uint64 */ func MapUint64ToInt32ArrOption(m Int32ArrOption, f func([]int32) uint64) Uint64Option {  if m.IsDefined() { return Uint64(f(*m.value)) } else { return NoneUint64Option }  }
/* Int32ArrOption: []int32->uintptr */ func MapUintptrToInt32ArrOption(m Int32ArrOption, f func([]int32) uintptr) UintptrOption {  if m.IsDefined() { return Uintptr(f(*m.value)) } else { return NoneUintptrOption }  }
/* Int32ArrOption: []int32->byte */ func MapByteToInt32ArrOption(m Int32ArrOption, f func([]int32) byte) ByteOption {  if m.IsDefined() { return Byte(f(*m.value)) } else { return NoneByteOption }  }
/* Int32ArrOption: []int32->rune */ func MapRuneToInt32ArrOption(m Int32ArrOption, f func([]int32) rune) RuneOption {  if m.IsDefined() { return Rune(f(*m.value)) } else { return NoneRuneOption }  }
/* Int32ArrOption: []int32->float32 */ func MapFloat32ToInt32ArrOption(m Int32ArrOption, f func([]int32) float32) Float32Option {  if m.IsDefined() { return Float32(f(*m.value)) } else { return NoneFloat32Option }  }
/* Int32ArrOption: []int32->float64 */ func MapFloat64ToInt32ArrOption(m Int32ArrOption, f func([]int32) float64) Float64Option {  if m.IsDefined() { return Float64(f(*m.value)) } else { return NoneFloat64Option }  }
/* Int32ArrOption: []int32->complex64 */ func MapComplex64ToInt32ArrOption(m Int32ArrOption, f func([]int32) complex64) Complex64Option {  if m.IsDefined() { return Complex64(f(*m.value)) } else { return NoneComplex64Option }  }
/* Int32ArrOption: []int32->complex128 */ func MapComplex128ToInt32ArrOption(m Int32ArrOption, f func([]int32) complex128) Complex128Option {  if m.IsDefined() { return Complex128(f(*m.value)) } else { return NoneComplex128Option }  }
/* Int32ArrOption: []int32->Any */ func MapAnyToInt32ArrOption(m Int32ArrOption, f func([]int32) Any) AnyOption {  if m.IsDefined() { return AnyOpt(f(*m.value)) } else { return NoneAnyOption }  }
/* Int32ArrOption: []int32->BoolOption */ func MapBoolOptionToInt32ArrOption(m Int32ArrOption, f func([]int32) BoolOption) BoolOptionOption {  if m.IsDefined() { return BoolBool(f(*m.value)) } else { return NoneBoolOptionOption }  }
/* Int32ArrOption: []int32->StringOption */ func MapStringOptionToInt32ArrOption(m Int32ArrOption, f func([]int32) StringOption) StringOptionOption {  if m.IsDefined() { return StringString(f(*m.value)) } else { return NoneStringOptionOption }  }
/* Int32ArrOption: []int32->IntOption */ func MapIntOptionToInt32ArrOption(m Int32ArrOption, f func([]int32) IntOption) IntOptionOption {  if m.IsDefined() { return IntInt(f(*m.value)) } else { return NoneIntOptionOption }  }
/* Int32ArrOption: []int32->Int8Option */ func MapInt8OptionToInt32ArrOption(m Int32ArrOption, f func([]int32) Int8Option) Int8OptionOption {  if m.IsDefined() { return Int8Int8(f(*m.value)) } else { return NoneInt8OptionOption }  }
/* Int32ArrOption: []int32->Int16Option */ func MapInt16OptionToInt32ArrOption(m Int32ArrOption, f func([]int32) Int16Option) Int16OptionOption {  if m.IsDefined() { return Int16Int16(f(*m.value)) } else { return NoneInt16OptionOption }  }
/* Int32ArrOption: []int32->Int32Option */ func MapInt32OptionToInt32ArrOption(m Int32ArrOption, f func([]int32) Int32Option) Int32OptionOption {  if m.IsDefined() { return Int32Int32(f(*m.value)) } else { return NoneInt32OptionOption }  }
/* Int32ArrOption: []int32->Int64Option */ func MapInt64OptionToInt32ArrOption(m Int32ArrOption, f func([]int32) Int64Option) Int64OptionOption {  if m.IsDefined() { return Int64Int64(f(*m.value)) } else { return NoneInt64OptionOption }  }
/* Int32ArrOption: []int32->UintOption */ func MapUintOptionToInt32ArrOption(m Int32ArrOption, f func([]int32) UintOption) UintOptionOption {  if m.IsDefined() { return UintUint(f(*m.value)) } else { return NoneUintOptionOption }  }
/* Int32ArrOption: []int32->Uint8Option */ func MapUint8OptionToInt32ArrOption(m Int32ArrOption, f func([]int32) Uint8Option) Uint8OptionOption {  if m.IsDefined() { return Uint8Uint8(f(*m.value)) } else { return NoneUint8OptionOption }  }
/* Int32ArrOption: []int32->Uint16Option */ func MapUint16OptionToInt32ArrOption(m Int32ArrOption, f func([]int32) Uint16Option) Uint16OptionOption {  if m.IsDefined() { return Uint16Uint16(f(*m.value)) } else { return NoneUint16OptionOption }  }
/* Int32ArrOption: []int32->Uint32Option */ func MapUint32OptionToInt32ArrOption(m Int32ArrOption, f func([]int32) Uint32Option) Uint32OptionOption {  if m.IsDefined() { return Uint32Uint32(f(*m.value)) } else { return NoneUint32OptionOption }  }
/* Int32ArrOption: []int32->Uint64Option */ func MapUint64OptionToInt32ArrOption(m Int32ArrOption, f func([]int32) Uint64Option) Uint64OptionOption {  if m.IsDefined() { return Uint64Uint64(f(*m.value)) } else { return NoneUint64OptionOption }  }
/* Int32ArrOption: []int32->UintptrOption */ func MapUintptrOptionToInt32ArrOption(m Int32ArrOption, f func([]int32) UintptrOption) UintptrOptionOption {  if m.IsDefined() { return UintptrUintptr(f(*m.value)) } else { return NoneUintptrOptionOption }  }
/* Int32ArrOption: []int32->ByteOption */ func MapByteOptionToInt32ArrOption(m Int32ArrOption, f func([]int32) ByteOption) ByteOptionOption {  if m.IsDefined() { return ByteByte(f(*m.value)) } else { return NoneByteOptionOption }  }
/* Int32ArrOption: []int32->RuneOption */ func MapRuneOptionToInt32ArrOption(m Int32ArrOption, f func([]int32) RuneOption) RuneOptionOption {  if m.IsDefined() { return RuneRune(f(*m.value)) } else { return NoneRuneOptionOption }  }
/* Int32ArrOption: []int32->Float32Option */ func MapFloat32OptionToInt32ArrOption(m Int32ArrOption, f func([]int32) Float32Option) Float32OptionOption {  if m.IsDefined() { return Float32Float32(f(*m.value)) } else { return NoneFloat32OptionOption }  }
/* Int32ArrOption: []int32->Float64Option */ func MapFloat64OptionToInt32ArrOption(m Int32ArrOption, f func([]int32) Float64Option) Float64OptionOption {  if m.IsDefined() { return Float64Float64(f(*m.value)) } else { return NoneFloat64OptionOption }  }
/* Int32ArrOption: []int32->Complex64Option */ func MapComplex64OptionToInt32ArrOption(m Int32ArrOption, f func([]int32) Complex64Option) Complex64OptionOption {  if m.IsDefined() { return Complex64Complex64(f(*m.value)) } else { return NoneComplex64OptionOption }  }
/* Int32ArrOption: []int32->Complex128Option */ func MapComplex128OptionToInt32ArrOption(m Int32ArrOption, f func([]int32) Complex128Option) Complex128OptionOption {  if m.IsDefined() { return Complex128Complex128(f(*m.value)) } else { return NoneComplex128OptionOption }  }
/* Int32ArrOption: []int32->AnyOption */ func MapAnyOptionToInt32ArrOption(m Int32ArrOption, f func([]int32) AnyOption) AnyOptionOption {  if m.IsDefined() { return AnyOptAny(f(*m.value)) } else { return NoneAnyOptionOption }  }
/* Int32ArrOption: []int32->[]bool */ func MapBoolArrToInt32ArrOption(m Int32ArrOption, f func([]int32) []bool) BoolArrOption {  if m.IsDefined() { return BoolArrOpt(f(*m.value)) } else { return NoneBoolArrOption }  }
/* Int32ArrOption: []int32->[]string */ func MapStringArrToInt32ArrOption(m Int32ArrOption, f func([]int32) []string) StringArrOption {  if m.IsDefined() { return StringArrOpt(f(*m.value)) } else { return NoneStringArrOption }  }
/* Int32ArrOption: []int32->[]int */ func MapIntArrToInt32ArrOption(m Int32ArrOption, f func([]int32) []int) IntArrOption {  if m.IsDefined() { return IntArrOpt(f(*m.value)) } else { return NoneIntArrOption }  }
/* Int32ArrOption: []int32->[]int8 */ func MapInt8ArrToInt32ArrOption(m Int32ArrOption, f func([]int32) []int8) Int8ArrOption {  if m.IsDefined() { return Int8ArrOpt(f(*m.value)) } else { return NoneInt8ArrOption }  }
/* Int32ArrOption: []int32->[]int16 */ func MapInt16ArrToInt32ArrOption(m Int32ArrOption, f func([]int32) []int16) Int16ArrOption {  if m.IsDefined() { return Int16ArrOpt(f(*m.value)) } else { return NoneInt16ArrOption }  }
/* Int32ArrOption: []int32->[]int32 */ func MapInt32ArrToInt32ArrOption(m Int32ArrOption, f func([]int32) []int32) Int32ArrOption {  if m.IsDefined() { return Int32ArrOpt(f(*m.value)) } else { return NoneInt32ArrOption }  }
/* Int32ArrOption: []int32->[]int64 */ func MapInt64ArrToInt32ArrOption(m Int32ArrOption, f func([]int32) []int64) Int64ArrOption {  if m.IsDefined() { return Int64ArrOpt(f(*m.value)) } else { return NoneInt64ArrOption }  }
/* Int32ArrOption: []int32->[]uint */ func MapUintArrToInt32ArrOption(m Int32ArrOption, f func([]int32) []uint) UintArrOption {  if m.IsDefined() { return UintArrOpt(f(*m.value)) } else { return NoneUintArrOption }  }
/* Int32ArrOption: []int32->[]uint8 */ func MapUint8ArrToInt32ArrOption(m Int32ArrOption, f func([]int32) []uint8) Uint8ArrOption {  if m.IsDefined() { return Uint8ArrOpt(f(*m.value)) } else { return NoneUint8ArrOption }  }
/* Int32ArrOption: []int32->[]uint16 */ func MapUint16ArrToInt32ArrOption(m Int32ArrOption, f func([]int32) []uint16) Uint16ArrOption {  if m.IsDefined() { return Uint16ArrOpt(f(*m.value)) } else { return NoneUint16ArrOption }  }
/* Int32ArrOption: []int32->[]uint32 */ func MapUint32ArrToInt32ArrOption(m Int32ArrOption, f func([]int32) []uint32) Uint32ArrOption {  if m.IsDefined() { return Uint32ArrOpt(f(*m.value)) } else { return NoneUint32ArrOption }  }
/* Int32ArrOption: []int32->[]uint64 */ func MapUint64ArrToInt32ArrOption(m Int32ArrOption, f func([]int32) []uint64) Uint64ArrOption {  if m.IsDefined() { return Uint64ArrOpt(f(*m.value)) } else { return NoneUint64ArrOption }  }
/* Int32ArrOption: []int32->[]uintptr */ func MapUintptrArrToInt32ArrOption(m Int32ArrOption, f func([]int32) []uintptr) UintptrArrOption {  if m.IsDefined() { return UintptrArrOpt(f(*m.value)) } else { return NoneUintptrArrOption }  }
/* Int32ArrOption: []int32->[]byte */ func MapByteArrToInt32ArrOption(m Int32ArrOption, f func([]int32) []byte) ByteArrOption {  if m.IsDefined() { return ByteArrOpt(f(*m.value)) } else { return NoneByteArrOption }  }
/* Int32ArrOption: []int32->[]rune */ func MapRuneArrToInt32ArrOption(m Int32ArrOption, f func([]int32) []rune) RuneArrOption {  if m.IsDefined() { return RuneArrOpt(f(*m.value)) } else { return NoneRuneArrOption }  }
/* Int32ArrOption: []int32->[]float32 */ func MapFloat32ArrToInt32ArrOption(m Int32ArrOption, f func([]int32) []float32) Float32ArrOption {  if m.IsDefined() { return Float32ArrOpt(f(*m.value)) } else { return NoneFloat32ArrOption }  }
/* Int32ArrOption: []int32->[]float64 */ func MapFloat64ArrToInt32ArrOption(m Int32ArrOption, f func([]int32) []float64) Float64ArrOption {  if m.IsDefined() { return Float64ArrOpt(f(*m.value)) } else { return NoneFloat64ArrOption }  }
/* Int32ArrOption: []int32->[]complex64 */ func MapComplex64ArrToInt32ArrOption(m Int32ArrOption, f func([]int32) []complex64) Complex64ArrOption {  if m.IsDefined() { return Complex64ArrOpt(f(*m.value)) } else { return NoneComplex64ArrOption }  }
/* Int32ArrOption: []int32->[]complex128 */ func MapComplex128ArrToInt32ArrOption(m Int32ArrOption, f func([]int32) []complex128) Complex128ArrOption {  if m.IsDefined() { return Complex128ArrOpt(f(*m.value)) } else { return NoneComplex128ArrOption }  }
/* Int32ArrOption: []int32->[]Any */ func MapAnyArrToInt32ArrOption(m Int32ArrOption, f func([]int32) []Any) AnyArrOption {  if m.IsDefined() { return AnyArrOpt(f(*m.value)) } else { return NoneAnyArrOption }  }
/* Int32ArrOption: []int32->BoolList */ func MapBoolListToInt32ArrOption(m Int32ArrOption, f func([]int32) BoolList) BoolListOption {  if m.IsDefined() { return BoolListOpt(f(*m.value)) } else { return NoneBoolListOption }  }
/* Int32ArrOption: []int32->StringList */ func MapStringListToInt32ArrOption(m Int32ArrOption, f func([]int32) StringList) StringListOption {  if m.IsDefined() { return StringListOpt(f(*m.value)) } else { return NoneStringListOption }  }
/* Int32ArrOption: []int32->IntList */ func MapIntListToInt32ArrOption(m Int32ArrOption, f func([]int32) IntList) IntListOption {  if m.IsDefined() { return IntListOpt(f(*m.value)) } else { return NoneIntListOption }  }
/* Int32ArrOption: []int32->Int8List */ func MapInt8ListToInt32ArrOption(m Int32ArrOption, f func([]int32) Int8List) Int8ListOption {  if m.IsDefined() { return Int8ListOpt(f(*m.value)) } else { return NoneInt8ListOption }  }
/* Int32ArrOption: []int32->Int16List */ func MapInt16ListToInt32ArrOption(m Int32ArrOption, f func([]int32) Int16List) Int16ListOption {  if m.IsDefined() { return Int16ListOpt(f(*m.value)) } else { return NoneInt16ListOption }  }
/* Int32ArrOption: []int32->Int32List */ func MapInt32ListToInt32ArrOption(m Int32ArrOption, f func([]int32) Int32List) Int32ListOption {  if m.IsDefined() { return Int32ListOpt(f(*m.value)) } else { return NoneInt32ListOption }  }
/* Int32ArrOption: []int32->Int64List */ func MapInt64ListToInt32ArrOption(m Int32ArrOption, f func([]int32) Int64List) Int64ListOption {  if m.IsDefined() { return Int64ListOpt(f(*m.value)) } else { return NoneInt64ListOption }  }
/* Int32ArrOption: []int32->UintList */ func MapUintListToInt32ArrOption(m Int32ArrOption, f func([]int32) UintList) UintListOption {  if m.IsDefined() { return UintListOpt(f(*m.value)) } else { return NoneUintListOption }  }
/* Int32ArrOption: []int32->Uint8List */ func MapUint8ListToInt32ArrOption(m Int32ArrOption, f func([]int32) Uint8List) Uint8ListOption {  if m.IsDefined() { return Uint8ListOpt(f(*m.value)) } else { return NoneUint8ListOption }  }
/* Int32ArrOption: []int32->Uint16List */ func MapUint16ListToInt32ArrOption(m Int32ArrOption, f func([]int32) Uint16List) Uint16ListOption {  if m.IsDefined() { return Uint16ListOpt(f(*m.value)) } else { return NoneUint16ListOption }  }
/* Int32ArrOption: []int32->Uint32List */ func MapUint32ListToInt32ArrOption(m Int32ArrOption, f func([]int32) Uint32List) Uint32ListOption {  if m.IsDefined() { return Uint32ListOpt(f(*m.value)) } else { return NoneUint32ListOption }  }
/* Int32ArrOption: []int32->Uint64List */ func MapUint64ListToInt32ArrOption(m Int32ArrOption, f func([]int32) Uint64List) Uint64ListOption {  if m.IsDefined() { return Uint64ListOpt(f(*m.value)) } else { return NoneUint64ListOption }  }
/* Int32ArrOption: []int32->UintptrList */ func MapUintptrListToInt32ArrOption(m Int32ArrOption, f func([]int32) UintptrList) UintptrListOption {  if m.IsDefined() { return UintptrListOpt(f(*m.value)) } else { return NoneUintptrListOption }  }
/* Int32ArrOption: []int32->ByteList */ func MapByteListToInt32ArrOption(m Int32ArrOption, f func([]int32) ByteList) ByteListOption {  if m.IsDefined() { return ByteListOpt(f(*m.value)) } else { return NoneByteListOption }  }
/* Int32ArrOption: []int32->RuneList */ func MapRuneListToInt32ArrOption(m Int32ArrOption, f func([]int32) RuneList) RuneListOption {  if m.IsDefined() { return RuneListOpt(f(*m.value)) } else { return NoneRuneListOption }  }
/* Int32ArrOption: []int32->Float32List */ func MapFloat32ListToInt32ArrOption(m Int32ArrOption, f func([]int32) Float32List) Float32ListOption {  if m.IsDefined() { return Float32ListOpt(f(*m.value)) } else { return NoneFloat32ListOption }  }
/* Int32ArrOption: []int32->Float64List */ func MapFloat64ListToInt32ArrOption(m Int32ArrOption, f func([]int32) Float64List) Float64ListOption {  if m.IsDefined() { return Float64ListOpt(f(*m.value)) } else { return NoneFloat64ListOption }  }
/* Int32ArrOption: []int32->Complex64List */ func MapComplex64ListToInt32ArrOption(m Int32ArrOption, f func([]int32) Complex64List) Complex64ListOption {  if m.IsDefined() { return Complex64ListOpt(f(*m.value)) } else { return NoneComplex64ListOption }  }
/* Int32ArrOption: []int32->Complex128List */ func MapComplex128ListToInt32ArrOption(m Int32ArrOption, f func([]int32) Complex128List) Complex128ListOption {  if m.IsDefined() { return Complex128ListOpt(f(*m.value)) } else { return NoneComplex128ListOption }  }
/* Int32ArrOption: []int32->AnyList */ func MapAnyListToInt32ArrOption(m Int32ArrOption, f func([]int32) AnyList) AnyListOption {  if m.IsDefined() { return AnyListOpt(f(*m.value)) } else { return NoneAnyListOption }  }
/* Int64ArrOption: []int64->bool */ func MapBoolToInt64ArrOption(m Int64ArrOption, f func([]int64) bool) BoolOption {  if m.IsDefined() { return Bool(f(*m.value)) } else { return NoneBoolOption }  }
/* Int64ArrOption: []int64->string */ func MapStringToInt64ArrOption(m Int64ArrOption, f func([]int64) string) StringOption {  if m.IsDefined() { return String(f(*m.value)) } else { return NoneStringOption }  }
/* Int64ArrOption: []int64->int */ func MapIntToInt64ArrOption(m Int64ArrOption, f func([]int64) int) IntOption {  if m.IsDefined() { return Int(f(*m.value)) } else { return NoneIntOption }  }
/* Int64ArrOption: []int64->int8 */ func MapInt8ToInt64ArrOption(m Int64ArrOption, f func([]int64) int8) Int8Option {  if m.IsDefined() { return Int8(f(*m.value)) } else { return NoneInt8Option }  }
/* Int64ArrOption: []int64->int16 */ func MapInt16ToInt64ArrOption(m Int64ArrOption, f func([]int64) int16) Int16Option {  if m.IsDefined() { return Int16(f(*m.value)) } else { return NoneInt16Option }  }
/* Int64ArrOption: []int64->int32 */ func MapInt32ToInt64ArrOption(m Int64ArrOption, f func([]int64) int32) Int32Option {  if m.IsDefined() { return Int32(f(*m.value)) } else { return NoneInt32Option }  }
/* Int64ArrOption: []int64->int64 */ func MapInt64ToInt64ArrOption(m Int64ArrOption, f func([]int64) int64) Int64Option {  if m.IsDefined() { return Int64(f(*m.value)) } else { return NoneInt64Option }  }
/* Int64ArrOption: []int64->uint */ func MapUintToInt64ArrOption(m Int64ArrOption, f func([]int64) uint) UintOption {  if m.IsDefined() { return Uint(f(*m.value)) } else { return NoneUintOption }  }
/* Int64ArrOption: []int64->uint8 */ func MapUint8ToInt64ArrOption(m Int64ArrOption, f func([]int64) uint8) Uint8Option {  if m.IsDefined() { return Uint8(f(*m.value)) } else { return NoneUint8Option }  }
/* Int64ArrOption: []int64->uint16 */ func MapUint16ToInt64ArrOption(m Int64ArrOption, f func([]int64) uint16) Uint16Option {  if m.IsDefined() { return Uint16(f(*m.value)) } else { return NoneUint16Option }  }
/* Int64ArrOption: []int64->uint32 */ func MapUint32ToInt64ArrOption(m Int64ArrOption, f func([]int64) uint32) Uint32Option {  if m.IsDefined() { return Uint32(f(*m.value)) } else { return NoneUint32Option }  }
/* Int64ArrOption: []int64->uint64 */ func MapUint64ToInt64ArrOption(m Int64ArrOption, f func([]int64) uint64) Uint64Option {  if m.IsDefined() { return Uint64(f(*m.value)) } else { return NoneUint64Option }  }
/* Int64ArrOption: []int64->uintptr */ func MapUintptrToInt64ArrOption(m Int64ArrOption, f func([]int64) uintptr) UintptrOption {  if m.IsDefined() { return Uintptr(f(*m.value)) } else { return NoneUintptrOption }  }
/* Int64ArrOption: []int64->byte */ func MapByteToInt64ArrOption(m Int64ArrOption, f func([]int64) byte) ByteOption {  if m.IsDefined() { return Byte(f(*m.value)) } else { return NoneByteOption }  }
/* Int64ArrOption: []int64->rune */ func MapRuneToInt64ArrOption(m Int64ArrOption, f func([]int64) rune) RuneOption {  if m.IsDefined() { return Rune(f(*m.value)) } else { return NoneRuneOption }  }
/* Int64ArrOption: []int64->float32 */ func MapFloat32ToInt64ArrOption(m Int64ArrOption, f func([]int64) float32) Float32Option {  if m.IsDefined() { return Float32(f(*m.value)) } else { return NoneFloat32Option }  }
/* Int64ArrOption: []int64->float64 */ func MapFloat64ToInt64ArrOption(m Int64ArrOption, f func([]int64) float64) Float64Option {  if m.IsDefined() { return Float64(f(*m.value)) } else { return NoneFloat64Option }  }
/* Int64ArrOption: []int64->complex64 */ func MapComplex64ToInt64ArrOption(m Int64ArrOption, f func([]int64) complex64) Complex64Option {  if m.IsDefined() { return Complex64(f(*m.value)) } else { return NoneComplex64Option }  }
/* Int64ArrOption: []int64->complex128 */ func MapComplex128ToInt64ArrOption(m Int64ArrOption, f func([]int64) complex128) Complex128Option {  if m.IsDefined() { return Complex128(f(*m.value)) } else { return NoneComplex128Option }  }
/* Int64ArrOption: []int64->Any */ func MapAnyToInt64ArrOption(m Int64ArrOption, f func([]int64) Any) AnyOption {  if m.IsDefined() { return AnyOpt(f(*m.value)) } else { return NoneAnyOption }  }
/* Int64ArrOption: []int64->BoolOption */ func MapBoolOptionToInt64ArrOption(m Int64ArrOption, f func([]int64) BoolOption) BoolOptionOption {  if m.IsDefined() { return BoolBool(f(*m.value)) } else { return NoneBoolOptionOption }  }
/* Int64ArrOption: []int64->StringOption */ func MapStringOptionToInt64ArrOption(m Int64ArrOption, f func([]int64) StringOption) StringOptionOption {  if m.IsDefined() { return StringString(f(*m.value)) } else { return NoneStringOptionOption }  }
/* Int64ArrOption: []int64->IntOption */ func MapIntOptionToInt64ArrOption(m Int64ArrOption, f func([]int64) IntOption) IntOptionOption {  if m.IsDefined() { return IntInt(f(*m.value)) } else { return NoneIntOptionOption }  }
/* Int64ArrOption: []int64->Int8Option */ func MapInt8OptionToInt64ArrOption(m Int64ArrOption, f func([]int64) Int8Option) Int8OptionOption {  if m.IsDefined() { return Int8Int8(f(*m.value)) } else { return NoneInt8OptionOption }  }
/* Int64ArrOption: []int64->Int16Option */ func MapInt16OptionToInt64ArrOption(m Int64ArrOption, f func([]int64) Int16Option) Int16OptionOption {  if m.IsDefined() { return Int16Int16(f(*m.value)) } else { return NoneInt16OptionOption }  }
/* Int64ArrOption: []int64->Int32Option */ func MapInt32OptionToInt64ArrOption(m Int64ArrOption, f func([]int64) Int32Option) Int32OptionOption {  if m.IsDefined() { return Int32Int32(f(*m.value)) } else { return NoneInt32OptionOption }  }
/* Int64ArrOption: []int64->Int64Option */ func MapInt64OptionToInt64ArrOption(m Int64ArrOption, f func([]int64) Int64Option) Int64OptionOption {  if m.IsDefined() { return Int64Int64(f(*m.value)) } else { return NoneInt64OptionOption }  }
/* Int64ArrOption: []int64->UintOption */ func MapUintOptionToInt64ArrOption(m Int64ArrOption, f func([]int64) UintOption) UintOptionOption {  if m.IsDefined() { return UintUint(f(*m.value)) } else { return NoneUintOptionOption }  }
/* Int64ArrOption: []int64->Uint8Option */ func MapUint8OptionToInt64ArrOption(m Int64ArrOption, f func([]int64) Uint8Option) Uint8OptionOption {  if m.IsDefined() { return Uint8Uint8(f(*m.value)) } else { return NoneUint8OptionOption }  }
/* Int64ArrOption: []int64->Uint16Option */ func MapUint16OptionToInt64ArrOption(m Int64ArrOption, f func([]int64) Uint16Option) Uint16OptionOption {  if m.IsDefined() { return Uint16Uint16(f(*m.value)) } else { return NoneUint16OptionOption }  }
/* Int64ArrOption: []int64->Uint32Option */ func MapUint32OptionToInt64ArrOption(m Int64ArrOption, f func([]int64) Uint32Option) Uint32OptionOption {  if m.IsDefined() { return Uint32Uint32(f(*m.value)) } else { return NoneUint32OptionOption }  }
/* Int64ArrOption: []int64->Uint64Option */ func MapUint64OptionToInt64ArrOption(m Int64ArrOption, f func([]int64) Uint64Option) Uint64OptionOption {  if m.IsDefined() { return Uint64Uint64(f(*m.value)) } else { return NoneUint64OptionOption }  }
/* Int64ArrOption: []int64->UintptrOption */ func MapUintptrOptionToInt64ArrOption(m Int64ArrOption, f func([]int64) UintptrOption) UintptrOptionOption {  if m.IsDefined() { return UintptrUintptr(f(*m.value)) } else { return NoneUintptrOptionOption }  }
/* Int64ArrOption: []int64->ByteOption */ func MapByteOptionToInt64ArrOption(m Int64ArrOption, f func([]int64) ByteOption) ByteOptionOption {  if m.IsDefined() { return ByteByte(f(*m.value)) } else { return NoneByteOptionOption }  }
/* Int64ArrOption: []int64->RuneOption */ func MapRuneOptionToInt64ArrOption(m Int64ArrOption, f func([]int64) RuneOption) RuneOptionOption {  if m.IsDefined() { return RuneRune(f(*m.value)) } else { return NoneRuneOptionOption }  }
/* Int64ArrOption: []int64->Float32Option */ func MapFloat32OptionToInt64ArrOption(m Int64ArrOption, f func([]int64) Float32Option) Float32OptionOption {  if m.IsDefined() { return Float32Float32(f(*m.value)) } else { return NoneFloat32OptionOption }  }
/* Int64ArrOption: []int64->Float64Option */ func MapFloat64OptionToInt64ArrOption(m Int64ArrOption, f func([]int64) Float64Option) Float64OptionOption {  if m.IsDefined() { return Float64Float64(f(*m.value)) } else { return NoneFloat64OptionOption }  }
/* Int64ArrOption: []int64->Complex64Option */ func MapComplex64OptionToInt64ArrOption(m Int64ArrOption, f func([]int64) Complex64Option) Complex64OptionOption {  if m.IsDefined() { return Complex64Complex64(f(*m.value)) } else { return NoneComplex64OptionOption }  }
/* Int64ArrOption: []int64->Complex128Option */ func MapComplex128OptionToInt64ArrOption(m Int64ArrOption, f func([]int64) Complex128Option) Complex128OptionOption {  if m.IsDefined() { return Complex128Complex128(f(*m.value)) } else { return NoneComplex128OptionOption }  }
/* Int64ArrOption: []int64->AnyOption */ func MapAnyOptionToInt64ArrOption(m Int64ArrOption, f func([]int64) AnyOption) AnyOptionOption {  if m.IsDefined() { return AnyOptAny(f(*m.value)) } else { return NoneAnyOptionOption }  }
/* Int64ArrOption: []int64->[]bool */ func MapBoolArrToInt64ArrOption(m Int64ArrOption, f func([]int64) []bool) BoolArrOption {  if m.IsDefined() { return BoolArrOpt(f(*m.value)) } else { return NoneBoolArrOption }  }
/* Int64ArrOption: []int64->[]string */ func MapStringArrToInt64ArrOption(m Int64ArrOption, f func([]int64) []string) StringArrOption {  if m.IsDefined() { return StringArrOpt(f(*m.value)) } else { return NoneStringArrOption }  }
/* Int64ArrOption: []int64->[]int */ func MapIntArrToInt64ArrOption(m Int64ArrOption, f func([]int64) []int) IntArrOption {  if m.IsDefined() { return IntArrOpt(f(*m.value)) } else { return NoneIntArrOption }  }
/* Int64ArrOption: []int64->[]int8 */ func MapInt8ArrToInt64ArrOption(m Int64ArrOption, f func([]int64) []int8) Int8ArrOption {  if m.IsDefined() { return Int8ArrOpt(f(*m.value)) } else { return NoneInt8ArrOption }  }
/* Int64ArrOption: []int64->[]int16 */ func MapInt16ArrToInt64ArrOption(m Int64ArrOption, f func([]int64) []int16) Int16ArrOption {  if m.IsDefined() { return Int16ArrOpt(f(*m.value)) } else { return NoneInt16ArrOption }  }
/* Int64ArrOption: []int64->[]int32 */ func MapInt32ArrToInt64ArrOption(m Int64ArrOption, f func([]int64) []int32) Int32ArrOption {  if m.IsDefined() { return Int32ArrOpt(f(*m.value)) } else { return NoneInt32ArrOption }  }
/* Int64ArrOption: []int64->[]int64 */ func MapInt64ArrToInt64ArrOption(m Int64ArrOption, f func([]int64) []int64) Int64ArrOption {  if m.IsDefined() { return Int64ArrOpt(f(*m.value)) } else { return NoneInt64ArrOption }  }
/* Int64ArrOption: []int64->[]uint */ func MapUintArrToInt64ArrOption(m Int64ArrOption, f func([]int64) []uint) UintArrOption {  if m.IsDefined() { return UintArrOpt(f(*m.value)) } else { return NoneUintArrOption }  }
/* Int64ArrOption: []int64->[]uint8 */ func MapUint8ArrToInt64ArrOption(m Int64ArrOption, f func([]int64) []uint8) Uint8ArrOption {  if m.IsDefined() { return Uint8ArrOpt(f(*m.value)) } else { return NoneUint8ArrOption }  }
/* Int64ArrOption: []int64->[]uint16 */ func MapUint16ArrToInt64ArrOption(m Int64ArrOption, f func([]int64) []uint16) Uint16ArrOption {  if m.IsDefined() { return Uint16ArrOpt(f(*m.value)) } else { return NoneUint16ArrOption }  }
/* Int64ArrOption: []int64->[]uint32 */ func MapUint32ArrToInt64ArrOption(m Int64ArrOption, f func([]int64) []uint32) Uint32ArrOption {  if m.IsDefined() { return Uint32ArrOpt(f(*m.value)) } else { return NoneUint32ArrOption }  }
/* Int64ArrOption: []int64->[]uint64 */ func MapUint64ArrToInt64ArrOption(m Int64ArrOption, f func([]int64) []uint64) Uint64ArrOption {  if m.IsDefined() { return Uint64ArrOpt(f(*m.value)) } else { return NoneUint64ArrOption }  }
/* Int64ArrOption: []int64->[]uintptr */ func MapUintptrArrToInt64ArrOption(m Int64ArrOption, f func([]int64) []uintptr) UintptrArrOption {  if m.IsDefined() { return UintptrArrOpt(f(*m.value)) } else { return NoneUintptrArrOption }  }
/* Int64ArrOption: []int64->[]byte */ func MapByteArrToInt64ArrOption(m Int64ArrOption, f func([]int64) []byte) ByteArrOption {  if m.IsDefined() { return ByteArrOpt(f(*m.value)) } else { return NoneByteArrOption }  }
/* Int64ArrOption: []int64->[]rune */ func MapRuneArrToInt64ArrOption(m Int64ArrOption, f func([]int64) []rune) RuneArrOption {  if m.IsDefined() { return RuneArrOpt(f(*m.value)) } else { return NoneRuneArrOption }  }
/* Int64ArrOption: []int64->[]float32 */ func MapFloat32ArrToInt64ArrOption(m Int64ArrOption, f func([]int64) []float32) Float32ArrOption {  if m.IsDefined() { return Float32ArrOpt(f(*m.value)) } else { return NoneFloat32ArrOption }  }
/* Int64ArrOption: []int64->[]float64 */ func MapFloat64ArrToInt64ArrOption(m Int64ArrOption, f func([]int64) []float64) Float64ArrOption {  if m.IsDefined() { return Float64ArrOpt(f(*m.value)) } else { return NoneFloat64ArrOption }  }
/* Int64ArrOption: []int64->[]complex64 */ func MapComplex64ArrToInt64ArrOption(m Int64ArrOption, f func([]int64) []complex64) Complex64ArrOption {  if m.IsDefined() { return Complex64ArrOpt(f(*m.value)) } else { return NoneComplex64ArrOption }  }
/* Int64ArrOption: []int64->[]complex128 */ func MapComplex128ArrToInt64ArrOption(m Int64ArrOption, f func([]int64) []complex128) Complex128ArrOption {  if m.IsDefined() { return Complex128ArrOpt(f(*m.value)) } else { return NoneComplex128ArrOption }  }
/* Int64ArrOption: []int64->[]Any */ func MapAnyArrToInt64ArrOption(m Int64ArrOption, f func([]int64) []Any) AnyArrOption {  if m.IsDefined() { return AnyArrOpt(f(*m.value)) } else { return NoneAnyArrOption }  }
/* Int64ArrOption: []int64->BoolList */ func MapBoolListToInt64ArrOption(m Int64ArrOption, f func([]int64) BoolList) BoolListOption {  if m.IsDefined() { return BoolListOpt(f(*m.value)) } else { return NoneBoolListOption }  }
/* Int64ArrOption: []int64->StringList */ func MapStringListToInt64ArrOption(m Int64ArrOption, f func([]int64) StringList) StringListOption {  if m.IsDefined() { return StringListOpt(f(*m.value)) } else { return NoneStringListOption }  }
/* Int64ArrOption: []int64->IntList */ func MapIntListToInt64ArrOption(m Int64ArrOption, f func([]int64) IntList) IntListOption {  if m.IsDefined() { return IntListOpt(f(*m.value)) } else { return NoneIntListOption }  }
/* Int64ArrOption: []int64->Int8List */ func MapInt8ListToInt64ArrOption(m Int64ArrOption, f func([]int64) Int8List) Int8ListOption {  if m.IsDefined() { return Int8ListOpt(f(*m.value)) } else { return NoneInt8ListOption }  }
/* Int64ArrOption: []int64->Int16List */ func MapInt16ListToInt64ArrOption(m Int64ArrOption, f func([]int64) Int16List) Int16ListOption {  if m.IsDefined() { return Int16ListOpt(f(*m.value)) } else { return NoneInt16ListOption }  }
/* Int64ArrOption: []int64->Int32List */ func MapInt32ListToInt64ArrOption(m Int64ArrOption, f func([]int64) Int32List) Int32ListOption {  if m.IsDefined() { return Int32ListOpt(f(*m.value)) } else { return NoneInt32ListOption }  }
/* Int64ArrOption: []int64->Int64List */ func MapInt64ListToInt64ArrOption(m Int64ArrOption, f func([]int64) Int64List) Int64ListOption {  if m.IsDefined() { return Int64ListOpt(f(*m.value)) } else { return NoneInt64ListOption }  }
/* Int64ArrOption: []int64->UintList */ func MapUintListToInt64ArrOption(m Int64ArrOption, f func([]int64) UintList) UintListOption {  if m.IsDefined() { return UintListOpt(f(*m.value)) } else { return NoneUintListOption }  }
/* Int64ArrOption: []int64->Uint8List */ func MapUint8ListToInt64ArrOption(m Int64ArrOption, f func([]int64) Uint8List) Uint8ListOption {  if m.IsDefined() { return Uint8ListOpt(f(*m.value)) } else { return NoneUint8ListOption }  }
/* Int64ArrOption: []int64->Uint16List */ func MapUint16ListToInt64ArrOption(m Int64ArrOption, f func([]int64) Uint16List) Uint16ListOption {  if m.IsDefined() { return Uint16ListOpt(f(*m.value)) } else { return NoneUint16ListOption }  }
/* Int64ArrOption: []int64->Uint32List */ func MapUint32ListToInt64ArrOption(m Int64ArrOption, f func([]int64) Uint32List) Uint32ListOption {  if m.IsDefined() { return Uint32ListOpt(f(*m.value)) } else { return NoneUint32ListOption }  }
/* Int64ArrOption: []int64->Uint64List */ func MapUint64ListToInt64ArrOption(m Int64ArrOption, f func([]int64) Uint64List) Uint64ListOption {  if m.IsDefined() { return Uint64ListOpt(f(*m.value)) } else { return NoneUint64ListOption }  }
/* Int64ArrOption: []int64->UintptrList */ func MapUintptrListToInt64ArrOption(m Int64ArrOption, f func([]int64) UintptrList) UintptrListOption {  if m.IsDefined() { return UintptrListOpt(f(*m.value)) } else { return NoneUintptrListOption }  }
/* Int64ArrOption: []int64->ByteList */ func MapByteListToInt64ArrOption(m Int64ArrOption, f func([]int64) ByteList) ByteListOption {  if m.IsDefined() { return ByteListOpt(f(*m.value)) } else { return NoneByteListOption }  }
/* Int64ArrOption: []int64->RuneList */ func MapRuneListToInt64ArrOption(m Int64ArrOption, f func([]int64) RuneList) RuneListOption {  if m.IsDefined() { return RuneListOpt(f(*m.value)) } else { return NoneRuneListOption }  }
/* Int64ArrOption: []int64->Float32List */ func MapFloat32ListToInt64ArrOption(m Int64ArrOption, f func([]int64) Float32List) Float32ListOption {  if m.IsDefined() { return Float32ListOpt(f(*m.value)) } else { return NoneFloat32ListOption }  }
/* Int64ArrOption: []int64->Float64List */ func MapFloat64ListToInt64ArrOption(m Int64ArrOption, f func([]int64) Float64List) Float64ListOption {  if m.IsDefined() { return Float64ListOpt(f(*m.value)) } else { return NoneFloat64ListOption }  }
/* Int64ArrOption: []int64->Complex64List */ func MapComplex64ListToInt64ArrOption(m Int64ArrOption, f func([]int64) Complex64List) Complex64ListOption {  if m.IsDefined() { return Complex64ListOpt(f(*m.value)) } else { return NoneComplex64ListOption }  }
/* Int64ArrOption: []int64->Complex128List */ func MapComplex128ListToInt64ArrOption(m Int64ArrOption, f func([]int64) Complex128List) Complex128ListOption {  if m.IsDefined() { return Complex128ListOpt(f(*m.value)) } else { return NoneComplex128ListOption }  }
/* Int64ArrOption: []int64->AnyList */ func MapAnyListToInt64ArrOption(m Int64ArrOption, f func([]int64) AnyList) AnyListOption {  if m.IsDefined() { return AnyListOpt(f(*m.value)) } else { return NoneAnyListOption }  }
/* UintArrOption: []uint->bool */ func MapBoolToUintArrOption(m UintArrOption, f func([]uint) bool) BoolOption {  if m.IsDefined() { return Bool(f(*m.value)) } else { return NoneBoolOption }  }
/* UintArrOption: []uint->string */ func MapStringToUintArrOption(m UintArrOption, f func([]uint) string) StringOption {  if m.IsDefined() { return String(f(*m.value)) } else { return NoneStringOption }  }
/* UintArrOption: []uint->int */ func MapIntToUintArrOption(m UintArrOption, f func([]uint) int) IntOption {  if m.IsDefined() { return Int(f(*m.value)) } else { return NoneIntOption }  }
/* UintArrOption: []uint->int8 */ func MapInt8ToUintArrOption(m UintArrOption, f func([]uint) int8) Int8Option {  if m.IsDefined() { return Int8(f(*m.value)) } else { return NoneInt8Option }  }
/* UintArrOption: []uint->int16 */ func MapInt16ToUintArrOption(m UintArrOption, f func([]uint) int16) Int16Option {  if m.IsDefined() { return Int16(f(*m.value)) } else { return NoneInt16Option }  }
/* UintArrOption: []uint->int32 */ func MapInt32ToUintArrOption(m UintArrOption, f func([]uint) int32) Int32Option {  if m.IsDefined() { return Int32(f(*m.value)) } else { return NoneInt32Option }  }
/* UintArrOption: []uint->int64 */ func MapInt64ToUintArrOption(m UintArrOption, f func([]uint) int64) Int64Option {  if m.IsDefined() { return Int64(f(*m.value)) } else { return NoneInt64Option }  }
/* UintArrOption: []uint->uint */ func MapUintToUintArrOption(m UintArrOption, f func([]uint) uint) UintOption {  if m.IsDefined() { return Uint(f(*m.value)) } else { return NoneUintOption }  }
/* UintArrOption: []uint->uint8 */ func MapUint8ToUintArrOption(m UintArrOption, f func([]uint) uint8) Uint8Option {  if m.IsDefined() { return Uint8(f(*m.value)) } else { return NoneUint8Option }  }
/* UintArrOption: []uint->uint16 */ func MapUint16ToUintArrOption(m UintArrOption, f func([]uint) uint16) Uint16Option {  if m.IsDefined() { return Uint16(f(*m.value)) } else { return NoneUint16Option }  }
/* UintArrOption: []uint->uint32 */ func MapUint32ToUintArrOption(m UintArrOption, f func([]uint) uint32) Uint32Option {  if m.IsDefined() { return Uint32(f(*m.value)) } else { return NoneUint32Option }  }
/* UintArrOption: []uint->uint64 */ func MapUint64ToUintArrOption(m UintArrOption, f func([]uint) uint64) Uint64Option {  if m.IsDefined() { return Uint64(f(*m.value)) } else { return NoneUint64Option }  }
/* UintArrOption: []uint->uintptr */ func MapUintptrToUintArrOption(m UintArrOption, f func([]uint) uintptr) UintptrOption {  if m.IsDefined() { return Uintptr(f(*m.value)) } else { return NoneUintptrOption }  }
/* UintArrOption: []uint->byte */ func MapByteToUintArrOption(m UintArrOption, f func([]uint) byte) ByteOption {  if m.IsDefined() { return Byte(f(*m.value)) } else { return NoneByteOption }  }
/* UintArrOption: []uint->rune */ func MapRuneToUintArrOption(m UintArrOption, f func([]uint) rune) RuneOption {  if m.IsDefined() { return Rune(f(*m.value)) } else { return NoneRuneOption }  }
/* UintArrOption: []uint->float32 */ func MapFloat32ToUintArrOption(m UintArrOption, f func([]uint) float32) Float32Option {  if m.IsDefined() { return Float32(f(*m.value)) } else { return NoneFloat32Option }  }
/* UintArrOption: []uint->float64 */ func MapFloat64ToUintArrOption(m UintArrOption, f func([]uint) float64) Float64Option {  if m.IsDefined() { return Float64(f(*m.value)) } else { return NoneFloat64Option }  }
/* UintArrOption: []uint->complex64 */ func MapComplex64ToUintArrOption(m UintArrOption, f func([]uint) complex64) Complex64Option {  if m.IsDefined() { return Complex64(f(*m.value)) } else { return NoneComplex64Option }  }
/* UintArrOption: []uint->complex128 */ func MapComplex128ToUintArrOption(m UintArrOption, f func([]uint) complex128) Complex128Option {  if m.IsDefined() { return Complex128(f(*m.value)) } else { return NoneComplex128Option }  }
/* UintArrOption: []uint->Any */ func MapAnyToUintArrOption(m UintArrOption, f func([]uint) Any) AnyOption {  if m.IsDefined() { return AnyOpt(f(*m.value)) } else { return NoneAnyOption }  }
/* UintArrOption: []uint->BoolOption */ func MapBoolOptionToUintArrOption(m UintArrOption, f func([]uint) BoolOption) BoolOptionOption {  if m.IsDefined() { return BoolBool(f(*m.value)) } else { return NoneBoolOptionOption }  }
/* UintArrOption: []uint->StringOption */ func MapStringOptionToUintArrOption(m UintArrOption, f func([]uint) StringOption) StringOptionOption {  if m.IsDefined() { return StringString(f(*m.value)) } else { return NoneStringOptionOption }  }
/* UintArrOption: []uint->IntOption */ func MapIntOptionToUintArrOption(m UintArrOption, f func([]uint) IntOption) IntOptionOption {  if m.IsDefined() { return IntInt(f(*m.value)) } else { return NoneIntOptionOption }  }
/* UintArrOption: []uint->Int8Option */ func MapInt8OptionToUintArrOption(m UintArrOption, f func([]uint) Int8Option) Int8OptionOption {  if m.IsDefined() { return Int8Int8(f(*m.value)) } else { return NoneInt8OptionOption }  }
/* UintArrOption: []uint->Int16Option */ func MapInt16OptionToUintArrOption(m UintArrOption, f func([]uint) Int16Option) Int16OptionOption {  if m.IsDefined() { return Int16Int16(f(*m.value)) } else { return NoneInt16OptionOption }  }
/* UintArrOption: []uint->Int32Option */ func MapInt32OptionToUintArrOption(m UintArrOption, f func([]uint) Int32Option) Int32OptionOption {  if m.IsDefined() { return Int32Int32(f(*m.value)) } else { return NoneInt32OptionOption }  }
/* UintArrOption: []uint->Int64Option */ func MapInt64OptionToUintArrOption(m UintArrOption, f func([]uint) Int64Option) Int64OptionOption {  if m.IsDefined() { return Int64Int64(f(*m.value)) } else { return NoneInt64OptionOption }  }
/* UintArrOption: []uint->UintOption */ func MapUintOptionToUintArrOption(m UintArrOption, f func([]uint) UintOption) UintOptionOption {  if m.IsDefined() { return UintUint(f(*m.value)) } else { return NoneUintOptionOption }  }
/* UintArrOption: []uint->Uint8Option */ func MapUint8OptionToUintArrOption(m UintArrOption, f func([]uint) Uint8Option) Uint8OptionOption {  if m.IsDefined() { return Uint8Uint8(f(*m.value)) } else { return NoneUint8OptionOption }  }
/* UintArrOption: []uint->Uint16Option */ func MapUint16OptionToUintArrOption(m UintArrOption, f func([]uint) Uint16Option) Uint16OptionOption {  if m.IsDefined() { return Uint16Uint16(f(*m.value)) } else { return NoneUint16OptionOption }  }
/* UintArrOption: []uint->Uint32Option */ func MapUint32OptionToUintArrOption(m UintArrOption, f func([]uint) Uint32Option) Uint32OptionOption {  if m.IsDefined() { return Uint32Uint32(f(*m.value)) } else { return NoneUint32OptionOption }  }
/* UintArrOption: []uint->Uint64Option */ func MapUint64OptionToUintArrOption(m UintArrOption, f func([]uint) Uint64Option) Uint64OptionOption {  if m.IsDefined() { return Uint64Uint64(f(*m.value)) } else { return NoneUint64OptionOption }  }
/* UintArrOption: []uint->UintptrOption */ func MapUintptrOptionToUintArrOption(m UintArrOption, f func([]uint) UintptrOption) UintptrOptionOption {  if m.IsDefined() { return UintptrUintptr(f(*m.value)) } else { return NoneUintptrOptionOption }  }
/* UintArrOption: []uint->ByteOption */ func MapByteOptionToUintArrOption(m UintArrOption, f func([]uint) ByteOption) ByteOptionOption {  if m.IsDefined() { return ByteByte(f(*m.value)) } else { return NoneByteOptionOption }  }
/* UintArrOption: []uint->RuneOption */ func MapRuneOptionToUintArrOption(m UintArrOption, f func([]uint) RuneOption) RuneOptionOption {  if m.IsDefined() { return RuneRune(f(*m.value)) } else { return NoneRuneOptionOption }  }
/* UintArrOption: []uint->Float32Option */ func MapFloat32OptionToUintArrOption(m UintArrOption, f func([]uint) Float32Option) Float32OptionOption {  if m.IsDefined() { return Float32Float32(f(*m.value)) } else { return NoneFloat32OptionOption }  }
/* UintArrOption: []uint->Float64Option */ func MapFloat64OptionToUintArrOption(m UintArrOption, f func([]uint) Float64Option) Float64OptionOption {  if m.IsDefined() { return Float64Float64(f(*m.value)) } else { return NoneFloat64OptionOption }  }
/* UintArrOption: []uint->Complex64Option */ func MapComplex64OptionToUintArrOption(m UintArrOption, f func([]uint) Complex64Option) Complex64OptionOption {  if m.IsDefined() { return Complex64Complex64(f(*m.value)) } else { return NoneComplex64OptionOption }  }
/* UintArrOption: []uint->Complex128Option */ func MapComplex128OptionToUintArrOption(m UintArrOption, f func([]uint) Complex128Option) Complex128OptionOption {  if m.IsDefined() { return Complex128Complex128(f(*m.value)) } else { return NoneComplex128OptionOption }  }
/* UintArrOption: []uint->AnyOption */ func MapAnyOptionToUintArrOption(m UintArrOption, f func([]uint) AnyOption) AnyOptionOption {  if m.IsDefined() { return AnyOptAny(f(*m.value)) } else { return NoneAnyOptionOption }  }
/* UintArrOption: []uint->[]bool */ func MapBoolArrToUintArrOption(m UintArrOption, f func([]uint) []bool) BoolArrOption {  if m.IsDefined() { return BoolArrOpt(f(*m.value)) } else { return NoneBoolArrOption }  }
/* UintArrOption: []uint->[]string */ func MapStringArrToUintArrOption(m UintArrOption, f func([]uint) []string) StringArrOption {  if m.IsDefined() { return StringArrOpt(f(*m.value)) } else { return NoneStringArrOption }  }
/* UintArrOption: []uint->[]int */ func MapIntArrToUintArrOption(m UintArrOption, f func([]uint) []int) IntArrOption {  if m.IsDefined() { return IntArrOpt(f(*m.value)) } else { return NoneIntArrOption }  }
/* UintArrOption: []uint->[]int8 */ func MapInt8ArrToUintArrOption(m UintArrOption, f func([]uint) []int8) Int8ArrOption {  if m.IsDefined() { return Int8ArrOpt(f(*m.value)) } else { return NoneInt8ArrOption }  }
/* UintArrOption: []uint->[]int16 */ func MapInt16ArrToUintArrOption(m UintArrOption, f func([]uint) []int16) Int16ArrOption {  if m.IsDefined() { return Int16ArrOpt(f(*m.value)) } else { return NoneInt16ArrOption }  }
/* UintArrOption: []uint->[]int32 */ func MapInt32ArrToUintArrOption(m UintArrOption, f func([]uint) []int32) Int32ArrOption {  if m.IsDefined() { return Int32ArrOpt(f(*m.value)) } else { return NoneInt32ArrOption }  }
/* UintArrOption: []uint->[]int64 */ func MapInt64ArrToUintArrOption(m UintArrOption, f func([]uint) []int64) Int64ArrOption {  if m.IsDefined() { return Int64ArrOpt(f(*m.value)) } else { return NoneInt64ArrOption }  }
/* UintArrOption: []uint->[]uint */ func MapUintArrToUintArrOption(m UintArrOption, f func([]uint) []uint) UintArrOption {  if m.IsDefined() { return UintArrOpt(f(*m.value)) } else { return NoneUintArrOption }  }
/* UintArrOption: []uint->[]uint8 */ func MapUint8ArrToUintArrOption(m UintArrOption, f func([]uint) []uint8) Uint8ArrOption {  if m.IsDefined() { return Uint8ArrOpt(f(*m.value)) } else { return NoneUint8ArrOption }  }
/* UintArrOption: []uint->[]uint16 */ func MapUint16ArrToUintArrOption(m UintArrOption, f func([]uint) []uint16) Uint16ArrOption {  if m.IsDefined() { return Uint16ArrOpt(f(*m.value)) } else { return NoneUint16ArrOption }  }
/* UintArrOption: []uint->[]uint32 */ func MapUint32ArrToUintArrOption(m UintArrOption, f func([]uint) []uint32) Uint32ArrOption {  if m.IsDefined() { return Uint32ArrOpt(f(*m.value)) } else { return NoneUint32ArrOption }  }
/* UintArrOption: []uint->[]uint64 */ func MapUint64ArrToUintArrOption(m UintArrOption, f func([]uint) []uint64) Uint64ArrOption {  if m.IsDefined() { return Uint64ArrOpt(f(*m.value)) } else { return NoneUint64ArrOption }  }
/* UintArrOption: []uint->[]uintptr */ func MapUintptrArrToUintArrOption(m UintArrOption, f func([]uint) []uintptr) UintptrArrOption {  if m.IsDefined() { return UintptrArrOpt(f(*m.value)) } else { return NoneUintptrArrOption }  }
/* UintArrOption: []uint->[]byte */ func MapByteArrToUintArrOption(m UintArrOption, f func([]uint) []byte) ByteArrOption {  if m.IsDefined() { return ByteArrOpt(f(*m.value)) } else { return NoneByteArrOption }  }
/* UintArrOption: []uint->[]rune */ func MapRuneArrToUintArrOption(m UintArrOption, f func([]uint) []rune) RuneArrOption {  if m.IsDefined() { return RuneArrOpt(f(*m.value)) } else { return NoneRuneArrOption }  }
/* UintArrOption: []uint->[]float32 */ func MapFloat32ArrToUintArrOption(m UintArrOption, f func([]uint) []float32) Float32ArrOption {  if m.IsDefined() { return Float32ArrOpt(f(*m.value)) } else { return NoneFloat32ArrOption }  }
/* UintArrOption: []uint->[]float64 */ func MapFloat64ArrToUintArrOption(m UintArrOption, f func([]uint) []float64) Float64ArrOption {  if m.IsDefined() { return Float64ArrOpt(f(*m.value)) } else { return NoneFloat64ArrOption }  }
/* UintArrOption: []uint->[]complex64 */ func MapComplex64ArrToUintArrOption(m UintArrOption, f func([]uint) []complex64) Complex64ArrOption {  if m.IsDefined() { return Complex64ArrOpt(f(*m.value)) } else { return NoneComplex64ArrOption }  }
/* UintArrOption: []uint->[]complex128 */ func MapComplex128ArrToUintArrOption(m UintArrOption, f func([]uint) []complex128) Complex128ArrOption {  if m.IsDefined() { return Complex128ArrOpt(f(*m.value)) } else { return NoneComplex128ArrOption }  }
/* UintArrOption: []uint->[]Any */ func MapAnyArrToUintArrOption(m UintArrOption, f func([]uint) []Any) AnyArrOption {  if m.IsDefined() { return AnyArrOpt(f(*m.value)) } else { return NoneAnyArrOption }  }
/* UintArrOption: []uint->BoolList */ func MapBoolListToUintArrOption(m UintArrOption, f func([]uint) BoolList) BoolListOption {  if m.IsDefined() { return BoolListOpt(f(*m.value)) } else { return NoneBoolListOption }  }
/* UintArrOption: []uint->StringList */ func MapStringListToUintArrOption(m UintArrOption, f func([]uint) StringList) StringListOption {  if m.IsDefined() { return StringListOpt(f(*m.value)) } else { return NoneStringListOption }  }
/* UintArrOption: []uint->IntList */ func MapIntListToUintArrOption(m UintArrOption, f func([]uint) IntList) IntListOption {  if m.IsDefined() { return IntListOpt(f(*m.value)) } else { return NoneIntListOption }  }
/* UintArrOption: []uint->Int8List */ func MapInt8ListToUintArrOption(m UintArrOption, f func([]uint) Int8List) Int8ListOption {  if m.IsDefined() { return Int8ListOpt(f(*m.value)) } else { return NoneInt8ListOption }  }
/* UintArrOption: []uint->Int16List */ func MapInt16ListToUintArrOption(m UintArrOption, f func([]uint) Int16List) Int16ListOption {  if m.IsDefined() { return Int16ListOpt(f(*m.value)) } else { return NoneInt16ListOption }  }
/* UintArrOption: []uint->Int32List */ func MapInt32ListToUintArrOption(m UintArrOption, f func([]uint) Int32List) Int32ListOption {  if m.IsDefined() { return Int32ListOpt(f(*m.value)) } else { return NoneInt32ListOption }  }
/* UintArrOption: []uint->Int64List */ func MapInt64ListToUintArrOption(m UintArrOption, f func([]uint) Int64List) Int64ListOption {  if m.IsDefined() { return Int64ListOpt(f(*m.value)) } else { return NoneInt64ListOption }  }
/* UintArrOption: []uint->UintList */ func MapUintListToUintArrOption(m UintArrOption, f func([]uint) UintList) UintListOption {  if m.IsDefined() { return UintListOpt(f(*m.value)) } else { return NoneUintListOption }  }
/* UintArrOption: []uint->Uint8List */ func MapUint8ListToUintArrOption(m UintArrOption, f func([]uint) Uint8List) Uint8ListOption {  if m.IsDefined() { return Uint8ListOpt(f(*m.value)) } else { return NoneUint8ListOption }  }
/* UintArrOption: []uint->Uint16List */ func MapUint16ListToUintArrOption(m UintArrOption, f func([]uint) Uint16List) Uint16ListOption {  if m.IsDefined() { return Uint16ListOpt(f(*m.value)) } else { return NoneUint16ListOption }  }
/* UintArrOption: []uint->Uint32List */ func MapUint32ListToUintArrOption(m UintArrOption, f func([]uint) Uint32List) Uint32ListOption {  if m.IsDefined() { return Uint32ListOpt(f(*m.value)) } else { return NoneUint32ListOption }  }
/* UintArrOption: []uint->Uint64List */ func MapUint64ListToUintArrOption(m UintArrOption, f func([]uint) Uint64List) Uint64ListOption {  if m.IsDefined() { return Uint64ListOpt(f(*m.value)) } else { return NoneUint64ListOption }  }
/* UintArrOption: []uint->UintptrList */ func MapUintptrListToUintArrOption(m UintArrOption, f func([]uint) UintptrList) UintptrListOption {  if m.IsDefined() { return UintptrListOpt(f(*m.value)) } else { return NoneUintptrListOption }  }
/* UintArrOption: []uint->ByteList */ func MapByteListToUintArrOption(m UintArrOption, f func([]uint) ByteList) ByteListOption {  if m.IsDefined() { return ByteListOpt(f(*m.value)) } else { return NoneByteListOption }  }
/* UintArrOption: []uint->RuneList */ func MapRuneListToUintArrOption(m UintArrOption, f func([]uint) RuneList) RuneListOption {  if m.IsDefined() { return RuneListOpt(f(*m.value)) } else { return NoneRuneListOption }  }
/* UintArrOption: []uint->Float32List */ func MapFloat32ListToUintArrOption(m UintArrOption, f func([]uint) Float32List) Float32ListOption {  if m.IsDefined() { return Float32ListOpt(f(*m.value)) } else { return NoneFloat32ListOption }  }
/* UintArrOption: []uint->Float64List */ func MapFloat64ListToUintArrOption(m UintArrOption, f func([]uint) Float64List) Float64ListOption {  if m.IsDefined() { return Float64ListOpt(f(*m.value)) } else { return NoneFloat64ListOption }  }
/* UintArrOption: []uint->Complex64List */ func MapComplex64ListToUintArrOption(m UintArrOption, f func([]uint) Complex64List) Complex64ListOption {  if m.IsDefined() { return Complex64ListOpt(f(*m.value)) } else { return NoneComplex64ListOption }  }
/* UintArrOption: []uint->Complex128List */ func MapComplex128ListToUintArrOption(m UintArrOption, f func([]uint) Complex128List) Complex128ListOption {  if m.IsDefined() { return Complex128ListOpt(f(*m.value)) } else { return NoneComplex128ListOption }  }
/* UintArrOption: []uint->AnyList */ func MapAnyListToUintArrOption(m UintArrOption, f func([]uint) AnyList) AnyListOption {  if m.IsDefined() { return AnyListOpt(f(*m.value)) } else { return NoneAnyListOption }  }
/* Uint8ArrOption: []uint8->bool */ func MapBoolToUint8ArrOption(m Uint8ArrOption, f func([]uint8) bool) BoolOption {  if m.IsDefined() { return Bool(f(*m.value)) } else { return NoneBoolOption }  }
/* Uint8ArrOption: []uint8->string */ func MapStringToUint8ArrOption(m Uint8ArrOption, f func([]uint8) string) StringOption {  if m.IsDefined() { return String(f(*m.value)) } else { return NoneStringOption }  }
/* Uint8ArrOption: []uint8->int */ func MapIntToUint8ArrOption(m Uint8ArrOption, f func([]uint8) int) IntOption {  if m.IsDefined() { return Int(f(*m.value)) } else { return NoneIntOption }  }
/* Uint8ArrOption: []uint8->int8 */ func MapInt8ToUint8ArrOption(m Uint8ArrOption, f func([]uint8) int8) Int8Option {  if m.IsDefined() { return Int8(f(*m.value)) } else { return NoneInt8Option }  }
/* Uint8ArrOption: []uint8->int16 */ func MapInt16ToUint8ArrOption(m Uint8ArrOption, f func([]uint8) int16) Int16Option {  if m.IsDefined() { return Int16(f(*m.value)) } else { return NoneInt16Option }  }
/* Uint8ArrOption: []uint8->int32 */ func MapInt32ToUint8ArrOption(m Uint8ArrOption, f func([]uint8) int32) Int32Option {  if m.IsDefined() { return Int32(f(*m.value)) } else { return NoneInt32Option }  }
/* Uint8ArrOption: []uint8->int64 */ func MapInt64ToUint8ArrOption(m Uint8ArrOption, f func([]uint8) int64) Int64Option {  if m.IsDefined() { return Int64(f(*m.value)) } else { return NoneInt64Option }  }
/* Uint8ArrOption: []uint8->uint */ func MapUintToUint8ArrOption(m Uint8ArrOption, f func([]uint8) uint) UintOption {  if m.IsDefined() { return Uint(f(*m.value)) } else { return NoneUintOption }  }
/* Uint8ArrOption: []uint8->uint8 */ func MapUint8ToUint8ArrOption(m Uint8ArrOption, f func([]uint8) uint8) Uint8Option {  if m.IsDefined() { return Uint8(f(*m.value)) } else { return NoneUint8Option }  }
/* Uint8ArrOption: []uint8->uint16 */ func MapUint16ToUint8ArrOption(m Uint8ArrOption, f func([]uint8) uint16) Uint16Option {  if m.IsDefined() { return Uint16(f(*m.value)) } else { return NoneUint16Option }  }
/* Uint8ArrOption: []uint8->uint32 */ func MapUint32ToUint8ArrOption(m Uint8ArrOption, f func([]uint8) uint32) Uint32Option {  if m.IsDefined() { return Uint32(f(*m.value)) } else { return NoneUint32Option }  }
/* Uint8ArrOption: []uint8->uint64 */ func MapUint64ToUint8ArrOption(m Uint8ArrOption, f func([]uint8) uint64) Uint64Option {  if m.IsDefined() { return Uint64(f(*m.value)) } else { return NoneUint64Option }  }
/* Uint8ArrOption: []uint8->uintptr */ func MapUintptrToUint8ArrOption(m Uint8ArrOption, f func([]uint8) uintptr) UintptrOption {  if m.IsDefined() { return Uintptr(f(*m.value)) } else { return NoneUintptrOption }  }
/* Uint8ArrOption: []uint8->byte */ func MapByteToUint8ArrOption(m Uint8ArrOption, f func([]uint8) byte) ByteOption {  if m.IsDefined() { return Byte(f(*m.value)) } else { return NoneByteOption }  }
/* Uint8ArrOption: []uint8->rune */ func MapRuneToUint8ArrOption(m Uint8ArrOption, f func([]uint8) rune) RuneOption {  if m.IsDefined() { return Rune(f(*m.value)) } else { return NoneRuneOption }  }
/* Uint8ArrOption: []uint8->float32 */ func MapFloat32ToUint8ArrOption(m Uint8ArrOption, f func([]uint8) float32) Float32Option {  if m.IsDefined() { return Float32(f(*m.value)) } else { return NoneFloat32Option }  }
/* Uint8ArrOption: []uint8->float64 */ func MapFloat64ToUint8ArrOption(m Uint8ArrOption, f func([]uint8) float64) Float64Option {  if m.IsDefined() { return Float64(f(*m.value)) } else { return NoneFloat64Option }  }
/* Uint8ArrOption: []uint8->complex64 */ func MapComplex64ToUint8ArrOption(m Uint8ArrOption, f func([]uint8) complex64) Complex64Option {  if m.IsDefined() { return Complex64(f(*m.value)) } else { return NoneComplex64Option }  }
/* Uint8ArrOption: []uint8->complex128 */ func MapComplex128ToUint8ArrOption(m Uint8ArrOption, f func([]uint8) complex128) Complex128Option {  if m.IsDefined() { return Complex128(f(*m.value)) } else { return NoneComplex128Option }  }
/* Uint8ArrOption: []uint8->Any */ func MapAnyToUint8ArrOption(m Uint8ArrOption, f func([]uint8) Any) AnyOption {  if m.IsDefined() { return AnyOpt(f(*m.value)) } else { return NoneAnyOption }  }
/* Uint8ArrOption: []uint8->BoolOption */ func MapBoolOptionToUint8ArrOption(m Uint8ArrOption, f func([]uint8) BoolOption) BoolOptionOption {  if m.IsDefined() { return BoolBool(f(*m.value)) } else { return NoneBoolOptionOption }  }
/* Uint8ArrOption: []uint8->StringOption */ func MapStringOptionToUint8ArrOption(m Uint8ArrOption, f func([]uint8) StringOption) StringOptionOption {  if m.IsDefined() { return StringString(f(*m.value)) } else { return NoneStringOptionOption }  }
/* Uint8ArrOption: []uint8->IntOption */ func MapIntOptionToUint8ArrOption(m Uint8ArrOption, f func([]uint8) IntOption) IntOptionOption {  if m.IsDefined() { return IntInt(f(*m.value)) } else { return NoneIntOptionOption }  }
/* Uint8ArrOption: []uint8->Int8Option */ func MapInt8OptionToUint8ArrOption(m Uint8ArrOption, f func([]uint8) Int8Option) Int8OptionOption {  if m.IsDefined() { return Int8Int8(f(*m.value)) } else { return NoneInt8OptionOption }  }
/* Uint8ArrOption: []uint8->Int16Option */ func MapInt16OptionToUint8ArrOption(m Uint8ArrOption, f func([]uint8) Int16Option) Int16OptionOption {  if m.IsDefined() { return Int16Int16(f(*m.value)) } else { return NoneInt16OptionOption }  }
/* Uint8ArrOption: []uint8->Int32Option */ func MapInt32OptionToUint8ArrOption(m Uint8ArrOption, f func([]uint8) Int32Option) Int32OptionOption {  if m.IsDefined() { return Int32Int32(f(*m.value)) } else { return NoneInt32OptionOption }  }
/* Uint8ArrOption: []uint8->Int64Option */ func MapInt64OptionToUint8ArrOption(m Uint8ArrOption, f func([]uint8) Int64Option) Int64OptionOption {  if m.IsDefined() { return Int64Int64(f(*m.value)) } else { return NoneInt64OptionOption }  }
/* Uint8ArrOption: []uint8->UintOption */ func MapUintOptionToUint8ArrOption(m Uint8ArrOption, f func([]uint8) UintOption) UintOptionOption {  if m.IsDefined() { return UintUint(f(*m.value)) } else { return NoneUintOptionOption }  }
/* Uint8ArrOption: []uint8->Uint8Option */ func MapUint8OptionToUint8ArrOption(m Uint8ArrOption, f func([]uint8) Uint8Option) Uint8OptionOption {  if m.IsDefined() { return Uint8Uint8(f(*m.value)) } else { return NoneUint8OptionOption }  }
/* Uint8ArrOption: []uint8->Uint16Option */ func MapUint16OptionToUint8ArrOption(m Uint8ArrOption, f func([]uint8) Uint16Option) Uint16OptionOption {  if m.IsDefined() { return Uint16Uint16(f(*m.value)) } else { return NoneUint16OptionOption }  }
/* Uint8ArrOption: []uint8->Uint32Option */ func MapUint32OptionToUint8ArrOption(m Uint8ArrOption, f func([]uint8) Uint32Option) Uint32OptionOption {  if m.IsDefined() { return Uint32Uint32(f(*m.value)) } else { return NoneUint32OptionOption }  }
/* Uint8ArrOption: []uint8->Uint64Option */ func MapUint64OptionToUint8ArrOption(m Uint8ArrOption, f func([]uint8) Uint64Option) Uint64OptionOption {  if m.IsDefined() { return Uint64Uint64(f(*m.value)) } else { return NoneUint64OptionOption }  }
/* Uint8ArrOption: []uint8->UintptrOption */ func MapUintptrOptionToUint8ArrOption(m Uint8ArrOption, f func([]uint8) UintptrOption) UintptrOptionOption {  if m.IsDefined() { return UintptrUintptr(f(*m.value)) } else { return NoneUintptrOptionOption }  }
/* Uint8ArrOption: []uint8->ByteOption */ func MapByteOptionToUint8ArrOption(m Uint8ArrOption, f func([]uint8) ByteOption) ByteOptionOption {  if m.IsDefined() { return ByteByte(f(*m.value)) } else { return NoneByteOptionOption }  }
/* Uint8ArrOption: []uint8->RuneOption */ func MapRuneOptionToUint8ArrOption(m Uint8ArrOption, f func([]uint8) RuneOption) RuneOptionOption {  if m.IsDefined() { return RuneRune(f(*m.value)) } else { return NoneRuneOptionOption }  }
/* Uint8ArrOption: []uint8->Float32Option */ func MapFloat32OptionToUint8ArrOption(m Uint8ArrOption, f func([]uint8) Float32Option) Float32OptionOption {  if m.IsDefined() { return Float32Float32(f(*m.value)) } else { return NoneFloat32OptionOption }  }
/* Uint8ArrOption: []uint8->Float64Option */ func MapFloat64OptionToUint8ArrOption(m Uint8ArrOption, f func([]uint8) Float64Option) Float64OptionOption {  if m.IsDefined() { return Float64Float64(f(*m.value)) } else { return NoneFloat64OptionOption }  }
/* Uint8ArrOption: []uint8->Complex64Option */ func MapComplex64OptionToUint8ArrOption(m Uint8ArrOption, f func([]uint8) Complex64Option) Complex64OptionOption {  if m.IsDefined() { return Complex64Complex64(f(*m.value)) } else { return NoneComplex64OptionOption }  }
/* Uint8ArrOption: []uint8->Complex128Option */ func MapComplex128OptionToUint8ArrOption(m Uint8ArrOption, f func([]uint8) Complex128Option) Complex128OptionOption {  if m.IsDefined() { return Complex128Complex128(f(*m.value)) } else { return NoneComplex128OptionOption }  }
/* Uint8ArrOption: []uint8->AnyOption */ func MapAnyOptionToUint8ArrOption(m Uint8ArrOption, f func([]uint8) AnyOption) AnyOptionOption {  if m.IsDefined() { return AnyOptAny(f(*m.value)) } else { return NoneAnyOptionOption }  }
/* Uint8ArrOption: []uint8->[]bool */ func MapBoolArrToUint8ArrOption(m Uint8ArrOption, f func([]uint8) []bool) BoolArrOption {  if m.IsDefined() { return BoolArrOpt(f(*m.value)) } else { return NoneBoolArrOption }  }
/* Uint8ArrOption: []uint8->[]string */ func MapStringArrToUint8ArrOption(m Uint8ArrOption, f func([]uint8) []string) StringArrOption {  if m.IsDefined() { return StringArrOpt(f(*m.value)) } else { return NoneStringArrOption }  }
/* Uint8ArrOption: []uint8->[]int */ func MapIntArrToUint8ArrOption(m Uint8ArrOption, f func([]uint8) []int) IntArrOption {  if m.IsDefined() { return IntArrOpt(f(*m.value)) } else { return NoneIntArrOption }  }
/* Uint8ArrOption: []uint8->[]int8 */ func MapInt8ArrToUint8ArrOption(m Uint8ArrOption, f func([]uint8) []int8) Int8ArrOption {  if m.IsDefined() { return Int8ArrOpt(f(*m.value)) } else { return NoneInt8ArrOption }  }
/* Uint8ArrOption: []uint8->[]int16 */ func MapInt16ArrToUint8ArrOption(m Uint8ArrOption, f func([]uint8) []int16) Int16ArrOption {  if m.IsDefined() { return Int16ArrOpt(f(*m.value)) } else { return NoneInt16ArrOption }  }
/* Uint8ArrOption: []uint8->[]int32 */ func MapInt32ArrToUint8ArrOption(m Uint8ArrOption, f func([]uint8) []int32) Int32ArrOption {  if m.IsDefined() { return Int32ArrOpt(f(*m.value)) } else { return NoneInt32ArrOption }  }
/* Uint8ArrOption: []uint8->[]int64 */ func MapInt64ArrToUint8ArrOption(m Uint8ArrOption, f func([]uint8) []int64) Int64ArrOption {  if m.IsDefined() { return Int64ArrOpt(f(*m.value)) } else { return NoneInt64ArrOption }  }
/* Uint8ArrOption: []uint8->[]uint */ func MapUintArrToUint8ArrOption(m Uint8ArrOption, f func([]uint8) []uint) UintArrOption {  if m.IsDefined() { return UintArrOpt(f(*m.value)) } else { return NoneUintArrOption }  }
/* Uint8ArrOption: []uint8->[]uint8 */ func MapUint8ArrToUint8ArrOption(m Uint8ArrOption, f func([]uint8) []uint8) Uint8ArrOption {  if m.IsDefined() { return Uint8ArrOpt(f(*m.value)) } else { return NoneUint8ArrOption }  }
/* Uint8ArrOption: []uint8->[]uint16 */ func MapUint16ArrToUint8ArrOption(m Uint8ArrOption, f func([]uint8) []uint16) Uint16ArrOption {  if m.IsDefined() { return Uint16ArrOpt(f(*m.value)) } else { return NoneUint16ArrOption }  }
/* Uint8ArrOption: []uint8->[]uint32 */ func MapUint32ArrToUint8ArrOption(m Uint8ArrOption, f func([]uint8) []uint32) Uint32ArrOption {  if m.IsDefined() { return Uint32ArrOpt(f(*m.value)) } else { return NoneUint32ArrOption }  }
/* Uint8ArrOption: []uint8->[]uint64 */ func MapUint64ArrToUint8ArrOption(m Uint8ArrOption, f func([]uint8) []uint64) Uint64ArrOption {  if m.IsDefined() { return Uint64ArrOpt(f(*m.value)) } else { return NoneUint64ArrOption }  }
/* Uint8ArrOption: []uint8->[]uintptr */ func MapUintptrArrToUint8ArrOption(m Uint8ArrOption, f func([]uint8) []uintptr) UintptrArrOption {  if m.IsDefined() { return UintptrArrOpt(f(*m.value)) } else { return NoneUintptrArrOption }  }
/* Uint8ArrOption: []uint8->[]byte */ func MapByteArrToUint8ArrOption(m Uint8ArrOption, f func([]uint8) []byte) ByteArrOption {  if m.IsDefined() { return ByteArrOpt(f(*m.value)) } else { return NoneByteArrOption }  }
/* Uint8ArrOption: []uint8->[]rune */ func MapRuneArrToUint8ArrOption(m Uint8ArrOption, f func([]uint8) []rune) RuneArrOption {  if m.IsDefined() { return RuneArrOpt(f(*m.value)) } else { return NoneRuneArrOption }  }
/* Uint8ArrOption: []uint8->[]float32 */ func MapFloat32ArrToUint8ArrOption(m Uint8ArrOption, f func([]uint8) []float32) Float32ArrOption {  if m.IsDefined() { return Float32ArrOpt(f(*m.value)) } else { return NoneFloat32ArrOption }  }
/* Uint8ArrOption: []uint8->[]float64 */ func MapFloat64ArrToUint8ArrOption(m Uint8ArrOption, f func([]uint8) []float64) Float64ArrOption {  if m.IsDefined() { return Float64ArrOpt(f(*m.value)) } else { return NoneFloat64ArrOption }  }
/* Uint8ArrOption: []uint8->[]complex64 */ func MapComplex64ArrToUint8ArrOption(m Uint8ArrOption, f func([]uint8) []complex64) Complex64ArrOption {  if m.IsDefined() { return Complex64ArrOpt(f(*m.value)) } else { return NoneComplex64ArrOption }  }
/* Uint8ArrOption: []uint8->[]complex128 */ func MapComplex128ArrToUint8ArrOption(m Uint8ArrOption, f func([]uint8) []complex128) Complex128ArrOption {  if m.IsDefined() { return Complex128ArrOpt(f(*m.value)) } else { return NoneComplex128ArrOption }  }
/* Uint8ArrOption: []uint8->[]Any */ func MapAnyArrToUint8ArrOption(m Uint8ArrOption, f func([]uint8) []Any) AnyArrOption {  if m.IsDefined() { return AnyArrOpt(f(*m.value)) } else { return NoneAnyArrOption }  }
/* Uint8ArrOption: []uint8->BoolList */ func MapBoolListToUint8ArrOption(m Uint8ArrOption, f func([]uint8) BoolList) BoolListOption {  if m.IsDefined() { return BoolListOpt(f(*m.value)) } else { return NoneBoolListOption }  }
/* Uint8ArrOption: []uint8->StringList */ func MapStringListToUint8ArrOption(m Uint8ArrOption, f func([]uint8) StringList) StringListOption {  if m.IsDefined() { return StringListOpt(f(*m.value)) } else { return NoneStringListOption }  }
/* Uint8ArrOption: []uint8->IntList */ func MapIntListToUint8ArrOption(m Uint8ArrOption, f func([]uint8) IntList) IntListOption {  if m.IsDefined() { return IntListOpt(f(*m.value)) } else { return NoneIntListOption }  }
/* Uint8ArrOption: []uint8->Int8List */ func MapInt8ListToUint8ArrOption(m Uint8ArrOption, f func([]uint8) Int8List) Int8ListOption {  if m.IsDefined() { return Int8ListOpt(f(*m.value)) } else { return NoneInt8ListOption }  }
/* Uint8ArrOption: []uint8->Int16List */ func MapInt16ListToUint8ArrOption(m Uint8ArrOption, f func([]uint8) Int16List) Int16ListOption {  if m.IsDefined() { return Int16ListOpt(f(*m.value)) } else { return NoneInt16ListOption }  }
/* Uint8ArrOption: []uint8->Int32List */ func MapInt32ListToUint8ArrOption(m Uint8ArrOption, f func([]uint8) Int32List) Int32ListOption {  if m.IsDefined() { return Int32ListOpt(f(*m.value)) } else { return NoneInt32ListOption }  }
/* Uint8ArrOption: []uint8->Int64List */ func MapInt64ListToUint8ArrOption(m Uint8ArrOption, f func([]uint8) Int64List) Int64ListOption {  if m.IsDefined() { return Int64ListOpt(f(*m.value)) } else { return NoneInt64ListOption }  }
/* Uint8ArrOption: []uint8->UintList */ func MapUintListToUint8ArrOption(m Uint8ArrOption, f func([]uint8) UintList) UintListOption {  if m.IsDefined() { return UintListOpt(f(*m.value)) } else { return NoneUintListOption }  }
/* Uint8ArrOption: []uint8->Uint8List */ func MapUint8ListToUint8ArrOption(m Uint8ArrOption, f func([]uint8) Uint8List) Uint8ListOption {  if m.IsDefined() { return Uint8ListOpt(f(*m.value)) } else { return NoneUint8ListOption }  }
/* Uint8ArrOption: []uint8->Uint16List */ func MapUint16ListToUint8ArrOption(m Uint8ArrOption, f func([]uint8) Uint16List) Uint16ListOption {  if m.IsDefined() { return Uint16ListOpt(f(*m.value)) } else { return NoneUint16ListOption }  }
/* Uint8ArrOption: []uint8->Uint32List */ func MapUint32ListToUint8ArrOption(m Uint8ArrOption, f func([]uint8) Uint32List) Uint32ListOption {  if m.IsDefined() { return Uint32ListOpt(f(*m.value)) } else { return NoneUint32ListOption }  }
/* Uint8ArrOption: []uint8->Uint64List */ func MapUint64ListToUint8ArrOption(m Uint8ArrOption, f func([]uint8) Uint64List) Uint64ListOption {  if m.IsDefined() { return Uint64ListOpt(f(*m.value)) } else { return NoneUint64ListOption }  }
/* Uint8ArrOption: []uint8->UintptrList */ func MapUintptrListToUint8ArrOption(m Uint8ArrOption, f func([]uint8) UintptrList) UintptrListOption {  if m.IsDefined() { return UintptrListOpt(f(*m.value)) } else { return NoneUintptrListOption }  }
/* Uint8ArrOption: []uint8->ByteList */ func MapByteListToUint8ArrOption(m Uint8ArrOption, f func([]uint8) ByteList) ByteListOption {  if m.IsDefined() { return ByteListOpt(f(*m.value)) } else { return NoneByteListOption }  }
/* Uint8ArrOption: []uint8->RuneList */ func MapRuneListToUint8ArrOption(m Uint8ArrOption, f func([]uint8) RuneList) RuneListOption {  if m.IsDefined() { return RuneListOpt(f(*m.value)) } else { return NoneRuneListOption }  }
/* Uint8ArrOption: []uint8->Float32List */ func MapFloat32ListToUint8ArrOption(m Uint8ArrOption, f func([]uint8) Float32List) Float32ListOption {  if m.IsDefined() { return Float32ListOpt(f(*m.value)) } else { return NoneFloat32ListOption }  }
/* Uint8ArrOption: []uint8->Float64List */ func MapFloat64ListToUint8ArrOption(m Uint8ArrOption, f func([]uint8) Float64List) Float64ListOption {  if m.IsDefined() { return Float64ListOpt(f(*m.value)) } else { return NoneFloat64ListOption }  }
/* Uint8ArrOption: []uint8->Complex64List */ func MapComplex64ListToUint8ArrOption(m Uint8ArrOption, f func([]uint8) Complex64List) Complex64ListOption {  if m.IsDefined() { return Complex64ListOpt(f(*m.value)) } else { return NoneComplex64ListOption }  }
/* Uint8ArrOption: []uint8->Complex128List */ func MapComplex128ListToUint8ArrOption(m Uint8ArrOption, f func([]uint8) Complex128List) Complex128ListOption {  if m.IsDefined() { return Complex128ListOpt(f(*m.value)) } else { return NoneComplex128ListOption }  }
/* Uint8ArrOption: []uint8->AnyList */ func MapAnyListToUint8ArrOption(m Uint8ArrOption, f func([]uint8) AnyList) AnyListOption {  if m.IsDefined() { return AnyListOpt(f(*m.value)) } else { return NoneAnyListOption }  }
/* Uint16ArrOption: []uint16->bool */ func MapBoolToUint16ArrOption(m Uint16ArrOption, f func([]uint16) bool) BoolOption {  if m.IsDefined() { return Bool(f(*m.value)) } else { return NoneBoolOption }  }
/* Uint16ArrOption: []uint16->string */ func MapStringToUint16ArrOption(m Uint16ArrOption, f func([]uint16) string) StringOption {  if m.IsDefined() { return String(f(*m.value)) } else { return NoneStringOption }  }
/* Uint16ArrOption: []uint16->int */ func MapIntToUint16ArrOption(m Uint16ArrOption, f func([]uint16) int) IntOption {  if m.IsDefined() { return Int(f(*m.value)) } else { return NoneIntOption }  }
/* Uint16ArrOption: []uint16->int8 */ func MapInt8ToUint16ArrOption(m Uint16ArrOption, f func([]uint16) int8) Int8Option {  if m.IsDefined() { return Int8(f(*m.value)) } else { return NoneInt8Option }  }
/* Uint16ArrOption: []uint16->int16 */ func MapInt16ToUint16ArrOption(m Uint16ArrOption, f func([]uint16) int16) Int16Option {  if m.IsDefined() { return Int16(f(*m.value)) } else { return NoneInt16Option }  }
/* Uint16ArrOption: []uint16->int32 */ func MapInt32ToUint16ArrOption(m Uint16ArrOption, f func([]uint16) int32) Int32Option {  if m.IsDefined() { return Int32(f(*m.value)) } else { return NoneInt32Option }  }
/* Uint16ArrOption: []uint16->int64 */ func MapInt64ToUint16ArrOption(m Uint16ArrOption, f func([]uint16) int64) Int64Option {  if m.IsDefined() { return Int64(f(*m.value)) } else { return NoneInt64Option }  }
/* Uint16ArrOption: []uint16->uint */ func MapUintToUint16ArrOption(m Uint16ArrOption, f func([]uint16) uint) UintOption {  if m.IsDefined() { return Uint(f(*m.value)) } else { return NoneUintOption }  }
/* Uint16ArrOption: []uint16->uint8 */ func MapUint8ToUint16ArrOption(m Uint16ArrOption, f func([]uint16) uint8) Uint8Option {  if m.IsDefined() { return Uint8(f(*m.value)) } else { return NoneUint8Option }  }
/* Uint16ArrOption: []uint16->uint16 */ func MapUint16ToUint16ArrOption(m Uint16ArrOption, f func([]uint16) uint16) Uint16Option {  if m.IsDefined() { return Uint16(f(*m.value)) } else { return NoneUint16Option }  }
/* Uint16ArrOption: []uint16->uint32 */ func MapUint32ToUint16ArrOption(m Uint16ArrOption, f func([]uint16) uint32) Uint32Option {  if m.IsDefined() { return Uint32(f(*m.value)) } else { return NoneUint32Option }  }
/* Uint16ArrOption: []uint16->uint64 */ func MapUint64ToUint16ArrOption(m Uint16ArrOption, f func([]uint16) uint64) Uint64Option {  if m.IsDefined() { return Uint64(f(*m.value)) } else { return NoneUint64Option }  }
/* Uint16ArrOption: []uint16->uintptr */ func MapUintptrToUint16ArrOption(m Uint16ArrOption, f func([]uint16) uintptr) UintptrOption {  if m.IsDefined() { return Uintptr(f(*m.value)) } else { return NoneUintptrOption }  }
/* Uint16ArrOption: []uint16->byte */ func MapByteToUint16ArrOption(m Uint16ArrOption, f func([]uint16) byte) ByteOption {  if m.IsDefined() { return Byte(f(*m.value)) } else { return NoneByteOption }  }
/* Uint16ArrOption: []uint16->rune */ func MapRuneToUint16ArrOption(m Uint16ArrOption, f func([]uint16) rune) RuneOption {  if m.IsDefined() { return Rune(f(*m.value)) } else { return NoneRuneOption }  }
/* Uint16ArrOption: []uint16->float32 */ func MapFloat32ToUint16ArrOption(m Uint16ArrOption, f func([]uint16) float32) Float32Option {  if m.IsDefined() { return Float32(f(*m.value)) } else { return NoneFloat32Option }  }
/* Uint16ArrOption: []uint16->float64 */ func MapFloat64ToUint16ArrOption(m Uint16ArrOption, f func([]uint16) float64) Float64Option {  if m.IsDefined() { return Float64(f(*m.value)) } else { return NoneFloat64Option }  }
/* Uint16ArrOption: []uint16->complex64 */ func MapComplex64ToUint16ArrOption(m Uint16ArrOption, f func([]uint16) complex64) Complex64Option {  if m.IsDefined() { return Complex64(f(*m.value)) } else { return NoneComplex64Option }  }
/* Uint16ArrOption: []uint16->complex128 */ func MapComplex128ToUint16ArrOption(m Uint16ArrOption, f func([]uint16) complex128) Complex128Option {  if m.IsDefined() { return Complex128(f(*m.value)) } else { return NoneComplex128Option }  }
/* Uint16ArrOption: []uint16->Any */ func MapAnyToUint16ArrOption(m Uint16ArrOption, f func([]uint16) Any) AnyOption {  if m.IsDefined() { return AnyOpt(f(*m.value)) } else { return NoneAnyOption }  }
/* Uint16ArrOption: []uint16->BoolOption */ func MapBoolOptionToUint16ArrOption(m Uint16ArrOption, f func([]uint16) BoolOption) BoolOptionOption {  if m.IsDefined() { return BoolBool(f(*m.value)) } else { return NoneBoolOptionOption }  }
/* Uint16ArrOption: []uint16->StringOption */ func MapStringOptionToUint16ArrOption(m Uint16ArrOption, f func([]uint16) StringOption) StringOptionOption {  if m.IsDefined() { return StringString(f(*m.value)) } else { return NoneStringOptionOption }  }
/* Uint16ArrOption: []uint16->IntOption */ func MapIntOptionToUint16ArrOption(m Uint16ArrOption, f func([]uint16) IntOption) IntOptionOption {  if m.IsDefined() { return IntInt(f(*m.value)) } else { return NoneIntOptionOption }  }
/* Uint16ArrOption: []uint16->Int8Option */ func MapInt8OptionToUint16ArrOption(m Uint16ArrOption, f func([]uint16) Int8Option) Int8OptionOption {  if m.IsDefined() { return Int8Int8(f(*m.value)) } else { return NoneInt8OptionOption }  }
/* Uint16ArrOption: []uint16->Int16Option */ func MapInt16OptionToUint16ArrOption(m Uint16ArrOption, f func([]uint16) Int16Option) Int16OptionOption {  if m.IsDefined() { return Int16Int16(f(*m.value)) } else { return NoneInt16OptionOption }  }
/* Uint16ArrOption: []uint16->Int32Option */ func MapInt32OptionToUint16ArrOption(m Uint16ArrOption, f func([]uint16) Int32Option) Int32OptionOption {  if m.IsDefined() { return Int32Int32(f(*m.value)) } else { return NoneInt32OptionOption }  }
/* Uint16ArrOption: []uint16->Int64Option */ func MapInt64OptionToUint16ArrOption(m Uint16ArrOption, f func([]uint16) Int64Option) Int64OptionOption {  if m.IsDefined() { return Int64Int64(f(*m.value)) } else { return NoneInt64OptionOption }  }
/* Uint16ArrOption: []uint16->UintOption */ func MapUintOptionToUint16ArrOption(m Uint16ArrOption, f func([]uint16) UintOption) UintOptionOption {  if m.IsDefined() { return UintUint(f(*m.value)) } else { return NoneUintOptionOption }  }
/* Uint16ArrOption: []uint16->Uint8Option */ func MapUint8OptionToUint16ArrOption(m Uint16ArrOption, f func([]uint16) Uint8Option) Uint8OptionOption {  if m.IsDefined() { return Uint8Uint8(f(*m.value)) } else { return NoneUint8OptionOption }  }
/* Uint16ArrOption: []uint16->Uint16Option */ func MapUint16OptionToUint16ArrOption(m Uint16ArrOption, f func([]uint16) Uint16Option) Uint16OptionOption {  if m.IsDefined() { return Uint16Uint16(f(*m.value)) } else { return NoneUint16OptionOption }  }
/* Uint16ArrOption: []uint16->Uint32Option */ func MapUint32OptionToUint16ArrOption(m Uint16ArrOption, f func([]uint16) Uint32Option) Uint32OptionOption {  if m.IsDefined() { return Uint32Uint32(f(*m.value)) } else { return NoneUint32OptionOption }  }
/* Uint16ArrOption: []uint16->Uint64Option */ func MapUint64OptionToUint16ArrOption(m Uint16ArrOption, f func([]uint16) Uint64Option) Uint64OptionOption {  if m.IsDefined() { return Uint64Uint64(f(*m.value)) } else { return NoneUint64OptionOption }  }
/* Uint16ArrOption: []uint16->UintptrOption */ func MapUintptrOptionToUint16ArrOption(m Uint16ArrOption, f func([]uint16) UintptrOption) UintptrOptionOption {  if m.IsDefined() { return UintptrUintptr(f(*m.value)) } else { return NoneUintptrOptionOption }  }
/* Uint16ArrOption: []uint16->ByteOption */ func MapByteOptionToUint16ArrOption(m Uint16ArrOption, f func([]uint16) ByteOption) ByteOptionOption {  if m.IsDefined() { return ByteByte(f(*m.value)) } else { return NoneByteOptionOption }  }
/* Uint16ArrOption: []uint16->RuneOption */ func MapRuneOptionToUint16ArrOption(m Uint16ArrOption, f func([]uint16) RuneOption) RuneOptionOption {  if m.IsDefined() { return RuneRune(f(*m.value)) } else { return NoneRuneOptionOption }  }
/* Uint16ArrOption: []uint16->Float32Option */ func MapFloat32OptionToUint16ArrOption(m Uint16ArrOption, f func([]uint16) Float32Option) Float32OptionOption {  if m.IsDefined() { return Float32Float32(f(*m.value)) } else { return NoneFloat32OptionOption }  }
/* Uint16ArrOption: []uint16->Float64Option */ func MapFloat64OptionToUint16ArrOption(m Uint16ArrOption, f func([]uint16) Float64Option) Float64OptionOption {  if m.IsDefined() { return Float64Float64(f(*m.value)) } else { return NoneFloat64OptionOption }  }
/* Uint16ArrOption: []uint16->Complex64Option */ func MapComplex64OptionToUint16ArrOption(m Uint16ArrOption, f func([]uint16) Complex64Option) Complex64OptionOption {  if m.IsDefined() { return Complex64Complex64(f(*m.value)) } else { return NoneComplex64OptionOption }  }
/* Uint16ArrOption: []uint16->Complex128Option */ func MapComplex128OptionToUint16ArrOption(m Uint16ArrOption, f func([]uint16) Complex128Option) Complex128OptionOption {  if m.IsDefined() { return Complex128Complex128(f(*m.value)) } else { return NoneComplex128OptionOption }  }
/* Uint16ArrOption: []uint16->AnyOption */ func MapAnyOptionToUint16ArrOption(m Uint16ArrOption, f func([]uint16) AnyOption) AnyOptionOption {  if m.IsDefined() { return AnyOptAny(f(*m.value)) } else { return NoneAnyOptionOption }  }
/* Uint16ArrOption: []uint16->[]bool */ func MapBoolArrToUint16ArrOption(m Uint16ArrOption, f func([]uint16) []bool) BoolArrOption {  if m.IsDefined() { return BoolArrOpt(f(*m.value)) } else { return NoneBoolArrOption }  }
/* Uint16ArrOption: []uint16->[]string */ func MapStringArrToUint16ArrOption(m Uint16ArrOption, f func([]uint16) []string) StringArrOption {  if m.IsDefined() { return StringArrOpt(f(*m.value)) } else { return NoneStringArrOption }  }
/* Uint16ArrOption: []uint16->[]int */ func MapIntArrToUint16ArrOption(m Uint16ArrOption, f func([]uint16) []int) IntArrOption {  if m.IsDefined() { return IntArrOpt(f(*m.value)) } else { return NoneIntArrOption }  }
/* Uint16ArrOption: []uint16->[]int8 */ func MapInt8ArrToUint16ArrOption(m Uint16ArrOption, f func([]uint16) []int8) Int8ArrOption {  if m.IsDefined() { return Int8ArrOpt(f(*m.value)) } else { return NoneInt8ArrOption }  }
/* Uint16ArrOption: []uint16->[]int16 */ func MapInt16ArrToUint16ArrOption(m Uint16ArrOption, f func([]uint16) []int16) Int16ArrOption {  if m.IsDefined() { return Int16ArrOpt(f(*m.value)) } else { return NoneInt16ArrOption }  }
/* Uint16ArrOption: []uint16->[]int32 */ func MapInt32ArrToUint16ArrOption(m Uint16ArrOption, f func([]uint16) []int32) Int32ArrOption {  if m.IsDefined() { return Int32ArrOpt(f(*m.value)) } else { return NoneInt32ArrOption }  }
/* Uint16ArrOption: []uint16->[]int64 */ func MapInt64ArrToUint16ArrOption(m Uint16ArrOption, f func([]uint16) []int64) Int64ArrOption {  if m.IsDefined() { return Int64ArrOpt(f(*m.value)) } else { return NoneInt64ArrOption }  }
/* Uint16ArrOption: []uint16->[]uint */ func MapUintArrToUint16ArrOption(m Uint16ArrOption, f func([]uint16) []uint) UintArrOption {  if m.IsDefined() { return UintArrOpt(f(*m.value)) } else { return NoneUintArrOption }  }
/* Uint16ArrOption: []uint16->[]uint8 */ func MapUint8ArrToUint16ArrOption(m Uint16ArrOption, f func([]uint16) []uint8) Uint8ArrOption {  if m.IsDefined() { return Uint8ArrOpt(f(*m.value)) } else { return NoneUint8ArrOption }  }
/* Uint16ArrOption: []uint16->[]uint16 */ func MapUint16ArrToUint16ArrOption(m Uint16ArrOption, f func([]uint16) []uint16) Uint16ArrOption {  if m.IsDefined() { return Uint16ArrOpt(f(*m.value)) } else { return NoneUint16ArrOption }  }
/* Uint16ArrOption: []uint16->[]uint32 */ func MapUint32ArrToUint16ArrOption(m Uint16ArrOption, f func([]uint16) []uint32) Uint32ArrOption {  if m.IsDefined() { return Uint32ArrOpt(f(*m.value)) } else { return NoneUint32ArrOption }  }
/* Uint16ArrOption: []uint16->[]uint64 */ func MapUint64ArrToUint16ArrOption(m Uint16ArrOption, f func([]uint16) []uint64) Uint64ArrOption {  if m.IsDefined() { return Uint64ArrOpt(f(*m.value)) } else { return NoneUint64ArrOption }  }
/* Uint16ArrOption: []uint16->[]uintptr */ func MapUintptrArrToUint16ArrOption(m Uint16ArrOption, f func([]uint16) []uintptr) UintptrArrOption {  if m.IsDefined() { return UintptrArrOpt(f(*m.value)) } else { return NoneUintptrArrOption }  }
/* Uint16ArrOption: []uint16->[]byte */ func MapByteArrToUint16ArrOption(m Uint16ArrOption, f func([]uint16) []byte) ByteArrOption {  if m.IsDefined() { return ByteArrOpt(f(*m.value)) } else { return NoneByteArrOption }  }
/* Uint16ArrOption: []uint16->[]rune */ func MapRuneArrToUint16ArrOption(m Uint16ArrOption, f func([]uint16) []rune) RuneArrOption {  if m.IsDefined() { return RuneArrOpt(f(*m.value)) } else { return NoneRuneArrOption }  }
/* Uint16ArrOption: []uint16->[]float32 */ func MapFloat32ArrToUint16ArrOption(m Uint16ArrOption, f func([]uint16) []float32) Float32ArrOption {  if m.IsDefined() { return Float32ArrOpt(f(*m.value)) } else { return NoneFloat32ArrOption }  }
/* Uint16ArrOption: []uint16->[]float64 */ func MapFloat64ArrToUint16ArrOption(m Uint16ArrOption, f func([]uint16) []float64) Float64ArrOption {  if m.IsDefined() { return Float64ArrOpt(f(*m.value)) } else { return NoneFloat64ArrOption }  }
/* Uint16ArrOption: []uint16->[]complex64 */ func MapComplex64ArrToUint16ArrOption(m Uint16ArrOption, f func([]uint16) []complex64) Complex64ArrOption {  if m.IsDefined() { return Complex64ArrOpt(f(*m.value)) } else { return NoneComplex64ArrOption }  }
/* Uint16ArrOption: []uint16->[]complex128 */ func MapComplex128ArrToUint16ArrOption(m Uint16ArrOption, f func([]uint16) []complex128) Complex128ArrOption {  if m.IsDefined() { return Complex128ArrOpt(f(*m.value)) } else { return NoneComplex128ArrOption }  }
/* Uint16ArrOption: []uint16->[]Any */ func MapAnyArrToUint16ArrOption(m Uint16ArrOption, f func([]uint16) []Any) AnyArrOption {  if m.IsDefined() { return AnyArrOpt(f(*m.value)) } else { return NoneAnyArrOption }  }
/* Uint16ArrOption: []uint16->BoolList */ func MapBoolListToUint16ArrOption(m Uint16ArrOption, f func([]uint16) BoolList) BoolListOption {  if m.IsDefined() { return BoolListOpt(f(*m.value)) } else { return NoneBoolListOption }  }
/* Uint16ArrOption: []uint16->StringList */ func MapStringListToUint16ArrOption(m Uint16ArrOption, f func([]uint16) StringList) StringListOption {  if m.IsDefined() { return StringListOpt(f(*m.value)) } else { return NoneStringListOption }  }
/* Uint16ArrOption: []uint16->IntList */ func MapIntListToUint16ArrOption(m Uint16ArrOption, f func([]uint16) IntList) IntListOption {  if m.IsDefined() { return IntListOpt(f(*m.value)) } else { return NoneIntListOption }  }
/* Uint16ArrOption: []uint16->Int8List */ func MapInt8ListToUint16ArrOption(m Uint16ArrOption, f func([]uint16) Int8List) Int8ListOption {  if m.IsDefined() { return Int8ListOpt(f(*m.value)) } else { return NoneInt8ListOption }  }
/* Uint16ArrOption: []uint16->Int16List */ func MapInt16ListToUint16ArrOption(m Uint16ArrOption, f func([]uint16) Int16List) Int16ListOption {  if m.IsDefined() { return Int16ListOpt(f(*m.value)) } else { return NoneInt16ListOption }  }
/* Uint16ArrOption: []uint16->Int32List */ func MapInt32ListToUint16ArrOption(m Uint16ArrOption, f func([]uint16) Int32List) Int32ListOption {  if m.IsDefined() { return Int32ListOpt(f(*m.value)) } else { return NoneInt32ListOption }  }
/* Uint16ArrOption: []uint16->Int64List */ func MapInt64ListToUint16ArrOption(m Uint16ArrOption, f func([]uint16) Int64List) Int64ListOption {  if m.IsDefined() { return Int64ListOpt(f(*m.value)) } else { return NoneInt64ListOption }  }
/* Uint16ArrOption: []uint16->UintList */ func MapUintListToUint16ArrOption(m Uint16ArrOption, f func([]uint16) UintList) UintListOption {  if m.IsDefined() { return UintListOpt(f(*m.value)) } else { return NoneUintListOption }  }
/* Uint16ArrOption: []uint16->Uint8List */ func MapUint8ListToUint16ArrOption(m Uint16ArrOption, f func([]uint16) Uint8List) Uint8ListOption {  if m.IsDefined() { return Uint8ListOpt(f(*m.value)) } else { return NoneUint8ListOption }  }
/* Uint16ArrOption: []uint16->Uint16List */ func MapUint16ListToUint16ArrOption(m Uint16ArrOption, f func([]uint16) Uint16List) Uint16ListOption {  if m.IsDefined() { return Uint16ListOpt(f(*m.value)) } else { return NoneUint16ListOption }  }
/* Uint16ArrOption: []uint16->Uint32List */ func MapUint32ListToUint16ArrOption(m Uint16ArrOption, f func([]uint16) Uint32List) Uint32ListOption {  if m.IsDefined() { return Uint32ListOpt(f(*m.value)) } else { return NoneUint32ListOption }  }
/* Uint16ArrOption: []uint16->Uint64List */ func MapUint64ListToUint16ArrOption(m Uint16ArrOption, f func([]uint16) Uint64List) Uint64ListOption {  if m.IsDefined() { return Uint64ListOpt(f(*m.value)) } else { return NoneUint64ListOption }  }
/* Uint16ArrOption: []uint16->UintptrList */ func MapUintptrListToUint16ArrOption(m Uint16ArrOption, f func([]uint16) UintptrList) UintptrListOption {  if m.IsDefined() { return UintptrListOpt(f(*m.value)) } else { return NoneUintptrListOption }  }
/* Uint16ArrOption: []uint16->ByteList */ func MapByteListToUint16ArrOption(m Uint16ArrOption, f func([]uint16) ByteList) ByteListOption {  if m.IsDefined() { return ByteListOpt(f(*m.value)) } else { return NoneByteListOption }  }
/* Uint16ArrOption: []uint16->RuneList */ func MapRuneListToUint16ArrOption(m Uint16ArrOption, f func([]uint16) RuneList) RuneListOption {  if m.IsDefined() { return RuneListOpt(f(*m.value)) } else { return NoneRuneListOption }  }
/* Uint16ArrOption: []uint16->Float32List */ func MapFloat32ListToUint16ArrOption(m Uint16ArrOption, f func([]uint16) Float32List) Float32ListOption {  if m.IsDefined() { return Float32ListOpt(f(*m.value)) } else { return NoneFloat32ListOption }  }
/* Uint16ArrOption: []uint16->Float64List */ func MapFloat64ListToUint16ArrOption(m Uint16ArrOption, f func([]uint16) Float64List) Float64ListOption {  if m.IsDefined() { return Float64ListOpt(f(*m.value)) } else { return NoneFloat64ListOption }  }
/* Uint16ArrOption: []uint16->Complex64List */ func MapComplex64ListToUint16ArrOption(m Uint16ArrOption, f func([]uint16) Complex64List) Complex64ListOption {  if m.IsDefined() { return Complex64ListOpt(f(*m.value)) } else { return NoneComplex64ListOption }  }
/* Uint16ArrOption: []uint16->Complex128List */ func MapComplex128ListToUint16ArrOption(m Uint16ArrOption, f func([]uint16) Complex128List) Complex128ListOption {  if m.IsDefined() { return Complex128ListOpt(f(*m.value)) } else { return NoneComplex128ListOption }  }
/* Uint16ArrOption: []uint16->AnyList */ func MapAnyListToUint16ArrOption(m Uint16ArrOption, f func([]uint16) AnyList) AnyListOption {  if m.IsDefined() { return AnyListOpt(f(*m.value)) } else { return NoneAnyListOption }  }
/* Uint32ArrOption: []uint32->bool */ func MapBoolToUint32ArrOption(m Uint32ArrOption, f func([]uint32) bool) BoolOption {  if m.IsDefined() { return Bool(f(*m.value)) } else { return NoneBoolOption }  }
/* Uint32ArrOption: []uint32->string */ func MapStringToUint32ArrOption(m Uint32ArrOption, f func([]uint32) string) StringOption {  if m.IsDefined() { return String(f(*m.value)) } else { return NoneStringOption }  }
/* Uint32ArrOption: []uint32->int */ func MapIntToUint32ArrOption(m Uint32ArrOption, f func([]uint32) int) IntOption {  if m.IsDefined() { return Int(f(*m.value)) } else { return NoneIntOption }  }
/* Uint32ArrOption: []uint32->int8 */ func MapInt8ToUint32ArrOption(m Uint32ArrOption, f func([]uint32) int8) Int8Option {  if m.IsDefined() { return Int8(f(*m.value)) } else { return NoneInt8Option }  }
/* Uint32ArrOption: []uint32->int16 */ func MapInt16ToUint32ArrOption(m Uint32ArrOption, f func([]uint32) int16) Int16Option {  if m.IsDefined() { return Int16(f(*m.value)) } else { return NoneInt16Option }  }
/* Uint32ArrOption: []uint32->int32 */ func MapInt32ToUint32ArrOption(m Uint32ArrOption, f func([]uint32) int32) Int32Option {  if m.IsDefined() { return Int32(f(*m.value)) } else { return NoneInt32Option }  }
/* Uint32ArrOption: []uint32->int64 */ func MapInt64ToUint32ArrOption(m Uint32ArrOption, f func([]uint32) int64) Int64Option {  if m.IsDefined() { return Int64(f(*m.value)) } else { return NoneInt64Option }  }
/* Uint32ArrOption: []uint32->uint */ func MapUintToUint32ArrOption(m Uint32ArrOption, f func([]uint32) uint) UintOption {  if m.IsDefined() { return Uint(f(*m.value)) } else { return NoneUintOption }  }
/* Uint32ArrOption: []uint32->uint8 */ func MapUint8ToUint32ArrOption(m Uint32ArrOption, f func([]uint32) uint8) Uint8Option {  if m.IsDefined() { return Uint8(f(*m.value)) } else { return NoneUint8Option }  }
/* Uint32ArrOption: []uint32->uint16 */ func MapUint16ToUint32ArrOption(m Uint32ArrOption, f func([]uint32) uint16) Uint16Option {  if m.IsDefined() { return Uint16(f(*m.value)) } else { return NoneUint16Option }  }
/* Uint32ArrOption: []uint32->uint32 */ func MapUint32ToUint32ArrOption(m Uint32ArrOption, f func([]uint32) uint32) Uint32Option {  if m.IsDefined() { return Uint32(f(*m.value)) } else { return NoneUint32Option }  }
/* Uint32ArrOption: []uint32->uint64 */ func MapUint64ToUint32ArrOption(m Uint32ArrOption, f func([]uint32) uint64) Uint64Option {  if m.IsDefined() { return Uint64(f(*m.value)) } else { return NoneUint64Option }  }
/* Uint32ArrOption: []uint32->uintptr */ func MapUintptrToUint32ArrOption(m Uint32ArrOption, f func([]uint32) uintptr) UintptrOption {  if m.IsDefined() { return Uintptr(f(*m.value)) } else { return NoneUintptrOption }  }
/* Uint32ArrOption: []uint32->byte */ func MapByteToUint32ArrOption(m Uint32ArrOption, f func([]uint32) byte) ByteOption {  if m.IsDefined() { return Byte(f(*m.value)) } else { return NoneByteOption }  }
/* Uint32ArrOption: []uint32->rune */ func MapRuneToUint32ArrOption(m Uint32ArrOption, f func([]uint32) rune) RuneOption {  if m.IsDefined() { return Rune(f(*m.value)) } else { return NoneRuneOption }  }
/* Uint32ArrOption: []uint32->float32 */ func MapFloat32ToUint32ArrOption(m Uint32ArrOption, f func([]uint32) float32) Float32Option {  if m.IsDefined() { return Float32(f(*m.value)) } else { return NoneFloat32Option }  }
/* Uint32ArrOption: []uint32->float64 */ func MapFloat64ToUint32ArrOption(m Uint32ArrOption, f func([]uint32) float64) Float64Option {  if m.IsDefined() { return Float64(f(*m.value)) } else { return NoneFloat64Option }  }
/* Uint32ArrOption: []uint32->complex64 */ func MapComplex64ToUint32ArrOption(m Uint32ArrOption, f func([]uint32) complex64) Complex64Option {  if m.IsDefined() { return Complex64(f(*m.value)) } else { return NoneComplex64Option }  }
/* Uint32ArrOption: []uint32->complex128 */ func MapComplex128ToUint32ArrOption(m Uint32ArrOption, f func([]uint32) complex128) Complex128Option {  if m.IsDefined() { return Complex128(f(*m.value)) } else { return NoneComplex128Option }  }
/* Uint32ArrOption: []uint32->Any */ func MapAnyToUint32ArrOption(m Uint32ArrOption, f func([]uint32) Any) AnyOption {  if m.IsDefined() { return AnyOpt(f(*m.value)) } else { return NoneAnyOption }  }
/* Uint32ArrOption: []uint32->BoolOption */ func MapBoolOptionToUint32ArrOption(m Uint32ArrOption, f func([]uint32) BoolOption) BoolOptionOption {  if m.IsDefined() { return BoolBool(f(*m.value)) } else { return NoneBoolOptionOption }  }
/* Uint32ArrOption: []uint32->StringOption */ func MapStringOptionToUint32ArrOption(m Uint32ArrOption, f func([]uint32) StringOption) StringOptionOption {  if m.IsDefined() { return StringString(f(*m.value)) } else { return NoneStringOptionOption }  }
/* Uint32ArrOption: []uint32->IntOption */ func MapIntOptionToUint32ArrOption(m Uint32ArrOption, f func([]uint32) IntOption) IntOptionOption {  if m.IsDefined() { return IntInt(f(*m.value)) } else { return NoneIntOptionOption }  }
/* Uint32ArrOption: []uint32->Int8Option */ func MapInt8OptionToUint32ArrOption(m Uint32ArrOption, f func([]uint32) Int8Option) Int8OptionOption {  if m.IsDefined() { return Int8Int8(f(*m.value)) } else { return NoneInt8OptionOption }  }
/* Uint32ArrOption: []uint32->Int16Option */ func MapInt16OptionToUint32ArrOption(m Uint32ArrOption, f func([]uint32) Int16Option) Int16OptionOption {  if m.IsDefined() { return Int16Int16(f(*m.value)) } else { return NoneInt16OptionOption }  }
/* Uint32ArrOption: []uint32->Int32Option */ func MapInt32OptionToUint32ArrOption(m Uint32ArrOption, f func([]uint32) Int32Option) Int32OptionOption {  if m.IsDefined() { return Int32Int32(f(*m.value)) } else { return NoneInt32OptionOption }  }
/* Uint32ArrOption: []uint32->Int64Option */ func MapInt64OptionToUint32ArrOption(m Uint32ArrOption, f func([]uint32) Int64Option) Int64OptionOption {  if m.IsDefined() { return Int64Int64(f(*m.value)) } else { return NoneInt64OptionOption }  }
/* Uint32ArrOption: []uint32->UintOption */ func MapUintOptionToUint32ArrOption(m Uint32ArrOption, f func([]uint32) UintOption) UintOptionOption {  if m.IsDefined() { return UintUint(f(*m.value)) } else { return NoneUintOptionOption }  }
/* Uint32ArrOption: []uint32->Uint8Option */ func MapUint8OptionToUint32ArrOption(m Uint32ArrOption, f func([]uint32) Uint8Option) Uint8OptionOption {  if m.IsDefined() { return Uint8Uint8(f(*m.value)) } else { return NoneUint8OptionOption }  }
/* Uint32ArrOption: []uint32->Uint16Option */ func MapUint16OptionToUint32ArrOption(m Uint32ArrOption, f func([]uint32) Uint16Option) Uint16OptionOption {  if m.IsDefined() { return Uint16Uint16(f(*m.value)) } else { return NoneUint16OptionOption }  }
/* Uint32ArrOption: []uint32->Uint32Option */ func MapUint32OptionToUint32ArrOption(m Uint32ArrOption, f func([]uint32) Uint32Option) Uint32OptionOption {  if m.IsDefined() { return Uint32Uint32(f(*m.value)) } else { return NoneUint32OptionOption }  }
/* Uint32ArrOption: []uint32->Uint64Option */ func MapUint64OptionToUint32ArrOption(m Uint32ArrOption, f func([]uint32) Uint64Option) Uint64OptionOption {  if m.IsDefined() { return Uint64Uint64(f(*m.value)) } else { return NoneUint64OptionOption }  }
/* Uint32ArrOption: []uint32->UintptrOption */ func MapUintptrOptionToUint32ArrOption(m Uint32ArrOption, f func([]uint32) UintptrOption) UintptrOptionOption {  if m.IsDefined() { return UintptrUintptr(f(*m.value)) } else { return NoneUintptrOptionOption }  }
/* Uint32ArrOption: []uint32->ByteOption */ func MapByteOptionToUint32ArrOption(m Uint32ArrOption, f func([]uint32) ByteOption) ByteOptionOption {  if m.IsDefined() { return ByteByte(f(*m.value)) } else { return NoneByteOptionOption }  }
/* Uint32ArrOption: []uint32->RuneOption */ func MapRuneOptionToUint32ArrOption(m Uint32ArrOption, f func([]uint32) RuneOption) RuneOptionOption {  if m.IsDefined() { return RuneRune(f(*m.value)) } else { return NoneRuneOptionOption }  }
/* Uint32ArrOption: []uint32->Float32Option */ func MapFloat32OptionToUint32ArrOption(m Uint32ArrOption, f func([]uint32) Float32Option) Float32OptionOption {  if m.IsDefined() { return Float32Float32(f(*m.value)) } else { return NoneFloat32OptionOption }  }
/* Uint32ArrOption: []uint32->Float64Option */ func MapFloat64OptionToUint32ArrOption(m Uint32ArrOption, f func([]uint32) Float64Option) Float64OptionOption {  if m.IsDefined() { return Float64Float64(f(*m.value)) } else { return NoneFloat64OptionOption }  }
/* Uint32ArrOption: []uint32->Complex64Option */ func MapComplex64OptionToUint32ArrOption(m Uint32ArrOption, f func([]uint32) Complex64Option) Complex64OptionOption {  if m.IsDefined() { return Complex64Complex64(f(*m.value)) } else { return NoneComplex64OptionOption }  }
/* Uint32ArrOption: []uint32->Complex128Option */ func MapComplex128OptionToUint32ArrOption(m Uint32ArrOption, f func([]uint32) Complex128Option) Complex128OptionOption {  if m.IsDefined() { return Complex128Complex128(f(*m.value)) } else { return NoneComplex128OptionOption }  }
/* Uint32ArrOption: []uint32->AnyOption */ func MapAnyOptionToUint32ArrOption(m Uint32ArrOption, f func([]uint32) AnyOption) AnyOptionOption {  if m.IsDefined() { return AnyOptAny(f(*m.value)) } else { return NoneAnyOptionOption }  }
/* Uint32ArrOption: []uint32->[]bool */ func MapBoolArrToUint32ArrOption(m Uint32ArrOption, f func([]uint32) []bool) BoolArrOption {  if m.IsDefined() { return BoolArrOpt(f(*m.value)) } else { return NoneBoolArrOption }  }
/* Uint32ArrOption: []uint32->[]string */ func MapStringArrToUint32ArrOption(m Uint32ArrOption, f func([]uint32) []string) StringArrOption {  if m.IsDefined() { return StringArrOpt(f(*m.value)) } else { return NoneStringArrOption }  }
/* Uint32ArrOption: []uint32->[]int */ func MapIntArrToUint32ArrOption(m Uint32ArrOption, f func([]uint32) []int) IntArrOption {  if m.IsDefined() { return IntArrOpt(f(*m.value)) } else { return NoneIntArrOption }  }
/* Uint32ArrOption: []uint32->[]int8 */ func MapInt8ArrToUint32ArrOption(m Uint32ArrOption, f func([]uint32) []int8) Int8ArrOption {  if m.IsDefined() { return Int8ArrOpt(f(*m.value)) } else { return NoneInt8ArrOption }  }
/* Uint32ArrOption: []uint32->[]int16 */ func MapInt16ArrToUint32ArrOption(m Uint32ArrOption, f func([]uint32) []int16) Int16ArrOption {  if m.IsDefined() { return Int16ArrOpt(f(*m.value)) } else { return NoneInt16ArrOption }  }
/* Uint32ArrOption: []uint32->[]int32 */ func MapInt32ArrToUint32ArrOption(m Uint32ArrOption, f func([]uint32) []int32) Int32ArrOption {  if m.IsDefined() { return Int32ArrOpt(f(*m.value)) } else { return NoneInt32ArrOption }  }
/* Uint32ArrOption: []uint32->[]int64 */ func MapInt64ArrToUint32ArrOption(m Uint32ArrOption, f func([]uint32) []int64) Int64ArrOption {  if m.IsDefined() { return Int64ArrOpt(f(*m.value)) } else { return NoneInt64ArrOption }  }
/* Uint32ArrOption: []uint32->[]uint */ func MapUintArrToUint32ArrOption(m Uint32ArrOption, f func([]uint32) []uint) UintArrOption {  if m.IsDefined() { return UintArrOpt(f(*m.value)) } else { return NoneUintArrOption }  }
/* Uint32ArrOption: []uint32->[]uint8 */ func MapUint8ArrToUint32ArrOption(m Uint32ArrOption, f func([]uint32) []uint8) Uint8ArrOption {  if m.IsDefined() { return Uint8ArrOpt(f(*m.value)) } else { return NoneUint8ArrOption }  }
/* Uint32ArrOption: []uint32->[]uint16 */ func MapUint16ArrToUint32ArrOption(m Uint32ArrOption, f func([]uint32) []uint16) Uint16ArrOption {  if m.IsDefined() { return Uint16ArrOpt(f(*m.value)) } else { return NoneUint16ArrOption }  }
/* Uint32ArrOption: []uint32->[]uint32 */ func MapUint32ArrToUint32ArrOption(m Uint32ArrOption, f func([]uint32) []uint32) Uint32ArrOption {  if m.IsDefined() { return Uint32ArrOpt(f(*m.value)) } else { return NoneUint32ArrOption }  }
/* Uint32ArrOption: []uint32->[]uint64 */ func MapUint64ArrToUint32ArrOption(m Uint32ArrOption, f func([]uint32) []uint64) Uint64ArrOption {  if m.IsDefined() { return Uint64ArrOpt(f(*m.value)) } else { return NoneUint64ArrOption }  }
/* Uint32ArrOption: []uint32->[]uintptr */ func MapUintptrArrToUint32ArrOption(m Uint32ArrOption, f func([]uint32) []uintptr) UintptrArrOption {  if m.IsDefined() { return UintptrArrOpt(f(*m.value)) } else { return NoneUintptrArrOption }  }
/* Uint32ArrOption: []uint32->[]byte */ func MapByteArrToUint32ArrOption(m Uint32ArrOption, f func([]uint32) []byte) ByteArrOption {  if m.IsDefined() { return ByteArrOpt(f(*m.value)) } else { return NoneByteArrOption }  }
/* Uint32ArrOption: []uint32->[]rune */ func MapRuneArrToUint32ArrOption(m Uint32ArrOption, f func([]uint32) []rune) RuneArrOption {  if m.IsDefined() { return RuneArrOpt(f(*m.value)) } else { return NoneRuneArrOption }  }
/* Uint32ArrOption: []uint32->[]float32 */ func MapFloat32ArrToUint32ArrOption(m Uint32ArrOption, f func([]uint32) []float32) Float32ArrOption {  if m.IsDefined() { return Float32ArrOpt(f(*m.value)) } else { return NoneFloat32ArrOption }  }
/* Uint32ArrOption: []uint32->[]float64 */ func MapFloat64ArrToUint32ArrOption(m Uint32ArrOption, f func([]uint32) []float64) Float64ArrOption {  if m.IsDefined() { return Float64ArrOpt(f(*m.value)) } else { return NoneFloat64ArrOption }  }
/* Uint32ArrOption: []uint32->[]complex64 */ func MapComplex64ArrToUint32ArrOption(m Uint32ArrOption, f func([]uint32) []complex64) Complex64ArrOption {  if m.IsDefined() { return Complex64ArrOpt(f(*m.value)) } else { return NoneComplex64ArrOption }  }
/* Uint32ArrOption: []uint32->[]complex128 */ func MapComplex128ArrToUint32ArrOption(m Uint32ArrOption, f func([]uint32) []complex128) Complex128ArrOption {  if m.IsDefined() { return Complex128ArrOpt(f(*m.value)) } else { return NoneComplex128ArrOption }  }
/* Uint32ArrOption: []uint32->[]Any */ func MapAnyArrToUint32ArrOption(m Uint32ArrOption, f func([]uint32) []Any) AnyArrOption {  if m.IsDefined() { return AnyArrOpt(f(*m.value)) } else { return NoneAnyArrOption }  }
/* Uint32ArrOption: []uint32->BoolList */ func MapBoolListToUint32ArrOption(m Uint32ArrOption, f func([]uint32) BoolList) BoolListOption {  if m.IsDefined() { return BoolListOpt(f(*m.value)) } else { return NoneBoolListOption }  }
/* Uint32ArrOption: []uint32->StringList */ func MapStringListToUint32ArrOption(m Uint32ArrOption, f func([]uint32) StringList) StringListOption {  if m.IsDefined() { return StringListOpt(f(*m.value)) } else { return NoneStringListOption }  }
/* Uint32ArrOption: []uint32->IntList */ func MapIntListToUint32ArrOption(m Uint32ArrOption, f func([]uint32) IntList) IntListOption {  if m.IsDefined() { return IntListOpt(f(*m.value)) } else { return NoneIntListOption }  }
/* Uint32ArrOption: []uint32->Int8List */ func MapInt8ListToUint32ArrOption(m Uint32ArrOption, f func([]uint32) Int8List) Int8ListOption {  if m.IsDefined() { return Int8ListOpt(f(*m.value)) } else { return NoneInt8ListOption }  }
/* Uint32ArrOption: []uint32->Int16List */ func MapInt16ListToUint32ArrOption(m Uint32ArrOption, f func([]uint32) Int16List) Int16ListOption {  if m.IsDefined() { return Int16ListOpt(f(*m.value)) } else { return NoneInt16ListOption }  }
/* Uint32ArrOption: []uint32->Int32List */ func MapInt32ListToUint32ArrOption(m Uint32ArrOption, f func([]uint32) Int32List) Int32ListOption {  if m.IsDefined() { return Int32ListOpt(f(*m.value)) } else { return NoneInt32ListOption }  }
/* Uint32ArrOption: []uint32->Int64List */ func MapInt64ListToUint32ArrOption(m Uint32ArrOption, f func([]uint32) Int64List) Int64ListOption {  if m.IsDefined() { return Int64ListOpt(f(*m.value)) } else { return NoneInt64ListOption }  }
/* Uint32ArrOption: []uint32->UintList */ func MapUintListToUint32ArrOption(m Uint32ArrOption, f func([]uint32) UintList) UintListOption {  if m.IsDefined() { return UintListOpt(f(*m.value)) } else { return NoneUintListOption }  }
/* Uint32ArrOption: []uint32->Uint8List */ func MapUint8ListToUint32ArrOption(m Uint32ArrOption, f func([]uint32) Uint8List) Uint8ListOption {  if m.IsDefined() { return Uint8ListOpt(f(*m.value)) } else { return NoneUint8ListOption }  }
/* Uint32ArrOption: []uint32->Uint16List */ func MapUint16ListToUint32ArrOption(m Uint32ArrOption, f func([]uint32) Uint16List) Uint16ListOption {  if m.IsDefined() { return Uint16ListOpt(f(*m.value)) } else { return NoneUint16ListOption }  }
/* Uint32ArrOption: []uint32->Uint32List */ func MapUint32ListToUint32ArrOption(m Uint32ArrOption, f func([]uint32) Uint32List) Uint32ListOption {  if m.IsDefined() { return Uint32ListOpt(f(*m.value)) } else { return NoneUint32ListOption }  }
/* Uint32ArrOption: []uint32->Uint64List */ func MapUint64ListToUint32ArrOption(m Uint32ArrOption, f func([]uint32) Uint64List) Uint64ListOption {  if m.IsDefined() { return Uint64ListOpt(f(*m.value)) } else { return NoneUint64ListOption }  }
/* Uint32ArrOption: []uint32->UintptrList */ func MapUintptrListToUint32ArrOption(m Uint32ArrOption, f func([]uint32) UintptrList) UintptrListOption {  if m.IsDefined() { return UintptrListOpt(f(*m.value)) } else { return NoneUintptrListOption }  }
/* Uint32ArrOption: []uint32->ByteList */ func MapByteListToUint32ArrOption(m Uint32ArrOption, f func([]uint32) ByteList) ByteListOption {  if m.IsDefined() { return ByteListOpt(f(*m.value)) } else { return NoneByteListOption }  }
/* Uint32ArrOption: []uint32->RuneList */ func MapRuneListToUint32ArrOption(m Uint32ArrOption, f func([]uint32) RuneList) RuneListOption {  if m.IsDefined() { return RuneListOpt(f(*m.value)) } else { return NoneRuneListOption }  }
/* Uint32ArrOption: []uint32->Float32List */ func MapFloat32ListToUint32ArrOption(m Uint32ArrOption, f func([]uint32) Float32List) Float32ListOption {  if m.IsDefined() { return Float32ListOpt(f(*m.value)) } else { return NoneFloat32ListOption }  }
/* Uint32ArrOption: []uint32->Float64List */ func MapFloat64ListToUint32ArrOption(m Uint32ArrOption, f func([]uint32) Float64List) Float64ListOption {  if m.IsDefined() { return Float64ListOpt(f(*m.value)) } else { return NoneFloat64ListOption }  }
/* Uint32ArrOption: []uint32->Complex64List */ func MapComplex64ListToUint32ArrOption(m Uint32ArrOption, f func([]uint32) Complex64List) Complex64ListOption {  if m.IsDefined() { return Complex64ListOpt(f(*m.value)) } else { return NoneComplex64ListOption }  }
/* Uint32ArrOption: []uint32->Complex128List */ func MapComplex128ListToUint32ArrOption(m Uint32ArrOption, f func([]uint32) Complex128List) Complex128ListOption {  if m.IsDefined() { return Complex128ListOpt(f(*m.value)) } else { return NoneComplex128ListOption }  }
/* Uint32ArrOption: []uint32->AnyList */ func MapAnyListToUint32ArrOption(m Uint32ArrOption, f func([]uint32) AnyList) AnyListOption {  if m.IsDefined() { return AnyListOpt(f(*m.value)) } else { return NoneAnyListOption }  }
/* Uint64ArrOption: []uint64->bool */ func MapBoolToUint64ArrOption(m Uint64ArrOption, f func([]uint64) bool) BoolOption {  if m.IsDefined() { return Bool(f(*m.value)) } else { return NoneBoolOption }  }
/* Uint64ArrOption: []uint64->string */ func MapStringToUint64ArrOption(m Uint64ArrOption, f func([]uint64) string) StringOption {  if m.IsDefined() { return String(f(*m.value)) } else { return NoneStringOption }  }
/* Uint64ArrOption: []uint64->int */ func MapIntToUint64ArrOption(m Uint64ArrOption, f func([]uint64) int) IntOption {  if m.IsDefined() { return Int(f(*m.value)) } else { return NoneIntOption }  }
/* Uint64ArrOption: []uint64->int8 */ func MapInt8ToUint64ArrOption(m Uint64ArrOption, f func([]uint64) int8) Int8Option {  if m.IsDefined() { return Int8(f(*m.value)) } else { return NoneInt8Option }  }
/* Uint64ArrOption: []uint64->int16 */ func MapInt16ToUint64ArrOption(m Uint64ArrOption, f func([]uint64) int16) Int16Option {  if m.IsDefined() { return Int16(f(*m.value)) } else { return NoneInt16Option }  }
/* Uint64ArrOption: []uint64->int32 */ func MapInt32ToUint64ArrOption(m Uint64ArrOption, f func([]uint64) int32) Int32Option {  if m.IsDefined() { return Int32(f(*m.value)) } else { return NoneInt32Option }  }
/* Uint64ArrOption: []uint64->int64 */ func MapInt64ToUint64ArrOption(m Uint64ArrOption, f func([]uint64) int64) Int64Option {  if m.IsDefined() { return Int64(f(*m.value)) } else { return NoneInt64Option }  }
/* Uint64ArrOption: []uint64->uint */ func MapUintToUint64ArrOption(m Uint64ArrOption, f func([]uint64) uint) UintOption {  if m.IsDefined() { return Uint(f(*m.value)) } else { return NoneUintOption }  }
/* Uint64ArrOption: []uint64->uint8 */ func MapUint8ToUint64ArrOption(m Uint64ArrOption, f func([]uint64) uint8) Uint8Option {  if m.IsDefined() { return Uint8(f(*m.value)) } else { return NoneUint8Option }  }
/* Uint64ArrOption: []uint64->uint16 */ func MapUint16ToUint64ArrOption(m Uint64ArrOption, f func([]uint64) uint16) Uint16Option {  if m.IsDefined() { return Uint16(f(*m.value)) } else { return NoneUint16Option }  }
/* Uint64ArrOption: []uint64->uint32 */ func MapUint32ToUint64ArrOption(m Uint64ArrOption, f func([]uint64) uint32) Uint32Option {  if m.IsDefined() { return Uint32(f(*m.value)) } else { return NoneUint32Option }  }
/* Uint64ArrOption: []uint64->uint64 */ func MapUint64ToUint64ArrOption(m Uint64ArrOption, f func([]uint64) uint64) Uint64Option {  if m.IsDefined() { return Uint64(f(*m.value)) } else { return NoneUint64Option }  }
/* Uint64ArrOption: []uint64->uintptr */ func MapUintptrToUint64ArrOption(m Uint64ArrOption, f func([]uint64) uintptr) UintptrOption {  if m.IsDefined() { return Uintptr(f(*m.value)) } else { return NoneUintptrOption }  }
/* Uint64ArrOption: []uint64->byte */ func MapByteToUint64ArrOption(m Uint64ArrOption, f func([]uint64) byte) ByteOption {  if m.IsDefined() { return Byte(f(*m.value)) } else { return NoneByteOption }  }
/* Uint64ArrOption: []uint64->rune */ func MapRuneToUint64ArrOption(m Uint64ArrOption, f func([]uint64) rune) RuneOption {  if m.IsDefined() { return Rune(f(*m.value)) } else { return NoneRuneOption }  }
/* Uint64ArrOption: []uint64->float32 */ func MapFloat32ToUint64ArrOption(m Uint64ArrOption, f func([]uint64) float32) Float32Option {  if m.IsDefined() { return Float32(f(*m.value)) } else { return NoneFloat32Option }  }
/* Uint64ArrOption: []uint64->float64 */ func MapFloat64ToUint64ArrOption(m Uint64ArrOption, f func([]uint64) float64) Float64Option {  if m.IsDefined() { return Float64(f(*m.value)) } else { return NoneFloat64Option }  }
/* Uint64ArrOption: []uint64->complex64 */ func MapComplex64ToUint64ArrOption(m Uint64ArrOption, f func([]uint64) complex64) Complex64Option {  if m.IsDefined() { return Complex64(f(*m.value)) } else { return NoneComplex64Option }  }
/* Uint64ArrOption: []uint64->complex128 */ func MapComplex128ToUint64ArrOption(m Uint64ArrOption, f func([]uint64) complex128) Complex128Option {  if m.IsDefined() { return Complex128(f(*m.value)) } else { return NoneComplex128Option }  }
/* Uint64ArrOption: []uint64->Any */ func MapAnyToUint64ArrOption(m Uint64ArrOption, f func([]uint64) Any) AnyOption {  if m.IsDefined() { return AnyOpt(f(*m.value)) } else { return NoneAnyOption }  }
/* Uint64ArrOption: []uint64->BoolOption */ func MapBoolOptionToUint64ArrOption(m Uint64ArrOption, f func([]uint64) BoolOption) BoolOptionOption {  if m.IsDefined() { return BoolBool(f(*m.value)) } else { return NoneBoolOptionOption }  }
/* Uint64ArrOption: []uint64->StringOption */ func MapStringOptionToUint64ArrOption(m Uint64ArrOption, f func([]uint64) StringOption) StringOptionOption {  if m.IsDefined() { return StringString(f(*m.value)) } else { return NoneStringOptionOption }  }
/* Uint64ArrOption: []uint64->IntOption */ func MapIntOptionToUint64ArrOption(m Uint64ArrOption, f func([]uint64) IntOption) IntOptionOption {  if m.IsDefined() { return IntInt(f(*m.value)) } else { return NoneIntOptionOption }  }
/* Uint64ArrOption: []uint64->Int8Option */ func MapInt8OptionToUint64ArrOption(m Uint64ArrOption, f func([]uint64) Int8Option) Int8OptionOption {  if m.IsDefined() { return Int8Int8(f(*m.value)) } else { return NoneInt8OptionOption }  }
/* Uint64ArrOption: []uint64->Int16Option */ func MapInt16OptionToUint64ArrOption(m Uint64ArrOption, f func([]uint64) Int16Option) Int16OptionOption {  if m.IsDefined() { return Int16Int16(f(*m.value)) } else { return NoneInt16OptionOption }  }
/* Uint64ArrOption: []uint64->Int32Option */ func MapInt32OptionToUint64ArrOption(m Uint64ArrOption, f func([]uint64) Int32Option) Int32OptionOption {  if m.IsDefined() { return Int32Int32(f(*m.value)) } else { return NoneInt32OptionOption }  }
/* Uint64ArrOption: []uint64->Int64Option */ func MapInt64OptionToUint64ArrOption(m Uint64ArrOption, f func([]uint64) Int64Option) Int64OptionOption {  if m.IsDefined() { return Int64Int64(f(*m.value)) } else { return NoneInt64OptionOption }  }
/* Uint64ArrOption: []uint64->UintOption */ func MapUintOptionToUint64ArrOption(m Uint64ArrOption, f func([]uint64) UintOption) UintOptionOption {  if m.IsDefined() { return UintUint(f(*m.value)) } else { return NoneUintOptionOption }  }
/* Uint64ArrOption: []uint64->Uint8Option */ func MapUint8OptionToUint64ArrOption(m Uint64ArrOption, f func([]uint64) Uint8Option) Uint8OptionOption {  if m.IsDefined() { return Uint8Uint8(f(*m.value)) } else { return NoneUint8OptionOption }  }
/* Uint64ArrOption: []uint64->Uint16Option */ func MapUint16OptionToUint64ArrOption(m Uint64ArrOption, f func([]uint64) Uint16Option) Uint16OptionOption {  if m.IsDefined() { return Uint16Uint16(f(*m.value)) } else { return NoneUint16OptionOption }  }
/* Uint64ArrOption: []uint64->Uint32Option */ func MapUint32OptionToUint64ArrOption(m Uint64ArrOption, f func([]uint64) Uint32Option) Uint32OptionOption {  if m.IsDefined() { return Uint32Uint32(f(*m.value)) } else { return NoneUint32OptionOption }  }
/* Uint64ArrOption: []uint64->Uint64Option */ func MapUint64OptionToUint64ArrOption(m Uint64ArrOption, f func([]uint64) Uint64Option) Uint64OptionOption {  if m.IsDefined() { return Uint64Uint64(f(*m.value)) } else { return NoneUint64OptionOption }  }
/* Uint64ArrOption: []uint64->UintptrOption */ func MapUintptrOptionToUint64ArrOption(m Uint64ArrOption, f func([]uint64) UintptrOption) UintptrOptionOption {  if m.IsDefined() { return UintptrUintptr(f(*m.value)) } else { return NoneUintptrOptionOption }  }
/* Uint64ArrOption: []uint64->ByteOption */ func MapByteOptionToUint64ArrOption(m Uint64ArrOption, f func([]uint64) ByteOption) ByteOptionOption {  if m.IsDefined() { return ByteByte(f(*m.value)) } else { return NoneByteOptionOption }  }
/* Uint64ArrOption: []uint64->RuneOption */ func MapRuneOptionToUint64ArrOption(m Uint64ArrOption, f func([]uint64) RuneOption) RuneOptionOption {  if m.IsDefined() { return RuneRune(f(*m.value)) } else { return NoneRuneOptionOption }  }
/* Uint64ArrOption: []uint64->Float32Option */ func MapFloat32OptionToUint64ArrOption(m Uint64ArrOption, f func([]uint64) Float32Option) Float32OptionOption {  if m.IsDefined() { return Float32Float32(f(*m.value)) } else { return NoneFloat32OptionOption }  }
/* Uint64ArrOption: []uint64->Float64Option */ func MapFloat64OptionToUint64ArrOption(m Uint64ArrOption, f func([]uint64) Float64Option) Float64OptionOption {  if m.IsDefined() { return Float64Float64(f(*m.value)) } else { return NoneFloat64OptionOption }  }
/* Uint64ArrOption: []uint64->Complex64Option */ func MapComplex64OptionToUint64ArrOption(m Uint64ArrOption, f func([]uint64) Complex64Option) Complex64OptionOption {  if m.IsDefined() { return Complex64Complex64(f(*m.value)) } else { return NoneComplex64OptionOption }  }
/* Uint64ArrOption: []uint64->Complex128Option */ func MapComplex128OptionToUint64ArrOption(m Uint64ArrOption, f func([]uint64) Complex128Option) Complex128OptionOption {  if m.IsDefined() { return Complex128Complex128(f(*m.value)) } else { return NoneComplex128OptionOption }  }
/* Uint64ArrOption: []uint64->AnyOption */ func MapAnyOptionToUint64ArrOption(m Uint64ArrOption, f func([]uint64) AnyOption) AnyOptionOption {  if m.IsDefined() { return AnyOptAny(f(*m.value)) } else { return NoneAnyOptionOption }  }
/* Uint64ArrOption: []uint64->[]bool */ func MapBoolArrToUint64ArrOption(m Uint64ArrOption, f func([]uint64) []bool) BoolArrOption {  if m.IsDefined() { return BoolArrOpt(f(*m.value)) } else { return NoneBoolArrOption }  }
/* Uint64ArrOption: []uint64->[]string */ func MapStringArrToUint64ArrOption(m Uint64ArrOption, f func([]uint64) []string) StringArrOption {  if m.IsDefined() { return StringArrOpt(f(*m.value)) } else { return NoneStringArrOption }  }
/* Uint64ArrOption: []uint64->[]int */ func MapIntArrToUint64ArrOption(m Uint64ArrOption, f func([]uint64) []int) IntArrOption {  if m.IsDefined() { return IntArrOpt(f(*m.value)) } else { return NoneIntArrOption }  }
/* Uint64ArrOption: []uint64->[]int8 */ func MapInt8ArrToUint64ArrOption(m Uint64ArrOption, f func([]uint64) []int8) Int8ArrOption {  if m.IsDefined() { return Int8ArrOpt(f(*m.value)) } else { return NoneInt8ArrOption }  }
/* Uint64ArrOption: []uint64->[]int16 */ func MapInt16ArrToUint64ArrOption(m Uint64ArrOption, f func([]uint64) []int16) Int16ArrOption {  if m.IsDefined() { return Int16ArrOpt(f(*m.value)) } else { return NoneInt16ArrOption }  }
/* Uint64ArrOption: []uint64->[]int32 */ func MapInt32ArrToUint64ArrOption(m Uint64ArrOption, f func([]uint64) []int32) Int32ArrOption {  if m.IsDefined() { return Int32ArrOpt(f(*m.value)) } else { return NoneInt32ArrOption }  }
/* Uint64ArrOption: []uint64->[]int64 */ func MapInt64ArrToUint64ArrOption(m Uint64ArrOption, f func([]uint64) []int64) Int64ArrOption {  if m.IsDefined() { return Int64ArrOpt(f(*m.value)) } else { return NoneInt64ArrOption }  }
/* Uint64ArrOption: []uint64->[]uint */ func MapUintArrToUint64ArrOption(m Uint64ArrOption, f func([]uint64) []uint) UintArrOption {  if m.IsDefined() { return UintArrOpt(f(*m.value)) } else { return NoneUintArrOption }  }
/* Uint64ArrOption: []uint64->[]uint8 */ func MapUint8ArrToUint64ArrOption(m Uint64ArrOption, f func([]uint64) []uint8) Uint8ArrOption {  if m.IsDefined() { return Uint8ArrOpt(f(*m.value)) } else { return NoneUint8ArrOption }  }
/* Uint64ArrOption: []uint64->[]uint16 */ func MapUint16ArrToUint64ArrOption(m Uint64ArrOption, f func([]uint64) []uint16) Uint16ArrOption {  if m.IsDefined() { return Uint16ArrOpt(f(*m.value)) } else { return NoneUint16ArrOption }  }
/* Uint64ArrOption: []uint64->[]uint32 */ func MapUint32ArrToUint64ArrOption(m Uint64ArrOption, f func([]uint64) []uint32) Uint32ArrOption {  if m.IsDefined() { return Uint32ArrOpt(f(*m.value)) } else { return NoneUint32ArrOption }  }
/* Uint64ArrOption: []uint64->[]uint64 */ func MapUint64ArrToUint64ArrOption(m Uint64ArrOption, f func([]uint64) []uint64) Uint64ArrOption {  if m.IsDefined() { return Uint64ArrOpt(f(*m.value)) } else { return NoneUint64ArrOption }  }
/* Uint64ArrOption: []uint64->[]uintptr */ func MapUintptrArrToUint64ArrOption(m Uint64ArrOption, f func([]uint64) []uintptr) UintptrArrOption {  if m.IsDefined() { return UintptrArrOpt(f(*m.value)) } else { return NoneUintptrArrOption }  }
/* Uint64ArrOption: []uint64->[]byte */ func MapByteArrToUint64ArrOption(m Uint64ArrOption, f func([]uint64) []byte) ByteArrOption {  if m.IsDefined() { return ByteArrOpt(f(*m.value)) } else { return NoneByteArrOption }  }
/* Uint64ArrOption: []uint64->[]rune */ func MapRuneArrToUint64ArrOption(m Uint64ArrOption, f func([]uint64) []rune) RuneArrOption {  if m.IsDefined() { return RuneArrOpt(f(*m.value)) } else { return NoneRuneArrOption }  }
/* Uint64ArrOption: []uint64->[]float32 */ func MapFloat32ArrToUint64ArrOption(m Uint64ArrOption, f func([]uint64) []float32) Float32ArrOption {  if m.IsDefined() { return Float32ArrOpt(f(*m.value)) } else { return NoneFloat32ArrOption }  }
/* Uint64ArrOption: []uint64->[]float64 */ func MapFloat64ArrToUint64ArrOption(m Uint64ArrOption, f func([]uint64) []float64) Float64ArrOption {  if m.IsDefined() { return Float64ArrOpt(f(*m.value)) } else { return NoneFloat64ArrOption }  }
/* Uint64ArrOption: []uint64->[]complex64 */ func MapComplex64ArrToUint64ArrOption(m Uint64ArrOption, f func([]uint64) []complex64) Complex64ArrOption {  if m.IsDefined() { return Complex64ArrOpt(f(*m.value)) } else { return NoneComplex64ArrOption }  }
/* Uint64ArrOption: []uint64->[]complex128 */ func MapComplex128ArrToUint64ArrOption(m Uint64ArrOption, f func([]uint64) []complex128) Complex128ArrOption {  if m.IsDefined() { return Complex128ArrOpt(f(*m.value)) } else { return NoneComplex128ArrOption }  }
/* Uint64ArrOption: []uint64->[]Any */ func MapAnyArrToUint64ArrOption(m Uint64ArrOption, f func([]uint64) []Any) AnyArrOption {  if m.IsDefined() { return AnyArrOpt(f(*m.value)) } else { return NoneAnyArrOption }  }
/* Uint64ArrOption: []uint64->BoolList */ func MapBoolListToUint64ArrOption(m Uint64ArrOption, f func([]uint64) BoolList) BoolListOption {  if m.IsDefined() { return BoolListOpt(f(*m.value)) } else { return NoneBoolListOption }  }
/* Uint64ArrOption: []uint64->StringList */ func MapStringListToUint64ArrOption(m Uint64ArrOption, f func([]uint64) StringList) StringListOption {  if m.IsDefined() { return StringListOpt(f(*m.value)) } else { return NoneStringListOption }  }
/* Uint64ArrOption: []uint64->IntList */ func MapIntListToUint64ArrOption(m Uint64ArrOption, f func([]uint64) IntList) IntListOption {  if m.IsDefined() { return IntListOpt(f(*m.value)) } else { return NoneIntListOption }  }
/* Uint64ArrOption: []uint64->Int8List */ func MapInt8ListToUint64ArrOption(m Uint64ArrOption, f func([]uint64) Int8List) Int8ListOption {  if m.IsDefined() { return Int8ListOpt(f(*m.value)) } else { return NoneInt8ListOption }  }
/* Uint64ArrOption: []uint64->Int16List */ func MapInt16ListToUint64ArrOption(m Uint64ArrOption, f func([]uint64) Int16List) Int16ListOption {  if m.IsDefined() { return Int16ListOpt(f(*m.value)) } else { return NoneInt16ListOption }  }
/* Uint64ArrOption: []uint64->Int32List */ func MapInt32ListToUint64ArrOption(m Uint64ArrOption, f func([]uint64) Int32List) Int32ListOption {  if m.IsDefined() { return Int32ListOpt(f(*m.value)) } else { return NoneInt32ListOption }  }
/* Uint64ArrOption: []uint64->Int64List */ func MapInt64ListToUint64ArrOption(m Uint64ArrOption, f func([]uint64) Int64List) Int64ListOption {  if m.IsDefined() { return Int64ListOpt(f(*m.value)) } else { return NoneInt64ListOption }  }
/* Uint64ArrOption: []uint64->UintList */ func MapUintListToUint64ArrOption(m Uint64ArrOption, f func([]uint64) UintList) UintListOption {  if m.IsDefined() { return UintListOpt(f(*m.value)) } else { return NoneUintListOption }  }
/* Uint64ArrOption: []uint64->Uint8List */ func MapUint8ListToUint64ArrOption(m Uint64ArrOption, f func([]uint64) Uint8List) Uint8ListOption {  if m.IsDefined() { return Uint8ListOpt(f(*m.value)) } else { return NoneUint8ListOption }  }
/* Uint64ArrOption: []uint64->Uint16List */ func MapUint16ListToUint64ArrOption(m Uint64ArrOption, f func([]uint64) Uint16List) Uint16ListOption {  if m.IsDefined() { return Uint16ListOpt(f(*m.value)) } else { return NoneUint16ListOption }  }
/* Uint64ArrOption: []uint64->Uint32List */ func MapUint32ListToUint64ArrOption(m Uint64ArrOption, f func([]uint64) Uint32List) Uint32ListOption {  if m.IsDefined() { return Uint32ListOpt(f(*m.value)) } else { return NoneUint32ListOption }  }
/* Uint64ArrOption: []uint64->Uint64List */ func MapUint64ListToUint64ArrOption(m Uint64ArrOption, f func([]uint64) Uint64List) Uint64ListOption {  if m.IsDefined() { return Uint64ListOpt(f(*m.value)) } else { return NoneUint64ListOption }  }
/* Uint64ArrOption: []uint64->UintptrList */ func MapUintptrListToUint64ArrOption(m Uint64ArrOption, f func([]uint64) UintptrList) UintptrListOption {  if m.IsDefined() { return UintptrListOpt(f(*m.value)) } else { return NoneUintptrListOption }  }
/* Uint64ArrOption: []uint64->ByteList */ func MapByteListToUint64ArrOption(m Uint64ArrOption, f func([]uint64) ByteList) ByteListOption {  if m.IsDefined() { return ByteListOpt(f(*m.value)) } else { return NoneByteListOption }  }
/* Uint64ArrOption: []uint64->RuneList */ func MapRuneListToUint64ArrOption(m Uint64ArrOption, f func([]uint64) RuneList) RuneListOption {  if m.IsDefined() { return RuneListOpt(f(*m.value)) } else { return NoneRuneListOption }  }
/* Uint64ArrOption: []uint64->Float32List */ func MapFloat32ListToUint64ArrOption(m Uint64ArrOption, f func([]uint64) Float32List) Float32ListOption {  if m.IsDefined() { return Float32ListOpt(f(*m.value)) } else { return NoneFloat32ListOption }  }
/* Uint64ArrOption: []uint64->Float64List */ func MapFloat64ListToUint64ArrOption(m Uint64ArrOption, f func([]uint64) Float64List) Float64ListOption {  if m.IsDefined() { return Float64ListOpt(f(*m.value)) } else { return NoneFloat64ListOption }  }
/* Uint64ArrOption: []uint64->Complex64List */ func MapComplex64ListToUint64ArrOption(m Uint64ArrOption, f func([]uint64) Complex64List) Complex64ListOption {  if m.IsDefined() { return Complex64ListOpt(f(*m.value)) } else { return NoneComplex64ListOption }  }
/* Uint64ArrOption: []uint64->Complex128List */ func MapComplex128ListToUint64ArrOption(m Uint64ArrOption, f func([]uint64) Complex128List) Complex128ListOption {  if m.IsDefined() { return Complex128ListOpt(f(*m.value)) } else { return NoneComplex128ListOption }  }
/* Uint64ArrOption: []uint64->AnyList */ func MapAnyListToUint64ArrOption(m Uint64ArrOption, f func([]uint64) AnyList) AnyListOption {  if m.IsDefined() { return AnyListOpt(f(*m.value)) } else { return NoneAnyListOption }  }
/* UintptrArrOption: []uintptr->bool */ func MapBoolToUintptrArrOption(m UintptrArrOption, f func([]uintptr) bool) BoolOption {  if m.IsDefined() { return Bool(f(*m.value)) } else { return NoneBoolOption }  }
/* UintptrArrOption: []uintptr->string */ func MapStringToUintptrArrOption(m UintptrArrOption, f func([]uintptr) string) StringOption {  if m.IsDefined() { return String(f(*m.value)) } else { return NoneStringOption }  }
/* UintptrArrOption: []uintptr->int */ func MapIntToUintptrArrOption(m UintptrArrOption, f func([]uintptr) int) IntOption {  if m.IsDefined() { return Int(f(*m.value)) } else { return NoneIntOption }  }
/* UintptrArrOption: []uintptr->int8 */ func MapInt8ToUintptrArrOption(m UintptrArrOption, f func([]uintptr) int8) Int8Option {  if m.IsDefined() { return Int8(f(*m.value)) } else { return NoneInt8Option }  }
/* UintptrArrOption: []uintptr->int16 */ func MapInt16ToUintptrArrOption(m UintptrArrOption, f func([]uintptr) int16) Int16Option {  if m.IsDefined() { return Int16(f(*m.value)) } else { return NoneInt16Option }  }
/* UintptrArrOption: []uintptr->int32 */ func MapInt32ToUintptrArrOption(m UintptrArrOption, f func([]uintptr) int32) Int32Option {  if m.IsDefined() { return Int32(f(*m.value)) } else { return NoneInt32Option }  }
/* UintptrArrOption: []uintptr->int64 */ func MapInt64ToUintptrArrOption(m UintptrArrOption, f func([]uintptr) int64) Int64Option {  if m.IsDefined() { return Int64(f(*m.value)) } else { return NoneInt64Option }  }
/* UintptrArrOption: []uintptr->uint */ func MapUintToUintptrArrOption(m UintptrArrOption, f func([]uintptr) uint) UintOption {  if m.IsDefined() { return Uint(f(*m.value)) } else { return NoneUintOption }  }
/* UintptrArrOption: []uintptr->uint8 */ func MapUint8ToUintptrArrOption(m UintptrArrOption, f func([]uintptr) uint8) Uint8Option {  if m.IsDefined() { return Uint8(f(*m.value)) } else { return NoneUint8Option }  }
/* UintptrArrOption: []uintptr->uint16 */ func MapUint16ToUintptrArrOption(m UintptrArrOption, f func([]uintptr) uint16) Uint16Option {  if m.IsDefined() { return Uint16(f(*m.value)) } else { return NoneUint16Option }  }
/* UintptrArrOption: []uintptr->uint32 */ func MapUint32ToUintptrArrOption(m UintptrArrOption, f func([]uintptr) uint32) Uint32Option {  if m.IsDefined() { return Uint32(f(*m.value)) } else { return NoneUint32Option }  }
/* UintptrArrOption: []uintptr->uint64 */ func MapUint64ToUintptrArrOption(m UintptrArrOption, f func([]uintptr) uint64) Uint64Option {  if m.IsDefined() { return Uint64(f(*m.value)) } else { return NoneUint64Option }  }
/* UintptrArrOption: []uintptr->uintptr */ func MapUintptrToUintptrArrOption(m UintptrArrOption, f func([]uintptr) uintptr) UintptrOption {  if m.IsDefined() { return Uintptr(f(*m.value)) } else { return NoneUintptrOption }  }
/* UintptrArrOption: []uintptr->byte */ func MapByteToUintptrArrOption(m UintptrArrOption, f func([]uintptr) byte) ByteOption {  if m.IsDefined() { return Byte(f(*m.value)) } else { return NoneByteOption }  }
/* UintptrArrOption: []uintptr->rune */ func MapRuneToUintptrArrOption(m UintptrArrOption, f func([]uintptr) rune) RuneOption {  if m.IsDefined() { return Rune(f(*m.value)) } else { return NoneRuneOption }  }
/* UintptrArrOption: []uintptr->float32 */ func MapFloat32ToUintptrArrOption(m UintptrArrOption, f func([]uintptr) float32) Float32Option {  if m.IsDefined() { return Float32(f(*m.value)) } else { return NoneFloat32Option }  }
/* UintptrArrOption: []uintptr->float64 */ func MapFloat64ToUintptrArrOption(m UintptrArrOption, f func([]uintptr) float64) Float64Option {  if m.IsDefined() { return Float64(f(*m.value)) } else { return NoneFloat64Option }  }
/* UintptrArrOption: []uintptr->complex64 */ func MapComplex64ToUintptrArrOption(m UintptrArrOption, f func([]uintptr) complex64) Complex64Option {  if m.IsDefined() { return Complex64(f(*m.value)) } else { return NoneComplex64Option }  }
/* UintptrArrOption: []uintptr->complex128 */ func MapComplex128ToUintptrArrOption(m UintptrArrOption, f func([]uintptr) complex128) Complex128Option {  if m.IsDefined() { return Complex128(f(*m.value)) } else { return NoneComplex128Option }  }
/* UintptrArrOption: []uintptr->Any */ func MapAnyToUintptrArrOption(m UintptrArrOption, f func([]uintptr) Any) AnyOption {  if m.IsDefined() { return AnyOpt(f(*m.value)) } else { return NoneAnyOption }  }
/* UintptrArrOption: []uintptr->BoolOption */ func MapBoolOptionToUintptrArrOption(m UintptrArrOption, f func([]uintptr) BoolOption) BoolOptionOption {  if m.IsDefined() { return BoolBool(f(*m.value)) } else { return NoneBoolOptionOption }  }
/* UintptrArrOption: []uintptr->StringOption */ func MapStringOptionToUintptrArrOption(m UintptrArrOption, f func([]uintptr) StringOption) StringOptionOption {  if m.IsDefined() { return StringString(f(*m.value)) } else { return NoneStringOptionOption }  }
/* UintptrArrOption: []uintptr->IntOption */ func MapIntOptionToUintptrArrOption(m UintptrArrOption, f func([]uintptr) IntOption) IntOptionOption {  if m.IsDefined() { return IntInt(f(*m.value)) } else { return NoneIntOptionOption }  }
/* UintptrArrOption: []uintptr->Int8Option */ func MapInt8OptionToUintptrArrOption(m UintptrArrOption, f func([]uintptr) Int8Option) Int8OptionOption {  if m.IsDefined() { return Int8Int8(f(*m.value)) } else { return NoneInt8OptionOption }  }
/* UintptrArrOption: []uintptr->Int16Option */ func MapInt16OptionToUintptrArrOption(m UintptrArrOption, f func([]uintptr) Int16Option) Int16OptionOption {  if m.IsDefined() { return Int16Int16(f(*m.value)) } else { return NoneInt16OptionOption }  }
/* UintptrArrOption: []uintptr->Int32Option */ func MapInt32OptionToUintptrArrOption(m UintptrArrOption, f func([]uintptr) Int32Option) Int32OptionOption {  if m.IsDefined() { return Int32Int32(f(*m.value)) } else { return NoneInt32OptionOption }  }
/* UintptrArrOption: []uintptr->Int64Option */ func MapInt64OptionToUintptrArrOption(m UintptrArrOption, f func([]uintptr) Int64Option) Int64OptionOption {  if m.IsDefined() { return Int64Int64(f(*m.value)) } else { return NoneInt64OptionOption }  }
/* UintptrArrOption: []uintptr->UintOption */ func MapUintOptionToUintptrArrOption(m UintptrArrOption, f func([]uintptr) UintOption) UintOptionOption {  if m.IsDefined() { return UintUint(f(*m.value)) } else { return NoneUintOptionOption }  }
/* UintptrArrOption: []uintptr->Uint8Option */ func MapUint8OptionToUintptrArrOption(m UintptrArrOption, f func([]uintptr) Uint8Option) Uint8OptionOption {  if m.IsDefined() { return Uint8Uint8(f(*m.value)) } else { return NoneUint8OptionOption }  }
/* UintptrArrOption: []uintptr->Uint16Option */ func MapUint16OptionToUintptrArrOption(m UintptrArrOption, f func([]uintptr) Uint16Option) Uint16OptionOption {  if m.IsDefined() { return Uint16Uint16(f(*m.value)) } else { return NoneUint16OptionOption }  }
/* UintptrArrOption: []uintptr->Uint32Option */ func MapUint32OptionToUintptrArrOption(m UintptrArrOption, f func([]uintptr) Uint32Option) Uint32OptionOption {  if m.IsDefined() { return Uint32Uint32(f(*m.value)) } else { return NoneUint32OptionOption }  }
/* UintptrArrOption: []uintptr->Uint64Option */ func MapUint64OptionToUintptrArrOption(m UintptrArrOption, f func([]uintptr) Uint64Option) Uint64OptionOption {  if m.IsDefined() { return Uint64Uint64(f(*m.value)) } else { return NoneUint64OptionOption }  }
/* UintptrArrOption: []uintptr->UintptrOption */ func MapUintptrOptionToUintptrArrOption(m UintptrArrOption, f func([]uintptr) UintptrOption) UintptrOptionOption {  if m.IsDefined() { return UintptrUintptr(f(*m.value)) } else { return NoneUintptrOptionOption }  }
/* UintptrArrOption: []uintptr->ByteOption */ func MapByteOptionToUintptrArrOption(m UintptrArrOption, f func([]uintptr) ByteOption) ByteOptionOption {  if m.IsDefined() { return ByteByte(f(*m.value)) } else { return NoneByteOptionOption }  }
/* UintptrArrOption: []uintptr->RuneOption */ func MapRuneOptionToUintptrArrOption(m UintptrArrOption, f func([]uintptr) RuneOption) RuneOptionOption {  if m.IsDefined() { return RuneRune(f(*m.value)) } else { return NoneRuneOptionOption }  }
/* UintptrArrOption: []uintptr->Float32Option */ func MapFloat32OptionToUintptrArrOption(m UintptrArrOption, f func([]uintptr) Float32Option) Float32OptionOption {  if m.IsDefined() { return Float32Float32(f(*m.value)) } else { return NoneFloat32OptionOption }  }
/* UintptrArrOption: []uintptr->Float64Option */ func MapFloat64OptionToUintptrArrOption(m UintptrArrOption, f func([]uintptr) Float64Option) Float64OptionOption {  if m.IsDefined() { return Float64Float64(f(*m.value)) } else { return NoneFloat64OptionOption }  }
/* UintptrArrOption: []uintptr->Complex64Option */ func MapComplex64OptionToUintptrArrOption(m UintptrArrOption, f func([]uintptr) Complex64Option) Complex64OptionOption {  if m.IsDefined() { return Complex64Complex64(f(*m.value)) } else { return NoneComplex64OptionOption }  }
/* UintptrArrOption: []uintptr->Complex128Option */ func MapComplex128OptionToUintptrArrOption(m UintptrArrOption, f func([]uintptr) Complex128Option) Complex128OptionOption {  if m.IsDefined() { return Complex128Complex128(f(*m.value)) } else { return NoneComplex128OptionOption }  }
/* UintptrArrOption: []uintptr->AnyOption */ func MapAnyOptionToUintptrArrOption(m UintptrArrOption, f func([]uintptr) AnyOption) AnyOptionOption {  if m.IsDefined() { return AnyOptAny(f(*m.value)) } else { return NoneAnyOptionOption }  }
/* UintptrArrOption: []uintptr->[]bool */ func MapBoolArrToUintptrArrOption(m UintptrArrOption, f func([]uintptr) []bool) BoolArrOption {  if m.IsDefined() { return BoolArrOpt(f(*m.value)) } else { return NoneBoolArrOption }  }
/* UintptrArrOption: []uintptr->[]string */ func MapStringArrToUintptrArrOption(m UintptrArrOption, f func([]uintptr) []string) StringArrOption {  if m.IsDefined() { return StringArrOpt(f(*m.value)) } else { return NoneStringArrOption }  }
/* UintptrArrOption: []uintptr->[]int */ func MapIntArrToUintptrArrOption(m UintptrArrOption, f func([]uintptr) []int) IntArrOption {  if m.IsDefined() { return IntArrOpt(f(*m.value)) } else { return NoneIntArrOption }  }
/* UintptrArrOption: []uintptr->[]int8 */ func MapInt8ArrToUintptrArrOption(m UintptrArrOption, f func([]uintptr) []int8) Int8ArrOption {  if m.IsDefined() { return Int8ArrOpt(f(*m.value)) } else { return NoneInt8ArrOption }  }
/* UintptrArrOption: []uintptr->[]int16 */ func MapInt16ArrToUintptrArrOption(m UintptrArrOption, f func([]uintptr) []int16) Int16ArrOption {  if m.IsDefined() { return Int16ArrOpt(f(*m.value)) } else { return NoneInt16ArrOption }  }
/* UintptrArrOption: []uintptr->[]int32 */ func MapInt32ArrToUintptrArrOption(m UintptrArrOption, f func([]uintptr) []int32) Int32ArrOption {  if m.IsDefined() { return Int32ArrOpt(f(*m.value)) } else { return NoneInt32ArrOption }  }
/* UintptrArrOption: []uintptr->[]int64 */ func MapInt64ArrToUintptrArrOption(m UintptrArrOption, f func([]uintptr) []int64) Int64ArrOption {  if m.IsDefined() { return Int64ArrOpt(f(*m.value)) } else { return NoneInt64ArrOption }  }
/* UintptrArrOption: []uintptr->[]uint */ func MapUintArrToUintptrArrOption(m UintptrArrOption, f func([]uintptr) []uint) UintArrOption {  if m.IsDefined() { return UintArrOpt(f(*m.value)) } else { return NoneUintArrOption }  }
/* UintptrArrOption: []uintptr->[]uint8 */ func MapUint8ArrToUintptrArrOption(m UintptrArrOption, f func([]uintptr) []uint8) Uint8ArrOption {  if m.IsDefined() { return Uint8ArrOpt(f(*m.value)) } else { return NoneUint8ArrOption }  }
/* UintptrArrOption: []uintptr->[]uint16 */ func MapUint16ArrToUintptrArrOption(m UintptrArrOption, f func([]uintptr) []uint16) Uint16ArrOption {  if m.IsDefined() { return Uint16ArrOpt(f(*m.value)) } else { return NoneUint16ArrOption }  }
/* UintptrArrOption: []uintptr->[]uint32 */ func MapUint32ArrToUintptrArrOption(m UintptrArrOption, f func([]uintptr) []uint32) Uint32ArrOption {  if m.IsDefined() { return Uint32ArrOpt(f(*m.value)) } else { return NoneUint32ArrOption }  }
/* UintptrArrOption: []uintptr->[]uint64 */ func MapUint64ArrToUintptrArrOption(m UintptrArrOption, f func([]uintptr) []uint64) Uint64ArrOption {  if m.IsDefined() { return Uint64ArrOpt(f(*m.value)) } else { return NoneUint64ArrOption }  }
/* UintptrArrOption: []uintptr->[]uintptr */ func MapUintptrArrToUintptrArrOption(m UintptrArrOption, f func([]uintptr) []uintptr) UintptrArrOption {  if m.IsDefined() { return UintptrArrOpt(f(*m.value)) } else { return NoneUintptrArrOption }  }
/* UintptrArrOption: []uintptr->[]byte */ func MapByteArrToUintptrArrOption(m UintptrArrOption, f func([]uintptr) []byte) ByteArrOption {  if m.IsDefined() { return ByteArrOpt(f(*m.value)) } else { return NoneByteArrOption }  }
/* UintptrArrOption: []uintptr->[]rune */ func MapRuneArrToUintptrArrOption(m UintptrArrOption, f func([]uintptr) []rune) RuneArrOption {  if m.IsDefined() { return RuneArrOpt(f(*m.value)) } else { return NoneRuneArrOption }  }
/* UintptrArrOption: []uintptr->[]float32 */ func MapFloat32ArrToUintptrArrOption(m UintptrArrOption, f func([]uintptr) []float32) Float32ArrOption {  if m.IsDefined() { return Float32ArrOpt(f(*m.value)) } else { return NoneFloat32ArrOption }  }
/* UintptrArrOption: []uintptr->[]float64 */ func MapFloat64ArrToUintptrArrOption(m UintptrArrOption, f func([]uintptr) []float64) Float64ArrOption {  if m.IsDefined() { return Float64ArrOpt(f(*m.value)) } else { return NoneFloat64ArrOption }  }
/* UintptrArrOption: []uintptr->[]complex64 */ func MapComplex64ArrToUintptrArrOption(m UintptrArrOption, f func([]uintptr) []complex64) Complex64ArrOption {  if m.IsDefined() { return Complex64ArrOpt(f(*m.value)) } else { return NoneComplex64ArrOption }  }
/* UintptrArrOption: []uintptr->[]complex128 */ func MapComplex128ArrToUintptrArrOption(m UintptrArrOption, f func([]uintptr) []complex128) Complex128ArrOption {  if m.IsDefined() { return Complex128ArrOpt(f(*m.value)) } else { return NoneComplex128ArrOption }  }
/* UintptrArrOption: []uintptr->[]Any */ func MapAnyArrToUintptrArrOption(m UintptrArrOption, f func([]uintptr) []Any) AnyArrOption {  if m.IsDefined() { return AnyArrOpt(f(*m.value)) } else { return NoneAnyArrOption }  }
/* UintptrArrOption: []uintptr->BoolList */ func MapBoolListToUintptrArrOption(m UintptrArrOption, f func([]uintptr) BoolList) BoolListOption {  if m.IsDefined() { return BoolListOpt(f(*m.value)) } else { return NoneBoolListOption }  }
/* UintptrArrOption: []uintptr->StringList */ func MapStringListToUintptrArrOption(m UintptrArrOption, f func([]uintptr) StringList) StringListOption {  if m.IsDefined() { return StringListOpt(f(*m.value)) } else { return NoneStringListOption }  }
/* UintptrArrOption: []uintptr->IntList */ func MapIntListToUintptrArrOption(m UintptrArrOption, f func([]uintptr) IntList) IntListOption {  if m.IsDefined() { return IntListOpt(f(*m.value)) } else { return NoneIntListOption }  }
/* UintptrArrOption: []uintptr->Int8List */ func MapInt8ListToUintptrArrOption(m UintptrArrOption, f func([]uintptr) Int8List) Int8ListOption {  if m.IsDefined() { return Int8ListOpt(f(*m.value)) } else { return NoneInt8ListOption }  }
/* UintptrArrOption: []uintptr->Int16List */ func MapInt16ListToUintptrArrOption(m UintptrArrOption, f func([]uintptr) Int16List) Int16ListOption {  if m.IsDefined() { return Int16ListOpt(f(*m.value)) } else { return NoneInt16ListOption }  }
/* UintptrArrOption: []uintptr->Int32List */ func MapInt32ListToUintptrArrOption(m UintptrArrOption, f func([]uintptr) Int32List) Int32ListOption {  if m.IsDefined() { return Int32ListOpt(f(*m.value)) } else { return NoneInt32ListOption }  }
/* UintptrArrOption: []uintptr->Int64List */ func MapInt64ListToUintptrArrOption(m UintptrArrOption, f func([]uintptr) Int64List) Int64ListOption {  if m.IsDefined() { return Int64ListOpt(f(*m.value)) } else { return NoneInt64ListOption }  }
/* UintptrArrOption: []uintptr->UintList */ func MapUintListToUintptrArrOption(m UintptrArrOption, f func([]uintptr) UintList) UintListOption {  if m.IsDefined() { return UintListOpt(f(*m.value)) } else { return NoneUintListOption }  }
/* UintptrArrOption: []uintptr->Uint8List */ func MapUint8ListToUintptrArrOption(m UintptrArrOption, f func([]uintptr) Uint8List) Uint8ListOption {  if m.IsDefined() { return Uint8ListOpt(f(*m.value)) } else { return NoneUint8ListOption }  }
/* UintptrArrOption: []uintptr->Uint16List */ func MapUint16ListToUintptrArrOption(m UintptrArrOption, f func([]uintptr) Uint16List) Uint16ListOption {  if m.IsDefined() { return Uint16ListOpt(f(*m.value)) } else { return NoneUint16ListOption }  }
/* UintptrArrOption: []uintptr->Uint32List */ func MapUint32ListToUintptrArrOption(m UintptrArrOption, f func([]uintptr) Uint32List) Uint32ListOption {  if m.IsDefined() { return Uint32ListOpt(f(*m.value)) } else { return NoneUint32ListOption }  }
/* UintptrArrOption: []uintptr->Uint64List */ func MapUint64ListToUintptrArrOption(m UintptrArrOption, f func([]uintptr) Uint64List) Uint64ListOption {  if m.IsDefined() { return Uint64ListOpt(f(*m.value)) } else { return NoneUint64ListOption }  }
/* UintptrArrOption: []uintptr->UintptrList */ func MapUintptrListToUintptrArrOption(m UintptrArrOption, f func([]uintptr) UintptrList) UintptrListOption {  if m.IsDefined() { return UintptrListOpt(f(*m.value)) } else { return NoneUintptrListOption }  }
/* UintptrArrOption: []uintptr->ByteList */ func MapByteListToUintptrArrOption(m UintptrArrOption, f func([]uintptr) ByteList) ByteListOption {  if m.IsDefined() { return ByteListOpt(f(*m.value)) } else { return NoneByteListOption }  }
/* UintptrArrOption: []uintptr->RuneList */ func MapRuneListToUintptrArrOption(m UintptrArrOption, f func([]uintptr) RuneList) RuneListOption {  if m.IsDefined() { return RuneListOpt(f(*m.value)) } else { return NoneRuneListOption }  }
/* UintptrArrOption: []uintptr->Float32List */ func MapFloat32ListToUintptrArrOption(m UintptrArrOption, f func([]uintptr) Float32List) Float32ListOption {  if m.IsDefined() { return Float32ListOpt(f(*m.value)) } else { return NoneFloat32ListOption }  }
/* UintptrArrOption: []uintptr->Float64List */ func MapFloat64ListToUintptrArrOption(m UintptrArrOption, f func([]uintptr) Float64List) Float64ListOption {  if m.IsDefined() { return Float64ListOpt(f(*m.value)) } else { return NoneFloat64ListOption }  }
/* UintptrArrOption: []uintptr->Complex64List */ func MapComplex64ListToUintptrArrOption(m UintptrArrOption, f func([]uintptr) Complex64List) Complex64ListOption {  if m.IsDefined() { return Complex64ListOpt(f(*m.value)) } else { return NoneComplex64ListOption }  }
/* UintptrArrOption: []uintptr->Complex128List */ func MapComplex128ListToUintptrArrOption(m UintptrArrOption, f func([]uintptr) Complex128List) Complex128ListOption {  if m.IsDefined() { return Complex128ListOpt(f(*m.value)) } else { return NoneComplex128ListOption }  }
/* UintptrArrOption: []uintptr->AnyList */ func MapAnyListToUintptrArrOption(m UintptrArrOption, f func([]uintptr) AnyList) AnyListOption {  if m.IsDefined() { return AnyListOpt(f(*m.value)) } else { return NoneAnyListOption }  }
/* ByteArrOption: []byte->bool */ func MapBoolToByteArrOption(m ByteArrOption, f func([]byte) bool) BoolOption {  if m.IsDefined() { return Bool(f(*m.value)) } else { return NoneBoolOption }  }
/* ByteArrOption: []byte->string */ func MapStringToByteArrOption(m ByteArrOption, f func([]byte) string) StringOption {  if m.IsDefined() { return String(f(*m.value)) } else { return NoneStringOption }  }
/* ByteArrOption: []byte->int */ func MapIntToByteArrOption(m ByteArrOption, f func([]byte) int) IntOption {  if m.IsDefined() { return Int(f(*m.value)) } else { return NoneIntOption }  }
/* ByteArrOption: []byte->int8 */ func MapInt8ToByteArrOption(m ByteArrOption, f func([]byte) int8) Int8Option {  if m.IsDefined() { return Int8(f(*m.value)) } else { return NoneInt8Option }  }
/* ByteArrOption: []byte->int16 */ func MapInt16ToByteArrOption(m ByteArrOption, f func([]byte) int16) Int16Option {  if m.IsDefined() { return Int16(f(*m.value)) } else { return NoneInt16Option }  }
/* ByteArrOption: []byte->int32 */ func MapInt32ToByteArrOption(m ByteArrOption, f func([]byte) int32) Int32Option {  if m.IsDefined() { return Int32(f(*m.value)) } else { return NoneInt32Option }  }
/* ByteArrOption: []byte->int64 */ func MapInt64ToByteArrOption(m ByteArrOption, f func([]byte) int64) Int64Option {  if m.IsDefined() { return Int64(f(*m.value)) } else { return NoneInt64Option }  }
/* ByteArrOption: []byte->uint */ func MapUintToByteArrOption(m ByteArrOption, f func([]byte) uint) UintOption {  if m.IsDefined() { return Uint(f(*m.value)) } else { return NoneUintOption }  }
/* ByteArrOption: []byte->uint8 */ func MapUint8ToByteArrOption(m ByteArrOption, f func([]byte) uint8) Uint8Option {  if m.IsDefined() { return Uint8(f(*m.value)) } else { return NoneUint8Option }  }
/* ByteArrOption: []byte->uint16 */ func MapUint16ToByteArrOption(m ByteArrOption, f func([]byte) uint16) Uint16Option {  if m.IsDefined() { return Uint16(f(*m.value)) } else { return NoneUint16Option }  }
/* ByteArrOption: []byte->uint32 */ func MapUint32ToByteArrOption(m ByteArrOption, f func([]byte) uint32) Uint32Option {  if m.IsDefined() { return Uint32(f(*m.value)) } else { return NoneUint32Option }  }
/* ByteArrOption: []byte->uint64 */ func MapUint64ToByteArrOption(m ByteArrOption, f func([]byte) uint64) Uint64Option {  if m.IsDefined() { return Uint64(f(*m.value)) } else { return NoneUint64Option }  }
/* ByteArrOption: []byte->uintptr */ func MapUintptrToByteArrOption(m ByteArrOption, f func([]byte) uintptr) UintptrOption {  if m.IsDefined() { return Uintptr(f(*m.value)) } else { return NoneUintptrOption }  }
/* ByteArrOption: []byte->byte */ func MapByteToByteArrOption(m ByteArrOption, f func([]byte) byte) ByteOption {  if m.IsDefined() { return Byte(f(*m.value)) } else { return NoneByteOption }  }
/* ByteArrOption: []byte->rune */ func MapRuneToByteArrOption(m ByteArrOption, f func([]byte) rune) RuneOption {  if m.IsDefined() { return Rune(f(*m.value)) } else { return NoneRuneOption }  }
/* ByteArrOption: []byte->float32 */ func MapFloat32ToByteArrOption(m ByteArrOption, f func([]byte) float32) Float32Option {  if m.IsDefined() { return Float32(f(*m.value)) } else { return NoneFloat32Option }  }
/* ByteArrOption: []byte->float64 */ func MapFloat64ToByteArrOption(m ByteArrOption, f func([]byte) float64) Float64Option {  if m.IsDefined() { return Float64(f(*m.value)) } else { return NoneFloat64Option }  }
/* ByteArrOption: []byte->complex64 */ func MapComplex64ToByteArrOption(m ByteArrOption, f func([]byte) complex64) Complex64Option {  if m.IsDefined() { return Complex64(f(*m.value)) } else { return NoneComplex64Option }  }
/* ByteArrOption: []byte->complex128 */ func MapComplex128ToByteArrOption(m ByteArrOption, f func([]byte) complex128) Complex128Option {  if m.IsDefined() { return Complex128(f(*m.value)) } else { return NoneComplex128Option }  }
/* ByteArrOption: []byte->Any */ func MapAnyToByteArrOption(m ByteArrOption, f func([]byte) Any) AnyOption {  if m.IsDefined() { return AnyOpt(f(*m.value)) } else { return NoneAnyOption }  }
/* ByteArrOption: []byte->BoolOption */ func MapBoolOptionToByteArrOption(m ByteArrOption, f func([]byte) BoolOption) BoolOptionOption {  if m.IsDefined() { return BoolBool(f(*m.value)) } else { return NoneBoolOptionOption }  }
/* ByteArrOption: []byte->StringOption */ func MapStringOptionToByteArrOption(m ByteArrOption, f func([]byte) StringOption) StringOptionOption {  if m.IsDefined() { return StringString(f(*m.value)) } else { return NoneStringOptionOption }  }
/* ByteArrOption: []byte->IntOption */ func MapIntOptionToByteArrOption(m ByteArrOption, f func([]byte) IntOption) IntOptionOption {  if m.IsDefined() { return IntInt(f(*m.value)) } else { return NoneIntOptionOption }  }
/* ByteArrOption: []byte->Int8Option */ func MapInt8OptionToByteArrOption(m ByteArrOption, f func([]byte) Int8Option) Int8OptionOption {  if m.IsDefined() { return Int8Int8(f(*m.value)) } else { return NoneInt8OptionOption }  }
/* ByteArrOption: []byte->Int16Option */ func MapInt16OptionToByteArrOption(m ByteArrOption, f func([]byte) Int16Option) Int16OptionOption {  if m.IsDefined() { return Int16Int16(f(*m.value)) } else { return NoneInt16OptionOption }  }
/* ByteArrOption: []byte->Int32Option */ func MapInt32OptionToByteArrOption(m ByteArrOption, f func([]byte) Int32Option) Int32OptionOption {  if m.IsDefined() { return Int32Int32(f(*m.value)) } else { return NoneInt32OptionOption }  }
/* ByteArrOption: []byte->Int64Option */ func MapInt64OptionToByteArrOption(m ByteArrOption, f func([]byte) Int64Option) Int64OptionOption {  if m.IsDefined() { return Int64Int64(f(*m.value)) } else { return NoneInt64OptionOption }  }
/* ByteArrOption: []byte->UintOption */ func MapUintOptionToByteArrOption(m ByteArrOption, f func([]byte) UintOption) UintOptionOption {  if m.IsDefined() { return UintUint(f(*m.value)) } else { return NoneUintOptionOption }  }
/* ByteArrOption: []byte->Uint8Option */ func MapUint8OptionToByteArrOption(m ByteArrOption, f func([]byte) Uint8Option) Uint8OptionOption {  if m.IsDefined() { return Uint8Uint8(f(*m.value)) } else { return NoneUint8OptionOption }  }
/* ByteArrOption: []byte->Uint16Option */ func MapUint16OptionToByteArrOption(m ByteArrOption, f func([]byte) Uint16Option) Uint16OptionOption {  if m.IsDefined() { return Uint16Uint16(f(*m.value)) } else { return NoneUint16OptionOption }  }
/* ByteArrOption: []byte->Uint32Option */ func MapUint32OptionToByteArrOption(m ByteArrOption, f func([]byte) Uint32Option) Uint32OptionOption {  if m.IsDefined() { return Uint32Uint32(f(*m.value)) } else { return NoneUint32OptionOption }  }
/* ByteArrOption: []byte->Uint64Option */ func MapUint64OptionToByteArrOption(m ByteArrOption, f func([]byte) Uint64Option) Uint64OptionOption {  if m.IsDefined() { return Uint64Uint64(f(*m.value)) } else { return NoneUint64OptionOption }  }
/* ByteArrOption: []byte->UintptrOption */ func MapUintptrOptionToByteArrOption(m ByteArrOption, f func([]byte) UintptrOption) UintptrOptionOption {  if m.IsDefined() { return UintptrUintptr(f(*m.value)) } else { return NoneUintptrOptionOption }  }
/* ByteArrOption: []byte->ByteOption */ func MapByteOptionToByteArrOption(m ByteArrOption, f func([]byte) ByteOption) ByteOptionOption {  if m.IsDefined() { return ByteByte(f(*m.value)) } else { return NoneByteOptionOption }  }
/* ByteArrOption: []byte->RuneOption */ func MapRuneOptionToByteArrOption(m ByteArrOption, f func([]byte) RuneOption) RuneOptionOption {  if m.IsDefined() { return RuneRune(f(*m.value)) } else { return NoneRuneOptionOption }  }
/* ByteArrOption: []byte->Float32Option */ func MapFloat32OptionToByteArrOption(m ByteArrOption, f func([]byte) Float32Option) Float32OptionOption {  if m.IsDefined() { return Float32Float32(f(*m.value)) } else { return NoneFloat32OptionOption }  }
/* ByteArrOption: []byte->Float64Option */ func MapFloat64OptionToByteArrOption(m ByteArrOption, f func([]byte) Float64Option) Float64OptionOption {  if m.IsDefined() { return Float64Float64(f(*m.value)) } else { return NoneFloat64OptionOption }  }
/* ByteArrOption: []byte->Complex64Option */ func MapComplex64OptionToByteArrOption(m ByteArrOption, f func([]byte) Complex64Option) Complex64OptionOption {  if m.IsDefined() { return Complex64Complex64(f(*m.value)) } else { return NoneComplex64OptionOption }  }
/* ByteArrOption: []byte->Complex128Option */ func MapComplex128OptionToByteArrOption(m ByteArrOption, f func([]byte) Complex128Option) Complex128OptionOption {  if m.IsDefined() { return Complex128Complex128(f(*m.value)) } else { return NoneComplex128OptionOption }  }
/* ByteArrOption: []byte->AnyOption */ func MapAnyOptionToByteArrOption(m ByteArrOption, f func([]byte) AnyOption) AnyOptionOption {  if m.IsDefined() { return AnyOptAny(f(*m.value)) } else { return NoneAnyOptionOption }  }
/* ByteArrOption: []byte->[]bool */ func MapBoolArrToByteArrOption(m ByteArrOption, f func([]byte) []bool) BoolArrOption {  if m.IsDefined() { return BoolArrOpt(f(*m.value)) } else { return NoneBoolArrOption }  }
/* ByteArrOption: []byte->[]string */ func MapStringArrToByteArrOption(m ByteArrOption, f func([]byte) []string) StringArrOption {  if m.IsDefined() { return StringArrOpt(f(*m.value)) } else { return NoneStringArrOption }  }
/* ByteArrOption: []byte->[]int */ func MapIntArrToByteArrOption(m ByteArrOption, f func([]byte) []int) IntArrOption {  if m.IsDefined() { return IntArrOpt(f(*m.value)) } else { return NoneIntArrOption }  }
/* ByteArrOption: []byte->[]int8 */ func MapInt8ArrToByteArrOption(m ByteArrOption, f func([]byte) []int8) Int8ArrOption {  if m.IsDefined() { return Int8ArrOpt(f(*m.value)) } else { return NoneInt8ArrOption }  }
/* ByteArrOption: []byte->[]int16 */ func MapInt16ArrToByteArrOption(m ByteArrOption, f func([]byte) []int16) Int16ArrOption {  if m.IsDefined() { return Int16ArrOpt(f(*m.value)) } else { return NoneInt16ArrOption }  }
/* ByteArrOption: []byte->[]int32 */ func MapInt32ArrToByteArrOption(m ByteArrOption, f func([]byte) []int32) Int32ArrOption {  if m.IsDefined() { return Int32ArrOpt(f(*m.value)) } else { return NoneInt32ArrOption }  }
/* ByteArrOption: []byte->[]int64 */ func MapInt64ArrToByteArrOption(m ByteArrOption, f func([]byte) []int64) Int64ArrOption {  if m.IsDefined() { return Int64ArrOpt(f(*m.value)) } else { return NoneInt64ArrOption }  }
/* ByteArrOption: []byte->[]uint */ func MapUintArrToByteArrOption(m ByteArrOption, f func([]byte) []uint) UintArrOption {  if m.IsDefined() { return UintArrOpt(f(*m.value)) } else { return NoneUintArrOption }  }
/* ByteArrOption: []byte->[]uint8 */ func MapUint8ArrToByteArrOption(m ByteArrOption, f func([]byte) []uint8) Uint8ArrOption {  if m.IsDefined() { return Uint8ArrOpt(f(*m.value)) } else { return NoneUint8ArrOption }  }
/* ByteArrOption: []byte->[]uint16 */ func MapUint16ArrToByteArrOption(m ByteArrOption, f func([]byte) []uint16) Uint16ArrOption {  if m.IsDefined() { return Uint16ArrOpt(f(*m.value)) } else { return NoneUint16ArrOption }  }
/* ByteArrOption: []byte->[]uint32 */ func MapUint32ArrToByteArrOption(m ByteArrOption, f func([]byte) []uint32) Uint32ArrOption {  if m.IsDefined() { return Uint32ArrOpt(f(*m.value)) } else { return NoneUint32ArrOption }  }
/* ByteArrOption: []byte->[]uint64 */ func MapUint64ArrToByteArrOption(m ByteArrOption, f func([]byte) []uint64) Uint64ArrOption {  if m.IsDefined() { return Uint64ArrOpt(f(*m.value)) } else { return NoneUint64ArrOption }  }
/* ByteArrOption: []byte->[]uintptr */ func MapUintptrArrToByteArrOption(m ByteArrOption, f func([]byte) []uintptr) UintptrArrOption {  if m.IsDefined() { return UintptrArrOpt(f(*m.value)) } else { return NoneUintptrArrOption }  }
/* ByteArrOption: []byte->[]byte */ func MapByteArrToByteArrOption(m ByteArrOption, f func([]byte) []byte) ByteArrOption {  if m.IsDefined() { return ByteArrOpt(f(*m.value)) } else { return NoneByteArrOption }  }
/* ByteArrOption: []byte->[]rune */ func MapRuneArrToByteArrOption(m ByteArrOption, f func([]byte) []rune) RuneArrOption {  if m.IsDefined() { return RuneArrOpt(f(*m.value)) } else { return NoneRuneArrOption }  }
/* ByteArrOption: []byte->[]float32 */ func MapFloat32ArrToByteArrOption(m ByteArrOption, f func([]byte) []float32) Float32ArrOption {  if m.IsDefined() { return Float32ArrOpt(f(*m.value)) } else { return NoneFloat32ArrOption }  }
/* ByteArrOption: []byte->[]float64 */ func MapFloat64ArrToByteArrOption(m ByteArrOption, f func([]byte) []float64) Float64ArrOption {  if m.IsDefined() { return Float64ArrOpt(f(*m.value)) } else { return NoneFloat64ArrOption }  }
/* ByteArrOption: []byte->[]complex64 */ func MapComplex64ArrToByteArrOption(m ByteArrOption, f func([]byte) []complex64) Complex64ArrOption {  if m.IsDefined() { return Complex64ArrOpt(f(*m.value)) } else { return NoneComplex64ArrOption }  }
/* ByteArrOption: []byte->[]complex128 */ func MapComplex128ArrToByteArrOption(m ByteArrOption, f func([]byte) []complex128) Complex128ArrOption {  if m.IsDefined() { return Complex128ArrOpt(f(*m.value)) } else { return NoneComplex128ArrOption }  }
/* ByteArrOption: []byte->[]Any */ func MapAnyArrToByteArrOption(m ByteArrOption, f func([]byte) []Any) AnyArrOption {  if m.IsDefined() { return AnyArrOpt(f(*m.value)) } else { return NoneAnyArrOption }  }
/* ByteArrOption: []byte->BoolList */ func MapBoolListToByteArrOption(m ByteArrOption, f func([]byte) BoolList) BoolListOption {  if m.IsDefined() { return BoolListOpt(f(*m.value)) } else { return NoneBoolListOption }  }
/* ByteArrOption: []byte->StringList */ func MapStringListToByteArrOption(m ByteArrOption, f func([]byte) StringList) StringListOption {  if m.IsDefined() { return StringListOpt(f(*m.value)) } else { return NoneStringListOption }  }
/* ByteArrOption: []byte->IntList */ func MapIntListToByteArrOption(m ByteArrOption, f func([]byte) IntList) IntListOption {  if m.IsDefined() { return IntListOpt(f(*m.value)) } else { return NoneIntListOption }  }
/* ByteArrOption: []byte->Int8List */ func MapInt8ListToByteArrOption(m ByteArrOption, f func([]byte) Int8List) Int8ListOption {  if m.IsDefined() { return Int8ListOpt(f(*m.value)) } else { return NoneInt8ListOption }  }
/* ByteArrOption: []byte->Int16List */ func MapInt16ListToByteArrOption(m ByteArrOption, f func([]byte) Int16List) Int16ListOption {  if m.IsDefined() { return Int16ListOpt(f(*m.value)) } else { return NoneInt16ListOption }  }
/* ByteArrOption: []byte->Int32List */ func MapInt32ListToByteArrOption(m ByteArrOption, f func([]byte) Int32List) Int32ListOption {  if m.IsDefined() { return Int32ListOpt(f(*m.value)) } else { return NoneInt32ListOption }  }
/* ByteArrOption: []byte->Int64List */ func MapInt64ListToByteArrOption(m ByteArrOption, f func([]byte) Int64List) Int64ListOption {  if m.IsDefined() { return Int64ListOpt(f(*m.value)) } else { return NoneInt64ListOption }  }
/* ByteArrOption: []byte->UintList */ func MapUintListToByteArrOption(m ByteArrOption, f func([]byte) UintList) UintListOption {  if m.IsDefined() { return UintListOpt(f(*m.value)) } else { return NoneUintListOption }  }
/* ByteArrOption: []byte->Uint8List */ func MapUint8ListToByteArrOption(m ByteArrOption, f func([]byte) Uint8List) Uint8ListOption {  if m.IsDefined() { return Uint8ListOpt(f(*m.value)) } else { return NoneUint8ListOption }  }
/* ByteArrOption: []byte->Uint16List */ func MapUint16ListToByteArrOption(m ByteArrOption, f func([]byte) Uint16List) Uint16ListOption {  if m.IsDefined() { return Uint16ListOpt(f(*m.value)) } else { return NoneUint16ListOption }  }
/* ByteArrOption: []byte->Uint32List */ func MapUint32ListToByteArrOption(m ByteArrOption, f func([]byte) Uint32List) Uint32ListOption {  if m.IsDefined() { return Uint32ListOpt(f(*m.value)) } else { return NoneUint32ListOption }  }
/* ByteArrOption: []byte->Uint64List */ func MapUint64ListToByteArrOption(m ByteArrOption, f func([]byte) Uint64List) Uint64ListOption {  if m.IsDefined() { return Uint64ListOpt(f(*m.value)) } else { return NoneUint64ListOption }  }
/* ByteArrOption: []byte->UintptrList */ func MapUintptrListToByteArrOption(m ByteArrOption, f func([]byte) UintptrList) UintptrListOption {  if m.IsDefined() { return UintptrListOpt(f(*m.value)) } else { return NoneUintptrListOption }  }
/* ByteArrOption: []byte->ByteList */ func MapByteListToByteArrOption(m ByteArrOption, f func([]byte) ByteList) ByteListOption {  if m.IsDefined() { return ByteListOpt(f(*m.value)) } else { return NoneByteListOption }  }
/* ByteArrOption: []byte->RuneList */ func MapRuneListToByteArrOption(m ByteArrOption, f func([]byte) RuneList) RuneListOption {  if m.IsDefined() { return RuneListOpt(f(*m.value)) } else { return NoneRuneListOption }  }
/* ByteArrOption: []byte->Float32List */ func MapFloat32ListToByteArrOption(m ByteArrOption, f func([]byte) Float32List) Float32ListOption {  if m.IsDefined() { return Float32ListOpt(f(*m.value)) } else { return NoneFloat32ListOption }  }
/* ByteArrOption: []byte->Float64List */ func MapFloat64ListToByteArrOption(m ByteArrOption, f func([]byte) Float64List) Float64ListOption {  if m.IsDefined() { return Float64ListOpt(f(*m.value)) } else { return NoneFloat64ListOption }  }
/* ByteArrOption: []byte->Complex64List */ func MapComplex64ListToByteArrOption(m ByteArrOption, f func([]byte) Complex64List) Complex64ListOption {  if m.IsDefined() { return Complex64ListOpt(f(*m.value)) } else { return NoneComplex64ListOption }  }
/* ByteArrOption: []byte->Complex128List */ func MapComplex128ListToByteArrOption(m ByteArrOption, f func([]byte) Complex128List) Complex128ListOption {  if m.IsDefined() { return Complex128ListOpt(f(*m.value)) } else { return NoneComplex128ListOption }  }
/* ByteArrOption: []byte->AnyList */ func MapAnyListToByteArrOption(m ByteArrOption, f func([]byte) AnyList) AnyListOption {  if m.IsDefined() { return AnyListOpt(f(*m.value)) } else { return NoneAnyListOption }  }
/* RuneArrOption: []rune->bool */ func MapBoolToRuneArrOption(m RuneArrOption, f func([]rune) bool) BoolOption {  if m.IsDefined() { return Bool(f(*m.value)) } else { return NoneBoolOption }  }
/* RuneArrOption: []rune->string */ func MapStringToRuneArrOption(m RuneArrOption, f func([]rune) string) StringOption {  if m.IsDefined() { return String(f(*m.value)) } else { return NoneStringOption }  }
/* RuneArrOption: []rune->int */ func MapIntToRuneArrOption(m RuneArrOption, f func([]rune) int) IntOption {  if m.IsDefined() { return Int(f(*m.value)) } else { return NoneIntOption }  }
/* RuneArrOption: []rune->int8 */ func MapInt8ToRuneArrOption(m RuneArrOption, f func([]rune) int8) Int8Option {  if m.IsDefined() { return Int8(f(*m.value)) } else { return NoneInt8Option }  }
/* RuneArrOption: []rune->int16 */ func MapInt16ToRuneArrOption(m RuneArrOption, f func([]rune) int16) Int16Option {  if m.IsDefined() { return Int16(f(*m.value)) } else { return NoneInt16Option }  }
/* RuneArrOption: []rune->int32 */ func MapInt32ToRuneArrOption(m RuneArrOption, f func([]rune) int32) Int32Option {  if m.IsDefined() { return Int32(f(*m.value)) } else { return NoneInt32Option }  }
/* RuneArrOption: []rune->int64 */ func MapInt64ToRuneArrOption(m RuneArrOption, f func([]rune) int64) Int64Option {  if m.IsDefined() { return Int64(f(*m.value)) } else { return NoneInt64Option }  }
/* RuneArrOption: []rune->uint */ func MapUintToRuneArrOption(m RuneArrOption, f func([]rune) uint) UintOption {  if m.IsDefined() { return Uint(f(*m.value)) } else { return NoneUintOption }  }
/* RuneArrOption: []rune->uint8 */ func MapUint8ToRuneArrOption(m RuneArrOption, f func([]rune) uint8) Uint8Option {  if m.IsDefined() { return Uint8(f(*m.value)) } else { return NoneUint8Option }  }
/* RuneArrOption: []rune->uint16 */ func MapUint16ToRuneArrOption(m RuneArrOption, f func([]rune) uint16) Uint16Option {  if m.IsDefined() { return Uint16(f(*m.value)) } else { return NoneUint16Option }  }
/* RuneArrOption: []rune->uint32 */ func MapUint32ToRuneArrOption(m RuneArrOption, f func([]rune) uint32) Uint32Option {  if m.IsDefined() { return Uint32(f(*m.value)) } else { return NoneUint32Option }  }
/* RuneArrOption: []rune->uint64 */ func MapUint64ToRuneArrOption(m RuneArrOption, f func([]rune) uint64) Uint64Option {  if m.IsDefined() { return Uint64(f(*m.value)) } else { return NoneUint64Option }  }
/* RuneArrOption: []rune->uintptr */ func MapUintptrToRuneArrOption(m RuneArrOption, f func([]rune) uintptr) UintptrOption {  if m.IsDefined() { return Uintptr(f(*m.value)) } else { return NoneUintptrOption }  }
/* RuneArrOption: []rune->byte */ func MapByteToRuneArrOption(m RuneArrOption, f func([]rune) byte) ByteOption {  if m.IsDefined() { return Byte(f(*m.value)) } else { return NoneByteOption }  }
/* RuneArrOption: []rune->rune */ func MapRuneToRuneArrOption(m RuneArrOption, f func([]rune) rune) RuneOption {  if m.IsDefined() { return Rune(f(*m.value)) } else { return NoneRuneOption }  }
/* RuneArrOption: []rune->float32 */ func MapFloat32ToRuneArrOption(m RuneArrOption, f func([]rune) float32) Float32Option {  if m.IsDefined() { return Float32(f(*m.value)) } else { return NoneFloat32Option }  }
/* RuneArrOption: []rune->float64 */ func MapFloat64ToRuneArrOption(m RuneArrOption, f func([]rune) float64) Float64Option {  if m.IsDefined() { return Float64(f(*m.value)) } else { return NoneFloat64Option }  }
/* RuneArrOption: []rune->complex64 */ func MapComplex64ToRuneArrOption(m RuneArrOption, f func([]rune) complex64) Complex64Option {  if m.IsDefined() { return Complex64(f(*m.value)) } else { return NoneComplex64Option }  }
/* RuneArrOption: []rune->complex128 */ func MapComplex128ToRuneArrOption(m RuneArrOption, f func([]rune) complex128) Complex128Option {  if m.IsDefined() { return Complex128(f(*m.value)) } else { return NoneComplex128Option }  }
/* RuneArrOption: []rune->Any */ func MapAnyToRuneArrOption(m RuneArrOption, f func([]rune) Any) AnyOption {  if m.IsDefined() { return AnyOpt(f(*m.value)) } else { return NoneAnyOption }  }
/* RuneArrOption: []rune->BoolOption */ func MapBoolOptionToRuneArrOption(m RuneArrOption, f func([]rune) BoolOption) BoolOptionOption {  if m.IsDefined() { return BoolBool(f(*m.value)) } else { return NoneBoolOptionOption }  }
/* RuneArrOption: []rune->StringOption */ func MapStringOptionToRuneArrOption(m RuneArrOption, f func([]rune) StringOption) StringOptionOption {  if m.IsDefined() { return StringString(f(*m.value)) } else { return NoneStringOptionOption }  }
/* RuneArrOption: []rune->IntOption */ func MapIntOptionToRuneArrOption(m RuneArrOption, f func([]rune) IntOption) IntOptionOption {  if m.IsDefined() { return IntInt(f(*m.value)) } else { return NoneIntOptionOption }  }
/* RuneArrOption: []rune->Int8Option */ func MapInt8OptionToRuneArrOption(m RuneArrOption, f func([]rune) Int8Option) Int8OptionOption {  if m.IsDefined() { return Int8Int8(f(*m.value)) } else { return NoneInt8OptionOption }  }
/* RuneArrOption: []rune->Int16Option */ func MapInt16OptionToRuneArrOption(m RuneArrOption, f func([]rune) Int16Option) Int16OptionOption {  if m.IsDefined() { return Int16Int16(f(*m.value)) } else { return NoneInt16OptionOption }  }
/* RuneArrOption: []rune->Int32Option */ func MapInt32OptionToRuneArrOption(m RuneArrOption, f func([]rune) Int32Option) Int32OptionOption {  if m.IsDefined() { return Int32Int32(f(*m.value)) } else { return NoneInt32OptionOption }  }
/* RuneArrOption: []rune->Int64Option */ func MapInt64OptionToRuneArrOption(m RuneArrOption, f func([]rune) Int64Option) Int64OptionOption {  if m.IsDefined() { return Int64Int64(f(*m.value)) } else { return NoneInt64OptionOption }  }
/* RuneArrOption: []rune->UintOption */ func MapUintOptionToRuneArrOption(m RuneArrOption, f func([]rune) UintOption) UintOptionOption {  if m.IsDefined() { return UintUint(f(*m.value)) } else { return NoneUintOptionOption }  }
/* RuneArrOption: []rune->Uint8Option */ func MapUint8OptionToRuneArrOption(m RuneArrOption, f func([]rune) Uint8Option) Uint8OptionOption {  if m.IsDefined() { return Uint8Uint8(f(*m.value)) } else { return NoneUint8OptionOption }  }
/* RuneArrOption: []rune->Uint16Option */ func MapUint16OptionToRuneArrOption(m RuneArrOption, f func([]rune) Uint16Option) Uint16OptionOption {  if m.IsDefined() { return Uint16Uint16(f(*m.value)) } else { return NoneUint16OptionOption }  }
/* RuneArrOption: []rune->Uint32Option */ func MapUint32OptionToRuneArrOption(m RuneArrOption, f func([]rune) Uint32Option) Uint32OptionOption {  if m.IsDefined() { return Uint32Uint32(f(*m.value)) } else { return NoneUint32OptionOption }  }
/* RuneArrOption: []rune->Uint64Option */ func MapUint64OptionToRuneArrOption(m RuneArrOption, f func([]rune) Uint64Option) Uint64OptionOption {  if m.IsDefined() { return Uint64Uint64(f(*m.value)) } else { return NoneUint64OptionOption }  }
/* RuneArrOption: []rune->UintptrOption */ func MapUintptrOptionToRuneArrOption(m RuneArrOption, f func([]rune) UintptrOption) UintptrOptionOption {  if m.IsDefined() { return UintptrUintptr(f(*m.value)) } else { return NoneUintptrOptionOption }  }
/* RuneArrOption: []rune->ByteOption */ func MapByteOptionToRuneArrOption(m RuneArrOption, f func([]rune) ByteOption) ByteOptionOption {  if m.IsDefined() { return ByteByte(f(*m.value)) } else { return NoneByteOptionOption }  }
/* RuneArrOption: []rune->RuneOption */ func MapRuneOptionToRuneArrOption(m RuneArrOption, f func([]rune) RuneOption) RuneOptionOption {  if m.IsDefined() { return RuneRune(f(*m.value)) } else { return NoneRuneOptionOption }  }
/* RuneArrOption: []rune->Float32Option */ func MapFloat32OptionToRuneArrOption(m RuneArrOption, f func([]rune) Float32Option) Float32OptionOption {  if m.IsDefined() { return Float32Float32(f(*m.value)) } else { return NoneFloat32OptionOption }  }
/* RuneArrOption: []rune->Float64Option */ func MapFloat64OptionToRuneArrOption(m RuneArrOption, f func([]rune) Float64Option) Float64OptionOption {  if m.IsDefined() { return Float64Float64(f(*m.value)) } else { return NoneFloat64OptionOption }  }
/* RuneArrOption: []rune->Complex64Option */ func MapComplex64OptionToRuneArrOption(m RuneArrOption, f func([]rune) Complex64Option) Complex64OptionOption {  if m.IsDefined() { return Complex64Complex64(f(*m.value)) } else { return NoneComplex64OptionOption }  }
/* RuneArrOption: []rune->Complex128Option */ func MapComplex128OptionToRuneArrOption(m RuneArrOption, f func([]rune) Complex128Option) Complex128OptionOption {  if m.IsDefined() { return Complex128Complex128(f(*m.value)) } else { return NoneComplex128OptionOption }  }
/* RuneArrOption: []rune->AnyOption */ func MapAnyOptionToRuneArrOption(m RuneArrOption, f func([]rune) AnyOption) AnyOptionOption {  if m.IsDefined() { return AnyOptAny(f(*m.value)) } else { return NoneAnyOptionOption }  }
/* RuneArrOption: []rune->[]bool */ func MapBoolArrToRuneArrOption(m RuneArrOption, f func([]rune) []bool) BoolArrOption {  if m.IsDefined() { return BoolArrOpt(f(*m.value)) } else { return NoneBoolArrOption }  }
/* RuneArrOption: []rune->[]string */ func MapStringArrToRuneArrOption(m RuneArrOption, f func([]rune) []string) StringArrOption {  if m.IsDefined() { return StringArrOpt(f(*m.value)) } else { return NoneStringArrOption }  }
/* RuneArrOption: []rune->[]int */ func MapIntArrToRuneArrOption(m RuneArrOption, f func([]rune) []int) IntArrOption {  if m.IsDefined() { return IntArrOpt(f(*m.value)) } else { return NoneIntArrOption }  }
/* RuneArrOption: []rune->[]int8 */ func MapInt8ArrToRuneArrOption(m RuneArrOption, f func([]rune) []int8) Int8ArrOption {  if m.IsDefined() { return Int8ArrOpt(f(*m.value)) } else { return NoneInt8ArrOption }  }
/* RuneArrOption: []rune->[]int16 */ func MapInt16ArrToRuneArrOption(m RuneArrOption, f func([]rune) []int16) Int16ArrOption {  if m.IsDefined() { return Int16ArrOpt(f(*m.value)) } else { return NoneInt16ArrOption }  }
/* RuneArrOption: []rune->[]int32 */ func MapInt32ArrToRuneArrOption(m RuneArrOption, f func([]rune) []int32) Int32ArrOption {  if m.IsDefined() { return Int32ArrOpt(f(*m.value)) } else { return NoneInt32ArrOption }  }
/* RuneArrOption: []rune->[]int64 */ func MapInt64ArrToRuneArrOption(m RuneArrOption, f func([]rune) []int64) Int64ArrOption {  if m.IsDefined() { return Int64ArrOpt(f(*m.value)) } else { return NoneInt64ArrOption }  }
/* RuneArrOption: []rune->[]uint */ func MapUintArrToRuneArrOption(m RuneArrOption, f func([]rune) []uint) UintArrOption {  if m.IsDefined() { return UintArrOpt(f(*m.value)) } else { return NoneUintArrOption }  }
/* RuneArrOption: []rune->[]uint8 */ func MapUint8ArrToRuneArrOption(m RuneArrOption, f func([]rune) []uint8) Uint8ArrOption {  if m.IsDefined() { return Uint8ArrOpt(f(*m.value)) } else { return NoneUint8ArrOption }  }
/* RuneArrOption: []rune->[]uint16 */ func MapUint16ArrToRuneArrOption(m RuneArrOption, f func([]rune) []uint16) Uint16ArrOption {  if m.IsDefined() { return Uint16ArrOpt(f(*m.value)) } else { return NoneUint16ArrOption }  }
/* RuneArrOption: []rune->[]uint32 */ func MapUint32ArrToRuneArrOption(m RuneArrOption, f func([]rune) []uint32) Uint32ArrOption {  if m.IsDefined() { return Uint32ArrOpt(f(*m.value)) } else { return NoneUint32ArrOption }  }
/* RuneArrOption: []rune->[]uint64 */ func MapUint64ArrToRuneArrOption(m RuneArrOption, f func([]rune) []uint64) Uint64ArrOption {  if m.IsDefined() { return Uint64ArrOpt(f(*m.value)) } else { return NoneUint64ArrOption }  }
/* RuneArrOption: []rune->[]uintptr */ func MapUintptrArrToRuneArrOption(m RuneArrOption, f func([]rune) []uintptr) UintptrArrOption {  if m.IsDefined() { return UintptrArrOpt(f(*m.value)) } else { return NoneUintptrArrOption }  }
/* RuneArrOption: []rune->[]byte */ func MapByteArrToRuneArrOption(m RuneArrOption, f func([]rune) []byte) ByteArrOption {  if m.IsDefined() { return ByteArrOpt(f(*m.value)) } else { return NoneByteArrOption }  }
/* RuneArrOption: []rune->[]rune */ func MapRuneArrToRuneArrOption(m RuneArrOption, f func([]rune) []rune) RuneArrOption {  if m.IsDefined() { return RuneArrOpt(f(*m.value)) } else { return NoneRuneArrOption }  }
/* RuneArrOption: []rune->[]float32 */ func MapFloat32ArrToRuneArrOption(m RuneArrOption, f func([]rune) []float32) Float32ArrOption {  if m.IsDefined() { return Float32ArrOpt(f(*m.value)) } else { return NoneFloat32ArrOption }  }
/* RuneArrOption: []rune->[]float64 */ func MapFloat64ArrToRuneArrOption(m RuneArrOption, f func([]rune) []float64) Float64ArrOption {  if m.IsDefined() { return Float64ArrOpt(f(*m.value)) } else { return NoneFloat64ArrOption }  }
/* RuneArrOption: []rune->[]complex64 */ func MapComplex64ArrToRuneArrOption(m RuneArrOption, f func([]rune) []complex64) Complex64ArrOption {  if m.IsDefined() { return Complex64ArrOpt(f(*m.value)) } else { return NoneComplex64ArrOption }  }
/* RuneArrOption: []rune->[]complex128 */ func MapComplex128ArrToRuneArrOption(m RuneArrOption, f func([]rune) []complex128) Complex128ArrOption {  if m.IsDefined() { return Complex128ArrOpt(f(*m.value)) } else { return NoneComplex128ArrOption }  }
/* RuneArrOption: []rune->[]Any */ func MapAnyArrToRuneArrOption(m RuneArrOption, f func([]rune) []Any) AnyArrOption {  if m.IsDefined() { return AnyArrOpt(f(*m.value)) } else { return NoneAnyArrOption }  }
/* RuneArrOption: []rune->BoolList */ func MapBoolListToRuneArrOption(m RuneArrOption, f func([]rune) BoolList) BoolListOption {  if m.IsDefined() { return BoolListOpt(f(*m.value)) } else { return NoneBoolListOption }  }
/* RuneArrOption: []rune->StringList */ func MapStringListToRuneArrOption(m RuneArrOption, f func([]rune) StringList) StringListOption {  if m.IsDefined() { return StringListOpt(f(*m.value)) } else { return NoneStringListOption }  }
/* RuneArrOption: []rune->IntList */ func MapIntListToRuneArrOption(m RuneArrOption, f func([]rune) IntList) IntListOption {  if m.IsDefined() { return IntListOpt(f(*m.value)) } else { return NoneIntListOption }  }
/* RuneArrOption: []rune->Int8List */ func MapInt8ListToRuneArrOption(m RuneArrOption, f func([]rune) Int8List) Int8ListOption {  if m.IsDefined() { return Int8ListOpt(f(*m.value)) } else { return NoneInt8ListOption }  }
/* RuneArrOption: []rune->Int16List */ func MapInt16ListToRuneArrOption(m RuneArrOption, f func([]rune) Int16List) Int16ListOption {  if m.IsDefined() { return Int16ListOpt(f(*m.value)) } else { return NoneInt16ListOption }  }
/* RuneArrOption: []rune->Int32List */ func MapInt32ListToRuneArrOption(m RuneArrOption, f func([]rune) Int32List) Int32ListOption {  if m.IsDefined() { return Int32ListOpt(f(*m.value)) } else { return NoneInt32ListOption }  }
/* RuneArrOption: []rune->Int64List */ func MapInt64ListToRuneArrOption(m RuneArrOption, f func([]rune) Int64List) Int64ListOption {  if m.IsDefined() { return Int64ListOpt(f(*m.value)) } else { return NoneInt64ListOption }  }
/* RuneArrOption: []rune->UintList */ func MapUintListToRuneArrOption(m RuneArrOption, f func([]rune) UintList) UintListOption {  if m.IsDefined() { return UintListOpt(f(*m.value)) } else { return NoneUintListOption }  }
/* RuneArrOption: []rune->Uint8List */ func MapUint8ListToRuneArrOption(m RuneArrOption, f func([]rune) Uint8List) Uint8ListOption {  if m.IsDefined() { return Uint8ListOpt(f(*m.value)) } else { return NoneUint8ListOption }  }
/* RuneArrOption: []rune->Uint16List */ func MapUint16ListToRuneArrOption(m RuneArrOption, f func([]rune) Uint16List) Uint16ListOption {  if m.IsDefined() { return Uint16ListOpt(f(*m.value)) } else { return NoneUint16ListOption }  }
/* RuneArrOption: []rune->Uint32List */ func MapUint32ListToRuneArrOption(m RuneArrOption, f func([]rune) Uint32List) Uint32ListOption {  if m.IsDefined() { return Uint32ListOpt(f(*m.value)) } else { return NoneUint32ListOption }  }
/* RuneArrOption: []rune->Uint64List */ func MapUint64ListToRuneArrOption(m RuneArrOption, f func([]rune) Uint64List) Uint64ListOption {  if m.IsDefined() { return Uint64ListOpt(f(*m.value)) } else { return NoneUint64ListOption }  }
/* RuneArrOption: []rune->UintptrList */ func MapUintptrListToRuneArrOption(m RuneArrOption, f func([]rune) UintptrList) UintptrListOption {  if m.IsDefined() { return UintptrListOpt(f(*m.value)) } else { return NoneUintptrListOption }  }
/* RuneArrOption: []rune->ByteList */ func MapByteListToRuneArrOption(m RuneArrOption, f func([]rune) ByteList) ByteListOption {  if m.IsDefined() { return ByteListOpt(f(*m.value)) } else { return NoneByteListOption }  }
/* RuneArrOption: []rune->RuneList */ func MapRuneListToRuneArrOption(m RuneArrOption, f func([]rune) RuneList) RuneListOption {  if m.IsDefined() { return RuneListOpt(f(*m.value)) } else { return NoneRuneListOption }  }
/* RuneArrOption: []rune->Float32List */ func MapFloat32ListToRuneArrOption(m RuneArrOption, f func([]rune) Float32List) Float32ListOption {  if m.IsDefined() { return Float32ListOpt(f(*m.value)) } else { return NoneFloat32ListOption }  }
/* RuneArrOption: []rune->Float64List */ func MapFloat64ListToRuneArrOption(m RuneArrOption, f func([]rune) Float64List) Float64ListOption {  if m.IsDefined() { return Float64ListOpt(f(*m.value)) } else { return NoneFloat64ListOption }  }
/* RuneArrOption: []rune->Complex64List */ func MapComplex64ListToRuneArrOption(m RuneArrOption, f func([]rune) Complex64List) Complex64ListOption {  if m.IsDefined() { return Complex64ListOpt(f(*m.value)) } else { return NoneComplex64ListOption }  }
/* RuneArrOption: []rune->Complex128List */ func MapComplex128ListToRuneArrOption(m RuneArrOption, f func([]rune) Complex128List) Complex128ListOption {  if m.IsDefined() { return Complex128ListOpt(f(*m.value)) } else { return NoneComplex128ListOption }  }
/* RuneArrOption: []rune->AnyList */ func MapAnyListToRuneArrOption(m RuneArrOption, f func([]rune) AnyList) AnyListOption {  if m.IsDefined() { return AnyListOpt(f(*m.value)) } else { return NoneAnyListOption }  }
/* Float32ArrOption: []float32->bool */ func MapBoolToFloat32ArrOption(m Float32ArrOption, f func([]float32) bool) BoolOption {  if m.IsDefined() { return Bool(f(*m.value)) } else { return NoneBoolOption }  }
/* Float32ArrOption: []float32->string */ func MapStringToFloat32ArrOption(m Float32ArrOption, f func([]float32) string) StringOption {  if m.IsDefined() { return String(f(*m.value)) } else { return NoneStringOption }  }
/* Float32ArrOption: []float32->int */ func MapIntToFloat32ArrOption(m Float32ArrOption, f func([]float32) int) IntOption {  if m.IsDefined() { return Int(f(*m.value)) } else { return NoneIntOption }  }
/* Float32ArrOption: []float32->int8 */ func MapInt8ToFloat32ArrOption(m Float32ArrOption, f func([]float32) int8) Int8Option {  if m.IsDefined() { return Int8(f(*m.value)) } else { return NoneInt8Option }  }
/* Float32ArrOption: []float32->int16 */ func MapInt16ToFloat32ArrOption(m Float32ArrOption, f func([]float32) int16) Int16Option {  if m.IsDefined() { return Int16(f(*m.value)) } else { return NoneInt16Option }  }
/* Float32ArrOption: []float32->int32 */ func MapInt32ToFloat32ArrOption(m Float32ArrOption, f func([]float32) int32) Int32Option {  if m.IsDefined() { return Int32(f(*m.value)) } else { return NoneInt32Option }  }
/* Float32ArrOption: []float32->int64 */ func MapInt64ToFloat32ArrOption(m Float32ArrOption, f func([]float32) int64) Int64Option {  if m.IsDefined() { return Int64(f(*m.value)) } else { return NoneInt64Option }  }
/* Float32ArrOption: []float32->uint */ func MapUintToFloat32ArrOption(m Float32ArrOption, f func([]float32) uint) UintOption {  if m.IsDefined() { return Uint(f(*m.value)) } else { return NoneUintOption }  }
/* Float32ArrOption: []float32->uint8 */ func MapUint8ToFloat32ArrOption(m Float32ArrOption, f func([]float32) uint8) Uint8Option {  if m.IsDefined() { return Uint8(f(*m.value)) } else { return NoneUint8Option }  }
/* Float32ArrOption: []float32->uint16 */ func MapUint16ToFloat32ArrOption(m Float32ArrOption, f func([]float32) uint16) Uint16Option {  if m.IsDefined() { return Uint16(f(*m.value)) } else { return NoneUint16Option }  }
/* Float32ArrOption: []float32->uint32 */ func MapUint32ToFloat32ArrOption(m Float32ArrOption, f func([]float32) uint32) Uint32Option {  if m.IsDefined() { return Uint32(f(*m.value)) } else { return NoneUint32Option }  }
/* Float32ArrOption: []float32->uint64 */ func MapUint64ToFloat32ArrOption(m Float32ArrOption, f func([]float32) uint64) Uint64Option {  if m.IsDefined() { return Uint64(f(*m.value)) } else { return NoneUint64Option }  }
/* Float32ArrOption: []float32->uintptr */ func MapUintptrToFloat32ArrOption(m Float32ArrOption, f func([]float32) uintptr) UintptrOption {  if m.IsDefined() { return Uintptr(f(*m.value)) } else { return NoneUintptrOption }  }
/* Float32ArrOption: []float32->byte */ func MapByteToFloat32ArrOption(m Float32ArrOption, f func([]float32) byte) ByteOption {  if m.IsDefined() { return Byte(f(*m.value)) } else { return NoneByteOption }  }
/* Float32ArrOption: []float32->rune */ func MapRuneToFloat32ArrOption(m Float32ArrOption, f func([]float32) rune) RuneOption {  if m.IsDefined() { return Rune(f(*m.value)) } else { return NoneRuneOption }  }
/* Float32ArrOption: []float32->float32 */ func MapFloat32ToFloat32ArrOption(m Float32ArrOption, f func([]float32) float32) Float32Option {  if m.IsDefined() { return Float32(f(*m.value)) } else { return NoneFloat32Option }  }
/* Float32ArrOption: []float32->float64 */ func MapFloat64ToFloat32ArrOption(m Float32ArrOption, f func([]float32) float64) Float64Option {  if m.IsDefined() { return Float64(f(*m.value)) } else { return NoneFloat64Option }  }
/* Float32ArrOption: []float32->complex64 */ func MapComplex64ToFloat32ArrOption(m Float32ArrOption, f func([]float32) complex64) Complex64Option {  if m.IsDefined() { return Complex64(f(*m.value)) } else { return NoneComplex64Option }  }
/* Float32ArrOption: []float32->complex128 */ func MapComplex128ToFloat32ArrOption(m Float32ArrOption, f func([]float32) complex128) Complex128Option {  if m.IsDefined() { return Complex128(f(*m.value)) } else { return NoneComplex128Option }  }
/* Float32ArrOption: []float32->Any */ func MapAnyToFloat32ArrOption(m Float32ArrOption, f func([]float32) Any) AnyOption {  if m.IsDefined() { return AnyOpt(f(*m.value)) } else { return NoneAnyOption }  }
/* Float32ArrOption: []float32->BoolOption */ func MapBoolOptionToFloat32ArrOption(m Float32ArrOption, f func([]float32) BoolOption) BoolOptionOption {  if m.IsDefined() { return BoolBool(f(*m.value)) } else { return NoneBoolOptionOption }  }
/* Float32ArrOption: []float32->StringOption */ func MapStringOptionToFloat32ArrOption(m Float32ArrOption, f func([]float32) StringOption) StringOptionOption {  if m.IsDefined() { return StringString(f(*m.value)) } else { return NoneStringOptionOption }  }
/* Float32ArrOption: []float32->IntOption */ func MapIntOptionToFloat32ArrOption(m Float32ArrOption, f func([]float32) IntOption) IntOptionOption {  if m.IsDefined() { return IntInt(f(*m.value)) } else { return NoneIntOptionOption }  }
/* Float32ArrOption: []float32->Int8Option */ func MapInt8OptionToFloat32ArrOption(m Float32ArrOption, f func([]float32) Int8Option) Int8OptionOption {  if m.IsDefined() { return Int8Int8(f(*m.value)) } else { return NoneInt8OptionOption }  }
/* Float32ArrOption: []float32->Int16Option */ func MapInt16OptionToFloat32ArrOption(m Float32ArrOption, f func([]float32) Int16Option) Int16OptionOption {  if m.IsDefined() { return Int16Int16(f(*m.value)) } else { return NoneInt16OptionOption }  }
/* Float32ArrOption: []float32->Int32Option */ func MapInt32OptionToFloat32ArrOption(m Float32ArrOption, f func([]float32) Int32Option) Int32OptionOption {  if m.IsDefined() { return Int32Int32(f(*m.value)) } else { return NoneInt32OptionOption }  }
/* Float32ArrOption: []float32->Int64Option */ func MapInt64OptionToFloat32ArrOption(m Float32ArrOption, f func([]float32) Int64Option) Int64OptionOption {  if m.IsDefined() { return Int64Int64(f(*m.value)) } else { return NoneInt64OptionOption }  }
/* Float32ArrOption: []float32->UintOption */ func MapUintOptionToFloat32ArrOption(m Float32ArrOption, f func([]float32) UintOption) UintOptionOption {  if m.IsDefined() { return UintUint(f(*m.value)) } else { return NoneUintOptionOption }  }
/* Float32ArrOption: []float32->Uint8Option */ func MapUint8OptionToFloat32ArrOption(m Float32ArrOption, f func([]float32) Uint8Option) Uint8OptionOption {  if m.IsDefined() { return Uint8Uint8(f(*m.value)) } else { return NoneUint8OptionOption }  }
/* Float32ArrOption: []float32->Uint16Option */ func MapUint16OptionToFloat32ArrOption(m Float32ArrOption, f func([]float32) Uint16Option) Uint16OptionOption {  if m.IsDefined() { return Uint16Uint16(f(*m.value)) } else { return NoneUint16OptionOption }  }
/* Float32ArrOption: []float32->Uint32Option */ func MapUint32OptionToFloat32ArrOption(m Float32ArrOption, f func([]float32) Uint32Option) Uint32OptionOption {  if m.IsDefined() { return Uint32Uint32(f(*m.value)) } else { return NoneUint32OptionOption }  }
/* Float32ArrOption: []float32->Uint64Option */ func MapUint64OptionToFloat32ArrOption(m Float32ArrOption, f func([]float32) Uint64Option) Uint64OptionOption {  if m.IsDefined() { return Uint64Uint64(f(*m.value)) } else { return NoneUint64OptionOption }  }
/* Float32ArrOption: []float32->UintptrOption */ func MapUintptrOptionToFloat32ArrOption(m Float32ArrOption, f func([]float32) UintptrOption) UintptrOptionOption {  if m.IsDefined() { return UintptrUintptr(f(*m.value)) } else { return NoneUintptrOptionOption }  }
/* Float32ArrOption: []float32->ByteOption */ func MapByteOptionToFloat32ArrOption(m Float32ArrOption, f func([]float32) ByteOption) ByteOptionOption {  if m.IsDefined() { return ByteByte(f(*m.value)) } else { return NoneByteOptionOption }  }
/* Float32ArrOption: []float32->RuneOption */ func MapRuneOptionToFloat32ArrOption(m Float32ArrOption, f func([]float32) RuneOption) RuneOptionOption {  if m.IsDefined() { return RuneRune(f(*m.value)) } else { return NoneRuneOptionOption }  }
/* Float32ArrOption: []float32->Float32Option */ func MapFloat32OptionToFloat32ArrOption(m Float32ArrOption, f func([]float32) Float32Option) Float32OptionOption {  if m.IsDefined() { return Float32Float32(f(*m.value)) } else { return NoneFloat32OptionOption }  }
/* Float32ArrOption: []float32->Float64Option */ func MapFloat64OptionToFloat32ArrOption(m Float32ArrOption, f func([]float32) Float64Option) Float64OptionOption {  if m.IsDefined() { return Float64Float64(f(*m.value)) } else { return NoneFloat64OptionOption }  }
/* Float32ArrOption: []float32->Complex64Option */ func MapComplex64OptionToFloat32ArrOption(m Float32ArrOption, f func([]float32) Complex64Option) Complex64OptionOption {  if m.IsDefined() { return Complex64Complex64(f(*m.value)) } else { return NoneComplex64OptionOption }  }
/* Float32ArrOption: []float32->Complex128Option */ func MapComplex128OptionToFloat32ArrOption(m Float32ArrOption, f func([]float32) Complex128Option) Complex128OptionOption {  if m.IsDefined() { return Complex128Complex128(f(*m.value)) } else { return NoneComplex128OptionOption }  }
/* Float32ArrOption: []float32->AnyOption */ func MapAnyOptionToFloat32ArrOption(m Float32ArrOption, f func([]float32) AnyOption) AnyOptionOption {  if m.IsDefined() { return AnyOptAny(f(*m.value)) } else { return NoneAnyOptionOption }  }
/* Float32ArrOption: []float32->[]bool */ func MapBoolArrToFloat32ArrOption(m Float32ArrOption, f func([]float32) []bool) BoolArrOption {  if m.IsDefined() { return BoolArrOpt(f(*m.value)) } else { return NoneBoolArrOption }  }
/* Float32ArrOption: []float32->[]string */ func MapStringArrToFloat32ArrOption(m Float32ArrOption, f func([]float32) []string) StringArrOption {  if m.IsDefined() { return StringArrOpt(f(*m.value)) } else { return NoneStringArrOption }  }
/* Float32ArrOption: []float32->[]int */ func MapIntArrToFloat32ArrOption(m Float32ArrOption, f func([]float32) []int) IntArrOption {  if m.IsDefined() { return IntArrOpt(f(*m.value)) } else { return NoneIntArrOption }  }
/* Float32ArrOption: []float32->[]int8 */ func MapInt8ArrToFloat32ArrOption(m Float32ArrOption, f func([]float32) []int8) Int8ArrOption {  if m.IsDefined() { return Int8ArrOpt(f(*m.value)) } else { return NoneInt8ArrOption }  }
/* Float32ArrOption: []float32->[]int16 */ func MapInt16ArrToFloat32ArrOption(m Float32ArrOption, f func([]float32) []int16) Int16ArrOption {  if m.IsDefined() { return Int16ArrOpt(f(*m.value)) } else { return NoneInt16ArrOption }  }
/* Float32ArrOption: []float32->[]int32 */ func MapInt32ArrToFloat32ArrOption(m Float32ArrOption, f func([]float32) []int32) Int32ArrOption {  if m.IsDefined() { return Int32ArrOpt(f(*m.value)) } else { return NoneInt32ArrOption }  }
/* Float32ArrOption: []float32->[]int64 */ func MapInt64ArrToFloat32ArrOption(m Float32ArrOption, f func([]float32) []int64) Int64ArrOption {  if m.IsDefined() { return Int64ArrOpt(f(*m.value)) } else { return NoneInt64ArrOption }  }
/* Float32ArrOption: []float32->[]uint */ func MapUintArrToFloat32ArrOption(m Float32ArrOption, f func([]float32) []uint) UintArrOption {  if m.IsDefined() { return UintArrOpt(f(*m.value)) } else { return NoneUintArrOption }  }
/* Float32ArrOption: []float32->[]uint8 */ func MapUint8ArrToFloat32ArrOption(m Float32ArrOption, f func([]float32) []uint8) Uint8ArrOption {  if m.IsDefined() { return Uint8ArrOpt(f(*m.value)) } else { return NoneUint8ArrOption }  }
/* Float32ArrOption: []float32->[]uint16 */ func MapUint16ArrToFloat32ArrOption(m Float32ArrOption, f func([]float32) []uint16) Uint16ArrOption {  if m.IsDefined() { return Uint16ArrOpt(f(*m.value)) } else { return NoneUint16ArrOption }  }
/* Float32ArrOption: []float32->[]uint32 */ func MapUint32ArrToFloat32ArrOption(m Float32ArrOption, f func([]float32) []uint32) Uint32ArrOption {  if m.IsDefined() { return Uint32ArrOpt(f(*m.value)) } else { return NoneUint32ArrOption }  }
/* Float32ArrOption: []float32->[]uint64 */ func MapUint64ArrToFloat32ArrOption(m Float32ArrOption, f func([]float32) []uint64) Uint64ArrOption {  if m.IsDefined() { return Uint64ArrOpt(f(*m.value)) } else { return NoneUint64ArrOption }  }
/* Float32ArrOption: []float32->[]uintptr */ func MapUintptrArrToFloat32ArrOption(m Float32ArrOption, f func([]float32) []uintptr) UintptrArrOption {  if m.IsDefined() { return UintptrArrOpt(f(*m.value)) } else { return NoneUintptrArrOption }  }
/* Float32ArrOption: []float32->[]byte */ func MapByteArrToFloat32ArrOption(m Float32ArrOption, f func([]float32) []byte) ByteArrOption {  if m.IsDefined() { return ByteArrOpt(f(*m.value)) } else { return NoneByteArrOption }  }
/* Float32ArrOption: []float32->[]rune */ func MapRuneArrToFloat32ArrOption(m Float32ArrOption, f func([]float32) []rune) RuneArrOption {  if m.IsDefined() { return RuneArrOpt(f(*m.value)) } else { return NoneRuneArrOption }  }
/* Float32ArrOption: []float32->[]float32 */ func MapFloat32ArrToFloat32ArrOption(m Float32ArrOption, f func([]float32) []float32) Float32ArrOption {  if m.IsDefined() { return Float32ArrOpt(f(*m.value)) } else { return NoneFloat32ArrOption }  }
/* Float32ArrOption: []float32->[]float64 */ func MapFloat64ArrToFloat32ArrOption(m Float32ArrOption, f func([]float32) []float64) Float64ArrOption {  if m.IsDefined() { return Float64ArrOpt(f(*m.value)) } else { return NoneFloat64ArrOption }  }
/* Float32ArrOption: []float32->[]complex64 */ func MapComplex64ArrToFloat32ArrOption(m Float32ArrOption, f func([]float32) []complex64) Complex64ArrOption {  if m.IsDefined() { return Complex64ArrOpt(f(*m.value)) } else { return NoneComplex64ArrOption }  }
/* Float32ArrOption: []float32->[]complex128 */ func MapComplex128ArrToFloat32ArrOption(m Float32ArrOption, f func([]float32) []complex128) Complex128ArrOption {  if m.IsDefined() { return Complex128ArrOpt(f(*m.value)) } else { return NoneComplex128ArrOption }  }
/* Float32ArrOption: []float32->[]Any */ func MapAnyArrToFloat32ArrOption(m Float32ArrOption, f func([]float32) []Any) AnyArrOption {  if m.IsDefined() { return AnyArrOpt(f(*m.value)) } else { return NoneAnyArrOption }  }
/* Float32ArrOption: []float32->BoolList */ func MapBoolListToFloat32ArrOption(m Float32ArrOption, f func([]float32) BoolList) BoolListOption {  if m.IsDefined() { return BoolListOpt(f(*m.value)) } else { return NoneBoolListOption }  }
/* Float32ArrOption: []float32->StringList */ func MapStringListToFloat32ArrOption(m Float32ArrOption, f func([]float32) StringList) StringListOption {  if m.IsDefined() { return StringListOpt(f(*m.value)) } else { return NoneStringListOption }  }
/* Float32ArrOption: []float32->IntList */ func MapIntListToFloat32ArrOption(m Float32ArrOption, f func([]float32) IntList) IntListOption {  if m.IsDefined() { return IntListOpt(f(*m.value)) } else { return NoneIntListOption }  }
/* Float32ArrOption: []float32->Int8List */ func MapInt8ListToFloat32ArrOption(m Float32ArrOption, f func([]float32) Int8List) Int8ListOption {  if m.IsDefined() { return Int8ListOpt(f(*m.value)) } else { return NoneInt8ListOption }  }
/* Float32ArrOption: []float32->Int16List */ func MapInt16ListToFloat32ArrOption(m Float32ArrOption, f func([]float32) Int16List) Int16ListOption {  if m.IsDefined() { return Int16ListOpt(f(*m.value)) } else { return NoneInt16ListOption }  }
/* Float32ArrOption: []float32->Int32List */ func MapInt32ListToFloat32ArrOption(m Float32ArrOption, f func([]float32) Int32List) Int32ListOption {  if m.IsDefined() { return Int32ListOpt(f(*m.value)) } else { return NoneInt32ListOption }  }
/* Float32ArrOption: []float32->Int64List */ func MapInt64ListToFloat32ArrOption(m Float32ArrOption, f func([]float32) Int64List) Int64ListOption {  if m.IsDefined() { return Int64ListOpt(f(*m.value)) } else { return NoneInt64ListOption }  }
/* Float32ArrOption: []float32->UintList */ func MapUintListToFloat32ArrOption(m Float32ArrOption, f func([]float32) UintList) UintListOption {  if m.IsDefined() { return UintListOpt(f(*m.value)) } else { return NoneUintListOption }  }
/* Float32ArrOption: []float32->Uint8List */ func MapUint8ListToFloat32ArrOption(m Float32ArrOption, f func([]float32) Uint8List) Uint8ListOption {  if m.IsDefined() { return Uint8ListOpt(f(*m.value)) } else { return NoneUint8ListOption }  }
/* Float32ArrOption: []float32->Uint16List */ func MapUint16ListToFloat32ArrOption(m Float32ArrOption, f func([]float32) Uint16List) Uint16ListOption {  if m.IsDefined() { return Uint16ListOpt(f(*m.value)) } else { return NoneUint16ListOption }  }
/* Float32ArrOption: []float32->Uint32List */ func MapUint32ListToFloat32ArrOption(m Float32ArrOption, f func([]float32) Uint32List) Uint32ListOption {  if m.IsDefined() { return Uint32ListOpt(f(*m.value)) } else { return NoneUint32ListOption }  }
/* Float32ArrOption: []float32->Uint64List */ func MapUint64ListToFloat32ArrOption(m Float32ArrOption, f func([]float32) Uint64List) Uint64ListOption {  if m.IsDefined() { return Uint64ListOpt(f(*m.value)) } else { return NoneUint64ListOption }  }
/* Float32ArrOption: []float32->UintptrList */ func MapUintptrListToFloat32ArrOption(m Float32ArrOption, f func([]float32) UintptrList) UintptrListOption {  if m.IsDefined() { return UintptrListOpt(f(*m.value)) } else { return NoneUintptrListOption }  }
/* Float32ArrOption: []float32->ByteList */ func MapByteListToFloat32ArrOption(m Float32ArrOption, f func([]float32) ByteList) ByteListOption {  if m.IsDefined() { return ByteListOpt(f(*m.value)) } else { return NoneByteListOption }  }
/* Float32ArrOption: []float32->RuneList */ func MapRuneListToFloat32ArrOption(m Float32ArrOption, f func([]float32) RuneList) RuneListOption {  if m.IsDefined() { return RuneListOpt(f(*m.value)) } else { return NoneRuneListOption }  }
/* Float32ArrOption: []float32->Float32List */ func MapFloat32ListToFloat32ArrOption(m Float32ArrOption, f func([]float32) Float32List) Float32ListOption {  if m.IsDefined() { return Float32ListOpt(f(*m.value)) } else { return NoneFloat32ListOption }  }
/* Float32ArrOption: []float32->Float64List */ func MapFloat64ListToFloat32ArrOption(m Float32ArrOption, f func([]float32) Float64List) Float64ListOption {  if m.IsDefined() { return Float64ListOpt(f(*m.value)) } else { return NoneFloat64ListOption }  }
/* Float32ArrOption: []float32->Complex64List */ func MapComplex64ListToFloat32ArrOption(m Float32ArrOption, f func([]float32) Complex64List) Complex64ListOption {  if m.IsDefined() { return Complex64ListOpt(f(*m.value)) } else { return NoneComplex64ListOption }  }
/* Float32ArrOption: []float32->Complex128List */ func MapComplex128ListToFloat32ArrOption(m Float32ArrOption, f func([]float32) Complex128List) Complex128ListOption {  if m.IsDefined() { return Complex128ListOpt(f(*m.value)) } else { return NoneComplex128ListOption }  }
/* Float32ArrOption: []float32->AnyList */ func MapAnyListToFloat32ArrOption(m Float32ArrOption, f func([]float32) AnyList) AnyListOption {  if m.IsDefined() { return AnyListOpt(f(*m.value)) } else { return NoneAnyListOption }  }
/* Float64ArrOption: []float64->bool */ func MapBoolToFloat64ArrOption(m Float64ArrOption, f func([]float64) bool) BoolOption {  if m.IsDefined() { return Bool(f(*m.value)) } else { return NoneBoolOption }  }
/* Float64ArrOption: []float64->string */ func MapStringToFloat64ArrOption(m Float64ArrOption, f func([]float64) string) StringOption {  if m.IsDefined() { return String(f(*m.value)) } else { return NoneStringOption }  }
/* Float64ArrOption: []float64->int */ func MapIntToFloat64ArrOption(m Float64ArrOption, f func([]float64) int) IntOption {  if m.IsDefined() { return Int(f(*m.value)) } else { return NoneIntOption }  }
/* Float64ArrOption: []float64->int8 */ func MapInt8ToFloat64ArrOption(m Float64ArrOption, f func([]float64) int8) Int8Option {  if m.IsDefined() { return Int8(f(*m.value)) } else { return NoneInt8Option }  }
/* Float64ArrOption: []float64->int16 */ func MapInt16ToFloat64ArrOption(m Float64ArrOption, f func([]float64) int16) Int16Option {  if m.IsDefined() { return Int16(f(*m.value)) } else { return NoneInt16Option }  }
/* Float64ArrOption: []float64->int32 */ func MapInt32ToFloat64ArrOption(m Float64ArrOption, f func([]float64) int32) Int32Option {  if m.IsDefined() { return Int32(f(*m.value)) } else { return NoneInt32Option }  }
/* Float64ArrOption: []float64->int64 */ func MapInt64ToFloat64ArrOption(m Float64ArrOption, f func([]float64) int64) Int64Option {  if m.IsDefined() { return Int64(f(*m.value)) } else { return NoneInt64Option }  }
/* Float64ArrOption: []float64->uint */ func MapUintToFloat64ArrOption(m Float64ArrOption, f func([]float64) uint) UintOption {  if m.IsDefined() { return Uint(f(*m.value)) } else { return NoneUintOption }  }
/* Float64ArrOption: []float64->uint8 */ func MapUint8ToFloat64ArrOption(m Float64ArrOption, f func([]float64) uint8) Uint8Option {  if m.IsDefined() { return Uint8(f(*m.value)) } else { return NoneUint8Option }  }
/* Float64ArrOption: []float64->uint16 */ func MapUint16ToFloat64ArrOption(m Float64ArrOption, f func([]float64) uint16) Uint16Option {  if m.IsDefined() { return Uint16(f(*m.value)) } else { return NoneUint16Option }  }
/* Float64ArrOption: []float64->uint32 */ func MapUint32ToFloat64ArrOption(m Float64ArrOption, f func([]float64) uint32) Uint32Option {  if m.IsDefined() { return Uint32(f(*m.value)) } else { return NoneUint32Option }  }
/* Float64ArrOption: []float64->uint64 */ func MapUint64ToFloat64ArrOption(m Float64ArrOption, f func([]float64) uint64) Uint64Option {  if m.IsDefined() { return Uint64(f(*m.value)) } else { return NoneUint64Option }  }
/* Float64ArrOption: []float64->uintptr */ func MapUintptrToFloat64ArrOption(m Float64ArrOption, f func([]float64) uintptr) UintptrOption {  if m.IsDefined() { return Uintptr(f(*m.value)) } else { return NoneUintptrOption }  }
/* Float64ArrOption: []float64->byte */ func MapByteToFloat64ArrOption(m Float64ArrOption, f func([]float64) byte) ByteOption {  if m.IsDefined() { return Byte(f(*m.value)) } else { return NoneByteOption }  }
/* Float64ArrOption: []float64->rune */ func MapRuneToFloat64ArrOption(m Float64ArrOption, f func([]float64) rune) RuneOption {  if m.IsDefined() { return Rune(f(*m.value)) } else { return NoneRuneOption }  }
/* Float64ArrOption: []float64->float32 */ func MapFloat32ToFloat64ArrOption(m Float64ArrOption, f func([]float64) float32) Float32Option {  if m.IsDefined() { return Float32(f(*m.value)) } else { return NoneFloat32Option }  }
/* Float64ArrOption: []float64->float64 */ func MapFloat64ToFloat64ArrOption(m Float64ArrOption, f func([]float64) float64) Float64Option {  if m.IsDefined() { return Float64(f(*m.value)) } else { return NoneFloat64Option }  }
/* Float64ArrOption: []float64->complex64 */ func MapComplex64ToFloat64ArrOption(m Float64ArrOption, f func([]float64) complex64) Complex64Option {  if m.IsDefined() { return Complex64(f(*m.value)) } else { return NoneComplex64Option }  }
/* Float64ArrOption: []float64->complex128 */ func MapComplex128ToFloat64ArrOption(m Float64ArrOption, f func([]float64) complex128) Complex128Option {  if m.IsDefined() { return Complex128(f(*m.value)) } else { return NoneComplex128Option }  }
/* Float64ArrOption: []float64->Any */ func MapAnyToFloat64ArrOption(m Float64ArrOption, f func([]float64) Any) AnyOption {  if m.IsDefined() { return AnyOpt(f(*m.value)) } else { return NoneAnyOption }  }
/* Float64ArrOption: []float64->BoolOption */ func MapBoolOptionToFloat64ArrOption(m Float64ArrOption, f func([]float64) BoolOption) BoolOptionOption {  if m.IsDefined() { return BoolBool(f(*m.value)) } else { return NoneBoolOptionOption }  }
/* Float64ArrOption: []float64->StringOption */ func MapStringOptionToFloat64ArrOption(m Float64ArrOption, f func([]float64) StringOption) StringOptionOption {  if m.IsDefined() { return StringString(f(*m.value)) } else { return NoneStringOptionOption }  }
/* Float64ArrOption: []float64->IntOption */ func MapIntOptionToFloat64ArrOption(m Float64ArrOption, f func([]float64) IntOption) IntOptionOption {  if m.IsDefined() { return IntInt(f(*m.value)) } else { return NoneIntOptionOption }  }
/* Float64ArrOption: []float64->Int8Option */ func MapInt8OptionToFloat64ArrOption(m Float64ArrOption, f func([]float64) Int8Option) Int8OptionOption {  if m.IsDefined() { return Int8Int8(f(*m.value)) } else { return NoneInt8OptionOption }  }
/* Float64ArrOption: []float64->Int16Option */ func MapInt16OptionToFloat64ArrOption(m Float64ArrOption, f func([]float64) Int16Option) Int16OptionOption {  if m.IsDefined() { return Int16Int16(f(*m.value)) } else { return NoneInt16OptionOption }  }
/* Float64ArrOption: []float64->Int32Option */ func MapInt32OptionToFloat64ArrOption(m Float64ArrOption, f func([]float64) Int32Option) Int32OptionOption {  if m.IsDefined() { return Int32Int32(f(*m.value)) } else { return NoneInt32OptionOption }  }
/* Float64ArrOption: []float64->Int64Option */ func MapInt64OptionToFloat64ArrOption(m Float64ArrOption, f func([]float64) Int64Option) Int64OptionOption {  if m.IsDefined() { return Int64Int64(f(*m.value)) } else { return NoneInt64OptionOption }  }
/* Float64ArrOption: []float64->UintOption */ func MapUintOptionToFloat64ArrOption(m Float64ArrOption, f func([]float64) UintOption) UintOptionOption {  if m.IsDefined() { return UintUint(f(*m.value)) } else { return NoneUintOptionOption }  }
/* Float64ArrOption: []float64->Uint8Option */ func MapUint8OptionToFloat64ArrOption(m Float64ArrOption, f func([]float64) Uint8Option) Uint8OptionOption {  if m.IsDefined() { return Uint8Uint8(f(*m.value)) } else { return NoneUint8OptionOption }  }
/* Float64ArrOption: []float64->Uint16Option */ func MapUint16OptionToFloat64ArrOption(m Float64ArrOption, f func([]float64) Uint16Option) Uint16OptionOption {  if m.IsDefined() { return Uint16Uint16(f(*m.value)) } else { return NoneUint16OptionOption }  }
/* Float64ArrOption: []float64->Uint32Option */ func MapUint32OptionToFloat64ArrOption(m Float64ArrOption, f func([]float64) Uint32Option) Uint32OptionOption {  if m.IsDefined() { return Uint32Uint32(f(*m.value)) } else { return NoneUint32OptionOption }  }
/* Float64ArrOption: []float64->Uint64Option */ func MapUint64OptionToFloat64ArrOption(m Float64ArrOption, f func([]float64) Uint64Option) Uint64OptionOption {  if m.IsDefined() { return Uint64Uint64(f(*m.value)) } else { return NoneUint64OptionOption }  }
/* Float64ArrOption: []float64->UintptrOption */ func MapUintptrOptionToFloat64ArrOption(m Float64ArrOption, f func([]float64) UintptrOption) UintptrOptionOption {  if m.IsDefined() { return UintptrUintptr(f(*m.value)) } else { return NoneUintptrOptionOption }  }
/* Float64ArrOption: []float64->ByteOption */ func MapByteOptionToFloat64ArrOption(m Float64ArrOption, f func([]float64) ByteOption) ByteOptionOption {  if m.IsDefined() { return ByteByte(f(*m.value)) } else { return NoneByteOptionOption }  }
/* Float64ArrOption: []float64->RuneOption */ func MapRuneOptionToFloat64ArrOption(m Float64ArrOption, f func([]float64) RuneOption) RuneOptionOption {  if m.IsDefined() { return RuneRune(f(*m.value)) } else { return NoneRuneOptionOption }  }
/* Float64ArrOption: []float64->Float32Option */ func MapFloat32OptionToFloat64ArrOption(m Float64ArrOption, f func([]float64) Float32Option) Float32OptionOption {  if m.IsDefined() { return Float32Float32(f(*m.value)) } else { return NoneFloat32OptionOption }  }
/* Float64ArrOption: []float64->Float64Option */ func MapFloat64OptionToFloat64ArrOption(m Float64ArrOption, f func([]float64) Float64Option) Float64OptionOption {  if m.IsDefined() { return Float64Float64(f(*m.value)) } else { return NoneFloat64OptionOption }  }
/* Float64ArrOption: []float64->Complex64Option */ func MapComplex64OptionToFloat64ArrOption(m Float64ArrOption, f func([]float64) Complex64Option) Complex64OptionOption {  if m.IsDefined() { return Complex64Complex64(f(*m.value)) } else { return NoneComplex64OptionOption }  }
/* Float64ArrOption: []float64->Complex128Option */ func MapComplex128OptionToFloat64ArrOption(m Float64ArrOption, f func([]float64) Complex128Option) Complex128OptionOption {  if m.IsDefined() { return Complex128Complex128(f(*m.value)) } else { return NoneComplex128OptionOption }  }
/* Float64ArrOption: []float64->AnyOption */ func MapAnyOptionToFloat64ArrOption(m Float64ArrOption, f func([]float64) AnyOption) AnyOptionOption {  if m.IsDefined() { return AnyOptAny(f(*m.value)) } else { return NoneAnyOptionOption }  }
/* Float64ArrOption: []float64->[]bool */ func MapBoolArrToFloat64ArrOption(m Float64ArrOption, f func([]float64) []bool) BoolArrOption {  if m.IsDefined() { return BoolArrOpt(f(*m.value)) } else { return NoneBoolArrOption }  }
/* Float64ArrOption: []float64->[]string */ func MapStringArrToFloat64ArrOption(m Float64ArrOption, f func([]float64) []string) StringArrOption {  if m.IsDefined() { return StringArrOpt(f(*m.value)) } else { return NoneStringArrOption }  }
/* Float64ArrOption: []float64->[]int */ func MapIntArrToFloat64ArrOption(m Float64ArrOption, f func([]float64) []int) IntArrOption {  if m.IsDefined() { return IntArrOpt(f(*m.value)) } else { return NoneIntArrOption }  }
/* Float64ArrOption: []float64->[]int8 */ func MapInt8ArrToFloat64ArrOption(m Float64ArrOption, f func([]float64) []int8) Int8ArrOption {  if m.IsDefined() { return Int8ArrOpt(f(*m.value)) } else { return NoneInt8ArrOption }  }
/* Float64ArrOption: []float64->[]int16 */ func MapInt16ArrToFloat64ArrOption(m Float64ArrOption, f func([]float64) []int16) Int16ArrOption {  if m.IsDefined() { return Int16ArrOpt(f(*m.value)) } else { return NoneInt16ArrOption }  }
/* Float64ArrOption: []float64->[]int32 */ func MapInt32ArrToFloat64ArrOption(m Float64ArrOption, f func([]float64) []int32) Int32ArrOption {  if m.IsDefined() { return Int32ArrOpt(f(*m.value)) } else { return NoneInt32ArrOption }  }
/* Float64ArrOption: []float64->[]int64 */ func MapInt64ArrToFloat64ArrOption(m Float64ArrOption, f func([]float64) []int64) Int64ArrOption {  if m.IsDefined() { return Int64ArrOpt(f(*m.value)) } else { return NoneInt64ArrOption }  }
/* Float64ArrOption: []float64->[]uint */ func MapUintArrToFloat64ArrOption(m Float64ArrOption, f func([]float64) []uint) UintArrOption {  if m.IsDefined() { return UintArrOpt(f(*m.value)) } else { return NoneUintArrOption }  }
/* Float64ArrOption: []float64->[]uint8 */ func MapUint8ArrToFloat64ArrOption(m Float64ArrOption, f func([]float64) []uint8) Uint8ArrOption {  if m.IsDefined() { return Uint8ArrOpt(f(*m.value)) } else { return NoneUint8ArrOption }  }
/* Float64ArrOption: []float64->[]uint16 */ func MapUint16ArrToFloat64ArrOption(m Float64ArrOption, f func([]float64) []uint16) Uint16ArrOption {  if m.IsDefined() { return Uint16ArrOpt(f(*m.value)) } else { return NoneUint16ArrOption }  }
/* Float64ArrOption: []float64->[]uint32 */ func MapUint32ArrToFloat64ArrOption(m Float64ArrOption, f func([]float64) []uint32) Uint32ArrOption {  if m.IsDefined() { return Uint32ArrOpt(f(*m.value)) } else { return NoneUint32ArrOption }  }
/* Float64ArrOption: []float64->[]uint64 */ func MapUint64ArrToFloat64ArrOption(m Float64ArrOption, f func([]float64) []uint64) Uint64ArrOption {  if m.IsDefined() { return Uint64ArrOpt(f(*m.value)) } else { return NoneUint64ArrOption }  }
/* Float64ArrOption: []float64->[]uintptr */ func MapUintptrArrToFloat64ArrOption(m Float64ArrOption, f func([]float64) []uintptr) UintptrArrOption {  if m.IsDefined() { return UintptrArrOpt(f(*m.value)) } else { return NoneUintptrArrOption }  }
/* Float64ArrOption: []float64->[]byte */ func MapByteArrToFloat64ArrOption(m Float64ArrOption, f func([]float64) []byte) ByteArrOption {  if m.IsDefined() { return ByteArrOpt(f(*m.value)) } else { return NoneByteArrOption }  }
/* Float64ArrOption: []float64->[]rune */ func MapRuneArrToFloat64ArrOption(m Float64ArrOption, f func([]float64) []rune) RuneArrOption {  if m.IsDefined() { return RuneArrOpt(f(*m.value)) } else { return NoneRuneArrOption }  }
/* Float64ArrOption: []float64->[]float32 */ func MapFloat32ArrToFloat64ArrOption(m Float64ArrOption, f func([]float64) []float32) Float32ArrOption {  if m.IsDefined() { return Float32ArrOpt(f(*m.value)) } else { return NoneFloat32ArrOption }  }
/* Float64ArrOption: []float64->[]float64 */ func MapFloat64ArrToFloat64ArrOption(m Float64ArrOption, f func([]float64) []float64) Float64ArrOption {  if m.IsDefined() { return Float64ArrOpt(f(*m.value)) } else { return NoneFloat64ArrOption }  }
/* Float64ArrOption: []float64->[]complex64 */ func MapComplex64ArrToFloat64ArrOption(m Float64ArrOption, f func([]float64) []complex64) Complex64ArrOption {  if m.IsDefined() { return Complex64ArrOpt(f(*m.value)) } else { return NoneComplex64ArrOption }  }
/* Float64ArrOption: []float64->[]complex128 */ func MapComplex128ArrToFloat64ArrOption(m Float64ArrOption, f func([]float64) []complex128) Complex128ArrOption {  if m.IsDefined() { return Complex128ArrOpt(f(*m.value)) } else { return NoneComplex128ArrOption }  }
/* Float64ArrOption: []float64->[]Any */ func MapAnyArrToFloat64ArrOption(m Float64ArrOption, f func([]float64) []Any) AnyArrOption {  if m.IsDefined() { return AnyArrOpt(f(*m.value)) } else { return NoneAnyArrOption }  }
/* Float64ArrOption: []float64->BoolList */ func MapBoolListToFloat64ArrOption(m Float64ArrOption, f func([]float64) BoolList) BoolListOption {  if m.IsDefined() { return BoolListOpt(f(*m.value)) } else { return NoneBoolListOption }  }
/* Float64ArrOption: []float64->StringList */ func MapStringListToFloat64ArrOption(m Float64ArrOption, f func([]float64) StringList) StringListOption {  if m.IsDefined() { return StringListOpt(f(*m.value)) } else { return NoneStringListOption }  }
/* Float64ArrOption: []float64->IntList */ func MapIntListToFloat64ArrOption(m Float64ArrOption, f func([]float64) IntList) IntListOption {  if m.IsDefined() { return IntListOpt(f(*m.value)) } else { return NoneIntListOption }  }
/* Float64ArrOption: []float64->Int8List */ func MapInt8ListToFloat64ArrOption(m Float64ArrOption, f func([]float64) Int8List) Int8ListOption {  if m.IsDefined() { return Int8ListOpt(f(*m.value)) } else { return NoneInt8ListOption }  }
/* Float64ArrOption: []float64->Int16List */ func MapInt16ListToFloat64ArrOption(m Float64ArrOption, f func([]float64) Int16List) Int16ListOption {  if m.IsDefined() { return Int16ListOpt(f(*m.value)) } else { return NoneInt16ListOption }  }
/* Float64ArrOption: []float64->Int32List */ func MapInt32ListToFloat64ArrOption(m Float64ArrOption, f func([]float64) Int32List) Int32ListOption {  if m.IsDefined() { return Int32ListOpt(f(*m.value)) } else { return NoneInt32ListOption }  }
/* Float64ArrOption: []float64->Int64List */ func MapInt64ListToFloat64ArrOption(m Float64ArrOption, f func([]float64) Int64List) Int64ListOption {  if m.IsDefined() { return Int64ListOpt(f(*m.value)) } else { return NoneInt64ListOption }  }
/* Float64ArrOption: []float64->UintList */ func MapUintListToFloat64ArrOption(m Float64ArrOption, f func([]float64) UintList) UintListOption {  if m.IsDefined() { return UintListOpt(f(*m.value)) } else { return NoneUintListOption }  }
/* Float64ArrOption: []float64->Uint8List */ func MapUint8ListToFloat64ArrOption(m Float64ArrOption, f func([]float64) Uint8List) Uint8ListOption {  if m.IsDefined() { return Uint8ListOpt(f(*m.value)) } else { return NoneUint8ListOption }  }
/* Float64ArrOption: []float64->Uint16List */ func MapUint16ListToFloat64ArrOption(m Float64ArrOption, f func([]float64) Uint16List) Uint16ListOption {  if m.IsDefined() { return Uint16ListOpt(f(*m.value)) } else { return NoneUint16ListOption }  }
/* Float64ArrOption: []float64->Uint32List */ func MapUint32ListToFloat64ArrOption(m Float64ArrOption, f func([]float64) Uint32List) Uint32ListOption {  if m.IsDefined() { return Uint32ListOpt(f(*m.value)) } else { return NoneUint32ListOption }  }
/* Float64ArrOption: []float64->Uint64List */ func MapUint64ListToFloat64ArrOption(m Float64ArrOption, f func([]float64) Uint64List) Uint64ListOption {  if m.IsDefined() { return Uint64ListOpt(f(*m.value)) } else { return NoneUint64ListOption }  }
/* Float64ArrOption: []float64->UintptrList */ func MapUintptrListToFloat64ArrOption(m Float64ArrOption, f func([]float64) UintptrList) UintptrListOption {  if m.IsDefined() { return UintptrListOpt(f(*m.value)) } else { return NoneUintptrListOption }  }
/* Float64ArrOption: []float64->ByteList */ func MapByteListToFloat64ArrOption(m Float64ArrOption, f func([]float64) ByteList) ByteListOption {  if m.IsDefined() { return ByteListOpt(f(*m.value)) } else { return NoneByteListOption }  }
/* Float64ArrOption: []float64->RuneList */ func MapRuneListToFloat64ArrOption(m Float64ArrOption, f func([]float64) RuneList) RuneListOption {  if m.IsDefined() { return RuneListOpt(f(*m.value)) } else { return NoneRuneListOption }  }
/* Float64ArrOption: []float64->Float32List */ func MapFloat32ListToFloat64ArrOption(m Float64ArrOption, f func([]float64) Float32List) Float32ListOption {  if m.IsDefined() { return Float32ListOpt(f(*m.value)) } else { return NoneFloat32ListOption }  }
/* Float64ArrOption: []float64->Float64List */ func MapFloat64ListToFloat64ArrOption(m Float64ArrOption, f func([]float64) Float64List) Float64ListOption {  if m.IsDefined() { return Float64ListOpt(f(*m.value)) } else { return NoneFloat64ListOption }  }
/* Float64ArrOption: []float64->Complex64List */ func MapComplex64ListToFloat64ArrOption(m Float64ArrOption, f func([]float64) Complex64List) Complex64ListOption {  if m.IsDefined() { return Complex64ListOpt(f(*m.value)) } else { return NoneComplex64ListOption }  }
/* Float64ArrOption: []float64->Complex128List */ func MapComplex128ListToFloat64ArrOption(m Float64ArrOption, f func([]float64) Complex128List) Complex128ListOption {  if m.IsDefined() { return Complex128ListOpt(f(*m.value)) } else { return NoneComplex128ListOption }  }
/* Float64ArrOption: []float64->AnyList */ func MapAnyListToFloat64ArrOption(m Float64ArrOption, f func([]float64) AnyList) AnyListOption {  if m.IsDefined() { return AnyListOpt(f(*m.value)) } else { return NoneAnyListOption }  }
/* Complex64ArrOption: []complex64->bool */ func MapBoolToComplex64ArrOption(m Complex64ArrOption, f func([]complex64) bool) BoolOption {  if m.IsDefined() { return Bool(f(*m.value)) } else { return NoneBoolOption }  }
/* Complex64ArrOption: []complex64->string */ func MapStringToComplex64ArrOption(m Complex64ArrOption, f func([]complex64) string) StringOption {  if m.IsDefined() { return String(f(*m.value)) } else { return NoneStringOption }  }
/* Complex64ArrOption: []complex64->int */ func MapIntToComplex64ArrOption(m Complex64ArrOption, f func([]complex64) int) IntOption {  if m.IsDefined() { return Int(f(*m.value)) } else { return NoneIntOption }  }
/* Complex64ArrOption: []complex64->int8 */ func MapInt8ToComplex64ArrOption(m Complex64ArrOption, f func([]complex64) int8) Int8Option {  if m.IsDefined() { return Int8(f(*m.value)) } else { return NoneInt8Option }  }
/* Complex64ArrOption: []complex64->int16 */ func MapInt16ToComplex64ArrOption(m Complex64ArrOption, f func([]complex64) int16) Int16Option {  if m.IsDefined() { return Int16(f(*m.value)) } else { return NoneInt16Option }  }
/* Complex64ArrOption: []complex64->int32 */ func MapInt32ToComplex64ArrOption(m Complex64ArrOption, f func([]complex64) int32) Int32Option {  if m.IsDefined() { return Int32(f(*m.value)) } else { return NoneInt32Option }  }
/* Complex64ArrOption: []complex64->int64 */ func MapInt64ToComplex64ArrOption(m Complex64ArrOption, f func([]complex64) int64) Int64Option {  if m.IsDefined() { return Int64(f(*m.value)) } else { return NoneInt64Option }  }
/* Complex64ArrOption: []complex64->uint */ func MapUintToComplex64ArrOption(m Complex64ArrOption, f func([]complex64) uint) UintOption {  if m.IsDefined() { return Uint(f(*m.value)) } else { return NoneUintOption }  }
/* Complex64ArrOption: []complex64->uint8 */ func MapUint8ToComplex64ArrOption(m Complex64ArrOption, f func([]complex64) uint8) Uint8Option {  if m.IsDefined() { return Uint8(f(*m.value)) } else { return NoneUint8Option }  }
/* Complex64ArrOption: []complex64->uint16 */ func MapUint16ToComplex64ArrOption(m Complex64ArrOption, f func([]complex64) uint16) Uint16Option {  if m.IsDefined() { return Uint16(f(*m.value)) } else { return NoneUint16Option }  }
/* Complex64ArrOption: []complex64->uint32 */ func MapUint32ToComplex64ArrOption(m Complex64ArrOption, f func([]complex64) uint32) Uint32Option {  if m.IsDefined() { return Uint32(f(*m.value)) } else { return NoneUint32Option }  }
/* Complex64ArrOption: []complex64->uint64 */ func MapUint64ToComplex64ArrOption(m Complex64ArrOption, f func([]complex64) uint64) Uint64Option {  if m.IsDefined() { return Uint64(f(*m.value)) } else { return NoneUint64Option }  }
/* Complex64ArrOption: []complex64->uintptr */ func MapUintptrToComplex64ArrOption(m Complex64ArrOption, f func([]complex64) uintptr) UintptrOption {  if m.IsDefined() { return Uintptr(f(*m.value)) } else { return NoneUintptrOption }  }
/* Complex64ArrOption: []complex64->byte */ func MapByteToComplex64ArrOption(m Complex64ArrOption, f func([]complex64) byte) ByteOption {  if m.IsDefined() { return Byte(f(*m.value)) } else { return NoneByteOption }  }
/* Complex64ArrOption: []complex64->rune */ func MapRuneToComplex64ArrOption(m Complex64ArrOption, f func([]complex64) rune) RuneOption {  if m.IsDefined() { return Rune(f(*m.value)) } else { return NoneRuneOption }  }
/* Complex64ArrOption: []complex64->float32 */ func MapFloat32ToComplex64ArrOption(m Complex64ArrOption, f func([]complex64) float32) Float32Option {  if m.IsDefined() { return Float32(f(*m.value)) } else { return NoneFloat32Option }  }
/* Complex64ArrOption: []complex64->float64 */ func MapFloat64ToComplex64ArrOption(m Complex64ArrOption, f func([]complex64) float64) Float64Option {  if m.IsDefined() { return Float64(f(*m.value)) } else { return NoneFloat64Option }  }
/* Complex64ArrOption: []complex64->complex64 */ func MapComplex64ToComplex64ArrOption(m Complex64ArrOption, f func([]complex64) complex64) Complex64Option {  if m.IsDefined() { return Complex64(f(*m.value)) } else { return NoneComplex64Option }  }
/* Complex64ArrOption: []complex64->complex128 */ func MapComplex128ToComplex64ArrOption(m Complex64ArrOption, f func([]complex64) complex128) Complex128Option {  if m.IsDefined() { return Complex128(f(*m.value)) } else { return NoneComplex128Option }  }
/* Complex64ArrOption: []complex64->Any */ func MapAnyToComplex64ArrOption(m Complex64ArrOption, f func([]complex64) Any) AnyOption {  if m.IsDefined() { return AnyOpt(f(*m.value)) } else { return NoneAnyOption }  }
/* Complex64ArrOption: []complex64->BoolOption */ func MapBoolOptionToComplex64ArrOption(m Complex64ArrOption, f func([]complex64) BoolOption) BoolOptionOption {  if m.IsDefined() { return BoolBool(f(*m.value)) } else { return NoneBoolOptionOption }  }
/* Complex64ArrOption: []complex64->StringOption */ func MapStringOptionToComplex64ArrOption(m Complex64ArrOption, f func([]complex64) StringOption) StringOptionOption {  if m.IsDefined() { return StringString(f(*m.value)) } else { return NoneStringOptionOption }  }
/* Complex64ArrOption: []complex64->IntOption */ func MapIntOptionToComplex64ArrOption(m Complex64ArrOption, f func([]complex64) IntOption) IntOptionOption {  if m.IsDefined() { return IntInt(f(*m.value)) } else { return NoneIntOptionOption }  }
/* Complex64ArrOption: []complex64->Int8Option */ func MapInt8OptionToComplex64ArrOption(m Complex64ArrOption, f func([]complex64) Int8Option) Int8OptionOption {  if m.IsDefined() { return Int8Int8(f(*m.value)) } else { return NoneInt8OptionOption }  }
/* Complex64ArrOption: []complex64->Int16Option */ func MapInt16OptionToComplex64ArrOption(m Complex64ArrOption, f func([]complex64) Int16Option) Int16OptionOption {  if m.IsDefined() { return Int16Int16(f(*m.value)) } else { return NoneInt16OptionOption }  }
/* Complex64ArrOption: []complex64->Int32Option */ func MapInt32OptionToComplex64ArrOption(m Complex64ArrOption, f func([]complex64) Int32Option) Int32OptionOption {  if m.IsDefined() { return Int32Int32(f(*m.value)) } else { return NoneInt32OptionOption }  }
/* Complex64ArrOption: []complex64->Int64Option */ func MapInt64OptionToComplex64ArrOption(m Complex64ArrOption, f func([]complex64) Int64Option) Int64OptionOption {  if m.IsDefined() { return Int64Int64(f(*m.value)) } else { return NoneInt64OptionOption }  }
/* Complex64ArrOption: []complex64->UintOption */ func MapUintOptionToComplex64ArrOption(m Complex64ArrOption, f func([]complex64) UintOption) UintOptionOption {  if m.IsDefined() { return UintUint(f(*m.value)) } else { return NoneUintOptionOption }  }
/* Complex64ArrOption: []complex64->Uint8Option */ func MapUint8OptionToComplex64ArrOption(m Complex64ArrOption, f func([]complex64) Uint8Option) Uint8OptionOption {  if m.IsDefined() { return Uint8Uint8(f(*m.value)) } else { return NoneUint8OptionOption }  }
/* Complex64ArrOption: []complex64->Uint16Option */ func MapUint16OptionToComplex64ArrOption(m Complex64ArrOption, f func([]complex64) Uint16Option) Uint16OptionOption {  if m.IsDefined() { return Uint16Uint16(f(*m.value)) } else { return NoneUint16OptionOption }  }
/* Complex64ArrOption: []complex64->Uint32Option */ func MapUint32OptionToComplex64ArrOption(m Complex64ArrOption, f func([]complex64) Uint32Option) Uint32OptionOption {  if m.IsDefined() { return Uint32Uint32(f(*m.value)) } else { return NoneUint32OptionOption }  }
/* Complex64ArrOption: []complex64->Uint64Option */ func MapUint64OptionToComplex64ArrOption(m Complex64ArrOption, f func([]complex64) Uint64Option) Uint64OptionOption {  if m.IsDefined() { return Uint64Uint64(f(*m.value)) } else { return NoneUint64OptionOption }  }
/* Complex64ArrOption: []complex64->UintptrOption */ func MapUintptrOptionToComplex64ArrOption(m Complex64ArrOption, f func([]complex64) UintptrOption) UintptrOptionOption {  if m.IsDefined() { return UintptrUintptr(f(*m.value)) } else { return NoneUintptrOptionOption }  }
/* Complex64ArrOption: []complex64->ByteOption */ func MapByteOptionToComplex64ArrOption(m Complex64ArrOption, f func([]complex64) ByteOption) ByteOptionOption {  if m.IsDefined() { return ByteByte(f(*m.value)) } else { return NoneByteOptionOption }  }
/* Complex64ArrOption: []complex64->RuneOption */ func MapRuneOptionToComplex64ArrOption(m Complex64ArrOption, f func([]complex64) RuneOption) RuneOptionOption {  if m.IsDefined() { return RuneRune(f(*m.value)) } else { return NoneRuneOptionOption }  }
/* Complex64ArrOption: []complex64->Float32Option */ func MapFloat32OptionToComplex64ArrOption(m Complex64ArrOption, f func([]complex64) Float32Option) Float32OptionOption {  if m.IsDefined() { return Float32Float32(f(*m.value)) } else { return NoneFloat32OptionOption }  }
/* Complex64ArrOption: []complex64->Float64Option */ func MapFloat64OptionToComplex64ArrOption(m Complex64ArrOption, f func([]complex64) Float64Option) Float64OptionOption {  if m.IsDefined() { return Float64Float64(f(*m.value)) } else { return NoneFloat64OptionOption }  }
/* Complex64ArrOption: []complex64->Complex64Option */ func MapComplex64OptionToComplex64ArrOption(m Complex64ArrOption, f func([]complex64) Complex64Option) Complex64OptionOption {  if m.IsDefined() { return Complex64Complex64(f(*m.value)) } else { return NoneComplex64OptionOption }  }
/* Complex64ArrOption: []complex64->Complex128Option */ func MapComplex128OptionToComplex64ArrOption(m Complex64ArrOption, f func([]complex64) Complex128Option) Complex128OptionOption {  if m.IsDefined() { return Complex128Complex128(f(*m.value)) } else { return NoneComplex128OptionOption }  }
/* Complex64ArrOption: []complex64->AnyOption */ func MapAnyOptionToComplex64ArrOption(m Complex64ArrOption, f func([]complex64) AnyOption) AnyOptionOption {  if m.IsDefined() { return AnyOptAny(f(*m.value)) } else { return NoneAnyOptionOption }  }
/* Complex64ArrOption: []complex64->[]bool */ func MapBoolArrToComplex64ArrOption(m Complex64ArrOption, f func([]complex64) []bool) BoolArrOption {  if m.IsDefined() { return BoolArrOpt(f(*m.value)) } else { return NoneBoolArrOption }  }
/* Complex64ArrOption: []complex64->[]string */ func MapStringArrToComplex64ArrOption(m Complex64ArrOption, f func([]complex64) []string) StringArrOption {  if m.IsDefined() { return StringArrOpt(f(*m.value)) } else { return NoneStringArrOption }  }
/* Complex64ArrOption: []complex64->[]int */ func MapIntArrToComplex64ArrOption(m Complex64ArrOption, f func([]complex64) []int) IntArrOption {  if m.IsDefined() { return IntArrOpt(f(*m.value)) } else { return NoneIntArrOption }  }
/* Complex64ArrOption: []complex64->[]int8 */ func MapInt8ArrToComplex64ArrOption(m Complex64ArrOption, f func([]complex64) []int8) Int8ArrOption {  if m.IsDefined() { return Int8ArrOpt(f(*m.value)) } else { return NoneInt8ArrOption }  }
/* Complex64ArrOption: []complex64->[]int16 */ func MapInt16ArrToComplex64ArrOption(m Complex64ArrOption, f func([]complex64) []int16) Int16ArrOption {  if m.IsDefined() { return Int16ArrOpt(f(*m.value)) } else { return NoneInt16ArrOption }  }
/* Complex64ArrOption: []complex64->[]int32 */ func MapInt32ArrToComplex64ArrOption(m Complex64ArrOption, f func([]complex64) []int32) Int32ArrOption {  if m.IsDefined() { return Int32ArrOpt(f(*m.value)) } else { return NoneInt32ArrOption }  }
/* Complex64ArrOption: []complex64->[]int64 */ func MapInt64ArrToComplex64ArrOption(m Complex64ArrOption, f func([]complex64) []int64) Int64ArrOption {  if m.IsDefined() { return Int64ArrOpt(f(*m.value)) } else { return NoneInt64ArrOption }  }
/* Complex64ArrOption: []complex64->[]uint */ func MapUintArrToComplex64ArrOption(m Complex64ArrOption, f func([]complex64) []uint) UintArrOption {  if m.IsDefined() { return UintArrOpt(f(*m.value)) } else { return NoneUintArrOption }  }
/* Complex64ArrOption: []complex64->[]uint8 */ func MapUint8ArrToComplex64ArrOption(m Complex64ArrOption, f func([]complex64) []uint8) Uint8ArrOption {  if m.IsDefined() { return Uint8ArrOpt(f(*m.value)) } else { return NoneUint8ArrOption }  }
/* Complex64ArrOption: []complex64->[]uint16 */ func MapUint16ArrToComplex64ArrOption(m Complex64ArrOption, f func([]complex64) []uint16) Uint16ArrOption {  if m.IsDefined() { return Uint16ArrOpt(f(*m.value)) } else { return NoneUint16ArrOption }  }
/* Complex64ArrOption: []complex64->[]uint32 */ func MapUint32ArrToComplex64ArrOption(m Complex64ArrOption, f func([]complex64) []uint32) Uint32ArrOption {  if m.IsDefined() { return Uint32ArrOpt(f(*m.value)) } else { return NoneUint32ArrOption }  }
/* Complex64ArrOption: []complex64->[]uint64 */ func MapUint64ArrToComplex64ArrOption(m Complex64ArrOption, f func([]complex64) []uint64) Uint64ArrOption {  if m.IsDefined() { return Uint64ArrOpt(f(*m.value)) } else { return NoneUint64ArrOption }  }
/* Complex64ArrOption: []complex64->[]uintptr */ func MapUintptrArrToComplex64ArrOption(m Complex64ArrOption, f func([]complex64) []uintptr) UintptrArrOption {  if m.IsDefined() { return UintptrArrOpt(f(*m.value)) } else { return NoneUintptrArrOption }  }
/* Complex64ArrOption: []complex64->[]byte */ func MapByteArrToComplex64ArrOption(m Complex64ArrOption, f func([]complex64) []byte) ByteArrOption {  if m.IsDefined() { return ByteArrOpt(f(*m.value)) } else { return NoneByteArrOption }  }
/* Complex64ArrOption: []complex64->[]rune */ func MapRuneArrToComplex64ArrOption(m Complex64ArrOption, f func([]complex64) []rune) RuneArrOption {  if m.IsDefined() { return RuneArrOpt(f(*m.value)) } else { return NoneRuneArrOption }  }
/* Complex64ArrOption: []complex64->[]float32 */ func MapFloat32ArrToComplex64ArrOption(m Complex64ArrOption, f func([]complex64) []float32) Float32ArrOption {  if m.IsDefined() { return Float32ArrOpt(f(*m.value)) } else { return NoneFloat32ArrOption }  }
/* Complex64ArrOption: []complex64->[]float64 */ func MapFloat64ArrToComplex64ArrOption(m Complex64ArrOption, f func([]complex64) []float64) Float64ArrOption {  if m.IsDefined() { return Float64ArrOpt(f(*m.value)) } else { return NoneFloat64ArrOption }  }
/* Complex64ArrOption: []complex64->[]complex64 */ func MapComplex64ArrToComplex64ArrOption(m Complex64ArrOption, f func([]complex64) []complex64) Complex64ArrOption {  if m.IsDefined() { return Complex64ArrOpt(f(*m.value)) } else { return NoneComplex64ArrOption }  }
/* Complex64ArrOption: []complex64->[]complex128 */ func MapComplex128ArrToComplex64ArrOption(m Complex64ArrOption, f func([]complex64) []complex128) Complex128ArrOption {  if m.IsDefined() { return Complex128ArrOpt(f(*m.value)) } else { return NoneComplex128ArrOption }  }
/* Complex64ArrOption: []complex64->[]Any */ func MapAnyArrToComplex64ArrOption(m Complex64ArrOption, f func([]complex64) []Any) AnyArrOption {  if m.IsDefined() { return AnyArrOpt(f(*m.value)) } else { return NoneAnyArrOption }  }
/* Complex64ArrOption: []complex64->BoolList */ func MapBoolListToComplex64ArrOption(m Complex64ArrOption, f func([]complex64) BoolList) BoolListOption {  if m.IsDefined() { return BoolListOpt(f(*m.value)) } else { return NoneBoolListOption }  }
/* Complex64ArrOption: []complex64->StringList */ func MapStringListToComplex64ArrOption(m Complex64ArrOption, f func([]complex64) StringList) StringListOption {  if m.IsDefined() { return StringListOpt(f(*m.value)) } else { return NoneStringListOption }  }
/* Complex64ArrOption: []complex64->IntList */ func MapIntListToComplex64ArrOption(m Complex64ArrOption, f func([]complex64) IntList) IntListOption {  if m.IsDefined() { return IntListOpt(f(*m.value)) } else { return NoneIntListOption }  }
/* Complex64ArrOption: []complex64->Int8List */ func MapInt8ListToComplex64ArrOption(m Complex64ArrOption, f func([]complex64) Int8List) Int8ListOption {  if m.IsDefined() { return Int8ListOpt(f(*m.value)) } else { return NoneInt8ListOption }  }
/* Complex64ArrOption: []complex64->Int16List */ func MapInt16ListToComplex64ArrOption(m Complex64ArrOption, f func([]complex64) Int16List) Int16ListOption {  if m.IsDefined() { return Int16ListOpt(f(*m.value)) } else { return NoneInt16ListOption }  }
/* Complex64ArrOption: []complex64->Int32List */ func MapInt32ListToComplex64ArrOption(m Complex64ArrOption, f func([]complex64) Int32List) Int32ListOption {  if m.IsDefined() { return Int32ListOpt(f(*m.value)) } else { return NoneInt32ListOption }  }
/* Complex64ArrOption: []complex64->Int64List */ func MapInt64ListToComplex64ArrOption(m Complex64ArrOption, f func([]complex64) Int64List) Int64ListOption {  if m.IsDefined() { return Int64ListOpt(f(*m.value)) } else { return NoneInt64ListOption }  }
/* Complex64ArrOption: []complex64->UintList */ func MapUintListToComplex64ArrOption(m Complex64ArrOption, f func([]complex64) UintList) UintListOption {  if m.IsDefined() { return UintListOpt(f(*m.value)) } else { return NoneUintListOption }  }
/* Complex64ArrOption: []complex64->Uint8List */ func MapUint8ListToComplex64ArrOption(m Complex64ArrOption, f func([]complex64) Uint8List) Uint8ListOption {  if m.IsDefined() { return Uint8ListOpt(f(*m.value)) } else { return NoneUint8ListOption }  }
/* Complex64ArrOption: []complex64->Uint16List */ func MapUint16ListToComplex64ArrOption(m Complex64ArrOption, f func([]complex64) Uint16List) Uint16ListOption {  if m.IsDefined() { return Uint16ListOpt(f(*m.value)) } else { return NoneUint16ListOption }  }
/* Complex64ArrOption: []complex64->Uint32List */ func MapUint32ListToComplex64ArrOption(m Complex64ArrOption, f func([]complex64) Uint32List) Uint32ListOption {  if m.IsDefined() { return Uint32ListOpt(f(*m.value)) } else { return NoneUint32ListOption }  }
/* Complex64ArrOption: []complex64->Uint64List */ func MapUint64ListToComplex64ArrOption(m Complex64ArrOption, f func([]complex64) Uint64List) Uint64ListOption {  if m.IsDefined() { return Uint64ListOpt(f(*m.value)) } else { return NoneUint64ListOption }  }
/* Complex64ArrOption: []complex64->UintptrList */ func MapUintptrListToComplex64ArrOption(m Complex64ArrOption, f func([]complex64) UintptrList) UintptrListOption {  if m.IsDefined() { return UintptrListOpt(f(*m.value)) } else { return NoneUintptrListOption }  }
/* Complex64ArrOption: []complex64->ByteList */ func MapByteListToComplex64ArrOption(m Complex64ArrOption, f func([]complex64) ByteList) ByteListOption {  if m.IsDefined() { return ByteListOpt(f(*m.value)) } else { return NoneByteListOption }  }
/* Complex64ArrOption: []complex64->RuneList */ func MapRuneListToComplex64ArrOption(m Complex64ArrOption, f func([]complex64) RuneList) RuneListOption {  if m.IsDefined() { return RuneListOpt(f(*m.value)) } else { return NoneRuneListOption }  }
/* Complex64ArrOption: []complex64->Float32List */ func MapFloat32ListToComplex64ArrOption(m Complex64ArrOption, f func([]complex64) Float32List) Float32ListOption {  if m.IsDefined() { return Float32ListOpt(f(*m.value)) } else { return NoneFloat32ListOption }  }
/* Complex64ArrOption: []complex64->Float64List */ func MapFloat64ListToComplex64ArrOption(m Complex64ArrOption, f func([]complex64) Float64List) Float64ListOption {  if m.IsDefined() { return Float64ListOpt(f(*m.value)) } else { return NoneFloat64ListOption }  }
/* Complex64ArrOption: []complex64->Complex64List */ func MapComplex64ListToComplex64ArrOption(m Complex64ArrOption, f func([]complex64) Complex64List) Complex64ListOption {  if m.IsDefined() { return Complex64ListOpt(f(*m.value)) } else { return NoneComplex64ListOption }  }
/* Complex64ArrOption: []complex64->Complex128List */ func MapComplex128ListToComplex64ArrOption(m Complex64ArrOption, f func([]complex64) Complex128List) Complex128ListOption {  if m.IsDefined() { return Complex128ListOpt(f(*m.value)) } else { return NoneComplex128ListOption }  }
/* Complex64ArrOption: []complex64->AnyList */ func MapAnyListToComplex64ArrOption(m Complex64ArrOption, f func([]complex64) AnyList) AnyListOption {  if m.IsDefined() { return AnyListOpt(f(*m.value)) } else { return NoneAnyListOption }  }
/* Complex128ArrOption: []complex128->bool */ func MapBoolToComplex128ArrOption(m Complex128ArrOption, f func([]complex128) bool) BoolOption {  if m.IsDefined() { return Bool(f(*m.value)) } else { return NoneBoolOption }  }
/* Complex128ArrOption: []complex128->string */ func MapStringToComplex128ArrOption(m Complex128ArrOption, f func([]complex128) string) StringOption {  if m.IsDefined() { return String(f(*m.value)) } else { return NoneStringOption }  }
/* Complex128ArrOption: []complex128->int */ func MapIntToComplex128ArrOption(m Complex128ArrOption, f func([]complex128) int) IntOption {  if m.IsDefined() { return Int(f(*m.value)) } else { return NoneIntOption }  }
/* Complex128ArrOption: []complex128->int8 */ func MapInt8ToComplex128ArrOption(m Complex128ArrOption, f func([]complex128) int8) Int8Option {  if m.IsDefined() { return Int8(f(*m.value)) } else { return NoneInt8Option }  }
/* Complex128ArrOption: []complex128->int16 */ func MapInt16ToComplex128ArrOption(m Complex128ArrOption, f func([]complex128) int16) Int16Option {  if m.IsDefined() { return Int16(f(*m.value)) } else { return NoneInt16Option }  }
/* Complex128ArrOption: []complex128->int32 */ func MapInt32ToComplex128ArrOption(m Complex128ArrOption, f func([]complex128) int32) Int32Option {  if m.IsDefined() { return Int32(f(*m.value)) } else { return NoneInt32Option }  }
/* Complex128ArrOption: []complex128->int64 */ func MapInt64ToComplex128ArrOption(m Complex128ArrOption, f func([]complex128) int64) Int64Option {  if m.IsDefined() { return Int64(f(*m.value)) } else { return NoneInt64Option }  }
/* Complex128ArrOption: []complex128->uint */ func MapUintToComplex128ArrOption(m Complex128ArrOption, f func([]complex128) uint) UintOption {  if m.IsDefined() { return Uint(f(*m.value)) } else { return NoneUintOption }  }
/* Complex128ArrOption: []complex128->uint8 */ func MapUint8ToComplex128ArrOption(m Complex128ArrOption, f func([]complex128) uint8) Uint8Option {  if m.IsDefined() { return Uint8(f(*m.value)) } else { return NoneUint8Option }  }
/* Complex128ArrOption: []complex128->uint16 */ func MapUint16ToComplex128ArrOption(m Complex128ArrOption, f func([]complex128) uint16) Uint16Option {  if m.IsDefined() { return Uint16(f(*m.value)) } else { return NoneUint16Option }  }
/* Complex128ArrOption: []complex128->uint32 */ func MapUint32ToComplex128ArrOption(m Complex128ArrOption, f func([]complex128) uint32) Uint32Option {  if m.IsDefined() { return Uint32(f(*m.value)) } else { return NoneUint32Option }  }
/* Complex128ArrOption: []complex128->uint64 */ func MapUint64ToComplex128ArrOption(m Complex128ArrOption, f func([]complex128) uint64) Uint64Option {  if m.IsDefined() { return Uint64(f(*m.value)) } else { return NoneUint64Option }  }
/* Complex128ArrOption: []complex128->uintptr */ func MapUintptrToComplex128ArrOption(m Complex128ArrOption, f func([]complex128) uintptr) UintptrOption {  if m.IsDefined() { return Uintptr(f(*m.value)) } else { return NoneUintptrOption }  }
/* Complex128ArrOption: []complex128->byte */ func MapByteToComplex128ArrOption(m Complex128ArrOption, f func([]complex128) byte) ByteOption {  if m.IsDefined() { return Byte(f(*m.value)) } else { return NoneByteOption }  }
/* Complex128ArrOption: []complex128->rune */ func MapRuneToComplex128ArrOption(m Complex128ArrOption, f func([]complex128) rune) RuneOption {  if m.IsDefined() { return Rune(f(*m.value)) } else { return NoneRuneOption }  }
/* Complex128ArrOption: []complex128->float32 */ func MapFloat32ToComplex128ArrOption(m Complex128ArrOption, f func([]complex128) float32) Float32Option {  if m.IsDefined() { return Float32(f(*m.value)) } else { return NoneFloat32Option }  }
/* Complex128ArrOption: []complex128->float64 */ func MapFloat64ToComplex128ArrOption(m Complex128ArrOption, f func([]complex128) float64) Float64Option {  if m.IsDefined() { return Float64(f(*m.value)) } else { return NoneFloat64Option }  }
/* Complex128ArrOption: []complex128->complex64 */ func MapComplex64ToComplex128ArrOption(m Complex128ArrOption, f func([]complex128) complex64) Complex64Option {  if m.IsDefined() { return Complex64(f(*m.value)) } else { return NoneComplex64Option }  }
/* Complex128ArrOption: []complex128->complex128 */ func MapComplex128ToComplex128ArrOption(m Complex128ArrOption, f func([]complex128) complex128) Complex128Option {  if m.IsDefined() { return Complex128(f(*m.value)) } else { return NoneComplex128Option }  }
/* Complex128ArrOption: []complex128->Any */ func MapAnyToComplex128ArrOption(m Complex128ArrOption, f func([]complex128) Any) AnyOption {  if m.IsDefined() { return AnyOpt(f(*m.value)) } else { return NoneAnyOption }  }
/* Complex128ArrOption: []complex128->BoolOption */ func MapBoolOptionToComplex128ArrOption(m Complex128ArrOption, f func([]complex128) BoolOption) BoolOptionOption {  if m.IsDefined() { return BoolBool(f(*m.value)) } else { return NoneBoolOptionOption }  }
/* Complex128ArrOption: []complex128->StringOption */ func MapStringOptionToComplex128ArrOption(m Complex128ArrOption, f func([]complex128) StringOption) StringOptionOption {  if m.IsDefined() { return StringString(f(*m.value)) } else { return NoneStringOptionOption }  }
/* Complex128ArrOption: []complex128->IntOption */ func MapIntOptionToComplex128ArrOption(m Complex128ArrOption, f func([]complex128) IntOption) IntOptionOption {  if m.IsDefined() { return IntInt(f(*m.value)) } else { return NoneIntOptionOption }  }
/* Complex128ArrOption: []complex128->Int8Option */ func MapInt8OptionToComplex128ArrOption(m Complex128ArrOption, f func([]complex128) Int8Option) Int8OptionOption {  if m.IsDefined() { return Int8Int8(f(*m.value)) } else { return NoneInt8OptionOption }  }
/* Complex128ArrOption: []complex128->Int16Option */ func MapInt16OptionToComplex128ArrOption(m Complex128ArrOption, f func([]complex128) Int16Option) Int16OptionOption {  if m.IsDefined() { return Int16Int16(f(*m.value)) } else { return NoneInt16OptionOption }  }
/* Complex128ArrOption: []complex128->Int32Option */ func MapInt32OptionToComplex128ArrOption(m Complex128ArrOption, f func([]complex128) Int32Option) Int32OptionOption {  if m.IsDefined() { return Int32Int32(f(*m.value)) } else { return NoneInt32OptionOption }  }
/* Complex128ArrOption: []complex128->Int64Option */ func MapInt64OptionToComplex128ArrOption(m Complex128ArrOption, f func([]complex128) Int64Option) Int64OptionOption {  if m.IsDefined() { return Int64Int64(f(*m.value)) } else { return NoneInt64OptionOption }  }
/* Complex128ArrOption: []complex128->UintOption */ func MapUintOptionToComplex128ArrOption(m Complex128ArrOption, f func([]complex128) UintOption) UintOptionOption {  if m.IsDefined() { return UintUint(f(*m.value)) } else { return NoneUintOptionOption }  }
/* Complex128ArrOption: []complex128->Uint8Option */ func MapUint8OptionToComplex128ArrOption(m Complex128ArrOption, f func([]complex128) Uint8Option) Uint8OptionOption {  if m.IsDefined() { return Uint8Uint8(f(*m.value)) } else { return NoneUint8OptionOption }  }
/* Complex128ArrOption: []complex128->Uint16Option */ func MapUint16OptionToComplex128ArrOption(m Complex128ArrOption, f func([]complex128) Uint16Option) Uint16OptionOption {  if m.IsDefined() { return Uint16Uint16(f(*m.value)) } else { return NoneUint16OptionOption }  }
/* Complex128ArrOption: []complex128->Uint32Option */ func MapUint32OptionToComplex128ArrOption(m Complex128ArrOption, f func([]complex128) Uint32Option) Uint32OptionOption {  if m.IsDefined() { return Uint32Uint32(f(*m.value)) } else { return NoneUint32OptionOption }  }
/* Complex128ArrOption: []complex128->Uint64Option */ func MapUint64OptionToComplex128ArrOption(m Complex128ArrOption, f func([]complex128) Uint64Option) Uint64OptionOption {  if m.IsDefined() { return Uint64Uint64(f(*m.value)) } else { return NoneUint64OptionOption }  }
/* Complex128ArrOption: []complex128->UintptrOption */ func MapUintptrOptionToComplex128ArrOption(m Complex128ArrOption, f func([]complex128) UintptrOption) UintptrOptionOption {  if m.IsDefined() { return UintptrUintptr(f(*m.value)) } else { return NoneUintptrOptionOption }  }
/* Complex128ArrOption: []complex128->ByteOption */ func MapByteOptionToComplex128ArrOption(m Complex128ArrOption, f func([]complex128) ByteOption) ByteOptionOption {  if m.IsDefined() { return ByteByte(f(*m.value)) } else { return NoneByteOptionOption }  }
/* Complex128ArrOption: []complex128->RuneOption */ func MapRuneOptionToComplex128ArrOption(m Complex128ArrOption, f func([]complex128) RuneOption) RuneOptionOption {  if m.IsDefined() { return RuneRune(f(*m.value)) } else { return NoneRuneOptionOption }  }
/* Complex128ArrOption: []complex128->Float32Option */ func MapFloat32OptionToComplex128ArrOption(m Complex128ArrOption, f func([]complex128) Float32Option) Float32OptionOption {  if m.IsDefined() { return Float32Float32(f(*m.value)) } else { return NoneFloat32OptionOption }  }
/* Complex128ArrOption: []complex128->Float64Option */ func MapFloat64OptionToComplex128ArrOption(m Complex128ArrOption, f func([]complex128) Float64Option) Float64OptionOption {  if m.IsDefined() { return Float64Float64(f(*m.value)) } else { return NoneFloat64OptionOption }  }
/* Complex128ArrOption: []complex128->Complex64Option */ func MapComplex64OptionToComplex128ArrOption(m Complex128ArrOption, f func([]complex128) Complex64Option) Complex64OptionOption {  if m.IsDefined() { return Complex64Complex64(f(*m.value)) } else { return NoneComplex64OptionOption }  }
/* Complex128ArrOption: []complex128->Complex128Option */ func MapComplex128OptionToComplex128ArrOption(m Complex128ArrOption, f func([]complex128) Complex128Option) Complex128OptionOption {  if m.IsDefined() { return Complex128Complex128(f(*m.value)) } else { return NoneComplex128OptionOption }  }
/* Complex128ArrOption: []complex128->AnyOption */ func MapAnyOptionToComplex128ArrOption(m Complex128ArrOption, f func([]complex128) AnyOption) AnyOptionOption {  if m.IsDefined() { return AnyOptAny(f(*m.value)) } else { return NoneAnyOptionOption }  }
/* Complex128ArrOption: []complex128->[]bool */ func MapBoolArrToComplex128ArrOption(m Complex128ArrOption, f func([]complex128) []bool) BoolArrOption {  if m.IsDefined() { return BoolArrOpt(f(*m.value)) } else { return NoneBoolArrOption }  }
/* Complex128ArrOption: []complex128->[]string */ func MapStringArrToComplex128ArrOption(m Complex128ArrOption, f func([]complex128) []string) StringArrOption {  if m.IsDefined() { return StringArrOpt(f(*m.value)) } else { return NoneStringArrOption }  }
/* Complex128ArrOption: []complex128->[]int */ func MapIntArrToComplex128ArrOption(m Complex128ArrOption, f func([]complex128) []int) IntArrOption {  if m.IsDefined() { return IntArrOpt(f(*m.value)) } else { return NoneIntArrOption }  }
/* Complex128ArrOption: []complex128->[]int8 */ func MapInt8ArrToComplex128ArrOption(m Complex128ArrOption, f func([]complex128) []int8) Int8ArrOption {  if m.IsDefined() { return Int8ArrOpt(f(*m.value)) } else { return NoneInt8ArrOption }  }
/* Complex128ArrOption: []complex128->[]int16 */ func MapInt16ArrToComplex128ArrOption(m Complex128ArrOption, f func([]complex128) []int16) Int16ArrOption {  if m.IsDefined() { return Int16ArrOpt(f(*m.value)) } else { return NoneInt16ArrOption }  }
/* Complex128ArrOption: []complex128->[]int32 */ func MapInt32ArrToComplex128ArrOption(m Complex128ArrOption, f func([]complex128) []int32) Int32ArrOption {  if m.IsDefined() { return Int32ArrOpt(f(*m.value)) } else { return NoneInt32ArrOption }  }
/* Complex128ArrOption: []complex128->[]int64 */ func MapInt64ArrToComplex128ArrOption(m Complex128ArrOption, f func([]complex128) []int64) Int64ArrOption {  if m.IsDefined() { return Int64ArrOpt(f(*m.value)) } else { return NoneInt64ArrOption }  }
/* Complex128ArrOption: []complex128->[]uint */ func MapUintArrToComplex128ArrOption(m Complex128ArrOption, f func([]complex128) []uint) UintArrOption {  if m.IsDefined() { return UintArrOpt(f(*m.value)) } else { return NoneUintArrOption }  }
/* Complex128ArrOption: []complex128->[]uint8 */ func MapUint8ArrToComplex128ArrOption(m Complex128ArrOption, f func([]complex128) []uint8) Uint8ArrOption {  if m.IsDefined() { return Uint8ArrOpt(f(*m.value)) } else { return NoneUint8ArrOption }  }
/* Complex128ArrOption: []complex128->[]uint16 */ func MapUint16ArrToComplex128ArrOption(m Complex128ArrOption, f func([]complex128) []uint16) Uint16ArrOption {  if m.IsDefined() { return Uint16ArrOpt(f(*m.value)) } else { return NoneUint16ArrOption }  }
/* Complex128ArrOption: []complex128->[]uint32 */ func MapUint32ArrToComplex128ArrOption(m Complex128ArrOption, f func([]complex128) []uint32) Uint32ArrOption {  if m.IsDefined() { return Uint32ArrOpt(f(*m.value)) } else { return NoneUint32ArrOption }  }
/* Complex128ArrOption: []complex128->[]uint64 */ func MapUint64ArrToComplex128ArrOption(m Complex128ArrOption, f func([]complex128) []uint64) Uint64ArrOption {  if m.IsDefined() { return Uint64ArrOpt(f(*m.value)) } else { return NoneUint64ArrOption }  }
/* Complex128ArrOption: []complex128->[]uintptr */ func MapUintptrArrToComplex128ArrOption(m Complex128ArrOption, f func([]complex128) []uintptr) UintptrArrOption {  if m.IsDefined() { return UintptrArrOpt(f(*m.value)) } else { return NoneUintptrArrOption }  }
/* Complex128ArrOption: []complex128->[]byte */ func MapByteArrToComplex128ArrOption(m Complex128ArrOption, f func([]complex128) []byte) ByteArrOption {  if m.IsDefined() { return ByteArrOpt(f(*m.value)) } else { return NoneByteArrOption }  }
/* Complex128ArrOption: []complex128->[]rune */ func MapRuneArrToComplex128ArrOption(m Complex128ArrOption, f func([]complex128) []rune) RuneArrOption {  if m.IsDefined() { return RuneArrOpt(f(*m.value)) } else { return NoneRuneArrOption }  }
/* Complex128ArrOption: []complex128->[]float32 */ func MapFloat32ArrToComplex128ArrOption(m Complex128ArrOption, f func([]complex128) []float32) Float32ArrOption {  if m.IsDefined() { return Float32ArrOpt(f(*m.value)) } else { return NoneFloat32ArrOption }  }
/* Complex128ArrOption: []complex128->[]float64 */ func MapFloat64ArrToComplex128ArrOption(m Complex128ArrOption, f func([]complex128) []float64) Float64ArrOption {  if m.IsDefined() { return Float64ArrOpt(f(*m.value)) } else { return NoneFloat64ArrOption }  }
/* Complex128ArrOption: []complex128->[]complex64 */ func MapComplex64ArrToComplex128ArrOption(m Complex128ArrOption, f func([]complex128) []complex64) Complex64ArrOption {  if m.IsDefined() { return Complex64ArrOpt(f(*m.value)) } else { return NoneComplex64ArrOption }  }
/* Complex128ArrOption: []complex128->[]complex128 */ func MapComplex128ArrToComplex128ArrOption(m Complex128ArrOption, f func([]complex128) []complex128) Complex128ArrOption {  if m.IsDefined() { return Complex128ArrOpt(f(*m.value)) } else { return NoneComplex128ArrOption }  }
/* Complex128ArrOption: []complex128->[]Any */ func MapAnyArrToComplex128ArrOption(m Complex128ArrOption, f func([]complex128) []Any) AnyArrOption {  if m.IsDefined() { return AnyArrOpt(f(*m.value)) } else { return NoneAnyArrOption }  }
/* Complex128ArrOption: []complex128->BoolList */ func MapBoolListToComplex128ArrOption(m Complex128ArrOption, f func([]complex128) BoolList) BoolListOption {  if m.IsDefined() { return BoolListOpt(f(*m.value)) } else { return NoneBoolListOption }  }
/* Complex128ArrOption: []complex128->StringList */ func MapStringListToComplex128ArrOption(m Complex128ArrOption, f func([]complex128) StringList) StringListOption {  if m.IsDefined() { return StringListOpt(f(*m.value)) } else { return NoneStringListOption }  }
/* Complex128ArrOption: []complex128->IntList */ func MapIntListToComplex128ArrOption(m Complex128ArrOption, f func([]complex128) IntList) IntListOption {  if m.IsDefined() { return IntListOpt(f(*m.value)) } else { return NoneIntListOption }  }
/* Complex128ArrOption: []complex128->Int8List */ func MapInt8ListToComplex128ArrOption(m Complex128ArrOption, f func([]complex128) Int8List) Int8ListOption {  if m.IsDefined() { return Int8ListOpt(f(*m.value)) } else { return NoneInt8ListOption }  }
/* Complex128ArrOption: []complex128->Int16List */ func MapInt16ListToComplex128ArrOption(m Complex128ArrOption, f func([]complex128) Int16List) Int16ListOption {  if m.IsDefined() { return Int16ListOpt(f(*m.value)) } else { return NoneInt16ListOption }  }
/* Complex128ArrOption: []complex128->Int32List */ func MapInt32ListToComplex128ArrOption(m Complex128ArrOption, f func([]complex128) Int32List) Int32ListOption {  if m.IsDefined() { return Int32ListOpt(f(*m.value)) } else { return NoneInt32ListOption }  }
/* Complex128ArrOption: []complex128->Int64List */ func MapInt64ListToComplex128ArrOption(m Complex128ArrOption, f func([]complex128) Int64List) Int64ListOption {  if m.IsDefined() { return Int64ListOpt(f(*m.value)) } else { return NoneInt64ListOption }  }
/* Complex128ArrOption: []complex128->UintList */ func MapUintListToComplex128ArrOption(m Complex128ArrOption, f func([]complex128) UintList) UintListOption {  if m.IsDefined() { return UintListOpt(f(*m.value)) } else { return NoneUintListOption }  }
/* Complex128ArrOption: []complex128->Uint8List */ func MapUint8ListToComplex128ArrOption(m Complex128ArrOption, f func([]complex128) Uint8List) Uint8ListOption {  if m.IsDefined() { return Uint8ListOpt(f(*m.value)) } else { return NoneUint8ListOption }  }
/* Complex128ArrOption: []complex128->Uint16List */ func MapUint16ListToComplex128ArrOption(m Complex128ArrOption, f func([]complex128) Uint16List) Uint16ListOption {  if m.IsDefined() { return Uint16ListOpt(f(*m.value)) } else { return NoneUint16ListOption }  }
/* Complex128ArrOption: []complex128->Uint32List */ func MapUint32ListToComplex128ArrOption(m Complex128ArrOption, f func([]complex128) Uint32List) Uint32ListOption {  if m.IsDefined() { return Uint32ListOpt(f(*m.value)) } else { return NoneUint32ListOption }  }
/* Complex128ArrOption: []complex128->Uint64List */ func MapUint64ListToComplex128ArrOption(m Complex128ArrOption, f func([]complex128) Uint64List) Uint64ListOption {  if m.IsDefined() { return Uint64ListOpt(f(*m.value)) } else { return NoneUint64ListOption }  }
/* Complex128ArrOption: []complex128->UintptrList */ func MapUintptrListToComplex128ArrOption(m Complex128ArrOption, f func([]complex128) UintptrList) UintptrListOption {  if m.IsDefined() { return UintptrListOpt(f(*m.value)) } else { return NoneUintptrListOption }  }
/* Complex128ArrOption: []complex128->ByteList */ func MapByteListToComplex128ArrOption(m Complex128ArrOption, f func([]complex128) ByteList) ByteListOption {  if m.IsDefined() { return ByteListOpt(f(*m.value)) } else { return NoneByteListOption }  }
/* Complex128ArrOption: []complex128->RuneList */ func MapRuneListToComplex128ArrOption(m Complex128ArrOption, f func([]complex128) RuneList) RuneListOption {  if m.IsDefined() { return RuneListOpt(f(*m.value)) } else { return NoneRuneListOption }  }
/* Complex128ArrOption: []complex128->Float32List */ func MapFloat32ListToComplex128ArrOption(m Complex128ArrOption, f func([]complex128) Float32List) Float32ListOption {  if m.IsDefined() { return Float32ListOpt(f(*m.value)) } else { return NoneFloat32ListOption }  }
/* Complex128ArrOption: []complex128->Float64List */ func MapFloat64ListToComplex128ArrOption(m Complex128ArrOption, f func([]complex128) Float64List) Float64ListOption {  if m.IsDefined() { return Float64ListOpt(f(*m.value)) } else { return NoneFloat64ListOption }  }
/* Complex128ArrOption: []complex128->Complex64List */ func MapComplex64ListToComplex128ArrOption(m Complex128ArrOption, f func([]complex128) Complex64List) Complex64ListOption {  if m.IsDefined() { return Complex64ListOpt(f(*m.value)) } else { return NoneComplex64ListOption }  }
/* Complex128ArrOption: []complex128->Complex128List */ func MapComplex128ListToComplex128ArrOption(m Complex128ArrOption, f func([]complex128) Complex128List) Complex128ListOption {  if m.IsDefined() { return Complex128ListOpt(f(*m.value)) } else { return NoneComplex128ListOption }  }
/* Complex128ArrOption: []complex128->AnyList */ func MapAnyListToComplex128ArrOption(m Complex128ArrOption, f func([]complex128) AnyList) AnyListOption {  if m.IsDefined() { return AnyListOpt(f(*m.value)) } else { return NoneAnyListOption }  }
/* AnyArrOption: []Any->bool */ func MapBoolToAnyArrOption(m AnyArrOption, f func([]Any) bool) BoolOption {  if m.IsDefined() { return Bool(f(*m.value)) } else { return NoneBoolOption }  }
/* AnyArrOption: []Any->string */ func MapStringToAnyArrOption(m AnyArrOption, f func([]Any) string) StringOption {  if m.IsDefined() { return String(f(*m.value)) } else { return NoneStringOption }  }
/* AnyArrOption: []Any->int */ func MapIntToAnyArrOption(m AnyArrOption, f func([]Any) int) IntOption {  if m.IsDefined() { return Int(f(*m.value)) } else { return NoneIntOption }  }
/* AnyArrOption: []Any->int8 */ func MapInt8ToAnyArrOption(m AnyArrOption, f func([]Any) int8) Int8Option {  if m.IsDefined() { return Int8(f(*m.value)) } else { return NoneInt8Option }  }
/* AnyArrOption: []Any->int16 */ func MapInt16ToAnyArrOption(m AnyArrOption, f func([]Any) int16) Int16Option {  if m.IsDefined() { return Int16(f(*m.value)) } else { return NoneInt16Option }  }
/* AnyArrOption: []Any->int32 */ func MapInt32ToAnyArrOption(m AnyArrOption, f func([]Any) int32) Int32Option {  if m.IsDefined() { return Int32(f(*m.value)) } else { return NoneInt32Option }  }
/* AnyArrOption: []Any->int64 */ func MapInt64ToAnyArrOption(m AnyArrOption, f func([]Any) int64) Int64Option {  if m.IsDefined() { return Int64(f(*m.value)) } else { return NoneInt64Option }  }
/* AnyArrOption: []Any->uint */ func MapUintToAnyArrOption(m AnyArrOption, f func([]Any) uint) UintOption {  if m.IsDefined() { return Uint(f(*m.value)) } else { return NoneUintOption }  }
/* AnyArrOption: []Any->uint8 */ func MapUint8ToAnyArrOption(m AnyArrOption, f func([]Any) uint8) Uint8Option {  if m.IsDefined() { return Uint8(f(*m.value)) } else { return NoneUint8Option }  }
/* AnyArrOption: []Any->uint16 */ func MapUint16ToAnyArrOption(m AnyArrOption, f func([]Any) uint16) Uint16Option {  if m.IsDefined() { return Uint16(f(*m.value)) } else { return NoneUint16Option }  }
/* AnyArrOption: []Any->uint32 */ func MapUint32ToAnyArrOption(m AnyArrOption, f func([]Any) uint32) Uint32Option {  if m.IsDefined() { return Uint32(f(*m.value)) } else { return NoneUint32Option }  }
/* AnyArrOption: []Any->uint64 */ func MapUint64ToAnyArrOption(m AnyArrOption, f func([]Any) uint64) Uint64Option {  if m.IsDefined() { return Uint64(f(*m.value)) } else { return NoneUint64Option }  }
/* AnyArrOption: []Any->uintptr */ func MapUintptrToAnyArrOption(m AnyArrOption, f func([]Any) uintptr) UintptrOption {  if m.IsDefined() { return Uintptr(f(*m.value)) } else { return NoneUintptrOption }  }
/* AnyArrOption: []Any->byte */ func MapByteToAnyArrOption(m AnyArrOption, f func([]Any) byte) ByteOption {  if m.IsDefined() { return Byte(f(*m.value)) } else { return NoneByteOption }  }
/* AnyArrOption: []Any->rune */ func MapRuneToAnyArrOption(m AnyArrOption, f func([]Any) rune) RuneOption {  if m.IsDefined() { return Rune(f(*m.value)) } else { return NoneRuneOption }  }
/* AnyArrOption: []Any->float32 */ func MapFloat32ToAnyArrOption(m AnyArrOption, f func([]Any) float32) Float32Option {  if m.IsDefined() { return Float32(f(*m.value)) } else { return NoneFloat32Option }  }
/* AnyArrOption: []Any->float64 */ func MapFloat64ToAnyArrOption(m AnyArrOption, f func([]Any) float64) Float64Option {  if m.IsDefined() { return Float64(f(*m.value)) } else { return NoneFloat64Option }  }
/* AnyArrOption: []Any->complex64 */ func MapComplex64ToAnyArrOption(m AnyArrOption, f func([]Any) complex64) Complex64Option {  if m.IsDefined() { return Complex64(f(*m.value)) } else { return NoneComplex64Option }  }
/* AnyArrOption: []Any->complex128 */ func MapComplex128ToAnyArrOption(m AnyArrOption, f func([]Any) complex128) Complex128Option {  if m.IsDefined() { return Complex128(f(*m.value)) } else { return NoneComplex128Option }  }
/* AnyArrOption: []Any->Any */ func MapAnyToAnyArrOption(m AnyArrOption, f func([]Any) Any) AnyOption {  if m.IsDefined() { return AnyOpt(f(*m.value)) } else { return NoneAnyOption }  }
/* AnyArrOption: []Any->BoolOption */ func MapBoolOptionToAnyArrOption(m AnyArrOption, f func([]Any) BoolOption) BoolOptionOption {  if m.IsDefined() { return BoolBool(f(*m.value)) } else { return NoneBoolOptionOption }  }
/* AnyArrOption: []Any->StringOption */ func MapStringOptionToAnyArrOption(m AnyArrOption, f func([]Any) StringOption) StringOptionOption {  if m.IsDefined() { return StringString(f(*m.value)) } else { return NoneStringOptionOption }  }
/* AnyArrOption: []Any->IntOption */ func MapIntOptionToAnyArrOption(m AnyArrOption, f func([]Any) IntOption) IntOptionOption {  if m.IsDefined() { return IntInt(f(*m.value)) } else { return NoneIntOptionOption }  }
/* AnyArrOption: []Any->Int8Option */ func MapInt8OptionToAnyArrOption(m AnyArrOption, f func([]Any) Int8Option) Int8OptionOption {  if m.IsDefined() { return Int8Int8(f(*m.value)) } else { return NoneInt8OptionOption }  }
/* AnyArrOption: []Any->Int16Option */ func MapInt16OptionToAnyArrOption(m AnyArrOption, f func([]Any) Int16Option) Int16OptionOption {  if m.IsDefined() { return Int16Int16(f(*m.value)) } else { return NoneInt16OptionOption }  }
/* AnyArrOption: []Any->Int32Option */ func MapInt32OptionToAnyArrOption(m AnyArrOption, f func([]Any) Int32Option) Int32OptionOption {  if m.IsDefined() { return Int32Int32(f(*m.value)) } else { return NoneInt32OptionOption }  }
/* AnyArrOption: []Any->Int64Option */ func MapInt64OptionToAnyArrOption(m AnyArrOption, f func([]Any) Int64Option) Int64OptionOption {  if m.IsDefined() { return Int64Int64(f(*m.value)) } else { return NoneInt64OptionOption }  }
/* AnyArrOption: []Any->UintOption */ func MapUintOptionToAnyArrOption(m AnyArrOption, f func([]Any) UintOption) UintOptionOption {  if m.IsDefined() { return UintUint(f(*m.value)) } else { return NoneUintOptionOption }  }
/* AnyArrOption: []Any->Uint8Option */ func MapUint8OptionToAnyArrOption(m AnyArrOption, f func([]Any) Uint8Option) Uint8OptionOption {  if m.IsDefined() { return Uint8Uint8(f(*m.value)) } else { return NoneUint8OptionOption }  }
/* AnyArrOption: []Any->Uint16Option */ func MapUint16OptionToAnyArrOption(m AnyArrOption, f func([]Any) Uint16Option) Uint16OptionOption {  if m.IsDefined() { return Uint16Uint16(f(*m.value)) } else { return NoneUint16OptionOption }  }
/* AnyArrOption: []Any->Uint32Option */ func MapUint32OptionToAnyArrOption(m AnyArrOption, f func([]Any) Uint32Option) Uint32OptionOption {  if m.IsDefined() { return Uint32Uint32(f(*m.value)) } else { return NoneUint32OptionOption }  }
/* AnyArrOption: []Any->Uint64Option */ func MapUint64OptionToAnyArrOption(m AnyArrOption, f func([]Any) Uint64Option) Uint64OptionOption {  if m.IsDefined() { return Uint64Uint64(f(*m.value)) } else { return NoneUint64OptionOption }  }
/* AnyArrOption: []Any->UintptrOption */ func MapUintptrOptionToAnyArrOption(m AnyArrOption, f func([]Any) UintptrOption) UintptrOptionOption {  if m.IsDefined() { return UintptrUintptr(f(*m.value)) } else { return NoneUintptrOptionOption }  }
/* AnyArrOption: []Any->ByteOption */ func MapByteOptionToAnyArrOption(m AnyArrOption, f func([]Any) ByteOption) ByteOptionOption {  if m.IsDefined() { return ByteByte(f(*m.value)) } else { return NoneByteOptionOption }  }
/* AnyArrOption: []Any->RuneOption */ func MapRuneOptionToAnyArrOption(m AnyArrOption, f func([]Any) RuneOption) RuneOptionOption {  if m.IsDefined() { return RuneRune(f(*m.value)) } else { return NoneRuneOptionOption }  }
/* AnyArrOption: []Any->Float32Option */ func MapFloat32OptionToAnyArrOption(m AnyArrOption, f func([]Any) Float32Option) Float32OptionOption {  if m.IsDefined() { return Float32Float32(f(*m.value)) } else { return NoneFloat32OptionOption }  }
/* AnyArrOption: []Any->Float64Option */ func MapFloat64OptionToAnyArrOption(m AnyArrOption, f func([]Any) Float64Option) Float64OptionOption {  if m.IsDefined() { return Float64Float64(f(*m.value)) } else { return NoneFloat64OptionOption }  }
/* AnyArrOption: []Any->Complex64Option */ func MapComplex64OptionToAnyArrOption(m AnyArrOption, f func([]Any) Complex64Option) Complex64OptionOption {  if m.IsDefined() { return Complex64Complex64(f(*m.value)) } else { return NoneComplex64OptionOption }  }
/* AnyArrOption: []Any->Complex128Option */ func MapComplex128OptionToAnyArrOption(m AnyArrOption, f func([]Any) Complex128Option) Complex128OptionOption {  if m.IsDefined() { return Complex128Complex128(f(*m.value)) } else { return NoneComplex128OptionOption }  }
/* AnyArrOption: []Any->AnyOption */ func MapAnyOptionToAnyArrOption(m AnyArrOption, f func([]Any) AnyOption) AnyOptionOption {  if m.IsDefined() { return AnyOptAny(f(*m.value)) } else { return NoneAnyOptionOption }  }
/* AnyArrOption: []Any->[]bool */ func MapBoolArrToAnyArrOption(m AnyArrOption, f func([]Any) []bool) BoolArrOption {  if m.IsDefined() { return BoolArrOpt(f(*m.value)) } else { return NoneBoolArrOption }  }
/* AnyArrOption: []Any->[]string */ func MapStringArrToAnyArrOption(m AnyArrOption, f func([]Any) []string) StringArrOption {  if m.IsDefined() { return StringArrOpt(f(*m.value)) } else { return NoneStringArrOption }  }
/* AnyArrOption: []Any->[]int */ func MapIntArrToAnyArrOption(m AnyArrOption, f func([]Any) []int) IntArrOption {  if m.IsDefined() { return IntArrOpt(f(*m.value)) } else { return NoneIntArrOption }  }
/* AnyArrOption: []Any->[]int8 */ func MapInt8ArrToAnyArrOption(m AnyArrOption, f func([]Any) []int8) Int8ArrOption {  if m.IsDefined() { return Int8ArrOpt(f(*m.value)) } else { return NoneInt8ArrOption }  }
/* AnyArrOption: []Any->[]int16 */ func MapInt16ArrToAnyArrOption(m AnyArrOption, f func([]Any) []int16) Int16ArrOption {  if m.IsDefined() { return Int16ArrOpt(f(*m.value)) } else { return NoneInt16ArrOption }  }
/* AnyArrOption: []Any->[]int32 */ func MapInt32ArrToAnyArrOption(m AnyArrOption, f func([]Any) []int32) Int32ArrOption {  if m.IsDefined() { return Int32ArrOpt(f(*m.value)) } else { return NoneInt32ArrOption }  }
/* AnyArrOption: []Any->[]int64 */ func MapInt64ArrToAnyArrOption(m AnyArrOption, f func([]Any) []int64) Int64ArrOption {  if m.IsDefined() { return Int64ArrOpt(f(*m.value)) } else { return NoneInt64ArrOption }  }
/* AnyArrOption: []Any->[]uint */ func MapUintArrToAnyArrOption(m AnyArrOption, f func([]Any) []uint) UintArrOption {  if m.IsDefined() { return UintArrOpt(f(*m.value)) } else { return NoneUintArrOption }  }
/* AnyArrOption: []Any->[]uint8 */ func MapUint8ArrToAnyArrOption(m AnyArrOption, f func([]Any) []uint8) Uint8ArrOption {  if m.IsDefined() { return Uint8ArrOpt(f(*m.value)) } else { return NoneUint8ArrOption }  }
/* AnyArrOption: []Any->[]uint16 */ func MapUint16ArrToAnyArrOption(m AnyArrOption, f func([]Any) []uint16) Uint16ArrOption {  if m.IsDefined() { return Uint16ArrOpt(f(*m.value)) } else { return NoneUint16ArrOption }  }
/* AnyArrOption: []Any->[]uint32 */ func MapUint32ArrToAnyArrOption(m AnyArrOption, f func([]Any) []uint32) Uint32ArrOption {  if m.IsDefined() { return Uint32ArrOpt(f(*m.value)) } else { return NoneUint32ArrOption }  }
/* AnyArrOption: []Any->[]uint64 */ func MapUint64ArrToAnyArrOption(m AnyArrOption, f func([]Any) []uint64) Uint64ArrOption {  if m.IsDefined() { return Uint64ArrOpt(f(*m.value)) } else { return NoneUint64ArrOption }  }
/* AnyArrOption: []Any->[]uintptr */ func MapUintptrArrToAnyArrOption(m AnyArrOption, f func([]Any) []uintptr) UintptrArrOption {  if m.IsDefined() { return UintptrArrOpt(f(*m.value)) } else { return NoneUintptrArrOption }  }
/* AnyArrOption: []Any->[]byte */ func MapByteArrToAnyArrOption(m AnyArrOption, f func([]Any) []byte) ByteArrOption {  if m.IsDefined() { return ByteArrOpt(f(*m.value)) } else { return NoneByteArrOption }  }
/* AnyArrOption: []Any->[]rune */ func MapRuneArrToAnyArrOption(m AnyArrOption, f func([]Any) []rune) RuneArrOption {  if m.IsDefined() { return RuneArrOpt(f(*m.value)) } else { return NoneRuneArrOption }  }
/* AnyArrOption: []Any->[]float32 */ func MapFloat32ArrToAnyArrOption(m AnyArrOption, f func([]Any) []float32) Float32ArrOption {  if m.IsDefined() { return Float32ArrOpt(f(*m.value)) } else { return NoneFloat32ArrOption }  }
/* AnyArrOption: []Any->[]float64 */ func MapFloat64ArrToAnyArrOption(m AnyArrOption, f func([]Any) []float64) Float64ArrOption {  if m.IsDefined() { return Float64ArrOpt(f(*m.value)) } else { return NoneFloat64ArrOption }  }
/* AnyArrOption: []Any->[]complex64 */ func MapComplex64ArrToAnyArrOption(m AnyArrOption, f func([]Any) []complex64) Complex64ArrOption {  if m.IsDefined() { return Complex64ArrOpt(f(*m.value)) } else { return NoneComplex64ArrOption }  }
/* AnyArrOption: []Any->[]complex128 */ func MapComplex128ArrToAnyArrOption(m AnyArrOption, f func([]Any) []complex128) Complex128ArrOption {  if m.IsDefined() { return Complex128ArrOpt(f(*m.value)) } else { return NoneComplex128ArrOption }  }
/* AnyArrOption: []Any->[]Any */ func MapAnyArrToAnyArrOption(m AnyArrOption, f func([]Any) []Any) AnyArrOption {  if m.IsDefined() { return AnyArrOpt(f(*m.value)) } else { return NoneAnyArrOption }  }
/* AnyArrOption: []Any->BoolList */ func MapBoolListToAnyArrOption(m AnyArrOption, f func([]Any) BoolList) BoolListOption {  if m.IsDefined() { return BoolListOpt(f(*m.value)) } else { return NoneBoolListOption }  }
/* AnyArrOption: []Any->StringList */ func MapStringListToAnyArrOption(m AnyArrOption, f func([]Any) StringList) StringListOption {  if m.IsDefined() { return StringListOpt(f(*m.value)) } else { return NoneStringListOption }  }
/* AnyArrOption: []Any->IntList */ func MapIntListToAnyArrOption(m AnyArrOption, f func([]Any) IntList) IntListOption {  if m.IsDefined() { return IntListOpt(f(*m.value)) } else { return NoneIntListOption }  }
/* AnyArrOption: []Any->Int8List */ func MapInt8ListToAnyArrOption(m AnyArrOption, f func([]Any) Int8List) Int8ListOption {  if m.IsDefined() { return Int8ListOpt(f(*m.value)) } else { return NoneInt8ListOption }  }
/* AnyArrOption: []Any->Int16List */ func MapInt16ListToAnyArrOption(m AnyArrOption, f func([]Any) Int16List) Int16ListOption {  if m.IsDefined() { return Int16ListOpt(f(*m.value)) } else { return NoneInt16ListOption }  }
/* AnyArrOption: []Any->Int32List */ func MapInt32ListToAnyArrOption(m AnyArrOption, f func([]Any) Int32List) Int32ListOption {  if m.IsDefined() { return Int32ListOpt(f(*m.value)) } else { return NoneInt32ListOption }  }
/* AnyArrOption: []Any->Int64List */ func MapInt64ListToAnyArrOption(m AnyArrOption, f func([]Any) Int64List) Int64ListOption {  if m.IsDefined() { return Int64ListOpt(f(*m.value)) } else { return NoneInt64ListOption }  }
/* AnyArrOption: []Any->UintList */ func MapUintListToAnyArrOption(m AnyArrOption, f func([]Any) UintList) UintListOption {  if m.IsDefined() { return UintListOpt(f(*m.value)) } else { return NoneUintListOption }  }
/* AnyArrOption: []Any->Uint8List */ func MapUint8ListToAnyArrOption(m AnyArrOption, f func([]Any) Uint8List) Uint8ListOption {  if m.IsDefined() { return Uint8ListOpt(f(*m.value)) } else { return NoneUint8ListOption }  }
/* AnyArrOption: []Any->Uint16List */ func MapUint16ListToAnyArrOption(m AnyArrOption, f func([]Any) Uint16List) Uint16ListOption {  if m.IsDefined() { return Uint16ListOpt(f(*m.value)) } else { return NoneUint16ListOption }  }
/* AnyArrOption: []Any->Uint32List */ func MapUint32ListToAnyArrOption(m AnyArrOption, f func([]Any) Uint32List) Uint32ListOption {  if m.IsDefined() { return Uint32ListOpt(f(*m.value)) } else { return NoneUint32ListOption }  }
/* AnyArrOption: []Any->Uint64List */ func MapUint64ListToAnyArrOption(m AnyArrOption, f func([]Any) Uint64List) Uint64ListOption {  if m.IsDefined() { return Uint64ListOpt(f(*m.value)) } else { return NoneUint64ListOption }  }
/* AnyArrOption: []Any->UintptrList */ func MapUintptrListToAnyArrOption(m AnyArrOption, f func([]Any) UintptrList) UintptrListOption {  if m.IsDefined() { return UintptrListOpt(f(*m.value)) } else { return NoneUintptrListOption }  }
/* AnyArrOption: []Any->ByteList */ func MapByteListToAnyArrOption(m AnyArrOption, f func([]Any) ByteList) ByteListOption {  if m.IsDefined() { return ByteListOpt(f(*m.value)) } else { return NoneByteListOption }  }
/* AnyArrOption: []Any->RuneList */ func MapRuneListToAnyArrOption(m AnyArrOption, f func([]Any) RuneList) RuneListOption {  if m.IsDefined() { return RuneListOpt(f(*m.value)) } else { return NoneRuneListOption }  }
/* AnyArrOption: []Any->Float32List */ func MapFloat32ListToAnyArrOption(m AnyArrOption, f func([]Any) Float32List) Float32ListOption {  if m.IsDefined() { return Float32ListOpt(f(*m.value)) } else { return NoneFloat32ListOption }  }
/* AnyArrOption: []Any->Float64List */ func MapFloat64ListToAnyArrOption(m AnyArrOption, f func([]Any) Float64List) Float64ListOption {  if m.IsDefined() { return Float64ListOpt(f(*m.value)) } else { return NoneFloat64ListOption }  }
/* AnyArrOption: []Any->Complex64List */ func MapComplex64ListToAnyArrOption(m AnyArrOption, f func([]Any) Complex64List) Complex64ListOption {  if m.IsDefined() { return Complex64ListOpt(f(*m.value)) } else { return NoneComplex64ListOption }  }
/* AnyArrOption: []Any->Complex128List */ func MapComplex128ListToAnyArrOption(m AnyArrOption, f func([]Any) Complex128List) Complex128ListOption {  if m.IsDefined() { return Complex128ListOpt(f(*m.value)) } else { return NoneComplex128ListOption }  }
/* AnyArrOption: []Any->AnyList */ func MapAnyListToAnyArrOption(m AnyArrOption, f func([]Any) AnyList) AnyListOption {  if m.IsDefined() { return AnyListOpt(f(*m.value)) } else { return NoneAnyListOption }  }
/* BoolListOption: BoolList->bool */ func MapBoolToBoolListOption(m BoolListOption, f func(BoolList) bool) BoolOption {  if m.IsDefined() { return Bool(f(*m.value)) } else { return NoneBoolOption }  }
/* BoolListOption: BoolList->string */ func MapStringToBoolListOption(m BoolListOption, f func(BoolList) string) StringOption {  if m.IsDefined() { return String(f(*m.value)) } else { return NoneStringOption }  }
/* BoolListOption: BoolList->int */ func MapIntToBoolListOption(m BoolListOption, f func(BoolList) int) IntOption {  if m.IsDefined() { return Int(f(*m.value)) } else { return NoneIntOption }  }
/* BoolListOption: BoolList->int8 */ func MapInt8ToBoolListOption(m BoolListOption, f func(BoolList) int8) Int8Option {  if m.IsDefined() { return Int8(f(*m.value)) } else { return NoneInt8Option }  }
/* BoolListOption: BoolList->int16 */ func MapInt16ToBoolListOption(m BoolListOption, f func(BoolList) int16) Int16Option {  if m.IsDefined() { return Int16(f(*m.value)) } else { return NoneInt16Option }  }
/* BoolListOption: BoolList->int32 */ func MapInt32ToBoolListOption(m BoolListOption, f func(BoolList) int32) Int32Option {  if m.IsDefined() { return Int32(f(*m.value)) } else { return NoneInt32Option }  }
/* BoolListOption: BoolList->int64 */ func MapInt64ToBoolListOption(m BoolListOption, f func(BoolList) int64) Int64Option {  if m.IsDefined() { return Int64(f(*m.value)) } else { return NoneInt64Option }  }
/* BoolListOption: BoolList->uint */ func MapUintToBoolListOption(m BoolListOption, f func(BoolList) uint) UintOption {  if m.IsDefined() { return Uint(f(*m.value)) } else { return NoneUintOption }  }
/* BoolListOption: BoolList->uint8 */ func MapUint8ToBoolListOption(m BoolListOption, f func(BoolList) uint8) Uint8Option {  if m.IsDefined() { return Uint8(f(*m.value)) } else { return NoneUint8Option }  }
/* BoolListOption: BoolList->uint16 */ func MapUint16ToBoolListOption(m BoolListOption, f func(BoolList) uint16) Uint16Option {  if m.IsDefined() { return Uint16(f(*m.value)) } else { return NoneUint16Option }  }
/* BoolListOption: BoolList->uint32 */ func MapUint32ToBoolListOption(m BoolListOption, f func(BoolList) uint32) Uint32Option {  if m.IsDefined() { return Uint32(f(*m.value)) } else { return NoneUint32Option }  }
/* BoolListOption: BoolList->uint64 */ func MapUint64ToBoolListOption(m BoolListOption, f func(BoolList) uint64) Uint64Option {  if m.IsDefined() { return Uint64(f(*m.value)) } else { return NoneUint64Option }  }
/* BoolListOption: BoolList->uintptr */ func MapUintptrToBoolListOption(m BoolListOption, f func(BoolList) uintptr) UintptrOption {  if m.IsDefined() { return Uintptr(f(*m.value)) } else { return NoneUintptrOption }  }
/* BoolListOption: BoolList->byte */ func MapByteToBoolListOption(m BoolListOption, f func(BoolList) byte) ByteOption {  if m.IsDefined() { return Byte(f(*m.value)) } else { return NoneByteOption }  }
/* BoolListOption: BoolList->rune */ func MapRuneToBoolListOption(m BoolListOption, f func(BoolList) rune) RuneOption {  if m.IsDefined() { return Rune(f(*m.value)) } else { return NoneRuneOption }  }
/* BoolListOption: BoolList->float32 */ func MapFloat32ToBoolListOption(m BoolListOption, f func(BoolList) float32) Float32Option {  if m.IsDefined() { return Float32(f(*m.value)) } else { return NoneFloat32Option }  }
/* BoolListOption: BoolList->float64 */ func MapFloat64ToBoolListOption(m BoolListOption, f func(BoolList) float64) Float64Option {  if m.IsDefined() { return Float64(f(*m.value)) } else { return NoneFloat64Option }  }
/* BoolListOption: BoolList->complex64 */ func MapComplex64ToBoolListOption(m BoolListOption, f func(BoolList) complex64) Complex64Option {  if m.IsDefined() { return Complex64(f(*m.value)) } else { return NoneComplex64Option }  }
/* BoolListOption: BoolList->complex128 */ func MapComplex128ToBoolListOption(m BoolListOption, f func(BoolList) complex128) Complex128Option {  if m.IsDefined() { return Complex128(f(*m.value)) } else { return NoneComplex128Option }  }
/* BoolListOption: BoolList->Any */ func MapAnyToBoolListOption(m BoolListOption, f func(BoolList) Any) AnyOption {  if m.IsDefined() { return AnyOpt(f(*m.value)) } else { return NoneAnyOption }  }
/* BoolListOption: BoolList->BoolOption */ func MapBoolOptionToBoolListOption(m BoolListOption, f func(BoolList) BoolOption) BoolOptionOption {  if m.IsDefined() { return BoolBool(f(*m.value)) } else { return NoneBoolOptionOption }  }
/* BoolListOption: BoolList->StringOption */ func MapStringOptionToBoolListOption(m BoolListOption, f func(BoolList) StringOption) StringOptionOption {  if m.IsDefined() { return StringString(f(*m.value)) } else { return NoneStringOptionOption }  }
/* BoolListOption: BoolList->IntOption */ func MapIntOptionToBoolListOption(m BoolListOption, f func(BoolList) IntOption) IntOptionOption {  if m.IsDefined() { return IntInt(f(*m.value)) } else { return NoneIntOptionOption }  }
/* BoolListOption: BoolList->Int8Option */ func MapInt8OptionToBoolListOption(m BoolListOption, f func(BoolList) Int8Option) Int8OptionOption {  if m.IsDefined() { return Int8Int8(f(*m.value)) } else { return NoneInt8OptionOption }  }
/* BoolListOption: BoolList->Int16Option */ func MapInt16OptionToBoolListOption(m BoolListOption, f func(BoolList) Int16Option) Int16OptionOption {  if m.IsDefined() { return Int16Int16(f(*m.value)) } else { return NoneInt16OptionOption }  }
/* BoolListOption: BoolList->Int32Option */ func MapInt32OptionToBoolListOption(m BoolListOption, f func(BoolList) Int32Option) Int32OptionOption {  if m.IsDefined() { return Int32Int32(f(*m.value)) } else { return NoneInt32OptionOption }  }
/* BoolListOption: BoolList->Int64Option */ func MapInt64OptionToBoolListOption(m BoolListOption, f func(BoolList) Int64Option) Int64OptionOption {  if m.IsDefined() { return Int64Int64(f(*m.value)) } else { return NoneInt64OptionOption }  }
/* BoolListOption: BoolList->UintOption */ func MapUintOptionToBoolListOption(m BoolListOption, f func(BoolList) UintOption) UintOptionOption {  if m.IsDefined() { return UintUint(f(*m.value)) } else { return NoneUintOptionOption }  }
/* BoolListOption: BoolList->Uint8Option */ func MapUint8OptionToBoolListOption(m BoolListOption, f func(BoolList) Uint8Option) Uint8OptionOption {  if m.IsDefined() { return Uint8Uint8(f(*m.value)) } else { return NoneUint8OptionOption }  }
/* BoolListOption: BoolList->Uint16Option */ func MapUint16OptionToBoolListOption(m BoolListOption, f func(BoolList) Uint16Option) Uint16OptionOption {  if m.IsDefined() { return Uint16Uint16(f(*m.value)) } else { return NoneUint16OptionOption }  }
/* BoolListOption: BoolList->Uint32Option */ func MapUint32OptionToBoolListOption(m BoolListOption, f func(BoolList) Uint32Option) Uint32OptionOption {  if m.IsDefined() { return Uint32Uint32(f(*m.value)) } else { return NoneUint32OptionOption }  }
/* BoolListOption: BoolList->Uint64Option */ func MapUint64OptionToBoolListOption(m BoolListOption, f func(BoolList) Uint64Option) Uint64OptionOption {  if m.IsDefined() { return Uint64Uint64(f(*m.value)) } else { return NoneUint64OptionOption }  }
/* BoolListOption: BoolList->UintptrOption */ func MapUintptrOptionToBoolListOption(m BoolListOption, f func(BoolList) UintptrOption) UintptrOptionOption {  if m.IsDefined() { return UintptrUintptr(f(*m.value)) } else { return NoneUintptrOptionOption }  }
/* BoolListOption: BoolList->ByteOption */ func MapByteOptionToBoolListOption(m BoolListOption, f func(BoolList) ByteOption) ByteOptionOption {  if m.IsDefined() { return ByteByte(f(*m.value)) } else { return NoneByteOptionOption }  }
/* BoolListOption: BoolList->RuneOption */ func MapRuneOptionToBoolListOption(m BoolListOption, f func(BoolList) RuneOption) RuneOptionOption {  if m.IsDefined() { return RuneRune(f(*m.value)) } else { return NoneRuneOptionOption }  }
/* BoolListOption: BoolList->Float32Option */ func MapFloat32OptionToBoolListOption(m BoolListOption, f func(BoolList) Float32Option) Float32OptionOption {  if m.IsDefined() { return Float32Float32(f(*m.value)) } else { return NoneFloat32OptionOption }  }
/* BoolListOption: BoolList->Float64Option */ func MapFloat64OptionToBoolListOption(m BoolListOption, f func(BoolList) Float64Option) Float64OptionOption {  if m.IsDefined() { return Float64Float64(f(*m.value)) } else { return NoneFloat64OptionOption }  }
/* BoolListOption: BoolList->Complex64Option */ func MapComplex64OptionToBoolListOption(m BoolListOption, f func(BoolList) Complex64Option) Complex64OptionOption {  if m.IsDefined() { return Complex64Complex64(f(*m.value)) } else { return NoneComplex64OptionOption }  }
/* BoolListOption: BoolList->Complex128Option */ func MapComplex128OptionToBoolListOption(m BoolListOption, f func(BoolList) Complex128Option) Complex128OptionOption {  if m.IsDefined() { return Complex128Complex128(f(*m.value)) } else { return NoneComplex128OptionOption }  }
/* BoolListOption: BoolList->AnyOption */ func MapAnyOptionToBoolListOption(m BoolListOption, f func(BoolList) AnyOption) AnyOptionOption {  if m.IsDefined() { return AnyOptAny(f(*m.value)) } else { return NoneAnyOptionOption }  }
/* BoolListOption: BoolList->[]bool */ func MapBoolArrToBoolListOption(m BoolListOption, f func(BoolList) []bool) BoolArrOption {  if m.IsDefined() { return BoolArrOpt(f(*m.value)) } else { return NoneBoolArrOption }  }
/* BoolListOption: BoolList->[]string */ func MapStringArrToBoolListOption(m BoolListOption, f func(BoolList) []string) StringArrOption {  if m.IsDefined() { return StringArrOpt(f(*m.value)) } else { return NoneStringArrOption }  }
/* BoolListOption: BoolList->[]int */ func MapIntArrToBoolListOption(m BoolListOption, f func(BoolList) []int) IntArrOption {  if m.IsDefined() { return IntArrOpt(f(*m.value)) } else { return NoneIntArrOption }  }
/* BoolListOption: BoolList->[]int8 */ func MapInt8ArrToBoolListOption(m BoolListOption, f func(BoolList) []int8) Int8ArrOption {  if m.IsDefined() { return Int8ArrOpt(f(*m.value)) } else { return NoneInt8ArrOption }  }
/* BoolListOption: BoolList->[]int16 */ func MapInt16ArrToBoolListOption(m BoolListOption, f func(BoolList) []int16) Int16ArrOption {  if m.IsDefined() { return Int16ArrOpt(f(*m.value)) } else { return NoneInt16ArrOption }  }
/* BoolListOption: BoolList->[]int32 */ func MapInt32ArrToBoolListOption(m BoolListOption, f func(BoolList) []int32) Int32ArrOption {  if m.IsDefined() { return Int32ArrOpt(f(*m.value)) } else { return NoneInt32ArrOption }  }
/* BoolListOption: BoolList->[]int64 */ func MapInt64ArrToBoolListOption(m BoolListOption, f func(BoolList) []int64) Int64ArrOption {  if m.IsDefined() { return Int64ArrOpt(f(*m.value)) } else { return NoneInt64ArrOption }  }
/* BoolListOption: BoolList->[]uint */ func MapUintArrToBoolListOption(m BoolListOption, f func(BoolList) []uint) UintArrOption {  if m.IsDefined() { return UintArrOpt(f(*m.value)) } else { return NoneUintArrOption }  }
/* BoolListOption: BoolList->[]uint8 */ func MapUint8ArrToBoolListOption(m BoolListOption, f func(BoolList) []uint8) Uint8ArrOption {  if m.IsDefined() { return Uint8ArrOpt(f(*m.value)) } else { return NoneUint8ArrOption }  }
/* BoolListOption: BoolList->[]uint16 */ func MapUint16ArrToBoolListOption(m BoolListOption, f func(BoolList) []uint16) Uint16ArrOption {  if m.IsDefined() { return Uint16ArrOpt(f(*m.value)) } else { return NoneUint16ArrOption }  }
/* BoolListOption: BoolList->[]uint32 */ func MapUint32ArrToBoolListOption(m BoolListOption, f func(BoolList) []uint32) Uint32ArrOption {  if m.IsDefined() { return Uint32ArrOpt(f(*m.value)) } else { return NoneUint32ArrOption }  }
/* BoolListOption: BoolList->[]uint64 */ func MapUint64ArrToBoolListOption(m BoolListOption, f func(BoolList) []uint64) Uint64ArrOption {  if m.IsDefined() { return Uint64ArrOpt(f(*m.value)) } else { return NoneUint64ArrOption }  }
/* BoolListOption: BoolList->[]uintptr */ func MapUintptrArrToBoolListOption(m BoolListOption, f func(BoolList) []uintptr) UintptrArrOption {  if m.IsDefined() { return UintptrArrOpt(f(*m.value)) } else { return NoneUintptrArrOption }  }
/* BoolListOption: BoolList->[]byte */ func MapByteArrToBoolListOption(m BoolListOption, f func(BoolList) []byte) ByteArrOption {  if m.IsDefined() { return ByteArrOpt(f(*m.value)) } else { return NoneByteArrOption }  }
/* BoolListOption: BoolList->[]rune */ func MapRuneArrToBoolListOption(m BoolListOption, f func(BoolList) []rune) RuneArrOption {  if m.IsDefined() { return RuneArrOpt(f(*m.value)) } else { return NoneRuneArrOption }  }
/* BoolListOption: BoolList->[]float32 */ func MapFloat32ArrToBoolListOption(m BoolListOption, f func(BoolList) []float32) Float32ArrOption {  if m.IsDefined() { return Float32ArrOpt(f(*m.value)) } else { return NoneFloat32ArrOption }  }
/* BoolListOption: BoolList->[]float64 */ func MapFloat64ArrToBoolListOption(m BoolListOption, f func(BoolList) []float64) Float64ArrOption {  if m.IsDefined() { return Float64ArrOpt(f(*m.value)) } else { return NoneFloat64ArrOption }  }
/* BoolListOption: BoolList->[]complex64 */ func MapComplex64ArrToBoolListOption(m BoolListOption, f func(BoolList) []complex64) Complex64ArrOption {  if m.IsDefined() { return Complex64ArrOpt(f(*m.value)) } else { return NoneComplex64ArrOption }  }
/* BoolListOption: BoolList->[]complex128 */ func MapComplex128ArrToBoolListOption(m BoolListOption, f func(BoolList) []complex128) Complex128ArrOption {  if m.IsDefined() { return Complex128ArrOpt(f(*m.value)) } else { return NoneComplex128ArrOption }  }
/* BoolListOption: BoolList->[]Any */ func MapAnyArrToBoolListOption(m BoolListOption, f func(BoolList) []Any) AnyArrOption {  if m.IsDefined() { return AnyArrOpt(f(*m.value)) } else { return NoneAnyArrOption }  }
/* BoolListOption: BoolList->BoolList */ func MapBoolListToBoolListOption(m BoolListOption, f func(BoolList) BoolList) BoolListOption {  if m.IsDefined() { return BoolListOpt(f(*m.value)) } else { return NoneBoolListOption }  }
/* BoolListOption: BoolList->StringList */ func MapStringListToBoolListOption(m BoolListOption, f func(BoolList) StringList) StringListOption {  if m.IsDefined() { return StringListOpt(f(*m.value)) } else { return NoneStringListOption }  }
/* BoolListOption: BoolList->IntList */ func MapIntListToBoolListOption(m BoolListOption, f func(BoolList) IntList) IntListOption {  if m.IsDefined() { return IntListOpt(f(*m.value)) } else { return NoneIntListOption }  }
/* BoolListOption: BoolList->Int8List */ func MapInt8ListToBoolListOption(m BoolListOption, f func(BoolList) Int8List) Int8ListOption {  if m.IsDefined() { return Int8ListOpt(f(*m.value)) } else { return NoneInt8ListOption }  }
/* BoolListOption: BoolList->Int16List */ func MapInt16ListToBoolListOption(m BoolListOption, f func(BoolList) Int16List) Int16ListOption {  if m.IsDefined() { return Int16ListOpt(f(*m.value)) } else { return NoneInt16ListOption }  }
/* BoolListOption: BoolList->Int32List */ func MapInt32ListToBoolListOption(m BoolListOption, f func(BoolList) Int32List) Int32ListOption {  if m.IsDefined() { return Int32ListOpt(f(*m.value)) } else { return NoneInt32ListOption }  }
/* BoolListOption: BoolList->Int64List */ func MapInt64ListToBoolListOption(m BoolListOption, f func(BoolList) Int64List) Int64ListOption {  if m.IsDefined() { return Int64ListOpt(f(*m.value)) } else { return NoneInt64ListOption }  }
/* BoolListOption: BoolList->UintList */ func MapUintListToBoolListOption(m BoolListOption, f func(BoolList) UintList) UintListOption {  if m.IsDefined() { return UintListOpt(f(*m.value)) } else { return NoneUintListOption }  }
/* BoolListOption: BoolList->Uint8List */ func MapUint8ListToBoolListOption(m BoolListOption, f func(BoolList) Uint8List) Uint8ListOption {  if m.IsDefined() { return Uint8ListOpt(f(*m.value)) } else { return NoneUint8ListOption }  }
/* BoolListOption: BoolList->Uint16List */ func MapUint16ListToBoolListOption(m BoolListOption, f func(BoolList) Uint16List) Uint16ListOption {  if m.IsDefined() { return Uint16ListOpt(f(*m.value)) } else { return NoneUint16ListOption }  }
/* BoolListOption: BoolList->Uint32List */ func MapUint32ListToBoolListOption(m BoolListOption, f func(BoolList) Uint32List) Uint32ListOption {  if m.IsDefined() { return Uint32ListOpt(f(*m.value)) } else { return NoneUint32ListOption }  }
/* BoolListOption: BoolList->Uint64List */ func MapUint64ListToBoolListOption(m BoolListOption, f func(BoolList) Uint64List) Uint64ListOption {  if m.IsDefined() { return Uint64ListOpt(f(*m.value)) } else { return NoneUint64ListOption }  }
/* BoolListOption: BoolList->UintptrList */ func MapUintptrListToBoolListOption(m BoolListOption, f func(BoolList) UintptrList) UintptrListOption {  if m.IsDefined() { return UintptrListOpt(f(*m.value)) } else { return NoneUintptrListOption }  }
/* BoolListOption: BoolList->ByteList */ func MapByteListToBoolListOption(m BoolListOption, f func(BoolList) ByteList) ByteListOption {  if m.IsDefined() { return ByteListOpt(f(*m.value)) } else { return NoneByteListOption }  }
/* BoolListOption: BoolList->RuneList */ func MapRuneListToBoolListOption(m BoolListOption, f func(BoolList) RuneList) RuneListOption {  if m.IsDefined() { return RuneListOpt(f(*m.value)) } else { return NoneRuneListOption }  }
/* BoolListOption: BoolList->Float32List */ func MapFloat32ListToBoolListOption(m BoolListOption, f func(BoolList) Float32List) Float32ListOption {  if m.IsDefined() { return Float32ListOpt(f(*m.value)) } else { return NoneFloat32ListOption }  }
/* BoolListOption: BoolList->Float64List */ func MapFloat64ListToBoolListOption(m BoolListOption, f func(BoolList) Float64List) Float64ListOption {  if m.IsDefined() { return Float64ListOpt(f(*m.value)) } else { return NoneFloat64ListOption }  }
/* BoolListOption: BoolList->Complex64List */ func MapComplex64ListToBoolListOption(m BoolListOption, f func(BoolList) Complex64List) Complex64ListOption {  if m.IsDefined() { return Complex64ListOpt(f(*m.value)) } else { return NoneComplex64ListOption }  }
/* BoolListOption: BoolList->Complex128List */ func MapComplex128ListToBoolListOption(m BoolListOption, f func(BoolList) Complex128List) Complex128ListOption {  if m.IsDefined() { return Complex128ListOpt(f(*m.value)) } else { return NoneComplex128ListOption }  }
/* BoolListOption: BoolList->AnyList */ func MapAnyListToBoolListOption(m BoolListOption, f func(BoolList) AnyList) AnyListOption {  if m.IsDefined() { return AnyListOpt(f(*m.value)) } else { return NoneAnyListOption }  }
/* StringListOption: StringList->bool */ func MapBoolToStringListOption(m StringListOption, f func(StringList) bool) BoolOption {  if m.IsDefined() { return Bool(f(*m.value)) } else { return NoneBoolOption }  }
/* StringListOption: StringList->string */ func MapStringToStringListOption(m StringListOption, f func(StringList) string) StringOption {  if m.IsDefined() { return String(f(*m.value)) } else { return NoneStringOption }  }
/* StringListOption: StringList->int */ func MapIntToStringListOption(m StringListOption, f func(StringList) int) IntOption {  if m.IsDefined() { return Int(f(*m.value)) } else { return NoneIntOption }  }
/* StringListOption: StringList->int8 */ func MapInt8ToStringListOption(m StringListOption, f func(StringList) int8) Int8Option {  if m.IsDefined() { return Int8(f(*m.value)) } else { return NoneInt8Option }  }
/* StringListOption: StringList->int16 */ func MapInt16ToStringListOption(m StringListOption, f func(StringList) int16) Int16Option {  if m.IsDefined() { return Int16(f(*m.value)) } else { return NoneInt16Option }  }
/* StringListOption: StringList->int32 */ func MapInt32ToStringListOption(m StringListOption, f func(StringList) int32) Int32Option {  if m.IsDefined() { return Int32(f(*m.value)) } else { return NoneInt32Option }  }
/* StringListOption: StringList->int64 */ func MapInt64ToStringListOption(m StringListOption, f func(StringList) int64) Int64Option {  if m.IsDefined() { return Int64(f(*m.value)) } else { return NoneInt64Option }  }
/* StringListOption: StringList->uint */ func MapUintToStringListOption(m StringListOption, f func(StringList) uint) UintOption {  if m.IsDefined() { return Uint(f(*m.value)) } else { return NoneUintOption }  }
/* StringListOption: StringList->uint8 */ func MapUint8ToStringListOption(m StringListOption, f func(StringList) uint8) Uint8Option {  if m.IsDefined() { return Uint8(f(*m.value)) } else { return NoneUint8Option }  }
/* StringListOption: StringList->uint16 */ func MapUint16ToStringListOption(m StringListOption, f func(StringList) uint16) Uint16Option {  if m.IsDefined() { return Uint16(f(*m.value)) } else { return NoneUint16Option }  }
/* StringListOption: StringList->uint32 */ func MapUint32ToStringListOption(m StringListOption, f func(StringList) uint32) Uint32Option {  if m.IsDefined() { return Uint32(f(*m.value)) } else { return NoneUint32Option }  }
/* StringListOption: StringList->uint64 */ func MapUint64ToStringListOption(m StringListOption, f func(StringList) uint64) Uint64Option {  if m.IsDefined() { return Uint64(f(*m.value)) } else { return NoneUint64Option }  }
/* StringListOption: StringList->uintptr */ func MapUintptrToStringListOption(m StringListOption, f func(StringList) uintptr) UintptrOption {  if m.IsDefined() { return Uintptr(f(*m.value)) } else { return NoneUintptrOption }  }
/* StringListOption: StringList->byte */ func MapByteToStringListOption(m StringListOption, f func(StringList) byte) ByteOption {  if m.IsDefined() { return Byte(f(*m.value)) } else { return NoneByteOption }  }
/* StringListOption: StringList->rune */ func MapRuneToStringListOption(m StringListOption, f func(StringList) rune) RuneOption {  if m.IsDefined() { return Rune(f(*m.value)) } else { return NoneRuneOption }  }
/* StringListOption: StringList->float32 */ func MapFloat32ToStringListOption(m StringListOption, f func(StringList) float32) Float32Option {  if m.IsDefined() { return Float32(f(*m.value)) } else { return NoneFloat32Option }  }
/* StringListOption: StringList->float64 */ func MapFloat64ToStringListOption(m StringListOption, f func(StringList) float64) Float64Option {  if m.IsDefined() { return Float64(f(*m.value)) } else { return NoneFloat64Option }  }
/* StringListOption: StringList->complex64 */ func MapComplex64ToStringListOption(m StringListOption, f func(StringList) complex64) Complex64Option {  if m.IsDefined() { return Complex64(f(*m.value)) } else { return NoneComplex64Option }  }
/* StringListOption: StringList->complex128 */ func MapComplex128ToStringListOption(m StringListOption, f func(StringList) complex128) Complex128Option {  if m.IsDefined() { return Complex128(f(*m.value)) } else { return NoneComplex128Option }  }
/* StringListOption: StringList->Any */ func MapAnyToStringListOption(m StringListOption, f func(StringList) Any) AnyOption {  if m.IsDefined() { return AnyOpt(f(*m.value)) } else { return NoneAnyOption }  }
/* StringListOption: StringList->BoolOption */ func MapBoolOptionToStringListOption(m StringListOption, f func(StringList) BoolOption) BoolOptionOption {  if m.IsDefined() { return BoolBool(f(*m.value)) } else { return NoneBoolOptionOption }  }
/* StringListOption: StringList->StringOption */ func MapStringOptionToStringListOption(m StringListOption, f func(StringList) StringOption) StringOptionOption {  if m.IsDefined() { return StringString(f(*m.value)) } else { return NoneStringOptionOption }  }
/* StringListOption: StringList->IntOption */ func MapIntOptionToStringListOption(m StringListOption, f func(StringList) IntOption) IntOptionOption {  if m.IsDefined() { return IntInt(f(*m.value)) } else { return NoneIntOptionOption }  }
/* StringListOption: StringList->Int8Option */ func MapInt8OptionToStringListOption(m StringListOption, f func(StringList) Int8Option) Int8OptionOption {  if m.IsDefined() { return Int8Int8(f(*m.value)) } else { return NoneInt8OptionOption }  }
/* StringListOption: StringList->Int16Option */ func MapInt16OptionToStringListOption(m StringListOption, f func(StringList) Int16Option) Int16OptionOption {  if m.IsDefined() { return Int16Int16(f(*m.value)) } else { return NoneInt16OptionOption }  }
/* StringListOption: StringList->Int32Option */ func MapInt32OptionToStringListOption(m StringListOption, f func(StringList) Int32Option) Int32OptionOption {  if m.IsDefined() { return Int32Int32(f(*m.value)) } else { return NoneInt32OptionOption }  }
/* StringListOption: StringList->Int64Option */ func MapInt64OptionToStringListOption(m StringListOption, f func(StringList) Int64Option) Int64OptionOption {  if m.IsDefined() { return Int64Int64(f(*m.value)) } else { return NoneInt64OptionOption }  }
/* StringListOption: StringList->UintOption */ func MapUintOptionToStringListOption(m StringListOption, f func(StringList) UintOption) UintOptionOption {  if m.IsDefined() { return UintUint(f(*m.value)) } else { return NoneUintOptionOption }  }
/* StringListOption: StringList->Uint8Option */ func MapUint8OptionToStringListOption(m StringListOption, f func(StringList) Uint8Option) Uint8OptionOption {  if m.IsDefined() { return Uint8Uint8(f(*m.value)) } else { return NoneUint8OptionOption }  }
/* StringListOption: StringList->Uint16Option */ func MapUint16OptionToStringListOption(m StringListOption, f func(StringList) Uint16Option) Uint16OptionOption {  if m.IsDefined() { return Uint16Uint16(f(*m.value)) } else { return NoneUint16OptionOption }  }
/* StringListOption: StringList->Uint32Option */ func MapUint32OptionToStringListOption(m StringListOption, f func(StringList) Uint32Option) Uint32OptionOption {  if m.IsDefined() { return Uint32Uint32(f(*m.value)) } else { return NoneUint32OptionOption }  }
/* StringListOption: StringList->Uint64Option */ func MapUint64OptionToStringListOption(m StringListOption, f func(StringList) Uint64Option) Uint64OptionOption {  if m.IsDefined() { return Uint64Uint64(f(*m.value)) } else { return NoneUint64OptionOption }  }
/* StringListOption: StringList->UintptrOption */ func MapUintptrOptionToStringListOption(m StringListOption, f func(StringList) UintptrOption) UintptrOptionOption {  if m.IsDefined() { return UintptrUintptr(f(*m.value)) } else { return NoneUintptrOptionOption }  }
/* StringListOption: StringList->ByteOption */ func MapByteOptionToStringListOption(m StringListOption, f func(StringList) ByteOption) ByteOptionOption {  if m.IsDefined() { return ByteByte(f(*m.value)) } else { return NoneByteOptionOption }  }
/* StringListOption: StringList->RuneOption */ func MapRuneOptionToStringListOption(m StringListOption, f func(StringList) RuneOption) RuneOptionOption {  if m.IsDefined() { return RuneRune(f(*m.value)) } else { return NoneRuneOptionOption }  }
/* StringListOption: StringList->Float32Option */ func MapFloat32OptionToStringListOption(m StringListOption, f func(StringList) Float32Option) Float32OptionOption {  if m.IsDefined() { return Float32Float32(f(*m.value)) } else { return NoneFloat32OptionOption }  }
/* StringListOption: StringList->Float64Option */ func MapFloat64OptionToStringListOption(m StringListOption, f func(StringList) Float64Option) Float64OptionOption {  if m.IsDefined() { return Float64Float64(f(*m.value)) } else { return NoneFloat64OptionOption }  }
/* StringListOption: StringList->Complex64Option */ func MapComplex64OptionToStringListOption(m StringListOption, f func(StringList) Complex64Option) Complex64OptionOption {  if m.IsDefined() { return Complex64Complex64(f(*m.value)) } else { return NoneComplex64OptionOption }  }
/* StringListOption: StringList->Complex128Option */ func MapComplex128OptionToStringListOption(m StringListOption, f func(StringList) Complex128Option) Complex128OptionOption {  if m.IsDefined() { return Complex128Complex128(f(*m.value)) } else { return NoneComplex128OptionOption }  }
/* StringListOption: StringList->AnyOption */ func MapAnyOptionToStringListOption(m StringListOption, f func(StringList) AnyOption) AnyOptionOption {  if m.IsDefined() { return AnyOptAny(f(*m.value)) } else { return NoneAnyOptionOption }  }
/* StringListOption: StringList->[]bool */ func MapBoolArrToStringListOption(m StringListOption, f func(StringList) []bool) BoolArrOption {  if m.IsDefined() { return BoolArrOpt(f(*m.value)) } else { return NoneBoolArrOption }  }
/* StringListOption: StringList->[]string */ func MapStringArrToStringListOption(m StringListOption, f func(StringList) []string) StringArrOption {  if m.IsDefined() { return StringArrOpt(f(*m.value)) } else { return NoneStringArrOption }  }
/* StringListOption: StringList->[]int */ func MapIntArrToStringListOption(m StringListOption, f func(StringList) []int) IntArrOption {  if m.IsDefined() { return IntArrOpt(f(*m.value)) } else { return NoneIntArrOption }  }
/* StringListOption: StringList->[]int8 */ func MapInt8ArrToStringListOption(m StringListOption, f func(StringList) []int8) Int8ArrOption {  if m.IsDefined() { return Int8ArrOpt(f(*m.value)) } else { return NoneInt8ArrOption }  }
/* StringListOption: StringList->[]int16 */ func MapInt16ArrToStringListOption(m StringListOption, f func(StringList) []int16) Int16ArrOption {  if m.IsDefined() { return Int16ArrOpt(f(*m.value)) } else { return NoneInt16ArrOption }  }
/* StringListOption: StringList->[]int32 */ func MapInt32ArrToStringListOption(m StringListOption, f func(StringList) []int32) Int32ArrOption {  if m.IsDefined() { return Int32ArrOpt(f(*m.value)) } else { return NoneInt32ArrOption }  }
/* StringListOption: StringList->[]int64 */ func MapInt64ArrToStringListOption(m StringListOption, f func(StringList) []int64) Int64ArrOption {  if m.IsDefined() { return Int64ArrOpt(f(*m.value)) } else { return NoneInt64ArrOption }  }
/* StringListOption: StringList->[]uint */ func MapUintArrToStringListOption(m StringListOption, f func(StringList) []uint) UintArrOption {  if m.IsDefined() { return UintArrOpt(f(*m.value)) } else { return NoneUintArrOption }  }
/* StringListOption: StringList->[]uint8 */ func MapUint8ArrToStringListOption(m StringListOption, f func(StringList) []uint8) Uint8ArrOption {  if m.IsDefined() { return Uint8ArrOpt(f(*m.value)) } else { return NoneUint8ArrOption }  }
/* StringListOption: StringList->[]uint16 */ func MapUint16ArrToStringListOption(m StringListOption, f func(StringList) []uint16) Uint16ArrOption {  if m.IsDefined() { return Uint16ArrOpt(f(*m.value)) } else { return NoneUint16ArrOption }  }
/* StringListOption: StringList->[]uint32 */ func MapUint32ArrToStringListOption(m StringListOption, f func(StringList) []uint32) Uint32ArrOption {  if m.IsDefined() { return Uint32ArrOpt(f(*m.value)) } else { return NoneUint32ArrOption }  }
/* StringListOption: StringList->[]uint64 */ func MapUint64ArrToStringListOption(m StringListOption, f func(StringList) []uint64) Uint64ArrOption {  if m.IsDefined() { return Uint64ArrOpt(f(*m.value)) } else { return NoneUint64ArrOption }  }
/* StringListOption: StringList->[]uintptr */ func MapUintptrArrToStringListOption(m StringListOption, f func(StringList) []uintptr) UintptrArrOption {  if m.IsDefined() { return UintptrArrOpt(f(*m.value)) } else { return NoneUintptrArrOption }  }
/* StringListOption: StringList->[]byte */ func MapByteArrToStringListOption(m StringListOption, f func(StringList) []byte) ByteArrOption {  if m.IsDefined() { return ByteArrOpt(f(*m.value)) } else { return NoneByteArrOption }  }
/* StringListOption: StringList->[]rune */ func MapRuneArrToStringListOption(m StringListOption, f func(StringList) []rune) RuneArrOption {  if m.IsDefined() { return RuneArrOpt(f(*m.value)) } else { return NoneRuneArrOption }  }
/* StringListOption: StringList->[]float32 */ func MapFloat32ArrToStringListOption(m StringListOption, f func(StringList) []float32) Float32ArrOption {  if m.IsDefined() { return Float32ArrOpt(f(*m.value)) } else { return NoneFloat32ArrOption }  }
/* StringListOption: StringList->[]float64 */ func MapFloat64ArrToStringListOption(m StringListOption, f func(StringList) []float64) Float64ArrOption {  if m.IsDefined() { return Float64ArrOpt(f(*m.value)) } else { return NoneFloat64ArrOption }  }
/* StringListOption: StringList->[]complex64 */ func MapComplex64ArrToStringListOption(m StringListOption, f func(StringList) []complex64) Complex64ArrOption {  if m.IsDefined() { return Complex64ArrOpt(f(*m.value)) } else { return NoneComplex64ArrOption }  }
/* StringListOption: StringList->[]complex128 */ func MapComplex128ArrToStringListOption(m StringListOption, f func(StringList) []complex128) Complex128ArrOption {  if m.IsDefined() { return Complex128ArrOpt(f(*m.value)) } else { return NoneComplex128ArrOption }  }
/* StringListOption: StringList->[]Any */ func MapAnyArrToStringListOption(m StringListOption, f func(StringList) []Any) AnyArrOption {  if m.IsDefined() { return AnyArrOpt(f(*m.value)) } else { return NoneAnyArrOption }  }
/* StringListOption: StringList->BoolList */ func MapBoolListToStringListOption(m StringListOption, f func(StringList) BoolList) BoolListOption {  if m.IsDefined() { return BoolListOpt(f(*m.value)) } else { return NoneBoolListOption }  }
/* StringListOption: StringList->StringList */ func MapStringListToStringListOption(m StringListOption, f func(StringList) StringList) StringListOption {  if m.IsDefined() { return StringListOpt(f(*m.value)) } else { return NoneStringListOption }  }
/* StringListOption: StringList->IntList */ func MapIntListToStringListOption(m StringListOption, f func(StringList) IntList) IntListOption {  if m.IsDefined() { return IntListOpt(f(*m.value)) } else { return NoneIntListOption }  }
/* StringListOption: StringList->Int8List */ func MapInt8ListToStringListOption(m StringListOption, f func(StringList) Int8List) Int8ListOption {  if m.IsDefined() { return Int8ListOpt(f(*m.value)) } else { return NoneInt8ListOption }  }
/* StringListOption: StringList->Int16List */ func MapInt16ListToStringListOption(m StringListOption, f func(StringList) Int16List) Int16ListOption {  if m.IsDefined() { return Int16ListOpt(f(*m.value)) } else { return NoneInt16ListOption }  }
/* StringListOption: StringList->Int32List */ func MapInt32ListToStringListOption(m StringListOption, f func(StringList) Int32List) Int32ListOption {  if m.IsDefined() { return Int32ListOpt(f(*m.value)) } else { return NoneInt32ListOption }  }
/* StringListOption: StringList->Int64List */ func MapInt64ListToStringListOption(m StringListOption, f func(StringList) Int64List) Int64ListOption {  if m.IsDefined() { return Int64ListOpt(f(*m.value)) } else { return NoneInt64ListOption }  }
/* StringListOption: StringList->UintList */ func MapUintListToStringListOption(m StringListOption, f func(StringList) UintList) UintListOption {  if m.IsDefined() { return UintListOpt(f(*m.value)) } else { return NoneUintListOption }  }
/* StringListOption: StringList->Uint8List */ func MapUint8ListToStringListOption(m StringListOption, f func(StringList) Uint8List) Uint8ListOption {  if m.IsDefined() { return Uint8ListOpt(f(*m.value)) } else { return NoneUint8ListOption }  }
/* StringListOption: StringList->Uint16List */ func MapUint16ListToStringListOption(m StringListOption, f func(StringList) Uint16List) Uint16ListOption {  if m.IsDefined() { return Uint16ListOpt(f(*m.value)) } else { return NoneUint16ListOption }  }
/* StringListOption: StringList->Uint32List */ func MapUint32ListToStringListOption(m StringListOption, f func(StringList) Uint32List) Uint32ListOption {  if m.IsDefined() { return Uint32ListOpt(f(*m.value)) } else { return NoneUint32ListOption }  }
/* StringListOption: StringList->Uint64List */ func MapUint64ListToStringListOption(m StringListOption, f func(StringList) Uint64List) Uint64ListOption {  if m.IsDefined() { return Uint64ListOpt(f(*m.value)) } else { return NoneUint64ListOption }  }
/* StringListOption: StringList->UintptrList */ func MapUintptrListToStringListOption(m StringListOption, f func(StringList) UintptrList) UintptrListOption {  if m.IsDefined() { return UintptrListOpt(f(*m.value)) } else { return NoneUintptrListOption }  }
/* StringListOption: StringList->ByteList */ func MapByteListToStringListOption(m StringListOption, f func(StringList) ByteList) ByteListOption {  if m.IsDefined() { return ByteListOpt(f(*m.value)) } else { return NoneByteListOption }  }
/* StringListOption: StringList->RuneList */ func MapRuneListToStringListOption(m StringListOption, f func(StringList) RuneList) RuneListOption {  if m.IsDefined() { return RuneListOpt(f(*m.value)) } else { return NoneRuneListOption }  }
/* StringListOption: StringList->Float32List */ func MapFloat32ListToStringListOption(m StringListOption, f func(StringList) Float32List) Float32ListOption {  if m.IsDefined() { return Float32ListOpt(f(*m.value)) } else { return NoneFloat32ListOption }  }
/* StringListOption: StringList->Float64List */ func MapFloat64ListToStringListOption(m StringListOption, f func(StringList) Float64List) Float64ListOption {  if m.IsDefined() { return Float64ListOpt(f(*m.value)) } else { return NoneFloat64ListOption }  }
/* StringListOption: StringList->Complex64List */ func MapComplex64ListToStringListOption(m StringListOption, f func(StringList) Complex64List) Complex64ListOption {  if m.IsDefined() { return Complex64ListOpt(f(*m.value)) } else { return NoneComplex64ListOption }  }
/* StringListOption: StringList->Complex128List */ func MapComplex128ListToStringListOption(m StringListOption, f func(StringList) Complex128List) Complex128ListOption {  if m.IsDefined() { return Complex128ListOpt(f(*m.value)) } else { return NoneComplex128ListOption }  }
/* StringListOption: StringList->AnyList */ func MapAnyListToStringListOption(m StringListOption, f func(StringList) AnyList) AnyListOption {  if m.IsDefined() { return AnyListOpt(f(*m.value)) } else { return NoneAnyListOption }  }
/* IntListOption: IntList->bool */ func MapBoolToIntListOption(m IntListOption, f func(IntList) bool) BoolOption {  if m.IsDefined() { return Bool(f(*m.value)) } else { return NoneBoolOption }  }
/* IntListOption: IntList->string */ func MapStringToIntListOption(m IntListOption, f func(IntList) string) StringOption {  if m.IsDefined() { return String(f(*m.value)) } else { return NoneStringOption }  }
/* IntListOption: IntList->int */ func MapIntToIntListOption(m IntListOption, f func(IntList) int) IntOption {  if m.IsDefined() { return Int(f(*m.value)) } else { return NoneIntOption }  }
/* IntListOption: IntList->int8 */ func MapInt8ToIntListOption(m IntListOption, f func(IntList) int8) Int8Option {  if m.IsDefined() { return Int8(f(*m.value)) } else { return NoneInt8Option }  }
/* IntListOption: IntList->int16 */ func MapInt16ToIntListOption(m IntListOption, f func(IntList) int16) Int16Option {  if m.IsDefined() { return Int16(f(*m.value)) } else { return NoneInt16Option }  }
/* IntListOption: IntList->int32 */ func MapInt32ToIntListOption(m IntListOption, f func(IntList) int32) Int32Option {  if m.IsDefined() { return Int32(f(*m.value)) } else { return NoneInt32Option }  }
/* IntListOption: IntList->int64 */ func MapInt64ToIntListOption(m IntListOption, f func(IntList) int64) Int64Option {  if m.IsDefined() { return Int64(f(*m.value)) } else { return NoneInt64Option }  }
/* IntListOption: IntList->uint */ func MapUintToIntListOption(m IntListOption, f func(IntList) uint) UintOption {  if m.IsDefined() { return Uint(f(*m.value)) } else { return NoneUintOption }  }
/* IntListOption: IntList->uint8 */ func MapUint8ToIntListOption(m IntListOption, f func(IntList) uint8) Uint8Option {  if m.IsDefined() { return Uint8(f(*m.value)) } else { return NoneUint8Option }  }
/* IntListOption: IntList->uint16 */ func MapUint16ToIntListOption(m IntListOption, f func(IntList) uint16) Uint16Option {  if m.IsDefined() { return Uint16(f(*m.value)) } else { return NoneUint16Option }  }
/* IntListOption: IntList->uint32 */ func MapUint32ToIntListOption(m IntListOption, f func(IntList) uint32) Uint32Option {  if m.IsDefined() { return Uint32(f(*m.value)) } else { return NoneUint32Option }  }
/* IntListOption: IntList->uint64 */ func MapUint64ToIntListOption(m IntListOption, f func(IntList) uint64) Uint64Option {  if m.IsDefined() { return Uint64(f(*m.value)) } else { return NoneUint64Option }  }
/* IntListOption: IntList->uintptr */ func MapUintptrToIntListOption(m IntListOption, f func(IntList) uintptr) UintptrOption {  if m.IsDefined() { return Uintptr(f(*m.value)) } else { return NoneUintptrOption }  }
/* IntListOption: IntList->byte */ func MapByteToIntListOption(m IntListOption, f func(IntList) byte) ByteOption {  if m.IsDefined() { return Byte(f(*m.value)) } else { return NoneByteOption }  }
/* IntListOption: IntList->rune */ func MapRuneToIntListOption(m IntListOption, f func(IntList) rune) RuneOption {  if m.IsDefined() { return Rune(f(*m.value)) } else { return NoneRuneOption }  }
/* IntListOption: IntList->float32 */ func MapFloat32ToIntListOption(m IntListOption, f func(IntList) float32) Float32Option {  if m.IsDefined() { return Float32(f(*m.value)) } else { return NoneFloat32Option }  }
/* IntListOption: IntList->float64 */ func MapFloat64ToIntListOption(m IntListOption, f func(IntList) float64) Float64Option {  if m.IsDefined() { return Float64(f(*m.value)) } else { return NoneFloat64Option }  }
/* IntListOption: IntList->complex64 */ func MapComplex64ToIntListOption(m IntListOption, f func(IntList) complex64) Complex64Option {  if m.IsDefined() { return Complex64(f(*m.value)) } else { return NoneComplex64Option }  }
/* IntListOption: IntList->complex128 */ func MapComplex128ToIntListOption(m IntListOption, f func(IntList) complex128) Complex128Option {  if m.IsDefined() { return Complex128(f(*m.value)) } else { return NoneComplex128Option }  }
/* IntListOption: IntList->Any */ func MapAnyToIntListOption(m IntListOption, f func(IntList) Any) AnyOption {  if m.IsDefined() { return AnyOpt(f(*m.value)) } else { return NoneAnyOption }  }
/* IntListOption: IntList->BoolOption */ func MapBoolOptionToIntListOption(m IntListOption, f func(IntList) BoolOption) BoolOptionOption {  if m.IsDefined() { return BoolBool(f(*m.value)) } else { return NoneBoolOptionOption }  }
/* IntListOption: IntList->StringOption */ func MapStringOptionToIntListOption(m IntListOption, f func(IntList) StringOption) StringOptionOption {  if m.IsDefined() { return StringString(f(*m.value)) } else { return NoneStringOptionOption }  }
/* IntListOption: IntList->IntOption */ func MapIntOptionToIntListOption(m IntListOption, f func(IntList) IntOption) IntOptionOption {  if m.IsDefined() { return IntInt(f(*m.value)) } else { return NoneIntOptionOption }  }
/* IntListOption: IntList->Int8Option */ func MapInt8OptionToIntListOption(m IntListOption, f func(IntList) Int8Option) Int8OptionOption {  if m.IsDefined() { return Int8Int8(f(*m.value)) } else { return NoneInt8OptionOption }  }
/* IntListOption: IntList->Int16Option */ func MapInt16OptionToIntListOption(m IntListOption, f func(IntList) Int16Option) Int16OptionOption {  if m.IsDefined() { return Int16Int16(f(*m.value)) } else { return NoneInt16OptionOption }  }
/* IntListOption: IntList->Int32Option */ func MapInt32OptionToIntListOption(m IntListOption, f func(IntList) Int32Option) Int32OptionOption {  if m.IsDefined() { return Int32Int32(f(*m.value)) } else { return NoneInt32OptionOption }  }
/* IntListOption: IntList->Int64Option */ func MapInt64OptionToIntListOption(m IntListOption, f func(IntList) Int64Option) Int64OptionOption {  if m.IsDefined() { return Int64Int64(f(*m.value)) } else { return NoneInt64OptionOption }  }
/* IntListOption: IntList->UintOption */ func MapUintOptionToIntListOption(m IntListOption, f func(IntList) UintOption) UintOptionOption {  if m.IsDefined() { return UintUint(f(*m.value)) } else { return NoneUintOptionOption }  }
/* IntListOption: IntList->Uint8Option */ func MapUint8OptionToIntListOption(m IntListOption, f func(IntList) Uint8Option) Uint8OptionOption {  if m.IsDefined() { return Uint8Uint8(f(*m.value)) } else { return NoneUint8OptionOption }  }
/* IntListOption: IntList->Uint16Option */ func MapUint16OptionToIntListOption(m IntListOption, f func(IntList) Uint16Option) Uint16OptionOption {  if m.IsDefined() { return Uint16Uint16(f(*m.value)) } else { return NoneUint16OptionOption }  }
/* IntListOption: IntList->Uint32Option */ func MapUint32OptionToIntListOption(m IntListOption, f func(IntList) Uint32Option) Uint32OptionOption {  if m.IsDefined() { return Uint32Uint32(f(*m.value)) } else { return NoneUint32OptionOption }  }
/* IntListOption: IntList->Uint64Option */ func MapUint64OptionToIntListOption(m IntListOption, f func(IntList) Uint64Option) Uint64OptionOption {  if m.IsDefined() { return Uint64Uint64(f(*m.value)) } else { return NoneUint64OptionOption }  }
/* IntListOption: IntList->UintptrOption */ func MapUintptrOptionToIntListOption(m IntListOption, f func(IntList) UintptrOption) UintptrOptionOption {  if m.IsDefined() { return UintptrUintptr(f(*m.value)) } else { return NoneUintptrOptionOption }  }
/* IntListOption: IntList->ByteOption */ func MapByteOptionToIntListOption(m IntListOption, f func(IntList) ByteOption) ByteOptionOption {  if m.IsDefined() { return ByteByte(f(*m.value)) } else { return NoneByteOptionOption }  }
/* IntListOption: IntList->RuneOption */ func MapRuneOptionToIntListOption(m IntListOption, f func(IntList) RuneOption) RuneOptionOption {  if m.IsDefined() { return RuneRune(f(*m.value)) } else { return NoneRuneOptionOption }  }
/* IntListOption: IntList->Float32Option */ func MapFloat32OptionToIntListOption(m IntListOption, f func(IntList) Float32Option) Float32OptionOption {  if m.IsDefined() { return Float32Float32(f(*m.value)) } else { return NoneFloat32OptionOption }  }
/* IntListOption: IntList->Float64Option */ func MapFloat64OptionToIntListOption(m IntListOption, f func(IntList) Float64Option) Float64OptionOption {  if m.IsDefined() { return Float64Float64(f(*m.value)) } else { return NoneFloat64OptionOption }  }
/* IntListOption: IntList->Complex64Option */ func MapComplex64OptionToIntListOption(m IntListOption, f func(IntList) Complex64Option) Complex64OptionOption {  if m.IsDefined() { return Complex64Complex64(f(*m.value)) } else { return NoneComplex64OptionOption }  }
/* IntListOption: IntList->Complex128Option */ func MapComplex128OptionToIntListOption(m IntListOption, f func(IntList) Complex128Option) Complex128OptionOption {  if m.IsDefined() { return Complex128Complex128(f(*m.value)) } else { return NoneComplex128OptionOption }  }
/* IntListOption: IntList->AnyOption */ func MapAnyOptionToIntListOption(m IntListOption, f func(IntList) AnyOption) AnyOptionOption {  if m.IsDefined() { return AnyOptAny(f(*m.value)) } else { return NoneAnyOptionOption }  }
/* IntListOption: IntList->[]bool */ func MapBoolArrToIntListOption(m IntListOption, f func(IntList) []bool) BoolArrOption {  if m.IsDefined() { return BoolArrOpt(f(*m.value)) } else { return NoneBoolArrOption }  }
/* IntListOption: IntList->[]string */ func MapStringArrToIntListOption(m IntListOption, f func(IntList) []string) StringArrOption {  if m.IsDefined() { return StringArrOpt(f(*m.value)) } else { return NoneStringArrOption }  }
/* IntListOption: IntList->[]int */ func MapIntArrToIntListOption(m IntListOption, f func(IntList) []int) IntArrOption {  if m.IsDefined() { return IntArrOpt(f(*m.value)) } else { return NoneIntArrOption }  }
/* IntListOption: IntList->[]int8 */ func MapInt8ArrToIntListOption(m IntListOption, f func(IntList) []int8) Int8ArrOption {  if m.IsDefined() { return Int8ArrOpt(f(*m.value)) } else { return NoneInt8ArrOption }  }
/* IntListOption: IntList->[]int16 */ func MapInt16ArrToIntListOption(m IntListOption, f func(IntList) []int16) Int16ArrOption {  if m.IsDefined() { return Int16ArrOpt(f(*m.value)) } else { return NoneInt16ArrOption }  }
/* IntListOption: IntList->[]int32 */ func MapInt32ArrToIntListOption(m IntListOption, f func(IntList) []int32) Int32ArrOption {  if m.IsDefined() { return Int32ArrOpt(f(*m.value)) } else { return NoneInt32ArrOption }  }
/* IntListOption: IntList->[]int64 */ func MapInt64ArrToIntListOption(m IntListOption, f func(IntList) []int64) Int64ArrOption {  if m.IsDefined() { return Int64ArrOpt(f(*m.value)) } else { return NoneInt64ArrOption }  }
/* IntListOption: IntList->[]uint */ func MapUintArrToIntListOption(m IntListOption, f func(IntList) []uint) UintArrOption {  if m.IsDefined() { return UintArrOpt(f(*m.value)) } else { return NoneUintArrOption }  }
/* IntListOption: IntList->[]uint8 */ func MapUint8ArrToIntListOption(m IntListOption, f func(IntList) []uint8) Uint8ArrOption {  if m.IsDefined() { return Uint8ArrOpt(f(*m.value)) } else { return NoneUint8ArrOption }  }
/* IntListOption: IntList->[]uint16 */ func MapUint16ArrToIntListOption(m IntListOption, f func(IntList) []uint16) Uint16ArrOption {  if m.IsDefined() { return Uint16ArrOpt(f(*m.value)) } else { return NoneUint16ArrOption }  }
/* IntListOption: IntList->[]uint32 */ func MapUint32ArrToIntListOption(m IntListOption, f func(IntList) []uint32) Uint32ArrOption {  if m.IsDefined() { return Uint32ArrOpt(f(*m.value)) } else { return NoneUint32ArrOption }  }
/* IntListOption: IntList->[]uint64 */ func MapUint64ArrToIntListOption(m IntListOption, f func(IntList) []uint64) Uint64ArrOption {  if m.IsDefined() { return Uint64ArrOpt(f(*m.value)) } else { return NoneUint64ArrOption }  }
/* IntListOption: IntList->[]uintptr */ func MapUintptrArrToIntListOption(m IntListOption, f func(IntList) []uintptr) UintptrArrOption {  if m.IsDefined() { return UintptrArrOpt(f(*m.value)) } else { return NoneUintptrArrOption }  }
/* IntListOption: IntList->[]byte */ func MapByteArrToIntListOption(m IntListOption, f func(IntList) []byte) ByteArrOption {  if m.IsDefined() { return ByteArrOpt(f(*m.value)) } else { return NoneByteArrOption }  }
/* IntListOption: IntList->[]rune */ func MapRuneArrToIntListOption(m IntListOption, f func(IntList) []rune) RuneArrOption {  if m.IsDefined() { return RuneArrOpt(f(*m.value)) } else { return NoneRuneArrOption }  }
/* IntListOption: IntList->[]float32 */ func MapFloat32ArrToIntListOption(m IntListOption, f func(IntList) []float32) Float32ArrOption {  if m.IsDefined() { return Float32ArrOpt(f(*m.value)) } else { return NoneFloat32ArrOption }  }
/* IntListOption: IntList->[]float64 */ func MapFloat64ArrToIntListOption(m IntListOption, f func(IntList) []float64) Float64ArrOption {  if m.IsDefined() { return Float64ArrOpt(f(*m.value)) } else { return NoneFloat64ArrOption }  }
/* IntListOption: IntList->[]complex64 */ func MapComplex64ArrToIntListOption(m IntListOption, f func(IntList) []complex64) Complex64ArrOption {  if m.IsDefined() { return Complex64ArrOpt(f(*m.value)) } else { return NoneComplex64ArrOption }  }
/* IntListOption: IntList->[]complex128 */ func MapComplex128ArrToIntListOption(m IntListOption, f func(IntList) []complex128) Complex128ArrOption {  if m.IsDefined() { return Complex128ArrOpt(f(*m.value)) } else { return NoneComplex128ArrOption }  }
/* IntListOption: IntList->[]Any */ func MapAnyArrToIntListOption(m IntListOption, f func(IntList) []Any) AnyArrOption {  if m.IsDefined() { return AnyArrOpt(f(*m.value)) } else { return NoneAnyArrOption }  }
/* IntListOption: IntList->BoolList */ func MapBoolListToIntListOption(m IntListOption, f func(IntList) BoolList) BoolListOption {  if m.IsDefined() { return BoolListOpt(f(*m.value)) } else { return NoneBoolListOption }  }
/* IntListOption: IntList->StringList */ func MapStringListToIntListOption(m IntListOption, f func(IntList) StringList) StringListOption {  if m.IsDefined() { return StringListOpt(f(*m.value)) } else { return NoneStringListOption }  }
/* IntListOption: IntList->IntList */ func MapIntListToIntListOption(m IntListOption, f func(IntList) IntList) IntListOption {  if m.IsDefined() { return IntListOpt(f(*m.value)) } else { return NoneIntListOption }  }
/* IntListOption: IntList->Int8List */ func MapInt8ListToIntListOption(m IntListOption, f func(IntList) Int8List) Int8ListOption {  if m.IsDefined() { return Int8ListOpt(f(*m.value)) } else { return NoneInt8ListOption }  }
/* IntListOption: IntList->Int16List */ func MapInt16ListToIntListOption(m IntListOption, f func(IntList) Int16List) Int16ListOption {  if m.IsDefined() { return Int16ListOpt(f(*m.value)) } else { return NoneInt16ListOption }  }
/* IntListOption: IntList->Int32List */ func MapInt32ListToIntListOption(m IntListOption, f func(IntList) Int32List) Int32ListOption {  if m.IsDefined() { return Int32ListOpt(f(*m.value)) } else { return NoneInt32ListOption }  }
/* IntListOption: IntList->Int64List */ func MapInt64ListToIntListOption(m IntListOption, f func(IntList) Int64List) Int64ListOption {  if m.IsDefined() { return Int64ListOpt(f(*m.value)) } else { return NoneInt64ListOption }  }
/* IntListOption: IntList->UintList */ func MapUintListToIntListOption(m IntListOption, f func(IntList) UintList) UintListOption {  if m.IsDefined() { return UintListOpt(f(*m.value)) } else { return NoneUintListOption }  }
/* IntListOption: IntList->Uint8List */ func MapUint8ListToIntListOption(m IntListOption, f func(IntList) Uint8List) Uint8ListOption {  if m.IsDefined() { return Uint8ListOpt(f(*m.value)) } else { return NoneUint8ListOption }  }
/* IntListOption: IntList->Uint16List */ func MapUint16ListToIntListOption(m IntListOption, f func(IntList) Uint16List) Uint16ListOption {  if m.IsDefined() { return Uint16ListOpt(f(*m.value)) } else { return NoneUint16ListOption }  }
/* IntListOption: IntList->Uint32List */ func MapUint32ListToIntListOption(m IntListOption, f func(IntList) Uint32List) Uint32ListOption {  if m.IsDefined() { return Uint32ListOpt(f(*m.value)) } else { return NoneUint32ListOption }  }
/* IntListOption: IntList->Uint64List */ func MapUint64ListToIntListOption(m IntListOption, f func(IntList) Uint64List) Uint64ListOption {  if m.IsDefined() { return Uint64ListOpt(f(*m.value)) } else { return NoneUint64ListOption }  }
/* IntListOption: IntList->UintptrList */ func MapUintptrListToIntListOption(m IntListOption, f func(IntList) UintptrList) UintptrListOption {  if m.IsDefined() { return UintptrListOpt(f(*m.value)) } else { return NoneUintptrListOption }  }
/* IntListOption: IntList->ByteList */ func MapByteListToIntListOption(m IntListOption, f func(IntList) ByteList) ByteListOption {  if m.IsDefined() { return ByteListOpt(f(*m.value)) } else { return NoneByteListOption }  }
/* IntListOption: IntList->RuneList */ func MapRuneListToIntListOption(m IntListOption, f func(IntList) RuneList) RuneListOption {  if m.IsDefined() { return RuneListOpt(f(*m.value)) } else { return NoneRuneListOption }  }
/* IntListOption: IntList->Float32List */ func MapFloat32ListToIntListOption(m IntListOption, f func(IntList) Float32List) Float32ListOption {  if m.IsDefined() { return Float32ListOpt(f(*m.value)) } else { return NoneFloat32ListOption }  }
/* IntListOption: IntList->Float64List */ func MapFloat64ListToIntListOption(m IntListOption, f func(IntList) Float64List) Float64ListOption {  if m.IsDefined() { return Float64ListOpt(f(*m.value)) } else { return NoneFloat64ListOption }  }
/* IntListOption: IntList->Complex64List */ func MapComplex64ListToIntListOption(m IntListOption, f func(IntList) Complex64List) Complex64ListOption {  if m.IsDefined() { return Complex64ListOpt(f(*m.value)) } else { return NoneComplex64ListOption }  }
/* IntListOption: IntList->Complex128List */ func MapComplex128ListToIntListOption(m IntListOption, f func(IntList) Complex128List) Complex128ListOption {  if m.IsDefined() { return Complex128ListOpt(f(*m.value)) } else { return NoneComplex128ListOption }  }
/* IntListOption: IntList->AnyList */ func MapAnyListToIntListOption(m IntListOption, f func(IntList) AnyList) AnyListOption {  if m.IsDefined() { return AnyListOpt(f(*m.value)) } else { return NoneAnyListOption }  }
/* Int8ListOption: Int8List->bool */ func MapBoolToInt8ListOption(m Int8ListOption, f func(Int8List) bool) BoolOption {  if m.IsDefined() { return Bool(f(*m.value)) } else { return NoneBoolOption }  }
/* Int8ListOption: Int8List->string */ func MapStringToInt8ListOption(m Int8ListOption, f func(Int8List) string) StringOption {  if m.IsDefined() { return String(f(*m.value)) } else { return NoneStringOption }  }
/* Int8ListOption: Int8List->int */ func MapIntToInt8ListOption(m Int8ListOption, f func(Int8List) int) IntOption {  if m.IsDefined() { return Int(f(*m.value)) } else { return NoneIntOption }  }
/* Int8ListOption: Int8List->int8 */ func MapInt8ToInt8ListOption(m Int8ListOption, f func(Int8List) int8) Int8Option {  if m.IsDefined() { return Int8(f(*m.value)) } else { return NoneInt8Option }  }
/* Int8ListOption: Int8List->int16 */ func MapInt16ToInt8ListOption(m Int8ListOption, f func(Int8List) int16) Int16Option {  if m.IsDefined() { return Int16(f(*m.value)) } else { return NoneInt16Option }  }
/* Int8ListOption: Int8List->int32 */ func MapInt32ToInt8ListOption(m Int8ListOption, f func(Int8List) int32) Int32Option {  if m.IsDefined() { return Int32(f(*m.value)) } else { return NoneInt32Option }  }
/* Int8ListOption: Int8List->int64 */ func MapInt64ToInt8ListOption(m Int8ListOption, f func(Int8List) int64) Int64Option {  if m.IsDefined() { return Int64(f(*m.value)) } else { return NoneInt64Option }  }
/* Int8ListOption: Int8List->uint */ func MapUintToInt8ListOption(m Int8ListOption, f func(Int8List) uint) UintOption {  if m.IsDefined() { return Uint(f(*m.value)) } else { return NoneUintOption }  }
/* Int8ListOption: Int8List->uint8 */ func MapUint8ToInt8ListOption(m Int8ListOption, f func(Int8List) uint8) Uint8Option {  if m.IsDefined() { return Uint8(f(*m.value)) } else { return NoneUint8Option }  }
/* Int8ListOption: Int8List->uint16 */ func MapUint16ToInt8ListOption(m Int8ListOption, f func(Int8List) uint16) Uint16Option {  if m.IsDefined() { return Uint16(f(*m.value)) } else { return NoneUint16Option }  }
/* Int8ListOption: Int8List->uint32 */ func MapUint32ToInt8ListOption(m Int8ListOption, f func(Int8List) uint32) Uint32Option {  if m.IsDefined() { return Uint32(f(*m.value)) } else { return NoneUint32Option }  }
/* Int8ListOption: Int8List->uint64 */ func MapUint64ToInt8ListOption(m Int8ListOption, f func(Int8List) uint64) Uint64Option {  if m.IsDefined() { return Uint64(f(*m.value)) } else { return NoneUint64Option }  }
/* Int8ListOption: Int8List->uintptr */ func MapUintptrToInt8ListOption(m Int8ListOption, f func(Int8List) uintptr) UintptrOption {  if m.IsDefined() { return Uintptr(f(*m.value)) } else { return NoneUintptrOption }  }
/* Int8ListOption: Int8List->byte */ func MapByteToInt8ListOption(m Int8ListOption, f func(Int8List) byte) ByteOption {  if m.IsDefined() { return Byte(f(*m.value)) } else { return NoneByteOption }  }
/* Int8ListOption: Int8List->rune */ func MapRuneToInt8ListOption(m Int8ListOption, f func(Int8List) rune) RuneOption {  if m.IsDefined() { return Rune(f(*m.value)) } else { return NoneRuneOption }  }
/* Int8ListOption: Int8List->float32 */ func MapFloat32ToInt8ListOption(m Int8ListOption, f func(Int8List) float32) Float32Option {  if m.IsDefined() { return Float32(f(*m.value)) } else { return NoneFloat32Option }  }
/* Int8ListOption: Int8List->float64 */ func MapFloat64ToInt8ListOption(m Int8ListOption, f func(Int8List) float64) Float64Option {  if m.IsDefined() { return Float64(f(*m.value)) } else { return NoneFloat64Option }  }
/* Int8ListOption: Int8List->complex64 */ func MapComplex64ToInt8ListOption(m Int8ListOption, f func(Int8List) complex64) Complex64Option {  if m.IsDefined() { return Complex64(f(*m.value)) } else { return NoneComplex64Option }  }
/* Int8ListOption: Int8List->complex128 */ func MapComplex128ToInt8ListOption(m Int8ListOption, f func(Int8List) complex128) Complex128Option {  if m.IsDefined() { return Complex128(f(*m.value)) } else { return NoneComplex128Option }  }
/* Int8ListOption: Int8List->Any */ func MapAnyToInt8ListOption(m Int8ListOption, f func(Int8List) Any) AnyOption {  if m.IsDefined() { return AnyOpt(f(*m.value)) } else { return NoneAnyOption }  }
/* Int8ListOption: Int8List->BoolOption */ func MapBoolOptionToInt8ListOption(m Int8ListOption, f func(Int8List) BoolOption) BoolOptionOption {  if m.IsDefined() { return BoolBool(f(*m.value)) } else { return NoneBoolOptionOption }  }
/* Int8ListOption: Int8List->StringOption */ func MapStringOptionToInt8ListOption(m Int8ListOption, f func(Int8List) StringOption) StringOptionOption {  if m.IsDefined() { return StringString(f(*m.value)) } else { return NoneStringOptionOption }  }
/* Int8ListOption: Int8List->IntOption */ func MapIntOptionToInt8ListOption(m Int8ListOption, f func(Int8List) IntOption) IntOptionOption {  if m.IsDefined() { return IntInt(f(*m.value)) } else { return NoneIntOptionOption }  }
/* Int8ListOption: Int8List->Int8Option */ func MapInt8OptionToInt8ListOption(m Int8ListOption, f func(Int8List) Int8Option) Int8OptionOption {  if m.IsDefined() { return Int8Int8(f(*m.value)) } else { return NoneInt8OptionOption }  }
/* Int8ListOption: Int8List->Int16Option */ func MapInt16OptionToInt8ListOption(m Int8ListOption, f func(Int8List) Int16Option) Int16OptionOption {  if m.IsDefined() { return Int16Int16(f(*m.value)) } else { return NoneInt16OptionOption }  }
/* Int8ListOption: Int8List->Int32Option */ func MapInt32OptionToInt8ListOption(m Int8ListOption, f func(Int8List) Int32Option) Int32OptionOption {  if m.IsDefined() { return Int32Int32(f(*m.value)) } else { return NoneInt32OptionOption }  }
/* Int8ListOption: Int8List->Int64Option */ func MapInt64OptionToInt8ListOption(m Int8ListOption, f func(Int8List) Int64Option) Int64OptionOption {  if m.IsDefined() { return Int64Int64(f(*m.value)) } else { return NoneInt64OptionOption }  }
/* Int8ListOption: Int8List->UintOption */ func MapUintOptionToInt8ListOption(m Int8ListOption, f func(Int8List) UintOption) UintOptionOption {  if m.IsDefined() { return UintUint(f(*m.value)) } else { return NoneUintOptionOption }  }
/* Int8ListOption: Int8List->Uint8Option */ func MapUint8OptionToInt8ListOption(m Int8ListOption, f func(Int8List) Uint8Option) Uint8OptionOption {  if m.IsDefined() { return Uint8Uint8(f(*m.value)) } else { return NoneUint8OptionOption }  }
/* Int8ListOption: Int8List->Uint16Option */ func MapUint16OptionToInt8ListOption(m Int8ListOption, f func(Int8List) Uint16Option) Uint16OptionOption {  if m.IsDefined() { return Uint16Uint16(f(*m.value)) } else { return NoneUint16OptionOption }  }
/* Int8ListOption: Int8List->Uint32Option */ func MapUint32OptionToInt8ListOption(m Int8ListOption, f func(Int8List) Uint32Option) Uint32OptionOption {  if m.IsDefined() { return Uint32Uint32(f(*m.value)) } else { return NoneUint32OptionOption }  }
/* Int8ListOption: Int8List->Uint64Option */ func MapUint64OptionToInt8ListOption(m Int8ListOption, f func(Int8List) Uint64Option) Uint64OptionOption {  if m.IsDefined() { return Uint64Uint64(f(*m.value)) } else { return NoneUint64OptionOption }  }
/* Int8ListOption: Int8List->UintptrOption */ func MapUintptrOptionToInt8ListOption(m Int8ListOption, f func(Int8List) UintptrOption) UintptrOptionOption {  if m.IsDefined() { return UintptrUintptr(f(*m.value)) } else { return NoneUintptrOptionOption }  }
/* Int8ListOption: Int8List->ByteOption */ func MapByteOptionToInt8ListOption(m Int8ListOption, f func(Int8List) ByteOption) ByteOptionOption {  if m.IsDefined() { return ByteByte(f(*m.value)) } else { return NoneByteOptionOption }  }
/* Int8ListOption: Int8List->RuneOption */ func MapRuneOptionToInt8ListOption(m Int8ListOption, f func(Int8List) RuneOption) RuneOptionOption {  if m.IsDefined() { return RuneRune(f(*m.value)) } else { return NoneRuneOptionOption }  }
/* Int8ListOption: Int8List->Float32Option */ func MapFloat32OptionToInt8ListOption(m Int8ListOption, f func(Int8List) Float32Option) Float32OptionOption {  if m.IsDefined() { return Float32Float32(f(*m.value)) } else { return NoneFloat32OptionOption }  }
/* Int8ListOption: Int8List->Float64Option */ func MapFloat64OptionToInt8ListOption(m Int8ListOption, f func(Int8List) Float64Option) Float64OptionOption {  if m.IsDefined() { return Float64Float64(f(*m.value)) } else { return NoneFloat64OptionOption }  }
/* Int8ListOption: Int8List->Complex64Option */ func MapComplex64OptionToInt8ListOption(m Int8ListOption, f func(Int8List) Complex64Option) Complex64OptionOption {  if m.IsDefined() { return Complex64Complex64(f(*m.value)) } else { return NoneComplex64OptionOption }  }
/* Int8ListOption: Int8List->Complex128Option */ func MapComplex128OptionToInt8ListOption(m Int8ListOption, f func(Int8List) Complex128Option) Complex128OptionOption {  if m.IsDefined() { return Complex128Complex128(f(*m.value)) } else { return NoneComplex128OptionOption }  }
/* Int8ListOption: Int8List->AnyOption */ func MapAnyOptionToInt8ListOption(m Int8ListOption, f func(Int8List) AnyOption) AnyOptionOption {  if m.IsDefined() { return AnyOptAny(f(*m.value)) } else { return NoneAnyOptionOption }  }
/* Int8ListOption: Int8List->[]bool */ func MapBoolArrToInt8ListOption(m Int8ListOption, f func(Int8List) []bool) BoolArrOption {  if m.IsDefined() { return BoolArrOpt(f(*m.value)) } else { return NoneBoolArrOption }  }
/* Int8ListOption: Int8List->[]string */ func MapStringArrToInt8ListOption(m Int8ListOption, f func(Int8List) []string) StringArrOption {  if m.IsDefined() { return StringArrOpt(f(*m.value)) } else { return NoneStringArrOption }  }
/* Int8ListOption: Int8List->[]int */ func MapIntArrToInt8ListOption(m Int8ListOption, f func(Int8List) []int) IntArrOption {  if m.IsDefined() { return IntArrOpt(f(*m.value)) } else { return NoneIntArrOption }  }
/* Int8ListOption: Int8List->[]int8 */ func MapInt8ArrToInt8ListOption(m Int8ListOption, f func(Int8List) []int8) Int8ArrOption {  if m.IsDefined() { return Int8ArrOpt(f(*m.value)) } else { return NoneInt8ArrOption }  }
/* Int8ListOption: Int8List->[]int16 */ func MapInt16ArrToInt8ListOption(m Int8ListOption, f func(Int8List) []int16) Int16ArrOption {  if m.IsDefined() { return Int16ArrOpt(f(*m.value)) } else { return NoneInt16ArrOption }  }
/* Int8ListOption: Int8List->[]int32 */ func MapInt32ArrToInt8ListOption(m Int8ListOption, f func(Int8List) []int32) Int32ArrOption {  if m.IsDefined() { return Int32ArrOpt(f(*m.value)) } else { return NoneInt32ArrOption }  }
/* Int8ListOption: Int8List->[]int64 */ func MapInt64ArrToInt8ListOption(m Int8ListOption, f func(Int8List) []int64) Int64ArrOption {  if m.IsDefined() { return Int64ArrOpt(f(*m.value)) } else { return NoneInt64ArrOption }  }
/* Int8ListOption: Int8List->[]uint */ func MapUintArrToInt8ListOption(m Int8ListOption, f func(Int8List) []uint) UintArrOption {  if m.IsDefined() { return UintArrOpt(f(*m.value)) } else { return NoneUintArrOption }  }
/* Int8ListOption: Int8List->[]uint8 */ func MapUint8ArrToInt8ListOption(m Int8ListOption, f func(Int8List) []uint8) Uint8ArrOption {  if m.IsDefined() { return Uint8ArrOpt(f(*m.value)) } else { return NoneUint8ArrOption }  }
/* Int8ListOption: Int8List->[]uint16 */ func MapUint16ArrToInt8ListOption(m Int8ListOption, f func(Int8List) []uint16) Uint16ArrOption {  if m.IsDefined() { return Uint16ArrOpt(f(*m.value)) } else { return NoneUint16ArrOption }  }
/* Int8ListOption: Int8List->[]uint32 */ func MapUint32ArrToInt8ListOption(m Int8ListOption, f func(Int8List) []uint32) Uint32ArrOption {  if m.IsDefined() { return Uint32ArrOpt(f(*m.value)) } else { return NoneUint32ArrOption }  }
/* Int8ListOption: Int8List->[]uint64 */ func MapUint64ArrToInt8ListOption(m Int8ListOption, f func(Int8List) []uint64) Uint64ArrOption {  if m.IsDefined() { return Uint64ArrOpt(f(*m.value)) } else { return NoneUint64ArrOption }  }
/* Int8ListOption: Int8List->[]uintptr */ func MapUintptrArrToInt8ListOption(m Int8ListOption, f func(Int8List) []uintptr) UintptrArrOption {  if m.IsDefined() { return UintptrArrOpt(f(*m.value)) } else { return NoneUintptrArrOption }  }
/* Int8ListOption: Int8List->[]byte */ func MapByteArrToInt8ListOption(m Int8ListOption, f func(Int8List) []byte) ByteArrOption {  if m.IsDefined() { return ByteArrOpt(f(*m.value)) } else { return NoneByteArrOption }  }
/* Int8ListOption: Int8List->[]rune */ func MapRuneArrToInt8ListOption(m Int8ListOption, f func(Int8List) []rune) RuneArrOption {  if m.IsDefined() { return RuneArrOpt(f(*m.value)) } else { return NoneRuneArrOption }  }
/* Int8ListOption: Int8List->[]float32 */ func MapFloat32ArrToInt8ListOption(m Int8ListOption, f func(Int8List) []float32) Float32ArrOption {  if m.IsDefined() { return Float32ArrOpt(f(*m.value)) } else { return NoneFloat32ArrOption }  }
/* Int8ListOption: Int8List->[]float64 */ func MapFloat64ArrToInt8ListOption(m Int8ListOption, f func(Int8List) []float64) Float64ArrOption {  if m.IsDefined() { return Float64ArrOpt(f(*m.value)) } else { return NoneFloat64ArrOption }  }
/* Int8ListOption: Int8List->[]complex64 */ func MapComplex64ArrToInt8ListOption(m Int8ListOption, f func(Int8List) []complex64) Complex64ArrOption {  if m.IsDefined() { return Complex64ArrOpt(f(*m.value)) } else { return NoneComplex64ArrOption }  }
/* Int8ListOption: Int8List->[]complex128 */ func MapComplex128ArrToInt8ListOption(m Int8ListOption, f func(Int8List) []complex128) Complex128ArrOption {  if m.IsDefined() { return Complex128ArrOpt(f(*m.value)) } else { return NoneComplex128ArrOption }  }
/* Int8ListOption: Int8List->[]Any */ func MapAnyArrToInt8ListOption(m Int8ListOption, f func(Int8List) []Any) AnyArrOption {  if m.IsDefined() { return AnyArrOpt(f(*m.value)) } else { return NoneAnyArrOption }  }
/* Int8ListOption: Int8List->BoolList */ func MapBoolListToInt8ListOption(m Int8ListOption, f func(Int8List) BoolList) BoolListOption {  if m.IsDefined() { return BoolListOpt(f(*m.value)) } else { return NoneBoolListOption }  }
/* Int8ListOption: Int8List->StringList */ func MapStringListToInt8ListOption(m Int8ListOption, f func(Int8List) StringList) StringListOption {  if m.IsDefined() { return StringListOpt(f(*m.value)) } else { return NoneStringListOption }  }
/* Int8ListOption: Int8List->IntList */ func MapIntListToInt8ListOption(m Int8ListOption, f func(Int8List) IntList) IntListOption {  if m.IsDefined() { return IntListOpt(f(*m.value)) } else { return NoneIntListOption }  }
/* Int8ListOption: Int8List->Int8List */ func MapInt8ListToInt8ListOption(m Int8ListOption, f func(Int8List) Int8List) Int8ListOption {  if m.IsDefined() { return Int8ListOpt(f(*m.value)) } else { return NoneInt8ListOption }  }
/* Int8ListOption: Int8List->Int16List */ func MapInt16ListToInt8ListOption(m Int8ListOption, f func(Int8List) Int16List) Int16ListOption {  if m.IsDefined() { return Int16ListOpt(f(*m.value)) } else { return NoneInt16ListOption }  }
/* Int8ListOption: Int8List->Int32List */ func MapInt32ListToInt8ListOption(m Int8ListOption, f func(Int8List) Int32List) Int32ListOption {  if m.IsDefined() { return Int32ListOpt(f(*m.value)) } else { return NoneInt32ListOption }  }
/* Int8ListOption: Int8List->Int64List */ func MapInt64ListToInt8ListOption(m Int8ListOption, f func(Int8List) Int64List) Int64ListOption {  if m.IsDefined() { return Int64ListOpt(f(*m.value)) } else { return NoneInt64ListOption }  }
/* Int8ListOption: Int8List->UintList */ func MapUintListToInt8ListOption(m Int8ListOption, f func(Int8List) UintList) UintListOption {  if m.IsDefined() { return UintListOpt(f(*m.value)) } else { return NoneUintListOption }  }
/* Int8ListOption: Int8List->Uint8List */ func MapUint8ListToInt8ListOption(m Int8ListOption, f func(Int8List) Uint8List) Uint8ListOption {  if m.IsDefined() { return Uint8ListOpt(f(*m.value)) } else { return NoneUint8ListOption }  }
/* Int8ListOption: Int8List->Uint16List */ func MapUint16ListToInt8ListOption(m Int8ListOption, f func(Int8List) Uint16List) Uint16ListOption {  if m.IsDefined() { return Uint16ListOpt(f(*m.value)) } else { return NoneUint16ListOption }  }
/* Int8ListOption: Int8List->Uint32List */ func MapUint32ListToInt8ListOption(m Int8ListOption, f func(Int8List) Uint32List) Uint32ListOption {  if m.IsDefined() { return Uint32ListOpt(f(*m.value)) } else { return NoneUint32ListOption }  }
/* Int8ListOption: Int8List->Uint64List */ func MapUint64ListToInt8ListOption(m Int8ListOption, f func(Int8List) Uint64List) Uint64ListOption {  if m.IsDefined() { return Uint64ListOpt(f(*m.value)) } else { return NoneUint64ListOption }  }
/* Int8ListOption: Int8List->UintptrList */ func MapUintptrListToInt8ListOption(m Int8ListOption, f func(Int8List) UintptrList) UintptrListOption {  if m.IsDefined() { return UintptrListOpt(f(*m.value)) } else { return NoneUintptrListOption }  }
/* Int8ListOption: Int8List->ByteList */ func MapByteListToInt8ListOption(m Int8ListOption, f func(Int8List) ByteList) ByteListOption {  if m.IsDefined() { return ByteListOpt(f(*m.value)) } else { return NoneByteListOption }  }
/* Int8ListOption: Int8List->RuneList */ func MapRuneListToInt8ListOption(m Int8ListOption, f func(Int8List) RuneList) RuneListOption {  if m.IsDefined() { return RuneListOpt(f(*m.value)) } else { return NoneRuneListOption }  }
/* Int8ListOption: Int8List->Float32List */ func MapFloat32ListToInt8ListOption(m Int8ListOption, f func(Int8List) Float32List) Float32ListOption {  if m.IsDefined() { return Float32ListOpt(f(*m.value)) } else { return NoneFloat32ListOption }  }
/* Int8ListOption: Int8List->Float64List */ func MapFloat64ListToInt8ListOption(m Int8ListOption, f func(Int8List) Float64List) Float64ListOption {  if m.IsDefined() { return Float64ListOpt(f(*m.value)) } else { return NoneFloat64ListOption }  }
/* Int8ListOption: Int8List->Complex64List */ func MapComplex64ListToInt8ListOption(m Int8ListOption, f func(Int8List) Complex64List) Complex64ListOption {  if m.IsDefined() { return Complex64ListOpt(f(*m.value)) } else { return NoneComplex64ListOption }  }
/* Int8ListOption: Int8List->Complex128List */ func MapComplex128ListToInt8ListOption(m Int8ListOption, f func(Int8List) Complex128List) Complex128ListOption {  if m.IsDefined() { return Complex128ListOpt(f(*m.value)) } else { return NoneComplex128ListOption }  }
/* Int8ListOption: Int8List->AnyList */ func MapAnyListToInt8ListOption(m Int8ListOption, f func(Int8List) AnyList) AnyListOption {  if m.IsDefined() { return AnyListOpt(f(*m.value)) } else { return NoneAnyListOption }  }
/* Int16ListOption: Int16List->bool */ func MapBoolToInt16ListOption(m Int16ListOption, f func(Int16List) bool) BoolOption {  if m.IsDefined() { return Bool(f(*m.value)) } else { return NoneBoolOption }  }
/* Int16ListOption: Int16List->string */ func MapStringToInt16ListOption(m Int16ListOption, f func(Int16List) string) StringOption {  if m.IsDefined() { return String(f(*m.value)) } else { return NoneStringOption }  }
/* Int16ListOption: Int16List->int */ func MapIntToInt16ListOption(m Int16ListOption, f func(Int16List) int) IntOption {  if m.IsDefined() { return Int(f(*m.value)) } else { return NoneIntOption }  }
/* Int16ListOption: Int16List->int8 */ func MapInt8ToInt16ListOption(m Int16ListOption, f func(Int16List) int8) Int8Option {  if m.IsDefined() { return Int8(f(*m.value)) } else { return NoneInt8Option }  }
/* Int16ListOption: Int16List->int16 */ func MapInt16ToInt16ListOption(m Int16ListOption, f func(Int16List) int16) Int16Option {  if m.IsDefined() { return Int16(f(*m.value)) } else { return NoneInt16Option }  }
/* Int16ListOption: Int16List->int32 */ func MapInt32ToInt16ListOption(m Int16ListOption, f func(Int16List) int32) Int32Option {  if m.IsDefined() { return Int32(f(*m.value)) } else { return NoneInt32Option }  }
/* Int16ListOption: Int16List->int64 */ func MapInt64ToInt16ListOption(m Int16ListOption, f func(Int16List) int64) Int64Option {  if m.IsDefined() { return Int64(f(*m.value)) } else { return NoneInt64Option }  }
/* Int16ListOption: Int16List->uint */ func MapUintToInt16ListOption(m Int16ListOption, f func(Int16List) uint) UintOption {  if m.IsDefined() { return Uint(f(*m.value)) } else { return NoneUintOption }  }
/* Int16ListOption: Int16List->uint8 */ func MapUint8ToInt16ListOption(m Int16ListOption, f func(Int16List) uint8) Uint8Option {  if m.IsDefined() { return Uint8(f(*m.value)) } else { return NoneUint8Option }  }
/* Int16ListOption: Int16List->uint16 */ func MapUint16ToInt16ListOption(m Int16ListOption, f func(Int16List) uint16) Uint16Option {  if m.IsDefined() { return Uint16(f(*m.value)) } else { return NoneUint16Option }  }
/* Int16ListOption: Int16List->uint32 */ func MapUint32ToInt16ListOption(m Int16ListOption, f func(Int16List) uint32) Uint32Option {  if m.IsDefined() { return Uint32(f(*m.value)) } else { return NoneUint32Option }  }
/* Int16ListOption: Int16List->uint64 */ func MapUint64ToInt16ListOption(m Int16ListOption, f func(Int16List) uint64) Uint64Option {  if m.IsDefined() { return Uint64(f(*m.value)) } else { return NoneUint64Option }  }
/* Int16ListOption: Int16List->uintptr */ func MapUintptrToInt16ListOption(m Int16ListOption, f func(Int16List) uintptr) UintptrOption {  if m.IsDefined() { return Uintptr(f(*m.value)) } else { return NoneUintptrOption }  }
/* Int16ListOption: Int16List->byte */ func MapByteToInt16ListOption(m Int16ListOption, f func(Int16List) byte) ByteOption {  if m.IsDefined() { return Byte(f(*m.value)) } else { return NoneByteOption }  }
/* Int16ListOption: Int16List->rune */ func MapRuneToInt16ListOption(m Int16ListOption, f func(Int16List) rune) RuneOption {  if m.IsDefined() { return Rune(f(*m.value)) } else { return NoneRuneOption }  }
/* Int16ListOption: Int16List->float32 */ func MapFloat32ToInt16ListOption(m Int16ListOption, f func(Int16List) float32) Float32Option {  if m.IsDefined() { return Float32(f(*m.value)) } else { return NoneFloat32Option }  }
/* Int16ListOption: Int16List->float64 */ func MapFloat64ToInt16ListOption(m Int16ListOption, f func(Int16List) float64) Float64Option {  if m.IsDefined() { return Float64(f(*m.value)) } else { return NoneFloat64Option }  }
/* Int16ListOption: Int16List->complex64 */ func MapComplex64ToInt16ListOption(m Int16ListOption, f func(Int16List) complex64) Complex64Option {  if m.IsDefined() { return Complex64(f(*m.value)) } else { return NoneComplex64Option }  }
/* Int16ListOption: Int16List->complex128 */ func MapComplex128ToInt16ListOption(m Int16ListOption, f func(Int16List) complex128) Complex128Option {  if m.IsDefined() { return Complex128(f(*m.value)) } else { return NoneComplex128Option }  }
/* Int16ListOption: Int16List->Any */ func MapAnyToInt16ListOption(m Int16ListOption, f func(Int16List) Any) AnyOption {  if m.IsDefined() { return AnyOpt(f(*m.value)) } else { return NoneAnyOption }  }
/* Int16ListOption: Int16List->BoolOption */ func MapBoolOptionToInt16ListOption(m Int16ListOption, f func(Int16List) BoolOption) BoolOptionOption {  if m.IsDefined() { return BoolBool(f(*m.value)) } else { return NoneBoolOptionOption }  }
/* Int16ListOption: Int16List->StringOption */ func MapStringOptionToInt16ListOption(m Int16ListOption, f func(Int16List) StringOption) StringOptionOption {  if m.IsDefined() { return StringString(f(*m.value)) } else { return NoneStringOptionOption }  }
/* Int16ListOption: Int16List->IntOption */ func MapIntOptionToInt16ListOption(m Int16ListOption, f func(Int16List) IntOption) IntOptionOption {  if m.IsDefined() { return IntInt(f(*m.value)) } else { return NoneIntOptionOption }  }
/* Int16ListOption: Int16List->Int8Option */ func MapInt8OptionToInt16ListOption(m Int16ListOption, f func(Int16List) Int8Option) Int8OptionOption {  if m.IsDefined() { return Int8Int8(f(*m.value)) } else { return NoneInt8OptionOption }  }
/* Int16ListOption: Int16List->Int16Option */ func MapInt16OptionToInt16ListOption(m Int16ListOption, f func(Int16List) Int16Option) Int16OptionOption {  if m.IsDefined() { return Int16Int16(f(*m.value)) } else { return NoneInt16OptionOption }  }
/* Int16ListOption: Int16List->Int32Option */ func MapInt32OptionToInt16ListOption(m Int16ListOption, f func(Int16List) Int32Option) Int32OptionOption {  if m.IsDefined() { return Int32Int32(f(*m.value)) } else { return NoneInt32OptionOption }  }
/* Int16ListOption: Int16List->Int64Option */ func MapInt64OptionToInt16ListOption(m Int16ListOption, f func(Int16List) Int64Option) Int64OptionOption {  if m.IsDefined() { return Int64Int64(f(*m.value)) } else { return NoneInt64OptionOption }  }
/* Int16ListOption: Int16List->UintOption */ func MapUintOptionToInt16ListOption(m Int16ListOption, f func(Int16List) UintOption) UintOptionOption {  if m.IsDefined() { return UintUint(f(*m.value)) } else { return NoneUintOptionOption }  }
/* Int16ListOption: Int16List->Uint8Option */ func MapUint8OptionToInt16ListOption(m Int16ListOption, f func(Int16List) Uint8Option) Uint8OptionOption {  if m.IsDefined() { return Uint8Uint8(f(*m.value)) } else { return NoneUint8OptionOption }  }
/* Int16ListOption: Int16List->Uint16Option */ func MapUint16OptionToInt16ListOption(m Int16ListOption, f func(Int16List) Uint16Option) Uint16OptionOption {  if m.IsDefined() { return Uint16Uint16(f(*m.value)) } else { return NoneUint16OptionOption }  }
/* Int16ListOption: Int16List->Uint32Option */ func MapUint32OptionToInt16ListOption(m Int16ListOption, f func(Int16List) Uint32Option) Uint32OptionOption {  if m.IsDefined() { return Uint32Uint32(f(*m.value)) } else { return NoneUint32OptionOption }  }
/* Int16ListOption: Int16List->Uint64Option */ func MapUint64OptionToInt16ListOption(m Int16ListOption, f func(Int16List) Uint64Option) Uint64OptionOption {  if m.IsDefined() { return Uint64Uint64(f(*m.value)) } else { return NoneUint64OptionOption }  }
/* Int16ListOption: Int16List->UintptrOption */ func MapUintptrOptionToInt16ListOption(m Int16ListOption, f func(Int16List) UintptrOption) UintptrOptionOption {  if m.IsDefined() { return UintptrUintptr(f(*m.value)) } else { return NoneUintptrOptionOption }  }
/* Int16ListOption: Int16List->ByteOption */ func MapByteOptionToInt16ListOption(m Int16ListOption, f func(Int16List) ByteOption) ByteOptionOption {  if m.IsDefined() { return ByteByte(f(*m.value)) } else { return NoneByteOptionOption }  }
/* Int16ListOption: Int16List->RuneOption */ func MapRuneOptionToInt16ListOption(m Int16ListOption, f func(Int16List) RuneOption) RuneOptionOption {  if m.IsDefined() { return RuneRune(f(*m.value)) } else { return NoneRuneOptionOption }  }
/* Int16ListOption: Int16List->Float32Option */ func MapFloat32OptionToInt16ListOption(m Int16ListOption, f func(Int16List) Float32Option) Float32OptionOption {  if m.IsDefined() { return Float32Float32(f(*m.value)) } else { return NoneFloat32OptionOption }  }
/* Int16ListOption: Int16List->Float64Option */ func MapFloat64OptionToInt16ListOption(m Int16ListOption, f func(Int16List) Float64Option) Float64OptionOption {  if m.IsDefined() { return Float64Float64(f(*m.value)) } else { return NoneFloat64OptionOption }  }
/* Int16ListOption: Int16List->Complex64Option */ func MapComplex64OptionToInt16ListOption(m Int16ListOption, f func(Int16List) Complex64Option) Complex64OptionOption {  if m.IsDefined() { return Complex64Complex64(f(*m.value)) } else { return NoneComplex64OptionOption }  }
/* Int16ListOption: Int16List->Complex128Option */ func MapComplex128OptionToInt16ListOption(m Int16ListOption, f func(Int16List) Complex128Option) Complex128OptionOption {  if m.IsDefined() { return Complex128Complex128(f(*m.value)) } else { return NoneComplex128OptionOption }  }
/* Int16ListOption: Int16List->AnyOption */ func MapAnyOptionToInt16ListOption(m Int16ListOption, f func(Int16List) AnyOption) AnyOptionOption {  if m.IsDefined() { return AnyOptAny(f(*m.value)) } else { return NoneAnyOptionOption }  }
/* Int16ListOption: Int16List->[]bool */ func MapBoolArrToInt16ListOption(m Int16ListOption, f func(Int16List) []bool) BoolArrOption {  if m.IsDefined() { return BoolArrOpt(f(*m.value)) } else { return NoneBoolArrOption }  }
/* Int16ListOption: Int16List->[]string */ func MapStringArrToInt16ListOption(m Int16ListOption, f func(Int16List) []string) StringArrOption {  if m.IsDefined() { return StringArrOpt(f(*m.value)) } else { return NoneStringArrOption }  }
/* Int16ListOption: Int16List->[]int */ func MapIntArrToInt16ListOption(m Int16ListOption, f func(Int16List) []int) IntArrOption {  if m.IsDefined() { return IntArrOpt(f(*m.value)) } else { return NoneIntArrOption }  }
/* Int16ListOption: Int16List->[]int8 */ func MapInt8ArrToInt16ListOption(m Int16ListOption, f func(Int16List) []int8) Int8ArrOption {  if m.IsDefined() { return Int8ArrOpt(f(*m.value)) } else { return NoneInt8ArrOption }  }
/* Int16ListOption: Int16List->[]int16 */ func MapInt16ArrToInt16ListOption(m Int16ListOption, f func(Int16List) []int16) Int16ArrOption {  if m.IsDefined() { return Int16ArrOpt(f(*m.value)) } else { return NoneInt16ArrOption }  }
/* Int16ListOption: Int16List->[]int32 */ func MapInt32ArrToInt16ListOption(m Int16ListOption, f func(Int16List) []int32) Int32ArrOption {  if m.IsDefined() { return Int32ArrOpt(f(*m.value)) } else { return NoneInt32ArrOption }  }
/* Int16ListOption: Int16List->[]int64 */ func MapInt64ArrToInt16ListOption(m Int16ListOption, f func(Int16List) []int64) Int64ArrOption {  if m.IsDefined() { return Int64ArrOpt(f(*m.value)) } else { return NoneInt64ArrOption }  }
/* Int16ListOption: Int16List->[]uint */ func MapUintArrToInt16ListOption(m Int16ListOption, f func(Int16List) []uint) UintArrOption {  if m.IsDefined() { return UintArrOpt(f(*m.value)) } else { return NoneUintArrOption }  }
/* Int16ListOption: Int16List->[]uint8 */ func MapUint8ArrToInt16ListOption(m Int16ListOption, f func(Int16List) []uint8) Uint8ArrOption {  if m.IsDefined() { return Uint8ArrOpt(f(*m.value)) } else { return NoneUint8ArrOption }  }
/* Int16ListOption: Int16List->[]uint16 */ func MapUint16ArrToInt16ListOption(m Int16ListOption, f func(Int16List) []uint16) Uint16ArrOption {  if m.IsDefined() { return Uint16ArrOpt(f(*m.value)) } else { return NoneUint16ArrOption }  }
/* Int16ListOption: Int16List->[]uint32 */ func MapUint32ArrToInt16ListOption(m Int16ListOption, f func(Int16List) []uint32) Uint32ArrOption {  if m.IsDefined() { return Uint32ArrOpt(f(*m.value)) } else { return NoneUint32ArrOption }  }
/* Int16ListOption: Int16List->[]uint64 */ func MapUint64ArrToInt16ListOption(m Int16ListOption, f func(Int16List) []uint64) Uint64ArrOption {  if m.IsDefined() { return Uint64ArrOpt(f(*m.value)) } else { return NoneUint64ArrOption }  }
/* Int16ListOption: Int16List->[]uintptr */ func MapUintptrArrToInt16ListOption(m Int16ListOption, f func(Int16List) []uintptr) UintptrArrOption {  if m.IsDefined() { return UintptrArrOpt(f(*m.value)) } else { return NoneUintptrArrOption }  }
/* Int16ListOption: Int16List->[]byte */ func MapByteArrToInt16ListOption(m Int16ListOption, f func(Int16List) []byte) ByteArrOption {  if m.IsDefined() { return ByteArrOpt(f(*m.value)) } else { return NoneByteArrOption }  }
/* Int16ListOption: Int16List->[]rune */ func MapRuneArrToInt16ListOption(m Int16ListOption, f func(Int16List) []rune) RuneArrOption {  if m.IsDefined() { return RuneArrOpt(f(*m.value)) } else { return NoneRuneArrOption }  }
/* Int16ListOption: Int16List->[]float32 */ func MapFloat32ArrToInt16ListOption(m Int16ListOption, f func(Int16List) []float32) Float32ArrOption {  if m.IsDefined() { return Float32ArrOpt(f(*m.value)) } else { return NoneFloat32ArrOption }  }
/* Int16ListOption: Int16List->[]float64 */ func MapFloat64ArrToInt16ListOption(m Int16ListOption, f func(Int16List) []float64) Float64ArrOption {  if m.IsDefined() { return Float64ArrOpt(f(*m.value)) } else { return NoneFloat64ArrOption }  }
/* Int16ListOption: Int16List->[]complex64 */ func MapComplex64ArrToInt16ListOption(m Int16ListOption, f func(Int16List) []complex64) Complex64ArrOption {  if m.IsDefined() { return Complex64ArrOpt(f(*m.value)) } else { return NoneComplex64ArrOption }  }
/* Int16ListOption: Int16List->[]complex128 */ func MapComplex128ArrToInt16ListOption(m Int16ListOption, f func(Int16List) []complex128) Complex128ArrOption {  if m.IsDefined() { return Complex128ArrOpt(f(*m.value)) } else { return NoneComplex128ArrOption }  }
/* Int16ListOption: Int16List->[]Any */ func MapAnyArrToInt16ListOption(m Int16ListOption, f func(Int16List) []Any) AnyArrOption {  if m.IsDefined() { return AnyArrOpt(f(*m.value)) } else { return NoneAnyArrOption }  }
/* Int16ListOption: Int16List->BoolList */ func MapBoolListToInt16ListOption(m Int16ListOption, f func(Int16List) BoolList) BoolListOption {  if m.IsDefined() { return BoolListOpt(f(*m.value)) } else { return NoneBoolListOption }  }
/* Int16ListOption: Int16List->StringList */ func MapStringListToInt16ListOption(m Int16ListOption, f func(Int16List) StringList) StringListOption {  if m.IsDefined() { return StringListOpt(f(*m.value)) } else { return NoneStringListOption }  }
/* Int16ListOption: Int16List->IntList */ func MapIntListToInt16ListOption(m Int16ListOption, f func(Int16List) IntList) IntListOption {  if m.IsDefined() { return IntListOpt(f(*m.value)) } else { return NoneIntListOption }  }
/* Int16ListOption: Int16List->Int8List */ func MapInt8ListToInt16ListOption(m Int16ListOption, f func(Int16List) Int8List) Int8ListOption {  if m.IsDefined() { return Int8ListOpt(f(*m.value)) } else { return NoneInt8ListOption }  }
/* Int16ListOption: Int16List->Int16List */ func MapInt16ListToInt16ListOption(m Int16ListOption, f func(Int16List) Int16List) Int16ListOption {  if m.IsDefined() { return Int16ListOpt(f(*m.value)) } else { return NoneInt16ListOption }  }
/* Int16ListOption: Int16List->Int32List */ func MapInt32ListToInt16ListOption(m Int16ListOption, f func(Int16List) Int32List) Int32ListOption {  if m.IsDefined() { return Int32ListOpt(f(*m.value)) } else { return NoneInt32ListOption }  }
/* Int16ListOption: Int16List->Int64List */ func MapInt64ListToInt16ListOption(m Int16ListOption, f func(Int16List) Int64List) Int64ListOption {  if m.IsDefined() { return Int64ListOpt(f(*m.value)) } else { return NoneInt64ListOption }  }
/* Int16ListOption: Int16List->UintList */ func MapUintListToInt16ListOption(m Int16ListOption, f func(Int16List) UintList) UintListOption {  if m.IsDefined() { return UintListOpt(f(*m.value)) } else { return NoneUintListOption }  }
/* Int16ListOption: Int16List->Uint8List */ func MapUint8ListToInt16ListOption(m Int16ListOption, f func(Int16List) Uint8List) Uint8ListOption {  if m.IsDefined() { return Uint8ListOpt(f(*m.value)) } else { return NoneUint8ListOption }  }
/* Int16ListOption: Int16List->Uint16List */ func MapUint16ListToInt16ListOption(m Int16ListOption, f func(Int16List) Uint16List) Uint16ListOption {  if m.IsDefined() { return Uint16ListOpt(f(*m.value)) } else { return NoneUint16ListOption }  }
/* Int16ListOption: Int16List->Uint32List */ func MapUint32ListToInt16ListOption(m Int16ListOption, f func(Int16List) Uint32List) Uint32ListOption {  if m.IsDefined() { return Uint32ListOpt(f(*m.value)) } else { return NoneUint32ListOption }  }
/* Int16ListOption: Int16List->Uint64List */ func MapUint64ListToInt16ListOption(m Int16ListOption, f func(Int16List) Uint64List) Uint64ListOption {  if m.IsDefined() { return Uint64ListOpt(f(*m.value)) } else { return NoneUint64ListOption }  }
/* Int16ListOption: Int16List->UintptrList */ func MapUintptrListToInt16ListOption(m Int16ListOption, f func(Int16List) UintptrList) UintptrListOption {  if m.IsDefined() { return UintptrListOpt(f(*m.value)) } else { return NoneUintptrListOption }  }
/* Int16ListOption: Int16List->ByteList */ func MapByteListToInt16ListOption(m Int16ListOption, f func(Int16List) ByteList) ByteListOption {  if m.IsDefined() { return ByteListOpt(f(*m.value)) } else { return NoneByteListOption }  }
/* Int16ListOption: Int16List->RuneList */ func MapRuneListToInt16ListOption(m Int16ListOption, f func(Int16List) RuneList) RuneListOption {  if m.IsDefined() { return RuneListOpt(f(*m.value)) } else { return NoneRuneListOption }  }
/* Int16ListOption: Int16List->Float32List */ func MapFloat32ListToInt16ListOption(m Int16ListOption, f func(Int16List) Float32List) Float32ListOption {  if m.IsDefined() { return Float32ListOpt(f(*m.value)) } else { return NoneFloat32ListOption }  }
/* Int16ListOption: Int16List->Float64List */ func MapFloat64ListToInt16ListOption(m Int16ListOption, f func(Int16List) Float64List) Float64ListOption {  if m.IsDefined() { return Float64ListOpt(f(*m.value)) } else { return NoneFloat64ListOption }  }
/* Int16ListOption: Int16List->Complex64List */ func MapComplex64ListToInt16ListOption(m Int16ListOption, f func(Int16List) Complex64List) Complex64ListOption {  if m.IsDefined() { return Complex64ListOpt(f(*m.value)) } else { return NoneComplex64ListOption }  }
/* Int16ListOption: Int16List->Complex128List */ func MapComplex128ListToInt16ListOption(m Int16ListOption, f func(Int16List) Complex128List) Complex128ListOption {  if m.IsDefined() { return Complex128ListOpt(f(*m.value)) } else { return NoneComplex128ListOption }  }
/* Int16ListOption: Int16List->AnyList */ func MapAnyListToInt16ListOption(m Int16ListOption, f func(Int16List) AnyList) AnyListOption {  if m.IsDefined() { return AnyListOpt(f(*m.value)) } else { return NoneAnyListOption }  }
/* Int32ListOption: Int32List->bool */ func MapBoolToInt32ListOption(m Int32ListOption, f func(Int32List) bool) BoolOption {  if m.IsDefined() { return Bool(f(*m.value)) } else { return NoneBoolOption }  }
/* Int32ListOption: Int32List->string */ func MapStringToInt32ListOption(m Int32ListOption, f func(Int32List) string) StringOption {  if m.IsDefined() { return String(f(*m.value)) } else { return NoneStringOption }  }
/* Int32ListOption: Int32List->int */ func MapIntToInt32ListOption(m Int32ListOption, f func(Int32List) int) IntOption {  if m.IsDefined() { return Int(f(*m.value)) } else { return NoneIntOption }  }
/* Int32ListOption: Int32List->int8 */ func MapInt8ToInt32ListOption(m Int32ListOption, f func(Int32List) int8) Int8Option {  if m.IsDefined() { return Int8(f(*m.value)) } else { return NoneInt8Option }  }
/* Int32ListOption: Int32List->int16 */ func MapInt16ToInt32ListOption(m Int32ListOption, f func(Int32List) int16) Int16Option {  if m.IsDefined() { return Int16(f(*m.value)) } else { return NoneInt16Option }  }
/* Int32ListOption: Int32List->int32 */ func MapInt32ToInt32ListOption(m Int32ListOption, f func(Int32List) int32) Int32Option {  if m.IsDefined() { return Int32(f(*m.value)) } else { return NoneInt32Option }  }
/* Int32ListOption: Int32List->int64 */ func MapInt64ToInt32ListOption(m Int32ListOption, f func(Int32List) int64) Int64Option {  if m.IsDefined() { return Int64(f(*m.value)) } else { return NoneInt64Option }  }
/* Int32ListOption: Int32List->uint */ func MapUintToInt32ListOption(m Int32ListOption, f func(Int32List) uint) UintOption {  if m.IsDefined() { return Uint(f(*m.value)) } else { return NoneUintOption }  }
/* Int32ListOption: Int32List->uint8 */ func MapUint8ToInt32ListOption(m Int32ListOption, f func(Int32List) uint8) Uint8Option {  if m.IsDefined() { return Uint8(f(*m.value)) } else { return NoneUint8Option }  }
/* Int32ListOption: Int32List->uint16 */ func MapUint16ToInt32ListOption(m Int32ListOption, f func(Int32List) uint16) Uint16Option {  if m.IsDefined() { return Uint16(f(*m.value)) } else { return NoneUint16Option }  }
/* Int32ListOption: Int32List->uint32 */ func MapUint32ToInt32ListOption(m Int32ListOption, f func(Int32List) uint32) Uint32Option {  if m.IsDefined() { return Uint32(f(*m.value)) } else { return NoneUint32Option }  }
/* Int32ListOption: Int32List->uint64 */ func MapUint64ToInt32ListOption(m Int32ListOption, f func(Int32List) uint64) Uint64Option {  if m.IsDefined() { return Uint64(f(*m.value)) } else { return NoneUint64Option }  }
/* Int32ListOption: Int32List->uintptr */ func MapUintptrToInt32ListOption(m Int32ListOption, f func(Int32List) uintptr) UintptrOption {  if m.IsDefined() { return Uintptr(f(*m.value)) } else { return NoneUintptrOption }  }
/* Int32ListOption: Int32List->byte */ func MapByteToInt32ListOption(m Int32ListOption, f func(Int32List) byte) ByteOption {  if m.IsDefined() { return Byte(f(*m.value)) } else { return NoneByteOption }  }
/* Int32ListOption: Int32List->rune */ func MapRuneToInt32ListOption(m Int32ListOption, f func(Int32List) rune) RuneOption {  if m.IsDefined() { return Rune(f(*m.value)) } else { return NoneRuneOption }  }
/* Int32ListOption: Int32List->float32 */ func MapFloat32ToInt32ListOption(m Int32ListOption, f func(Int32List) float32) Float32Option {  if m.IsDefined() { return Float32(f(*m.value)) } else { return NoneFloat32Option }  }
/* Int32ListOption: Int32List->float64 */ func MapFloat64ToInt32ListOption(m Int32ListOption, f func(Int32List) float64) Float64Option {  if m.IsDefined() { return Float64(f(*m.value)) } else { return NoneFloat64Option }  }
/* Int32ListOption: Int32List->complex64 */ func MapComplex64ToInt32ListOption(m Int32ListOption, f func(Int32List) complex64) Complex64Option {  if m.IsDefined() { return Complex64(f(*m.value)) } else { return NoneComplex64Option }  }
/* Int32ListOption: Int32List->complex128 */ func MapComplex128ToInt32ListOption(m Int32ListOption, f func(Int32List) complex128) Complex128Option {  if m.IsDefined() { return Complex128(f(*m.value)) } else { return NoneComplex128Option }  }
/* Int32ListOption: Int32List->Any */ func MapAnyToInt32ListOption(m Int32ListOption, f func(Int32List) Any) AnyOption {  if m.IsDefined() { return AnyOpt(f(*m.value)) } else { return NoneAnyOption }  }
/* Int32ListOption: Int32List->BoolOption */ func MapBoolOptionToInt32ListOption(m Int32ListOption, f func(Int32List) BoolOption) BoolOptionOption {  if m.IsDefined() { return BoolBool(f(*m.value)) } else { return NoneBoolOptionOption }  }
/* Int32ListOption: Int32List->StringOption */ func MapStringOptionToInt32ListOption(m Int32ListOption, f func(Int32List) StringOption) StringOptionOption {  if m.IsDefined() { return StringString(f(*m.value)) } else { return NoneStringOptionOption }  }
/* Int32ListOption: Int32List->IntOption */ func MapIntOptionToInt32ListOption(m Int32ListOption, f func(Int32List) IntOption) IntOptionOption {  if m.IsDefined() { return IntInt(f(*m.value)) } else { return NoneIntOptionOption }  }
/* Int32ListOption: Int32List->Int8Option */ func MapInt8OptionToInt32ListOption(m Int32ListOption, f func(Int32List) Int8Option) Int8OptionOption {  if m.IsDefined() { return Int8Int8(f(*m.value)) } else { return NoneInt8OptionOption }  }
/* Int32ListOption: Int32List->Int16Option */ func MapInt16OptionToInt32ListOption(m Int32ListOption, f func(Int32List) Int16Option) Int16OptionOption {  if m.IsDefined() { return Int16Int16(f(*m.value)) } else { return NoneInt16OptionOption }  }
/* Int32ListOption: Int32List->Int32Option */ func MapInt32OptionToInt32ListOption(m Int32ListOption, f func(Int32List) Int32Option) Int32OptionOption {  if m.IsDefined() { return Int32Int32(f(*m.value)) } else { return NoneInt32OptionOption }  }
/* Int32ListOption: Int32List->Int64Option */ func MapInt64OptionToInt32ListOption(m Int32ListOption, f func(Int32List) Int64Option) Int64OptionOption {  if m.IsDefined() { return Int64Int64(f(*m.value)) } else { return NoneInt64OptionOption }  }
/* Int32ListOption: Int32List->UintOption */ func MapUintOptionToInt32ListOption(m Int32ListOption, f func(Int32List) UintOption) UintOptionOption {  if m.IsDefined() { return UintUint(f(*m.value)) } else { return NoneUintOptionOption }  }
/* Int32ListOption: Int32List->Uint8Option */ func MapUint8OptionToInt32ListOption(m Int32ListOption, f func(Int32List) Uint8Option) Uint8OptionOption {  if m.IsDefined() { return Uint8Uint8(f(*m.value)) } else { return NoneUint8OptionOption }  }
/* Int32ListOption: Int32List->Uint16Option */ func MapUint16OptionToInt32ListOption(m Int32ListOption, f func(Int32List) Uint16Option) Uint16OptionOption {  if m.IsDefined() { return Uint16Uint16(f(*m.value)) } else { return NoneUint16OptionOption }  }
/* Int32ListOption: Int32List->Uint32Option */ func MapUint32OptionToInt32ListOption(m Int32ListOption, f func(Int32List) Uint32Option) Uint32OptionOption {  if m.IsDefined() { return Uint32Uint32(f(*m.value)) } else { return NoneUint32OptionOption }  }
/* Int32ListOption: Int32List->Uint64Option */ func MapUint64OptionToInt32ListOption(m Int32ListOption, f func(Int32List) Uint64Option) Uint64OptionOption {  if m.IsDefined() { return Uint64Uint64(f(*m.value)) } else { return NoneUint64OptionOption }  }
/* Int32ListOption: Int32List->UintptrOption */ func MapUintptrOptionToInt32ListOption(m Int32ListOption, f func(Int32List) UintptrOption) UintptrOptionOption {  if m.IsDefined() { return UintptrUintptr(f(*m.value)) } else { return NoneUintptrOptionOption }  }
/* Int32ListOption: Int32List->ByteOption */ func MapByteOptionToInt32ListOption(m Int32ListOption, f func(Int32List) ByteOption) ByteOptionOption {  if m.IsDefined() { return ByteByte(f(*m.value)) } else { return NoneByteOptionOption }  }
/* Int32ListOption: Int32List->RuneOption */ func MapRuneOptionToInt32ListOption(m Int32ListOption, f func(Int32List) RuneOption) RuneOptionOption {  if m.IsDefined() { return RuneRune(f(*m.value)) } else { return NoneRuneOptionOption }  }
/* Int32ListOption: Int32List->Float32Option */ func MapFloat32OptionToInt32ListOption(m Int32ListOption, f func(Int32List) Float32Option) Float32OptionOption {  if m.IsDefined() { return Float32Float32(f(*m.value)) } else { return NoneFloat32OptionOption }  }
/* Int32ListOption: Int32List->Float64Option */ func MapFloat64OptionToInt32ListOption(m Int32ListOption, f func(Int32List) Float64Option) Float64OptionOption {  if m.IsDefined() { return Float64Float64(f(*m.value)) } else { return NoneFloat64OptionOption }  }
/* Int32ListOption: Int32List->Complex64Option */ func MapComplex64OptionToInt32ListOption(m Int32ListOption, f func(Int32List) Complex64Option) Complex64OptionOption {  if m.IsDefined() { return Complex64Complex64(f(*m.value)) } else { return NoneComplex64OptionOption }  }
/* Int32ListOption: Int32List->Complex128Option */ func MapComplex128OptionToInt32ListOption(m Int32ListOption, f func(Int32List) Complex128Option) Complex128OptionOption {  if m.IsDefined() { return Complex128Complex128(f(*m.value)) } else { return NoneComplex128OptionOption }  }
/* Int32ListOption: Int32List->AnyOption */ func MapAnyOptionToInt32ListOption(m Int32ListOption, f func(Int32List) AnyOption) AnyOptionOption {  if m.IsDefined() { return AnyOptAny(f(*m.value)) } else { return NoneAnyOptionOption }  }
/* Int32ListOption: Int32List->[]bool */ func MapBoolArrToInt32ListOption(m Int32ListOption, f func(Int32List) []bool) BoolArrOption {  if m.IsDefined() { return BoolArrOpt(f(*m.value)) } else { return NoneBoolArrOption }  }
/* Int32ListOption: Int32List->[]string */ func MapStringArrToInt32ListOption(m Int32ListOption, f func(Int32List) []string) StringArrOption {  if m.IsDefined() { return StringArrOpt(f(*m.value)) } else { return NoneStringArrOption }  }
/* Int32ListOption: Int32List->[]int */ func MapIntArrToInt32ListOption(m Int32ListOption, f func(Int32List) []int) IntArrOption {  if m.IsDefined() { return IntArrOpt(f(*m.value)) } else { return NoneIntArrOption }  }
/* Int32ListOption: Int32List->[]int8 */ func MapInt8ArrToInt32ListOption(m Int32ListOption, f func(Int32List) []int8) Int8ArrOption {  if m.IsDefined() { return Int8ArrOpt(f(*m.value)) } else { return NoneInt8ArrOption }  }
/* Int32ListOption: Int32List->[]int16 */ func MapInt16ArrToInt32ListOption(m Int32ListOption, f func(Int32List) []int16) Int16ArrOption {  if m.IsDefined() { return Int16ArrOpt(f(*m.value)) } else { return NoneInt16ArrOption }  }
/* Int32ListOption: Int32List->[]int32 */ func MapInt32ArrToInt32ListOption(m Int32ListOption, f func(Int32List) []int32) Int32ArrOption {  if m.IsDefined() { return Int32ArrOpt(f(*m.value)) } else { return NoneInt32ArrOption }  }
/* Int32ListOption: Int32List->[]int64 */ func MapInt64ArrToInt32ListOption(m Int32ListOption, f func(Int32List) []int64) Int64ArrOption {  if m.IsDefined() { return Int64ArrOpt(f(*m.value)) } else { return NoneInt64ArrOption }  }
/* Int32ListOption: Int32List->[]uint */ func MapUintArrToInt32ListOption(m Int32ListOption, f func(Int32List) []uint) UintArrOption {  if m.IsDefined() { return UintArrOpt(f(*m.value)) } else { return NoneUintArrOption }  }
/* Int32ListOption: Int32List->[]uint8 */ func MapUint8ArrToInt32ListOption(m Int32ListOption, f func(Int32List) []uint8) Uint8ArrOption {  if m.IsDefined() { return Uint8ArrOpt(f(*m.value)) } else { return NoneUint8ArrOption }  }
/* Int32ListOption: Int32List->[]uint16 */ func MapUint16ArrToInt32ListOption(m Int32ListOption, f func(Int32List) []uint16) Uint16ArrOption {  if m.IsDefined() { return Uint16ArrOpt(f(*m.value)) } else { return NoneUint16ArrOption }  }
/* Int32ListOption: Int32List->[]uint32 */ func MapUint32ArrToInt32ListOption(m Int32ListOption, f func(Int32List) []uint32) Uint32ArrOption {  if m.IsDefined() { return Uint32ArrOpt(f(*m.value)) } else { return NoneUint32ArrOption }  }
/* Int32ListOption: Int32List->[]uint64 */ func MapUint64ArrToInt32ListOption(m Int32ListOption, f func(Int32List) []uint64) Uint64ArrOption {  if m.IsDefined() { return Uint64ArrOpt(f(*m.value)) } else { return NoneUint64ArrOption }  }
/* Int32ListOption: Int32List->[]uintptr */ func MapUintptrArrToInt32ListOption(m Int32ListOption, f func(Int32List) []uintptr) UintptrArrOption {  if m.IsDefined() { return UintptrArrOpt(f(*m.value)) } else { return NoneUintptrArrOption }  }
/* Int32ListOption: Int32List->[]byte */ func MapByteArrToInt32ListOption(m Int32ListOption, f func(Int32List) []byte) ByteArrOption {  if m.IsDefined() { return ByteArrOpt(f(*m.value)) } else { return NoneByteArrOption }  }
/* Int32ListOption: Int32List->[]rune */ func MapRuneArrToInt32ListOption(m Int32ListOption, f func(Int32List) []rune) RuneArrOption {  if m.IsDefined() { return RuneArrOpt(f(*m.value)) } else { return NoneRuneArrOption }  }
/* Int32ListOption: Int32List->[]float32 */ func MapFloat32ArrToInt32ListOption(m Int32ListOption, f func(Int32List) []float32) Float32ArrOption {  if m.IsDefined() { return Float32ArrOpt(f(*m.value)) } else { return NoneFloat32ArrOption }  }
/* Int32ListOption: Int32List->[]float64 */ func MapFloat64ArrToInt32ListOption(m Int32ListOption, f func(Int32List) []float64) Float64ArrOption {  if m.IsDefined() { return Float64ArrOpt(f(*m.value)) } else { return NoneFloat64ArrOption }  }
/* Int32ListOption: Int32List->[]complex64 */ func MapComplex64ArrToInt32ListOption(m Int32ListOption, f func(Int32List) []complex64) Complex64ArrOption {  if m.IsDefined() { return Complex64ArrOpt(f(*m.value)) } else { return NoneComplex64ArrOption }  }
/* Int32ListOption: Int32List->[]complex128 */ func MapComplex128ArrToInt32ListOption(m Int32ListOption, f func(Int32List) []complex128) Complex128ArrOption {  if m.IsDefined() { return Complex128ArrOpt(f(*m.value)) } else { return NoneComplex128ArrOption }  }
/* Int32ListOption: Int32List->[]Any */ func MapAnyArrToInt32ListOption(m Int32ListOption, f func(Int32List) []Any) AnyArrOption {  if m.IsDefined() { return AnyArrOpt(f(*m.value)) } else { return NoneAnyArrOption }  }
/* Int32ListOption: Int32List->BoolList */ func MapBoolListToInt32ListOption(m Int32ListOption, f func(Int32List) BoolList) BoolListOption {  if m.IsDefined() { return BoolListOpt(f(*m.value)) } else { return NoneBoolListOption }  }
/* Int32ListOption: Int32List->StringList */ func MapStringListToInt32ListOption(m Int32ListOption, f func(Int32List) StringList) StringListOption {  if m.IsDefined() { return StringListOpt(f(*m.value)) } else { return NoneStringListOption }  }
/* Int32ListOption: Int32List->IntList */ func MapIntListToInt32ListOption(m Int32ListOption, f func(Int32List) IntList) IntListOption {  if m.IsDefined() { return IntListOpt(f(*m.value)) } else { return NoneIntListOption }  }
/* Int32ListOption: Int32List->Int8List */ func MapInt8ListToInt32ListOption(m Int32ListOption, f func(Int32List) Int8List) Int8ListOption {  if m.IsDefined() { return Int8ListOpt(f(*m.value)) } else { return NoneInt8ListOption }  }
/* Int32ListOption: Int32List->Int16List */ func MapInt16ListToInt32ListOption(m Int32ListOption, f func(Int32List) Int16List) Int16ListOption {  if m.IsDefined() { return Int16ListOpt(f(*m.value)) } else { return NoneInt16ListOption }  }
/* Int32ListOption: Int32List->Int32List */ func MapInt32ListToInt32ListOption(m Int32ListOption, f func(Int32List) Int32List) Int32ListOption {  if m.IsDefined() { return Int32ListOpt(f(*m.value)) } else { return NoneInt32ListOption }  }
/* Int32ListOption: Int32List->Int64List */ func MapInt64ListToInt32ListOption(m Int32ListOption, f func(Int32List) Int64List) Int64ListOption {  if m.IsDefined() { return Int64ListOpt(f(*m.value)) } else { return NoneInt64ListOption }  }
/* Int32ListOption: Int32List->UintList */ func MapUintListToInt32ListOption(m Int32ListOption, f func(Int32List) UintList) UintListOption {  if m.IsDefined() { return UintListOpt(f(*m.value)) } else { return NoneUintListOption }  }
/* Int32ListOption: Int32List->Uint8List */ func MapUint8ListToInt32ListOption(m Int32ListOption, f func(Int32List) Uint8List) Uint8ListOption {  if m.IsDefined() { return Uint8ListOpt(f(*m.value)) } else { return NoneUint8ListOption }  }
/* Int32ListOption: Int32List->Uint16List */ func MapUint16ListToInt32ListOption(m Int32ListOption, f func(Int32List) Uint16List) Uint16ListOption {  if m.IsDefined() { return Uint16ListOpt(f(*m.value)) } else { return NoneUint16ListOption }  }
/* Int32ListOption: Int32List->Uint32List */ func MapUint32ListToInt32ListOption(m Int32ListOption, f func(Int32List) Uint32List) Uint32ListOption {  if m.IsDefined() { return Uint32ListOpt(f(*m.value)) } else { return NoneUint32ListOption }  }
/* Int32ListOption: Int32List->Uint64List */ func MapUint64ListToInt32ListOption(m Int32ListOption, f func(Int32List) Uint64List) Uint64ListOption {  if m.IsDefined() { return Uint64ListOpt(f(*m.value)) } else { return NoneUint64ListOption }  }
/* Int32ListOption: Int32List->UintptrList */ func MapUintptrListToInt32ListOption(m Int32ListOption, f func(Int32List) UintptrList) UintptrListOption {  if m.IsDefined() { return UintptrListOpt(f(*m.value)) } else { return NoneUintptrListOption }  }
/* Int32ListOption: Int32List->ByteList */ func MapByteListToInt32ListOption(m Int32ListOption, f func(Int32List) ByteList) ByteListOption {  if m.IsDefined() { return ByteListOpt(f(*m.value)) } else { return NoneByteListOption }  }
/* Int32ListOption: Int32List->RuneList */ func MapRuneListToInt32ListOption(m Int32ListOption, f func(Int32List) RuneList) RuneListOption {  if m.IsDefined() { return RuneListOpt(f(*m.value)) } else { return NoneRuneListOption }  }
/* Int32ListOption: Int32List->Float32List */ func MapFloat32ListToInt32ListOption(m Int32ListOption, f func(Int32List) Float32List) Float32ListOption {  if m.IsDefined() { return Float32ListOpt(f(*m.value)) } else { return NoneFloat32ListOption }  }
/* Int32ListOption: Int32List->Float64List */ func MapFloat64ListToInt32ListOption(m Int32ListOption, f func(Int32List) Float64List) Float64ListOption {  if m.IsDefined() { return Float64ListOpt(f(*m.value)) } else { return NoneFloat64ListOption }  }
/* Int32ListOption: Int32List->Complex64List */ func MapComplex64ListToInt32ListOption(m Int32ListOption, f func(Int32List) Complex64List) Complex64ListOption {  if m.IsDefined() { return Complex64ListOpt(f(*m.value)) } else { return NoneComplex64ListOption }  }
/* Int32ListOption: Int32List->Complex128List */ func MapComplex128ListToInt32ListOption(m Int32ListOption, f func(Int32List) Complex128List) Complex128ListOption {  if m.IsDefined() { return Complex128ListOpt(f(*m.value)) } else { return NoneComplex128ListOption }  }
/* Int32ListOption: Int32List->AnyList */ func MapAnyListToInt32ListOption(m Int32ListOption, f func(Int32List) AnyList) AnyListOption {  if m.IsDefined() { return AnyListOpt(f(*m.value)) } else { return NoneAnyListOption }  }
/* Int64ListOption: Int64List->bool */ func MapBoolToInt64ListOption(m Int64ListOption, f func(Int64List) bool) BoolOption {  if m.IsDefined() { return Bool(f(*m.value)) } else { return NoneBoolOption }  }
/* Int64ListOption: Int64List->string */ func MapStringToInt64ListOption(m Int64ListOption, f func(Int64List) string) StringOption {  if m.IsDefined() { return String(f(*m.value)) } else { return NoneStringOption }  }
/* Int64ListOption: Int64List->int */ func MapIntToInt64ListOption(m Int64ListOption, f func(Int64List) int) IntOption {  if m.IsDefined() { return Int(f(*m.value)) } else { return NoneIntOption }  }
/* Int64ListOption: Int64List->int8 */ func MapInt8ToInt64ListOption(m Int64ListOption, f func(Int64List) int8) Int8Option {  if m.IsDefined() { return Int8(f(*m.value)) } else { return NoneInt8Option }  }
/* Int64ListOption: Int64List->int16 */ func MapInt16ToInt64ListOption(m Int64ListOption, f func(Int64List) int16) Int16Option {  if m.IsDefined() { return Int16(f(*m.value)) } else { return NoneInt16Option }  }
/* Int64ListOption: Int64List->int32 */ func MapInt32ToInt64ListOption(m Int64ListOption, f func(Int64List) int32) Int32Option {  if m.IsDefined() { return Int32(f(*m.value)) } else { return NoneInt32Option }  }
/* Int64ListOption: Int64List->int64 */ func MapInt64ToInt64ListOption(m Int64ListOption, f func(Int64List) int64) Int64Option {  if m.IsDefined() { return Int64(f(*m.value)) } else { return NoneInt64Option }  }
/* Int64ListOption: Int64List->uint */ func MapUintToInt64ListOption(m Int64ListOption, f func(Int64List) uint) UintOption {  if m.IsDefined() { return Uint(f(*m.value)) } else { return NoneUintOption }  }
/* Int64ListOption: Int64List->uint8 */ func MapUint8ToInt64ListOption(m Int64ListOption, f func(Int64List) uint8) Uint8Option {  if m.IsDefined() { return Uint8(f(*m.value)) } else { return NoneUint8Option }  }
/* Int64ListOption: Int64List->uint16 */ func MapUint16ToInt64ListOption(m Int64ListOption, f func(Int64List) uint16) Uint16Option {  if m.IsDefined() { return Uint16(f(*m.value)) } else { return NoneUint16Option }  }
/* Int64ListOption: Int64List->uint32 */ func MapUint32ToInt64ListOption(m Int64ListOption, f func(Int64List) uint32) Uint32Option {  if m.IsDefined() { return Uint32(f(*m.value)) } else { return NoneUint32Option }  }
/* Int64ListOption: Int64List->uint64 */ func MapUint64ToInt64ListOption(m Int64ListOption, f func(Int64List) uint64) Uint64Option {  if m.IsDefined() { return Uint64(f(*m.value)) } else { return NoneUint64Option }  }
/* Int64ListOption: Int64List->uintptr */ func MapUintptrToInt64ListOption(m Int64ListOption, f func(Int64List) uintptr) UintptrOption {  if m.IsDefined() { return Uintptr(f(*m.value)) } else { return NoneUintptrOption }  }
/* Int64ListOption: Int64List->byte */ func MapByteToInt64ListOption(m Int64ListOption, f func(Int64List) byte) ByteOption {  if m.IsDefined() { return Byte(f(*m.value)) } else { return NoneByteOption }  }
/* Int64ListOption: Int64List->rune */ func MapRuneToInt64ListOption(m Int64ListOption, f func(Int64List) rune) RuneOption {  if m.IsDefined() { return Rune(f(*m.value)) } else { return NoneRuneOption }  }
/* Int64ListOption: Int64List->float32 */ func MapFloat32ToInt64ListOption(m Int64ListOption, f func(Int64List) float32) Float32Option {  if m.IsDefined() { return Float32(f(*m.value)) } else { return NoneFloat32Option }  }
/* Int64ListOption: Int64List->float64 */ func MapFloat64ToInt64ListOption(m Int64ListOption, f func(Int64List) float64) Float64Option {  if m.IsDefined() { return Float64(f(*m.value)) } else { return NoneFloat64Option }  }
/* Int64ListOption: Int64List->complex64 */ func MapComplex64ToInt64ListOption(m Int64ListOption, f func(Int64List) complex64) Complex64Option {  if m.IsDefined() { return Complex64(f(*m.value)) } else { return NoneComplex64Option }  }
/* Int64ListOption: Int64List->complex128 */ func MapComplex128ToInt64ListOption(m Int64ListOption, f func(Int64List) complex128) Complex128Option {  if m.IsDefined() { return Complex128(f(*m.value)) } else { return NoneComplex128Option }  }
/* Int64ListOption: Int64List->Any */ func MapAnyToInt64ListOption(m Int64ListOption, f func(Int64List) Any) AnyOption {  if m.IsDefined() { return AnyOpt(f(*m.value)) } else { return NoneAnyOption }  }
/* Int64ListOption: Int64List->BoolOption */ func MapBoolOptionToInt64ListOption(m Int64ListOption, f func(Int64List) BoolOption) BoolOptionOption {  if m.IsDefined() { return BoolBool(f(*m.value)) } else { return NoneBoolOptionOption }  }
/* Int64ListOption: Int64List->StringOption */ func MapStringOptionToInt64ListOption(m Int64ListOption, f func(Int64List) StringOption) StringOptionOption {  if m.IsDefined() { return StringString(f(*m.value)) } else { return NoneStringOptionOption }  }
/* Int64ListOption: Int64List->IntOption */ func MapIntOptionToInt64ListOption(m Int64ListOption, f func(Int64List) IntOption) IntOptionOption {  if m.IsDefined() { return IntInt(f(*m.value)) } else { return NoneIntOptionOption }  }
/* Int64ListOption: Int64List->Int8Option */ func MapInt8OptionToInt64ListOption(m Int64ListOption, f func(Int64List) Int8Option) Int8OptionOption {  if m.IsDefined() { return Int8Int8(f(*m.value)) } else { return NoneInt8OptionOption }  }
/* Int64ListOption: Int64List->Int16Option */ func MapInt16OptionToInt64ListOption(m Int64ListOption, f func(Int64List) Int16Option) Int16OptionOption {  if m.IsDefined() { return Int16Int16(f(*m.value)) } else { return NoneInt16OptionOption }  }
/* Int64ListOption: Int64List->Int32Option */ func MapInt32OptionToInt64ListOption(m Int64ListOption, f func(Int64List) Int32Option) Int32OptionOption {  if m.IsDefined() { return Int32Int32(f(*m.value)) } else { return NoneInt32OptionOption }  }
/* Int64ListOption: Int64List->Int64Option */ func MapInt64OptionToInt64ListOption(m Int64ListOption, f func(Int64List) Int64Option) Int64OptionOption {  if m.IsDefined() { return Int64Int64(f(*m.value)) } else { return NoneInt64OptionOption }  }
/* Int64ListOption: Int64List->UintOption */ func MapUintOptionToInt64ListOption(m Int64ListOption, f func(Int64List) UintOption) UintOptionOption {  if m.IsDefined() { return UintUint(f(*m.value)) } else { return NoneUintOptionOption }  }
/* Int64ListOption: Int64List->Uint8Option */ func MapUint8OptionToInt64ListOption(m Int64ListOption, f func(Int64List) Uint8Option) Uint8OptionOption {  if m.IsDefined() { return Uint8Uint8(f(*m.value)) } else { return NoneUint8OptionOption }  }
/* Int64ListOption: Int64List->Uint16Option */ func MapUint16OptionToInt64ListOption(m Int64ListOption, f func(Int64List) Uint16Option) Uint16OptionOption {  if m.IsDefined() { return Uint16Uint16(f(*m.value)) } else { return NoneUint16OptionOption }  }
/* Int64ListOption: Int64List->Uint32Option */ func MapUint32OptionToInt64ListOption(m Int64ListOption, f func(Int64List) Uint32Option) Uint32OptionOption {  if m.IsDefined() { return Uint32Uint32(f(*m.value)) } else { return NoneUint32OptionOption }  }
/* Int64ListOption: Int64List->Uint64Option */ func MapUint64OptionToInt64ListOption(m Int64ListOption, f func(Int64List) Uint64Option) Uint64OptionOption {  if m.IsDefined() { return Uint64Uint64(f(*m.value)) } else { return NoneUint64OptionOption }  }
/* Int64ListOption: Int64List->UintptrOption */ func MapUintptrOptionToInt64ListOption(m Int64ListOption, f func(Int64List) UintptrOption) UintptrOptionOption {  if m.IsDefined() { return UintptrUintptr(f(*m.value)) } else { return NoneUintptrOptionOption }  }
/* Int64ListOption: Int64List->ByteOption */ func MapByteOptionToInt64ListOption(m Int64ListOption, f func(Int64List) ByteOption) ByteOptionOption {  if m.IsDefined() { return ByteByte(f(*m.value)) } else { return NoneByteOptionOption }  }
/* Int64ListOption: Int64List->RuneOption */ func MapRuneOptionToInt64ListOption(m Int64ListOption, f func(Int64List) RuneOption) RuneOptionOption {  if m.IsDefined() { return RuneRune(f(*m.value)) } else { return NoneRuneOptionOption }  }
/* Int64ListOption: Int64List->Float32Option */ func MapFloat32OptionToInt64ListOption(m Int64ListOption, f func(Int64List) Float32Option) Float32OptionOption {  if m.IsDefined() { return Float32Float32(f(*m.value)) } else { return NoneFloat32OptionOption }  }
/* Int64ListOption: Int64List->Float64Option */ func MapFloat64OptionToInt64ListOption(m Int64ListOption, f func(Int64List) Float64Option) Float64OptionOption {  if m.IsDefined() { return Float64Float64(f(*m.value)) } else { return NoneFloat64OptionOption }  }
/* Int64ListOption: Int64List->Complex64Option */ func MapComplex64OptionToInt64ListOption(m Int64ListOption, f func(Int64List) Complex64Option) Complex64OptionOption {  if m.IsDefined() { return Complex64Complex64(f(*m.value)) } else { return NoneComplex64OptionOption }  }
/* Int64ListOption: Int64List->Complex128Option */ func MapComplex128OptionToInt64ListOption(m Int64ListOption, f func(Int64List) Complex128Option) Complex128OptionOption {  if m.IsDefined() { return Complex128Complex128(f(*m.value)) } else { return NoneComplex128OptionOption }  }
/* Int64ListOption: Int64List->AnyOption */ func MapAnyOptionToInt64ListOption(m Int64ListOption, f func(Int64List) AnyOption) AnyOptionOption {  if m.IsDefined() { return AnyOptAny(f(*m.value)) } else { return NoneAnyOptionOption }  }
/* Int64ListOption: Int64List->[]bool */ func MapBoolArrToInt64ListOption(m Int64ListOption, f func(Int64List) []bool) BoolArrOption {  if m.IsDefined() { return BoolArrOpt(f(*m.value)) } else { return NoneBoolArrOption }  }
/* Int64ListOption: Int64List->[]string */ func MapStringArrToInt64ListOption(m Int64ListOption, f func(Int64List) []string) StringArrOption {  if m.IsDefined() { return StringArrOpt(f(*m.value)) } else { return NoneStringArrOption }  }
/* Int64ListOption: Int64List->[]int */ func MapIntArrToInt64ListOption(m Int64ListOption, f func(Int64List) []int) IntArrOption {  if m.IsDefined() { return IntArrOpt(f(*m.value)) } else { return NoneIntArrOption }  }
/* Int64ListOption: Int64List->[]int8 */ func MapInt8ArrToInt64ListOption(m Int64ListOption, f func(Int64List) []int8) Int8ArrOption {  if m.IsDefined() { return Int8ArrOpt(f(*m.value)) } else { return NoneInt8ArrOption }  }
/* Int64ListOption: Int64List->[]int16 */ func MapInt16ArrToInt64ListOption(m Int64ListOption, f func(Int64List) []int16) Int16ArrOption {  if m.IsDefined() { return Int16ArrOpt(f(*m.value)) } else { return NoneInt16ArrOption }  }
/* Int64ListOption: Int64List->[]int32 */ func MapInt32ArrToInt64ListOption(m Int64ListOption, f func(Int64List) []int32) Int32ArrOption {  if m.IsDefined() { return Int32ArrOpt(f(*m.value)) } else { return NoneInt32ArrOption }  }
/* Int64ListOption: Int64List->[]int64 */ func MapInt64ArrToInt64ListOption(m Int64ListOption, f func(Int64List) []int64) Int64ArrOption {  if m.IsDefined() { return Int64ArrOpt(f(*m.value)) } else { return NoneInt64ArrOption }  }
/* Int64ListOption: Int64List->[]uint */ func MapUintArrToInt64ListOption(m Int64ListOption, f func(Int64List) []uint) UintArrOption {  if m.IsDefined() { return UintArrOpt(f(*m.value)) } else { return NoneUintArrOption }  }
/* Int64ListOption: Int64List->[]uint8 */ func MapUint8ArrToInt64ListOption(m Int64ListOption, f func(Int64List) []uint8) Uint8ArrOption {  if m.IsDefined() { return Uint8ArrOpt(f(*m.value)) } else { return NoneUint8ArrOption }  }
/* Int64ListOption: Int64List->[]uint16 */ func MapUint16ArrToInt64ListOption(m Int64ListOption, f func(Int64List) []uint16) Uint16ArrOption {  if m.IsDefined() { return Uint16ArrOpt(f(*m.value)) } else { return NoneUint16ArrOption }  }
/* Int64ListOption: Int64List->[]uint32 */ func MapUint32ArrToInt64ListOption(m Int64ListOption, f func(Int64List) []uint32) Uint32ArrOption {  if m.IsDefined() { return Uint32ArrOpt(f(*m.value)) } else { return NoneUint32ArrOption }  }
/* Int64ListOption: Int64List->[]uint64 */ func MapUint64ArrToInt64ListOption(m Int64ListOption, f func(Int64List) []uint64) Uint64ArrOption {  if m.IsDefined() { return Uint64ArrOpt(f(*m.value)) } else { return NoneUint64ArrOption }  }
/* Int64ListOption: Int64List->[]uintptr */ func MapUintptrArrToInt64ListOption(m Int64ListOption, f func(Int64List) []uintptr) UintptrArrOption {  if m.IsDefined() { return UintptrArrOpt(f(*m.value)) } else { return NoneUintptrArrOption }  }
/* Int64ListOption: Int64List->[]byte */ func MapByteArrToInt64ListOption(m Int64ListOption, f func(Int64List) []byte) ByteArrOption {  if m.IsDefined() { return ByteArrOpt(f(*m.value)) } else { return NoneByteArrOption }  }
/* Int64ListOption: Int64List->[]rune */ func MapRuneArrToInt64ListOption(m Int64ListOption, f func(Int64List) []rune) RuneArrOption {  if m.IsDefined() { return RuneArrOpt(f(*m.value)) } else { return NoneRuneArrOption }  }
/* Int64ListOption: Int64List->[]float32 */ func MapFloat32ArrToInt64ListOption(m Int64ListOption, f func(Int64List) []float32) Float32ArrOption {  if m.IsDefined() { return Float32ArrOpt(f(*m.value)) } else { return NoneFloat32ArrOption }  }
/* Int64ListOption: Int64List->[]float64 */ func MapFloat64ArrToInt64ListOption(m Int64ListOption, f func(Int64List) []float64) Float64ArrOption {  if m.IsDefined() { return Float64ArrOpt(f(*m.value)) } else { return NoneFloat64ArrOption }  }
/* Int64ListOption: Int64List->[]complex64 */ func MapComplex64ArrToInt64ListOption(m Int64ListOption, f func(Int64List) []complex64) Complex64ArrOption {  if m.IsDefined() { return Complex64ArrOpt(f(*m.value)) } else { return NoneComplex64ArrOption }  }
/* Int64ListOption: Int64List->[]complex128 */ func MapComplex128ArrToInt64ListOption(m Int64ListOption, f func(Int64List) []complex128) Complex128ArrOption {  if m.IsDefined() { return Complex128ArrOpt(f(*m.value)) } else { return NoneComplex128ArrOption }  }
/* Int64ListOption: Int64List->[]Any */ func MapAnyArrToInt64ListOption(m Int64ListOption, f func(Int64List) []Any) AnyArrOption {  if m.IsDefined() { return AnyArrOpt(f(*m.value)) } else { return NoneAnyArrOption }  }
/* Int64ListOption: Int64List->BoolList */ func MapBoolListToInt64ListOption(m Int64ListOption, f func(Int64List) BoolList) BoolListOption {  if m.IsDefined() { return BoolListOpt(f(*m.value)) } else { return NoneBoolListOption }  }
/* Int64ListOption: Int64List->StringList */ func MapStringListToInt64ListOption(m Int64ListOption, f func(Int64List) StringList) StringListOption {  if m.IsDefined() { return StringListOpt(f(*m.value)) } else { return NoneStringListOption }  }
/* Int64ListOption: Int64List->IntList */ func MapIntListToInt64ListOption(m Int64ListOption, f func(Int64List) IntList) IntListOption {  if m.IsDefined() { return IntListOpt(f(*m.value)) } else { return NoneIntListOption }  }
/* Int64ListOption: Int64List->Int8List */ func MapInt8ListToInt64ListOption(m Int64ListOption, f func(Int64List) Int8List) Int8ListOption {  if m.IsDefined() { return Int8ListOpt(f(*m.value)) } else { return NoneInt8ListOption }  }
/* Int64ListOption: Int64List->Int16List */ func MapInt16ListToInt64ListOption(m Int64ListOption, f func(Int64List) Int16List) Int16ListOption {  if m.IsDefined() { return Int16ListOpt(f(*m.value)) } else { return NoneInt16ListOption }  }
/* Int64ListOption: Int64List->Int32List */ func MapInt32ListToInt64ListOption(m Int64ListOption, f func(Int64List) Int32List) Int32ListOption {  if m.IsDefined() { return Int32ListOpt(f(*m.value)) } else { return NoneInt32ListOption }  }
/* Int64ListOption: Int64List->Int64List */ func MapInt64ListToInt64ListOption(m Int64ListOption, f func(Int64List) Int64List) Int64ListOption {  if m.IsDefined() { return Int64ListOpt(f(*m.value)) } else { return NoneInt64ListOption }  }
/* Int64ListOption: Int64List->UintList */ func MapUintListToInt64ListOption(m Int64ListOption, f func(Int64List) UintList) UintListOption {  if m.IsDefined() { return UintListOpt(f(*m.value)) } else { return NoneUintListOption }  }
/* Int64ListOption: Int64List->Uint8List */ func MapUint8ListToInt64ListOption(m Int64ListOption, f func(Int64List) Uint8List) Uint8ListOption {  if m.IsDefined() { return Uint8ListOpt(f(*m.value)) } else { return NoneUint8ListOption }  }
/* Int64ListOption: Int64List->Uint16List */ func MapUint16ListToInt64ListOption(m Int64ListOption, f func(Int64List) Uint16List) Uint16ListOption {  if m.IsDefined() { return Uint16ListOpt(f(*m.value)) } else { return NoneUint16ListOption }  }
/* Int64ListOption: Int64List->Uint32List */ func MapUint32ListToInt64ListOption(m Int64ListOption, f func(Int64List) Uint32List) Uint32ListOption {  if m.IsDefined() { return Uint32ListOpt(f(*m.value)) } else { return NoneUint32ListOption }  }
/* Int64ListOption: Int64List->Uint64List */ func MapUint64ListToInt64ListOption(m Int64ListOption, f func(Int64List) Uint64List) Uint64ListOption {  if m.IsDefined() { return Uint64ListOpt(f(*m.value)) } else { return NoneUint64ListOption }  }
/* Int64ListOption: Int64List->UintptrList */ func MapUintptrListToInt64ListOption(m Int64ListOption, f func(Int64List) UintptrList) UintptrListOption {  if m.IsDefined() { return UintptrListOpt(f(*m.value)) } else { return NoneUintptrListOption }  }
/* Int64ListOption: Int64List->ByteList */ func MapByteListToInt64ListOption(m Int64ListOption, f func(Int64List) ByteList) ByteListOption {  if m.IsDefined() { return ByteListOpt(f(*m.value)) } else { return NoneByteListOption }  }
/* Int64ListOption: Int64List->RuneList */ func MapRuneListToInt64ListOption(m Int64ListOption, f func(Int64List) RuneList) RuneListOption {  if m.IsDefined() { return RuneListOpt(f(*m.value)) } else { return NoneRuneListOption }  }
/* Int64ListOption: Int64List->Float32List */ func MapFloat32ListToInt64ListOption(m Int64ListOption, f func(Int64List) Float32List) Float32ListOption {  if m.IsDefined() { return Float32ListOpt(f(*m.value)) } else { return NoneFloat32ListOption }  }
/* Int64ListOption: Int64List->Float64List */ func MapFloat64ListToInt64ListOption(m Int64ListOption, f func(Int64List) Float64List) Float64ListOption {  if m.IsDefined() { return Float64ListOpt(f(*m.value)) } else { return NoneFloat64ListOption }  }
/* Int64ListOption: Int64List->Complex64List */ func MapComplex64ListToInt64ListOption(m Int64ListOption, f func(Int64List) Complex64List) Complex64ListOption {  if m.IsDefined() { return Complex64ListOpt(f(*m.value)) } else { return NoneComplex64ListOption }  }
/* Int64ListOption: Int64List->Complex128List */ func MapComplex128ListToInt64ListOption(m Int64ListOption, f func(Int64List) Complex128List) Complex128ListOption {  if m.IsDefined() { return Complex128ListOpt(f(*m.value)) } else { return NoneComplex128ListOption }  }
/* Int64ListOption: Int64List->AnyList */ func MapAnyListToInt64ListOption(m Int64ListOption, f func(Int64List) AnyList) AnyListOption {  if m.IsDefined() { return AnyListOpt(f(*m.value)) } else { return NoneAnyListOption }  }
/* UintListOption: UintList->bool */ func MapBoolToUintListOption(m UintListOption, f func(UintList) bool) BoolOption {  if m.IsDefined() { return Bool(f(*m.value)) } else { return NoneBoolOption }  }
/* UintListOption: UintList->string */ func MapStringToUintListOption(m UintListOption, f func(UintList) string) StringOption {  if m.IsDefined() { return String(f(*m.value)) } else { return NoneStringOption }  }
/* UintListOption: UintList->int */ func MapIntToUintListOption(m UintListOption, f func(UintList) int) IntOption {  if m.IsDefined() { return Int(f(*m.value)) } else { return NoneIntOption }  }
/* UintListOption: UintList->int8 */ func MapInt8ToUintListOption(m UintListOption, f func(UintList) int8) Int8Option {  if m.IsDefined() { return Int8(f(*m.value)) } else { return NoneInt8Option }  }
/* UintListOption: UintList->int16 */ func MapInt16ToUintListOption(m UintListOption, f func(UintList) int16) Int16Option {  if m.IsDefined() { return Int16(f(*m.value)) } else { return NoneInt16Option }  }
/* UintListOption: UintList->int32 */ func MapInt32ToUintListOption(m UintListOption, f func(UintList) int32) Int32Option {  if m.IsDefined() { return Int32(f(*m.value)) } else { return NoneInt32Option }  }
/* UintListOption: UintList->int64 */ func MapInt64ToUintListOption(m UintListOption, f func(UintList) int64) Int64Option {  if m.IsDefined() { return Int64(f(*m.value)) } else { return NoneInt64Option }  }
/* UintListOption: UintList->uint */ func MapUintToUintListOption(m UintListOption, f func(UintList) uint) UintOption {  if m.IsDefined() { return Uint(f(*m.value)) } else { return NoneUintOption }  }
/* UintListOption: UintList->uint8 */ func MapUint8ToUintListOption(m UintListOption, f func(UintList) uint8) Uint8Option {  if m.IsDefined() { return Uint8(f(*m.value)) } else { return NoneUint8Option }  }
/* UintListOption: UintList->uint16 */ func MapUint16ToUintListOption(m UintListOption, f func(UintList) uint16) Uint16Option {  if m.IsDefined() { return Uint16(f(*m.value)) } else { return NoneUint16Option }  }
/* UintListOption: UintList->uint32 */ func MapUint32ToUintListOption(m UintListOption, f func(UintList) uint32) Uint32Option {  if m.IsDefined() { return Uint32(f(*m.value)) } else { return NoneUint32Option }  }
/* UintListOption: UintList->uint64 */ func MapUint64ToUintListOption(m UintListOption, f func(UintList) uint64) Uint64Option {  if m.IsDefined() { return Uint64(f(*m.value)) } else { return NoneUint64Option }  }
/* UintListOption: UintList->uintptr */ func MapUintptrToUintListOption(m UintListOption, f func(UintList) uintptr) UintptrOption {  if m.IsDefined() { return Uintptr(f(*m.value)) } else { return NoneUintptrOption }  }
/* UintListOption: UintList->byte */ func MapByteToUintListOption(m UintListOption, f func(UintList) byte) ByteOption {  if m.IsDefined() { return Byte(f(*m.value)) } else { return NoneByteOption }  }
/* UintListOption: UintList->rune */ func MapRuneToUintListOption(m UintListOption, f func(UintList) rune) RuneOption {  if m.IsDefined() { return Rune(f(*m.value)) } else { return NoneRuneOption }  }
/* UintListOption: UintList->float32 */ func MapFloat32ToUintListOption(m UintListOption, f func(UintList) float32) Float32Option {  if m.IsDefined() { return Float32(f(*m.value)) } else { return NoneFloat32Option }  }
/* UintListOption: UintList->float64 */ func MapFloat64ToUintListOption(m UintListOption, f func(UintList) float64) Float64Option {  if m.IsDefined() { return Float64(f(*m.value)) } else { return NoneFloat64Option }  }
/* UintListOption: UintList->complex64 */ func MapComplex64ToUintListOption(m UintListOption, f func(UintList) complex64) Complex64Option {  if m.IsDefined() { return Complex64(f(*m.value)) } else { return NoneComplex64Option }  }
/* UintListOption: UintList->complex128 */ func MapComplex128ToUintListOption(m UintListOption, f func(UintList) complex128) Complex128Option {  if m.IsDefined() { return Complex128(f(*m.value)) } else { return NoneComplex128Option }  }
/* UintListOption: UintList->Any */ func MapAnyToUintListOption(m UintListOption, f func(UintList) Any) AnyOption {  if m.IsDefined() { return AnyOpt(f(*m.value)) } else { return NoneAnyOption }  }
/* UintListOption: UintList->BoolOption */ func MapBoolOptionToUintListOption(m UintListOption, f func(UintList) BoolOption) BoolOptionOption {  if m.IsDefined() { return BoolBool(f(*m.value)) } else { return NoneBoolOptionOption }  }
/* UintListOption: UintList->StringOption */ func MapStringOptionToUintListOption(m UintListOption, f func(UintList) StringOption) StringOptionOption {  if m.IsDefined() { return StringString(f(*m.value)) } else { return NoneStringOptionOption }  }
/* UintListOption: UintList->IntOption */ func MapIntOptionToUintListOption(m UintListOption, f func(UintList) IntOption) IntOptionOption {  if m.IsDefined() { return IntInt(f(*m.value)) } else { return NoneIntOptionOption }  }
/* UintListOption: UintList->Int8Option */ func MapInt8OptionToUintListOption(m UintListOption, f func(UintList) Int8Option) Int8OptionOption {  if m.IsDefined() { return Int8Int8(f(*m.value)) } else { return NoneInt8OptionOption }  }
/* UintListOption: UintList->Int16Option */ func MapInt16OptionToUintListOption(m UintListOption, f func(UintList) Int16Option) Int16OptionOption {  if m.IsDefined() { return Int16Int16(f(*m.value)) } else { return NoneInt16OptionOption }  }
/* UintListOption: UintList->Int32Option */ func MapInt32OptionToUintListOption(m UintListOption, f func(UintList) Int32Option) Int32OptionOption {  if m.IsDefined() { return Int32Int32(f(*m.value)) } else { return NoneInt32OptionOption }  }
/* UintListOption: UintList->Int64Option */ func MapInt64OptionToUintListOption(m UintListOption, f func(UintList) Int64Option) Int64OptionOption {  if m.IsDefined() { return Int64Int64(f(*m.value)) } else { return NoneInt64OptionOption }  }
/* UintListOption: UintList->UintOption */ func MapUintOptionToUintListOption(m UintListOption, f func(UintList) UintOption) UintOptionOption {  if m.IsDefined() { return UintUint(f(*m.value)) } else { return NoneUintOptionOption }  }
/* UintListOption: UintList->Uint8Option */ func MapUint8OptionToUintListOption(m UintListOption, f func(UintList) Uint8Option) Uint8OptionOption {  if m.IsDefined() { return Uint8Uint8(f(*m.value)) } else { return NoneUint8OptionOption }  }
/* UintListOption: UintList->Uint16Option */ func MapUint16OptionToUintListOption(m UintListOption, f func(UintList) Uint16Option) Uint16OptionOption {  if m.IsDefined() { return Uint16Uint16(f(*m.value)) } else { return NoneUint16OptionOption }  }
/* UintListOption: UintList->Uint32Option */ func MapUint32OptionToUintListOption(m UintListOption, f func(UintList) Uint32Option) Uint32OptionOption {  if m.IsDefined() { return Uint32Uint32(f(*m.value)) } else { return NoneUint32OptionOption }  }
/* UintListOption: UintList->Uint64Option */ func MapUint64OptionToUintListOption(m UintListOption, f func(UintList) Uint64Option) Uint64OptionOption {  if m.IsDefined() { return Uint64Uint64(f(*m.value)) } else { return NoneUint64OptionOption }  }
/* UintListOption: UintList->UintptrOption */ func MapUintptrOptionToUintListOption(m UintListOption, f func(UintList) UintptrOption) UintptrOptionOption {  if m.IsDefined() { return UintptrUintptr(f(*m.value)) } else { return NoneUintptrOptionOption }  }
/* UintListOption: UintList->ByteOption */ func MapByteOptionToUintListOption(m UintListOption, f func(UintList) ByteOption) ByteOptionOption {  if m.IsDefined() { return ByteByte(f(*m.value)) } else { return NoneByteOptionOption }  }
/* UintListOption: UintList->RuneOption */ func MapRuneOptionToUintListOption(m UintListOption, f func(UintList) RuneOption) RuneOptionOption {  if m.IsDefined() { return RuneRune(f(*m.value)) } else { return NoneRuneOptionOption }  }
/* UintListOption: UintList->Float32Option */ func MapFloat32OptionToUintListOption(m UintListOption, f func(UintList) Float32Option) Float32OptionOption {  if m.IsDefined() { return Float32Float32(f(*m.value)) } else { return NoneFloat32OptionOption }  }
/* UintListOption: UintList->Float64Option */ func MapFloat64OptionToUintListOption(m UintListOption, f func(UintList) Float64Option) Float64OptionOption {  if m.IsDefined() { return Float64Float64(f(*m.value)) } else { return NoneFloat64OptionOption }  }
/* UintListOption: UintList->Complex64Option */ func MapComplex64OptionToUintListOption(m UintListOption, f func(UintList) Complex64Option) Complex64OptionOption {  if m.IsDefined() { return Complex64Complex64(f(*m.value)) } else { return NoneComplex64OptionOption }  }
/* UintListOption: UintList->Complex128Option */ func MapComplex128OptionToUintListOption(m UintListOption, f func(UintList) Complex128Option) Complex128OptionOption {  if m.IsDefined() { return Complex128Complex128(f(*m.value)) } else { return NoneComplex128OptionOption }  }
/* UintListOption: UintList->AnyOption */ func MapAnyOptionToUintListOption(m UintListOption, f func(UintList) AnyOption) AnyOptionOption {  if m.IsDefined() { return AnyOptAny(f(*m.value)) } else { return NoneAnyOptionOption }  }
/* UintListOption: UintList->[]bool */ func MapBoolArrToUintListOption(m UintListOption, f func(UintList) []bool) BoolArrOption {  if m.IsDefined() { return BoolArrOpt(f(*m.value)) } else { return NoneBoolArrOption }  }
/* UintListOption: UintList->[]string */ func MapStringArrToUintListOption(m UintListOption, f func(UintList) []string) StringArrOption {  if m.IsDefined() { return StringArrOpt(f(*m.value)) } else { return NoneStringArrOption }  }
/* UintListOption: UintList->[]int */ func MapIntArrToUintListOption(m UintListOption, f func(UintList) []int) IntArrOption {  if m.IsDefined() { return IntArrOpt(f(*m.value)) } else { return NoneIntArrOption }  }
/* UintListOption: UintList->[]int8 */ func MapInt8ArrToUintListOption(m UintListOption, f func(UintList) []int8) Int8ArrOption {  if m.IsDefined() { return Int8ArrOpt(f(*m.value)) } else { return NoneInt8ArrOption }  }
/* UintListOption: UintList->[]int16 */ func MapInt16ArrToUintListOption(m UintListOption, f func(UintList) []int16) Int16ArrOption {  if m.IsDefined() { return Int16ArrOpt(f(*m.value)) } else { return NoneInt16ArrOption }  }
/* UintListOption: UintList->[]int32 */ func MapInt32ArrToUintListOption(m UintListOption, f func(UintList) []int32) Int32ArrOption {  if m.IsDefined() { return Int32ArrOpt(f(*m.value)) } else { return NoneInt32ArrOption }  }
/* UintListOption: UintList->[]int64 */ func MapInt64ArrToUintListOption(m UintListOption, f func(UintList) []int64) Int64ArrOption {  if m.IsDefined() { return Int64ArrOpt(f(*m.value)) } else { return NoneInt64ArrOption }  }
/* UintListOption: UintList->[]uint */ func MapUintArrToUintListOption(m UintListOption, f func(UintList) []uint) UintArrOption {  if m.IsDefined() { return UintArrOpt(f(*m.value)) } else { return NoneUintArrOption }  }
/* UintListOption: UintList->[]uint8 */ func MapUint8ArrToUintListOption(m UintListOption, f func(UintList) []uint8) Uint8ArrOption {  if m.IsDefined() { return Uint8ArrOpt(f(*m.value)) } else { return NoneUint8ArrOption }  }
/* UintListOption: UintList->[]uint16 */ func MapUint16ArrToUintListOption(m UintListOption, f func(UintList) []uint16) Uint16ArrOption {  if m.IsDefined() { return Uint16ArrOpt(f(*m.value)) } else { return NoneUint16ArrOption }  }
/* UintListOption: UintList->[]uint32 */ func MapUint32ArrToUintListOption(m UintListOption, f func(UintList) []uint32) Uint32ArrOption {  if m.IsDefined() { return Uint32ArrOpt(f(*m.value)) } else { return NoneUint32ArrOption }  }
/* UintListOption: UintList->[]uint64 */ func MapUint64ArrToUintListOption(m UintListOption, f func(UintList) []uint64) Uint64ArrOption {  if m.IsDefined() { return Uint64ArrOpt(f(*m.value)) } else { return NoneUint64ArrOption }  }
/* UintListOption: UintList->[]uintptr */ func MapUintptrArrToUintListOption(m UintListOption, f func(UintList) []uintptr) UintptrArrOption {  if m.IsDefined() { return UintptrArrOpt(f(*m.value)) } else { return NoneUintptrArrOption }  }
/* UintListOption: UintList->[]byte */ func MapByteArrToUintListOption(m UintListOption, f func(UintList) []byte) ByteArrOption {  if m.IsDefined() { return ByteArrOpt(f(*m.value)) } else { return NoneByteArrOption }  }
/* UintListOption: UintList->[]rune */ func MapRuneArrToUintListOption(m UintListOption, f func(UintList) []rune) RuneArrOption {  if m.IsDefined() { return RuneArrOpt(f(*m.value)) } else { return NoneRuneArrOption }  }
/* UintListOption: UintList->[]float32 */ func MapFloat32ArrToUintListOption(m UintListOption, f func(UintList) []float32) Float32ArrOption {  if m.IsDefined() { return Float32ArrOpt(f(*m.value)) } else { return NoneFloat32ArrOption }  }
/* UintListOption: UintList->[]float64 */ func MapFloat64ArrToUintListOption(m UintListOption, f func(UintList) []float64) Float64ArrOption {  if m.IsDefined() { return Float64ArrOpt(f(*m.value)) } else { return NoneFloat64ArrOption }  }
/* UintListOption: UintList->[]complex64 */ func MapComplex64ArrToUintListOption(m UintListOption, f func(UintList) []complex64) Complex64ArrOption {  if m.IsDefined() { return Complex64ArrOpt(f(*m.value)) } else { return NoneComplex64ArrOption }  }
/* UintListOption: UintList->[]complex128 */ func MapComplex128ArrToUintListOption(m UintListOption, f func(UintList) []complex128) Complex128ArrOption {  if m.IsDefined() { return Complex128ArrOpt(f(*m.value)) } else { return NoneComplex128ArrOption }  }
/* UintListOption: UintList->[]Any */ func MapAnyArrToUintListOption(m UintListOption, f func(UintList) []Any) AnyArrOption {  if m.IsDefined() { return AnyArrOpt(f(*m.value)) } else { return NoneAnyArrOption }  }
/* UintListOption: UintList->BoolList */ func MapBoolListToUintListOption(m UintListOption, f func(UintList) BoolList) BoolListOption {  if m.IsDefined() { return BoolListOpt(f(*m.value)) } else { return NoneBoolListOption }  }
/* UintListOption: UintList->StringList */ func MapStringListToUintListOption(m UintListOption, f func(UintList) StringList) StringListOption {  if m.IsDefined() { return StringListOpt(f(*m.value)) } else { return NoneStringListOption }  }
/* UintListOption: UintList->IntList */ func MapIntListToUintListOption(m UintListOption, f func(UintList) IntList) IntListOption {  if m.IsDefined() { return IntListOpt(f(*m.value)) } else { return NoneIntListOption }  }
/* UintListOption: UintList->Int8List */ func MapInt8ListToUintListOption(m UintListOption, f func(UintList) Int8List) Int8ListOption {  if m.IsDefined() { return Int8ListOpt(f(*m.value)) } else { return NoneInt8ListOption }  }
/* UintListOption: UintList->Int16List */ func MapInt16ListToUintListOption(m UintListOption, f func(UintList) Int16List) Int16ListOption {  if m.IsDefined() { return Int16ListOpt(f(*m.value)) } else { return NoneInt16ListOption }  }
/* UintListOption: UintList->Int32List */ func MapInt32ListToUintListOption(m UintListOption, f func(UintList) Int32List) Int32ListOption {  if m.IsDefined() { return Int32ListOpt(f(*m.value)) } else { return NoneInt32ListOption }  }
/* UintListOption: UintList->Int64List */ func MapInt64ListToUintListOption(m UintListOption, f func(UintList) Int64List) Int64ListOption {  if m.IsDefined() { return Int64ListOpt(f(*m.value)) } else { return NoneInt64ListOption }  }
/* UintListOption: UintList->UintList */ func MapUintListToUintListOption(m UintListOption, f func(UintList) UintList) UintListOption {  if m.IsDefined() { return UintListOpt(f(*m.value)) } else { return NoneUintListOption }  }
/* UintListOption: UintList->Uint8List */ func MapUint8ListToUintListOption(m UintListOption, f func(UintList) Uint8List) Uint8ListOption {  if m.IsDefined() { return Uint8ListOpt(f(*m.value)) } else { return NoneUint8ListOption }  }
/* UintListOption: UintList->Uint16List */ func MapUint16ListToUintListOption(m UintListOption, f func(UintList) Uint16List) Uint16ListOption {  if m.IsDefined() { return Uint16ListOpt(f(*m.value)) } else { return NoneUint16ListOption }  }
/* UintListOption: UintList->Uint32List */ func MapUint32ListToUintListOption(m UintListOption, f func(UintList) Uint32List) Uint32ListOption {  if m.IsDefined() { return Uint32ListOpt(f(*m.value)) } else { return NoneUint32ListOption }  }
/* UintListOption: UintList->Uint64List */ func MapUint64ListToUintListOption(m UintListOption, f func(UintList) Uint64List) Uint64ListOption {  if m.IsDefined() { return Uint64ListOpt(f(*m.value)) } else { return NoneUint64ListOption }  }
/* UintListOption: UintList->UintptrList */ func MapUintptrListToUintListOption(m UintListOption, f func(UintList) UintptrList) UintptrListOption {  if m.IsDefined() { return UintptrListOpt(f(*m.value)) } else { return NoneUintptrListOption }  }
/* UintListOption: UintList->ByteList */ func MapByteListToUintListOption(m UintListOption, f func(UintList) ByteList) ByteListOption {  if m.IsDefined() { return ByteListOpt(f(*m.value)) } else { return NoneByteListOption }  }
/* UintListOption: UintList->RuneList */ func MapRuneListToUintListOption(m UintListOption, f func(UintList) RuneList) RuneListOption {  if m.IsDefined() { return RuneListOpt(f(*m.value)) } else { return NoneRuneListOption }  }
/* UintListOption: UintList->Float32List */ func MapFloat32ListToUintListOption(m UintListOption, f func(UintList) Float32List) Float32ListOption {  if m.IsDefined() { return Float32ListOpt(f(*m.value)) } else { return NoneFloat32ListOption }  }
/* UintListOption: UintList->Float64List */ func MapFloat64ListToUintListOption(m UintListOption, f func(UintList) Float64List) Float64ListOption {  if m.IsDefined() { return Float64ListOpt(f(*m.value)) } else { return NoneFloat64ListOption }  }
/* UintListOption: UintList->Complex64List */ func MapComplex64ListToUintListOption(m UintListOption, f func(UintList) Complex64List) Complex64ListOption {  if m.IsDefined() { return Complex64ListOpt(f(*m.value)) } else { return NoneComplex64ListOption }  }
/* UintListOption: UintList->Complex128List */ func MapComplex128ListToUintListOption(m UintListOption, f func(UintList) Complex128List) Complex128ListOption {  if m.IsDefined() { return Complex128ListOpt(f(*m.value)) } else { return NoneComplex128ListOption }  }
/* UintListOption: UintList->AnyList */ func MapAnyListToUintListOption(m UintListOption, f func(UintList) AnyList) AnyListOption {  if m.IsDefined() { return AnyListOpt(f(*m.value)) } else { return NoneAnyListOption }  }
/* Uint8ListOption: Uint8List->bool */ func MapBoolToUint8ListOption(m Uint8ListOption, f func(Uint8List) bool) BoolOption {  if m.IsDefined() { return Bool(f(*m.value)) } else { return NoneBoolOption }  }
/* Uint8ListOption: Uint8List->string */ func MapStringToUint8ListOption(m Uint8ListOption, f func(Uint8List) string) StringOption {  if m.IsDefined() { return String(f(*m.value)) } else { return NoneStringOption }  }
/* Uint8ListOption: Uint8List->int */ func MapIntToUint8ListOption(m Uint8ListOption, f func(Uint8List) int) IntOption {  if m.IsDefined() { return Int(f(*m.value)) } else { return NoneIntOption }  }
/* Uint8ListOption: Uint8List->int8 */ func MapInt8ToUint8ListOption(m Uint8ListOption, f func(Uint8List) int8) Int8Option {  if m.IsDefined() { return Int8(f(*m.value)) } else { return NoneInt8Option }  }
/* Uint8ListOption: Uint8List->int16 */ func MapInt16ToUint8ListOption(m Uint8ListOption, f func(Uint8List) int16) Int16Option {  if m.IsDefined() { return Int16(f(*m.value)) } else { return NoneInt16Option }  }
/* Uint8ListOption: Uint8List->int32 */ func MapInt32ToUint8ListOption(m Uint8ListOption, f func(Uint8List) int32) Int32Option {  if m.IsDefined() { return Int32(f(*m.value)) } else { return NoneInt32Option }  }
/* Uint8ListOption: Uint8List->int64 */ func MapInt64ToUint8ListOption(m Uint8ListOption, f func(Uint8List) int64) Int64Option {  if m.IsDefined() { return Int64(f(*m.value)) } else { return NoneInt64Option }  }
/* Uint8ListOption: Uint8List->uint */ func MapUintToUint8ListOption(m Uint8ListOption, f func(Uint8List) uint) UintOption {  if m.IsDefined() { return Uint(f(*m.value)) } else { return NoneUintOption }  }
/* Uint8ListOption: Uint8List->uint8 */ func MapUint8ToUint8ListOption(m Uint8ListOption, f func(Uint8List) uint8) Uint8Option {  if m.IsDefined() { return Uint8(f(*m.value)) } else { return NoneUint8Option }  }
/* Uint8ListOption: Uint8List->uint16 */ func MapUint16ToUint8ListOption(m Uint8ListOption, f func(Uint8List) uint16) Uint16Option {  if m.IsDefined() { return Uint16(f(*m.value)) } else { return NoneUint16Option }  }
/* Uint8ListOption: Uint8List->uint32 */ func MapUint32ToUint8ListOption(m Uint8ListOption, f func(Uint8List) uint32) Uint32Option {  if m.IsDefined() { return Uint32(f(*m.value)) } else { return NoneUint32Option }  }
/* Uint8ListOption: Uint8List->uint64 */ func MapUint64ToUint8ListOption(m Uint8ListOption, f func(Uint8List) uint64) Uint64Option {  if m.IsDefined() { return Uint64(f(*m.value)) } else { return NoneUint64Option }  }
/* Uint8ListOption: Uint8List->uintptr */ func MapUintptrToUint8ListOption(m Uint8ListOption, f func(Uint8List) uintptr) UintptrOption {  if m.IsDefined() { return Uintptr(f(*m.value)) } else { return NoneUintptrOption }  }
/* Uint8ListOption: Uint8List->byte */ func MapByteToUint8ListOption(m Uint8ListOption, f func(Uint8List) byte) ByteOption {  if m.IsDefined() { return Byte(f(*m.value)) } else { return NoneByteOption }  }
/* Uint8ListOption: Uint8List->rune */ func MapRuneToUint8ListOption(m Uint8ListOption, f func(Uint8List) rune) RuneOption {  if m.IsDefined() { return Rune(f(*m.value)) } else { return NoneRuneOption }  }
/* Uint8ListOption: Uint8List->float32 */ func MapFloat32ToUint8ListOption(m Uint8ListOption, f func(Uint8List) float32) Float32Option {  if m.IsDefined() { return Float32(f(*m.value)) } else { return NoneFloat32Option }  }
/* Uint8ListOption: Uint8List->float64 */ func MapFloat64ToUint8ListOption(m Uint8ListOption, f func(Uint8List) float64) Float64Option {  if m.IsDefined() { return Float64(f(*m.value)) } else { return NoneFloat64Option }  }
/* Uint8ListOption: Uint8List->complex64 */ func MapComplex64ToUint8ListOption(m Uint8ListOption, f func(Uint8List) complex64) Complex64Option {  if m.IsDefined() { return Complex64(f(*m.value)) } else { return NoneComplex64Option }  }
/* Uint8ListOption: Uint8List->complex128 */ func MapComplex128ToUint8ListOption(m Uint8ListOption, f func(Uint8List) complex128) Complex128Option {  if m.IsDefined() { return Complex128(f(*m.value)) } else { return NoneComplex128Option }  }
/* Uint8ListOption: Uint8List->Any */ func MapAnyToUint8ListOption(m Uint8ListOption, f func(Uint8List) Any) AnyOption {  if m.IsDefined() { return AnyOpt(f(*m.value)) } else { return NoneAnyOption }  }
/* Uint8ListOption: Uint8List->BoolOption */ func MapBoolOptionToUint8ListOption(m Uint8ListOption, f func(Uint8List) BoolOption) BoolOptionOption {  if m.IsDefined() { return BoolBool(f(*m.value)) } else { return NoneBoolOptionOption }  }
/* Uint8ListOption: Uint8List->StringOption */ func MapStringOptionToUint8ListOption(m Uint8ListOption, f func(Uint8List) StringOption) StringOptionOption {  if m.IsDefined() { return StringString(f(*m.value)) } else { return NoneStringOptionOption }  }
/* Uint8ListOption: Uint8List->IntOption */ func MapIntOptionToUint8ListOption(m Uint8ListOption, f func(Uint8List) IntOption) IntOptionOption {  if m.IsDefined() { return IntInt(f(*m.value)) } else { return NoneIntOptionOption }  }
/* Uint8ListOption: Uint8List->Int8Option */ func MapInt8OptionToUint8ListOption(m Uint8ListOption, f func(Uint8List) Int8Option) Int8OptionOption {  if m.IsDefined() { return Int8Int8(f(*m.value)) } else { return NoneInt8OptionOption }  }
/* Uint8ListOption: Uint8List->Int16Option */ func MapInt16OptionToUint8ListOption(m Uint8ListOption, f func(Uint8List) Int16Option) Int16OptionOption {  if m.IsDefined() { return Int16Int16(f(*m.value)) } else { return NoneInt16OptionOption }  }
/* Uint8ListOption: Uint8List->Int32Option */ func MapInt32OptionToUint8ListOption(m Uint8ListOption, f func(Uint8List) Int32Option) Int32OptionOption {  if m.IsDefined() { return Int32Int32(f(*m.value)) } else { return NoneInt32OptionOption }  }
/* Uint8ListOption: Uint8List->Int64Option */ func MapInt64OptionToUint8ListOption(m Uint8ListOption, f func(Uint8List) Int64Option) Int64OptionOption {  if m.IsDefined() { return Int64Int64(f(*m.value)) } else { return NoneInt64OptionOption }  }
/* Uint8ListOption: Uint8List->UintOption */ func MapUintOptionToUint8ListOption(m Uint8ListOption, f func(Uint8List) UintOption) UintOptionOption {  if m.IsDefined() { return UintUint(f(*m.value)) } else { return NoneUintOptionOption }  }
/* Uint8ListOption: Uint8List->Uint8Option */ func MapUint8OptionToUint8ListOption(m Uint8ListOption, f func(Uint8List) Uint8Option) Uint8OptionOption {  if m.IsDefined() { return Uint8Uint8(f(*m.value)) } else { return NoneUint8OptionOption }  }
/* Uint8ListOption: Uint8List->Uint16Option */ func MapUint16OptionToUint8ListOption(m Uint8ListOption, f func(Uint8List) Uint16Option) Uint16OptionOption {  if m.IsDefined() { return Uint16Uint16(f(*m.value)) } else { return NoneUint16OptionOption }  }
/* Uint8ListOption: Uint8List->Uint32Option */ func MapUint32OptionToUint8ListOption(m Uint8ListOption, f func(Uint8List) Uint32Option) Uint32OptionOption {  if m.IsDefined() { return Uint32Uint32(f(*m.value)) } else { return NoneUint32OptionOption }  }
/* Uint8ListOption: Uint8List->Uint64Option */ func MapUint64OptionToUint8ListOption(m Uint8ListOption, f func(Uint8List) Uint64Option) Uint64OptionOption {  if m.IsDefined() { return Uint64Uint64(f(*m.value)) } else { return NoneUint64OptionOption }  }
/* Uint8ListOption: Uint8List->UintptrOption */ func MapUintptrOptionToUint8ListOption(m Uint8ListOption, f func(Uint8List) UintptrOption) UintptrOptionOption {  if m.IsDefined() { return UintptrUintptr(f(*m.value)) } else { return NoneUintptrOptionOption }  }
/* Uint8ListOption: Uint8List->ByteOption */ func MapByteOptionToUint8ListOption(m Uint8ListOption, f func(Uint8List) ByteOption) ByteOptionOption {  if m.IsDefined() { return ByteByte(f(*m.value)) } else { return NoneByteOptionOption }  }
/* Uint8ListOption: Uint8List->RuneOption */ func MapRuneOptionToUint8ListOption(m Uint8ListOption, f func(Uint8List) RuneOption) RuneOptionOption {  if m.IsDefined() { return RuneRune(f(*m.value)) } else { return NoneRuneOptionOption }  }
/* Uint8ListOption: Uint8List->Float32Option */ func MapFloat32OptionToUint8ListOption(m Uint8ListOption, f func(Uint8List) Float32Option) Float32OptionOption {  if m.IsDefined() { return Float32Float32(f(*m.value)) } else { return NoneFloat32OptionOption }  }
/* Uint8ListOption: Uint8List->Float64Option */ func MapFloat64OptionToUint8ListOption(m Uint8ListOption, f func(Uint8List) Float64Option) Float64OptionOption {  if m.IsDefined() { return Float64Float64(f(*m.value)) } else { return NoneFloat64OptionOption }  }
/* Uint8ListOption: Uint8List->Complex64Option */ func MapComplex64OptionToUint8ListOption(m Uint8ListOption, f func(Uint8List) Complex64Option) Complex64OptionOption {  if m.IsDefined() { return Complex64Complex64(f(*m.value)) } else { return NoneComplex64OptionOption }  }
/* Uint8ListOption: Uint8List->Complex128Option */ func MapComplex128OptionToUint8ListOption(m Uint8ListOption, f func(Uint8List) Complex128Option) Complex128OptionOption {  if m.IsDefined() { return Complex128Complex128(f(*m.value)) } else { return NoneComplex128OptionOption }  }
/* Uint8ListOption: Uint8List->AnyOption */ func MapAnyOptionToUint8ListOption(m Uint8ListOption, f func(Uint8List) AnyOption) AnyOptionOption {  if m.IsDefined() { return AnyOptAny(f(*m.value)) } else { return NoneAnyOptionOption }  }
/* Uint8ListOption: Uint8List->[]bool */ func MapBoolArrToUint8ListOption(m Uint8ListOption, f func(Uint8List) []bool) BoolArrOption {  if m.IsDefined() { return BoolArrOpt(f(*m.value)) } else { return NoneBoolArrOption }  }
/* Uint8ListOption: Uint8List->[]string */ func MapStringArrToUint8ListOption(m Uint8ListOption, f func(Uint8List) []string) StringArrOption {  if m.IsDefined() { return StringArrOpt(f(*m.value)) } else { return NoneStringArrOption }  }
/* Uint8ListOption: Uint8List->[]int */ func MapIntArrToUint8ListOption(m Uint8ListOption, f func(Uint8List) []int) IntArrOption {  if m.IsDefined() { return IntArrOpt(f(*m.value)) } else { return NoneIntArrOption }  }
/* Uint8ListOption: Uint8List->[]int8 */ func MapInt8ArrToUint8ListOption(m Uint8ListOption, f func(Uint8List) []int8) Int8ArrOption {  if m.IsDefined() { return Int8ArrOpt(f(*m.value)) } else { return NoneInt8ArrOption }  }
/* Uint8ListOption: Uint8List->[]int16 */ func MapInt16ArrToUint8ListOption(m Uint8ListOption, f func(Uint8List) []int16) Int16ArrOption {  if m.IsDefined() { return Int16ArrOpt(f(*m.value)) } else { return NoneInt16ArrOption }  }
/* Uint8ListOption: Uint8List->[]int32 */ func MapInt32ArrToUint8ListOption(m Uint8ListOption, f func(Uint8List) []int32) Int32ArrOption {  if m.IsDefined() { return Int32ArrOpt(f(*m.value)) } else { return NoneInt32ArrOption }  }
/* Uint8ListOption: Uint8List->[]int64 */ func MapInt64ArrToUint8ListOption(m Uint8ListOption, f func(Uint8List) []int64) Int64ArrOption {  if m.IsDefined() { return Int64ArrOpt(f(*m.value)) } else { return NoneInt64ArrOption }  }
/* Uint8ListOption: Uint8List->[]uint */ func MapUintArrToUint8ListOption(m Uint8ListOption, f func(Uint8List) []uint) UintArrOption {  if m.IsDefined() { return UintArrOpt(f(*m.value)) } else { return NoneUintArrOption }  }
/* Uint8ListOption: Uint8List->[]uint8 */ func MapUint8ArrToUint8ListOption(m Uint8ListOption, f func(Uint8List) []uint8) Uint8ArrOption {  if m.IsDefined() { return Uint8ArrOpt(f(*m.value)) } else { return NoneUint8ArrOption }  }
/* Uint8ListOption: Uint8List->[]uint16 */ func MapUint16ArrToUint8ListOption(m Uint8ListOption, f func(Uint8List) []uint16) Uint16ArrOption {  if m.IsDefined() { return Uint16ArrOpt(f(*m.value)) } else { return NoneUint16ArrOption }  }
/* Uint8ListOption: Uint8List->[]uint32 */ func MapUint32ArrToUint8ListOption(m Uint8ListOption, f func(Uint8List) []uint32) Uint32ArrOption {  if m.IsDefined() { return Uint32ArrOpt(f(*m.value)) } else { return NoneUint32ArrOption }  }
/* Uint8ListOption: Uint8List->[]uint64 */ func MapUint64ArrToUint8ListOption(m Uint8ListOption, f func(Uint8List) []uint64) Uint64ArrOption {  if m.IsDefined() { return Uint64ArrOpt(f(*m.value)) } else { return NoneUint64ArrOption }  }
/* Uint8ListOption: Uint8List->[]uintptr */ func MapUintptrArrToUint8ListOption(m Uint8ListOption, f func(Uint8List) []uintptr) UintptrArrOption {  if m.IsDefined() { return UintptrArrOpt(f(*m.value)) } else { return NoneUintptrArrOption }  }
/* Uint8ListOption: Uint8List->[]byte */ func MapByteArrToUint8ListOption(m Uint8ListOption, f func(Uint8List) []byte) ByteArrOption {  if m.IsDefined() { return ByteArrOpt(f(*m.value)) } else { return NoneByteArrOption }  }
/* Uint8ListOption: Uint8List->[]rune */ func MapRuneArrToUint8ListOption(m Uint8ListOption, f func(Uint8List) []rune) RuneArrOption {  if m.IsDefined() { return RuneArrOpt(f(*m.value)) } else { return NoneRuneArrOption }  }
/* Uint8ListOption: Uint8List->[]float32 */ func MapFloat32ArrToUint8ListOption(m Uint8ListOption, f func(Uint8List) []float32) Float32ArrOption {  if m.IsDefined() { return Float32ArrOpt(f(*m.value)) } else { return NoneFloat32ArrOption }  }
/* Uint8ListOption: Uint8List->[]float64 */ func MapFloat64ArrToUint8ListOption(m Uint8ListOption, f func(Uint8List) []float64) Float64ArrOption {  if m.IsDefined() { return Float64ArrOpt(f(*m.value)) } else { return NoneFloat64ArrOption }  }
/* Uint8ListOption: Uint8List->[]complex64 */ func MapComplex64ArrToUint8ListOption(m Uint8ListOption, f func(Uint8List) []complex64) Complex64ArrOption {  if m.IsDefined() { return Complex64ArrOpt(f(*m.value)) } else { return NoneComplex64ArrOption }  }
/* Uint8ListOption: Uint8List->[]complex128 */ func MapComplex128ArrToUint8ListOption(m Uint8ListOption, f func(Uint8List) []complex128) Complex128ArrOption {  if m.IsDefined() { return Complex128ArrOpt(f(*m.value)) } else { return NoneComplex128ArrOption }  }
/* Uint8ListOption: Uint8List->[]Any */ func MapAnyArrToUint8ListOption(m Uint8ListOption, f func(Uint8List) []Any) AnyArrOption {  if m.IsDefined() { return AnyArrOpt(f(*m.value)) } else { return NoneAnyArrOption }  }
/* Uint8ListOption: Uint8List->BoolList */ func MapBoolListToUint8ListOption(m Uint8ListOption, f func(Uint8List) BoolList) BoolListOption {  if m.IsDefined() { return BoolListOpt(f(*m.value)) } else { return NoneBoolListOption }  }
/* Uint8ListOption: Uint8List->StringList */ func MapStringListToUint8ListOption(m Uint8ListOption, f func(Uint8List) StringList) StringListOption {  if m.IsDefined() { return StringListOpt(f(*m.value)) } else { return NoneStringListOption }  }
/* Uint8ListOption: Uint8List->IntList */ func MapIntListToUint8ListOption(m Uint8ListOption, f func(Uint8List) IntList) IntListOption {  if m.IsDefined() { return IntListOpt(f(*m.value)) } else { return NoneIntListOption }  }
/* Uint8ListOption: Uint8List->Int8List */ func MapInt8ListToUint8ListOption(m Uint8ListOption, f func(Uint8List) Int8List) Int8ListOption {  if m.IsDefined() { return Int8ListOpt(f(*m.value)) } else { return NoneInt8ListOption }  }
/* Uint8ListOption: Uint8List->Int16List */ func MapInt16ListToUint8ListOption(m Uint8ListOption, f func(Uint8List) Int16List) Int16ListOption {  if m.IsDefined() { return Int16ListOpt(f(*m.value)) } else { return NoneInt16ListOption }  }
/* Uint8ListOption: Uint8List->Int32List */ func MapInt32ListToUint8ListOption(m Uint8ListOption, f func(Uint8List) Int32List) Int32ListOption {  if m.IsDefined() { return Int32ListOpt(f(*m.value)) } else { return NoneInt32ListOption }  }
/* Uint8ListOption: Uint8List->Int64List */ func MapInt64ListToUint8ListOption(m Uint8ListOption, f func(Uint8List) Int64List) Int64ListOption {  if m.IsDefined() { return Int64ListOpt(f(*m.value)) } else { return NoneInt64ListOption }  }
/* Uint8ListOption: Uint8List->UintList */ func MapUintListToUint8ListOption(m Uint8ListOption, f func(Uint8List) UintList) UintListOption {  if m.IsDefined() { return UintListOpt(f(*m.value)) } else { return NoneUintListOption }  }
/* Uint8ListOption: Uint8List->Uint8List */ func MapUint8ListToUint8ListOption(m Uint8ListOption, f func(Uint8List) Uint8List) Uint8ListOption {  if m.IsDefined() { return Uint8ListOpt(f(*m.value)) } else { return NoneUint8ListOption }  }
/* Uint8ListOption: Uint8List->Uint16List */ func MapUint16ListToUint8ListOption(m Uint8ListOption, f func(Uint8List) Uint16List) Uint16ListOption {  if m.IsDefined() { return Uint16ListOpt(f(*m.value)) } else { return NoneUint16ListOption }  }
/* Uint8ListOption: Uint8List->Uint32List */ func MapUint32ListToUint8ListOption(m Uint8ListOption, f func(Uint8List) Uint32List) Uint32ListOption {  if m.IsDefined() { return Uint32ListOpt(f(*m.value)) } else { return NoneUint32ListOption }  }
/* Uint8ListOption: Uint8List->Uint64List */ func MapUint64ListToUint8ListOption(m Uint8ListOption, f func(Uint8List) Uint64List) Uint64ListOption {  if m.IsDefined() { return Uint64ListOpt(f(*m.value)) } else { return NoneUint64ListOption }  }
/* Uint8ListOption: Uint8List->UintptrList */ func MapUintptrListToUint8ListOption(m Uint8ListOption, f func(Uint8List) UintptrList) UintptrListOption {  if m.IsDefined() { return UintptrListOpt(f(*m.value)) } else { return NoneUintptrListOption }  }
/* Uint8ListOption: Uint8List->ByteList */ func MapByteListToUint8ListOption(m Uint8ListOption, f func(Uint8List) ByteList) ByteListOption {  if m.IsDefined() { return ByteListOpt(f(*m.value)) } else { return NoneByteListOption }  }
/* Uint8ListOption: Uint8List->RuneList */ func MapRuneListToUint8ListOption(m Uint8ListOption, f func(Uint8List) RuneList) RuneListOption {  if m.IsDefined() { return RuneListOpt(f(*m.value)) } else { return NoneRuneListOption }  }
/* Uint8ListOption: Uint8List->Float32List */ func MapFloat32ListToUint8ListOption(m Uint8ListOption, f func(Uint8List) Float32List) Float32ListOption {  if m.IsDefined() { return Float32ListOpt(f(*m.value)) } else { return NoneFloat32ListOption }  }
/* Uint8ListOption: Uint8List->Float64List */ func MapFloat64ListToUint8ListOption(m Uint8ListOption, f func(Uint8List) Float64List) Float64ListOption {  if m.IsDefined() { return Float64ListOpt(f(*m.value)) } else { return NoneFloat64ListOption }  }
/* Uint8ListOption: Uint8List->Complex64List */ func MapComplex64ListToUint8ListOption(m Uint8ListOption, f func(Uint8List) Complex64List) Complex64ListOption {  if m.IsDefined() { return Complex64ListOpt(f(*m.value)) } else { return NoneComplex64ListOption }  }
/* Uint8ListOption: Uint8List->Complex128List */ func MapComplex128ListToUint8ListOption(m Uint8ListOption, f func(Uint8List) Complex128List) Complex128ListOption {  if m.IsDefined() { return Complex128ListOpt(f(*m.value)) } else { return NoneComplex128ListOption }  }
/* Uint8ListOption: Uint8List->AnyList */ func MapAnyListToUint8ListOption(m Uint8ListOption, f func(Uint8List) AnyList) AnyListOption {  if m.IsDefined() { return AnyListOpt(f(*m.value)) } else { return NoneAnyListOption }  }
/* Uint16ListOption: Uint16List->bool */ func MapBoolToUint16ListOption(m Uint16ListOption, f func(Uint16List) bool) BoolOption {  if m.IsDefined() { return Bool(f(*m.value)) } else { return NoneBoolOption }  }
/* Uint16ListOption: Uint16List->string */ func MapStringToUint16ListOption(m Uint16ListOption, f func(Uint16List) string) StringOption {  if m.IsDefined() { return String(f(*m.value)) } else { return NoneStringOption }  }
/* Uint16ListOption: Uint16List->int */ func MapIntToUint16ListOption(m Uint16ListOption, f func(Uint16List) int) IntOption {  if m.IsDefined() { return Int(f(*m.value)) } else { return NoneIntOption }  }
/* Uint16ListOption: Uint16List->int8 */ func MapInt8ToUint16ListOption(m Uint16ListOption, f func(Uint16List) int8) Int8Option {  if m.IsDefined() { return Int8(f(*m.value)) } else { return NoneInt8Option }  }
/* Uint16ListOption: Uint16List->int16 */ func MapInt16ToUint16ListOption(m Uint16ListOption, f func(Uint16List) int16) Int16Option {  if m.IsDefined() { return Int16(f(*m.value)) } else { return NoneInt16Option }  }
/* Uint16ListOption: Uint16List->int32 */ func MapInt32ToUint16ListOption(m Uint16ListOption, f func(Uint16List) int32) Int32Option {  if m.IsDefined() { return Int32(f(*m.value)) } else { return NoneInt32Option }  }
/* Uint16ListOption: Uint16List->int64 */ func MapInt64ToUint16ListOption(m Uint16ListOption, f func(Uint16List) int64) Int64Option {  if m.IsDefined() { return Int64(f(*m.value)) } else { return NoneInt64Option }  }
/* Uint16ListOption: Uint16List->uint */ func MapUintToUint16ListOption(m Uint16ListOption, f func(Uint16List) uint) UintOption {  if m.IsDefined() { return Uint(f(*m.value)) } else { return NoneUintOption }  }
/* Uint16ListOption: Uint16List->uint8 */ func MapUint8ToUint16ListOption(m Uint16ListOption, f func(Uint16List) uint8) Uint8Option {  if m.IsDefined() { return Uint8(f(*m.value)) } else { return NoneUint8Option }  }
/* Uint16ListOption: Uint16List->uint16 */ func MapUint16ToUint16ListOption(m Uint16ListOption, f func(Uint16List) uint16) Uint16Option {  if m.IsDefined() { return Uint16(f(*m.value)) } else { return NoneUint16Option }  }
/* Uint16ListOption: Uint16List->uint32 */ func MapUint32ToUint16ListOption(m Uint16ListOption, f func(Uint16List) uint32) Uint32Option {  if m.IsDefined() { return Uint32(f(*m.value)) } else { return NoneUint32Option }  }
/* Uint16ListOption: Uint16List->uint64 */ func MapUint64ToUint16ListOption(m Uint16ListOption, f func(Uint16List) uint64) Uint64Option {  if m.IsDefined() { return Uint64(f(*m.value)) } else { return NoneUint64Option }  }
/* Uint16ListOption: Uint16List->uintptr */ func MapUintptrToUint16ListOption(m Uint16ListOption, f func(Uint16List) uintptr) UintptrOption {  if m.IsDefined() { return Uintptr(f(*m.value)) } else { return NoneUintptrOption }  }
/* Uint16ListOption: Uint16List->byte */ func MapByteToUint16ListOption(m Uint16ListOption, f func(Uint16List) byte) ByteOption {  if m.IsDefined() { return Byte(f(*m.value)) } else { return NoneByteOption }  }
/* Uint16ListOption: Uint16List->rune */ func MapRuneToUint16ListOption(m Uint16ListOption, f func(Uint16List) rune) RuneOption {  if m.IsDefined() { return Rune(f(*m.value)) } else { return NoneRuneOption }  }
/* Uint16ListOption: Uint16List->float32 */ func MapFloat32ToUint16ListOption(m Uint16ListOption, f func(Uint16List) float32) Float32Option {  if m.IsDefined() { return Float32(f(*m.value)) } else { return NoneFloat32Option }  }
/* Uint16ListOption: Uint16List->float64 */ func MapFloat64ToUint16ListOption(m Uint16ListOption, f func(Uint16List) float64) Float64Option {  if m.IsDefined() { return Float64(f(*m.value)) } else { return NoneFloat64Option }  }
/* Uint16ListOption: Uint16List->complex64 */ func MapComplex64ToUint16ListOption(m Uint16ListOption, f func(Uint16List) complex64) Complex64Option {  if m.IsDefined() { return Complex64(f(*m.value)) } else { return NoneComplex64Option }  }
/* Uint16ListOption: Uint16List->complex128 */ func MapComplex128ToUint16ListOption(m Uint16ListOption, f func(Uint16List) complex128) Complex128Option {  if m.IsDefined() { return Complex128(f(*m.value)) } else { return NoneComplex128Option }  }
/* Uint16ListOption: Uint16List->Any */ func MapAnyToUint16ListOption(m Uint16ListOption, f func(Uint16List) Any) AnyOption {  if m.IsDefined() { return AnyOpt(f(*m.value)) } else { return NoneAnyOption }  }
/* Uint16ListOption: Uint16List->BoolOption */ func MapBoolOptionToUint16ListOption(m Uint16ListOption, f func(Uint16List) BoolOption) BoolOptionOption {  if m.IsDefined() { return BoolBool(f(*m.value)) } else { return NoneBoolOptionOption }  }
/* Uint16ListOption: Uint16List->StringOption */ func MapStringOptionToUint16ListOption(m Uint16ListOption, f func(Uint16List) StringOption) StringOptionOption {  if m.IsDefined() { return StringString(f(*m.value)) } else { return NoneStringOptionOption }  }
/* Uint16ListOption: Uint16List->IntOption */ func MapIntOptionToUint16ListOption(m Uint16ListOption, f func(Uint16List) IntOption) IntOptionOption {  if m.IsDefined() { return IntInt(f(*m.value)) } else { return NoneIntOptionOption }  }
/* Uint16ListOption: Uint16List->Int8Option */ func MapInt8OptionToUint16ListOption(m Uint16ListOption, f func(Uint16List) Int8Option) Int8OptionOption {  if m.IsDefined() { return Int8Int8(f(*m.value)) } else { return NoneInt8OptionOption }  }
/* Uint16ListOption: Uint16List->Int16Option */ func MapInt16OptionToUint16ListOption(m Uint16ListOption, f func(Uint16List) Int16Option) Int16OptionOption {  if m.IsDefined() { return Int16Int16(f(*m.value)) } else { return NoneInt16OptionOption }  }
/* Uint16ListOption: Uint16List->Int32Option */ func MapInt32OptionToUint16ListOption(m Uint16ListOption, f func(Uint16List) Int32Option) Int32OptionOption {  if m.IsDefined() { return Int32Int32(f(*m.value)) } else { return NoneInt32OptionOption }  }
/* Uint16ListOption: Uint16List->Int64Option */ func MapInt64OptionToUint16ListOption(m Uint16ListOption, f func(Uint16List) Int64Option) Int64OptionOption {  if m.IsDefined() { return Int64Int64(f(*m.value)) } else { return NoneInt64OptionOption }  }
/* Uint16ListOption: Uint16List->UintOption */ func MapUintOptionToUint16ListOption(m Uint16ListOption, f func(Uint16List) UintOption) UintOptionOption {  if m.IsDefined() { return UintUint(f(*m.value)) } else { return NoneUintOptionOption }  }
/* Uint16ListOption: Uint16List->Uint8Option */ func MapUint8OptionToUint16ListOption(m Uint16ListOption, f func(Uint16List) Uint8Option) Uint8OptionOption {  if m.IsDefined() { return Uint8Uint8(f(*m.value)) } else { return NoneUint8OptionOption }  }
/* Uint16ListOption: Uint16List->Uint16Option */ func MapUint16OptionToUint16ListOption(m Uint16ListOption, f func(Uint16List) Uint16Option) Uint16OptionOption {  if m.IsDefined() { return Uint16Uint16(f(*m.value)) } else { return NoneUint16OptionOption }  }
/* Uint16ListOption: Uint16List->Uint32Option */ func MapUint32OptionToUint16ListOption(m Uint16ListOption, f func(Uint16List) Uint32Option) Uint32OptionOption {  if m.IsDefined() { return Uint32Uint32(f(*m.value)) } else { return NoneUint32OptionOption }  }
/* Uint16ListOption: Uint16List->Uint64Option */ func MapUint64OptionToUint16ListOption(m Uint16ListOption, f func(Uint16List) Uint64Option) Uint64OptionOption {  if m.IsDefined() { return Uint64Uint64(f(*m.value)) } else { return NoneUint64OptionOption }  }
/* Uint16ListOption: Uint16List->UintptrOption */ func MapUintptrOptionToUint16ListOption(m Uint16ListOption, f func(Uint16List) UintptrOption) UintptrOptionOption {  if m.IsDefined() { return UintptrUintptr(f(*m.value)) } else { return NoneUintptrOptionOption }  }
/* Uint16ListOption: Uint16List->ByteOption */ func MapByteOptionToUint16ListOption(m Uint16ListOption, f func(Uint16List) ByteOption) ByteOptionOption {  if m.IsDefined() { return ByteByte(f(*m.value)) } else { return NoneByteOptionOption }  }
/* Uint16ListOption: Uint16List->RuneOption */ func MapRuneOptionToUint16ListOption(m Uint16ListOption, f func(Uint16List) RuneOption) RuneOptionOption {  if m.IsDefined() { return RuneRune(f(*m.value)) } else { return NoneRuneOptionOption }  }
/* Uint16ListOption: Uint16List->Float32Option */ func MapFloat32OptionToUint16ListOption(m Uint16ListOption, f func(Uint16List) Float32Option) Float32OptionOption {  if m.IsDefined() { return Float32Float32(f(*m.value)) } else { return NoneFloat32OptionOption }  }
/* Uint16ListOption: Uint16List->Float64Option */ func MapFloat64OptionToUint16ListOption(m Uint16ListOption, f func(Uint16List) Float64Option) Float64OptionOption {  if m.IsDefined() { return Float64Float64(f(*m.value)) } else { return NoneFloat64OptionOption }  }
/* Uint16ListOption: Uint16List->Complex64Option */ func MapComplex64OptionToUint16ListOption(m Uint16ListOption, f func(Uint16List) Complex64Option) Complex64OptionOption {  if m.IsDefined() { return Complex64Complex64(f(*m.value)) } else { return NoneComplex64OptionOption }  }
/* Uint16ListOption: Uint16List->Complex128Option */ func MapComplex128OptionToUint16ListOption(m Uint16ListOption, f func(Uint16List) Complex128Option) Complex128OptionOption {  if m.IsDefined() { return Complex128Complex128(f(*m.value)) } else { return NoneComplex128OptionOption }  }
/* Uint16ListOption: Uint16List->AnyOption */ func MapAnyOptionToUint16ListOption(m Uint16ListOption, f func(Uint16List) AnyOption) AnyOptionOption {  if m.IsDefined() { return AnyOptAny(f(*m.value)) } else { return NoneAnyOptionOption }  }
/* Uint16ListOption: Uint16List->[]bool */ func MapBoolArrToUint16ListOption(m Uint16ListOption, f func(Uint16List) []bool) BoolArrOption {  if m.IsDefined() { return BoolArrOpt(f(*m.value)) } else { return NoneBoolArrOption }  }
/* Uint16ListOption: Uint16List->[]string */ func MapStringArrToUint16ListOption(m Uint16ListOption, f func(Uint16List) []string) StringArrOption {  if m.IsDefined() { return StringArrOpt(f(*m.value)) } else { return NoneStringArrOption }  }
/* Uint16ListOption: Uint16List->[]int */ func MapIntArrToUint16ListOption(m Uint16ListOption, f func(Uint16List) []int) IntArrOption {  if m.IsDefined() { return IntArrOpt(f(*m.value)) } else { return NoneIntArrOption }  }
/* Uint16ListOption: Uint16List->[]int8 */ func MapInt8ArrToUint16ListOption(m Uint16ListOption, f func(Uint16List) []int8) Int8ArrOption {  if m.IsDefined() { return Int8ArrOpt(f(*m.value)) } else { return NoneInt8ArrOption }  }
/* Uint16ListOption: Uint16List->[]int16 */ func MapInt16ArrToUint16ListOption(m Uint16ListOption, f func(Uint16List) []int16) Int16ArrOption {  if m.IsDefined() { return Int16ArrOpt(f(*m.value)) } else { return NoneInt16ArrOption }  }
/* Uint16ListOption: Uint16List->[]int32 */ func MapInt32ArrToUint16ListOption(m Uint16ListOption, f func(Uint16List) []int32) Int32ArrOption {  if m.IsDefined() { return Int32ArrOpt(f(*m.value)) } else { return NoneInt32ArrOption }  }
/* Uint16ListOption: Uint16List->[]int64 */ func MapInt64ArrToUint16ListOption(m Uint16ListOption, f func(Uint16List) []int64) Int64ArrOption {  if m.IsDefined() { return Int64ArrOpt(f(*m.value)) } else { return NoneInt64ArrOption }  }
/* Uint16ListOption: Uint16List->[]uint */ func MapUintArrToUint16ListOption(m Uint16ListOption, f func(Uint16List) []uint) UintArrOption {  if m.IsDefined() { return UintArrOpt(f(*m.value)) } else { return NoneUintArrOption }  }
/* Uint16ListOption: Uint16List->[]uint8 */ func MapUint8ArrToUint16ListOption(m Uint16ListOption, f func(Uint16List) []uint8) Uint8ArrOption {  if m.IsDefined() { return Uint8ArrOpt(f(*m.value)) } else { return NoneUint8ArrOption }  }
/* Uint16ListOption: Uint16List->[]uint16 */ func MapUint16ArrToUint16ListOption(m Uint16ListOption, f func(Uint16List) []uint16) Uint16ArrOption {  if m.IsDefined() { return Uint16ArrOpt(f(*m.value)) } else { return NoneUint16ArrOption }  }
/* Uint16ListOption: Uint16List->[]uint32 */ func MapUint32ArrToUint16ListOption(m Uint16ListOption, f func(Uint16List) []uint32) Uint32ArrOption {  if m.IsDefined() { return Uint32ArrOpt(f(*m.value)) } else { return NoneUint32ArrOption }  }
/* Uint16ListOption: Uint16List->[]uint64 */ func MapUint64ArrToUint16ListOption(m Uint16ListOption, f func(Uint16List) []uint64) Uint64ArrOption {  if m.IsDefined() { return Uint64ArrOpt(f(*m.value)) } else { return NoneUint64ArrOption }  }
/* Uint16ListOption: Uint16List->[]uintptr */ func MapUintptrArrToUint16ListOption(m Uint16ListOption, f func(Uint16List) []uintptr) UintptrArrOption {  if m.IsDefined() { return UintptrArrOpt(f(*m.value)) } else { return NoneUintptrArrOption }  }
/* Uint16ListOption: Uint16List->[]byte */ func MapByteArrToUint16ListOption(m Uint16ListOption, f func(Uint16List) []byte) ByteArrOption {  if m.IsDefined() { return ByteArrOpt(f(*m.value)) } else { return NoneByteArrOption }  }
/* Uint16ListOption: Uint16List->[]rune */ func MapRuneArrToUint16ListOption(m Uint16ListOption, f func(Uint16List) []rune) RuneArrOption {  if m.IsDefined() { return RuneArrOpt(f(*m.value)) } else { return NoneRuneArrOption }  }
/* Uint16ListOption: Uint16List->[]float32 */ func MapFloat32ArrToUint16ListOption(m Uint16ListOption, f func(Uint16List) []float32) Float32ArrOption {  if m.IsDefined() { return Float32ArrOpt(f(*m.value)) } else { return NoneFloat32ArrOption }  }
/* Uint16ListOption: Uint16List->[]float64 */ func MapFloat64ArrToUint16ListOption(m Uint16ListOption, f func(Uint16List) []float64) Float64ArrOption {  if m.IsDefined() { return Float64ArrOpt(f(*m.value)) } else { return NoneFloat64ArrOption }  }
/* Uint16ListOption: Uint16List->[]complex64 */ func MapComplex64ArrToUint16ListOption(m Uint16ListOption, f func(Uint16List) []complex64) Complex64ArrOption {  if m.IsDefined() { return Complex64ArrOpt(f(*m.value)) } else { return NoneComplex64ArrOption }  }
/* Uint16ListOption: Uint16List->[]complex128 */ func MapComplex128ArrToUint16ListOption(m Uint16ListOption, f func(Uint16List) []complex128) Complex128ArrOption {  if m.IsDefined() { return Complex128ArrOpt(f(*m.value)) } else { return NoneComplex128ArrOption }  }
/* Uint16ListOption: Uint16List->[]Any */ func MapAnyArrToUint16ListOption(m Uint16ListOption, f func(Uint16List) []Any) AnyArrOption {  if m.IsDefined() { return AnyArrOpt(f(*m.value)) } else { return NoneAnyArrOption }  }
/* Uint16ListOption: Uint16List->BoolList */ func MapBoolListToUint16ListOption(m Uint16ListOption, f func(Uint16List) BoolList) BoolListOption {  if m.IsDefined() { return BoolListOpt(f(*m.value)) } else { return NoneBoolListOption }  }
/* Uint16ListOption: Uint16List->StringList */ func MapStringListToUint16ListOption(m Uint16ListOption, f func(Uint16List) StringList) StringListOption {  if m.IsDefined() { return StringListOpt(f(*m.value)) } else { return NoneStringListOption }  }
/* Uint16ListOption: Uint16List->IntList */ func MapIntListToUint16ListOption(m Uint16ListOption, f func(Uint16List) IntList) IntListOption {  if m.IsDefined() { return IntListOpt(f(*m.value)) } else { return NoneIntListOption }  }
/* Uint16ListOption: Uint16List->Int8List */ func MapInt8ListToUint16ListOption(m Uint16ListOption, f func(Uint16List) Int8List) Int8ListOption {  if m.IsDefined() { return Int8ListOpt(f(*m.value)) } else { return NoneInt8ListOption }  }
/* Uint16ListOption: Uint16List->Int16List */ func MapInt16ListToUint16ListOption(m Uint16ListOption, f func(Uint16List) Int16List) Int16ListOption {  if m.IsDefined() { return Int16ListOpt(f(*m.value)) } else { return NoneInt16ListOption }  }
/* Uint16ListOption: Uint16List->Int32List */ func MapInt32ListToUint16ListOption(m Uint16ListOption, f func(Uint16List) Int32List) Int32ListOption {  if m.IsDefined() { return Int32ListOpt(f(*m.value)) } else { return NoneInt32ListOption }  }
/* Uint16ListOption: Uint16List->Int64List */ func MapInt64ListToUint16ListOption(m Uint16ListOption, f func(Uint16List) Int64List) Int64ListOption {  if m.IsDefined() { return Int64ListOpt(f(*m.value)) } else { return NoneInt64ListOption }  }
/* Uint16ListOption: Uint16List->UintList */ func MapUintListToUint16ListOption(m Uint16ListOption, f func(Uint16List) UintList) UintListOption {  if m.IsDefined() { return UintListOpt(f(*m.value)) } else { return NoneUintListOption }  }
/* Uint16ListOption: Uint16List->Uint8List */ func MapUint8ListToUint16ListOption(m Uint16ListOption, f func(Uint16List) Uint8List) Uint8ListOption {  if m.IsDefined() { return Uint8ListOpt(f(*m.value)) } else { return NoneUint8ListOption }  }
/* Uint16ListOption: Uint16List->Uint16List */ func MapUint16ListToUint16ListOption(m Uint16ListOption, f func(Uint16List) Uint16List) Uint16ListOption {  if m.IsDefined() { return Uint16ListOpt(f(*m.value)) } else { return NoneUint16ListOption }  }
/* Uint16ListOption: Uint16List->Uint32List */ func MapUint32ListToUint16ListOption(m Uint16ListOption, f func(Uint16List) Uint32List) Uint32ListOption {  if m.IsDefined() { return Uint32ListOpt(f(*m.value)) } else { return NoneUint32ListOption }  }
/* Uint16ListOption: Uint16List->Uint64List */ func MapUint64ListToUint16ListOption(m Uint16ListOption, f func(Uint16List) Uint64List) Uint64ListOption {  if m.IsDefined() { return Uint64ListOpt(f(*m.value)) } else { return NoneUint64ListOption }  }
/* Uint16ListOption: Uint16List->UintptrList */ func MapUintptrListToUint16ListOption(m Uint16ListOption, f func(Uint16List) UintptrList) UintptrListOption {  if m.IsDefined() { return UintptrListOpt(f(*m.value)) } else { return NoneUintptrListOption }  }
/* Uint16ListOption: Uint16List->ByteList */ func MapByteListToUint16ListOption(m Uint16ListOption, f func(Uint16List) ByteList) ByteListOption {  if m.IsDefined() { return ByteListOpt(f(*m.value)) } else { return NoneByteListOption }  }
/* Uint16ListOption: Uint16List->RuneList */ func MapRuneListToUint16ListOption(m Uint16ListOption, f func(Uint16List) RuneList) RuneListOption {  if m.IsDefined() { return RuneListOpt(f(*m.value)) } else { return NoneRuneListOption }  }
/* Uint16ListOption: Uint16List->Float32List */ func MapFloat32ListToUint16ListOption(m Uint16ListOption, f func(Uint16List) Float32List) Float32ListOption {  if m.IsDefined() { return Float32ListOpt(f(*m.value)) } else { return NoneFloat32ListOption }  }
/* Uint16ListOption: Uint16List->Float64List */ func MapFloat64ListToUint16ListOption(m Uint16ListOption, f func(Uint16List) Float64List) Float64ListOption {  if m.IsDefined() { return Float64ListOpt(f(*m.value)) } else { return NoneFloat64ListOption }  }
/* Uint16ListOption: Uint16List->Complex64List */ func MapComplex64ListToUint16ListOption(m Uint16ListOption, f func(Uint16List) Complex64List) Complex64ListOption {  if m.IsDefined() { return Complex64ListOpt(f(*m.value)) } else { return NoneComplex64ListOption }  }
/* Uint16ListOption: Uint16List->Complex128List */ func MapComplex128ListToUint16ListOption(m Uint16ListOption, f func(Uint16List) Complex128List) Complex128ListOption {  if m.IsDefined() { return Complex128ListOpt(f(*m.value)) } else { return NoneComplex128ListOption }  }
/* Uint16ListOption: Uint16List->AnyList */ func MapAnyListToUint16ListOption(m Uint16ListOption, f func(Uint16List) AnyList) AnyListOption {  if m.IsDefined() { return AnyListOpt(f(*m.value)) } else { return NoneAnyListOption }  }
/* Uint32ListOption: Uint32List->bool */ func MapBoolToUint32ListOption(m Uint32ListOption, f func(Uint32List) bool) BoolOption {  if m.IsDefined() { return Bool(f(*m.value)) } else { return NoneBoolOption }  }
/* Uint32ListOption: Uint32List->string */ func MapStringToUint32ListOption(m Uint32ListOption, f func(Uint32List) string) StringOption {  if m.IsDefined() { return String(f(*m.value)) } else { return NoneStringOption }  }
/* Uint32ListOption: Uint32List->int */ func MapIntToUint32ListOption(m Uint32ListOption, f func(Uint32List) int) IntOption {  if m.IsDefined() { return Int(f(*m.value)) } else { return NoneIntOption }  }
/* Uint32ListOption: Uint32List->int8 */ func MapInt8ToUint32ListOption(m Uint32ListOption, f func(Uint32List) int8) Int8Option {  if m.IsDefined() { return Int8(f(*m.value)) } else { return NoneInt8Option }  }
/* Uint32ListOption: Uint32List->int16 */ func MapInt16ToUint32ListOption(m Uint32ListOption, f func(Uint32List) int16) Int16Option {  if m.IsDefined() { return Int16(f(*m.value)) } else { return NoneInt16Option }  }
/* Uint32ListOption: Uint32List->int32 */ func MapInt32ToUint32ListOption(m Uint32ListOption, f func(Uint32List) int32) Int32Option {  if m.IsDefined() { return Int32(f(*m.value)) } else { return NoneInt32Option }  }
/* Uint32ListOption: Uint32List->int64 */ func MapInt64ToUint32ListOption(m Uint32ListOption, f func(Uint32List) int64) Int64Option {  if m.IsDefined() { return Int64(f(*m.value)) } else { return NoneInt64Option }  }
/* Uint32ListOption: Uint32List->uint */ func MapUintToUint32ListOption(m Uint32ListOption, f func(Uint32List) uint) UintOption {  if m.IsDefined() { return Uint(f(*m.value)) } else { return NoneUintOption }  }
/* Uint32ListOption: Uint32List->uint8 */ func MapUint8ToUint32ListOption(m Uint32ListOption, f func(Uint32List) uint8) Uint8Option {  if m.IsDefined() { return Uint8(f(*m.value)) } else { return NoneUint8Option }  }
/* Uint32ListOption: Uint32List->uint16 */ func MapUint16ToUint32ListOption(m Uint32ListOption, f func(Uint32List) uint16) Uint16Option {  if m.IsDefined() { return Uint16(f(*m.value)) } else { return NoneUint16Option }  }
/* Uint32ListOption: Uint32List->uint32 */ func MapUint32ToUint32ListOption(m Uint32ListOption, f func(Uint32List) uint32) Uint32Option {  if m.IsDefined() { return Uint32(f(*m.value)) } else { return NoneUint32Option }  }
/* Uint32ListOption: Uint32List->uint64 */ func MapUint64ToUint32ListOption(m Uint32ListOption, f func(Uint32List) uint64) Uint64Option {  if m.IsDefined() { return Uint64(f(*m.value)) } else { return NoneUint64Option }  }
/* Uint32ListOption: Uint32List->uintptr */ func MapUintptrToUint32ListOption(m Uint32ListOption, f func(Uint32List) uintptr) UintptrOption {  if m.IsDefined() { return Uintptr(f(*m.value)) } else { return NoneUintptrOption }  }
/* Uint32ListOption: Uint32List->byte */ func MapByteToUint32ListOption(m Uint32ListOption, f func(Uint32List) byte) ByteOption {  if m.IsDefined() { return Byte(f(*m.value)) } else { return NoneByteOption }  }
/* Uint32ListOption: Uint32List->rune */ func MapRuneToUint32ListOption(m Uint32ListOption, f func(Uint32List) rune) RuneOption {  if m.IsDefined() { return Rune(f(*m.value)) } else { return NoneRuneOption }  }
/* Uint32ListOption: Uint32List->float32 */ func MapFloat32ToUint32ListOption(m Uint32ListOption, f func(Uint32List) float32) Float32Option {  if m.IsDefined() { return Float32(f(*m.value)) } else { return NoneFloat32Option }  }
/* Uint32ListOption: Uint32List->float64 */ func MapFloat64ToUint32ListOption(m Uint32ListOption, f func(Uint32List) float64) Float64Option {  if m.IsDefined() { return Float64(f(*m.value)) } else { return NoneFloat64Option }  }
/* Uint32ListOption: Uint32List->complex64 */ func MapComplex64ToUint32ListOption(m Uint32ListOption, f func(Uint32List) complex64) Complex64Option {  if m.IsDefined() { return Complex64(f(*m.value)) } else { return NoneComplex64Option }  }
/* Uint32ListOption: Uint32List->complex128 */ func MapComplex128ToUint32ListOption(m Uint32ListOption, f func(Uint32List) complex128) Complex128Option {  if m.IsDefined() { return Complex128(f(*m.value)) } else { return NoneComplex128Option }  }
/* Uint32ListOption: Uint32List->Any */ func MapAnyToUint32ListOption(m Uint32ListOption, f func(Uint32List) Any) AnyOption {  if m.IsDefined() { return AnyOpt(f(*m.value)) } else { return NoneAnyOption }  }
/* Uint32ListOption: Uint32List->BoolOption */ func MapBoolOptionToUint32ListOption(m Uint32ListOption, f func(Uint32List) BoolOption) BoolOptionOption {  if m.IsDefined() { return BoolBool(f(*m.value)) } else { return NoneBoolOptionOption }  }
/* Uint32ListOption: Uint32List->StringOption */ func MapStringOptionToUint32ListOption(m Uint32ListOption, f func(Uint32List) StringOption) StringOptionOption {  if m.IsDefined() { return StringString(f(*m.value)) } else { return NoneStringOptionOption }  }
/* Uint32ListOption: Uint32List->IntOption */ func MapIntOptionToUint32ListOption(m Uint32ListOption, f func(Uint32List) IntOption) IntOptionOption {  if m.IsDefined() { return IntInt(f(*m.value)) } else { return NoneIntOptionOption }  }
/* Uint32ListOption: Uint32List->Int8Option */ func MapInt8OptionToUint32ListOption(m Uint32ListOption, f func(Uint32List) Int8Option) Int8OptionOption {  if m.IsDefined() { return Int8Int8(f(*m.value)) } else { return NoneInt8OptionOption }  }
/* Uint32ListOption: Uint32List->Int16Option */ func MapInt16OptionToUint32ListOption(m Uint32ListOption, f func(Uint32List) Int16Option) Int16OptionOption {  if m.IsDefined() { return Int16Int16(f(*m.value)) } else { return NoneInt16OptionOption }  }
/* Uint32ListOption: Uint32List->Int32Option */ func MapInt32OptionToUint32ListOption(m Uint32ListOption, f func(Uint32List) Int32Option) Int32OptionOption {  if m.IsDefined() { return Int32Int32(f(*m.value)) } else { return NoneInt32OptionOption }  }
/* Uint32ListOption: Uint32List->Int64Option */ func MapInt64OptionToUint32ListOption(m Uint32ListOption, f func(Uint32List) Int64Option) Int64OptionOption {  if m.IsDefined() { return Int64Int64(f(*m.value)) } else { return NoneInt64OptionOption }  }
/* Uint32ListOption: Uint32List->UintOption */ func MapUintOptionToUint32ListOption(m Uint32ListOption, f func(Uint32List) UintOption) UintOptionOption {  if m.IsDefined() { return UintUint(f(*m.value)) } else { return NoneUintOptionOption }  }
/* Uint32ListOption: Uint32List->Uint8Option */ func MapUint8OptionToUint32ListOption(m Uint32ListOption, f func(Uint32List) Uint8Option) Uint8OptionOption {  if m.IsDefined() { return Uint8Uint8(f(*m.value)) } else { return NoneUint8OptionOption }  }
/* Uint32ListOption: Uint32List->Uint16Option */ func MapUint16OptionToUint32ListOption(m Uint32ListOption, f func(Uint32List) Uint16Option) Uint16OptionOption {  if m.IsDefined() { return Uint16Uint16(f(*m.value)) } else { return NoneUint16OptionOption }  }
/* Uint32ListOption: Uint32List->Uint32Option */ func MapUint32OptionToUint32ListOption(m Uint32ListOption, f func(Uint32List) Uint32Option) Uint32OptionOption {  if m.IsDefined() { return Uint32Uint32(f(*m.value)) } else { return NoneUint32OptionOption }  }
/* Uint32ListOption: Uint32List->Uint64Option */ func MapUint64OptionToUint32ListOption(m Uint32ListOption, f func(Uint32List) Uint64Option) Uint64OptionOption {  if m.IsDefined() { return Uint64Uint64(f(*m.value)) } else { return NoneUint64OptionOption }  }
/* Uint32ListOption: Uint32List->UintptrOption */ func MapUintptrOptionToUint32ListOption(m Uint32ListOption, f func(Uint32List) UintptrOption) UintptrOptionOption {  if m.IsDefined() { return UintptrUintptr(f(*m.value)) } else { return NoneUintptrOptionOption }  }
/* Uint32ListOption: Uint32List->ByteOption */ func MapByteOptionToUint32ListOption(m Uint32ListOption, f func(Uint32List) ByteOption) ByteOptionOption {  if m.IsDefined() { return ByteByte(f(*m.value)) } else { return NoneByteOptionOption }  }
/* Uint32ListOption: Uint32List->RuneOption */ func MapRuneOptionToUint32ListOption(m Uint32ListOption, f func(Uint32List) RuneOption) RuneOptionOption {  if m.IsDefined() { return RuneRune(f(*m.value)) } else { return NoneRuneOptionOption }  }
/* Uint32ListOption: Uint32List->Float32Option */ func MapFloat32OptionToUint32ListOption(m Uint32ListOption, f func(Uint32List) Float32Option) Float32OptionOption {  if m.IsDefined() { return Float32Float32(f(*m.value)) } else { return NoneFloat32OptionOption }  }
/* Uint32ListOption: Uint32List->Float64Option */ func MapFloat64OptionToUint32ListOption(m Uint32ListOption, f func(Uint32List) Float64Option) Float64OptionOption {  if m.IsDefined() { return Float64Float64(f(*m.value)) } else { return NoneFloat64OptionOption }  }
/* Uint32ListOption: Uint32List->Complex64Option */ func MapComplex64OptionToUint32ListOption(m Uint32ListOption, f func(Uint32List) Complex64Option) Complex64OptionOption {  if m.IsDefined() { return Complex64Complex64(f(*m.value)) } else { return NoneComplex64OptionOption }  }
/* Uint32ListOption: Uint32List->Complex128Option */ func MapComplex128OptionToUint32ListOption(m Uint32ListOption, f func(Uint32List) Complex128Option) Complex128OptionOption {  if m.IsDefined() { return Complex128Complex128(f(*m.value)) } else { return NoneComplex128OptionOption }  }
/* Uint32ListOption: Uint32List->AnyOption */ func MapAnyOptionToUint32ListOption(m Uint32ListOption, f func(Uint32List) AnyOption) AnyOptionOption {  if m.IsDefined() { return AnyOptAny(f(*m.value)) } else { return NoneAnyOptionOption }  }
/* Uint32ListOption: Uint32List->[]bool */ func MapBoolArrToUint32ListOption(m Uint32ListOption, f func(Uint32List) []bool) BoolArrOption {  if m.IsDefined() { return BoolArrOpt(f(*m.value)) } else { return NoneBoolArrOption }  }
/* Uint32ListOption: Uint32List->[]string */ func MapStringArrToUint32ListOption(m Uint32ListOption, f func(Uint32List) []string) StringArrOption {  if m.IsDefined() { return StringArrOpt(f(*m.value)) } else { return NoneStringArrOption }  }
/* Uint32ListOption: Uint32List->[]int */ func MapIntArrToUint32ListOption(m Uint32ListOption, f func(Uint32List) []int) IntArrOption {  if m.IsDefined() { return IntArrOpt(f(*m.value)) } else { return NoneIntArrOption }  }
/* Uint32ListOption: Uint32List->[]int8 */ func MapInt8ArrToUint32ListOption(m Uint32ListOption, f func(Uint32List) []int8) Int8ArrOption {  if m.IsDefined() { return Int8ArrOpt(f(*m.value)) } else { return NoneInt8ArrOption }  }
/* Uint32ListOption: Uint32List->[]int16 */ func MapInt16ArrToUint32ListOption(m Uint32ListOption, f func(Uint32List) []int16) Int16ArrOption {  if m.IsDefined() { return Int16ArrOpt(f(*m.value)) } else { return NoneInt16ArrOption }  }
/* Uint32ListOption: Uint32List->[]int32 */ func MapInt32ArrToUint32ListOption(m Uint32ListOption, f func(Uint32List) []int32) Int32ArrOption {  if m.IsDefined() { return Int32ArrOpt(f(*m.value)) } else { return NoneInt32ArrOption }  }
/* Uint32ListOption: Uint32List->[]int64 */ func MapInt64ArrToUint32ListOption(m Uint32ListOption, f func(Uint32List) []int64) Int64ArrOption {  if m.IsDefined() { return Int64ArrOpt(f(*m.value)) } else { return NoneInt64ArrOption }  }
/* Uint32ListOption: Uint32List->[]uint */ func MapUintArrToUint32ListOption(m Uint32ListOption, f func(Uint32List) []uint) UintArrOption {  if m.IsDefined() { return UintArrOpt(f(*m.value)) } else { return NoneUintArrOption }  }
/* Uint32ListOption: Uint32List->[]uint8 */ func MapUint8ArrToUint32ListOption(m Uint32ListOption, f func(Uint32List) []uint8) Uint8ArrOption {  if m.IsDefined() { return Uint8ArrOpt(f(*m.value)) } else { return NoneUint8ArrOption }  }
/* Uint32ListOption: Uint32List->[]uint16 */ func MapUint16ArrToUint32ListOption(m Uint32ListOption, f func(Uint32List) []uint16) Uint16ArrOption {  if m.IsDefined() { return Uint16ArrOpt(f(*m.value)) } else { return NoneUint16ArrOption }  }
/* Uint32ListOption: Uint32List->[]uint32 */ func MapUint32ArrToUint32ListOption(m Uint32ListOption, f func(Uint32List) []uint32) Uint32ArrOption {  if m.IsDefined() { return Uint32ArrOpt(f(*m.value)) } else { return NoneUint32ArrOption }  }
/* Uint32ListOption: Uint32List->[]uint64 */ func MapUint64ArrToUint32ListOption(m Uint32ListOption, f func(Uint32List) []uint64) Uint64ArrOption {  if m.IsDefined() { return Uint64ArrOpt(f(*m.value)) } else { return NoneUint64ArrOption }  }
/* Uint32ListOption: Uint32List->[]uintptr */ func MapUintptrArrToUint32ListOption(m Uint32ListOption, f func(Uint32List) []uintptr) UintptrArrOption {  if m.IsDefined() { return UintptrArrOpt(f(*m.value)) } else { return NoneUintptrArrOption }  }
/* Uint32ListOption: Uint32List->[]byte */ func MapByteArrToUint32ListOption(m Uint32ListOption, f func(Uint32List) []byte) ByteArrOption {  if m.IsDefined() { return ByteArrOpt(f(*m.value)) } else { return NoneByteArrOption }  }
/* Uint32ListOption: Uint32List->[]rune */ func MapRuneArrToUint32ListOption(m Uint32ListOption, f func(Uint32List) []rune) RuneArrOption {  if m.IsDefined() { return RuneArrOpt(f(*m.value)) } else { return NoneRuneArrOption }  }
/* Uint32ListOption: Uint32List->[]float32 */ func MapFloat32ArrToUint32ListOption(m Uint32ListOption, f func(Uint32List) []float32) Float32ArrOption {  if m.IsDefined() { return Float32ArrOpt(f(*m.value)) } else { return NoneFloat32ArrOption }  }
/* Uint32ListOption: Uint32List->[]float64 */ func MapFloat64ArrToUint32ListOption(m Uint32ListOption, f func(Uint32List) []float64) Float64ArrOption {  if m.IsDefined() { return Float64ArrOpt(f(*m.value)) } else { return NoneFloat64ArrOption }  }
/* Uint32ListOption: Uint32List->[]complex64 */ func MapComplex64ArrToUint32ListOption(m Uint32ListOption, f func(Uint32List) []complex64) Complex64ArrOption {  if m.IsDefined() { return Complex64ArrOpt(f(*m.value)) } else { return NoneComplex64ArrOption }  }
/* Uint32ListOption: Uint32List->[]complex128 */ func MapComplex128ArrToUint32ListOption(m Uint32ListOption, f func(Uint32List) []complex128) Complex128ArrOption {  if m.IsDefined() { return Complex128ArrOpt(f(*m.value)) } else { return NoneComplex128ArrOption }  }
/* Uint32ListOption: Uint32List->[]Any */ func MapAnyArrToUint32ListOption(m Uint32ListOption, f func(Uint32List) []Any) AnyArrOption {  if m.IsDefined() { return AnyArrOpt(f(*m.value)) } else { return NoneAnyArrOption }  }
/* Uint32ListOption: Uint32List->BoolList */ func MapBoolListToUint32ListOption(m Uint32ListOption, f func(Uint32List) BoolList) BoolListOption {  if m.IsDefined() { return BoolListOpt(f(*m.value)) } else { return NoneBoolListOption }  }
/* Uint32ListOption: Uint32List->StringList */ func MapStringListToUint32ListOption(m Uint32ListOption, f func(Uint32List) StringList) StringListOption {  if m.IsDefined() { return StringListOpt(f(*m.value)) } else { return NoneStringListOption }  }
/* Uint32ListOption: Uint32List->IntList */ func MapIntListToUint32ListOption(m Uint32ListOption, f func(Uint32List) IntList) IntListOption {  if m.IsDefined() { return IntListOpt(f(*m.value)) } else { return NoneIntListOption }  }
/* Uint32ListOption: Uint32List->Int8List */ func MapInt8ListToUint32ListOption(m Uint32ListOption, f func(Uint32List) Int8List) Int8ListOption {  if m.IsDefined() { return Int8ListOpt(f(*m.value)) } else { return NoneInt8ListOption }  }
/* Uint32ListOption: Uint32List->Int16List */ func MapInt16ListToUint32ListOption(m Uint32ListOption, f func(Uint32List) Int16List) Int16ListOption {  if m.IsDefined() { return Int16ListOpt(f(*m.value)) } else { return NoneInt16ListOption }  }
/* Uint32ListOption: Uint32List->Int32List */ func MapInt32ListToUint32ListOption(m Uint32ListOption, f func(Uint32List) Int32List) Int32ListOption {  if m.IsDefined() { return Int32ListOpt(f(*m.value)) } else { return NoneInt32ListOption }  }
/* Uint32ListOption: Uint32List->Int64List */ func MapInt64ListToUint32ListOption(m Uint32ListOption, f func(Uint32List) Int64List) Int64ListOption {  if m.IsDefined() { return Int64ListOpt(f(*m.value)) } else { return NoneInt64ListOption }  }
/* Uint32ListOption: Uint32List->UintList */ func MapUintListToUint32ListOption(m Uint32ListOption, f func(Uint32List) UintList) UintListOption {  if m.IsDefined() { return UintListOpt(f(*m.value)) } else { return NoneUintListOption }  }
/* Uint32ListOption: Uint32List->Uint8List */ func MapUint8ListToUint32ListOption(m Uint32ListOption, f func(Uint32List) Uint8List) Uint8ListOption {  if m.IsDefined() { return Uint8ListOpt(f(*m.value)) } else { return NoneUint8ListOption }  }
/* Uint32ListOption: Uint32List->Uint16List */ func MapUint16ListToUint32ListOption(m Uint32ListOption, f func(Uint32List) Uint16List) Uint16ListOption {  if m.IsDefined() { return Uint16ListOpt(f(*m.value)) } else { return NoneUint16ListOption }  }
/* Uint32ListOption: Uint32List->Uint32List */ func MapUint32ListToUint32ListOption(m Uint32ListOption, f func(Uint32List) Uint32List) Uint32ListOption {  if m.IsDefined() { return Uint32ListOpt(f(*m.value)) } else { return NoneUint32ListOption }  }
/* Uint32ListOption: Uint32List->Uint64List */ func MapUint64ListToUint32ListOption(m Uint32ListOption, f func(Uint32List) Uint64List) Uint64ListOption {  if m.IsDefined() { return Uint64ListOpt(f(*m.value)) } else { return NoneUint64ListOption }  }
/* Uint32ListOption: Uint32List->UintptrList */ func MapUintptrListToUint32ListOption(m Uint32ListOption, f func(Uint32List) UintptrList) UintptrListOption {  if m.IsDefined() { return UintptrListOpt(f(*m.value)) } else { return NoneUintptrListOption }  }
/* Uint32ListOption: Uint32List->ByteList */ func MapByteListToUint32ListOption(m Uint32ListOption, f func(Uint32List) ByteList) ByteListOption {  if m.IsDefined() { return ByteListOpt(f(*m.value)) } else { return NoneByteListOption }  }
/* Uint32ListOption: Uint32List->RuneList */ func MapRuneListToUint32ListOption(m Uint32ListOption, f func(Uint32List) RuneList) RuneListOption {  if m.IsDefined() { return RuneListOpt(f(*m.value)) } else { return NoneRuneListOption }  }
/* Uint32ListOption: Uint32List->Float32List */ func MapFloat32ListToUint32ListOption(m Uint32ListOption, f func(Uint32List) Float32List) Float32ListOption {  if m.IsDefined() { return Float32ListOpt(f(*m.value)) } else { return NoneFloat32ListOption }  }
/* Uint32ListOption: Uint32List->Float64List */ func MapFloat64ListToUint32ListOption(m Uint32ListOption, f func(Uint32List) Float64List) Float64ListOption {  if m.IsDefined() { return Float64ListOpt(f(*m.value)) } else { return NoneFloat64ListOption }  }
/* Uint32ListOption: Uint32List->Complex64List */ func MapComplex64ListToUint32ListOption(m Uint32ListOption, f func(Uint32List) Complex64List) Complex64ListOption {  if m.IsDefined() { return Complex64ListOpt(f(*m.value)) } else { return NoneComplex64ListOption }  }
/* Uint32ListOption: Uint32List->Complex128List */ func MapComplex128ListToUint32ListOption(m Uint32ListOption, f func(Uint32List) Complex128List) Complex128ListOption {  if m.IsDefined() { return Complex128ListOpt(f(*m.value)) } else { return NoneComplex128ListOption }  }
/* Uint32ListOption: Uint32List->AnyList */ func MapAnyListToUint32ListOption(m Uint32ListOption, f func(Uint32List) AnyList) AnyListOption {  if m.IsDefined() { return AnyListOpt(f(*m.value)) } else { return NoneAnyListOption }  }
/* Uint64ListOption: Uint64List->bool */ func MapBoolToUint64ListOption(m Uint64ListOption, f func(Uint64List) bool) BoolOption {  if m.IsDefined() { return Bool(f(*m.value)) } else { return NoneBoolOption }  }
/* Uint64ListOption: Uint64List->string */ func MapStringToUint64ListOption(m Uint64ListOption, f func(Uint64List) string) StringOption {  if m.IsDefined() { return String(f(*m.value)) } else { return NoneStringOption }  }
/* Uint64ListOption: Uint64List->int */ func MapIntToUint64ListOption(m Uint64ListOption, f func(Uint64List) int) IntOption {  if m.IsDefined() { return Int(f(*m.value)) } else { return NoneIntOption }  }
/* Uint64ListOption: Uint64List->int8 */ func MapInt8ToUint64ListOption(m Uint64ListOption, f func(Uint64List) int8) Int8Option {  if m.IsDefined() { return Int8(f(*m.value)) } else { return NoneInt8Option }  }
/* Uint64ListOption: Uint64List->int16 */ func MapInt16ToUint64ListOption(m Uint64ListOption, f func(Uint64List) int16) Int16Option {  if m.IsDefined() { return Int16(f(*m.value)) } else { return NoneInt16Option }  }
/* Uint64ListOption: Uint64List->int32 */ func MapInt32ToUint64ListOption(m Uint64ListOption, f func(Uint64List) int32) Int32Option {  if m.IsDefined() { return Int32(f(*m.value)) } else { return NoneInt32Option }  }
/* Uint64ListOption: Uint64List->int64 */ func MapInt64ToUint64ListOption(m Uint64ListOption, f func(Uint64List) int64) Int64Option {  if m.IsDefined() { return Int64(f(*m.value)) } else { return NoneInt64Option }  }
/* Uint64ListOption: Uint64List->uint */ func MapUintToUint64ListOption(m Uint64ListOption, f func(Uint64List) uint) UintOption {  if m.IsDefined() { return Uint(f(*m.value)) } else { return NoneUintOption }  }
/* Uint64ListOption: Uint64List->uint8 */ func MapUint8ToUint64ListOption(m Uint64ListOption, f func(Uint64List) uint8) Uint8Option {  if m.IsDefined() { return Uint8(f(*m.value)) } else { return NoneUint8Option }  }
/* Uint64ListOption: Uint64List->uint16 */ func MapUint16ToUint64ListOption(m Uint64ListOption, f func(Uint64List) uint16) Uint16Option {  if m.IsDefined() { return Uint16(f(*m.value)) } else { return NoneUint16Option }  }
/* Uint64ListOption: Uint64List->uint32 */ func MapUint32ToUint64ListOption(m Uint64ListOption, f func(Uint64List) uint32) Uint32Option {  if m.IsDefined() { return Uint32(f(*m.value)) } else { return NoneUint32Option }  }
/* Uint64ListOption: Uint64List->uint64 */ func MapUint64ToUint64ListOption(m Uint64ListOption, f func(Uint64List) uint64) Uint64Option {  if m.IsDefined() { return Uint64(f(*m.value)) } else { return NoneUint64Option }  }
/* Uint64ListOption: Uint64List->uintptr */ func MapUintptrToUint64ListOption(m Uint64ListOption, f func(Uint64List) uintptr) UintptrOption {  if m.IsDefined() { return Uintptr(f(*m.value)) } else { return NoneUintptrOption }  }
/* Uint64ListOption: Uint64List->byte */ func MapByteToUint64ListOption(m Uint64ListOption, f func(Uint64List) byte) ByteOption {  if m.IsDefined() { return Byte(f(*m.value)) } else { return NoneByteOption }  }
/* Uint64ListOption: Uint64List->rune */ func MapRuneToUint64ListOption(m Uint64ListOption, f func(Uint64List) rune) RuneOption {  if m.IsDefined() { return Rune(f(*m.value)) } else { return NoneRuneOption }  }
/* Uint64ListOption: Uint64List->float32 */ func MapFloat32ToUint64ListOption(m Uint64ListOption, f func(Uint64List) float32) Float32Option {  if m.IsDefined() { return Float32(f(*m.value)) } else { return NoneFloat32Option }  }
/* Uint64ListOption: Uint64List->float64 */ func MapFloat64ToUint64ListOption(m Uint64ListOption, f func(Uint64List) float64) Float64Option {  if m.IsDefined() { return Float64(f(*m.value)) } else { return NoneFloat64Option }  }
/* Uint64ListOption: Uint64List->complex64 */ func MapComplex64ToUint64ListOption(m Uint64ListOption, f func(Uint64List) complex64) Complex64Option {  if m.IsDefined() { return Complex64(f(*m.value)) } else { return NoneComplex64Option }  }
/* Uint64ListOption: Uint64List->complex128 */ func MapComplex128ToUint64ListOption(m Uint64ListOption, f func(Uint64List) complex128) Complex128Option {  if m.IsDefined() { return Complex128(f(*m.value)) } else { return NoneComplex128Option }  }
/* Uint64ListOption: Uint64List->Any */ func MapAnyToUint64ListOption(m Uint64ListOption, f func(Uint64List) Any) AnyOption {  if m.IsDefined() { return AnyOpt(f(*m.value)) } else { return NoneAnyOption }  }
/* Uint64ListOption: Uint64List->BoolOption */ func MapBoolOptionToUint64ListOption(m Uint64ListOption, f func(Uint64List) BoolOption) BoolOptionOption {  if m.IsDefined() { return BoolBool(f(*m.value)) } else { return NoneBoolOptionOption }  }
/* Uint64ListOption: Uint64List->StringOption */ func MapStringOptionToUint64ListOption(m Uint64ListOption, f func(Uint64List) StringOption) StringOptionOption {  if m.IsDefined() { return StringString(f(*m.value)) } else { return NoneStringOptionOption }  }
/* Uint64ListOption: Uint64List->IntOption */ func MapIntOptionToUint64ListOption(m Uint64ListOption, f func(Uint64List) IntOption) IntOptionOption {  if m.IsDefined() { return IntInt(f(*m.value)) } else { return NoneIntOptionOption }  }
/* Uint64ListOption: Uint64List->Int8Option */ func MapInt8OptionToUint64ListOption(m Uint64ListOption, f func(Uint64List) Int8Option) Int8OptionOption {  if m.IsDefined() { return Int8Int8(f(*m.value)) } else { return NoneInt8OptionOption }  }
/* Uint64ListOption: Uint64List->Int16Option */ func MapInt16OptionToUint64ListOption(m Uint64ListOption, f func(Uint64List) Int16Option) Int16OptionOption {  if m.IsDefined() { return Int16Int16(f(*m.value)) } else { return NoneInt16OptionOption }  }
/* Uint64ListOption: Uint64List->Int32Option */ func MapInt32OptionToUint64ListOption(m Uint64ListOption, f func(Uint64List) Int32Option) Int32OptionOption {  if m.IsDefined() { return Int32Int32(f(*m.value)) } else { return NoneInt32OptionOption }  }
/* Uint64ListOption: Uint64List->Int64Option */ func MapInt64OptionToUint64ListOption(m Uint64ListOption, f func(Uint64List) Int64Option) Int64OptionOption {  if m.IsDefined() { return Int64Int64(f(*m.value)) } else { return NoneInt64OptionOption }  }
/* Uint64ListOption: Uint64List->UintOption */ func MapUintOptionToUint64ListOption(m Uint64ListOption, f func(Uint64List) UintOption) UintOptionOption {  if m.IsDefined() { return UintUint(f(*m.value)) } else { return NoneUintOptionOption }  }
/* Uint64ListOption: Uint64List->Uint8Option */ func MapUint8OptionToUint64ListOption(m Uint64ListOption, f func(Uint64List) Uint8Option) Uint8OptionOption {  if m.IsDefined() { return Uint8Uint8(f(*m.value)) } else { return NoneUint8OptionOption }  }
/* Uint64ListOption: Uint64List->Uint16Option */ func MapUint16OptionToUint64ListOption(m Uint64ListOption, f func(Uint64List) Uint16Option) Uint16OptionOption {  if m.IsDefined() { return Uint16Uint16(f(*m.value)) } else { return NoneUint16OptionOption }  }
/* Uint64ListOption: Uint64List->Uint32Option */ func MapUint32OptionToUint64ListOption(m Uint64ListOption, f func(Uint64List) Uint32Option) Uint32OptionOption {  if m.IsDefined() { return Uint32Uint32(f(*m.value)) } else { return NoneUint32OptionOption }  }
/* Uint64ListOption: Uint64List->Uint64Option */ func MapUint64OptionToUint64ListOption(m Uint64ListOption, f func(Uint64List) Uint64Option) Uint64OptionOption {  if m.IsDefined() { return Uint64Uint64(f(*m.value)) } else { return NoneUint64OptionOption }  }
/* Uint64ListOption: Uint64List->UintptrOption */ func MapUintptrOptionToUint64ListOption(m Uint64ListOption, f func(Uint64List) UintptrOption) UintptrOptionOption {  if m.IsDefined() { return UintptrUintptr(f(*m.value)) } else { return NoneUintptrOptionOption }  }
/* Uint64ListOption: Uint64List->ByteOption */ func MapByteOptionToUint64ListOption(m Uint64ListOption, f func(Uint64List) ByteOption) ByteOptionOption {  if m.IsDefined() { return ByteByte(f(*m.value)) } else { return NoneByteOptionOption }  }
/* Uint64ListOption: Uint64List->RuneOption */ func MapRuneOptionToUint64ListOption(m Uint64ListOption, f func(Uint64List) RuneOption) RuneOptionOption {  if m.IsDefined() { return RuneRune(f(*m.value)) } else { return NoneRuneOptionOption }  }
/* Uint64ListOption: Uint64List->Float32Option */ func MapFloat32OptionToUint64ListOption(m Uint64ListOption, f func(Uint64List) Float32Option) Float32OptionOption {  if m.IsDefined() { return Float32Float32(f(*m.value)) } else { return NoneFloat32OptionOption }  }
/* Uint64ListOption: Uint64List->Float64Option */ func MapFloat64OptionToUint64ListOption(m Uint64ListOption, f func(Uint64List) Float64Option) Float64OptionOption {  if m.IsDefined() { return Float64Float64(f(*m.value)) } else { return NoneFloat64OptionOption }  }
/* Uint64ListOption: Uint64List->Complex64Option */ func MapComplex64OptionToUint64ListOption(m Uint64ListOption, f func(Uint64List) Complex64Option) Complex64OptionOption {  if m.IsDefined() { return Complex64Complex64(f(*m.value)) } else { return NoneComplex64OptionOption }  }
/* Uint64ListOption: Uint64List->Complex128Option */ func MapComplex128OptionToUint64ListOption(m Uint64ListOption, f func(Uint64List) Complex128Option) Complex128OptionOption {  if m.IsDefined() { return Complex128Complex128(f(*m.value)) } else { return NoneComplex128OptionOption }  }
/* Uint64ListOption: Uint64List->AnyOption */ func MapAnyOptionToUint64ListOption(m Uint64ListOption, f func(Uint64List) AnyOption) AnyOptionOption {  if m.IsDefined() { return AnyOptAny(f(*m.value)) } else { return NoneAnyOptionOption }  }
/* Uint64ListOption: Uint64List->[]bool */ func MapBoolArrToUint64ListOption(m Uint64ListOption, f func(Uint64List) []bool) BoolArrOption {  if m.IsDefined() { return BoolArrOpt(f(*m.value)) } else { return NoneBoolArrOption }  }
/* Uint64ListOption: Uint64List->[]string */ func MapStringArrToUint64ListOption(m Uint64ListOption, f func(Uint64List) []string) StringArrOption {  if m.IsDefined() { return StringArrOpt(f(*m.value)) } else { return NoneStringArrOption }  }
/* Uint64ListOption: Uint64List->[]int */ func MapIntArrToUint64ListOption(m Uint64ListOption, f func(Uint64List) []int) IntArrOption {  if m.IsDefined() { return IntArrOpt(f(*m.value)) } else { return NoneIntArrOption }  }
/* Uint64ListOption: Uint64List->[]int8 */ func MapInt8ArrToUint64ListOption(m Uint64ListOption, f func(Uint64List) []int8) Int8ArrOption {  if m.IsDefined() { return Int8ArrOpt(f(*m.value)) } else { return NoneInt8ArrOption }  }
/* Uint64ListOption: Uint64List->[]int16 */ func MapInt16ArrToUint64ListOption(m Uint64ListOption, f func(Uint64List) []int16) Int16ArrOption {  if m.IsDefined() { return Int16ArrOpt(f(*m.value)) } else { return NoneInt16ArrOption }  }
/* Uint64ListOption: Uint64List->[]int32 */ func MapInt32ArrToUint64ListOption(m Uint64ListOption, f func(Uint64List) []int32) Int32ArrOption {  if m.IsDefined() { return Int32ArrOpt(f(*m.value)) } else { return NoneInt32ArrOption }  }
/* Uint64ListOption: Uint64List->[]int64 */ func MapInt64ArrToUint64ListOption(m Uint64ListOption, f func(Uint64List) []int64) Int64ArrOption {  if m.IsDefined() { return Int64ArrOpt(f(*m.value)) } else { return NoneInt64ArrOption }  }
/* Uint64ListOption: Uint64List->[]uint */ func MapUintArrToUint64ListOption(m Uint64ListOption, f func(Uint64List) []uint) UintArrOption {  if m.IsDefined() { return UintArrOpt(f(*m.value)) } else { return NoneUintArrOption }  }
/* Uint64ListOption: Uint64List->[]uint8 */ func MapUint8ArrToUint64ListOption(m Uint64ListOption, f func(Uint64List) []uint8) Uint8ArrOption {  if m.IsDefined() { return Uint8ArrOpt(f(*m.value)) } else { return NoneUint8ArrOption }  }
/* Uint64ListOption: Uint64List->[]uint16 */ func MapUint16ArrToUint64ListOption(m Uint64ListOption, f func(Uint64List) []uint16) Uint16ArrOption {  if m.IsDefined() { return Uint16ArrOpt(f(*m.value)) } else { return NoneUint16ArrOption }  }
/* Uint64ListOption: Uint64List->[]uint32 */ func MapUint32ArrToUint64ListOption(m Uint64ListOption, f func(Uint64List) []uint32) Uint32ArrOption {  if m.IsDefined() { return Uint32ArrOpt(f(*m.value)) } else { return NoneUint32ArrOption }  }
/* Uint64ListOption: Uint64List->[]uint64 */ func MapUint64ArrToUint64ListOption(m Uint64ListOption, f func(Uint64List) []uint64) Uint64ArrOption {  if m.IsDefined() { return Uint64ArrOpt(f(*m.value)) } else { return NoneUint64ArrOption }  }
/* Uint64ListOption: Uint64List->[]uintptr */ func MapUintptrArrToUint64ListOption(m Uint64ListOption, f func(Uint64List) []uintptr) UintptrArrOption {  if m.IsDefined() { return UintptrArrOpt(f(*m.value)) } else { return NoneUintptrArrOption }  }
/* Uint64ListOption: Uint64List->[]byte */ func MapByteArrToUint64ListOption(m Uint64ListOption, f func(Uint64List) []byte) ByteArrOption {  if m.IsDefined() { return ByteArrOpt(f(*m.value)) } else { return NoneByteArrOption }  }
/* Uint64ListOption: Uint64List->[]rune */ func MapRuneArrToUint64ListOption(m Uint64ListOption, f func(Uint64List) []rune) RuneArrOption {  if m.IsDefined() { return RuneArrOpt(f(*m.value)) } else { return NoneRuneArrOption }  }
/* Uint64ListOption: Uint64List->[]float32 */ func MapFloat32ArrToUint64ListOption(m Uint64ListOption, f func(Uint64List) []float32) Float32ArrOption {  if m.IsDefined() { return Float32ArrOpt(f(*m.value)) } else { return NoneFloat32ArrOption }  }
/* Uint64ListOption: Uint64List->[]float64 */ func MapFloat64ArrToUint64ListOption(m Uint64ListOption, f func(Uint64List) []float64) Float64ArrOption {  if m.IsDefined() { return Float64ArrOpt(f(*m.value)) } else { return NoneFloat64ArrOption }  }
/* Uint64ListOption: Uint64List->[]complex64 */ func MapComplex64ArrToUint64ListOption(m Uint64ListOption, f func(Uint64List) []complex64) Complex64ArrOption {  if m.IsDefined() { return Complex64ArrOpt(f(*m.value)) } else { return NoneComplex64ArrOption }  }
/* Uint64ListOption: Uint64List->[]complex128 */ func MapComplex128ArrToUint64ListOption(m Uint64ListOption, f func(Uint64List) []complex128) Complex128ArrOption {  if m.IsDefined() { return Complex128ArrOpt(f(*m.value)) } else { return NoneComplex128ArrOption }  }
/* Uint64ListOption: Uint64List->[]Any */ func MapAnyArrToUint64ListOption(m Uint64ListOption, f func(Uint64List) []Any) AnyArrOption {  if m.IsDefined() { return AnyArrOpt(f(*m.value)) } else { return NoneAnyArrOption }  }
/* Uint64ListOption: Uint64List->BoolList */ func MapBoolListToUint64ListOption(m Uint64ListOption, f func(Uint64List) BoolList) BoolListOption {  if m.IsDefined() { return BoolListOpt(f(*m.value)) } else { return NoneBoolListOption }  }
/* Uint64ListOption: Uint64List->StringList */ func MapStringListToUint64ListOption(m Uint64ListOption, f func(Uint64List) StringList) StringListOption {  if m.IsDefined() { return StringListOpt(f(*m.value)) } else { return NoneStringListOption }  }
/* Uint64ListOption: Uint64List->IntList */ func MapIntListToUint64ListOption(m Uint64ListOption, f func(Uint64List) IntList) IntListOption {  if m.IsDefined() { return IntListOpt(f(*m.value)) } else { return NoneIntListOption }  }
/* Uint64ListOption: Uint64List->Int8List */ func MapInt8ListToUint64ListOption(m Uint64ListOption, f func(Uint64List) Int8List) Int8ListOption {  if m.IsDefined() { return Int8ListOpt(f(*m.value)) } else { return NoneInt8ListOption }  }
/* Uint64ListOption: Uint64List->Int16List */ func MapInt16ListToUint64ListOption(m Uint64ListOption, f func(Uint64List) Int16List) Int16ListOption {  if m.IsDefined() { return Int16ListOpt(f(*m.value)) } else { return NoneInt16ListOption }  }
/* Uint64ListOption: Uint64List->Int32List */ func MapInt32ListToUint64ListOption(m Uint64ListOption, f func(Uint64List) Int32List) Int32ListOption {  if m.IsDefined() { return Int32ListOpt(f(*m.value)) } else { return NoneInt32ListOption }  }
/* Uint64ListOption: Uint64List->Int64List */ func MapInt64ListToUint64ListOption(m Uint64ListOption, f func(Uint64List) Int64List) Int64ListOption {  if m.IsDefined() { return Int64ListOpt(f(*m.value)) } else { return NoneInt64ListOption }  }
/* Uint64ListOption: Uint64List->UintList */ func MapUintListToUint64ListOption(m Uint64ListOption, f func(Uint64List) UintList) UintListOption {  if m.IsDefined() { return UintListOpt(f(*m.value)) } else { return NoneUintListOption }  }
/* Uint64ListOption: Uint64List->Uint8List */ func MapUint8ListToUint64ListOption(m Uint64ListOption, f func(Uint64List) Uint8List) Uint8ListOption {  if m.IsDefined() { return Uint8ListOpt(f(*m.value)) } else { return NoneUint8ListOption }  }
/* Uint64ListOption: Uint64List->Uint16List */ func MapUint16ListToUint64ListOption(m Uint64ListOption, f func(Uint64List) Uint16List) Uint16ListOption {  if m.IsDefined() { return Uint16ListOpt(f(*m.value)) } else { return NoneUint16ListOption }  }
/* Uint64ListOption: Uint64List->Uint32List */ func MapUint32ListToUint64ListOption(m Uint64ListOption, f func(Uint64List) Uint32List) Uint32ListOption {  if m.IsDefined() { return Uint32ListOpt(f(*m.value)) } else { return NoneUint32ListOption }  }
/* Uint64ListOption: Uint64List->Uint64List */ func MapUint64ListToUint64ListOption(m Uint64ListOption, f func(Uint64List) Uint64List) Uint64ListOption {  if m.IsDefined() { return Uint64ListOpt(f(*m.value)) } else { return NoneUint64ListOption }  }
/* Uint64ListOption: Uint64List->UintptrList */ func MapUintptrListToUint64ListOption(m Uint64ListOption, f func(Uint64List) UintptrList) UintptrListOption {  if m.IsDefined() { return UintptrListOpt(f(*m.value)) } else { return NoneUintptrListOption }  }
/* Uint64ListOption: Uint64List->ByteList */ func MapByteListToUint64ListOption(m Uint64ListOption, f func(Uint64List) ByteList) ByteListOption {  if m.IsDefined() { return ByteListOpt(f(*m.value)) } else { return NoneByteListOption }  }
/* Uint64ListOption: Uint64List->RuneList */ func MapRuneListToUint64ListOption(m Uint64ListOption, f func(Uint64List) RuneList) RuneListOption {  if m.IsDefined() { return RuneListOpt(f(*m.value)) } else { return NoneRuneListOption }  }
/* Uint64ListOption: Uint64List->Float32List */ func MapFloat32ListToUint64ListOption(m Uint64ListOption, f func(Uint64List) Float32List) Float32ListOption {  if m.IsDefined() { return Float32ListOpt(f(*m.value)) } else { return NoneFloat32ListOption }  }
/* Uint64ListOption: Uint64List->Float64List */ func MapFloat64ListToUint64ListOption(m Uint64ListOption, f func(Uint64List) Float64List) Float64ListOption {  if m.IsDefined() { return Float64ListOpt(f(*m.value)) } else { return NoneFloat64ListOption }  }
/* Uint64ListOption: Uint64List->Complex64List */ func MapComplex64ListToUint64ListOption(m Uint64ListOption, f func(Uint64List) Complex64List) Complex64ListOption {  if m.IsDefined() { return Complex64ListOpt(f(*m.value)) } else { return NoneComplex64ListOption }  }
/* Uint64ListOption: Uint64List->Complex128List */ func MapComplex128ListToUint64ListOption(m Uint64ListOption, f func(Uint64List) Complex128List) Complex128ListOption {  if m.IsDefined() { return Complex128ListOpt(f(*m.value)) } else { return NoneComplex128ListOption }  }
/* Uint64ListOption: Uint64List->AnyList */ func MapAnyListToUint64ListOption(m Uint64ListOption, f func(Uint64List) AnyList) AnyListOption {  if m.IsDefined() { return AnyListOpt(f(*m.value)) } else { return NoneAnyListOption }  }
/* UintptrListOption: UintptrList->bool */ func MapBoolToUintptrListOption(m UintptrListOption, f func(UintptrList) bool) BoolOption {  if m.IsDefined() { return Bool(f(*m.value)) } else { return NoneBoolOption }  }
/* UintptrListOption: UintptrList->string */ func MapStringToUintptrListOption(m UintptrListOption, f func(UintptrList) string) StringOption {  if m.IsDefined() { return String(f(*m.value)) } else { return NoneStringOption }  }
/* UintptrListOption: UintptrList->int */ func MapIntToUintptrListOption(m UintptrListOption, f func(UintptrList) int) IntOption {  if m.IsDefined() { return Int(f(*m.value)) } else { return NoneIntOption }  }
/* UintptrListOption: UintptrList->int8 */ func MapInt8ToUintptrListOption(m UintptrListOption, f func(UintptrList) int8) Int8Option {  if m.IsDefined() { return Int8(f(*m.value)) } else { return NoneInt8Option }  }
/* UintptrListOption: UintptrList->int16 */ func MapInt16ToUintptrListOption(m UintptrListOption, f func(UintptrList) int16) Int16Option {  if m.IsDefined() { return Int16(f(*m.value)) } else { return NoneInt16Option }  }
/* UintptrListOption: UintptrList->int32 */ func MapInt32ToUintptrListOption(m UintptrListOption, f func(UintptrList) int32) Int32Option {  if m.IsDefined() { return Int32(f(*m.value)) } else { return NoneInt32Option }  }
/* UintptrListOption: UintptrList->int64 */ func MapInt64ToUintptrListOption(m UintptrListOption, f func(UintptrList) int64) Int64Option {  if m.IsDefined() { return Int64(f(*m.value)) } else { return NoneInt64Option }  }
/* UintptrListOption: UintptrList->uint */ func MapUintToUintptrListOption(m UintptrListOption, f func(UintptrList) uint) UintOption {  if m.IsDefined() { return Uint(f(*m.value)) } else { return NoneUintOption }  }
/* UintptrListOption: UintptrList->uint8 */ func MapUint8ToUintptrListOption(m UintptrListOption, f func(UintptrList) uint8) Uint8Option {  if m.IsDefined() { return Uint8(f(*m.value)) } else { return NoneUint8Option }  }
/* UintptrListOption: UintptrList->uint16 */ func MapUint16ToUintptrListOption(m UintptrListOption, f func(UintptrList) uint16) Uint16Option {  if m.IsDefined() { return Uint16(f(*m.value)) } else { return NoneUint16Option }  }
/* UintptrListOption: UintptrList->uint32 */ func MapUint32ToUintptrListOption(m UintptrListOption, f func(UintptrList) uint32) Uint32Option {  if m.IsDefined() { return Uint32(f(*m.value)) } else { return NoneUint32Option }  }
/* UintptrListOption: UintptrList->uint64 */ func MapUint64ToUintptrListOption(m UintptrListOption, f func(UintptrList) uint64) Uint64Option {  if m.IsDefined() { return Uint64(f(*m.value)) } else { return NoneUint64Option }  }
/* UintptrListOption: UintptrList->uintptr */ func MapUintptrToUintptrListOption(m UintptrListOption, f func(UintptrList) uintptr) UintptrOption {  if m.IsDefined() { return Uintptr(f(*m.value)) } else { return NoneUintptrOption }  }
/* UintptrListOption: UintptrList->byte */ func MapByteToUintptrListOption(m UintptrListOption, f func(UintptrList) byte) ByteOption {  if m.IsDefined() { return Byte(f(*m.value)) } else { return NoneByteOption }  }
/* UintptrListOption: UintptrList->rune */ func MapRuneToUintptrListOption(m UintptrListOption, f func(UintptrList) rune) RuneOption {  if m.IsDefined() { return Rune(f(*m.value)) } else { return NoneRuneOption }  }
/* UintptrListOption: UintptrList->float32 */ func MapFloat32ToUintptrListOption(m UintptrListOption, f func(UintptrList) float32) Float32Option {  if m.IsDefined() { return Float32(f(*m.value)) } else { return NoneFloat32Option }  }
/* UintptrListOption: UintptrList->float64 */ func MapFloat64ToUintptrListOption(m UintptrListOption, f func(UintptrList) float64) Float64Option {  if m.IsDefined() { return Float64(f(*m.value)) } else { return NoneFloat64Option }  }
/* UintptrListOption: UintptrList->complex64 */ func MapComplex64ToUintptrListOption(m UintptrListOption, f func(UintptrList) complex64) Complex64Option {  if m.IsDefined() { return Complex64(f(*m.value)) } else { return NoneComplex64Option }  }
/* UintptrListOption: UintptrList->complex128 */ func MapComplex128ToUintptrListOption(m UintptrListOption, f func(UintptrList) complex128) Complex128Option {  if m.IsDefined() { return Complex128(f(*m.value)) } else { return NoneComplex128Option }  }
/* UintptrListOption: UintptrList->Any */ func MapAnyToUintptrListOption(m UintptrListOption, f func(UintptrList) Any) AnyOption {  if m.IsDefined() { return AnyOpt(f(*m.value)) } else { return NoneAnyOption }  }
/* UintptrListOption: UintptrList->BoolOption */ func MapBoolOptionToUintptrListOption(m UintptrListOption, f func(UintptrList) BoolOption) BoolOptionOption {  if m.IsDefined() { return BoolBool(f(*m.value)) } else { return NoneBoolOptionOption }  }
/* UintptrListOption: UintptrList->StringOption */ func MapStringOptionToUintptrListOption(m UintptrListOption, f func(UintptrList) StringOption) StringOptionOption {  if m.IsDefined() { return StringString(f(*m.value)) } else { return NoneStringOptionOption }  }
/* UintptrListOption: UintptrList->IntOption */ func MapIntOptionToUintptrListOption(m UintptrListOption, f func(UintptrList) IntOption) IntOptionOption {  if m.IsDefined() { return IntInt(f(*m.value)) } else { return NoneIntOptionOption }  }
/* UintptrListOption: UintptrList->Int8Option */ func MapInt8OptionToUintptrListOption(m UintptrListOption, f func(UintptrList) Int8Option) Int8OptionOption {  if m.IsDefined() { return Int8Int8(f(*m.value)) } else { return NoneInt8OptionOption }  }
/* UintptrListOption: UintptrList->Int16Option */ func MapInt16OptionToUintptrListOption(m UintptrListOption, f func(UintptrList) Int16Option) Int16OptionOption {  if m.IsDefined() { return Int16Int16(f(*m.value)) } else { return NoneInt16OptionOption }  }
/* UintptrListOption: UintptrList->Int32Option */ func MapInt32OptionToUintptrListOption(m UintptrListOption, f func(UintptrList) Int32Option) Int32OptionOption {  if m.IsDefined() { return Int32Int32(f(*m.value)) } else { return NoneInt32OptionOption }  }
/* UintptrListOption: UintptrList->Int64Option */ func MapInt64OptionToUintptrListOption(m UintptrListOption, f func(UintptrList) Int64Option) Int64OptionOption {  if m.IsDefined() { return Int64Int64(f(*m.value)) } else { return NoneInt64OptionOption }  }
/* UintptrListOption: UintptrList->UintOption */ func MapUintOptionToUintptrListOption(m UintptrListOption, f func(UintptrList) UintOption) UintOptionOption {  if m.IsDefined() { return UintUint(f(*m.value)) } else { return NoneUintOptionOption }  }
/* UintptrListOption: UintptrList->Uint8Option */ func MapUint8OptionToUintptrListOption(m UintptrListOption, f func(UintptrList) Uint8Option) Uint8OptionOption {  if m.IsDefined() { return Uint8Uint8(f(*m.value)) } else { return NoneUint8OptionOption }  }
/* UintptrListOption: UintptrList->Uint16Option */ func MapUint16OptionToUintptrListOption(m UintptrListOption, f func(UintptrList) Uint16Option) Uint16OptionOption {  if m.IsDefined() { return Uint16Uint16(f(*m.value)) } else { return NoneUint16OptionOption }  }
/* UintptrListOption: UintptrList->Uint32Option */ func MapUint32OptionToUintptrListOption(m UintptrListOption, f func(UintptrList) Uint32Option) Uint32OptionOption {  if m.IsDefined() { return Uint32Uint32(f(*m.value)) } else { return NoneUint32OptionOption }  }
/* UintptrListOption: UintptrList->Uint64Option */ func MapUint64OptionToUintptrListOption(m UintptrListOption, f func(UintptrList) Uint64Option) Uint64OptionOption {  if m.IsDefined() { return Uint64Uint64(f(*m.value)) } else { return NoneUint64OptionOption }  }
/* UintptrListOption: UintptrList->UintptrOption */ func MapUintptrOptionToUintptrListOption(m UintptrListOption, f func(UintptrList) UintptrOption) UintptrOptionOption {  if m.IsDefined() { return UintptrUintptr(f(*m.value)) } else { return NoneUintptrOptionOption }  }
/* UintptrListOption: UintptrList->ByteOption */ func MapByteOptionToUintptrListOption(m UintptrListOption, f func(UintptrList) ByteOption) ByteOptionOption {  if m.IsDefined() { return ByteByte(f(*m.value)) } else { return NoneByteOptionOption }  }
/* UintptrListOption: UintptrList->RuneOption */ func MapRuneOptionToUintptrListOption(m UintptrListOption, f func(UintptrList) RuneOption) RuneOptionOption {  if m.IsDefined() { return RuneRune(f(*m.value)) } else { return NoneRuneOptionOption }  }
/* UintptrListOption: UintptrList->Float32Option */ func MapFloat32OptionToUintptrListOption(m UintptrListOption, f func(UintptrList) Float32Option) Float32OptionOption {  if m.IsDefined() { return Float32Float32(f(*m.value)) } else { return NoneFloat32OptionOption }  }
/* UintptrListOption: UintptrList->Float64Option */ func MapFloat64OptionToUintptrListOption(m UintptrListOption, f func(UintptrList) Float64Option) Float64OptionOption {  if m.IsDefined() { return Float64Float64(f(*m.value)) } else { return NoneFloat64OptionOption }  }
/* UintptrListOption: UintptrList->Complex64Option */ func MapComplex64OptionToUintptrListOption(m UintptrListOption, f func(UintptrList) Complex64Option) Complex64OptionOption {  if m.IsDefined() { return Complex64Complex64(f(*m.value)) } else { return NoneComplex64OptionOption }  }
/* UintptrListOption: UintptrList->Complex128Option */ func MapComplex128OptionToUintptrListOption(m UintptrListOption, f func(UintptrList) Complex128Option) Complex128OptionOption {  if m.IsDefined() { return Complex128Complex128(f(*m.value)) } else { return NoneComplex128OptionOption }  }
/* UintptrListOption: UintptrList->AnyOption */ func MapAnyOptionToUintptrListOption(m UintptrListOption, f func(UintptrList) AnyOption) AnyOptionOption {  if m.IsDefined() { return AnyOptAny(f(*m.value)) } else { return NoneAnyOptionOption }  }
/* UintptrListOption: UintptrList->[]bool */ func MapBoolArrToUintptrListOption(m UintptrListOption, f func(UintptrList) []bool) BoolArrOption {  if m.IsDefined() { return BoolArrOpt(f(*m.value)) } else { return NoneBoolArrOption }  }
/* UintptrListOption: UintptrList->[]string */ func MapStringArrToUintptrListOption(m UintptrListOption, f func(UintptrList) []string) StringArrOption {  if m.IsDefined() { return StringArrOpt(f(*m.value)) } else { return NoneStringArrOption }  }
/* UintptrListOption: UintptrList->[]int */ func MapIntArrToUintptrListOption(m UintptrListOption, f func(UintptrList) []int) IntArrOption {  if m.IsDefined() { return IntArrOpt(f(*m.value)) } else { return NoneIntArrOption }  }
/* UintptrListOption: UintptrList->[]int8 */ func MapInt8ArrToUintptrListOption(m UintptrListOption, f func(UintptrList) []int8) Int8ArrOption {  if m.IsDefined() { return Int8ArrOpt(f(*m.value)) } else { return NoneInt8ArrOption }  }
/* UintptrListOption: UintptrList->[]int16 */ func MapInt16ArrToUintptrListOption(m UintptrListOption, f func(UintptrList) []int16) Int16ArrOption {  if m.IsDefined() { return Int16ArrOpt(f(*m.value)) } else { return NoneInt16ArrOption }  }
/* UintptrListOption: UintptrList->[]int32 */ func MapInt32ArrToUintptrListOption(m UintptrListOption, f func(UintptrList) []int32) Int32ArrOption {  if m.IsDefined() { return Int32ArrOpt(f(*m.value)) } else { return NoneInt32ArrOption }  }
/* UintptrListOption: UintptrList->[]int64 */ func MapInt64ArrToUintptrListOption(m UintptrListOption, f func(UintptrList) []int64) Int64ArrOption {  if m.IsDefined() { return Int64ArrOpt(f(*m.value)) } else { return NoneInt64ArrOption }  }
/* UintptrListOption: UintptrList->[]uint */ func MapUintArrToUintptrListOption(m UintptrListOption, f func(UintptrList) []uint) UintArrOption {  if m.IsDefined() { return UintArrOpt(f(*m.value)) } else { return NoneUintArrOption }  }
/* UintptrListOption: UintptrList->[]uint8 */ func MapUint8ArrToUintptrListOption(m UintptrListOption, f func(UintptrList) []uint8) Uint8ArrOption {  if m.IsDefined() { return Uint8ArrOpt(f(*m.value)) } else { return NoneUint8ArrOption }  }
/* UintptrListOption: UintptrList->[]uint16 */ func MapUint16ArrToUintptrListOption(m UintptrListOption, f func(UintptrList) []uint16) Uint16ArrOption {  if m.IsDefined() { return Uint16ArrOpt(f(*m.value)) } else { return NoneUint16ArrOption }  }
/* UintptrListOption: UintptrList->[]uint32 */ func MapUint32ArrToUintptrListOption(m UintptrListOption, f func(UintptrList) []uint32) Uint32ArrOption {  if m.IsDefined() { return Uint32ArrOpt(f(*m.value)) } else { return NoneUint32ArrOption }  }
/* UintptrListOption: UintptrList->[]uint64 */ func MapUint64ArrToUintptrListOption(m UintptrListOption, f func(UintptrList) []uint64) Uint64ArrOption {  if m.IsDefined() { return Uint64ArrOpt(f(*m.value)) } else { return NoneUint64ArrOption }  }
/* UintptrListOption: UintptrList->[]uintptr */ func MapUintptrArrToUintptrListOption(m UintptrListOption, f func(UintptrList) []uintptr) UintptrArrOption {  if m.IsDefined() { return UintptrArrOpt(f(*m.value)) } else { return NoneUintptrArrOption }  }
/* UintptrListOption: UintptrList->[]byte */ func MapByteArrToUintptrListOption(m UintptrListOption, f func(UintptrList) []byte) ByteArrOption {  if m.IsDefined() { return ByteArrOpt(f(*m.value)) } else { return NoneByteArrOption }  }
/* UintptrListOption: UintptrList->[]rune */ func MapRuneArrToUintptrListOption(m UintptrListOption, f func(UintptrList) []rune) RuneArrOption {  if m.IsDefined() { return RuneArrOpt(f(*m.value)) } else { return NoneRuneArrOption }  }
/* UintptrListOption: UintptrList->[]float32 */ func MapFloat32ArrToUintptrListOption(m UintptrListOption, f func(UintptrList) []float32) Float32ArrOption {  if m.IsDefined() { return Float32ArrOpt(f(*m.value)) } else { return NoneFloat32ArrOption }  }
/* UintptrListOption: UintptrList->[]float64 */ func MapFloat64ArrToUintptrListOption(m UintptrListOption, f func(UintptrList) []float64) Float64ArrOption {  if m.IsDefined() { return Float64ArrOpt(f(*m.value)) } else { return NoneFloat64ArrOption }  }
/* UintptrListOption: UintptrList->[]complex64 */ func MapComplex64ArrToUintptrListOption(m UintptrListOption, f func(UintptrList) []complex64) Complex64ArrOption {  if m.IsDefined() { return Complex64ArrOpt(f(*m.value)) } else { return NoneComplex64ArrOption }  }
/* UintptrListOption: UintptrList->[]complex128 */ func MapComplex128ArrToUintptrListOption(m UintptrListOption, f func(UintptrList) []complex128) Complex128ArrOption {  if m.IsDefined() { return Complex128ArrOpt(f(*m.value)) } else { return NoneComplex128ArrOption }  }
/* UintptrListOption: UintptrList->[]Any */ func MapAnyArrToUintptrListOption(m UintptrListOption, f func(UintptrList) []Any) AnyArrOption {  if m.IsDefined() { return AnyArrOpt(f(*m.value)) } else { return NoneAnyArrOption }  }
/* UintptrListOption: UintptrList->BoolList */ func MapBoolListToUintptrListOption(m UintptrListOption, f func(UintptrList) BoolList) BoolListOption {  if m.IsDefined() { return BoolListOpt(f(*m.value)) } else { return NoneBoolListOption }  }
/* UintptrListOption: UintptrList->StringList */ func MapStringListToUintptrListOption(m UintptrListOption, f func(UintptrList) StringList) StringListOption {  if m.IsDefined() { return StringListOpt(f(*m.value)) } else { return NoneStringListOption }  }
/* UintptrListOption: UintptrList->IntList */ func MapIntListToUintptrListOption(m UintptrListOption, f func(UintptrList) IntList) IntListOption {  if m.IsDefined() { return IntListOpt(f(*m.value)) } else { return NoneIntListOption }  }
/* UintptrListOption: UintptrList->Int8List */ func MapInt8ListToUintptrListOption(m UintptrListOption, f func(UintptrList) Int8List) Int8ListOption {  if m.IsDefined() { return Int8ListOpt(f(*m.value)) } else { return NoneInt8ListOption }  }
/* UintptrListOption: UintptrList->Int16List */ func MapInt16ListToUintptrListOption(m UintptrListOption, f func(UintptrList) Int16List) Int16ListOption {  if m.IsDefined() { return Int16ListOpt(f(*m.value)) } else { return NoneInt16ListOption }  }
/* UintptrListOption: UintptrList->Int32List */ func MapInt32ListToUintptrListOption(m UintptrListOption, f func(UintptrList) Int32List) Int32ListOption {  if m.IsDefined() { return Int32ListOpt(f(*m.value)) } else { return NoneInt32ListOption }  }
/* UintptrListOption: UintptrList->Int64List */ func MapInt64ListToUintptrListOption(m UintptrListOption, f func(UintptrList) Int64List) Int64ListOption {  if m.IsDefined() { return Int64ListOpt(f(*m.value)) } else { return NoneInt64ListOption }  }
/* UintptrListOption: UintptrList->UintList */ func MapUintListToUintptrListOption(m UintptrListOption, f func(UintptrList) UintList) UintListOption {  if m.IsDefined() { return UintListOpt(f(*m.value)) } else { return NoneUintListOption }  }
/* UintptrListOption: UintptrList->Uint8List */ func MapUint8ListToUintptrListOption(m UintptrListOption, f func(UintptrList) Uint8List) Uint8ListOption {  if m.IsDefined() { return Uint8ListOpt(f(*m.value)) } else { return NoneUint8ListOption }  }
/* UintptrListOption: UintptrList->Uint16List */ func MapUint16ListToUintptrListOption(m UintptrListOption, f func(UintptrList) Uint16List) Uint16ListOption {  if m.IsDefined() { return Uint16ListOpt(f(*m.value)) } else { return NoneUint16ListOption }  }
/* UintptrListOption: UintptrList->Uint32List */ func MapUint32ListToUintptrListOption(m UintptrListOption, f func(UintptrList) Uint32List) Uint32ListOption {  if m.IsDefined() { return Uint32ListOpt(f(*m.value)) } else { return NoneUint32ListOption }  }
/* UintptrListOption: UintptrList->Uint64List */ func MapUint64ListToUintptrListOption(m UintptrListOption, f func(UintptrList) Uint64List) Uint64ListOption {  if m.IsDefined() { return Uint64ListOpt(f(*m.value)) } else { return NoneUint64ListOption }  }
/* UintptrListOption: UintptrList->UintptrList */ func MapUintptrListToUintptrListOption(m UintptrListOption, f func(UintptrList) UintptrList) UintptrListOption {  if m.IsDefined() { return UintptrListOpt(f(*m.value)) } else { return NoneUintptrListOption }  }
/* UintptrListOption: UintptrList->ByteList */ func MapByteListToUintptrListOption(m UintptrListOption, f func(UintptrList) ByteList) ByteListOption {  if m.IsDefined() { return ByteListOpt(f(*m.value)) } else { return NoneByteListOption }  }
/* UintptrListOption: UintptrList->RuneList */ func MapRuneListToUintptrListOption(m UintptrListOption, f func(UintptrList) RuneList) RuneListOption {  if m.IsDefined() { return RuneListOpt(f(*m.value)) } else { return NoneRuneListOption }  }
/* UintptrListOption: UintptrList->Float32List */ func MapFloat32ListToUintptrListOption(m UintptrListOption, f func(UintptrList) Float32List) Float32ListOption {  if m.IsDefined() { return Float32ListOpt(f(*m.value)) } else { return NoneFloat32ListOption }  }
/* UintptrListOption: UintptrList->Float64List */ func MapFloat64ListToUintptrListOption(m UintptrListOption, f func(UintptrList) Float64List) Float64ListOption {  if m.IsDefined() { return Float64ListOpt(f(*m.value)) } else { return NoneFloat64ListOption }  }
/* UintptrListOption: UintptrList->Complex64List */ func MapComplex64ListToUintptrListOption(m UintptrListOption, f func(UintptrList) Complex64List) Complex64ListOption {  if m.IsDefined() { return Complex64ListOpt(f(*m.value)) } else { return NoneComplex64ListOption }  }
/* UintptrListOption: UintptrList->Complex128List */ func MapComplex128ListToUintptrListOption(m UintptrListOption, f func(UintptrList) Complex128List) Complex128ListOption {  if m.IsDefined() { return Complex128ListOpt(f(*m.value)) } else { return NoneComplex128ListOption }  }
/* UintptrListOption: UintptrList->AnyList */ func MapAnyListToUintptrListOption(m UintptrListOption, f func(UintptrList) AnyList) AnyListOption {  if m.IsDefined() { return AnyListOpt(f(*m.value)) } else { return NoneAnyListOption }  }
/* ByteListOption: ByteList->bool */ func MapBoolToByteListOption(m ByteListOption, f func(ByteList) bool) BoolOption {  if m.IsDefined() { return Bool(f(*m.value)) } else { return NoneBoolOption }  }
/* ByteListOption: ByteList->string */ func MapStringToByteListOption(m ByteListOption, f func(ByteList) string) StringOption {  if m.IsDefined() { return String(f(*m.value)) } else { return NoneStringOption }  }
/* ByteListOption: ByteList->int */ func MapIntToByteListOption(m ByteListOption, f func(ByteList) int) IntOption {  if m.IsDefined() { return Int(f(*m.value)) } else { return NoneIntOption }  }
/* ByteListOption: ByteList->int8 */ func MapInt8ToByteListOption(m ByteListOption, f func(ByteList) int8) Int8Option {  if m.IsDefined() { return Int8(f(*m.value)) } else { return NoneInt8Option }  }
/* ByteListOption: ByteList->int16 */ func MapInt16ToByteListOption(m ByteListOption, f func(ByteList) int16) Int16Option {  if m.IsDefined() { return Int16(f(*m.value)) } else { return NoneInt16Option }  }
/* ByteListOption: ByteList->int32 */ func MapInt32ToByteListOption(m ByteListOption, f func(ByteList) int32) Int32Option {  if m.IsDefined() { return Int32(f(*m.value)) } else { return NoneInt32Option }  }
/* ByteListOption: ByteList->int64 */ func MapInt64ToByteListOption(m ByteListOption, f func(ByteList) int64) Int64Option {  if m.IsDefined() { return Int64(f(*m.value)) } else { return NoneInt64Option }  }
/* ByteListOption: ByteList->uint */ func MapUintToByteListOption(m ByteListOption, f func(ByteList) uint) UintOption {  if m.IsDefined() { return Uint(f(*m.value)) } else { return NoneUintOption }  }
/* ByteListOption: ByteList->uint8 */ func MapUint8ToByteListOption(m ByteListOption, f func(ByteList) uint8) Uint8Option {  if m.IsDefined() { return Uint8(f(*m.value)) } else { return NoneUint8Option }  }
/* ByteListOption: ByteList->uint16 */ func MapUint16ToByteListOption(m ByteListOption, f func(ByteList) uint16) Uint16Option {  if m.IsDefined() { return Uint16(f(*m.value)) } else { return NoneUint16Option }  }
/* ByteListOption: ByteList->uint32 */ func MapUint32ToByteListOption(m ByteListOption, f func(ByteList) uint32) Uint32Option {  if m.IsDefined() { return Uint32(f(*m.value)) } else { return NoneUint32Option }  }
/* ByteListOption: ByteList->uint64 */ func MapUint64ToByteListOption(m ByteListOption, f func(ByteList) uint64) Uint64Option {  if m.IsDefined() { return Uint64(f(*m.value)) } else { return NoneUint64Option }  }
/* ByteListOption: ByteList->uintptr */ func MapUintptrToByteListOption(m ByteListOption, f func(ByteList) uintptr) UintptrOption {  if m.IsDefined() { return Uintptr(f(*m.value)) } else { return NoneUintptrOption }  }
/* ByteListOption: ByteList->byte */ func MapByteToByteListOption(m ByteListOption, f func(ByteList) byte) ByteOption {  if m.IsDefined() { return Byte(f(*m.value)) } else { return NoneByteOption }  }
/* ByteListOption: ByteList->rune */ func MapRuneToByteListOption(m ByteListOption, f func(ByteList) rune) RuneOption {  if m.IsDefined() { return Rune(f(*m.value)) } else { return NoneRuneOption }  }
/* ByteListOption: ByteList->float32 */ func MapFloat32ToByteListOption(m ByteListOption, f func(ByteList) float32) Float32Option {  if m.IsDefined() { return Float32(f(*m.value)) } else { return NoneFloat32Option }  }
/* ByteListOption: ByteList->float64 */ func MapFloat64ToByteListOption(m ByteListOption, f func(ByteList) float64) Float64Option {  if m.IsDefined() { return Float64(f(*m.value)) } else { return NoneFloat64Option }  }
/* ByteListOption: ByteList->complex64 */ func MapComplex64ToByteListOption(m ByteListOption, f func(ByteList) complex64) Complex64Option {  if m.IsDefined() { return Complex64(f(*m.value)) } else { return NoneComplex64Option }  }
/* ByteListOption: ByteList->complex128 */ func MapComplex128ToByteListOption(m ByteListOption, f func(ByteList) complex128) Complex128Option {  if m.IsDefined() { return Complex128(f(*m.value)) } else { return NoneComplex128Option }  }
/* ByteListOption: ByteList->Any */ func MapAnyToByteListOption(m ByteListOption, f func(ByteList) Any) AnyOption {  if m.IsDefined() { return AnyOpt(f(*m.value)) } else { return NoneAnyOption }  }
/* ByteListOption: ByteList->BoolOption */ func MapBoolOptionToByteListOption(m ByteListOption, f func(ByteList) BoolOption) BoolOptionOption {  if m.IsDefined() { return BoolBool(f(*m.value)) } else { return NoneBoolOptionOption }  }
/* ByteListOption: ByteList->StringOption */ func MapStringOptionToByteListOption(m ByteListOption, f func(ByteList) StringOption) StringOptionOption {  if m.IsDefined() { return StringString(f(*m.value)) } else { return NoneStringOptionOption }  }
/* ByteListOption: ByteList->IntOption */ func MapIntOptionToByteListOption(m ByteListOption, f func(ByteList) IntOption) IntOptionOption {  if m.IsDefined() { return IntInt(f(*m.value)) } else { return NoneIntOptionOption }  }
/* ByteListOption: ByteList->Int8Option */ func MapInt8OptionToByteListOption(m ByteListOption, f func(ByteList) Int8Option) Int8OptionOption {  if m.IsDefined() { return Int8Int8(f(*m.value)) } else { return NoneInt8OptionOption }  }
/* ByteListOption: ByteList->Int16Option */ func MapInt16OptionToByteListOption(m ByteListOption, f func(ByteList) Int16Option) Int16OptionOption {  if m.IsDefined() { return Int16Int16(f(*m.value)) } else { return NoneInt16OptionOption }  }
/* ByteListOption: ByteList->Int32Option */ func MapInt32OptionToByteListOption(m ByteListOption, f func(ByteList) Int32Option) Int32OptionOption {  if m.IsDefined() { return Int32Int32(f(*m.value)) } else { return NoneInt32OptionOption }  }
/* ByteListOption: ByteList->Int64Option */ func MapInt64OptionToByteListOption(m ByteListOption, f func(ByteList) Int64Option) Int64OptionOption {  if m.IsDefined() { return Int64Int64(f(*m.value)) } else { return NoneInt64OptionOption }  }
/* ByteListOption: ByteList->UintOption */ func MapUintOptionToByteListOption(m ByteListOption, f func(ByteList) UintOption) UintOptionOption {  if m.IsDefined() { return UintUint(f(*m.value)) } else { return NoneUintOptionOption }  }
/* ByteListOption: ByteList->Uint8Option */ func MapUint8OptionToByteListOption(m ByteListOption, f func(ByteList) Uint8Option) Uint8OptionOption {  if m.IsDefined() { return Uint8Uint8(f(*m.value)) } else { return NoneUint8OptionOption }  }
/* ByteListOption: ByteList->Uint16Option */ func MapUint16OptionToByteListOption(m ByteListOption, f func(ByteList) Uint16Option) Uint16OptionOption {  if m.IsDefined() { return Uint16Uint16(f(*m.value)) } else { return NoneUint16OptionOption }  }
/* ByteListOption: ByteList->Uint32Option */ func MapUint32OptionToByteListOption(m ByteListOption, f func(ByteList) Uint32Option) Uint32OptionOption {  if m.IsDefined() { return Uint32Uint32(f(*m.value)) } else { return NoneUint32OptionOption }  }
/* ByteListOption: ByteList->Uint64Option */ func MapUint64OptionToByteListOption(m ByteListOption, f func(ByteList) Uint64Option) Uint64OptionOption {  if m.IsDefined() { return Uint64Uint64(f(*m.value)) } else { return NoneUint64OptionOption }  }
/* ByteListOption: ByteList->UintptrOption */ func MapUintptrOptionToByteListOption(m ByteListOption, f func(ByteList) UintptrOption) UintptrOptionOption {  if m.IsDefined() { return UintptrUintptr(f(*m.value)) } else { return NoneUintptrOptionOption }  }
/* ByteListOption: ByteList->ByteOption */ func MapByteOptionToByteListOption(m ByteListOption, f func(ByteList) ByteOption) ByteOptionOption {  if m.IsDefined() { return ByteByte(f(*m.value)) } else { return NoneByteOptionOption }  }
/* ByteListOption: ByteList->RuneOption */ func MapRuneOptionToByteListOption(m ByteListOption, f func(ByteList) RuneOption) RuneOptionOption {  if m.IsDefined() { return RuneRune(f(*m.value)) } else { return NoneRuneOptionOption }  }
/* ByteListOption: ByteList->Float32Option */ func MapFloat32OptionToByteListOption(m ByteListOption, f func(ByteList) Float32Option) Float32OptionOption {  if m.IsDefined() { return Float32Float32(f(*m.value)) } else { return NoneFloat32OptionOption }  }
/* ByteListOption: ByteList->Float64Option */ func MapFloat64OptionToByteListOption(m ByteListOption, f func(ByteList) Float64Option) Float64OptionOption {  if m.IsDefined() { return Float64Float64(f(*m.value)) } else { return NoneFloat64OptionOption }  }
/* ByteListOption: ByteList->Complex64Option */ func MapComplex64OptionToByteListOption(m ByteListOption, f func(ByteList) Complex64Option) Complex64OptionOption {  if m.IsDefined() { return Complex64Complex64(f(*m.value)) } else { return NoneComplex64OptionOption }  }
/* ByteListOption: ByteList->Complex128Option */ func MapComplex128OptionToByteListOption(m ByteListOption, f func(ByteList) Complex128Option) Complex128OptionOption {  if m.IsDefined() { return Complex128Complex128(f(*m.value)) } else { return NoneComplex128OptionOption }  }
/* ByteListOption: ByteList->AnyOption */ func MapAnyOptionToByteListOption(m ByteListOption, f func(ByteList) AnyOption) AnyOptionOption {  if m.IsDefined() { return AnyOptAny(f(*m.value)) } else { return NoneAnyOptionOption }  }
/* ByteListOption: ByteList->[]bool */ func MapBoolArrToByteListOption(m ByteListOption, f func(ByteList) []bool) BoolArrOption {  if m.IsDefined() { return BoolArrOpt(f(*m.value)) } else { return NoneBoolArrOption }  }
/* ByteListOption: ByteList->[]string */ func MapStringArrToByteListOption(m ByteListOption, f func(ByteList) []string) StringArrOption {  if m.IsDefined() { return StringArrOpt(f(*m.value)) } else { return NoneStringArrOption }  }
/* ByteListOption: ByteList->[]int */ func MapIntArrToByteListOption(m ByteListOption, f func(ByteList) []int) IntArrOption {  if m.IsDefined() { return IntArrOpt(f(*m.value)) } else { return NoneIntArrOption }  }
/* ByteListOption: ByteList->[]int8 */ func MapInt8ArrToByteListOption(m ByteListOption, f func(ByteList) []int8) Int8ArrOption {  if m.IsDefined() { return Int8ArrOpt(f(*m.value)) } else { return NoneInt8ArrOption }  }
/* ByteListOption: ByteList->[]int16 */ func MapInt16ArrToByteListOption(m ByteListOption, f func(ByteList) []int16) Int16ArrOption {  if m.IsDefined() { return Int16ArrOpt(f(*m.value)) } else { return NoneInt16ArrOption }  }
/* ByteListOption: ByteList->[]int32 */ func MapInt32ArrToByteListOption(m ByteListOption, f func(ByteList) []int32) Int32ArrOption {  if m.IsDefined() { return Int32ArrOpt(f(*m.value)) } else { return NoneInt32ArrOption }  }
/* ByteListOption: ByteList->[]int64 */ func MapInt64ArrToByteListOption(m ByteListOption, f func(ByteList) []int64) Int64ArrOption {  if m.IsDefined() { return Int64ArrOpt(f(*m.value)) } else { return NoneInt64ArrOption }  }
/* ByteListOption: ByteList->[]uint */ func MapUintArrToByteListOption(m ByteListOption, f func(ByteList) []uint) UintArrOption {  if m.IsDefined() { return UintArrOpt(f(*m.value)) } else { return NoneUintArrOption }  }
/* ByteListOption: ByteList->[]uint8 */ func MapUint8ArrToByteListOption(m ByteListOption, f func(ByteList) []uint8) Uint8ArrOption {  if m.IsDefined() { return Uint8ArrOpt(f(*m.value)) } else { return NoneUint8ArrOption }  }
/* ByteListOption: ByteList->[]uint16 */ func MapUint16ArrToByteListOption(m ByteListOption, f func(ByteList) []uint16) Uint16ArrOption {  if m.IsDefined() { return Uint16ArrOpt(f(*m.value)) } else { return NoneUint16ArrOption }  }
/* ByteListOption: ByteList->[]uint32 */ func MapUint32ArrToByteListOption(m ByteListOption, f func(ByteList) []uint32) Uint32ArrOption {  if m.IsDefined() { return Uint32ArrOpt(f(*m.value)) } else { return NoneUint32ArrOption }  }
/* ByteListOption: ByteList->[]uint64 */ func MapUint64ArrToByteListOption(m ByteListOption, f func(ByteList) []uint64) Uint64ArrOption {  if m.IsDefined() { return Uint64ArrOpt(f(*m.value)) } else { return NoneUint64ArrOption }  }
/* ByteListOption: ByteList->[]uintptr */ func MapUintptrArrToByteListOption(m ByteListOption, f func(ByteList) []uintptr) UintptrArrOption {  if m.IsDefined() { return UintptrArrOpt(f(*m.value)) } else { return NoneUintptrArrOption }  }
/* ByteListOption: ByteList->[]byte */ func MapByteArrToByteListOption(m ByteListOption, f func(ByteList) []byte) ByteArrOption {  if m.IsDefined() { return ByteArrOpt(f(*m.value)) } else { return NoneByteArrOption }  }
/* ByteListOption: ByteList->[]rune */ func MapRuneArrToByteListOption(m ByteListOption, f func(ByteList) []rune) RuneArrOption {  if m.IsDefined() { return RuneArrOpt(f(*m.value)) } else { return NoneRuneArrOption }  }
/* ByteListOption: ByteList->[]float32 */ func MapFloat32ArrToByteListOption(m ByteListOption, f func(ByteList) []float32) Float32ArrOption {  if m.IsDefined() { return Float32ArrOpt(f(*m.value)) } else { return NoneFloat32ArrOption }  }
/* ByteListOption: ByteList->[]float64 */ func MapFloat64ArrToByteListOption(m ByteListOption, f func(ByteList) []float64) Float64ArrOption {  if m.IsDefined() { return Float64ArrOpt(f(*m.value)) } else { return NoneFloat64ArrOption }  }
/* ByteListOption: ByteList->[]complex64 */ func MapComplex64ArrToByteListOption(m ByteListOption, f func(ByteList) []complex64) Complex64ArrOption {  if m.IsDefined() { return Complex64ArrOpt(f(*m.value)) } else { return NoneComplex64ArrOption }  }
/* ByteListOption: ByteList->[]complex128 */ func MapComplex128ArrToByteListOption(m ByteListOption, f func(ByteList) []complex128) Complex128ArrOption {  if m.IsDefined() { return Complex128ArrOpt(f(*m.value)) } else { return NoneComplex128ArrOption }  }
/* ByteListOption: ByteList->[]Any */ func MapAnyArrToByteListOption(m ByteListOption, f func(ByteList) []Any) AnyArrOption {  if m.IsDefined() { return AnyArrOpt(f(*m.value)) } else { return NoneAnyArrOption }  }
/* ByteListOption: ByteList->BoolList */ func MapBoolListToByteListOption(m ByteListOption, f func(ByteList) BoolList) BoolListOption {  if m.IsDefined() { return BoolListOpt(f(*m.value)) } else { return NoneBoolListOption }  }
/* ByteListOption: ByteList->StringList */ func MapStringListToByteListOption(m ByteListOption, f func(ByteList) StringList) StringListOption {  if m.IsDefined() { return StringListOpt(f(*m.value)) } else { return NoneStringListOption }  }
/* ByteListOption: ByteList->IntList */ func MapIntListToByteListOption(m ByteListOption, f func(ByteList) IntList) IntListOption {  if m.IsDefined() { return IntListOpt(f(*m.value)) } else { return NoneIntListOption }  }
/* ByteListOption: ByteList->Int8List */ func MapInt8ListToByteListOption(m ByteListOption, f func(ByteList) Int8List) Int8ListOption {  if m.IsDefined() { return Int8ListOpt(f(*m.value)) } else { return NoneInt8ListOption }  }
/* ByteListOption: ByteList->Int16List */ func MapInt16ListToByteListOption(m ByteListOption, f func(ByteList) Int16List) Int16ListOption {  if m.IsDefined() { return Int16ListOpt(f(*m.value)) } else { return NoneInt16ListOption }  }
/* ByteListOption: ByteList->Int32List */ func MapInt32ListToByteListOption(m ByteListOption, f func(ByteList) Int32List) Int32ListOption {  if m.IsDefined() { return Int32ListOpt(f(*m.value)) } else { return NoneInt32ListOption }  }
/* ByteListOption: ByteList->Int64List */ func MapInt64ListToByteListOption(m ByteListOption, f func(ByteList) Int64List) Int64ListOption {  if m.IsDefined() { return Int64ListOpt(f(*m.value)) } else { return NoneInt64ListOption }  }
/* ByteListOption: ByteList->UintList */ func MapUintListToByteListOption(m ByteListOption, f func(ByteList) UintList) UintListOption {  if m.IsDefined() { return UintListOpt(f(*m.value)) } else { return NoneUintListOption }  }
/* ByteListOption: ByteList->Uint8List */ func MapUint8ListToByteListOption(m ByteListOption, f func(ByteList) Uint8List) Uint8ListOption {  if m.IsDefined() { return Uint8ListOpt(f(*m.value)) } else { return NoneUint8ListOption }  }
/* ByteListOption: ByteList->Uint16List */ func MapUint16ListToByteListOption(m ByteListOption, f func(ByteList) Uint16List) Uint16ListOption {  if m.IsDefined() { return Uint16ListOpt(f(*m.value)) } else { return NoneUint16ListOption }  }
/* ByteListOption: ByteList->Uint32List */ func MapUint32ListToByteListOption(m ByteListOption, f func(ByteList) Uint32List) Uint32ListOption {  if m.IsDefined() { return Uint32ListOpt(f(*m.value)) } else { return NoneUint32ListOption }  }
/* ByteListOption: ByteList->Uint64List */ func MapUint64ListToByteListOption(m ByteListOption, f func(ByteList) Uint64List) Uint64ListOption {  if m.IsDefined() { return Uint64ListOpt(f(*m.value)) } else { return NoneUint64ListOption }  }
/* ByteListOption: ByteList->UintptrList */ func MapUintptrListToByteListOption(m ByteListOption, f func(ByteList) UintptrList) UintptrListOption {  if m.IsDefined() { return UintptrListOpt(f(*m.value)) } else { return NoneUintptrListOption }  }
/* ByteListOption: ByteList->ByteList */ func MapByteListToByteListOption(m ByteListOption, f func(ByteList) ByteList) ByteListOption {  if m.IsDefined() { return ByteListOpt(f(*m.value)) } else { return NoneByteListOption }  }
/* ByteListOption: ByteList->RuneList */ func MapRuneListToByteListOption(m ByteListOption, f func(ByteList) RuneList) RuneListOption {  if m.IsDefined() { return RuneListOpt(f(*m.value)) } else { return NoneRuneListOption }  }
/* ByteListOption: ByteList->Float32List */ func MapFloat32ListToByteListOption(m ByteListOption, f func(ByteList) Float32List) Float32ListOption {  if m.IsDefined() { return Float32ListOpt(f(*m.value)) } else { return NoneFloat32ListOption }  }
/* ByteListOption: ByteList->Float64List */ func MapFloat64ListToByteListOption(m ByteListOption, f func(ByteList) Float64List) Float64ListOption {  if m.IsDefined() { return Float64ListOpt(f(*m.value)) } else { return NoneFloat64ListOption }  }
/* ByteListOption: ByteList->Complex64List */ func MapComplex64ListToByteListOption(m ByteListOption, f func(ByteList) Complex64List) Complex64ListOption {  if m.IsDefined() { return Complex64ListOpt(f(*m.value)) } else { return NoneComplex64ListOption }  }
/* ByteListOption: ByteList->Complex128List */ func MapComplex128ListToByteListOption(m ByteListOption, f func(ByteList) Complex128List) Complex128ListOption {  if m.IsDefined() { return Complex128ListOpt(f(*m.value)) } else { return NoneComplex128ListOption }  }
/* ByteListOption: ByteList->AnyList */ func MapAnyListToByteListOption(m ByteListOption, f func(ByteList) AnyList) AnyListOption {  if m.IsDefined() { return AnyListOpt(f(*m.value)) } else { return NoneAnyListOption }  }
/* RuneListOption: RuneList->bool */ func MapBoolToRuneListOption(m RuneListOption, f func(RuneList) bool) BoolOption {  if m.IsDefined() { return Bool(f(*m.value)) } else { return NoneBoolOption }  }
/* RuneListOption: RuneList->string */ func MapStringToRuneListOption(m RuneListOption, f func(RuneList) string) StringOption {  if m.IsDefined() { return String(f(*m.value)) } else { return NoneStringOption }  }
/* RuneListOption: RuneList->int */ func MapIntToRuneListOption(m RuneListOption, f func(RuneList) int) IntOption {  if m.IsDefined() { return Int(f(*m.value)) } else { return NoneIntOption }  }
/* RuneListOption: RuneList->int8 */ func MapInt8ToRuneListOption(m RuneListOption, f func(RuneList) int8) Int8Option {  if m.IsDefined() { return Int8(f(*m.value)) } else { return NoneInt8Option }  }
/* RuneListOption: RuneList->int16 */ func MapInt16ToRuneListOption(m RuneListOption, f func(RuneList) int16) Int16Option {  if m.IsDefined() { return Int16(f(*m.value)) } else { return NoneInt16Option }  }
/* RuneListOption: RuneList->int32 */ func MapInt32ToRuneListOption(m RuneListOption, f func(RuneList) int32) Int32Option {  if m.IsDefined() { return Int32(f(*m.value)) } else { return NoneInt32Option }  }
/* RuneListOption: RuneList->int64 */ func MapInt64ToRuneListOption(m RuneListOption, f func(RuneList) int64) Int64Option {  if m.IsDefined() { return Int64(f(*m.value)) } else { return NoneInt64Option }  }
/* RuneListOption: RuneList->uint */ func MapUintToRuneListOption(m RuneListOption, f func(RuneList) uint) UintOption {  if m.IsDefined() { return Uint(f(*m.value)) } else { return NoneUintOption }  }
/* RuneListOption: RuneList->uint8 */ func MapUint8ToRuneListOption(m RuneListOption, f func(RuneList) uint8) Uint8Option {  if m.IsDefined() { return Uint8(f(*m.value)) } else { return NoneUint8Option }  }
/* RuneListOption: RuneList->uint16 */ func MapUint16ToRuneListOption(m RuneListOption, f func(RuneList) uint16) Uint16Option {  if m.IsDefined() { return Uint16(f(*m.value)) } else { return NoneUint16Option }  }
/* RuneListOption: RuneList->uint32 */ func MapUint32ToRuneListOption(m RuneListOption, f func(RuneList) uint32) Uint32Option {  if m.IsDefined() { return Uint32(f(*m.value)) } else { return NoneUint32Option }  }
/* RuneListOption: RuneList->uint64 */ func MapUint64ToRuneListOption(m RuneListOption, f func(RuneList) uint64) Uint64Option {  if m.IsDefined() { return Uint64(f(*m.value)) } else { return NoneUint64Option }  }
/* RuneListOption: RuneList->uintptr */ func MapUintptrToRuneListOption(m RuneListOption, f func(RuneList) uintptr) UintptrOption {  if m.IsDefined() { return Uintptr(f(*m.value)) } else { return NoneUintptrOption }  }
/* RuneListOption: RuneList->byte */ func MapByteToRuneListOption(m RuneListOption, f func(RuneList) byte) ByteOption {  if m.IsDefined() { return Byte(f(*m.value)) } else { return NoneByteOption }  }
/* RuneListOption: RuneList->rune */ func MapRuneToRuneListOption(m RuneListOption, f func(RuneList) rune) RuneOption {  if m.IsDefined() { return Rune(f(*m.value)) } else { return NoneRuneOption }  }
/* RuneListOption: RuneList->float32 */ func MapFloat32ToRuneListOption(m RuneListOption, f func(RuneList) float32) Float32Option {  if m.IsDefined() { return Float32(f(*m.value)) } else { return NoneFloat32Option }  }
/* RuneListOption: RuneList->float64 */ func MapFloat64ToRuneListOption(m RuneListOption, f func(RuneList) float64) Float64Option {  if m.IsDefined() { return Float64(f(*m.value)) } else { return NoneFloat64Option }  }
/* RuneListOption: RuneList->complex64 */ func MapComplex64ToRuneListOption(m RuneListOption, f func(RuneList) complex64) Complex64Option {  if m.IsDefined() { return Complex64(f(*m.value)) } else { return NoneComplex64Option }  }
/* RuneListOption: RuneList->complex128 */ func MapComplex128ToRuneListOption(m RuneListOption, f func(RuneList) complex128) Complex128Option {  if m.IsDefined() { return Complex128(f(*m.value)) } else { return NoneComplex128Option }  }
/* RuneListOption: RuneList->Any */ func MapAnyToRuneListOption(m RuneListOption, f func(RuneList) Any) AnyOption {  if m.IsDefined() { return AnyOpt(f(*m.value)) } else { return NoneAnyOption }  }
/* RuneListOption: RuneList->BoolOption */ func MapBoolOptionToRuneListOption(m RuneListOption, f func(RuneList) BoolOption) BoolOptionOption {  if m.IsDefined() { return BoolBool(f(*m.value)) } else { return NoneBoolOptionOption }  }
/* RuneListOption: RuneList->StringOption */ func MapStringOptionToRuneListOption(m RuneListOption, f func(RuneList) StringOption) StringOptionOption {  if m.IsDefined() { return StringString(f(*m.value)) } else { return NoneStringOptionOption }  }
/* RuneListOption: RuneList->IntOption */ func MapIntOptionToRuneListOption(m RuneListOption, f func(RuneList) IntOption) IntOptionOption {  if m.IsDefined() { return IntInt(f(*m.value)) } else { return NoneIntOptionOption }  }
/* RuneListOption: RuneList->Int8Option */ func MapInt8OptionToRuneListOption(m RuneListOption, f func(RuneList) Int8Option) Int8OptionOption {  if m.IsDefined() { return Int8Int8(f(*m.value)) } else { return NoneInt8OptionOption }  }
/* RuneListOption: RuneList->Int16Option */ func MapInt16OptionToRuneListOption(m RuneListOption, f func(RuneList) Int16Option) Int16OptionOption {  if m.IsDefined() { return Int16Int16(f(*m.value)) } else { return NoneInt16OptionOption }  }
/* RuneListOption: RuneList->Int32Option */ func MapInt32OptionToRuneListOption(m RuneListOption, f func(RuneList) Int32Option) Int32OptionOption {  if m.IsDefined() { return Int32Int32(f(*m.value)) } else { return NoneInt32OptionOption }  }
/* RuneListOption: RuneList->Int64Option */ func MapInt64OptionToRuneListOption(m RuneListOption, f func(RuneList) Int64Option) Int64OptionOption {  if m.IsDefined() { return Int64Int64(f(*m.value)) } else { return NoneInt64OptionOption }  }
/* RuneListOption: RuneList->UintOption */ func MapUintOptionToRuneListOption(m RuneListOption, f func(RuneList) UintOption) UintOptionOption {  if m.IsDefined() { return UintUint(f(*m.value)) } else { return NoneUintOptionOption }  }
/* RuneListOption: RuneList->Uint8Option */ func MapUint8OptionToRuneListOption(m RuneListOption, f func(RuneList) Uint8Option) Uint8OptionOption {  if m.IsDefined() { return Uint8Uint8(f(*m.value)) } else { return NoneUint8OptionOption }  }
/* RuneListOption: RuneList->Uint16Option */ func MapUint16OptionToRuneListOption(m RuneListOption, f func(RuneList) Uint16Option) Uint16OptionOption {  if m.IsDefined() { return Uint16Uint16(f(*m.value)) } else { return NoneUint16OptionOption }  }
/* RuneListOption: RuneList->Uint32Option */ func MapUint32OptionToRuneListOption(m RuneListOption, f func(RuneList) Uint32Option) Uint32OptionOption {  if m.IsDefined() { return Uint32Uint32(f(*m.value)) } else { return NoneUint32OptionOption }  }
/* RuneListOption: RuneList->Uint64Option */ func MapUint64OptionToRuneListOption(m RuneListOption, f func(RuneList) Uint64Option) Uint64OptionOption {  if m.IsDefined() { return Uint64Uint64(f(*m.value)) } else { return NoneUint64OptionOption }  }
/* RuneListOption: RuneList->UintptrOption */ func MapUintptrOptionToRuneListOption(m RuneListOption, f func(RuneList) UintptrOption) UintptrOptionOption {  if m.IsDefined() { return UintptrUintptr(f(*m.value)) } else { return NoneUintptrOptionOption }  }
/* RuneListOption: RuneList->ByteOption */ func MapByteOptionToRuneListOption(m RuneListOption, f func(RuneList) ByteOption) ByteOptionOption {  if m.IsDefined() { return ByteByte(f(*m.value)) } else { return NoneByteOptionOption }  }
/* RuneListOption: RuneList->RuneOption */ func MapRuneOptionToRuneListOption(m RuneListOption, f func(RuneList) RuneOption) RuneOptionOption {  if m.IsDefined() { return RuneRune(f(*m.value)) } else { return NoneRuneOptionOption }  }
/* RuneListOption: RuneList->Float32Option */ func MapFloat32OptionToRuneListOption(m RuneListOption, f func(RuneList) Float32Option) Float32OptionOption {  if m.IsDefined() { return Float32Float32(f(*m.value)) } else { return NoneFloat32OptionOption }  }
/* RuneListOption: RuneList->Float64Option */ func MapFloat64OptionToRuneListOption(m RuneListOption, f func(RuneList) Float64Option) Float64OptionOption {  if m.IsDefined() { return Float64Float64(f(*m.value)) } else { return NoneFloat64OptionOption }  }
/* RuneListOption: RuneList->Complex64Option */ func MapComplex64OptionToRuneListOption(m RuneListOption, f func(RuneList) Complex64Option) Complex64OptionOption {  if m.IsDefined() { return Complex64Complex64(f(*m.value)) } else { return NoneComplex64OptionOption }  }
/* RuneListOption: RuneList->Complex128Option */ func MapComplex128OptionToRuneListOption(m RuneListOption, f func(RuneList) Complex128Option) Complex128OptionOption {  if m.IsDefined() { return Complex128Complex128(f(*m.value)) } else { return NoneComplex128OptionOption }  }
/* RuneListOption: RuneList->AnyOption */ func MapAnyOptionToRuneListOption(m RuneListOption, f func(RuneList) AnyOption) AnyOptionOption {  if m.IsDefined() { return AnyOptAny(f(*m.value)) } else { return NoneAnyOptionOption }  }
/* RuneListOption: RuneList->[]bool */ func MapBoolArrToRuneListOption(m RuneListOption, f func(RuneList) []bool) BoolArrOption {  if m.IsDefined() { return BoolArrOpt(f(*m.value)) } else { return NoneBoolArrOption }  }
/* RuneListOption: RuneList->[]string */ func MapStringArrToRuneListOption(m RuneListOption, f func(RuneList) []string) StringArrOption {  if m.IsDefined() { return StringArrOpt(f(*m.value)) } else { return NoneStringArrOption }  }
/* RuneListOption: RuneList->[]int */ func MapIntArrToRuneListOption(m RuneListOption, f func(RuneList) []int) IntArrOption {  if m.IsDefined() { return IntArrOpt(f(*m.value)) } else { return NoneIntArrOption }  }
/* RuneListOption: RuneList->[]int8 */ func MapInt8ArrToRuneListOption(m RuneListOption, f func(RuneList) []int8) Int8ArrOption {  if m.IsDefined() { return Int8ArrOpt(f(*m.value)) } else { return NoneInt8ArrOption }  }
/* RuneListOption: RuneList->[]int16 */ func MapInt16ArrToRuneListOption(m RuneListOption, f func(RuneList) []int16) Int16ArrOption {  if m.IsDefined() { return Int16ArrOpt(f(*m.value)) } else { return NoneInt16ArrOption }  }
/* RuneListOption: RuneList->[]int32 */ func MapInt32ArrToRuneListOption(m RuneListOption, f func(RuneList) []int32) Int32ArrOption {  if m.IsDefined() { return Int32ArrOpt(f(*m.value)) } else { return NoneInt32ArrOption }  }
/* RuneListOption: RuneList->[]int64 */ func MapInt64ArrToRuneListOption(m RuneListOption, f func(RuneList) []int64) Int64ArrOption {  if m.IsDefined() { return Int64ArrOpt(f(*m.value)) } else { return NoneInt64ArrOption }  }
/* RuneListOption: RuneList->[]uint */ func MapUintArrToRuneListOption(m RuneListOption, f func(RuneList) []uint) UintArrOption {  if m.IsDefined() { return UintArrOpt(f(*m.value)) } else { return NoneUintArrOption }  }
/* RuneListOption: RuneList->[]uint8 */ func MapUint8ArrToRuneListOption(m RuneListOption, f func(RuneList) []uint8) Uint8ArrOption {  if m.IsDefined() { return Uint8ArrOpt(f(*m.value)) } else { return NoneUint8ArrOption }  }
/* RuneListOption: RuneList->[]uint16 */ func MapUint16ArrToRuneListOption(m RuneListOption, f func(RuneList) []uint16) Uint16ArrOption {  if m.IsDefined() { return Uint16ArrOpt(f(*m.value)) } else { return NoneUint16ArrOption }  }
/* RuneListOption: RuneList->[]uint32 */ func MapUint32ArrToRuneListOption(m RuneListOption, f func(RuneList) []uint32) Uint32ArrOption {  if m.IsDefined() { return Uint32ArrOpt(f(*m.value)) } else { return NoneUint32ArrOption }  }
/* RuneListOption: RuneList->[]uint64 */ func MapUint64ArrToRuneListOption(m RuneListOption, f func(RuneList) []uint64) Uint64ArrOption {  if m.IsDefined() { return Uint64ArrOpt(f(*m.value)) } else { return NoneUint64ArrOption }  }
/* RuneListOption: RuneList->[]uintptr */ func MapUintptrArrToRuneListOption(m RuneListOption, f func(RuneList) []uintptr) UintptrArrOption {  if m.IsDefined() { return UintptrArrOpt(f(*m.value)) } else { return NoneUintptrArrOption }  }
/* RuneListOption: RuneList->[]byte */ func MapByteArrToRuneListOption(m RuneListOption, f func(RuneList) []byte) ByteArrOption {  if m.IsDefined() { return ByteArrOpt(f(*m.value)) } else { return NoneByteArrOption }  }
/* RuneListOption: RuneList->[]rune */ func MapRuneArrToRuneListOption(m RuneListOption, f func(RuneList) []rune) RuneArrOption {  if m.IsDefined() { return RuneArrOpt(f(*m.value)) } else { return NoneRuneArrOption }  }
/* RuneListOption: RuneList->[]float32 */ func MapFloat32ArrToRuneListOption(m RuneListOption, f func(RuneList) []float32) Float32ArrOption {  if m.IsDefined() { return Float32ArrOpt(f(*m.value)) } else { return NoneFloat32ArrOption }  }
/* RuneListOption: RuneList->[]float64 */ func MapFloat64ArrToRuneListOption(m RuneListOption, f func(RuneList) []float64) Float64ArrOption {  if m.IsDefined() { return Float64ArrOpt(f(*m.value)) } else { return NoneFloat64ArrOption }  }
/* RuneListOption: RuneList->[]complex64 */ func MapComplex64ArrToRuneListOption(m RuneListOption, f func(RuneList) []complex64) Complex64ArrOption {  if m.IsDefined() { return Complex64ArrOpt(f(*m.value)) } else { return NoneComplex64ArrOption }  }
/* RuneListOption: RuneList->[]complex128 */ func MapComplex128ArrToRuneListOption(m RuneListOption, f func(RuneList) []complex128) Complex128ArrOption {  if m.IsDefined() { return Complex128ArrOpt(f(*m.value)) } else { return NoneComplex128ArrOption }  }
/* RuneListOption: RuneList->[]Any */ func MapAnyArrToRuneListOption(m RuneListOption, f func(RuneList) []Any) AnyArrOption {  if m.IsDefined() { return AnyArrOpt(f(*m.value)) } else { return NoneAnyArrOption }  }
/* RuneListOption: RuneList->BoolList */ func MapBoolListToRuneListOption(m RuneListOption, f func(RuneList) BoolList) BoolListOption {  if m.IsDefined() { return BoolListOpt(f(*m.value)) } else { return NoneBoolListOption }  }
/* RuneListOption: RuneList->StringList */ func MapStringListToRuneListOption(m RuneListOption, f func(RuneList) StringList) StringListOption {  if m.IsDefined() { return StringListOpt(f(*m.value)) } else { return NoneStringListOption }  }
/* RuneListOption: RuneList->IntList */ func MapIntListToRuneListOption(m RuneListOption, f func(RuneList) IntList) IntListOption {  if m.IsDefined() { return IntListOpt(f(*m.value)) } else { return NoneIntListOption }  }
/* RuneListOption: RuneList->Int8List */ func MapInt8ListToRuneListOption(m RuneListOption, f func(RuneList) Int8List) Int8ListOption {  if m.IsDefined() { return Int8ListOpt(f(*m.value)) } else { return NoneInt8ListOption }  }
/* RuneListOption: RuneList->Int16List */ func MapInt16ListToRuneListOption(m RuneListOption, f func(RuneList) Int16List) Int16ListOption {  if m.IsDefined() { return Int16ListOpt(f(*m.value)) } else { return NoneInt16ListOption }  }
/* RuneListOption: RuneList->Int32List */ func MapInt32ListToRuneListOption(m RuneListOption, f func(RuneList) Int32List) Int32ListOption {  if m.IsDefined() { return Int32ListOpt(f(*m.value)) } else { return NoneInt32ListOption }  }
/* RuneListOption: RuneList->Int64List */ func MapInt64ListToRuneListOption(m RuneListOption, f func(RuneList) Int64List) Int64ListOption {  if m.IsDefined() { return Int64ListOpt(f(*m.value)) } else { return NoneInt64ListOption }  }
/* RuneListOption: RuneList->UintList */ func MapUintListToRuneListOption(m RuneListOption, f func(RuneList) UintList) UintListOption {  if m.IsDefined() { return UintListOpt(f(*m.value)) } else { return NoneUintListOption }  }
/* RuneListOption: RuneList->Uint8List */ func MapUint8ListToRuneListOption(m RuneListOption, f func(RuneList) Uint8List) Uint8ListOption {  if m.IsDefined() { return Uint8ListOpt(f(*m.value)) } else { return NoneUint8ListOption }  }
/* RuneListOption: RuneList->Uint16List */ func MapUint16ListToRuneListOption(m RuneListOption, f func(RuneList) Uint16List) Uint16ListOption {  if m.IsDefined() { return Uint16ListOpt(f(*m.value)) } else { return NoneUint16ListOption }  }
/* RuneListOption: RuneList->Uint32List */ func MapUint32ListToRuneListOption(m RuneListOption, f func(RuneList) Uint32List) Uint32ListOption {  if m.IsDefined() { return Uint32ListOpt(f(*m.value)) } else { return NoneUint32ListOption }  }
/* RuneListOption: RuneList->Uint64List */ func MapUint64ListToRuneListOption(m RuneListOption, f func(RuneList) Uint64List) Uint64ListOption {  if m.IsDefined() { return Uint64ListOpt(f(*m.value)) } else { return NoneUint64ListOption }  }
/* RuneListOption: RuneList->UintptrList */ func MapUintptrListToRuneListOption(m RuneListOption, f func(RuneList) UintptrList) UintptrListOption {  if m.IsDefined() { return UintptrListOpt(f(*m.value)) } else { return NoneUintptrListOption }  }
/* RuneListOption: RuneList->ByteList */ func MapByteListToRuneListOption(m RuneListOption, f func(RuneList) ByteList) ByteListOption {  if m.IsDefined() { return ByteListOpt(f(*m.value)) } else { return NoneByteListOption }  }
/* RuneListOption: RuneList->RuneList */ func MapRuneListToRuneListOption(m RuneListOption, f func(RuneList) RuneList) RuneListOption {  if m.IsDefined() { return RuneListOpt(f(*m.value)) } else { return NoneRuneListOption }  }
/* RuneListOption: RuneList->Float32List */ func MapFloat32ListToRuneListOption(m RuneListOption, f func(RuneList) Float32List) Float32ListOption {  if m.IsDefined() { return Float32ListOpt(f(*m.value)) } else { return NoneFloat32ListOption }  }
/* RuneListOption: RuneList->Float64List */ func MapFloat64ListToRuneListOption(m RuneListOption, f func(RuneList) Float64List) Float64ListOption {  if m.IsDefined() { return Float64ListOpt(f(*m.value)) } else { return NoneFloat64ListOption }  }
/* RuneListOption: RuneList->Complex64List */ func MapComplex64ListToRuneListOption(m RuneListOption, f func(RuneList) Complex64List) Complex64ListOption {  if m.IsDefined() { return Complex64ListOpt(f(*m.value)) } else { return NoneComplex64ListOption }  }
/* RuneListOption: RuneList->Complex128List */ func MapComplex128ListToRuneListOption(m RuneListOption, f func(RuneList) Complex128List) Complex128ListOption {  if m.IsDefined() { return Complex128ListOpt(f(*m.value)) } else { return NoneComplex128ListOption }  }
/* RuneListOption: RuneList->AnyList */ func MapAnyListToRuneListOption(m RuneListOption, f func(RuneList) AnyList) AnyListOption {  if m.IsDefined() { return AnyListOpt(f(*m.value)) } else { return NoneAnyListOption }  }
/* Float32ListOption: Float32List->bool */ func MapBoolToFloat32ListOption(m Float32ListOption, f func(Float32List) bool) BoolOption {  if m.IsDefined() { return Bool(f(*m.value)) } else { return NoneBoolOption }  }
/* Float32ListOption: Float32List->string */ func MapStringToFloat32ListOption(m Float32ListOption, f func(Float32List) string) StringOption {  if m.IsDefined() { return String(f(*m.value)) } else { return NoneStringOption }  }
/* Float32ListOption: Float32List->int */ func MapIntToFloat32ListOption(m Float32ListOption, f func(Float32List) int) IntOption {  if m.IsDefined() { return Int(f(*m.value)) } else { return NoneIntOption }  }
/* Float32ListOption: Float32List->int8 */ func MapInt8ToFloat32ListOption(m Float32ListOption, f func(Float32List) int8) Int8Option {  if m.IsDefined() { return Int8(f(*m.value)) } else { return NoneInt8Option }  }
/* Float32ListOption: Float32List->int16 */ func MapInt16ToFloat32ListOption(m Float32ListOption, f func(Float32List) int16) Int16Option {  if m.IsDefined() { return Int16(f(*m.value)) } else { return NoneInt16Option }  }
/* Float32ListOption: Float32List->int32 */ func MapInt32ToFloat32ListOption(m Float32ListOption, f func(Float32List) int32) Int32Option {  if m.IsDefined() { return Int32(f(*m.value)) } else { return NoneInt32Option }  }
/* Float32ListOption: Float32List->int64 */ func MapInt64ToFloat32ListOption(m Float32ListOption, f func(Float32List) int64) Int64Option {  if m.IsDefined() { return Int64(f(*m.value)) } else { return NoneInt64Option }  }
/* Float32ListOption: Float32List->uint */ func MapUintToFloat32ListOption(m Float32ListOption, f func(Float32List) uint) UintOption {  if m.IsDefined() { return Uint(f(*m.value)) } else { return NoneUintOption }  }
/* Float32ListOption: Float32List->uint8 */ func MapUint8ToFloat32ListOption(m Float32ListOption, f func(Float32List) uint8) Uint8Option {  if m.IsDefined() { return Uint8(f(*m.value)) } else { return NoneUint8Option }  }
/* Float32ListOption: Float32List->uint16 */ func MapUint16ToFloat32ListOption(m Float32ListOption, f func(Float32List) uint16) Uint16Option {  if m.IsDefined() { return Uint16(f(*m.value)) } else { return NoneUint16Option }  }
/* Float32ListOption: Float32List->uint32 */ func MapUint32ToFloat32ListOption(m Float32ListOption, f func(Float32List) uint32) Uint32Option {  if m.IsDefined() { return Uint32(f(*m.value)) } else { return NoneUint32Option }  }
/* Float32ListOption: Float32List->uint64 */ func MapUint64ToFloat32ListOption(m Float32ListOption, f func(Float32List) uint64) Uint64Option {  if m.IsDefined() { return Uint64(f(*m.value)) } else { return NoneUint64Option }  }
/* Float32ListOption: Float32List->uintptr */ func MapUintptrToFloat32ListOption(m Float32ListOption, f func(Float32List) uintptr) UintptrOption {  if m.IsDefined() { return Uintptr(f(*m.value)) } else { return NoneUintptrOption }  }
/* Float32ListOption: Float32List->byte */ func MapByteToFloat32ListOption(m Float32ListOption, f func(Float32List) byte) ByteOption {  if m.IsDefined() { return Byte(f(*m.value)) } else { return NoneByteOption }  }
/* Float32ListOption: Float32List->rune */ func MapRuneToFloat32ListOption(m Float32ListOption, f func(Float32List) rune) RuneOption {  if m.IsDefined() { return Rune(f(*m.value)) } else { return NoneRuneOption }  }
/* Float32ListOption: Float32List->float32 */ func MapFloat32ToFloat32ListOption(m Float32ListOption, f func(Float32List) float32) Float32Option {  if m.IsDefined() { return Float32(f(*m.value)) } else { return NoneFloat32Option }  }
/* Float32ListOption: Float32List->float64 */ func MapFloat64ToFloat32ListOption(m Float32ListOption, f func(Float32List) float64) Float64Option {  if m.IsDefined() { return Float64(f(*m.value)) } else { return NoneFloat64Option }  }
/* Float32ListOption: Float32List->complex64 */ func MapComplex64ToFloat32ListOption(m Float32ListOption, f func(Float32List) complex64) Complex64Option {  if m.IsDefined() { return Complex64(f(*m.value)) } else { return NoneComplex64Option }  }
/* Float32ListOption: Float32List->complex128 */ func MapComplex128ToFloat32ListOption(m Float32ListOption, f func(Float32List) complex128) Complex128Option {  if m.IsDefined() { return Complex128(f(*m.value)) } else { return NoneComplex128Option }  }
/* Float32ListOption: Float32List->Any */ func MapAnyToFloat32ListOption(m Float32ListOption, f func(Float32List) Any) AnyOption {  if m.IsDefined() { return AnyOpt(f(*m.value)) } else { return NoneAnyOption }  }
/* Float32ListOption: Float32List->BoolOption */ func MapBoolOptionToFloat32ListOption(m Float32ListOption, f func(Float32List) BoolOption) BoolOptionOption {  if m.IsDefined() { return BoolBool(f(*m.value)) } else { return NoneBoolOptionOption }  }
/* Float32ListOption: Float32List->StringOption */ func MapStringOptionToFloat32ListOption(m Float32ListOption, f func(Float32List) StringOption) StringOptionOption {  if m.IsDefined() { return StringString(f(*m.value)) } else { return NoneStringOptionOption }  }
/* Float32ListOption: Float32List->IntOption */ func MapIntOptionToFloat32ListOption(m Float32ListOption, f func(Float32List) IntOption) IntOptionOption {  if m.IsDefined() { return IntInt(f(*m.value)) } else { return NoneIntOptionOption }  }
/* Float32ListOption: Float32List->Int8Option */ func MapInt8OptionToFloat32ListOption(m Float32ListOption, f func(Float32List) Int8Option) Int8OptionOption {  if m.IsDefined() { return Int8Int8(f(*m.value)) } else { return NoneInt8OptionOption }  }
/* Float32ListOption: Float32List->Int16Option */ func MapInt16OptionToFloat32ListOption(m Float32ListOption, f func(Float32List) Int16Option) Int16OptionOption {  if m.IsDefined() { return Int16Int16(f(*m.value)) } else { return NoneInt16OptionOption }  }
/* Float32ListOption: Float32List->Int32Option */ func MapInt32OptionToFloat32ListOption(m Float32ListOption, f func(Float32List) Int32Option) Int32OptionOption {  if m.IsDefined() { return Int32Int32(f(*m.value)) } else { return NoneInt32OptionOption }  }
/* Float32ListOption: Float32List->Int64Option */ func MapInt64OptionToFloat32ListOption(m Float32ListOption, f func(Float32List) Int64Option) Int64OptionOption {  if m.IsDefined() { return Int64Int64(f(*m.value)) } else { return NoneInt64OptionOption }  }
/* Float32ListOption: Float32List->UintOption */ func MapUintOptionToFloat32ListOption(m Float32ListOption, f func(Float32List) UintOption) UintOptionOption {  if m.IsDefined() { return UintUint(f(*m.value)) } else { return NoneUintOptionOption }  }
/* Float32ListOption: Float32List->Uint8Option */ func MapUint8OptionToFloat32ListOption(m Float32ListOption, f func(Float32List) Uint8Option) Uint8OptionOption {  if m.IsDefined() { return Uint8Uint8(f(*m.value)) } else { return NoneUint8OptionOption }  }
/* Float32ListOption: Float32List->Uint16Option */ func MapUint16OptionToFloat32ListOption(m Float32ListOption, f func(Float32List) Uint16Option) Uint16OptionOption {  if m.IsDefined() { return Uint16Uint16(f(*m.value)) } else { return NoneUint16OptionOption }  }
/* Float32ListOption: Float32List->Uint32Option */ func MapUint32OptionToFloat32ListOption(m Float32ListOption, f func(Float32List) Uint32Option) Uint32OptionOption {  if m.IsDefined() { return Uint32Uint32(f(*m.value)) } else { return NoneUint32OptionOption }  }
/* Float32ListOption: Float32List->Uint64Option */ func MapUint64OptionToFloat32ListOption(m Float32ListOption, f func(Float32List) Uint64Option) Uint64OptionOption {  if m.IsDefined() { return Uint64Uint64(f(*m.value)) } else { return NoneUint64OptionOption }  }
/* Float32ListOption: Float32List->UintptrOption */ func MapUintptrOptionToFloat32ListOption(m Float32ListOption, f func(Float32List) UintptrOption) UintptrOptionOption {  if m.IsDefined() { return UintptrUintptr(f(*m.value)) } else { return NoneUintptrOptionOption }  }
/* Float32ListOption: Float32List->ByteOption */ func MapByteOptionToFloat32ListOption(m Float32ListOption, f func(Float32List) ByteOption) ByteOptionOption {  if m.IsDefined() { return ByteByte(f(*m.value)) } else { return NoneByteOptionOption }  }
/* Float32ListOption: Float32List->RuneOption */ func MapRuneOptionToFloat32ListOption(m Float32ListOption, f func(Float32List) RuneOption) RuneOptionOption {  if m.IsDefined() { return RuneRune(f(*m.value)) } else { return NoneRuneOptionOption }  }
/* Float32ListOption: Float32List->Float32Option */ func MapFloat32OptionToFloat32ListOption(m Float32ListOption, f func(Float32List) Float32Option) Float32OptionOption {  if m.IsDefined() { return Float32Float32(f(*m.value)) } else { return NoneFloat32OptionOption }  }
/* Float32ListOption: Float32List->Float64Option */ func MapFloat64OptionToFloat32ListOption(m Float32ListOption, f func(Float32List) Float64Option) Float64OptionOption {  if m.IsDefined() { return Float64Float64(f(*m.value)) } else { return NoneFloat64OptionOption }  }
/* Float32ListOption: Float32List->Complex64Option */ func MapComplex64OptionToFloat32ListOption(m Float32ListOption, f func(Float32List) Complex64Option) Complex64OptionOption {  if m.IsDefined() { return Complex64Complex64(f(*m.value)) } else { return NoneComplex64OptionOption }  }
/* Float32ListOption: Float32List->Complex128Option */ func MapComplex128OptionToFloat32ListOption(m Float32ListOption, f func(Float32List) Complex128Option) Complex128OptionOption {  if m.IsDefined() { return Complex128Complex128(f(*m.value)) } else { return NoneComplex128OptionOption }  }
/* Float32ListOption: Float32List->AnyOption */ func MapAnyOptionToFloat32ListOption(m Float32ListOption, f func(Float32List) AnyOption) AnyOptionOption {  if m.IsDefined() { return AnyOptAny(f(*m.value)) } else { return NoneAnyOptionOption }  }
/* Float32ListOption: Float32List->[]bool */ func MapBoolArrToFloat32ListOption(m Float32ListOption, f func(Float32List) []bool) BoolArrOption {  if m.IsDefined() { return BoolArrOpt(f(*m.value)) } else { return NoneBoolArrOption }  }
/* Float32ListOption: Float32List->[]string */ func MapStringArrToFloat32ListOption(m Float32ListOption, f func(Float32List) []string) StringArrOption {  if m.IsDefined() { return StringArrOpt(f(*m.value)) } else { return NoneStringArrOption }  }
/* Float32ListOption: Float32List->[]int */ func MapIntArrToFloat32ListOption(m Float32ListOption, f func(Float32List) []int) IntArrOption {  if m.IsDefined() { return IntArrOpt(f(*m.value)) } else { return NoneIntArrOption }  }
/* Float32ListOption: Float32List->[]int8 */ func MapInt8ArrToFloat32ListOption(m Float32ListOption, f func(Float32List) []int8) Int8ArrOption {  if m.IsDefined() { return Int8ArrOpt(f(*m.value)) } else { return NoneInt8ArrOption }  }
/* Float32ListOption: Float32List->[]int16 */ func MapInt16ArrToFloat32ListOption(m Float32ListOption, f func(Float32List) []int16) Int16ArrOption {  if m.IsDefined() { return Int16ArrOpt(f(*m.value)) } else { return NoneInt16ArrOption }  }
/* Float32ListOption: Float32List->[]int32 */ func MapInt32ArrToFloat32ListOption(m Float32ListOption, f func(Float32List) []int32) Int32ArrOption {  if m.IsDefined() { return Int32ArrOpt(f(*m.value)) } else { return NoneInt32ArrOption }  }
/* Float32ListOption: Float32List->[]int64 */ func MapInt64ArrToFloat32ListOption(m Float32ListOption, f func(Float32List) []int64) Int64ArrOption {  if m.IsDefined() { return Int64ArrOpt(f(*m.value)) } else { return NoneInt64ArrOption }  }
/* Float32ListOption: Float32List->[]uint */ func MapUintArrToFloat32ListOption(m Float32ListOption, f func(Float32List) []uint) UintArrOption {  if m.IsDefined() { return UintArrOpt(f(*m.value)) } else { return NoneUintArrOption }  }
/* Float32ListOption: Float32List->[]uint8 */ func MapUint8ArrToFloat32ListOption(m Float32ListOption, f func(Float32List) []uint8) Uint8ArrOption {  if m.IsDefined() { return Uint8ArrOpt(f(*m.value)) } else { return NoneUint8ArrOption }  }
/* Float32ListOption: Float32List->[]uint16 */ func MapUint16ArrToFloat32ListOption(m Float32ListOption, f func(Float32List) []uint16) Uint16ArrOption {  if m.IsDefined() { return Uint16ArrOpt(f(*m.value)) } else { return NoneUint16ArrOption }  }
/* Float32ListOption: Float32List->[]uint32 */ func MapUint32ArrToFloat32ListOption(m Float32ListOption, f func(Float32List) []uint32) Uint32ArrOption {  if m.IsDefined() { return Uint32ArrOpt(f(*m.value)) } else { return NoneUint32ArrOption }  }
/* Float32ListOption: Float32List->[]uint64 */ func MapUint64ArrToFloat32ListOption(m Float32ListOption, f func(Float32List) []uint64) Uint64ArrOption {  if m.IsDefined() { return Uint64ArrOpt(f(*m.value)) } else { return NoneUint64ArrOption }  }
/* Float32ListOption: Float32List->[]uintptr */ func MapUintptrArrToFloat32ListOption(m Float32ListOption, f func(Float32List) []uintptr) UintptrArrOption {  if m.IsDefined() { return UintptrArrOpt(f(*m.value)) } else { return NoneUintptrArrOption }  }
/* Float32ListOption: Float32List->[]byte */ func MapByteArrToFloat32ListOption(m Float32ListOption, f func(Float32List) []byte) ByteArrOption {  if m.IsDefined() { return ByteArrOpt(f(*m.value)) } else { return NoneByteArrOption }  }
/* Float32ListOption: Float32List->[]rune */ func MapRuneArrToFloat32ListOption(m Float32ListOption, f func(Float32List) []rune) RuneArrOption {  if m.IsDefined() { return RuneArrOpt(f(*m.value)) } else { return NoneRuneArrOption }  }
/* Float32ListOption: Float32List->[]float32 */ func MapFloat32ArrToFloat32ListOption(m Float32ListOption, f func(Float32List) []float32) Float32ArrOption {  if m.IsDefined() { return Float32ArrOpt(f(*m.value)) } else { return NoneFloat32ArrOption }  }
/* Float32ListOption: Float32List->[]float64 */ func MapFloat64ArrToFloat32ListOption(m Float32ListOption, f func(Float32List) []float64) Float64ArrOption {  if m.IsDefined() { return Float64ArrOpt(f(*m.value)) } else { return NoneFloat64ArrOption }  }
/* Float32ListOption: Float32List->[]complex64 */ func MapComplex64ArrToFloat32ListOption(m Float32ListOption, f func(Float32List) []complex64) Complex64ArrOption {  if m.IsDefined() { return Complex64ArrOpt(f(*m.value)) } else { return NoneComplex64ArrOption }  }
/* Float32ListOption: Float32List->[]complex128 */ func MapComplex128ArrToFloat32ListOption(m Float32ListOption, f func(Float32List) []complex128) Complex128ArrOption {  if m.IsDefined() { return Complex128ArrOpt(f(*m.value)) } else { return NoneComplex128ArrOption }  }
/* Float32ListOption: Float32List->[]Any */ func MapAnyArrToFloat32ListOption(m Float32ListOption, f func(Float32List) []Any) AnyArrOption {  if m.IsDefined() { return AnyArrOpt(f(*m.value)) } else { return NoneAnyArrOption }  }
/* Float32ListOption: Float32List->BoolList */ func MapBoolListToFloat32ListOption(m Float32ListOption, f func(Float32List) BoolList) BoolListOption {  if m.IsDefined() { return BoolListOpt(f(*m.value)) } else { return NoneBoolListOption }  }
/* Float32ListOption: Float32List->StringList */ func MapStringListToFloat32ListOption(m Float32ListOption, f func(Float32List) StringList) StringListOption {  if m.IsDefined() { return StringListOpt(f(*m.value)) } else { return NoneStringListOption }  }
/* Float32ListOption: Float32List->IntList */ func MapIntListToFloat32ListOption(m Float32ListOption, f func(Float32List) IntList) IntListOption {  if m.IsDefined() { return IntListOpt(f(*m.value)) } else { return NoneIntListOption }  }
/* Float32ListOption: Float32List->Int8List */ func MapInt8ListToFloat32ListOption(m Float32ListOption, f func(Float32List) Int8List) Int8ListOption {  if m.IsDefined() { return Int8ListOpt(f(*m.value)) } else { return NoneInt8ListOption }  }
/* Float32ListOption: Float32List->Int16List */ func MapInt16ListToFloat32ListOption(m Float32ListOption, f func(Float32List) Int16List) Int16ListOption {  if m.IsDefined() { return Int16ListOpt(f(*m.value)) } else { return NoneInt16ListOption }  }
/* Float32ListOption: Float32List->Int32List */ func MapInt32ListToFloat32ListOption(m Float32ListOption, f func(Float32List) Int32List) Int32ListOption {  if m.IsDefined() { return Int32ListOpt(f(*m.value)) } else { return NoneInt32ListOption }  }
/* Float32ListOption: Float32List->Int64List */ func MapInt64ListToFloat32ListOption(m Float32ListOption, f func(Float32List) Int64List) Int64ListOption {  if m.IsDefined() { return Int64ListOpt(f(*m.value)) } else { return NoneInt64ListOption }  }
/* Float32ListOption: Float32List->UintList */ func MapUintListToFloat32ListOption(m Float32ListOption, f func(Float32List) UintList) UintListOption {  if m.IsDefined() { return UintListOpt(f(*m.value)) } else { return NoneUintListOption }  }
/* Float32ListOption: Float32List->Uint8List */ func MapUint8ListToFloat32ListOption(m Float32ListOption, f func(Float32List) Uint8List) Uint8ListOption {  if m.IsDefined() { return Uint8ListOpt(f(*m.value)) } else { return NoneUint8ListOption }  }
/* Float32ListOption: Float32List->Uint16List */ func MapUint16ListToFloat32ListOption(m Float32ListOption, f func(Float32List) Uint16List) Uint16ListOption {  if m.IsDefined() { return Uint16ListOpt(f(*m.value)) } else { return NoneUint16ListOption }  }
/* Float32ListOption: Float32List->Uint32List */ func MapUint32ListToFloat32ListOption(m Float32ListOption, f func(Float32List) Uint32List) Uint32ListOption {  if m.IsDefined() { return Uint32ListOpt(f(*m.value)) } else { return NoneUint32ListOption }  }
/* Float32ListOption: Float32List->Uint64List */ func MapUint64ListToFloat32ListOption(m Float32ListOption, f func(Float32List) Uint64List) Uint64ListOption {  if m.IsDefined() { return Uint64ListOpt(f(*m.value)) } else { return NoneUint64ListOption }  }
/* Float32ListOption: Float32List->UintptrList */ func MapUintptrListToFloat32ListOption(m Float32ListOption, f func(Float32List) UintptrList) UintptrListOption {  if m.IsDefined() { return UintptrListOpt(f(*m.value)) } else { return NoneUintptrListOption }  }
/* Float32ListOption: Float32List->ByteList */ func MapByteListToFloat32ListOption(m Float32ListOption, f func(Float32List) ByteList) ByteListOption {  if m.IsDefined() { return ByteListOpt(f(*m.value)) } else { return NoneByteListOption }  }
/* Float32ListOption: Float32List->RuneList */ func MapRuneListToFloat32ListOption(m Float32ListOption, f func(Float32List) RuneList) RuneListOption {  if m.IsDefined() { return RuneListOpt(f(*m.value)) } else { return NoneRuneListOption }  }
/* Float32ListOption: Float32List->Float32List */ func MapFloat32ListToFloat32ListOption(m Float32ListOption, f func(Float32List) Float32List) Float32ListOption {  if m.IsDefined() { return Float32ListOpt(f(*m.value)) } else { return NoneFloat32ListOption }  }
/* Float32ListOption: Float32List->Float64List */ func MapFloat64ListToFloat32ListOption(m Float32ListOption, f func(Float32List) Float64List) Float64ListOption {  if m.IsDefined() { return Float64ListOpt(f(*m.value)) } else { return NoneFloat64ListOption }  }
/* Float32ListOption: Float32List->Complex64List */ func MapComplex64ListToFloat32ListOption(m Float32ListOption, f func(Float32List) Complex64List) Complex64ListOption {  if m.IsDefined() { return Complex64ListOpt(f(*m.value)) } else { return NoneComplex64ListOption }  }
/* Float32ListOption: Float32List->Complex128List */ func MapComplex128ListToFloat32ListOption(m Float32ListOption, f func(Float32List) Complex128List) Complex128ListOption {  if m.IsDefined() { return Complex128ListOpt(f(*m.value)) } else { return NoneComplex128ListOption }  }
/* Float32ListOption: Float32List->AnyList */ func MapAnyListToFloat32ListOption(m Float32ListOption, f func(Float32List) AnyList) AnyListOption {  if m.IsDefined() { return AnyListOpt(f(*m.value)) } else { return NoneAnyListOption }  }
/* Float64ListOption: Float64List->bool */ func MapBoolToFloat64ListOption(m Float64ListOption, f func(Float64List) bool) BoolOption {  if m.IsDefined() { return Bool(f(*m.value)) } else { return NoneBoolOption }  }
/* Float64ListOption: Float64List->string */ func MapStringToFloat64ListOption(m Float64ListOption, f func(Float64List) string) StringOption {  if m.IsDefined() { return String(f(*m.value)) } else { return NoneStringOption }  }
/* Float64ListOption: Float64List->int */ func MapIntToFloat64ListOption(m Float64ListOption, f func(Float64List) int) IntOption {  if m.IsDefined() { return Int(f(*m.value)) } else { return NoneIntOption }  }
/* Float64ListOption: Float64List->int8 */ func MapInt8ToFloat64ListOption(m Float64ListOption, f func(Float64List) int8) Int8Option {  if m.IsDefined() { return Int8(f(*m.value)) } else { return NoneInt8Option }  }
/* Float64ListOption: Float64List->int16 */ func MapInt16ToFloat64ListOption(m Float64ListOption, f func(Float64List) int16) Int16Option {  if m.IsDefined() { return Int16(f(*m.value)) } else { return NoneInt16Option }  }
/* Float64ListOption: Float64List->int32 */ func MapInt32ToFloat64ListOption(m Float64ListOption, f func(Float64List) int32) Int32Option {  if m.IsDefined() { return Int32(f(*m.value)) } else { return NoneInt32Option }  }
/* Float64ListOption: Float64List->int64 */ func MapInt64ToFloat64ListOption(m Float64ListOption, f func(Float64List) int64) Int64Option {  if m.IsDefined() { return Int64(f(*m.value)) } else { return NoneInt64Option }  }
/* Float64ListOption: Float64List->uint */ func MapUintToFloat64ListOption(m Float64ListOption, f func(Float64List) uint) UintOption {  if m.IsDefined() { return Uint(f(*m.value)) } else { return NoneUintOption }  }
/* Float64ListOption: Float64List->uint8 */ func MapUint8ToFloat64ListOption(m Float64ListOption, f func(Float64List) uint8) Uint8Option {  if m.IsDefined() { return Uint8(f(*m.value)) } else { return NoneUint8Option }  }
/* Float64ListOption: Float64List->uint16 */ func MapUint16ToFloat64ListOption(m Float64ListOption, f func(Float64List) uint16) Uint16Option {  if m.IsDefined() { return Uint16(f(*m.value)) } else { return NoneUint16Option }  }
/* Float64ListOption: Float64List->uint32 */ func MapUint32ToFloat64ListOption(m Float64ListOption, f func(Float64List) uint32) Uint32Option {  if m.IsDefined() { return Uint32(f(*m.value)) } else { return NoneUint32Option }  }
/* Float64ListOption: Float64List->uint64 */ func MapUint64ToFloat64ListOption(m Float64ListOption, f func(Float64List) uint64) Uint64Option {  if m.IsDefined() { return Uint64(f(*m.value)) } else { return NoneUint64Option }  }
/* Float64ListOption: Float64List->uintptr */ func MapUintptrToFloat64ListOption(m Float64ListOption, f func(Float64List) uintptr) UintptrOption {  if m.IsDefined() { return Uintptr(f(*m.value)) } else { return NoneUintptrOption }  }
/* Float64ListOption: Float64List->byte */ func MapByteToFloat64ListOption(m Float64ListOption, f func(Float64List) byte) ByteOption {  if m.IsDefined() { return Byte(f(*m.value)) } else { return NoneByteOption }  }
/* Float64ListOption: Float64List->rune */ func MapRuneToFloat64ListOption(m Float64ListOption, f func(Float64List) rune) RuneOption {  if m.IsDefined() { return Rune(f(*m.value)) } else { return NoneRuneOption }  }
/* Float64ListOption: Float64List->float32 */ func MapFloat32ToFloat64ListOption(m Float64ListOption, f func(Float64List) float32) Float32Option {  if m.IsDefined() { return Float32(f(*m.value)) } else { return NoneFloat32Option }  }
/* Float64ListOption: Float64List->float64 */ func MapFloat64ToFloat64ListOption(m Float64ListOption, f func(Float64List) float64) Float64Option {  if m.IsDefined() { return Float64(f(*m.value)) } else { return NoneFloat64Option }  }
/* Float64ListOption: Float64List->complex64 */ func MapComplex64ToFloat64ListOption(m Float64ListOption, f func(Float64List) complex64) Complex64Option {  if m.IsDefined() { return Complex64(f(*m.value)) } else { return NoneComplex64Option }  }
/* Float64ListOption: Float64List->complex128 */ func MapComplex128ToFloat64ListOption(m Float64ListOption, f func(Float64List) complex128) Complex128Option {  if m.IsDefined() { return Complex128(f(*m.value)) } else { return NoneComplex128Option }  }
/* Float64ListOption: Float64List->Any */ func MapAnyToFloat64ListOption(m Float64ListOption, f func(Float64List) Any) AnyOption {  if m.IsDefined() { return AnyOpt(f(*m.value)) } else { return NoneAnyOption }  }
/* Float64ListOption: Float64List->BoolOption */ func MapBoolOptionToFloat64ListOption(m Float64ListOption, f func(Float64List) BoolOption) BoolOptionOption {  if m.IsDefined() { return BoolBool(f(*m.value)) } else { return NoneBoolOptionOption }  }
/* Float64ListOption: Float64List->StringOption */ func MapStringOptionToFloat64ListOption(m Float64ListOption, f func(Float64List) StringOption) StringOptionOption {  if m.IsDefined() { return StringString(f(*m.value)) } else { return NoneStringOptionOption }  }
/* Float64ListOption: Float64List->IntOption */ func MapIntOptionToFloat64ListOption(m Float64ListOption, f func(Float64List) IntOption) IntOptionOption {  if m.IsDefined() { return IntInt(f(*m.value)) } else { return NoneIntOptionOption }  }
/* Float64ListOption: Float64List->Int8Option */ func MapInt8OptionToFloat64ListOption(m Float64ListOption, f func(Float64List) Int8Option) Int8OptionOption {  if m.IsDefined() { return Int8Int8(f(*m.value)) } else { return NoneInt8OptionOption }  }
/* Float64ListOption: Float64List->Int16Option */ func MapInt16OptionToFloat64ListOption(m Float64ListOption, f func(Float64List) Int16Option) Int16OptionOption {  if m.IsDefined() { return Int16Int16(f(*m.value)) } else { return NoneInt16OptionOption }  }
/* Float64ListOption: Float64List->Int32Option */ func MapInt32OptionToFloat64ListOption(m Float64ListOption, f func(Float64List) Int32Option) Int32OptionOption {  if m.IsDefined() { return Int32Int32(f(*m.value)) } else { return NoneInt32OptionOption }  }
/* Float64ListOption: Float64List->Int64Option */ func MapInt64OptionToFloat64ListOption(m Float64ListOption, f func(Float64List) Int64Option) Int64OptionOption {  if m.IsDefined() { return Int64Int64(f(*m.value)) } else { return NoneInt64OptionOption }  }
/* Float64ListOption: Float64List->UintOption */ func MapUintOptionToFloat64ListOption(m Float64ListOption, f func(Float64List) UintOption) UintOptionOption {  if m.IsDefined() { return UintUint(f(*m.value)) } else { return NoneUintOptionOption }  }
/* Float64ListOption: Float64List->Uint8Option */ func MapUint8OptionToFloat64ListOption(m Float64ListOption, f func(Float64List) Uint8Option) Uint8OptionOption {  if m.IsDefined() { return Uint8Uint8(f(*m.value)) } else { return NoneUint8OptionOption }  }
/* Float64ListOption: Float64List->Uint16Option */ func MapUint16OptionToFloat64ListOption(m Float64ListOption, f func(Float64List) Uint16Option) Uint16OptionOption {  if m.IsDefined() { return Uint16Uint16(f(*m.value)) } else { return NoneUint16OptionOption }  }
/* Float64ListOption: Float64List->Uint32Option */ func MapUint32OptionToFloat64ListOption(m Float64ListOption, f func(Float64List) Uint32Option) Uint32OptionOption {  if m.IsDefined() { return Uint32Uint32(f(*m.value)) } else { return NoneUint32OptionOption }  }
/* Float64ListOption: Float64List->Uint64Option */ func MapUint64OptionToFloat64ListOption(m Float64ListOption, f func(Float64List) Uint64Option) Uint64OptionOption {  if m.IsDefined() { return Uint64Uint64(f(*m.value)) } else { return NoneUint64OptionOption }  }
/* Float64ListOption: Float64List->UintptrOption */ func MapUintptrOptionToFloat64ListOption(m Float64ListOption, f func(Float64List) UintptrOption) UintptrOptionOption {  if m.IsDefined() { return UintptrUintptr(f(*m.value)) } else { return NoneUintptrOptionOption }  }
/* Float64ListOption: Float64List->ByteOption */ func MapByteOptionToFloat64ListOption(m Float64ListOption, f func(Float64List) ByteOption) ByteOptionOption {  if m.IsDefined() { return ByteByte(f(*m.value)) } else { return NoneByteOptionOption }  }
/* Float64ListOption: Float64List->RuneOption */ func MapRuneOptionToFloat64ListOption(m Float64ListOption, f func(Float64List) RuneOption) RuneOptionOption {  if m.IsDefined() { return RuneRune(f(*m.value)) } else { return NoneRuneOptionOption }  }
/* Float64ListOption: Float64List->Float32Option */ func MapFloat32OptionToFloat64ListOption(m Float64ListOption, f func(Float64List) Float32Option) Float32OptionOption {  if m.IsDefined() { return Float32Float32(f(*m.value)) } else { return NoneFloat32OptionOption }  }
/* Float64ListOption: Float64List->Float64Option */ func MapFloat64OptionToFloat64ListOption(m Float64ListOption, f func(Float64List) Float64Option) Float64OptionOption {  if m.IsDefined() { return Float64Float64(f(*m.value)) } else { return NoneFloat64OptionOption }  }
/* Float64ListOption: Float64List->Complex64Option */ func MapComplex64OptionToFloat64ListOption(m Float64ListOption, f func(Float64List) Complex64Option) Complex64OptionOption {  if m.IsDefined() { return Complex64Complex64(f(*m.value)) } else { return NoneComplex64OptionOption }  }
/* Float64ListOption: Float64List->Complex128Option */ func MapComplex128OptionToFloat64ListOption(m Float64ListOption, f func(Float64List) Complex128Option) Complex128OptionOption {  if m.IsDefined() { return Complex128Complex128(f(*m.value)) } else { return NoneComplex128OptionOption }  }
/* Float64ListOption: Float64List->AnyOption */ func MapAnyOptionToFloat64ListOption(m Float64ListOption, f func(Float64List) AnyOption) AnyOptionOption {  if m.IsDefined() { return AnyOptAny(f(*m.value)) } else { return NoneAnyOptionOption }  }
/* Float64ListOption: Float64List->[]bool */ func MapBoolArrToFloat64ListOption(m Float64ListOption, f func(Float64List) []bool) BoolArrOption {  if m.IsDefined() { return BoolArrOpt(f(*m.value)) } else { return NoneBoolArrOption }  }
/* Float64ListOption: Float64List->[]string */ func MapStringArrToFloat64ListOption(m Float64ListOption, f func(Float64List) []string) StringArrOption {  if m.IsDefined() { return StringArrOpt(f(*m.value)) } else { return NoneStringArrOption }  }
/* Float64ListOption: Float64List->[]int */ func MapIntArrToFloat64ListOption(m Float64ListOption, f func(Float64List) []int) IntArrOption {  if m.IsDefined() { return IntArrOpt(f(*m.value)) } else { return NoneIntArrOption }  }
/* Float64ListOption: Float64List->[]int8 */ func MapInt8ArrToFloat64ListOption(m Float64ListOption, f func(Float64List) []int8) Int8ArrOption {  if m.IsDefined() { return Int8ArrOpt(f(*m.value)) } else { return NoneInt8ArrOption }  }
/* Float64ListOption: Float64List->[]int16 */ func MapInt16ArrToFloat64ListOption(m Float64ListOption, f func(Float64List) []int16) Int16ArrOption {  if m.IsDefined() { return Int16ArrOpt(f(*m.value)) } else { return NoneInt16ArrOption }  }
/* Float64ListOption: Float64List->[]int32 */ func MapInt32ArrToFloat64ListOption(m Float64ListOption, f func(Float64List) []int32) Int32ArrOption {  if m.IsDefined() { return Int32ArrOpt(f(*m.value)) } else { return NoneInt32ArrOption }  }
/* Float64ListOption: Float64List->[]int64 */ func MapInt64ArrToFloat64ListOption(m Float64ListOption, f func(Float64List) []int64) Int64ArrOption {  if m.IsDefined() { return Int64ArrOpt(f(*m.value)) } else { return NoneInt64ArrOption }  }
/* Float64ListOption: Float64List->[]uint */ func MapUintArrToFloat64ListOption(m Float64ListOption, f func(Float64List) []uint) UintArrOption {  if m.IsDefined() { return UintArrOpt(f(*m.value)) } else { return NoneUintArrOption }  }
/* Float64ListOption: Float64List->[]uint8 */ func MapUint8ArrToFloat64ListOption(m Float64ListOption, f func(Float64List) []uint8) Uint8ArrOption {  if m.IsDefined() { return Uint8ArrOpt(f(*m.value)) } else { return NoneUint8ArrOption }  }
/* Float64ListOption: Float64List->[]uint16 */ func MapUint16ArrToFloat64ListOption(m Float64ListOption, f func(Float64List) []uint16) Uint16ArrOption {  if m.IsDefined() { return Uint16ArrOpt(f(*m.value)) } else { return NoneUint16ArrOption }  }
/* Float64ListOption: Float64List->[]uint32 */ func MapUint32ArrToFloat64ListOption(m Float64ListOption, f func(Float64List) []uint32) Uint32ArrOption {  if m.IsDefined() { return Uint32ArrOpt(f(*m.value)) } else { return NoneUint32ArrOption }  }
/* Float64ListOption: Float64List->[]uint64 */ func MapUint64ArrToFloat64ListOption(m Float64ListOption, f func(Float64List) []uint64) Uint64ArrOption {  if m.IsDefined() { return Uint64ArrOpt(f(*m.value)) } else { return NoneUint64ArrOption }  }
/* Float64ListOption: Float64List->[]uintptr */ func MapUintptrArrToFloat64ListOption(m Float64ListOption, f func(Float64List) []uintptr) UintptrArrOption {  if m.IsDefined() { return UintptrArrOpt(f(*m.value)) } else { return NoneUintptrArrOption }  }
/* Float64ListOption: Float64List->[]byte */ func MapByteArrToFloat64ListOption(m Float64ListOption, f func(Float64List) []byte) ByteArrOption {  if m.IsDefined() { return ByteArrOpt(f(*m.value)) } else { return NoneByteArrOption }  }
/* Float64ListOption: Float64List->[]rune */ func MapRuneArrToFloat64ListOption(m Float64ListOption, f func(Float64List) []rune) RuneArrOption {  if m.IsDefined() { return RuneArrOpt(f(*m.value)) } else { return NoneRuneArrOption }  }
/* Float64ListOption: Float64List->[]float32 */ func MapFloat32ArrToFloat64ListOption(m Float64ListOption, f func(Float64List) []float32) Float32ArrOption {  if m.IsDefined() { return Float32ArrOpt(f(*m.value)) } else { return NoneFloat32ArrOption }  }
/* Float64ListOption: Float64List->[]float64 */ func MapFloat64ArrToFloat64ListOption(m Float64ListOption, f func(Float64List) []float64) Float64ArrOption {  if m.IsDefined() { return Float64ArrOpt(f(*m.value)) } else { return NoneFloat64ArrOption }  }
/* Float64ListOption: Float64List->[]complex64 */ func MapComplex64ArrToFloat64ListOption(m Float64ListOption, f func(Float64List) []complex64) Complex64ArrOption {  if m.IsDefined() { return Complex64ArrOpt(f(*m.value)) } else { return NoneComplex64ArrOption }  }
/* Float64ListOption: Float64List->[]complex128 */ func MapComplex128ArrToFloat64ListOption(m Float64ListOption, f func(Float64List) []complex128) Complex128ArrOption {  if m.IsDefined() { return Complex128ArrOpt(f(*m.value)) } else { return NoneComplex128ArrOption }  }
/* Float64ListOption: Float64List->[]Any */ func MapAnyArrToFloat64ListOption(m Float64ListOption, f func(Float64List) []Any) AnyArrOption {  if m.IsDefined() { return AnyArrOpt(f(*m.value)) } else { return NoneAnyArrOption }  }
/* Float64ListOption: Float64List->BoolList */ func MapBoolListToFloat64ListOption(m Float64ListOption, f func(Float64List) BoolList) BoolListOption {  if m.IsDefined() { return BoolListOpt(f(*m.value)) } else { return NoneBoolListOption }  }
/* Float64ListOption: Float64List->StringList */ func MapStringListToFloat64ListOption(m Float64ListOption, f func(Float64List) StringList) StringListOption {  if m.IsDefined() { return StringListOpt(f(*m.value)) } else { return NoneStringListOption }  }
/* Float64ListOption: Float64List->IntList */ func MapIntListToFloat64ListOption(m Float64ListOption, f func(Float64List) IntList) IntListOption {  if m.IsDefined() { return IntListOpt(f(*m.value)) } else { return NoneIntListOption }  }
/* Float64ListOption: Float64List->Int8List */ func MapInt8ListToFloat64ListOption(m Float64ListOption, f func(Float64List) Int8List) Int8ListOption {  if m.IsDefined() { return Int8ListOpt(f(*m.value)) } else { return NoneInt8ListOption }  }
/* Float64ListOption: Float64List->Int16List */ func MapInt16ListToFloat64ListOption(m Float64ListOption, f func(Float64List) Int16List) Int16ListOption {  if m.IsDefined() { return Int16ListOpt(f(*m.value)) } else { return NoneInt16ListOption }  }
/* Float64ListOption: Float64List->Int32List */ func MapInt32ListToFloat64ListOption(m Float64ListOption, f func(Float64List) Int32List) Int32ListOption {  if m.IsDefined() { return Int32ListOpt(f(*m.value)) } else { return NoneInt32ListOption }  }
/* Float64ListOption: Float64List->Int64List */ func MapInt64ListToFloat64ListOption(m Float64ListOption, f func(Float64List) Int64List) Int64ListOption {  if m.IsDefined() { return Int64ListOpt(f(*m.value)) } else { return NoneInt64ListOption }  }
/* Float64ListOption: Float64List->UintList */ func MapUintListToFloat64ListOption(m Float64ListOption, f func(Float64List) UintList) UintListOption {  if m.IsDefined() { return UintListOpt(f(*m.value)) } else { return NoneUintListOption }  }
/* Float64ListOption: Float64List->Uint8List */ func MapUint8ListToFloat64ListOption(m Float64ListOption, f func(Float64List) Uint8List) Uint8ListOption {  if m.IsDefined() { return Uint8ListOpt(f(*m.value)) } else { return NoneUint8ListOption }  }
/* Float64ListOption: Float64List->Uint16List */ func MapUint16ListToFloat64ListOption(m Float64ListOption, f func(Float64List) Uint16List) Uint16ListOption {  if m.IsDefined() { return Uint16ListOpt(f(*m.value)) } else { return NoneUint16ListOption }  }
/* Float64ListOption: Float64List->Uint32List */ func MapUint32ListToFloat64ListOption(m Float64ListOption, f func(Float64List) Uint32List) Uint32ListOption {  if m.IsDefined() { return Uint32ListOpt(f(*m.value)) } else { return NoneUint32ListOption }  }
/* Float64ListOption: Float64List->Uint64List */ func MapUint64ListToFloat64ListOption(m Float64ListOption, f func(Float64List) Uint64List) Uint64ListOption {  if m.IsDefined() { return Uint64ListOpt(f(*m.value)) } else { return NoneUint64ListOption }  }
/* Float64ListOption: Float64List->UintptrList */ func MapUintptrListToFloat64ListOption(m Float64ListOption, f func(Float64List) UintptrList) UintptrListOption {  if m.IsDefined() { return UintptrListOpt(f(*m.value)) } else { return NoneUintptrListOption }  }
/* Float64ListOption: Float64List->ByteList */ func MapByteListToFloat64ListOption(m Float64ListOption, f func(Float64List) ByteList) ByteListOption {  if m.IsDefined() { return ByteListOpt(f(*m.value)) } else { return NoneByteListOption }  }
/* Float64ListOption: Float64List->RuneList */ func MapRuneListToFloat64ListOption(m Float64ListOption, f func(Float64List) RuneList) RuneListOption {  if m.IsDefined() { return RuneListOpt(f(*m.value)) } else { return NoneRuneListOption }  }
/* Float64ListOption: Float64List->Float32List */ func MapFloat32ListToFloat64ListOption(m Float64ListOption, f func(Float64List) Float32List) Float32ListOption {  if m.IsDefined() { return Float32ListOpt(f(*m.value)) } else { return NoneFloat32ListOption }  }
/* Float64ListOption: Float64List->Float64List */ func MapFloat64ListToFloat64ListOption(m Float64ListOption, f func(Float64List) Float64List) Float64ListOption {  if m.IsDefined() { return Float64ListOpt(f(*m.value)) } else { return NoneFloat64ListOption }  }
/* Float64ListOption: Float64List->Complex64List */ func MapComplex64ListToFloat64ListOption(m Float64ListOption, f func(Float64List) Complex64List) Complex64ListOption {  if m.IsDefined() { return Complex64ListOpt(f(*m.value)) } else { return NoneComplex64ListOption }  }
/* Float64ListOption: Float64List->Complex128List */ func MapComplex128ListToFloat64ListOption(m Float64ListOption, f func(Float64List) Complex128List) Complex128ListOption {  if m.IsDefined() { return Complex128ListOpt(f(*m.value)) } else { return NoneComplex128ListOption }  }
/* Float64ListOption: Float64List->AnyList */ func MapAnyListToFloat64ListOption(m Float64ListOption, f func(Float64List) AnyList) AnyListOption {  if m.IsDefined() { return AnyListOpt(f(*m.value)) } else { return NoneAnyListOption }  }
/* Complex64ListOption: Complex64List->bool */ func MapBoolToComplex64ListOption(m Complex64ListOption, f func(Complex64List) bool) BoolOption {  if m.IsDefined() { return Bool(f(*m.value)) } else { return NoneBoolOption }  }
/* Complex64ListOption: Complex64List->string */ func MapStringToComplex64ListOption(m Complex64ListOption, f func(Complex64List) string) StringOption {  if m.IsDefined() { return String(f(*m.value)) } else { return NoneStringOption }  }
/* Complex64ListOption: Complex64List->int */ func MapIntToComplex64ListOption(m Complex64ListOption, f func(Complex64List) int) IntOption {  if m.IsDefined() { return Int(f(*m.value)) } else { return NoneIntOption }  }
/* Complex64ListOption: Complex64List->int8 */ func MapInt8ToComplex64ListOption(m Complex64ListOption, f func(Complex64List) int8) Int8Option {  if m.IsDefined() { return Int8(f(*m.value)) } else { return NoneInt8Option }  }
/* Complex64ListOption: Complex64List->int16 */ func MapInt16ToComplex64ListOption(m Complex64ListOption, f func(Complex64List) int16) Int16Option {  if m.IsDefined() { return Int16(f(*m.value)) } else { return NoneInt16Option }  }
/* Complex64ListOption: Complex64List->int32 */ func MapInt32ToComplex64ListOption(m Complex64ListOption, f func(Complex64List) int32) Int32Option {  if m.IsDefined() { return Int32(f(*m.value)) } else { return NoneInt32Option }  }
/* Complex64ListOption: Complex64List->int64 */ func MapInt64ToComplex64ListOption(m Complex64ListOption, f func(Complex64List) int64) Int64Option {  if m.IsDefined() { return Int64(f(*m.value)) } else { return NoneInt64Option }  }
/* Complex64ListOption: Complex64List->uint */ func MapUintToComplex64ListOption(m Complex64ListOption, f func(Complex64List) uint) UintOption {  if m.IsDefined() { return Uint(f(*m.value)) } else { return NoneUintOption }  }
/* Complex64ListOption: Complex64List->uint8 */ func MapUint8ToComplex64ListOption(m Complex64ListOption, f func(Complex64List) uint8) Uint8Option {  if m.IsDefined() { return Uint8(f(*m.value)) } else { return NoneUint8Option }  }
/* Complex64ListOption: Complex64List->uint16 */ func MapUint16ToComplex64ListOption(m Complex64ListOption, f func(Complex64List) uint16) Uint16Option {  if m.IsDefined() { return Uint16(f(*m.value)) } else { return NoneUint16Option }  }
/* Complex64ListOption: Complex64List->uint32 */ func MapUint32ToComplex64ListOption(m Complex64ListOption, f func(Complex64List) uint32) Uint32Option {  if m.IsDefined() { return Uint32(f(*m.value)) } else { return NoneUint32Option }  }
/* Complex64ListOption: Complex64List->uint64 */ func MapUint64ToComplex64ListOption(m Complex64ListOption, f func(Complex64List) uint64) Uint64Option {  if m.IsDefined() { return Uint64(f(*m.value)) } else { return NoneUint64Option }  }
/* Complex64ListOption: Complex64List->uintptr */ func MapUintptrToComplex64ListOption(m Complex64ListOption, f func(Complex64List) uintptr) UintptrOption {  if m.IsDefined() { return Uintptr(f(*m.value)) } else { return NoneUintptrOption }  }
/* Complex64ListOption: Complex64List->byte */ func MapByteToComplex64ListOption(m Complex64ListOption, f func(Complex64List) byte) ByteOption {  if m.IsDefined() { return Byte(f(*m.value)) } else { return NoneByteOption }  }
/* Complex64ListOption: Complex64List->rune */ func MapRuneToComplex64ListOption(m Complex64ListOption, f func(Complex64List) rune) RuneOption {  if m.IsDefined() { return Rune(f(*m.value)) } else { return NoneRuneOption }  }
/* Complex64ListOption: Complex64List->float32 */ func MapFloat32ToComplex64ListOption(m Complex64ListOption, f func(Complex64List) float32) Float32Option {  if m.IsDefined() { return Float32(f(*m.value)) } else { return NoneFloat32Option }  }
/* Complex64ListOption: Complex64List->float64 */ func MapFloat64ToComplex64ListOption(m Complex64ListOption, f func(Complex64List) float64) Float64Option {  if m.IsDefined() { return Float64(f(*m.value)) } else { return NoneFloat64Option }  }
/* Complex64ListOption: Complex64List->complex64 */ func MapComplex64ToComplex64ListOption(m Complex64ListOption, f func(Complex64List) complex64) Complex64Option {  if m.IsDefined() { return Complex64(f(*m.value)) } else { return NoneComplex64Option }  }
/* Complex64ListOption: Complex64List->complex128 */ func MapComplex128ToComplex64ListOption(m Complex64ListOption, f func(Complex64List) complex128) Complex128Option {  if m.IsDefined() { return Complex128(f(*m.value)) } else { return NoneComplex128Option }  }
/* Complex64ListOption: Complex64List->Any */ func MapAnyToComplex64ListOption(m Complex64ListOption, f func(Complex64List) Any) AnyOption {  if m.IsDefined() { return AnyOpt(f(*m.value)) } else { return NoneAnyOption }  }
/* Complex64ListOption: Complex64List->BoolOption */ func MapBoolOptionToComplex64ListOption(m Complex64ListOption, f func(Complex64List) BoolOption) BoolOptionOption {  if m.IsDefined() { return BoolBool(f(*m.value)) } else { return NoneBoolOptionOption }  }
/* Complex64ListOption: Complex64List->StringOption */ func MapStringOptionToComplex64ListOption(m Complex64ListOption, f func(Complex64List) StringOption) StringOptionOption {  if m.IsDefined() { return StringString(f(*m.value)) } else { return NoneStringOptionOption }  }
/* Complex64ListOption: Complex64List->IntOption */ func MapIntOptionToComplex64ListOption(m Complex64ListOption, f func(Complex64List) IntOption) IntOptionOption {  if m.IsDefined() { return IntInt(f(*m.value)) } else { return NoneIntOptionOption }  }
/* Complex64ListOption: Complex64List->Int8Option */ func MapInt8OptionToComplex64ListOption(m Complex64ListOption, f func(Complex64List) Int8Option) Int8OptionOption {  if m.IsDefined() { return Int8Int8(f(*m.value)) } else { return NoneInt8OptionOption }  }
/* Complex64ListOption: Complex64List->Int16Option */ func MapInt16OptionToComplex64ListOption(m Complex64ListOption, f func(Complex64List) Int16Option) Int16OptionOption {  if m.IsDefined() { return Int16Int16(f(*m.value)) } else { return NoneInt16OptionOption }  }
/* Complex64ListOption: Complex64List->Int32Option */ func MapInt32OptionToComplex64ListOption(m Complex64ListOption, f func(Complex64List) Int32Option) Int32OptionOption {  if m.IsDefined() { return Int32Int32(f(*m.value)) } else { return NoneInt32OptionOption }  }
/* Complex64ListOption: Complex64List->Int64Option */ func MapInt64OptionToComplex64ListOption(m Complex64ListOption, f func(Complex64List) Int64Option) Int64OptionOption {  if m.IsDefined() { return Int64Int64(f(*m.value)) } else { return NoneInt64OptionOption }  }
/* Complex64ListOption: Complex64List->UintOption */ func MapUintOptionToComplex64ListOption(m Complex64ListOption, f func(Complex64List) UintOption) UintOptionOption {  if m.IsDefined() { return UintUint(f(*m.value)) } else { return NoneUintOptionOption }  }
/* Complex64ListOption: Complex64List->Uint8Option */ func MapUint8OptionToComplex64ListOption(m Complex64ListOption, f func(Complex64List) Uint8Option) Uint8OptionOption {  if m.IsDefined() { return Uint8Uint8(f(*m.value)) } else { return NoneUint8OptionOption }  }
/* Complex64ListOption: Complex64List->Uint16Option */ func MapUint16OptionToComplex64ListOption(m Complex64ListOption, f func(Complex64List) Uint16Option) Uint16OptionOption {  if m.IsDefined() { return Uint16Uint16(f(*m.value)) } else { return NoneUint16OptionOption }  }
/* Complex64ListOption: Complex64List->Uint32Option */ func MapUint32OptionToComplex64ListOption(m Complex64ListOption, f func(Complex64List) Uint32Option) Uint32OptionOption {  if m.IsDefined() { return Uint32Uint32(f(*m.value)) } else { return NoneUint32OptionOption }  }
/* Complex64ListOption: Complex64List->Uint64Option */ func MapUint64OptionToComplex64ListOption(m Complex64ListOption, f func(Complex64List) Uint64Option) Uint64OptionOption {  if m.IsDefined() { return Uint64Uint64(f(*m.value)) } else { return NoneUint64OptionOption }  }
/* Complex64ListOption: Complex64List->UintptrOption */ func MapUintptrOptionToComplex64ListOption(m Complex64ListOption, f func(Complex64List) UintptrOption) UintptrOptionOption {  if m.IsDefined() { return UintptrUintptr(f(*m.value)) } else { return NoneUintptrOptionOption }  }
/* Complex64ListOption: Complex64List->ByteOption */ func MapByteOptionToComplex64ListOption(m Complex64ListOption, f func(Complex64List) ByteOption) ByteOptionOption {  if m.IsDefined() { return ByteByte(f(*m.value)) } else { return NoneByteOptionOption }  }
/* Complex64ListOption: Complex64List->RuneOption */ func MapRuneOptionToComplex64ListOption(m Complex64ListOption, f func(Complex64List) RuneOption) RuneOptionOption {  if m.IsDefined() { return RuneRune(f(*m.value)) } else { return NoneRuneOptionOption }  }
/* Complex64ListOption: Complex64List->Float32Option */ func MapFloat32OptionToComplex64ListOption(m Complex64ListOption, f func(Complex64List) Float32Option) Float32OptionOption {  if m.IsDefined() { return Float32Float32(f(*m.value)) } else { return NoneFloat32OptionOption }  }
/* Complex64ListOption: Complex64List->Float64Option */ func MapFloat64OptionToComplex64ListOption(m Complex64ListOption, f func(Complex64List) Float64Option) Float64OptionOption {  if m.IsDefined() { return Float64Float64(f(*m.value)) } else { return NoneFloat64OptionOption }  }
/* Complex64ListOption: Complex64List->Complex64Option */ func MapComplex64OptionToComplex64ListOption(m Complex64ListOption, f func(Complex64List) Complex64Option) Complex64OptionOption {  if m.IsDefined() { return Complex64Complex64(f(*m.value)) } else { return NoneComplex64OptionOption }  }
/* Complex64ListOption: Complex64List->Complex128Option */ func MapComplex128OptionToComplex64ListOption(m Complex64ListOption, f func(Complex64List) Complex128Option) Complex128OptionOption {  if m.IsDefined() { return Complex128Complex128(f(*m.value)) } else { return NoneComplex128OptionOption }  }
/* Complex64ListOption: Complex64List->AnyOption */ func MapAnyOptionToComplex64ListOption(m Complex64ListOption, f func(Complex64List) AnyOption) AnyOptionOption {  if m.IsDefined() { return AnyOptAny(f(*m.value)) } else { return NoneAnyOptionOption }  }
/* Complex64ListOption: Complex64List->[]bool */ func MapBoolArrToComplex64ListOption(m Complex64ListOption, f func(Complex64List) []bool) BoolArrOption {  if m.IsDefined() { return BoolArrOpt(f(*m.value)) } else { return NoneBoolArrOption }  }
/* Complex64ListOption: Complex64List->[]string */ func MapStringArrToComplex64ListOption(m Complex64ListOption, f func(Complex64List) []string) StringArrOption {  if m.IsDefined() { return StringArrOpt(f(*m.value)) } else { return NoneStringArrOption }  }
/* Complex64ListOption: Complex64List->[]int */ func MapIntArrToComplex64ListOption(m Complex64ListOption, f func(Complex64List) []int) IntArrOption {  if m.IsDefined() { return IntArrOpt(f(*m.value)) } else { return NoneIntArrOption }  }
/* Complex64ListOption: Complex64List->[]int8 */ func MapInt8ArrToComplex64ListOption(m Complex64ListOption, f func(Complex64List) []int8) Int8ArrOption {  if m.IsDefined() { return Int8ArrOpt(f(*m.value)) } else { return NoneInt8ArrOption }  }
/* Complex64ListOption: Complex64List->[]int16 */ func MapInt16ArrToComplex64ListOption(m Complex64ListOption, f func(Complex64List) []int16) Int16ArrOption {  if m.IsDefined() { return Int16ArrOpt(f(*m.value)) } else { return NoneInt16ArrOption }  }
/* Complex64ListOption: Complex64List->[]int32 */ func MapInt32ArrToComplex64ListOption(m Complex64ListOption, f func(Complex64List) []int32) Int32ArrOption {  if m.IsDefined() { return Int32ArrOpt(f(*m.value)) } else { return NoneInt32ArrOption }  }
/* Complex64ListOption: Complex64List->[]int64 */ func MapInt64ArrToComplex64ListOption(m Complex64ListOption, f func(Complex64List) []int64) Int64ArrOption {  if m.IsDefined() { return Int64ArrOpt(f(*m.value)) } else { return NoneInt64ArrOption }  }
/* Complex64ListOption: Complex64List->[]uint */ func MapUintArrToComplex64ListOption(m Complex64ListOption, f func(Complex64List) []uint) UintArrOption {  if m.IsDefined() { return UintArrOpt(f(*m.value)) } else { return NoneUintArrOption }  }
/* Complex64ListOption: Complex64List->[]uint8 */ func MapUint8ArrToComplex64ListOption(m Complex64ListOption, f func(Complex64List) []uint8) Uint8ArrOption {  if m.IsDefined() { return Uint8ArrOpt(f(*m.value)) } else { return NoneUint8ArrOption }  }
/* Complex64ListOption: Complex64List->[]uint16 */ func MapUint16ArrToComplex64ListOption(m Complex64ListOption, f func(Complex64List) []uint16) Uint16ArrOption {  if m.IsDefined() { return Uint16ArrOpt(f(*m.value)) } else { return NoneUint16ArrOption }  }
/* Complex64ListOption: Complex64List->[]uint32 */ func MapUint32ArrToComplex64ListOption(m Complex64ListOption, f func(Complex64List) []uint32) Uint32ArrOption {  if m.IsDefined() { return Uint32ArrOpt(f(*m.value)) } else { return NoneUint32ArrOption }  }
/* Complex64ListOption: Complex64List->[]uint64 */ func MapUint64ArrToComplex64ListOption(m Complex64ListOption, f func(Complex64List) []uint64) Uint64ArrOption {  if m.IsDefined() { return Uint64ArrOpt(f(*m.value)) } else { return NoneUint64ArrOption }  }
/* Complex64ListOption: Complex64List->[]uintptr */ func MapUintptrArrToComplex64ListOption(m Complex64ListOption, f func(Complex64List) []uintptr) UintptrArrOption {  if m.IsDefined() { return UintptrArrOpt(f(*m.value)) } else { return NoneUintptrArrOption }  }
/* Complex64ListOption: Complex64List->[]byte */ func MapByteArrToComplex64ListOption(m Complex64ListOption, f func(Complex64List) []byte) ByteArrOption {  if m.IsDefined() { return ByteArrOpt(f(*m.value)) } else { return NoneByteArrOption }  }
/* Complex64ListOption: Complex64List->[]rune */ func MapRuneArrToComplex64ListOption(m Complex64ListOption, f func(Complex64List) []rune) RuneArrOption {  if m.IsDefined() { return RuneArrOpt(f(*m.value)) } else { return NoneRuneArrOption }  }
/* Complex64ListOption: Complex64List->[]float32 */ func MapFloat32ArrToComplex64ListOption(m Complex64ListOption, f func(Complex64List) []float32) Float32ArrOption {  if m.IsDefined() { return Float32ArrOpt(f(*m.value)) } else { return NoneFloat32ArrOption }  }
/* Complex64ListOption: Complex64List->[]float64 */ func MapFloat64ArrToComplex64ListOption(m Complex64ListOption, f func(Complex64List) []float64) Float64ArrOption {  if m.IsDefined() { return Float64ArrOpt(f(*m.value)) } else { return NoneFloat64ArrOption }  }
/* Complex64ListOption: Complex64List->[]complex64 */ func MapComplex64ArrToComplex64ListOption(m Complex64ListOption, f func(Complex64List) []complex64) Complex64ArrOption {  if m.IsDefined() { return Complex64ArrOpt(f(*m.value)) } else { return NoneComplex64ArrOption }  }
/* Complex64ListOption: Complex64List->[]complex128 */ func MapComplex128ArrToComplex64ListOption(m Complex64ListOption, f func(Complex64List) []complex128) Complex128ArrOption {  if m.IsDefined() { return Complex128ArrOpt(f(*m.value)) } else { return NoneComplex128ArrOption }  }
/* Complex64ListOption: Complex64List->[]Any */ func MapAnyArrToComplex64ListOption(m Complex64ListOption, f func(Complex64List) []Any) AnyArrOption {  if m.IsDefined() { return AnyArrOpt(f(*m.value)) } else { return NoneAnyArrOption }  }
/* Complex64ListOption: Complex64List->BoolList */ func MapBoolListToComplex64ListOption(m Complex64ListOption, f func(Complex64List) BoolList) BoolListOption {  if m.IsDefined() { return BoolListOpt(f(*m.value)) } else { return NoneBoolListOption }  }
/* Complex64ListOption: Complex64List->StringList */ func MapStringListToComplex64ListOption(m Complex64ListOption, f func(Complex64List) StringList) StringListOption {  if m.IsDefined() { return StringListOpt(f(*m.value)) } else { return NoneStringListOption }  }
/* Complex64ListOption: Complex64List->IntList */ func MapIntListToComplex64ListOption(m Complex64ListOption, f func(Complex64List) IntList) IntListOption {  if m.IsDefined() { return IntListOpt(f(*m.value)) } else { return NoneIntListOption }  }
/* Complex64ListOption: Complex64List->Int8List */ func MapInt8ListToComplex64ListOption(m Complex64ListOption, f func(Complex64List) Int8List) Int8ListOption {  if m.IsDefined() { return Int8ListOpt(f(*m.value)) } else { return NoneInt8ListOption }  }
/* Complex64ListOption: Complex64List->Int16List */ func MapInt16ListToComplex64ListOption(m Complex64ListOption, f func(Complex64List) Int16List) Int16ListOption {  if m.IsDefined() { return Int16ListOpt(f(*m.value)) } else { return NoneInt16ListOption }  }
/* Complex64ListOption: Complex64List->Int32List */ func MapInt32ListToComplex64ListOption(m Complex64ListOption, f func(Complex64List) Int32List) Int32ListOption {  if m.IsDefined() { return Int32ListOpt(f(*m.value)) } else { return NoneInt32ListOption }  }
/* Complex64ListOption: Complex64List->Int64List */ func MapInt64ListToComplex64ListOption(m Complex64ListOption, f func(Complex64List) Int64List) Int64ListOption {  if m.IsDefined() { return Int64ListOpt(f(*m.value)) } else { return NoneInt64ListOption }  }
/* Complex64ListOption: Complex64List->UintList */ func MapUintListToComplex64ListOption(m Complex64ListOption, f func(Complex64List) UintList) UintListOption {  if m.IsDefined() { return UintListOpt(f(*m.value)) } else { return NoneUintListOption }  }
/* Complex64ListOption: Complex64List->Uint8List */ func MapUint8ListToComplex64ListOption(m Complex64ListOption, f func(Complex64List) Uint8List) Uint8ListOption {  if m.IsDefined() { return Uint8ListOpt(f(*m.value)) } else { return NoneUint8ListOption }  }
/* Complex64ListOption: Complex64List->Uint16List */ func MapUint16ListToComplex64ListOption(m Complex64ListOption, f func(Complex64List) Uint16List) Uint16ListOption {  if m.IsDefined() { return Uint16ListOpt(f(*m.value)) } else { return NoneUint16ListOption }  }
/* Complex64ListOption: Complex64List->Uint32List */ func MapUint32ListToComplex64ListOption(m Complex64ListOption, f func(Complex64List) Uint32List) Uint32ListOption {  if m.IsDefined() { return Uint32ListOpt(f(*m.value)) } else { return NoneUint32ListOption }  }
/* Complex64ListOption: Complex64List->Uint64List */ func MapUint64ListToComplex64ListOption(m Complex64ListOption, f func(Complex64List) Uint64List) Uint64ListOption {  if m.IsDefined() { return Uint64ListOpt(f(*m.value)) } else { return NoneUint64ListOption }  }
/* Complex64ListOption: Complex64List->UintptrList */ func MapUintptrListToComplex64ListOption(m Complex64ListOption, f func(Complex64List) UintptrList) UintptrListOption {  if m.IsDefined() { return UintptrListOpt(f(*m.value)) } else { return NoneUintptrListOption }  }
/* Complex64ListOption: Complex64List->ByteList */ func MapByteListToComplex64ListOption(m Complex64ListOption, f func(Complex64List) ByteList) ByteListOption {  if m.IsDefined() { return ByteListOpt(f(*m.value)) } else { return NoneByteListOption }  }
/* Complex64ListOption: Complex64List->RuneList */ func MapRuneListToComplex64ListOption(m Complex64ListOption, f func(Complex64List) RuneList) RuneListOption {  if m.IsDefined() { return RuneListOpt(f(*m.value)) } else { return NoneRuneListOption }  }
/* Complex64ListOption: Complex64List->Float32List */ func MapFloat32ListToComplex64ListOption(m Complex64ListOption, f func(Complex64List) Float32List) Float32ListOption {  if m.IsDefined() { return Float32ListOpt(f(*m.value)) } else { return NoneFloat32ListOption }  }
/* Complex64ListOption: Complex64List->Float64List */ func MapFloat64ListToComplex64ListOption(m Complex64ListOption, f func(Complex64List) Float64List) Float64ListOption {  if m.IsDefined() { return Float64ListOpt(f(*m.value)) } else { return NoneFloat64ListOption }  }
/* Complex64ListOption: Complex64List->Complex64List */ func MapComplex64ListToComplex64ListOption(m Complex64ListOption, f func(Complex64List) Complex64List) Complex64ListOption {  if m.IsDefined() { return Complex64ListOpt(f(*m.value)) } else { return NoneComplex64ListOption }  }
/* Complex64ListOption: Complex64List->Complex128List */ func MapComplex128ListToComplex64ListOption(m Complex64ListOption, f func(Complex64List) Complex128List) Complex128ListOption {  if m.IsDefined() { return Complex128ListOpt(f(*m.value)) } else { return NoneComplex128ListOption }  }
/* Complex64ListOption: Complex64List->AnyList */ func MapAnyListToComplex64ListOption(m Complex64ListOption, f func(Complex64List) AnyList) AnyListOption {  if m.IsDefined() { return AnyListOpt(f(*m.value)) } else { return NoneAnyListOption }  }
/* Complex128ListOption: Complex128List->bool */ func MapBoolToComplex128ListOption(m Complex128ListOption, f func(Complex128List) bool) BoolOption {  if m.IsDefined() { return Bool(f(*m.value)) } else { return NoneBoolOption }  }
/* Complex128ListOption: Complex128List->string */ func MapStringToComplex128ListOption(m Complex128ListOption, f func(Complex128List) string) StringOption {  if m.IsDefined() { return String(f(*m.value)) } else { return NoneStringOption }  }
/* Complex128ListOption: Complex128List->int */ func MapIntToComplex128ListOption(m Complex128ListOption, f func(Complex128List) int) IntOption {  if m.IsDefined() { return Int(f(*m.value)) } else { return NoneIntOption }  }
/* Complex128ListOption: Complex128List->int8 */ func MapInt8ToComplex128ListOption(m Complex128ListOption, f func(Complex128List) int8) Int8Option {  if m.IsDefined() { return Int8(f(*m.value)) } else { return NoneInt8Option }  }
/* Complex128ListOption: Complex128List->int16 */ func MapInt16ToComplex128ListOption(m Complex128ListOption, f func(Complex128List) int16) Int16Option {  if m.IsDefined() { return Int16(f(*m.value)) } else { return NoneInt16Option }  }
/* Complex128ListOption: Complex128List->int32 */ func MapInt32ToComplex128ListOption(m Complex128ListOption, f func(Complex128List) int32) Int32Option {  if m.IsDefined() { return Int32(f(*m.value)) } else { return NoneInt32Option }  }
/* Complex128ListOption: Complex128List->int64 */ func MapInt64ToComplex128ListOption(m Complex128ListOption, f func(Complex128List) int64) Int64Option {  if m.IsDefined() { return Int64(f(*m.value)) } else { return NoneInt64Option }  }
/* Complex128ListOption: Complex128List->uint */ func MapUintToComplex128ListOption(m Complex128ListOption, f func(Complex128List) uint) UintOption {  if m.IsDefined() { return Uint(f(*m.value)) } else { return NoneUintOption }  }
/* Complex128ListOption: Complex128List->uint8 */ func MapUint8ToComplex128ListOption(m Complex128ListOption, f func(Complex128List) uint8) Uint8Option {  if m.IsDefined() { return Uint8(f(*m.value)) } else { return NoneUint8Option }  }
/* Complex128ListOption: Complex128List->uint16 */ func MapUint16ToComplex128ListOption(m Complex128ListOption, f func(Complex128List) uint16) Uint16Option {  if m.IsDefined() { return Uint16(f(*m.value)) } else { return NoneUint16Option }  }
/* Complex128ListOption: Complex128List->uint32 */ func MapUint32ToComplex128ListOption(m Complex128ListOption, f func(Complex128List) uint32) Uint32Option {  if m.IsDefined() { return Uint32(f(*m.value)) } else { return NoneUint32Option }  }
/* Complex128ListOption: Complex128List->uint64 */ func MapUint64ToComplex128ListOption(m Complex128ListOption, f func(Complex128List) uint64) Uint64Option {  if m.IsDefined() { return Uint64(f(*m.value)) } else { return NoneUint64Option }  }
/* Complex128ListOption: Complex128List->uintptr */ func MapUintptrToComplex128ListOption(m Complex128ListOption, f func(Complex128List) uintptr) UintptrOption {  if m.IsDefined() { return Uintptr(f(*m.value)) } else { return NoneUintptrOption }  }
/* Complex128ListOption: Complex128List->byte */ func MapByteToComplex128ListOption(m Complex128ListOption, f func(Complex128List) byte) ByteOption {  if m.IsDefined() { return Byte(f(*m.value)) } else { return NoneByteOption }  }
/* Complex128ListOption: Complex128List->rune */ func MapRuneToComplex128ListOption(m Complex128ListOption, f func(Complex128List) rune) RuneOption {  if m.IsDefined() { return Rune(f(*m.value)) } else { return NoneRuneOption }  }
/* Complex128ListOption: Complex128List->float32 */ func MapFloat32ToComplex128ListOption(m Complex128ListOption, f func(Complex128List) float32) Float32Option {  if m.IsDefined() { return Float32(f(*m.value)) } else { return NoneFloat32Option }  }
/* Complex128ListOption: Complex128List->float64 */ func MapFloat64ToComplex128ListOption(m Complex128ListOption, f func(Complex128List) float64) Float64Option {  if m.IsDefined() { return Float64(f(*m.value)) } else { return NoneFloat64Option }  }
/* Complex128ListOption: Complex128List->complex64 */ func MapComplex64ToComplex128ListOption(m Complex128ListOption, f func(Complex128List) complex64) Complex64Option {  if m.IsDefined() { return Complex64(f(*m.value)) } else { return NoneComplex64Option }  }
/* Complex128ListOption: Complex128List->complex128 */ func MapComplex128ToComplex128ListOption(m Complex128ListOption, f func(Complex128List) complex128) Complex128Option {  if m.IsDefined() { return Complex128(f(*m.value)) } else { return NoneComplex128Option }  }
/* Complex128ListOption: Complex128List->Any */ func MapAnyToComplex128ListOption(m Complex128ListOption, f func(Complex128List) Any) AnyOption {  if m.IsDefined() { return AnyOpt(f(*m.value)) } else { return NoneAnyOption }  }
/* Complex128ListOption: Complex128List->BoolOption */ func MapBoolOptionToComplex128ListOption(m Complex128ListOption, f func(Complex128List) BoolOption) BoolOptionOption {  if m.IsDefined() { return BoolBool(f(*m.value)) } else { return NoneBoolOptionOption }  }
/* Complex128ListOption: Complex128List->StringOption */ func MapStringOptionToComplex128ListOption(m Complex128ListOption, f func(Complex128List) StringOption) StringOptionOption {  if m.IsDefined() { return StringString(f(*m.value)) } else { return NoneStringOptionOption }  }
/* Complex128ListOption: Complex128List->IntOption */ func MapIntOptionToComplex128ListOption(m Complex128ListOption, f func(Complex128List) IntOption) IntOptionOption {  if m.IsDefined() { return IntInt(f(*m.value)) } else { return NoneIntOptionOption }  }
/* Complex128ListOption: Complex128List->Int8Option */ func MapInt8OptionToComplex128ListOption(m Complex128ListOption, f func(Complex128List) Int8Option) Int8OptionOption {  if m.IsDefined() { return Int8Int8(f(*m.value)) } else { return NoneInt8OptionOption }  }
/* Complex128ListOption: Complex128List->Int16Option */ func MapInt16OptionToComplex128ListOption(m Complex128ListOption, f func(Complex128List) Int16Option) Int16OptionOption {  if m.IsDefined() { return Int16Int16(f(*m.value)) } else { return NoneInt16OptionOption }  }
/* Complex128ListOption: Complex128List->Int32Option */ func MapInt32OptionToComplex128ListOption(m Complex128ListOption, f func(Complex128List) Int32Option) Int32OptionOption {  if m.IsDefined() { return Int32Int32(f(*m.value)) } else { return NoneInt32OptionOption }  }
/* Complex128ListOption: Complex128List->Int64Option */ func MapInt64OptionToComplex128ListOption(m Complex128ListOption, f func(Complex128List) Int64Option) Int64OptionOption {  if m.IsDefined() { return Int64Int64(f(*m.value)) } else { return NoneInt64OptionOption }  }
/* Complex128ListOption: Complex128List->UintOption */ func MapUintOptionToComplex128ListOption(m Complex128ListOption, f func(Complex128List) UintOption) UintOptionOption {  if m.IsDefined() { return UintUint(f(*m.value)) } else { return NoneUintOptionOption }  }
/* Complex128ListOption: Complex128List->Uint8Option */ func MapUint8OptionToComplex128ListOption(m Complex128ListOption, f func(Complex128List) Uint8Option) Uint8OptionOption {  if m.IsDefined() { return Uint8Uint8(f(*m.value)) } else { return NoneUint8OptionOption }  }
/* Complex128ListOption: Complex128List->Uint16Option */ func MapUint16OptionToComplex128ListOption(m Complex128ListOption, f func(Complex128List) Uint16Option) Uint16OptionOption {  if m.IsDefined() { return Uint16Uint16(f(*m.value)) } else { return NoneUint16OptionOption }  }
/* Complex128ListOption: Complex128List->Uint32Option */ func MapUint32OptionToComplex128ListOption(m Complex128ListOption, f func(Complex128List) Uint32Option) Uint32OptionOption {  if m.IsDefined() { return Uint32Uint32(f(*m.value)) } else { return NoneUint32OptionOption }  }
/* Complex128ListOption: Complex128List->Uint64Option */ func MapUint64OptionToComplex128ListOption(m Complex128ListOption, f func(Complex128List) Uint64Option) Uint64OptionOption {  if m.IsDefined() { return Uint64Uint64(f(*m.value)) } else { return NoneUint64OptionOption }  }
/* Complex128ListOption: Complex128List->UintptrOption */ func MapUintptrOptionToComplex128ListOption(m Complex128ListOption, f func(Complex128List) UintptrOption) UintptrOptionOption {  if m.IsDefined() { return UintptrUintptr(f(*m.value)) } else { return NoneUintptrOptionOption }  }
/* Complex128ListOption: Complex128List->ByteOption */ func MapByteOptionToComplex128ListOption(m Complex128ListOption, f func(Complex128List) ByteOption) ByteOptionOption {  if m.IsDefined() { return ByteByte(f(*m.value)) } else { return NoneByteOptionOption }  }
/* Complex128ListOption: Complex128List->RuneOption */ func MapRuneOptionToComplex128ListOption(m Complex128ListOption, f func(Complex128List) RuneOption) RuneOptionOption {  if m.IsDefined() { return RuneRune(f(*m.value)) } else { return NoneRuneOptionOption }  }
/* Complex128ListOption: Complex128List->Float32Option */ func MapFloat32OptionToComplex128ListOption(m Complex128ListOption, f func(Complex128List) Float32Option) Float32OptionOption {  if m.IsDefined() { return Float32Float32(f(*m.value)) } else { return NoneFloat32OptionOption }  }
/* Complex128ListOption: Complex128List->Float64Option */ func MapFloat64OptionToComplex128ListOption(m Complex128ListOption, f func(Complex128List) Float64Option) Float64OptionOption {  if m.IsDefined() { return Float64Float64(f(*m.value)) } else { return NoneFloat64OptionOption }  }
/* Complex128ListOption: Complex128List->Complex64Option */ func MapComplex64OptionToComplex128ListOption(m Complex128ListOption, f func(Complex128List) Complex64Option) Complex64OptionOption {  if m.IsDefined() { return Complex64Complex64(f(*m.value)) } else { return NoneComplex64OptionOption }  }
/* Complex128ListOption: Complex128List->Complex128Option */ func MapComplex128OptionToComplex128ListOption(m Complex128ListOption, f func(Complex128List) Complex128Option) Complex128OptionOption {  if m.IsDefined() { return Complex128Complex128(f(*m.value)) } else { return NoneComplex128OptionOption }  }
/* Complex128ListOption: Complex128List->AnyOption */ func MapAnyOptionToComplex128ListOption(m Complex128ListOption, f func(Complex128List) AnyOption) AnyOptionOption {  if m.IsDefined() { return AnyOptAny(f(*m.value)) } else { return NoneAnyOptionOption }  }
/* Complex128ListOption: Complex128List->[]bool */ func MapBoolArrToComplex128ListOption(m Complex128ListOption, f func(Complex128List) []bool) BoolArrOption {  if m.IsDefined() { return BoolArrOpt(f(*m.value)) } else { return NoneBoolArrOption }  }
/* Complex128ListOption: Complex128List->[]string */ func MapStringArrToComplex128ListOption(m Complex128ListOption, f func(Complex128List) []string) StringArrOption {  if m.IsDefined() { return StringArrOpt(f(*m.value)) } else { return NoneStringArrOption }  }
/* Complex128ListOption: Complex128List->[]int */ func MapIntArrToComplex128ListOption(m Complex128ListOption, f func(Complex128List) []int) IntArrOption {  if m.IsDefined() { return IntArrOpt(f(*m.value)) } else { return NoneIntArrOption }  }
/* Complex128ListOption: Complex128List->[]int8 */ func MapInt8ArrToComplex128ListOption(m Complex128ListOption, f func(Complex128List) []int8) Int8ArrOption {  if m.IsDefined() { return Int8ArrOpt(f(*m.value)) } else { return NoneInt8ArrOption }  }
/* Complex128ListOption: Complex128List->[]int16 */ func MapInt16ArrToComplex128ListOption(m Complex128ListOption, f func(Complex128List) []int16) Int16ArrOption {  if m.IsDefined() { return Int16ArrOpt(f(*m.value)) } else { return NoneInt16ArrOption }  }
/* Complex128ListOption: Complex128List->[]int32 */ func MapInt32ArrToComplex128ListOption(m Complex128ListOption, f func(Complex128List) []int32) Int32ArrOption {  if m.IsDefined() { return Int32ArrOpt(f(*m.value)) } else { return NoneInt32ArrOption }  }
/* Complex128ListOption: Complex128List->[]int64 */ func MapInt64ArrToComplex128ListOption(m Complex128ListOption, f func(Complex128List) []int64) Int64ArrOption {  if m.IsDefined() { return Int64ArrOpt(f(*m.value)) } else { return NoneInt64ArrOption }  }
/* Complex128ListOption: Complex128List->[]uint */ func MapUintArrToComplex128ListOption(m Complex128ListOption, f func(Complex128List) []uint) UintArrOption {  if m.IsDefined() { return UintArrOpt(f(*m.value)) } else { return NoneUintArrOption }  }
/* Complex128ListOption: Complex128List->[]uint8 */ func MapUint8ArrToComplex128ListOption(m Complex128ListOption, f func(Complex128List) []uint8) Uint8ArrOption {  if m.IsDefined() { return Uint8ArrOpt(f(*m.value)) } else { return NoneUint8ArrOption }  }
/* Complex128ListOption: Complex128List->[]uint16 */ func MapUint16ArrToComplex128ListOption(m Complex128ListOption, f func(Complex128List) []uint16) Uint16ArrOption {  if m.IsDefined() { return Uint16ArrOpt(f(*m.value)) } else { return NoneUint16ArrOption }  }
/* Complex128ListOption: Complex128List->[]uint32 */ func MapUint32ArrToComplex128ListOption(m Complex128ListOption, f func(Complex128List) []uint32) Uint32ArrOption {  if m.IsDefined() { return Uint32ArrOpt(f(*m.value)) } else { return NoneUint32ArrOption }  }
/* Complex128ListOption: Complex128List->[]uint64 */ func MapUint64ArrToComplex128ListOption(m Complex128ListOption, f func(Complex128List) []uint64) Uint64ArrOption {  if m.IsDefined() { return Uint64ArrOpt(f(*m.value)) } else { return NoneUint64ArrOption }  }
/* Complex128ListOption: Complex128List->[]uintptr */ func MapUintptrArrToComplex128ListOption(m Complex128ListOption, f func(Complex128List) []uintptr) UintptrArrOption {  if m.IsDefined() { return UintptrArrOpt(f(*m.value)) } else { return NoneUintptrArrOption }  }
/* Complex128ListOption: Complex128List->[]byte */ func MapByteArrToComplex128ListOption(m Complex128ListOption, f func(Complex128List) []byte) ByteArrOption {  if m.IsDefined() { return ByteArrOpt(f(*m.value)) } else { return NoneByteArrOption }  }
/* Complex128ListOption: Complex128List->[]rune */ func MapRuneArrToComplex128ListOption(m Complex128ListOption, f func(Complex128List) []rune) RuneArrOption {  if m.IsDefined() { return RuneArrOpt(f(*m.value)) } else { return NoneRuneArrOption }  }
/* Complex128ListOption: Complex128List->[]float32 */ func MapFloat32ArrToComplex128ListOption(m Complex128ListOption, f func(Complex128List) []float32) Float32ArrOption {  if m.IsDefined() { return Float32ArrOpt(f(*m.value)) } else { return NoneFloat32ArrOption }  }
/* Complex128ListOption: Complex128List->[]float64 */ func MapFloat64ArrToComplex128ListOption(m Complex128ListOption, f func(Complex128List) []float64) Float64ArrOption {  if m.IsDefined() { return Float64ArrOpt(f(*m.value)) } else { return NoneFloat64ArrOption }  }
/* Complex128ListOption: Complex128List->[]complex64 */ func MapComplex64ArrToComplex128ListOption(m Complex128ListOption, f func(Complex128List) []complex64) Complex64ArrOption {  if m.IsDefined() { return Complex64ArrOpt(f(*m.value)) } else { return NoneComplex64ArrOption }  }
/* Complex128ListOption: Complex128List->[]complex128 */ func MapComplex128ArrToComplex128ListOption(m Complex128ListOption, f func(Complex128List) []complex128) Complex128ArrOption {  if m.IsDefined() { return Complex128ArrOpt(f(*m.value)) } else { return NoneComplex128ArrOption }  }
/* Complex128ListOption: Complex128List->[]Any */ func MapAnyArrToComplex128ListOption(m Complex128ListOption, f func(Complex128List) []Any) AnyArrOption {  if m.IsDefined() { return AnyArrOpt(f(*m.value)) } else { return NoneAnyArrOption }  }
/* Complex128ListOption: Complex128List->BoolList */ func MapBoolListToComplex128ListOption(m Complex128ListOption, f func(Complex128List) BoolList) BoolListOption {  if m.IsDefined() { return BoolListOpt(f(*m.value)) } else { return NoneBoolListOption }  }
/* Complex128ListOption: Complex128List->StringList */ func MapStringListToComplex128ListOption(m Complex128ListOption, f func(Complex128List) StringList) StringListOption {  if m.IsDefined() { return StringListOpt(f(*m.value)) } else { return NoneStringListOption }  }
/* Complex128ListOption: Complex128List->IntList */ func MapIntListToComplex128ListOption(m Complex128ListOption, f func(Complex128List) IntList) IntListOption {  if m.IsDefined() { return IntListOpt(f(*m.value)) } else { return NoneIntListOption }  }
/* Complex128ListOption: Complex128List->Int8List */ func MapInt8ListToComplex128ListOption(m Complex128ListOption, f func(Complex128List) Int8List) Int8ListOption {  if m.IsDefined() { return Int8ListOpt(f(*m.value)) } else { return NoneInt8ListOption }  }
/* Complex128ListOption: Complex128List->Int16List */ func MapInt16ListToComplex128ListOption(m Complex128ListOption, f func(Complex128List) Int16List) Int16ListOption {  if m.IsDefined() { return Int16ListOpt(f(*m.value)) } else { return NoneInt16ListOption }  }
/* Complex128ListOption: Complex128List->Int32List */ func MapInt32ListToComplex128ListOption(m Complex128ListOption, f func(Complex128List) Int32List) Int32ListOption {  if m.IsDefined() { return Int32ListOpt(f(*m.value)) } else { return NoneInt32ListOption }  }
/* Complex128ListOption: Complex128List->Int64List */ func MapInt64ListToComplex128ListOption(m Complex128ListOption, f func(Complex128List) Int64List) Int64ListOption {  if m.IsDefined() { return Int64ListOpt(f(*m.value)) } else { return NoneInt64ListOption }  }
/* Complex128ListOption: Complex128List->UintList */ func MapUintListToComplex128ListOption(m Complex128ListOption, f func(Complex128List) UintList) UintListOption {  if m.IsDefined() { return UintListOpt(f(*m.value)) } else { return NoneUintListOption }  }
/* Complex128ListOption: Complex128List->Uint8List */ func MapUint8ListToComplex128ListOption(m Complex128ListOption, f func(Complex128List) Uint8List) Uint8ListOption {  if m.IsDefined() { return Uint8ListOpt(f(*m.value)) } else { return NoneUint8ListOption }  }
/* Complex128ListOption: Complex128List->Uint16List */ func MapUint16ListToComplex128ListOption(m Complex128ListOption, f func(Complex128List) Uint16List) Uint16ListOption {  if m.IsDefined() { return Uint16ListOpt(f(*m.value)) } else { return NoneUint16ListOption }  }
/* Complex128ListOption: Complex128List->Uint32List */ func MapUint32ListToComplex128ListOption(m Complex128ListOption, f func(Complex128List) Uint32List) Uint32ListOption {  if m.IsDefined() { return Uint32ListOpt(f(*m.value)) } else { return NoneUint32ListOption }  }
/* Complex128ListOption: Complex128List->Uint64List */ func MapUint64ListToComplex128ListOption(m Complex128ListOption, f func(Complex128List) Uint64List) Uint64ListOption {  if m.IsDefined() { return Uint64ListOpt(f(*m.value)) } else { return NoneUint64ListOption }  }
/* Complex128ListOption: Complex128List->UintptrList */ func MapUintptrListToComplex128ListOption(m Complex128ListOption, f func(Complex128List) UintptrList) UintptrListOption {  if m.IsDefined() { return UintptrListOpt(f(*m.value)) } else { return NoneUintptrListOption }  }
/* Complex128ListOption: Complex128List->ByteList */ func MapByteListToComplex128ListOption(m Complex128ListOption, f func(Complex128List) ByteList) ByteListOption {  if m.IsDefined() { return ByteListOpt(f(*m.value)) } else { return NoneByteListOption }  }
/* Complex128ListOption: Complex128List->RuneList */ func MapRuneListToComplex128ListOption(m Complex128ListOption, f func(Complex128List) RuneList) RuneListOption {  if m.IsDefined() { return RuneListOpt(f(*m.value)) } else { return NoneRuneListOption }  }
/* Complex128ListOption: Complex128List->Float32List */ func MapFloat32ListToComplex128ListOption(m Complex128ListOption, f func(Complex128List) Float32List) Float32ListOption {  if m.IsDefined() { return Float32ListOpt(f(*m.value)) } else { return NoneFloat32ListOption }  }
/* Complex128ListOption: Complex128List->Float64List */ func MapFloat64ListToComplex128ListOption(m Complex128ListOption, f func(Complex128List) Float64List) Float64ListOption {  if m.IsDefined() { return Float64ListOpt(f(*m.value)) } else { return NoneFloat64ListOption }  }
/* Complex128ListOption: Complex128List->Complex64List */ func MapComplex64ListToComplex128ListOption(m Complex128ListOption, f func(Complex128List) Complex64List) Complex64ListOption {  if m.IsDefined() { return Complex64ListOpt(f(*m.value)) } else { return NoneComplex64ListOption }  }
/* Complex128ListOption: Complex128List->Complex128List */ func MapComplex128ListToComplex128ListOption(m Complex128ListOption, f func(Complex128List) Complex128List) Complex128ListOption {  if m.IsDefined() { return Complex128ListOpt(f(*m.value)) } else { return NoneComplex128ListOption }  }
/* Complex128ListOption: Complex128List->AnyList */ func MapAnyListToComplex128ListOption(m Complex128ListOption, f func(Complex128List) AnyList) AnyListOption {  if m.IsDefined() { return AnyListOpt(f(*m.value)) } else { return NoneAnyListOption }  }
/* AnyListOption: AnyList->bool */ func MapBoolToAnyListOption(m AnyListOption, f func(AnyList) bool) BoolOption {  if m.IsDefined() { return Bool(f(*m.value)) } else { return NoneBoolOption }  }
/* AnyListOption: AnyList->string */ func MapStringToAnyListOption(m AnyListOption, f func(AnyList) string) StringOption {  if m.IsDefined() { return String(f(*m.value)) } else { return NoneStringOption }  }
/* AnyListOption: AnyList->int */ func MapIntToAnyListOption(m AnyListOption, f func(AnyList) int) IntOption {  if m.IsDefined() { return Int(f(*m.value)) } else { return NoneIntOption }  }
/* AnyListOption: AnyList->int8 */ func MapInt8ToAnyListOption(m AnyListOption, f func(AnyList) int8) Int8Option {  if m.IsDefined() { return Int8(f(*m.value)) } else { return NoneInt8Option }  }
/* AnyListOption: AnyList->int16 */ func MapInt16ToAnyListOption(m AnyListOption, f func(AnyList) int16) Int16Option {  if m.IsDefined() { return Int16(f(*m.value)) } else { return NoneInt16Option }  }
/* AnyListOption: AnyList->int32 */ func MapInt32ToAnyListOption(m AnyListOption, f func(AnyList) int32) Int32Option {  if m.IsDefined() { return Int32(f(*m.value)) } else { return NoneInt32Option }  }
/* AnyListOption: AnyList->int64 */ func MapInt64ToAnyListOption(m AnyListOption, f func(AnyList) int64) Int64Option {  if m.IsDefined() { return Int64(f(*m.value)) } else { return NoneInt64Option }  }
/* AnyListOption: AnyList->uint */ func MapUintToAnyListOption(m AnyListOption, f func(AnyList) uint) UintOption {  if m.IsDefined() { return Uint(f(*m.value)) } else { return NoneUintOption }  }
/* AnyListOption: AnyList->uint8 */ func MapUint8ToAnyListOption(m AnyListOption, f func(AnyList) uint8) Uint8Option {  if m.IsDefined() { return Uint8(f(*m.value)) } else { return NoneUint8Option }  }
/* AnyListOption: AnyList->uint16 */ func MapUint16ToAnyListOption(m AnyListOption, f func(AnyList) uint16) Uint16Option {  if m.IsDefined() { return Uint16(f(*m.value)) } else { return NoneUint16Option }  }
/* AnyListOption: AnyList->uint32 */ func MapUint32ToAnyListOption(m AnyListOption, f func(AnyList) uint32) Uint32Option {  if m.IsDefined() { return Uint32(f(*m.value)) } else { return NoneUint32Option }  }
/* AnyListOption: AnyList->uint64 */ func MapUint64ToAnyListOption(m AnyListOption, f func(AnyList) uint64) Uint64Option {  if m.IsDefined() { return Uint64(f(*m.value)) } else { return NoneUint64Option }  }
/* AnyListOption: AnyList->uintptr */ func MapUintptrToAnyListOption(m AnyListOption, f func(AnyList) uintptr) UintptrOption {  if m.IsDefined() { return Uintptr(f(*m.value)) } else { return NoneUintptrOption }  }
/* AnyListOption: AnyList->byte */ func MapByteToAnyListOption(m AnyListOption, f func(AnyList) byte) ByteOption {  if m.IsDefined() { return Byte(f(*m.value)) } else { return NoneByteOption }  }
/* AnyListOption: AnyList->rune */ func MapRuneToAnyListOption(m AnyListOption, f func(AnyList) rune) RuneOption {  if m.IsDefined() { return Rune(f(*m.value)) } else { return NoneRuneOption }  }
/* AnyListOption: AnyList->float32 */ func MapFloat32ToAnyListOption(m AnyListOption, f func(AnyList) float32) Float32Option {  if m.IsDefined() { return Float32(f(*m.value)) } else { return NoneFloat32Option }  }
/* AnyListOption: AnyList->float64 */ func MapFloat64ToAnyListOption(m AnyListOption, f func(AnyList) float64) Float64Option {  if m.IsDefined() { return Float64(f(*m.value)) } else { return NoneFloat64Option }  }
/* AnyListOption: AnyList->complex64 */ func MapComplex64ToAnyListOption(m AnyListOption, f func(AnyList) complex64) Complex64Option {  if m.IsDefined() { return Complex64(f(*m.value)) } else { return NoneComplex64Option }  }
/* AnyListOption: AnyList->complex128 */ func MapComplex128ToAnyListOption(m AnyListOption, f func(AnyList) complex128) Complex128Option {  if m.IsDefined() { return Complex128(f(*m.value)) } else { return NoneComplex128Option }  }
/* AnyListOption: AnyList->Any */ func MapAnyToAnyListOption(m AnyListOption, f func(AnyList) Any) AnyOption {  if m.IsDefined() { return AnyOpt(f(*m.value)) } else { return NoneAnyOption }  }
/* AnyListOption: AnyList->BoolOption */ func MapBoolOptionToAnyListOption(m AnyListOption, f func(AnyList) BoolOption) BoolOptionOption {  if m.IsDefined() { return BoolBool(f(*m.value)) } else { return NoneBoolOptionOption }  }
/* AnyListOption: AnyList->StringOption */ func MapStringOptionToAnyListOption(m AnyListOption, f func(AnyList) StringOption) StringOptionOption {  if m.IsDefined() { return StringString(f(*m.value)) } else { return NoneStringOptionOption }  }
/* AnyListOption: AnyList->IntOption */ func MapIntOptionToAnyListOption(m AnyListOption, f func(AnyList) IntOption) IntOptionOption {  if m.IsDefined() { return IntInt(f(*m.value)) } else { return NoneIntOptionOption }  }
/* AnyListOption: AnyList->Int8Option */ func MapInt8OptionToAnyListOption(m AnyListOption, f func(AnyList) Int8Option) Int8OptionOption {  if m.IsDefined() { return Int8Int8(f(*m.value)) } else { return NoneInt8OptionOption }  }
/* AnyListOption: AnyList->Int16Option */ func MapInt16OptionToAnyListOption(m AnyListOption, f func(AnyList) Int16Option) Int16OptionOption {  if m.IsDefined() { return Int16Int16(f(*m.value)) } else { return NoneInt16OptionOption }  }
/* AnyListOption: AnyList->Int32Option */ func MapInt32OptionToAnyListOption(m AnyListOption, f func(AnyList) Int32Option) Int32OptionOption {  if m.IsDefined() { return Int32Int32(f(*m.value)) } else { return NoneInt32OptionOption }  }
/* AnyListOption: AnyList->Int64Option */ func MapInt64OptionToAnyListOption(m AnyListOption, f func(AnyList) Int64Option) Int64OptionOption {  if m.IsDefined() { return Int64Int64(f(*m.value)) } else { return NoneInt64OptionOption }  }
/* AnyListOption: AnyList->UintOption */ func MapUintOptionToAnyListOption(m AnyListOption, f func(AnyList) UintOption) UintOptionOption {  if m.IsDefined() { return UintUint(f(*m.value)) } else { return NoneUintOptionOption }  }
/* AnyListOption: AnyList->Uint8Option */ func MapUint8OptionToAnyListOption(m AnyListOption, f func(AnyList) Uint8Option) Uint8OptionOption {  if m.IsDefined() { return Uint8Uint8(f(*m.value)) } else { return NoneUint8OptionOption }  }
/* AnyListOption: AnyList->Uint16Option */ func MapUint16OptionToAnyListOption(m AnyListOption, f func(AnyList) Uint16Option) Uint16OptionOption {  if m.IsDefined() { return Uint16Uint16(f(*m.value)) } else { return NoneUint16OptionOption }  }
/* AnyListOption: AnyList->Uint32Option */ func MapUint32OptionToAnyListOption(m AnyListOption, f func(AnyList) Uint32Option) Uint32OptionOption {  if m.IsDefined() { return Uint32Uint32(f(*m.value)) } else { return NoneUint32OptionOption }  }
/* AnyListOption: AnyList->Uint64Option */ func MapUint64OptionToAnyListOption(m AnyListOption, f func(AnyList) Uint64Option) Uint64OptionOption {  if m.IsDefined() { return Uint64Uint64(f(*m.value)) } else { return NoneUint64OptionOption }  }
/* AnyListOption: AnyList->UintptrOption */ func MapUintptrOptionToAnyListOption(m AnyListOption, f func(AnyList) UintptrOption) UintptrOptionOption {  if m.IsDefined() { return UintptrUintptr(f(*m.value)) } else { return NoneUintptrOptionOption }  }
/* AnyListOption: AnyList->ByteOption */ func MapByteOptionToAnyListOption(m AnyListOption, f func(AnyList) ByteOption) ByteOptionOption {  if m.IsDefined() { return ByteByte(f(*m.value)) } else { return NoneByteOptionOption }  }
/* AnyListOption: AnyList->RuneOption */ func MapRuneOptionToAnyListOption(m AnyListOption, f func(AnyList) RuneOption) RuneOptionOption {  if m.IsDefined() { return RuneRune(f(*m.value)) } else { return NoneRuneOptionOption }  }
/* AnyListOption: AnyList->Float32Option */ func MapFloat32OptionToAnyListOption(m AnyListOption, f func(AnyList) Float32Option) Float32OptionOption {  if m.IsDefined() { return Float32Float32(f(*m.value)) } else { return NoneFloat32OptionOption }  }
/* AnyListOption: AnyList->Float64Option */ func MapFloat64OptionToAnyListOption(m AnyListOption, f func(AnyList) Float64Option) Float64OptionOption {  if m.IsDefined() { return Float64Float64(f(*m.value)) } else { return NoneFloat64OptionOption }  }
/* AnyListOption: AnyList->Complex64Option */ func MapComplex64OptionToAnyListOption(m AnyListOption, f func(AnyList) Complex64Option) Complex64OptionOption {  if m.IsDefined() { return Complex64Complex64(f(*m.value)) } else { return NoneComplex64OptionOption }  }
/* AnyListOption: AnyList->Complex128Option */ func MapComplex128OptionToAnyListOption(m AnyListOption, f func(AnyList) Complex128Option) Complex128OptionOption {  if m.IsDefined() { return Complex128Complex128(f(*m.value)) } else { return NoneComplex128OptionOption }  }
/* AnyListOption: AnyList->AnyOption */ func MapAnyOptionToAnyListOption(m AnyListOption, f func(AnyList) AnyOption) AnyOptionOption {  if m.IsDefined() { return AnyOptAny(f(*m.value)) } else { return NoneAnyOptionOption }  }
/* AnyListOption: AnyList->[]bool */ func MapBoolArrToAnyListOption(m AnyListOption, f func(AnyList) []bool) BoolArrOption {  if m.IsDefined() { return BoolArrOpt(f(*m.value)) } else { return NoneBoolArrOption }  }
/* AnyListOption: AnyList->[]string */ func MapStringArrToAnyListOption(m AnyListOption, f func(AnyList) []string) StringArrOption {  if m.IsDefined() { return StringArrOpt(f(*m.value)) } else { return NoneStringArrOption }  }
/* AnyListOption: AnyList->[]int */ func MapIntArrToAnyListOption(m AnyListOption, f func(AnyList) []int) IntArrOption {  if m.IsDefined() { return IntArrOpt(f(*m.value)) } else { return NoneIntArrOption }  }
/* AnyListOption: AnyList->[]int8 */ func MapInt8ArrToAnyListOption(m AnyListOption, f func(AnyList) []int8) Int8ArrOption {  if m.IsDefined() { return Int8ArrOpt(f(*m.value)) } else { return NoneInt8ArrOption }  }
/* AnyListOption: AnyList->[]int16 */ func MapInt16ArrToAnyListOption(m AnyListOption, f func(AnyList) []int16) Int16ArrOption {  if m.IsDefined() { return Int16ArrOpt(f(*m.value)) } else { return NoneInt16ArrOption }  }
/* AnyListOption: AnyList->[]int32 */ func MapInt32ArrToAnyListOption(m AnyListOption, f func(AnyList) []int32) Int32ArrOption {  if m.IsDefined() { return Int32ArrOpt(f(*m.value)) } else { return NoneInt32ArrOption }  }
/* AnyListOption: AnyList->[]int64 */ func MapInt64ArrToAnyListOption(m AnyListOption, f func(AnyList) []int64) Int64ArrOption {  if m.IsDefined() { return Int64ArrOpt(f(*m.value)) } else { return NoneInt64ArrOption }  }
/* AnyListOption: AnyList->[]uint */ func MapUintArrToAnyListOption(m AnyListOption, f func(AnyList) []uint) UintArrOption {  if m.IsDefined() { return UintArrOpt(f(*m.value)) } else { return NoneUintArrOption }  }
/* AnyListOption: AnyList->[]uint8 */ func MapUint8ArrToAnyListOption(m AnyListOption, f func(AnyList) []uint8) Uint8ArrOption {  if m.IsDefined() { return Uint8ArrOpt(f(*m.value)) } else { return NoneUint8ArrOption }  }
/* AnyListOption: AnyList->[]uint16 */ func MapUint16ArrToAnyListOption(m AnyListOption, f func(AnyList) []uint16) Uint16ArrOption {  if m.IsDefined() { return Uint16ArrOpt(f(*m.value)) } else { return NoneUint16ArrOption }  }
/* AnyListOption: AnyList->[]uint32 */ func MapUint32ArrToAnyListOption(m AnyListOption, f func(AnyList) []uint32) Uint32ArrOption {  if m.IsDefined() { return Uint32ArrOpt(f(*m.value)) } else { return NoneUint32ArrOption }  }
/* AnyListOption: AnyList->[]uint64 */ func MapUint64ArrToAnyListOption(m AnyListOption, f func(AnyList) []uint64) Uint64ArrOption {  if m.IsDefined() { return Uint64ArrOpt(f(*m.value)) } else { return NoneUint64ArrOption }  }
/* AnyListOption: AnyList->[]uintptr */ func MapUintptrArrToAnyListOption(m AnyListOption, f func(AnyList) []uintptr) UintptrArrOption {  if m.IsDefined() { return UintptrArrOpt(f(*m.value)) } else { return NoneUintptrArrOption }  }
/* AnyListOption: AnyList->[]byte */ func MapByteArrToAnyListOption(m AnyListOption, f func(AnyList) []byte) ByteArrOption {  if m.IsDefined() { return ByteArrOpt(f(*m.value)) } else { return NoneByteArrOption }  }
/* AnyListOption: AnyList->[]rune */ func MapRuneArrToAnyListOption(m AnyListOption, f func(AnyList) []rune) RuneArrOption {  if m.IsDefined() { return RuneArrOpt(f(*m.value)) } else { return NoneRuneArrOption }  }
/* AnyListOption: AnyList->[]float32 */ func MapFloat32ArrToAnyListOption(m AnyListOption, f func(AnyList) []float32) Float32ArrOption {  if m.IsDefined() { return Float32ArrOpt(f(*m.value)) } else { return NoneFloat32ArrOption }  }
/* AnyListOption: AnyList->[]float64 */ func MapFloat64ArrToAnyListOption(m AnyListOption, f func(AnyList) []float64) Float64ArrOption {  if m.IsDefined() { return Float64ArrOpt(f(*m.value)) } else { return NoneFloat64ArrOption }  }
/* AnyListOption: AnyList->[]complex64 */ func MapComplex64ArrToAnyListOption(m AnyListOption, f func(AnyList) []complex64) Complex64ArrOption {  if m.IsDefined() { return Complex64ArrOpt(f(*m.value)) } else { return NoneComplex64ArrOption }  }
/* AnyListOption: AnyList->[]complex128 */ func MapComplex128ArrToAnyListOption(m AnyListOption, f func(AnyList) []complex128) Complex128ArrOption {  if m.IsDefined() { return Complex128ArrOpt(f(*m.value)) } else { return NoneComplex128ArrOption }  }
/* AnyListOption: AnyList->[]Any */ func MapAnyArrToAnyListOption(m AnyListOption, f func(AnyList) []Any) AnyArrOption {  if m.IsDefined() { return AnyArrOpt(f(*m.value)) } else { return NoneAnyArrOption }  }
/* AnyListOption: AnyList->BoolList */ func MapBoolListToAnyListOption(m AnyListOption, f func(AnyList) BoolList) BoolListOption {  if m.IsDefined() { return BoolListOpt(f(*m.value)) } else { return NoneBoolListOption }  }
/* AnyListOption: AnyList->StringList */ func MapStringListToAnyListOption(m AnyListOption, f func(AnyList) StringList) StringListOption {  if m.IsDefined() { return StringListOpt(f(*m.value)) } else { return NoneStringListOption }  }
/* AnyListOption: AnyList->IntList */ func MapIntListToAnyListOption(m AnyListOption, f func(AnyList) IntList) IntListOption {  if m.IsDefined() { return IntListOpt(f(*m.value)) } else { return NoneIntListOption }  }
/* AnyListOption: AnyList->Int8List */ func MapInt8ListToAnyListOption(m AnyListOption, f func(AnyList) Int8List) Int8ListOption {  if m.IsDefined() { return Int8ListOpt(f(*m.value)) } else { return NoneInt8ListOption }  }
/* AnyListOption: AnyList->Int16List */ func MapInt16ListToAnyListOption(m AnyListOption, f func(AnyList) Int16List) Int16ListOption {  if m.IsDefined() { return Int16ListOpt(f(*m.value)) } else { return NoneInt16ListOption }  }
/* AnyListOption: AnyList->Int32List */ func MapInt32ListToAnyListOption(m AnyListOption, f func(AnyList) Int32List) Int32ListOption {  if m.IsDefined() { return Int32ListOpt(f(*m.value)) } else { return NoneInt32ListOption }  }
/* AnyListOption: AnyList->Int64List */ func MapInt64ListToAnyListOption(m AnyListOption, f func(AnyList) Int64List) Int64ListOption {  if m.IsDefined() { return Int64ListOpt(f(*m.value)) } else { return NoneInt64ListOption }  }
/* AnyListOption: AnyList->UintList */ func MapUintListToAnyListOption(m AnyListOption, f func(AnyList) UintList) UintListOption {  if m.IsDefined() { return UintListOpt(f(*m.value)) } else { return NoneUintListOption }  }
/* AnyListOption: AnyList->Uint8List */ func MapUint8ListToAnyListOption(m AnyListOption, f func(AnyList) Uint8List) Uint8ListOption {  if m.IsDefined() { return Uint8ListOpt(f(*m.value)) } else { return NoneUint8ListOption }  }
/* AnyListOption: AnyList->Uint16List */ func MapUint16ListToAnyListOption(m AnyListOption, f func(AnyList) Uint16List) Uint16ListOption {  if m.IsDefined() { return Uint16ListOpt(f(*m.value)) } else { return NoneUint16ListOption }  }
/* AnyListOption: AnyList->Uint32List */ func MapUint32ListToAnyListOption(m AnyListOption, f func(AnyList) Uint32List) Uint32ListOption {  if m.IsDefined() { return Uint32ListOpt(f(*m.value)) } else { return NoneUint32ListOption }  }
/* AnyListOption: AnyList->Uint64List */ func MapUint64ListToAnyListOption(m AnyListOption, f func(AnyList) Uint64List) Uint64ListOption {  if m.IsDefined() { return Uint64ListOpt(f(*m.value)) } else { return NoneUint64ListOption }  }
/* AnyListOption: AnyList->UintptrList */ func MapUintptrListToAnyListOption(m AnyListOption, f func(AnyList) UintptrList) UintptrListOption {  if m.IsDefined() { return UintptrListOpt(f(*m.value)) } else { return NoneUintptrListOption }  }
/* AnyListOption: AnyList->ByteList */ func MapByteListToAnyListOption(m AnyListOption, f func(AnyList) ByteList) ByteListOption {  if m.IsDefined() { return ByteListOpt(f(*m.value)) } else { return NoneByteListOption }  }
/* AnyListOption: AnyList->RuneList */ func MapRuneListToAnyListOption(m AnyListOption, f func(AnyList) RuneList) RuneListOption {  if m.IsDefined() { return RuneListOpt(f(*m.value)) } else { return NoneRuneListOption }  }
/* AnyListOption: AnyList->Float32List */ func MapFloat32ListToAnyListOption(m AnyListOption, f func(AnyList) Float32List) Float32ListOption {  if m.IsDefined() { return Float32ListOpt(f(*m.value)) } else { return NoneFloat32ListOption }  }
/* AnyListOption: AnyList->Float64List */ func MapFloat64ListToAnyListOption(m AnyListOption, f func(AnyList) Float64List) Float64ListOption {  if m.IsDefined() { return Float64ListOpt(f(*m.value)) } else { return NoneFloat64ListOption }  }
/* AnyListOption: AnyList->Complex64List */ func MapComplex64ListToAnyListOption(m AnyListOption, f func(AnyList) Complex64List) Complex64ListOption {  if m.IsDefined() { return Complex64ListOpt(f(*m.value)) } else { return NoneComplex64ListOption }  }
/* AnyListOption: AnyList->Complex128List */ func MapComplex128ListToAnyListOption(m AnyListOption, f func(AnyList) Complex128List) Complex128ListOption {  if m.IsDefined() { return Complex128ListOpt(f(*m.value)) } else { return NoneComplex128ListOption }  }
/* AnyListOption: AnyList->AnyList */ func MapAnyListToAnyListOption(m AnyListOption, f func(AnyList) AnyList) AnyListOption {  if m.IsDefined() { return AnyListOpt(f(*m.value)) } else { return NoneAnyListOption }  }
/* BoolOptionOption: BoolOption->bool */ func MapBoolToBoolOptionOption(m BoolOptionOption, f func(BoolOption) bool) BoolOption {  if m.IsDefined() { return Bool(f(*m.value)) } else { return NoneBoolOption }  }
/* BoolOptionOption: BoolOption->string */ func MapStringToBoolOptionOption(m BoolOptionOption, f func(BoolOption) string) StringOption {  if m.IsDefined() { return String(f(*m.value)) } else { return NoneStringOption }  }
/* BoolOptionOption: BoolOption->int */ func MapIntToBoolOptionOption(m BoolOptionOption, f func(BoolOption) int) IntOption {  if m.IsDefined() { return Int(f(*m.value)) } else { return NoneIntOption }  }
/* BoolOptionOption: BoolOption->int8 */ func MapInt8ToBoolOptionOption(m BoolOptionOption, f func(BoolOption) int8) Int8Option {  if m.IsDefined() { return Int8(f(*m.value)) } else { return NoneInt8Option }  }
/* BoolOptionOption: BoolOption->int16 */ func MapInt16ToBoolOptionOption(m BoolOptionOption, f func(BoolOption) int16) Int16Option {  if m.IsDefined() { return Int16(f(*m.value)) } else { return NoneInt16Option }  }
/* BoolOptionOption: BoolOption->int32 */ func MapInt32ToBoolOptionOption(m BoolOptionOption, f func(BoolOption) int32) Int32Option {  if m.IsDefined() { return Int32(f(*m.value)) } else { return NoneInt32Option }  }
/* BoolOptionOption: BoolOption->int64 */ func MapInt64ToBoolOptionOption(m BoolOptionOption, f func(BoolOption) int64) Int64Option {  if m.IsDefined() { return Int64(f(*m.value)) } else { return NoneInt64Option }  }
/* BoolOptionOption: BoolOption->uint */ func MapUintToBoolOptionOption(m BoolOptionOption, f func(BoolOption) uint) UintOption {  if m.IsDefined() { return Uint(f(*m.value)) } else { return NoneUintOption }  }
/* BoolOptionOption: BoolOption->uint8 */ func MapUint8ToBoolOptionOption(m BoolOptionOption, f func(BoolOption) uint8) Uint8Option {  if m.IsDefined() { return Uint8(f(*m.value)) } else { return NoneUint8Option }  }
/* BoolOptionOption: BoolOption->uint16 */ func MapUint16ToBoolOptionOption(m BoolOptionOption, f func(BoolOption) uint16) Uint16Option {  if m.IsDefined() { return Uint16(f(*m.value)) } else { return NoneUint16Option }  }
/* BoolOptionOption: BoolOption->uint32 */ func MapUint32ToBoolOptionOption(m BoolOptionOption, f func(BoolOption) uint32) Uint32Option {  if m.IsDefined() { return Uint32(f(*m.value)) } else { return NoneUint32Option }  }
/* BoolOptionOption: BoolOption->uint64 */ func MapUint64ToBoolOptionOption(m BoolOptionOption, f func(BoolOption) uint64) Uint64Option {  if m.IsDefined() { return Uint64(f(*m.value)) } else { return NoneUint64Option }  }
/* BoolOptionOption: BoolOption->uintptr */ func MapUintptrToBoolOptionOption(m BoolOptionOption, f func(BoolOption) uintptr) UintptrOption {  if m.IsDefined() { return Uintptr(f(*m.value)) } else { return NoneUintptrOption }  }
/* BoolOptionOption: BoolOption->byte */ func MapByteToBoolOptionOption(m BoolOptionOption, f func(BoolOption) byte) ByteOption {  if m.IsDefined() { return Byte(f(*m.value)) } else { return NoneByteOption }  }
/* BoolOptionOption: BoolOption->rune */ func MapRuneToBoolOptionOption(m BoolOptionOption, f func(BoolOption) rune) RuneOption {  if m.IsDefined() { return Rune(f(*m.value)) } else { return NoneRuneOption }  }
/* BoolOptionOption: BoolOption->float32 */ func MapFloat32ToBoolOptionOption(m BoolOptionOption, f func(BoolOption) float32) Float32Option {  if m.IsDefined() { return Float32(f(*m.value)) } else { return NoneFloat32Option }  }
/* BoolOptionOption: BoolOption->float64 */ func MapFloat64ToBoolOptionOption(m BoolOptionOption, f func(BoolOption) float64) Float64Option {  if m.IsDefined() { return Float64(f(*m.value)) } else { return NoneFloat64Option }  }
/* BoolOptionOption: BoolOption->complex64 */ func MapComplex64ToBoolOptionOption(m BoolOptionOption, f func(BoolOption) complex64) Complex64Option {  if m.IsDefined() { return Complex64(f(*m.value)) } else { return NoneComplex64Option }  }
/* BoolOptionOption: BoolOption->complex128 */ func MapComplex128ToBoolOptionOption(m BoolOptionOption, f func(BoolOption) complex128) Complex128Option {  if m.IsDefined() { return Complex128(f(*m.value)) } else { return NoneComplex128Option }  }
/* BoolOptionOption: BoolOption->Any */ func MapAnyToBoolOptionOption(m BoolOptionOption, f func(BoolOption) Any) AnyOption {  if m.IsDefined() { return AnyOpt(f(*m.value)) } else { return NoneAnyOption }  }
/* BoolOptionOption: BoolOption->BoolOption */ func MapBoolOptionToBoolOptionOption(m BoolOptionOption, f func(BoolOption) BoolOption) BoolOptionOption {  if m.IsDefined() { return BoolBool(f(*m.value)) } else { return NoneBoolOptionOption }  }
/* BoolOptionOption: BoolOption->StringOption */ func MapStringOptionToBoolOptionOption(m BoolOptionOption, f func(BoolOption) StringOption) StringOptionOption {  if m.IsDefined() { return StringString(f(*m.value)) } else { return NoneStringOptionOption }  }
/* BoolOptionOption: BoolOption->IntOption */ func MapIntOptionToBoolOptionOption(m BoolOptionOption, f func(BoolOption) IntOption) IntOptionOption {  if m.IsDefined() { return IntInt(f(*m.value)) } else { return NoneIntOptionOption }  }
/* BoolOptionOption: BoolOption->Int8Option */ func MapInt8OptionToBoolOptionOption(m BoolOptionOption, f func(BoolOption) Int8Option) Int8OptionOption {  if m.IsDefined() { return Int8Int8(f(*m.value)) } else { return NoneInt8OptionOption }  }
/* BoolOptionOption: BoolOption->Int16Option */ func MapInt16OptionToBoolOptionOption(m BoolOptionOption, f func(BoolOption) Int16Option) Int16OptionOption {  if m.IsDefined() { return Int16Int16(f(*m.value)) } else { return NoneInt16OptionOption }  }
/* BoolOptionOption: BoolOption->Int32Option */ func MapInt32OptionToBoolOptionOption(m BoolOptionOption, f func(BoolOption) Int32Option) Int32OptionOption {  if m.IsDefined() { return Int32Int32(f(*m.value)) } else { return NoneInt32OptionOption }  }
/* BoolOptionOption: BoolOption->Int64Option */ func MapInt64OptionToBoolOptionOption(m BoolOptionOption, f func(BoolOption) Int64Option) Int64OptionOption {  if m.IsDefined() { return Int64Int64(f(*m.value)) } else { return NoneInt64OptionOption }  }
/* BoolOptionOption: BoolOption->UintOption */ func MapUintOptionToBoolOptionOption(m BoolOptionOption, f func(BoolOption) UintOption) UintOptionOption {  if m.IsDefined() { return UintUint(f(*m.value)) } else { return NoneUintOptionOption }  }
/* BoolOptionOption: BoolOption->Uint8Option */ func MapUint8OptionToBoolOptionOption(m BoolOptionOption, f func(BoolOption) Uint8Option) Uint8OptionOption {  if m.IsDefined() { return Uint8Uint8(f(*m.value)) } else { return NoneUint8OptionOption }  }
/* BoolOptionOption: BoolOption->Uint16Option */ func MapUint16OptionToBoolOptionOption(m BoolOptionOption, f func(BoolOption) Uint16Option) Uint16OptionOption {  if m.IsDefined() { return Uint16Uint16(f(*m.value)) } else { return NoneUint16OptionOption }  }
/* BoolOptionOption: BoolOption->Uint32Option */ func MapUint32OptionToBoolOptionOption(m BoolOptionOption, f func(BoolOption) Uint32Option) Uint32OptionOption {  if m.IsDefined() { return Uint32Uint32(f(*m.value)) } else { return NoneUint32OptionOption }  }
/* BoolOptionOption: BoolOption->Uint64Option */ func MapUint64OptionToBoolOptionOption(m BoolOptionOption, f func(BoolOption) Uint64Option) Uint64OptionOption {  if m.IsDefined() { return Uint64Uint64(f(*m.value)) } else { return NoneUint64OptionOption }  }
/* BoolOptionOption: BoolOption->UintptrOption */ func MapUintptrOptionToBoolOptionOption(m BoolOptionOption, f func(BoolOption) UintptrOption) UintptrOptionOption {  if m.IsDefined() { return UintptrUintptr(f(*m.value)) } else { return NoneUintptrOptionOption }  }
/* BoolOptionOption: BoolOption->ByteOption */ func MapByteOptionToBoolOptionOption(m BoolOptionOption, f func(BoolOption) ByteOption) ByteOptionOption {  if m.IsDefined() { return ByteByte(f(*m.value)) } else { return NoneByteOptionOption }  }
/* BoolOptionOption: BoolOption->RuneOption */ func MapRuneOptionToBoolOptionOption(m BoolOptionOption, f func(BoolOption) RuneOption) RuneOptionOption {  if m.IsDefined() { return RuneRune(f(*m.value)) } else { return NoneRuneOptionOption }  }
/* BoolOptionOption: BoolOption->Float32Option */ func MapFloat32OptionToBoolOptionOption(m BoolOptionOption, f func(BoolOption) Float32Option) Float32OptionOption {  if m.IsDefined() { return Float32Float32(f(*m.value)) } else { return NoneFloat32OptionOption }  }
/* BoolOptionOption: BoolOption->Float64Option */ func MapFloat64OptionToBoolOptionOption(m BoolOptionOption, f func(BoolOption) Float64Option) Float64OptionOption {  if m.IsDefined() { return Float64Float64(f(*m.value)) } else { return NoneFloat64OptionOption }  }
/* BoolOptionOption: BoolOption->Complex64Option */ func MapComplex64OptionToBoolOptionOption(m BoolOptionOption, f func(BoolOption) Complex64Option) Complex64OptionOption {  if m.IsDefined() { return Complex64Complex64(f(*m.value)) } else { return NoneComplex64OptionOption }  }
/* BoolOptionOption: BoolOption->Complex128Option */ func MapComplex128OptionToBoolOptionOption(m BoolOptionOption, f func(BoolOption) Complex128Option) Complex128OptionOption {  if m.IsDefined() { return Complex128Complex128(f(*m.value)) } else { return NoneComplex128OptionOption }  }
/* BoolOptionOption: BoolOption->AnyOption */ func MapAnyOptionToBoolOptionOption(m BoolOptionOption, f func(BoolOption) AnyOption) AnyOptionOption {  if m.IsDefined() { return AnyOptAny(f(*m.value)) } else { return NoneAnyOptionOption }  }
/* BoolOptionOption: BoolOption->[]bool */ func MapBoolArrToBoolOptionOption(m BoolOptionOption, f func(BoolOption) []bool) BoolArrOption {  if m.IsDefined() { return BoolArrOpt(f(*m.value)) } else { return NoneBoolArrOption }  }
/* BoolOptionOption: BoolOption->[]string */ func MapStringArrToBoolOptionOption(m BoolOptionOption, f func(BoolOption) []string) StringArrOption {  if m.IsDefined() { return StringArrOpt(f(*m.value)) } else { return NoneStringArrOption }  }
/* BoolOptionOption: BoolOption->[]int */ func MapIntArrToBoolOptionOption(m BoolOptionOption, f func(BoolOption) []int) IntArrOption {  if m.IsDefined() { return IntArrOpt(f(*m.value)) } else { return NoneIntArrOption }  }
/* BoolOptionOption: BoolOption->[]int8 */ func MapInt8ArrToBoolOptionOption(m BoolOptionOption, f func(BoolOption) []int8) Int8ArrOption {  if m.IsDefined() { return Int8ArrOpt(f(*m.value)) } else { return NoneInt8ArrOption }  }
/* BoolOptionOption: BoolOption->[]int16 */ func MapInt16ArrToBoolOptionOption(m BoolOptionOption, f func(BoolOption) []int16) Int16ArrOption {  if m.IsDefined() { return Int16ArrOpt(f(*m.value)) } else { return NoneInt16ArrOption }  }
/* BoolOptionOption: BoolOption->[]int32 */ func MapInt32ArrToBoolOptionOption(m BoolOptionOption, f func(BoolOption) []int32) Int32ArrOption {  if m.IsDefined() { return Int32ArrOpt(f(*m.value)) } else { return NoneInt32ArrOption }  }
/* BoolOptionOption: BoolOption->[]int64 */ func MapInt64ArrToBoolOptionOption(m BoolOptionOption, f func(BoolOption) []int64) Int64ArrOption {  if m.IsDefined() { return Int64ArrOpt(f(*m.value)) } else { return NoneInt64ArrOption }  }
/* BoolOptionOption: BoolOption->[]uint */ func MapUintArrToBoolOptionOption(m BoolOptionOption, f func(BoolOption) []uint) UintArrOption {  if m.IsDefined() { return UintArrOpt(f(*m.value)) } else { return NoneUintArrOption }  }
/* BoolOptionOption: BoolOption->[]uint8 */ func MapUint8ArrToBoolOptionOption(m BoolOptionOption, f func(BoolOption) []uint8) Uint8ArrOption {  if m.IsDefined() { return Uint8ArrOpt(f(*m.value)) } else { return NoneUint8ArrOption }  }
/* BoolOptionOption: BoolOption->[]uint16 */ func MapUint16ArrToBoolOptionOption(m BoolOptionOption, f func(BoolOption) []uint16) Uint16ArrOption {  if m.IsDefined() { return Uint16ArrOpt(f(*m.value)) } else { return NoneUint16ArrOption }  }
/* BoolOptionOption: BoolOption->[]uint32 */ func MapUint32ArrToBoolOptionOption(m BoolOptionOption, f func(BoolOption) []uint32) Uint32ArrOption {  if m.IsDefined() { return Uint32ArrOpt(f(*m.value)) } else { return NoneUint32ArrOption }  }
/* BoolOptionOption: BoolOption->[]uint64 */ func MapUint64ArrToBoolOptionOption(m BoolOptionOption, f func(BoolOption) []uint64) Uint64ArrOption {  if m.IsDefined() { return Uint64ArrOpt(f(*m.value)) } else { return NoneUint64ArrOption }  }
/* BoolOptionOption: BoolOption->[]uintptr */ func MapUintptrArrToBoolOptionOption(m BoolOptionOption, f func(BoolOption) []uintptr) UintptrArrOption {  if m.IsDefined() { return UintptrArrOpt(f(*m.value)) } else { return NoneUintptrArrOption }  }
/* BoolOptionOption: BoolOption->[]byte */ func MapByteArrToBoolOptionOption(m BoolOptionOption, f func(BoolOption) []byte) ByteArrOption {  if m.IsDefined() { return ByteArrOpt(f(*m.value)) } else { return NoneByteArrOption }  }
/* BoolOptionOption: BoolOption->[]rune */ func MapRuneArrToBoolOptionOption(m BoolOptionOption, f func(BoolOption) []rune) RuneArrOption {  if m.IsDefined() { return RuneArrOpt(f(*m.value)) } else { return NoneRuneArrOption }  }
/* BoolOptionOption: BoolOption->[]float32 */ func MapFloat32ArrToBoolOptionOption(m BoolOptionOption, f func(BoolOption) []float32) Float32ArrOption {  if m.IsDefined() { return Float32ArrOpt(f(*m.value)) } else { return NoneFloat32ArrOption }  }
/* BoolOptionOption: BoolOption->[]float64 */ func MapFloat64ArrToBoolOptionOption(m BoolOptionOption, f func(BoolOption) []float64) Float64ArrOption {  if m.IsDefined() { return Float64ArrOpt(f(*m.value)) } else { return NoneFloat64ArrOption }  }
/* BoolOptionOption: BoolOption->[]complex64 */ func MapComplex64ArrToBoolOptionOption(m BoolOptionOption, f func(BoolOption) []complex64) Complex64ArrOption {  if m.IsDefined() { return Complex64ArrOpt(f(*m.value)) } else { return NoneComplex64ArrOption }  }
/* BoolOptionOption: BoolOption->[]complex128 */ func MapComplex128ArrToBoolOptionOption(m BoolOptionOption, f func(BoolOption) []complex128) Complex128ArrOption {  if m.IsDefined() { return Complex128ArrOpt(f(*m.value)) } else { return NoneComplex128ArrOption }  }
/* BoolOptionOption: BoolOption->[]Any */ func MapAnyArrToBoolOptionOption(m BoolOptionOption, f func(BoolOption) []Any) AnyArrOption {  if m.IsDefined() { return AnyArrOpt(f(*m.value)) } else { return NoneAnyArrOption }  }
/* BoolOptionOption: BoolOption->BoolList */ func MapBoolListToBoolOptionOption(m BoolOptionOption, f func(BoolOption) BoolList) BoolListOption {  if m.IsDefined() { return BoolListOpt(f(*m.value)) } else { return NoneBoolListOption }  }
/* BoolOptionOption: BoolOption->StringList */ func MapStringListToBoolOptionOption(m BoolOptionOption, f func(BoolOption) StringList) StringListOption {  if m.IsDefined() { return StringListOpt(f(*m.value)) } else { return NoneStringListOption }  }
/* BoolOptionOption: BoolOption->IntList */ func MapIntListToBoolOptionOption(m BoolOptionOption, f func(BoolOption) IntList) IntListOption {  if m.IsDefined() { return IntListOpt(f(*m.value)) } else { return NoneIntListOption }  }
/* BoolOptionOption: BoolOption->Int8List */ func MapInt8ListToBoolOptionOption(m BoolOptionOption, f func(BoolOption) Int8List) Int8ListOption {  if m.IsDefined() { return Int8ListOpt(f(*m.value)) } else { return NoneInt8ListOption }  }
/* BoolOptionOption: BoolOption->Int16List */ func MapInt16ListToBoolOptionOption(m BoolOptionOption, f func(BoolOption) Int16List) Int16ListOption {  if m.IsDefined() { return Int16ListOpt(f(*m.value)) } else { return NoneInt16ListOption }  }
/* BoolOptionOption: BoolOption->Int32List */ func MapInt32ListToBoolOptionOption(m BoolOptionOption, f func(BoolOption) Int32List) Int32ListOption {  if m.IsDefined() { return Int32ListOpt(f(*m.value)) } else { return NoneInt32ListOption }  }
/* BoolOptionOption: BoolOption->Int64List */ func MapInt64ListToBoolOptionOption(m BoolOptionOption, f func(BoolOption) Int64List) Int64ListOption {  if m.IsDefined() { return Int64ListOpt(f(*m.value)) } else { return NoneInt64ListOption }  }
/* BoolOptionOption: BoolOption->UintList */ func MapUintListToBoolOptionOption(m BoolOptionOption, f func(BoolOption) UintList) UintListOption {  if m.IsDefined() { return UintListOpt(f(*m.value)) } else { return NoneUintListOption }  }
/* BoolOptionOption: BoolOption->Uint8List */ func MapUint8ListToBoolOptionOption(m BoolOptionOption, f func(BoolOption) Uint8List) Uint8ListOption {  if m.IsDefined() { return Uint8ListOpt(f(*m.value)) } else { return NoneUint8ListOption }  }
/* BoolOptionOption: BoolOption->Uint16List */ func MapUint16ListToBoolOptionOption(m BoolOptionOption, f func(BoolOption) Uint16List) Uint16ListOption {  if m.IsDefined() { return Uint16ListOpt(f(*m.value)) } else { return NoneUint16ListOption }  }
/* BoolOptionOption: BoolOption->Uint32List */ func MapUint32ListToBoolOptionOption(m BoolOptionOption, f func(BoolOption) Uint32List) Uint32ListOption {  if m.IsDefined() { return Uint32ListOpt(f(*m.value)) } else { return NoneUint32ListOption }  }
/* BoolOptionOption: BoolOption->Uint64List */ func MapUint64ListToBoolOptionOption(m BoolOptionOption, f func(BoolOption) Uint64List) Uint64ListOption {  if m.IsDefined() { return Uint64ListOpt(f(*m.value)) } else { return NoneUint64ListOption }  }
/* BoolOptionOption: BoolOption->UintptrList */ func MapUintptrListToBoolOptionOption(m BoolOptionOption, f func(BoolOption) UintptrList) UintptrListOption {  if m.IsDefined() { return UintptrListOpt(f(*m.value)) } else { return NoneUintptrListOption }  }
/* BoolOptionOption: BoolOption->ByteList */ func MapByteListToBoolOptionOption(m BoolOptionOption, f func(BoolOption) ByteList) ByteListOption {  if m.IsDefined() { return ByteListOpt(f(*m.value)) } else { return NoneByteListOption }  }
/* BoolOptionOption: BoolOption->RuneList */ func MapRuneListToBoolOptionOption(m BoolOptionOption, f func(BoolOption) RuneList) RuneListOption {  if m.IsDefined() { return RuneListOpt(f(*m.value)) } else { return NoneRuneListOption }  }
/* BoolOptionOption: BoolOption->Float32List */ func MapFloat32ListToBoolOptionOption(m BoolOptionOption, f func(BoolOption) Float32List) Float32ListOption {  if m.IsDefined() { return Float32ListOpt(f(*m.value)) } else { return NoneFloat32ListOption }  }
/* BoolOptionOption: BoolOption->Float64List */ func MapFloat64ListToBoolOptionOption(m BoolOptionOption, f func(BoolOption) Float64List) Float64ListOption {  if m.IsDefined() { return Float64ListOpt(f(*m.value)) } else { return NoneFloat64ListOption }  }
/* BoolOptionOption: BoolOption->Complex64List */ func MapComplex64ListToBoolOptionOption(m BoolOptionOption, f func(BoolOption) Complex64List) Complex64ListOption {  if m.IsDefined() { return Complex64ListOpt(f(*m.value)) } else { return NoneComplex64ListOption }  }
/* BoolOptionOption: BoolOption->Complex128List */ func MapComplex128ListToBoolOptionOption(m BoolOptionOption, f func(BoolOption) Complex128List) Complex128ListOption {  if m.IsDefined() { return Complex128ListOpt(f(*m.value)) } else { return NoneComplex128ListOption }  }
/* BoolOptionOption: BoolOption->AnyList */ func MapAnyListToBoolOptionOption(m BoolOptionOption, f func(BoolOption) AnyList) AnyListOption {  if m.IsDefined() { return AnyListOpt(f(*m.value)) } else { return NoneAnyListOption }  }
/* StringOptionOption: StringOption->bool */ func MapBoolToStringOptionOption(m StringOptionOption, f func(StringOption) bool) BoolOption {  if m.IsDefined() { return Bool(f(*m.value)) } else { return NoneBoolOption }  }
/* StringOptionOption: StringOption->string */ func MapStringToStringOptionOption(m StringOptionOption, f func(StringOption) string) StringOption {  if m.IsDefined() { return String(f(*m.value)) } else { return NoneStringOption }  }
/* StringOptionOption: StringOption->int */ func MapIntToStringOptionOption(m StringOptionOption, f func(StringOption) int) IntOption {  if m.IsDefined() { return Int(f(*m.value)) } else { return NoneIntOption }  }
/* StringOptionOption: StringOption->int8 */ func MapInt8ToStringOptionOption(m StringOptionOption, f func(StringOption) int8) Int8Option {  if m.IsDefined() { return Int8(f(*m.value)) } else { return NoneInt8Option }  }
/* StringOptionOption: StringOption->int16 */ func MapInt16ToStringOptionOption(m StringOptionOption, f func(StringOption) int16) Int16Option {  if m.IsDefined() { return Int16(f(*m.value)) } else { return NoneInt16Option }  }
/* StringOptionOption: StringOption->int32 */ func MapInt32ToStringOptionOption(m StringOptionOption, f func(StringOption) int32) Int32Option {  if m.IsDefined() { return Int32(f(*m.value)) } else { return NoneInt32Option }  }
/* StringOptionOption: StringOption->int64 */ func MapInt64ToStringOptionOption(m StringOptionOption, f func(StringOption) int64) Int64Option {  if m.IsDefined() { return Int64(f(*m.value)) } else { return NoneInt64Option }  }
/* StringOptionOption: StringOption->uint */ func MapUintToStringOptionOption(m StringOptionOption, f func(StringOption) uint) UintOption {  if m.IsDefined() { return Uint(f(*m.value)) } else { return NoneUintOption }  }
/* StringOptionOption: StringOption->uint8 */ func MapUint8ToStringOptionOption(m StringOptionOption, f func(StringOption) uint8) Uint8Option {  if m.IsDefined() { return Uint8(f(*m.value)) } else { return NoneUint8Option }  }
/* StringOptionOption: StringOption->uint16 */ func MapUint16ToStringOptionOption(m StringOptionOption, f func(StringOption) uint16) Uint16Option {  if m.IsDefined() { return Uint16(f(*m.value)) } else { return NoneUint16Option }  }
/* StringOptionOption: StringOption->uint32 */ func MapUint32ToStringOptionOption(m StringOptionOption, f func(StringOption) uint32) Uint32Option {  if m.IsDefined() { return Uint32(f(*m.value)) } else { return NoneUint32Option }  }
/* StringOptionOption: StringOption->uint64 */ func MapUint64ToStringOptionOption(m StringOptionOption, f func(StringOption) uint64) Uint64Option {  if m.IsDefined() { return Uint64(f(*m.value)) } else { return NoneUint64Option }  }
/* StringOptionOption: StringOption->uintptr */ func MapUintptrToStringOptionOption(m StringOptionOption, f func(StringOption) uintptr) UintptrOption {  if m.IsDefined() { return Uintptr(f(*m.value)) } else { return NoneUintptrOption }  }
/* StringOptionOption: StringOption->byte */ func MapByteToStringOptionOption(m StringOptionOption, f func(StringOption) byte) ByteOption {  if m.IsDefined() { return Byte(f(*m.value)) } else { return NoneByteOption }  }
/* StringOptionOption: StringOption->rune */ func MapRuneToStringOptionOption(m StringOptionOption, f func(StringOption) rune) RuneOption {  if m.IsDefined() { return Rune(f(*m.value)) } else { return NoneRuneOption }  }
/* StringOptionOption: StringOption->float32 */ func MapFloat32ToStringOptionOption(m StringOptionOption, f func(StringOption) float32) Float32Option {  if m.IsDefined() { return Float32(f(*m.value)) } else { return NoneFloat32Option }  }
/* StringOptionOption: StringOption->float64 */ func MapFloat64ToStringOptionOption(m StringOptionOption, f func(StringOption) float64) Float64Option {  if m.IsDefined() { return Float64(f(*m.value)) } else { return NoneFloat64Option }  }
/* StringOptionOption: StringOption->complex64 */ func MapComplex64ToStringOptionOption(m StringOptionOption, f func(StringOption) complex64) Complex64Option {  if m.IsDefined() { return Complex64(f(*m.value)) } else { return NoneComplex64Option }  }
/* StringOptionOption: StringOption->complex128 */ func MapComplex128ToStringOptionOption(m StringOptionOption, f func(StringOption) complex128) Complex128Option {  if m.IsDefined() { return Complex128(f(*m.value)) } else { return NoneComplex128Option }  }
/* StringOptionOption: StringOption->Any */ func MapAnyToStringOptionOption(m StringOptionOption, f func(StringOption) Any) AnyOption {  if m.IsDefined() { return AnyOpt(f(*m.value)) } else { return NoneAnyOption }  }
/* StringOptionOption: StringOption->BoolOption */ func MapBoolOptionToStringOptionOption(m StringOptionOption, f func(StringOption) BoolOption) BoolOptionOption {  if m.IsDefined() { return BoolBool(f(*m.value)) } else { return NoneBoolOptionOption }  }
/* StringOptionOption: StringOption->StringOption */ func MapStringOptionToStringOptionOption(m StringOptionOption, f func(StringOption) StringOption) StringOptionOption {  if m.IsDefined() { return StringString(f(*m.value)) } else { return NoneStringOptionOption }  }
/* StringOptionOption: StringOption->IntOption */ func MapIntOptionToStringOptionOption(m StringOptionOption, f func(StringOption) IntOption) IntOptionOption {  if m.IsDefined() { return IntInt(f(*m.value)) } else { return NoneIntOptionOption }  }
/* StringOptionOption: StringOption->Int8Option */ func MapInt8OptionToStringOptionOption(m StringOptionOption, f func(StringOption) Int8Option) Int8OptionOption {  if m.IsDefined() { return Int8Int8(f(*m.value)) } else { return NoneInt8OptionOption }  }
/* StringOptionOption: StringOption->Int16Option */ func MapInt16OptionToStringOptionOption(m StringOptionOption, f func(StringOption) Int16Option) Int16OptionOption {  if m.IsDefined() { return Int16Int16(f(*m.value)) } else { return NoneInt16OptionOption }  }
/* StringOptionOption: StringOption->Int32Option */ func MapInt32OptionToStringOptionOption(m StringOptionOption, f func(StringOption) Int32Option) Int32OptionOption {  if m.IsDefined() { return Int32Int32(f(*m.value)) } else { return NoneInt32OptionOption }  }
/* StringOptionOption: StringOption->Int64Option */ func MapInt64OptionToStringOptionOption(m StringOptionOption, f func(StringOption) Int64Option) Int64OptionOption {  if m.IsDefined() { return Int64Int64(f(*m.value)) } else { return NoneInt64OptionOption }  }
/* StringOptionOption: StringOption->UintOption */ func MapUintOptionToStringOptionOption(m StringOptionOption, f func(StringOption) UintOption) UintOptionOption {  if m.IsDefined() { return UintUint(f(*m.value)) } else { return NoneUintOptionOption }  }
/* StringOptionOption: StringOption->Uint8Option */ func MapUint8OptionToStringOptionOption(m StringOptionOption, f func(StringOption) Uint8Option) Uint8OptionOption {  if m.IsDefined() { return Uint8Uint8(f(*m.value)) } else { return NoneUint8OptionOption }  }
/* StringOptionOption: StringOption->Uint16Option */ func MapUint16OptionToStringOptionOption(m StringOptionOption, f func(StringOption) Uint16Option) Uint16OptionOption {  if m.IsDefined() { return Uint16Uint16(f(*m.value)) } else { return NoneUint16OptionOption }  }
/* StringOptionOption: StringOption->Uint32Option */ func MapUint32OptionToStringOptionOption(m StringOptionOption, f func(StringOption) Uint32Option) Uint32OptionOption {  if m.IsDefined() { return Uint32Uint32(f(*m.value)) } else { return NoneUint32OptionOption }  }
/* StringOptionOption: StringOption->Uint64Option */ func MapUint64OptionToStringOptionOption(m StringOptionOption, f func(StringOption) Uint64Option) Uint64OptionOption {  if m.IsDefined() { return Uint64Uint64(f(*m.value)) } else { return NoneUint64OptionOption }  }
/* StringOptionOption: StringOption->UintptrOption */ func MapUintptrOptionToStringOptionOption(m StringOptionOption, f func(StringOption) UintptrOption) UintptrOptionOption {  if m.IsDefined() { return UintptrUintptr(f(*m.value)) } else { return NoneUintptrOptionOption }  }
/* StringOptionOption: StringOption->ByteOption */ func MapByteOptionToStringOptionOption(m StringOptionOption, f func(StringOption) ByteOption) ByteOptionOption {  if m.IsDefined() { return ByteByte(f(*m.value)) } else { return NoneByteOptionOption }  }
/* StringOptionOption: StringOption->RuneOption */ func MapRuneOptionToStringOptionOption(m StringOptionOption, f func(StringOption) RuneOption) RuneOptionOption {  if m.IsDefined() { return RuneRune(f(*m.value)) } else { return NoneRuneOptionOption }  }
/* StringOptionOption: StringOption->Float32Option */ func MapFloat32OptionToStringOptionOption(m StringOptionOption, f func(StringOption) Float32Option) Float32OptionOption {  if m.IsDefined() { return Float32Float32(f(*m.value)) } else { return NoneFloat32OptionOption }  }
/* StringOptionOption: StringOption->Float64Option */ func MapFloat64OptionToStringOptionOption(m StringOptionOption, f func(StringOption) Float64Option) Float64OptionOption {  if m.IsDefined() { return Float64Float64(f(*m.value)) } else { return NoneFloat64OptionOption }  }
/* StringOptionOption: StringOption->Complex64Option */ func MapComplex64OptionToStringOptionOption(m StringOptionOption, f func(StringOption) Complex64Option) Complex64OptionOption {  if m.IsDefined() { return Complex64Complex64(f(*m.value)) } else { return NoneComplex64OptionOption }  }
/* StringOptionOption: StringOption->Complex128Option */ func MapComplex128OptionToStringOptionOption(m StringOptionOption, f func(StringOption) Complex128Option) Complex128OptionOption {  if m.IsDefined() { return Complex128Complex128(f(*m.value)) } else { return NoneComplex128OptionOption }  }
/* StringOptionOption: StringOption->AnyOption */ func MapAnyOptionToStringOptionOption(m StringOptionOption, f func(StringOption) AnyOption) AnyOptionOption {  if m.IsDefined() { return AnyOptAny(f(*m.value)) } else { return NoneAnyOptionOption }  }
/* StringOptionOption: StringOption->[]bool */ func MapBoolArrToStringOptionOption(m StringOptionOption, f func(StringOption) []bool) BoolArrOption {  if m.IsDefined() { return BoolArrOpt(f(*m.value)) } else { return NoneBoolArrOption }  }
/* StringOptionOption: StringOption->[]string */ func MapStringArrToStringOptionOption(m StringOptionOption, f func(StringOption) []string) StringArrOption {  if m.IsDefined() { return StringArrOpt(f(*m.value)) } else { return NoneStringArrOption }  }
/* StringOptionOption: StringOption->[]int */ func MapIntArrToStringOptionOption(m StringOptionOption, f func(StringOption) []int) IntArrOption {  if m.IsDefined() { return IntArrOpt(f(*m.value)) } else { return NoneIntArrOption }  }
/* StringOptionOption: StringOption->[]int8 */ func MapInt8ArrToStringOptionOption(m StringOptionOption, f func(StringOption) []int8) Int8ArrOption {  if m.IsDefined() { return Int8ArrOpt(f(*m.value)) } else { return NoneInt8ArrOption }  }
/* StringOptionOption: StringOption->[]int16 */ func MapInt16ArrToStringOptionOption(m StringOptionOption, f func(StringOption) []int16) Int16ArrOption {  if m.IsDefined() { return Int16ArrOpt(f(*m.value)) } else { return NoneInt16ArrOption }  }
/* StringOptionOption: StringOption->[]int32 */ func MapInt32ArrToStringOptionOption(m StringOptionOption, f func(StringOption) []int32) Int32ArrOption {  if m.IsDefined() { return Int32ArrOpt(f(*m.value)) } else { return NoneInt32ArrOption }  }
/* StringOptionOption: StringOption->[]int64 */ func MapInt64ArrToStringOptionOption(m StringOptionOption, f func(StringOption) []int64) Int64ArrOption {  if m.IsDefined() { return Int64ArrOpt(f(*m.value)) } else { return NoneInt64ArrOption }  }
/* StringOptionOption: StringOption->[]uint */ func MapUintArrToStringOptionOption(m StringOptionOption, f func(StringOption) []uint) UintArrOption {  if m.IsDefined() { return UintArrOpt(f(*m.value)) } else { return NoneUintArrOption }  }
/* StringOptionOption: StringOption->[]uint8 */ func MapUint8ArrToStringOptionOption(m StringOptionOption, f func(StringOption) []uint8) Uint8ArrOption {  if m.IsDefined() { return Uint8ArrOpt(f(*m.value)) } else { return NoneUint8ArrOption }  }
/* StringOptionOption: StringOption->[]uint16 */ func MapUint16ArrToStringOptionOption(m StringOptionOption, f func(StringOption) []uint16) Uint16ArrOption {  if m.IsDefined() { return Uint16ArrOpt(f(*m.value)) } else { return NoneUint16ArrOption }  }
/* StringOptionOption: StringOption->[]uint32 */ func MapUint32ArrToStringOptionOption(m StringOptionOption, f func(StringOption) []uint32) Uint32ArrOption {  if m.IsDefined() { return Uint32ArrOpt(f(*m.value)) } else { return NoneUint32ArrOption }  }
/* StringOptionOption: StringOption->[]uint64 */ func MapUint64ArrToStringOptionOption(m StringOptionOption, f func(StringOption) []uint64) Uint64ArrOption {  if m.IsDefined() { return Uint64ArrOpt(f(*m.value)) } else { return NoneUint64ArrOption }  }
/* StringOptionOption: StringOption->[]uintptr */ func MapUintptrArrToStringOptionOption(m StringOptionOption, f func(StringOption) []uintptr) UintptrArrOption {  if m.IsDefined() { return UintptrArrOpt(f(*m.value)) } else { return NoneUintptrArrOption }  }
/* StringOptionOption: StringOption->[]byte */ func MapByteArrToStringOptionOption(m StringOptionOption, f func(StringOption) []byte) ByteArrOption {  if m.IsDefined() { return ByteArrOpt(f(*m.value)) } else { return NoneByteArrOption }  }
/* StringOptionOption: StringOption->[]rune */ func MapRuneArrToStringOptionOption(m StringOptionOption, f func(StringOption) []rune) RuneArrOption {  if m.IsDefined() { return RuneArrOpt(f(*m.value)) } else { return NoneRuneArrOption }  }
/* StringOptionOption: StringOption->[]float32 */ func MapFloat32ArrToStringOptionOption(m StringOptionOption, f func(StringOption) []float32) Float32ArrOption {  if m.IsDefined() { return Float32ArrOpt(f(*m.value)) } else { return NoneFloat32ArrOption }  }
/* StringOptionOption: StringOption->[]float64 */ func MapFloat64ArrToStringOptionOption(m StringOptionOption, f func(StringOption) []float64) Float64ArrOption {  if m.IsDefined() { return Float64ArrOpt(f(*m.value)) } else { return NoneFloat64ArrOption }  }
/* StringOptionOption: StringOption->[]complex64 */ func MapComplex64ArrToStringOptionOption(m StringOptionOption, f func(StringOption) []complex64) Complex64ArrOption {  if m.IsDefined() { return Complex64ArrOpt(f(*m.value)) } else { return NoneComplex64ArrOption }  }
/* StringOptionOption: StringOption->[]complex128 */ func MapComplex128ArrToStringOptionOption(m StringOptionOption, f func(StringOption) []complex128) Complex128ArrOption {  if m.IsDefined() { return Complex128ArrOpt(f(*m.value)) } else { return NoneComplex128ArrOption }  }
/* StringOptionOption: StringOption->[]Any */ func MapAnyArrToStringOptionOption(m StringOptionOption, f func(StringOption) []Any) AnyArrOption {  if m.IsDefined() { return AnyArrOpt(f(*m.value)) } else { return NoneAnyArrOption }  }
/* StringOptionOption: StringOption->BoolList */ func MapBoolListToStringOptionOption(m StringOptionOption, f func(StringOption) BoolList) BoolListOption {  if m.IsDefined() { return BoolListOpt(f(*m.value)) } else { return NoneBoolListOption }  }
/* StringOptionOption: StringOption->StringList */ func MapStringListToStringOptionOption(m StringOptionOption, f func(StringOption) StringList) StringListOption {  if m.IsDefined() { return StringListOpt(f(*m.value)) } else { return NoneStringListOption }  }
/* StringOptionOption: StringOption->IntList */ func MapIntListToStringOptionOption(m StringOptionOption, f func(StringOption) IntList) IntListOption {  if m.IsDefined() { return IntListOpt(f(*m.value)) } else { return NoneIntListOption }  }
/* StringOptionOption: StringOption->Int8List */ func MapInt8ListToStringOptionOption(m StringOptionOption, f func(StringOption) Int8List) Int8ListOption {  if m.IsDefined() { return Int8ListOpt(f(*m.value)) } else { return NoneInt8ListOption }  }
/* StringOptionOption: StringOption->Int16List */ func MapInt16ListToStringOptionOption(m StringOptionOption, f func(StringOption) Int16List) Int16ListOption {  if m.IsDefined() { return Int16ListOpt(f(*m.value)) } else { return NoneInt16ListOption }  }
/* StringOptionOption: StringOption->Int32List */ func MapInt32ListToStringOptionOption(m StringOptionOption, f func(StringOption) Int32List) Int32ListOption {  if m.IsDefined() { return Int32ListOpt(f(*m.value)) } else { return NoneInt32ListOption }  }
/* StringOptionOption: StringOption->Int64List */ func MapInt64ListToStringOptionOption(m StringOptionOption, f func(StringOption) Int64List) Int64ListOption {  if m.IsDefined() { return Int64ListOpt(f(*m.value)) } else { return NoneInt64ListOption }  }
/* StringOptionOption: StringOption->UintList */ func MapUintListToStringOptionOption(m StringOptionOption, f func(StringOption) UintList) UintListOption {  if m.IsDefined() { return UintListOpt(f(*m.value)) } else { return NoneUintListOption }  }
/* StringOptionOption: StringOption->Uint8List */ func MapUint8ListToStringOptionOption(m StringOptionOption, f func(StringOption) Uint8List) Uint8ListOption {  if m.IsDefined() { return Uint8ListOpt(f(*m.value)) } else { return NoneUint8ListOption }  }
/* StringOptionOption: StringOption->Uint16List */ func MapUint16ListToStringOptionOption(m StringOptionOption, f func(StringOption) Uint16List) Uint16ListOption {  if m.IsDefined() { return Uint16ListOpt(f(*m.value)) } else { return NoneUint16ListOption }  }
/* StringOptionOption: StringOption->Uint32List */ func MapUint32ListToStringOptionOption(m StringOptionOption, f func(StringOption) Uint32List) Uint32ListOption {  if m.IsDefined() { return Uint32ListOpt(f(*m.value)) } else { return NoneUint32ListOption }  }
/* StringOptionOption: StringOption->Uint64List */ func MapUint64ListToStringOptionOption(m StringOptionOption, f func(StringOption) Uint64List) Uint64ListOption {  if m.IsDefined() { return Uint64ListOpt(f(*m.value)) } else { return NoneUint64ListOption }  }
/* StringOptionOption: StringOption->UintptrList */ func MapUintptrListToStringOptionOption(m StringOptionOption, f func(StringOption) UintptrList) UintptrListOption {  if m.IsDefined() { return UintptrListOpt(f(*m.value)) } else { return NoneUintptrListOption }  }
/* StringOptionOption: StringOption->ByteList */ func MapByteListToStringOptionOption(m StringOptionOption, f func(StringOption) ByteList) ByteListOption {  if m.IsDefined() { return ByteListOpt(f(*m.value)) } else { return NoneByteListOption }  }
/* StringOptionOption: StringOption->RuneList */ func MapRuneListToStringOptionOption(m StringOptionOption, f func(StringOption) RuneList) RuneListOption {  if m.IsDefined() { return RuneListOpt(f(*m.value)) } else { return NoneRuneListOption }  }
/* StringOptionOption: StringOption->Float32List */ func MapFloat32ListToStringOptionOption(m StringOptionOption, f func(StringOption) Float32List) Float32ListOption {  if m.IsDefined() { return Float32ListOpt(f(*m.value)) } else { return NoneFloat32ListOption }  }
/* StringOptionOption: StringOption->Float64List */ func MapFloat64ListToStringOptionOption(m StringOptionOption, f func(StringOption) Float64List) Float64ListOption {  if m.IsDefined() { return Float64ListOpt(f(*m.value)) } else { return NoneFloat64ListOption }  }
/* StringOptionOption: StringOption->Complex64List */ func MapComplex64ListToStringOptionOption(m StringOptionOption, f func(StringOption) Complex64List) Complex64ListOption {  if m.IsDefined() { return Complex64ListOpt(f(*m.value)) } else { return NoneComplex64ListOption }  }
/* StringOptionOption: StringOption->Complex128List */ func MapComplex128ListToStringOptionOption(m StringOptionOption, f func(StringOption) Complex128List) Complex128ListOption {  if m.IsDefined() { return Complex128ListOpt(f(*m.value)) } else { return NoneComplex128ListOption }  }
/* StringOptionOption: StringOption->AnyList */ func MapAnyListToStringOptionOption(m StringOptionOption, f func(StringOption) AnyList) AnyListOption {  if m.IsDefined() { return AnyListOpt(f(*m.value)) } else { return NoneAnyListOption }  }
/* IntOptionOption: IntOption->bool */ func MapBoolToIntOptionOption(m IntOptionOption, f func(IntOption) bool) BoolOption {  if m.IsDefined() { return Bool(f(*m.value)) } else { return NoneBoolOption }  }
/* IntOptionOption: IntOption->string */ func MapStringToIntOptionOption(m IntOptionOption, f func(IntOption) string) StringOption {  if m.IsDefined() { return String(f(*m.value)) } else { return NoneStringOption }  }
/* IntOptionOption: IntOption->int */ func MapIntToIntOptionOption(m IntOptionOption, f func(IntOption) int) IntOption {  if m.IsDefined() { return Int(f(*m.value)) } else { return NoneIntOption }  }
/* IntOptionOption: IntOption->int8 */ func MapInt8ToIntOptionOption(m IntOptionOption, f func(IntOption) int8) Int8Option {  if m.IsDefined() { return Int8(f(*m.value)) } else { return NoneInt8Option }  }
/* IntOptionOption: IntOption->int16 */ func MapInt16ToIntOptionOption(m IntOptionOption, f func(IntOption) int16) Int16Option {  if m.IsDefined() { return Int16(f(*m.value)) } else { return NoneInt16Option }  }
/* IntOptionOption: IntOption->int32 */ func MapInt32ToIntOptionOption(m IntOptionOption, f func(IntOption) int32) Int32Option {  if m.IsDefined() { return Int32(f(*m.value)) } else { return NoneInt32Option }  }
/* IntOptionOption: IntOption->int64 */ func MapInt64ToIntOptionOption(m IntOptionOption, f func(IntOption) int64) Int64Option {  if m.IsDefined() { return Int64(f(*m.value)) } else { return NoneInt64Option }  }
/* IntOptionOption: IntOption->uint */ func MapUintToIntOptionOption(m IntOptionOption, f func(IntOption) uint) UintOption {  if m.IsDefined() { return Uint(f(*m.value)) } else { return NoneUintOption }  }
/* IntOptionOption: IntOption->uint8 */ func MapUint8ToIntOptionOption(m IntOptionOption, f func(IntOption) uint8) Uint8Option {  if m.IsDefined() { return Uint8(f(*m.value)) } else { return NoneUint8Option }  }
/* IntOptionOption: IntOption->uint16 */ func MapUint16ToIntOptionOption(m IntOptionOption, f func(IntOption) uint16) Uint16Option {  if m.IsDefined() { return Uint16(f(*m.value)) } else { return NoneUint16Option }  }
/* IntOptionOption: IntOption->uint32 */ func MapUint32ToIntOptionOption(m IntOptionOption, f func(IntOption) uint32) Uint32Option {  if m.IsDefined() { return Uint32(f(*m.value)) } else { return NoneUint32Option }  }
/* IntOptionOption: IntOption->uint64 */ func MapUint64ToIntOptionOption(m IntOptionOption, f func(IntOption) uint64) Uint64Option {  if m.IsDefined() { return Uint64(f(*m.value)) } else { return NoneUint64Option }  }
/* IntOptionOption: IntOption->uintptr */ func MapUintptrToIntOptionOption(m IntOptionOption, f func(IntOption) uintptr) UintptrOption {  if m.IsDefined() { return Uintptr(f(*m.value)) } else { return NoneUintptrOption }  }
/* IntOptionOption: IntOption->byte */ func MapByteToIntOptionOption(m IntOptionOption, f func(IntOption) byte) ByteOption {  if m.IsDefined() { return Byte(f(*m.value)) } else { return NoneByteOption }  }
/* IntOptionOption: IntOption->rune */ func MapRuneToIntOptionOption(m IntOptionOption, f func(IntOption) rune) RuneOption {  if m.IsDefined() { return Rune(f(*m.value)) } else { return NoneRuneOption }  }
/* IntOptionOption: IntOption->float32 */ func MapFloat32ToIntOptionOption(m IntOptionOption, f func(IntOption) float32) Float32Option {  if m.IsDefined() { return Float32(f(*m.value)) } else { return NoneFloat32Option }  }
/* IntOptionOption: IntOption->float64 */ func MapFloat64ToIntOptionOption(m IntOptionOption, f func(IntOption) float64) Float64Option {  if m.IsDefined() { return Float64(f(*m.value)) } else { return NoneFloat64Option }  }
/* IntOptionOption: IntOption->complex64 */ func MapComplex64ToIntOptionOption(m IntOptionOption, f func(IntOption) complex64) Complex64Option {  if m.IsDefined() { return Complex64(f(*m.value)) } else { return NoneComplex64Option }  }
/* IntOptionOption: IntOption->complex128 */ func MapComplex128ToIntOptionOption(m IntOptionOption, f func(IntOption) complex128) Complex128Option {  if m.IsDefined() { return Complex128(f(*m.value)) } else { return NoneComplex128Option }  }
/* IntOptionOption: IntOption->Any */ func MapAnyToIntOptionOption(m IntOptionOption, f func(IntOption) Any) AnyOption {  if m.IsDefined() { return AnyOpt(f(*m.value)) } else { return NoneAnyOption }  }
/* IntOptionOption: IntOption->BoolOption */ func MapBoolOptionToIntOptionOption(m IntOptionOption, f func(IntOption) BoolOption) BoolOptionOption {  if m.IsDefined() { return BoolBool(f(*m.value)) } else { return NoneBoolOptionOption }  }
/* IntOptionOption: IntOption->StringOption */ func MapStringOptionToIntOptionOption(m IntOptionOption, f func(IntOption) StringOption) StringOptionOption {  if m.IsDefined() { return StringString(f(*m.value)) } else { return NoneStringOptionOption }  }
/* IntOptionOption: IntOption->IntOption */ func MapIntOptionToIntOptionOption(m IntOptionOption, f func(IntOption) IntOption) IntOptionOption {  if m.IsDefined() { return IntInt(f(*m.value)) } else { return NoneIntOptionOption }  }
/* IntOptionOption: IntOption->Int8Option */ func MapInt8OptionToIntOptionOption(m IntOptionOption, f func(IntOption) Int8Option) Int8OptionOption {  if m.IsDefined() { return Int8Int8(f(*m.value)) } else { return NoneInt8OptionOption }  }
/* IntOptionOption: IntOption->Int16Option */ func MapInt16OptionToIntOptionOption(m IntOptionOption, f func(IntOption) Int16Option) Int16OptionOption {  if m.IsDefined() { return Int16Int16(f(*m.value)) } else { return NoneInt16OptionOption }  }
/* IntOptionOption: IntOption->Int32Option */ func MapInt32OptionToIntOptionOption(m IntOptionOption, f func(IntOption) Int32Option) Int32OptionOption {  if m.IsDefined() { return Int32Int32(f(*m.value)) } else { return NoneInt32OptionOption }  }
/* IntOptionOption: IntOption->Int64Option */ func MapInt64OptionToIntOptionOption(m IntOptionOption, f func(IntOption) Int64Option) Int64OptionOption {  if m.IsDefined() { return Int64Int64(f(*m.value)) } else { return NoneInt64OptionOption }  }
/* IntOptionOption: IntOption->UintOption */ func MapUintOptionToIntOptionOption(m IntOptionOption, f func(IntOption) UintOption) UintOptionOption {  if m.IsDefined() { return UintUint(f(*m.value)) } else { return NoneUintOptionOption }  }
/* IntOptionOption: IntOption->Uint8Option */ func MapUint8OptionToIntOptionOption(m IntOptionOption, f func(IntOption) Uint8Option) Uint8OptionOption {  if m.IsDefined() { return Uint8Uint8(f(*m.value)) } else { return NoneUint8OptionOption }  }
/* IntOptionOption: IntOption->Uint16Option */ func MapUint16OptionToIntOptionOption(m IntOptionOption, f func(IntOption) Uint16Option) Uint16OptionOption {  if m.IsDefined() { return Uint16Uint16(f(*m.value)) } else { return NoneUint16OptionOption }  }
/* IntOptionOption: IntOption->Uint32Option */ func MapUint32OptionToIntOptionOption(m IntOptionOption, f func(IntOption) Uint32Option) Uint32OptionOption {  if m.IsDefined() { return Uint32Uint32(f(*m.value)) } else { return NoneUint32OptionOption }  }
/* IntOptionOption: IntOption->Uint64Option */ func MapUint64OptionToIntOptionOption(m IntOptionOption, f func(IntOption) Uint64Option) Uint64OptionOption {  if m.IsDefined() { return Uint64Uint64(f(*m.value)) } else { return NoneUint64OptionOption }  }
/* IntOptionOption: IntOption->UintptrOption */ func MapUintptrOptionToIntOptionOption(m IntOptionOption, f func(IntOption) UintptrOption) UintptrOptionOption {  if m.IsDefined() { return UintptrUintptr(f(*m.value)) } else { return NoneUintptrOptionOption }  }
/* IntOptionOption: IntOption->ByteOption */ func MapByteOptionToIntOptionOption(m IntOptionOption, f func(IntOption) ByteOption) ByteOptionOption {  if m.IsDefined() { return ByteByte(f(*m.value)) } else { return NoneByteOptionOption }  }
/* IntOptionOption: IntOption->RuneOption */ func MapRuneOptionToIntOptionOption(m IntOptionOption, f func(IntOption) RuneOption) RuneOptionOption {  if m.IsDefined() { return RuneRune(f(*m.value)) } else { return NoneRuneOptionOption }  }
/* IntOptionOption: IntOption->Float32Option */ func MapFloat32OptionToIntOptionOption(m IntOptionOption, f func(IntOption) Float32Option) Float32OptionOption {  if m.IsDefined() { return Float32Float32(f(*m.value)) } else { return NoneFloat32OptionOption }  }
/* IntOptionOption: IntOption->Float64Option */ func MapFloat64OptionToIntOptionOption(m IntOptionOption, f func(IntOption) Float64Option) Float64OptionOption {  if m.IsDefined() { return Float64Float64(f(*m.value)) } else { return NoneFloat64OptionOption }  }
/* IntOptionOption: IntOption->Complex64Option */ func MapComplex64OptionToIntOptionOption(m IntOptionOption, f func(IntOption) Complex64Option) Complex64OptionOption {  if m.IsDefined() { return Complex64Complex64(f(*m.value)) } else { return NoneComplex64OptionOption }  }
/* IntOptionOption: IntOption->Complex128Option */ func MapComplex128OptionToIntOptionOption(m IntOptionOption, f func(IntOption) Complex128Option) Complex128OptionOption {  if m.IsDefined() { return Complex128Complex128(f(*m.value)) } else { return NoneComplex128OptionOption }  }
/* IntOptionOption: IntOption->AnyOption */ func MapAnyOptionToIntOptionOption(m IntOptionOption, f func(IntOption) AnyOption) AnyOptionOption {  if m.IsDefined() { return AnyOptAny(f(*m.value)) } else { return NoneAnyOptionOption }  }
/* IntOptionOption: IntOption->[]bool */ func MapBoolArrToIntOptionOption(m IntOptionOption, f func(IntOption) []bool) BoolArrOption {  if m.IsDefined() { return BoolArrOpt(f(*m.value)) } else { return NoneBoolArrOption }  }
/* IntOptionOption: IntOption->[]string */ func MapStringArrToIntOptionOption(m IntOptionOption, f func(IntOption) []string) StringArrOption {  if m.IsDefined() { return StringArrOpt(f(*m.value)) } else { return NoneStringArrOption }  }
/* IntOptionOption: IntOption->[]int */ func MapIntArrToIntOptionOption(m IntOptionOption, f func(IntOption) []int) IntArrOption {  if m.IsDefined() { return IntArrOpt(f(*m.value)) } else { return NoneIntArrOption }  }
/* IntOptionOption: IntOption->[]int8 */ func MapInt8ArrToIntOptionOption(m IntOptionOption, f func(IntOption) []int8) Int8ArrOption {  if m.IsDefined() { return Int8ArrOpt(f(*m.value)) } else { return NoneInt8ArrOption }  }
/* IntOptionOption: IntOption->[]int16 */ func MapInt16ArrToIntOptionOption(m IntOptionOption, f func(IntOption) []int16) Int16ArrOption {  if m.IsDefined() { return Int16ArrOpt(f(*m.value)) } else { return NoneInt16ArrOption }  }
/* IntOptionOption: IntOption->[]int32 */ func MapInt32ArrToIntOptionOption(m IntOptionOption, f func(IntOption) []int32) Int32ArrOption {  if m.IsDefined() { return Int32ArrOpt(f(*m.value)) } else { return NoneInt32ArrOption }  }
/* IntOptionOption: IntOption->[]int64 */ func MapInt64ArrToIntOptionOption(m IntOptionOption, f func(IntOption) []int64) Int64ArrOption {  if m.IsDefined() { return Int64ArrOpt(f(*m.value)) } else { return NoneInt64ArrOption }  }
/* IntOptionOption: IntOption->[]uint */ func MapUintArrToIntOptionOption(m IntOptionOption, f func(IntOption) []uint) UintArrOption {  if m.IsDefined() { return UintArrOpt(f(*m.value)) } else { return NoneUintArrOption }  }
/* IntOptionOption: IntOption->[]uint8 */ func MapUint8ArrToIntOptionOption(m IntOptionOption, f func(IntOption) []uint8) Uint8ArrOption {  if m.IsDefined() { return Uint8ArrOpt(f(*m.value)) } else { return NoneUint8ArrOption }  }
/* IntOptionOption: IntOption->[]uint16 */ func MapUint16ArrToIntOptionOption(m IntOptionOption, f func(IntOption) []uint16) Uint16ArrOption {  if m.IsDefined() { return Uint16ArrOpt(f(*m.value)) } else { return NoneUint16ArrOption }  }
/* IntOptionOption: IntOption->[]uint32 */ func MapUint32ArrToIntOptionOption(m IntOptionOption, f func(IntOption) []uint32) Uint32ArrOption {  if m.IsDefined() { return Uint32ArrOpt(f(*m.value)) } else { return NoneUint32ArrOption }  }
/* IntOptionOption: IntOption->[]uint64 */ func MapUint64ArrToIntOptionOption(m IntOptionOption, f func(IntOption) []uint64) Uint64ArrOption {  if m.IsDefined() { return Uint64ArrOpt(f(*m.value)) } else { return NoneUint64ArrOption }  }
/* IntOptionOption: IntOption->[]uintptr */ func MapUintptrArrToIntOptionOption(m IntOptionOption, f func(IntOption) []uintptr) UintptrArrOption {  if m.IsDefined() { return UintptrArrOpt(f(*m.value)) } else { return NoneUintptrArrOption }  }
/* IntOptionOption: IntOption->[]byte */ func MapByteArrToIntOptionOption(m IntOptionOption, f func(IntOption) []byte) ByteArrOption {  if m.IsDefined() { return ByteArrOpt(f(*m.value)) } else { return NoneByteArrOption }  }
/* IntOptionOption: IntOption->[]rune */ func MapRuneArrToIntOptionOption(m IntOptionOption, f func(IntOption) []rune) RuneArrOption {  if m.IsDefined() { return RuneArrOpt(f(*m.value)) } else { return NoneRuneArrOption }  }
/* IntOptionOption: IntOption->[]float32 */ func MapFloat32ArrToIntOptionOption(m IntOptionOption, f func(IntOption) []float32) Float32ArrOption {  if m.IsDefined() { return Float32ArrOpt(f(*m.value)) } else { return NoneFloat32ArrOption }  }
/* IntOptionOption: IntOption->[]float64 */ func MapFloat64ArrToIntOptionOption(m IntOptionOption, f func(IntOption) []float64) Float64ArrOption {  if m.IsDefined() { return Float64ArrOpt(f(*m.value)) } else { return NoneFloat64ArrOption }  }
/* IntOptionOption: IntOption->[]complex64 */ func MapComplex64ArrToIntOptionOption(m IntOptionOption, f func(IntOption) []complex64) Complex64ArrOption {  if m.IsDefined() { return Complex64ArrOpt(f(*m.value)) } else { return NoneComplex64ArrOption }  }
/* IntOptionOption: IntOption->[]complex128 */ func MapComplex128ArrToIntOptionOption(m IntOptionOption, f func(IntOption) []complex128) Complex128ArrOption {  if m.IsDefined() { return Complex128ArrOpt(f(*m.value)) } else { return NoneComplex128ArrOption }  }
/* IntOptionOption: IntOption->[]Any */ func MapAnyArrToIntOptionOption(m IntOptionOption, f func(IntOption) []Any) AnyArrOption {  if m.IsDefined() { return AnyArrOpt(f(*m.value)) } else { return NoneAnyArrOption }  }
/* IntOptionOption: IntOption->BoolList */ func MapBoolListToIntOptionOption(m IntOptionOption, f func(IntOption) BoolList) BoolListOption {  if m.IsDefined() { return BoolListOpt(f(*m.value)) } else { return NoneBoolListOption }  }
/* IntOptionOption: IntOption->StringList */ func MapStringListToIntOptionOption(m IntOptionOption, f func(IntOption) StringList) StringListOption {  if m.IsDefined() { return StringListOpt(f(*m.value)) } else { return NoneStringListOption }  }
/* IntOptionOption: IntOption->IntList */ func MapIntListToIntOptionOption(m IntOptionOption, f func(IntOption) IntList) IntListOption {  if m.IsDefined() { return IntListOpt(f(*m.value)) } else { return NoneIntListOption }  }
/* IntOptionOption: IntOption->Int8List */ func MapInt8ListToIntOptionOption(m IntOptionOption, f func(IntOption) Int8List) Int8ListOption {  if m.IsDefined() { return Int8ListOpt(f(*m.value)) } else { return NoneInt8ListOption }  }
/* IntOptionOption: IntOption->Int16List */ func MapInt16ListToIntOptionOption(m IntOptionOption, f func(IntOption) Int16List) Int16ListOption {  if m.IsDefined() { return Int16ListOpt(f(*m.value)) } else { return NoneInt16ListOption }  }
/* IntOptionOption: IntOption->Int32List */ func MapInt32ListToIntOptionOption(m IntOptionOption, f func(IntOption) Int32List) Int32ListOption {  if m.IsDefined() { return Int32ListOpt(f(*m.value)) } else { return NoneInt32ListOption }  }
/* IntOptionOption: IntOption->Int64List */ func MapInt64ListToIntOptionOption(m IntOptionOption, f func(IntOption) Int64List) Int64ListOption {  if m.IsDefined() { return Int64ListOpt(f(*m.value)) } else { return NoneInt64ListOption }  }
/* IntOptionOption: IntOption->UintList */ func MapUintListToIntOptionOption(m IntOptionOption, f func(IntOption) UintList) UintListOption {  if m.IsDefined() { return UintListOpt(f(*m.value)) } else { return NoneUintListOption }  }
/* IntOptionOption: IntOption->Uint8List */ func MapUint8ListToIntOptionOption(m IntOptionOption, f func(IntOption) Uint8List) Uint8ListOption {  if m.IsDefined() { return Uint8ListOpt(f(*m.value)) } else { return NoneUint8ListOption }  }
/* IntOptionOption: IntOption->Uint16List */ func MapUint16ListToIntOptionOption(m IntOptionOption, f func(IntOption) Uint16List) Uint16ListOption {  if m.IsDefined() { return Uint16ListOpt(f(*m.value)) } else { return NoneUint16ListOption }  }
/* IntOptionOption: IntOption->Uint32List */ func MapUint32ListToIntOptionOption(m IntOptionOption, f func(IntOption) Uint32List) Uint32ListOption {  if m.IsDefined() { return Uint32ListOpt(f(*m.value)) } else { return NoneUint32ListOption }  }
/* IntOptionOption: IntOption->Uint64List */ func MapUint64ListToIntOptionOption(m IntOptionOption, f func(IntOption) Uint64List) Uint64ListOption {  if m.IsDefined() { return Uint64ListOpt(f(*m.value)) } else { return NoneUint64ListOption }  }
/* IntOptionOption: IntOption->UintptrList */ func MapUintptrListToIntOptionOption(m IntOptionOption, f func(IntOption) UintptrList) UintptrListOption {  if m.IsDefined() { return UintptrListOpt(f(*m.value)) } else { return NoneUintptrListOption }  }
/* IntOptionOption: IntOption->ByteList */ func MapByteListToIntOptionOption(m IntOptionOption, f func(IntOption) ByteList) ByteListOption {  if m.IsDefined() { return ByteListOpt(f(*m.value)) } else { return NoneByteListOption }  }
/* IntOptionOption: IntOption->RuneList */ func MapRuneListToIntOptionOption(m IntOptionOption, f func(IntOption) RuneList) RuneListOption {  if m.IsDefined() { return RuneListOpt(f(*m.value)) } else { return NoneRuneListOption }  }
/* IntOptionOption: IntOption->Float32List */ func MapFloat32ListToIntOptionOption(m IntOptionOption, f func(IntOption) Float32List) Float32ListOption {  if m.IsDefined() { return Float32ListOpt(f(*m.value)) } else { return NoneFloat32ListOption }  }
/* IntOptionOption: IntOption->Float64List */ func MapFloat64ListToIntOptionOption(m IntOptionOption, f func(IntOption) Float64List) Float64ListOption {  if m.IsDefined() { return Float64ListOpt(f(*m.value)) } else { return NoneFloat64ListOption }  }
/* IntOptionOption: IntOption->Complex64List */ func MapComplex64ListToIntOptionOption(m IntOptionOption, f func(IntOption) Complex64List) Complex64ListOption {  if m.IsDefined() { return Complex64ListOpt(f(*m.value)) } else { return NoneComplex64ListOption }  }
/* IntOptionOption: IntOption->Complex128List */ func MapComplex128ListToIntOptionOption(m IntOptionOption, f func(IntOption) Complex128List) Complex128ListOption {  if m.IsDefined() { return Complex128ListOpt(f(*m.value)) } else { return NoneComplex128ListOption }  }
/* IntOptionOption: IntOption->AnyList */ func MapAnyListToIntOptionOption(m IntOptionOption, f func(IntOption) AnyList) AnyListOption {  if m.IsDefined() { return AnyListOpt(f(*m.value)) } else { return NoneAnyListOption }  }
/* Int8OptionOption: Int8Option->bool */ func MapBoolToInt8OptionOption(m Int8OptionOption, f func(Int8Option) bool) BoolOption {  if m.IsDefined() { return Bool(f(*m.value)) } else { return NoneBoolOption }  }
/* Int8OptionOption: Int8Option->string */ func MapStringToInt8OptionOption(m Int8OptionOption, f func(Int8Option) string) StringOption {  if m.IsDefined() { return String(f(*m.value)) } else { return NoneStringOption }  }
/* Int8OptionOption: Int8Option->int */ func MapIntToInt8OptionOption(m Int8OptionOption, f func(Int8Option) int) IntOption {  if m.IsDefined() { return Int(f(*m.value)) } else { return NoneIntOption }  }
/* Int8OptionOption: Int8Option->int8 */ func MapInt8ToInt8OptionOption(m Int8OptionOption, f func(Int8Option) int8) Int8Option {  if m.IsDefined() { return Int8(f(*m.value)) } else { return NoneInt8Option }  }
/* Int8OptionOption: Int8Option->int16 */ func MapInt16ToInt8OptionOption(m Int8OptionOption, f func(Int8Option) int16) Int16Option {  if m.IsDefined() { return Int16(f(*m.value)) } else { return NoneInt16Option }  }
/* Int8OptionOption: Int8Option->int32 */ func MapInt32ToInt8OptionOption(m Int8OptionOption, f func(Int8Option) int32) Int32Option {  if m.IsDefined() { return Int32(f(*m.value)) } else { return NoneInt32Option }  }
/* Int8OptionOption: Int8Option->int64 */ func MapInt64ToInt8OptionOption(m Int8OptionOption, f func(Int8Option) int64) Int64Option {  if m.IsDefined() { return Int64(f(*m.value)) } else { return NoneInt64Option }  }
/* Int8OptionOption: Int8Option->uint */ func MapUintToInt8OptionOption(m Int8OptionOption, f func(Int8Option) uint) UintOption {  if m.IsDefined() { return Uint(f(*m.value)) } else { return NoneUintOption }  }
/* Int8OptionOption: Int8Option->uint8 */ func MapUint8ToInt8OptionOption(m Int8OptionOption, f func(Int8Option) uint8) Uint8Option {  if m.IsDefined() { return Uint8(f(*m.value)) } else { return NoneUint8Option }  }
/* Int8OptionOption: Int8Option->uint16 */ func MapUint16ToInt8OptionOption(m Int8OptionOption, f func(Int8Option) uint16) Uint16Option {  if m.IsDefined() { return Uint16(f(*m.value)) } else { return NoneUint16Option }  }
/* Int8OptionOption: Int8Option->uint32 */ func MapUint32ToInt8OptionOption(m Int8OptionOption, f func(Int8Option) uint32) Uint32Option {  if m.IsDefined() { return Uint32(f(*m.value)) } else { return NoneUint32Option }  }
/* Int8OptionOption: Int8Option->uint64 */ func MapUint64ToInt8OptionOption(m Int8OptionOption, f func(Int8Option) uint64) Uint64Option {  if m.IsDefined() { return Uint64(f(*m.value)) } else { return NoneUint64Option }  }
/* Int8OptionOption: Int8Option->uintptr */ func MapUintptrToInt8OptionOption(m Int8OptionOption, f func(Int8Option) uintptr) UintptrOption {  if m.IsDefined() { return Uintptr(f(*m.value)) } else { return NoneUintptrOption }  }
/* Int8OptionOption: Int8Option->byte */ func MapByteToInt8OptionOption(m Int8OptionOption, f func(Int8Option) byte) ByteOption {  if m.IsDefined() { return Byte(f(*m.value)) } else { return NoneByteOption }  }
/* Int8OptionOption: Int8Option->rune */ func MapRuneToInt8OptionOption(m Int8OptionOption, f func(Int8Option) rune) RuneOption {  if m.IsDefined() { return Rune(f(*m.value)) } else { return NoneRuneOption }  }
/* Int8OptionOption: Int8Option->float32 */ func MapFloat32ToInt8OptionOption(m Int8OptionOption, f func(Int8Option) float32) Float32Option {  if m.IsDefined() { return Float32(f(*m.value)) } else { return NoneFloat32Option }  }
/* Int8OptionOption: Int8Option->float64 */ func MapFloat64ToInt8OptionOption(m Int8OptionOption, f func(Int8Option) float64) Float64Option {  if m.IsDefined() { return Float64(f(*m.value)) } else { return NoneFloat64Option }  }
/* Int8OptionOption: Int8Option->complex64 */ func MapComplex64ToInt8OptionOption(m Int8OptionOption, f func(Int8Option) complex64) Complex64Option {  if m.IsDefined() { return Complex64(f(*m.value)) } else { return NoneComplex64Option }  }
/* Int8OptionOption: Int8Option->complex128 */ func MapComplex128ToInt8OptionOption(m Int8OptionOption, f func(Int8Option) complex128) Complex128Option {  if m.IsDefined() { return Complex128(f(*m.value)) } else { return NoneComplex128Option }  }
/* Int8OptionOption: Int8Option->Any */ func MapAnyToInt8OptionOption(m Int8OptionOption, f func(Int8Option) Any) AnyOption {  if m.IsDefined() { return AnyOpt(f(*m.value)) } else { return NoneAnyOption }  }
/* Int8OptionOption: Int8Option->BoolOption */ func MapBoolOptionToInt8OptionOption(m Int8OptionOption, f func(Int8Option) BoolOption) BoolOptionOption {  if m.IsDefined() { return BoolBool(f(*m.value)) } else { return NoneBoolOptionOption }  }
/* Int8OptionOption: Int8Option->StringOption */ func MapStringOptionToInt8OptionOption(m Int8OptionOption, f func(Int8Option) StringOption) StringOptionOption {  if m.IsDefined() { return StringString(f(*m.value)) } else { return NoneStringOptionOption }  }
/* Int8OptionOption: Int8Option->IntOption */ func MapIntOptionToInt8OptionOption(m Int8OptionOption, f func(Int8Option) IntOption) IntOptionOption {  if m.IsDefined() { return IntInt(f(*m.value)) } else { return NoneIntOptionOption }  }
/* Int8OptionOption: Int8Option->Int8Option */ func MapInt8OptionToInt8OptionOption(m Int8OptionOption, f func(Int8Option) Int8Option) Int8OptionOption {  if m.IsDefined() { return Int8Int8(f(*m.value)) } else { return NoneInt8OptionOption }  }
/* Int8OptionOption: Int8Option->Int16Option */ func MapInt16OptionToInt8OptionOption(m Int8OptionOption, f func(Int8Option) Int16Option) Int16OptionOption {  if m.IsDefined() { return Int16Int16(f(*m.value)) } else { return NoneInt16OptionOption }  }
/* Int8OptionOption: Int8Option->Int32Option */ func MapInt32OptionToInt8OptionOption(m Int8OptionOption, f func(Int8Option) Int32Option) Int32OptionOption {  if m.IsDefined() { return Int32Int32(f(*m.value)) } else { return NoneInt32OptionOption }  }
/* Int8OptionOption: Int8Option->Int64Option */ func MapInt64OptionToInt8OptionOption(m Int8OptionOption, f func(Int8Option) Int64Option) Int64OptionOption {  if m.IsDefined() { return Int64Int64(f(*m.value)) } else { return NoneInt64OptionOption }  }
/* Int8OptionOption: Int8Option->UintOption */ func MapUintOptionToInt8OptionOption(m Int8OptionOption, f func(Int8Option) UintOption) UintOptionOption {  if m.IsDefined() { return UintUint(f(*m.value)) } else { return NoneUintOptionOption }  }
/* Int8OptionOption: Int8Option->Uint8Option */ func MapUint8OptionToInt8OptionOption(m Int8OptionOption, f func(Int8Option) Uint8Option) Uint8OptionOption {  if m.IsDefined() { return Uint8Uint8(f(*m.value)) } else { return NoneUint8OptionOption }  }
/* Int8OptionOption: Int8Option->Uint16Option */ func MapUint16OptionToInt8OptionOption(m Int8OptionOption, f func(Int8Option) Uint16Option) Uint16OptionOption {  if m.IsDefined() { return Uint16Uint16(f(*m.value)) } else { return NoneUint16OptionOption }  }
/* Int8OptionOption: Int8Option->Uint32Option */ func MapUint32OptionToInt8OptionOption(m Int8OptionOption, f func(Int8Option) Uint32Option) Uint32OptionOption {  if m.IsDefined() { return Uint32Uint32(f(*m.value)) } else { return NoneUint32OptionOption }  }
/* Int8OptionOption: Int8Option->Uint64Option */ func MapUint64OptionToInt8OptionOption(m Int8OptionOption, f func(Int8Option) Uint64Option) Uint64OptionOption {  if m.IsDefined() { return Uint64Uint64(f(*m.value)) } else { return NoneUint64OptionOption }  }
/* Int8OptionOption: Int8Option->UintptrOption */ func MapUintptrOptionToInt8OptionOption(m Int8OptionOption, f func(Int8Option) UintptrOption) UintptrOptionOption {  if m.IsDefined() { return UintptrUintptr(f(*m.value)) } else { return NoneUintptrOptionOption }  }
/* Int8OptionOption: Int8Option->ByteOption */ func MapByteOptionToInt8OptionOption(m Int8OptionOption, f func(Int8Option) ByteOption) ByteOptionOption {  if m.IsDefined() { return ByteByte(f(*m.value)) } else { return NoneByteOptionOption }  }
/* Int8OptionOption: Int8Option->RuneOption */ func MapRuneOptionToInt8OptionOption(m Int8OptionOption, f func(Int8Option) RuneOption) RuneOptionOption {  if m.IsDefined() { return RuneRune(f(*m.value)) } else { return NoneRuneOptionOption }  }
/* Int8OptionOption: Int8Option->Float32Option */ func MapFloat32OptionToInt8OptionOption(m Int8OptionOption, f func(Int8Option) Float32Option) Float32OptionOption {  if m.IsDefined() { return Float32Float32(f(*m.value)) } else { return NoneFloat32OptionOption }  }
/* Int8OptionOption: Int8Option->Float64Option */ func MapFloat64OptionToInt8OptionOption(m Int8OptionOption, f func(Int8Option) Float64Option) Float64OptionOption {  if m.IsDefined() { return Float64Float64(f(*m.value)) } else { return NoneFloat64OptionOption }  }
/* Int8OptionOption: Int8Option->Complex64Option */ func MapComplex64OptionToInt8OptionOption(m Int8OptionOption, f func(Int8Option) Complex64Option) Complex64OptionOption {  if m.IsDefined() { return Complex64Complex64(f(*m.value)) } else { return NoneComplex64OptionOption }  }
/* Int8OptionOption: Int8Option->Complex128Option */ func MapComplex128OptionToInt8OptionOption(m Int8OptionOption, f func(Int8Option) Complex128Option) Complex128OptionOption {  if m.IsDefined() { return Complex128Complex128(f(*m.value)) } else { return NoneComplex128OptionOption }  }
/* Int8OptionOption: Int8Option->AnyOption */ func MapAnyOptionToInt8OptionOption(m Int8OptionOption, f func(Int8Option) AnyOption) AnyOptionOption {  if m.IsDefined() { return AnyOptAny(f(*m.value)) } else { return NoneAnyOptionOption }  }
/* Int8OptionOption: Int8Option->[]bool */ func MapBoolArrToInt8OptionOption(m Int8OptionOption, f func(Int8Option) []bool) BoolArrOption {  if m.IsDefined() { return BoolArrOpt(f(*m.value)) } else { return NoneBoolArrOption }  }
/* Int8OptionOption: Int8Option->[]string */ func MapStringArrToInt8OptionOption(m Int8OptionOption, f func(Int8Option) []string) StringArrOption {  if m.IsDefined() { return StringArrOpt(f(*m.value)) } else { return NoneStringArrOption }  }
/* Int8OptionOption: Int8Option->[]int */ func MapIntArrToInt8OptionOption(m Int8OptionOption, f func(Int8Option) []int) IntArrOption {  if m.IsDefined() { return IntArrOpt(f(*m.value)) } else { return NoneIntArrOption }  }
/* Int8OptionOption: Int8Option->[]int8 */ func MapInt8ArrToInt8OptionOption(m Int8OptionOption, f func(Int8Option) []int8) Int8ArrOption {  if m.IsDefined() { return Int8ArrOpt(f(*m.value)) } else { return NoneInt8ArrOption }  }
/* Int8OptionOption: Int8Option->[]int16 */ func MapInt16ArrToInt8OptionOption(m Int8OptionOption, f func(Int8Option) []int16) Int16ArrOption {  if m.IsDefined() { return Int16ArrOpt(f(*m.value)) } else { return NoneInt16ArrOption }  }
/* Int8OptionOption: Int8Option->[]int32 */ func MapInt32ArrToInt8OptionOption(m Int8OptionOption, f func(Int8Option) []int32) Int32ArrOption {  if m.IsDefined() { return Int32ArrOpt(f(*m.value)) } else { return NoneInt32ArrOption }  }
/* Int8OptionOption: Int8Option->[]int64 */ func MapInt64ArrToInt8OptionOption(m Int8OptionOption, f func(Int8Option) []int64) Int64ArrOption {  if m.IsDefined() { return Int64ArrOpt(f(*m.value)) } else { return NoneInt64ArrOption }  }
/* Int8OptionOption: Int8Option->[]uint */ func MapUintArrToInt8OptionOption(m Int8OptionOption, f func(Int8Option) []uint) UintArrOption {  if m.IsDefined() { return UintArrOpt(f(*m.value)) } else { return NoneUintArrOption }  }
/* Int8OptionOption: Int8Option->[]uint8 */ func MapUint8ArrToInt8OptionOption(m Int8OptionOption, f func(Int8Option) []uint8) Uint8ArrOption {  if m.IsDefined() { return Uint8ArrOpt(f(*m.value)) } else { return NoneUint8ArrOption }  }
/* Int8OptionOption: Int8Option->[]uint16 */ func MapUint16ArrToInt8OptionOption(m Int8OptionOption, f func(Int8Option) []uint16) Uint16ArrOption {  if m.IsDefined() { return Uint16ArrOpt(f(*m.value)) } else { return NoneUint16ArrOption }  }
/* Int8OptionOption: Int8Option->[]uint32 */ func MapUint32ArrToInt8OptionOption(m Int8OptionOption, f func(Int8Option) []uint32) Uint32ArrOption {  if m.IsDefined() { return Uint32ArrOpt(f(*m.value)) } else { return NoneUint32ArrOption }  }
/* Int8OptionOption: Int8Option->[]uint64 */ func MapUint64ArrToInt8OptionOption(m Int8OptionOption, f func(Int8Option) []uint64) Uint64ArrOption {  if m.IsDefined() { return Uint64ArrOpt(f(*m.value)) } else { return NoneUint64ArrOption }  }
/* Int8OptionOption: Int8Option->[]uintptr */ func MapUintptrArrToInt8OptionOption(m Int8OptionOption, f func(Int8Option) []uintptr) UintptrArrOption {  if m.IsDefined() { return UintptrArrOpt(f(*m.value)) } else { return NoneUintptrArrOption }  }
/* Int8OptionOption: Int8Option->[]byte */ func MapByteArrToInt8OptionOption(m Int8OptionOption, f func(Int8Option) []byte) ByteArrOption {  if m.IsDefined() { return ByteArrOpt(f(*m.value)) } else { return NoneByteArrOption }  }
/* Int8OptionOption: Int8Option->[]rune */ func MapRuneArrToInt8OptionOption(m Int8OptionOption, f func(Int8Option) []rune) RuneArrOption {  if m.IsDefined() { return RuneArrOpt(f(*m.value)) } else { return NoneRuneArrOption }  }
/* Int8OptionOption: Int8Option->[]float32 */ func MapFloat32ArrToInt8OptionOption(m Int8OptionOption, f func(Int8Option) []float32) Float32ArrOption {  if m.IsDefined() { return Float32ArrOpt(f(*m.value)) } else { return NoneFloat32ArrOption }  }
/* Int8OptionOption: Int8Option->[]float64 */ func MapFloat64ArrToInt8OptionOption(m Int8OptionOption, f func(Int8Option) []float64) Float64ArrOption {  if m.IsDefined() { return Float64ArrOpt(f(*m.value)) } else { return NoneFloat64ArrOption }  }
/* Int8OptionOption: Int8Option->[]complex64 */ func MapComplex64ArrToInt8OptionOption(m Int8OptionOption, f func(Int8Option) []complex64) Complex64ArrOption {  if m.IsDefined() { return Complex64ArrOpt(f(*m.value)) } else { return NoneComplex64ArrOption }  }
/* Int8OptionOption: Int8Option->[]complex128 */ func MapComplex128ArrToInt8OptionOption(m Int8OptionOption, f func(Int8Option) []complex128) Complex128ArrOption {  if m.IsDefined() { return Complex128ArrOpt(f(*m.value)) } else { return NoneComplex128ArrOption }  }
/* Int8OptionOption: Int8Option->[]Any */ func MapAnyArrToInt8OptionOption(m Int8OptionOption, f func(Int8Option) []Any) AnyArrOption {  if m.IsDefined() { return AnyArrOpt(f(*m.value)) } else { return NoneAnyArrOption }  }
/* Int8OptionOption: Int8Option->BoolList */ func MapBoolListToInt8OptionOption(m Int8OptionOption, f func(Int8Option) BoolList) BoolListOption {  if m.IsDefined() { return BoolListOpt(f(*m.value)) } else { return NoneBoolListOption }  }
/* Int8OptionOption: Int8Option->StringList */ func MapStringListToInt8OptionOption(m Int8OptionOption, f func(Int8Option) StringList) StringListOption {  if m.IsDefined() { return StringListOpt(f(*m.value)) } else { return NoneStringListOption }  }
/* Int8OptionOption: Int8Option->IntList */ func MapIntListToInt8OptionOption(m Int8OptionOption, f func(Int8Option) IntList) IntListOption {  if m.IsDefined() { return IntListOpt(f(*m.value)) } else { return NoneIntListOption }  }
/* Int8OptionOption: Int8Option->Int8List */ func MapInt8ListToInt8OptionOption(m Int8OptionOption, f func(Int8Option) Int8List) Int8ListOption {  if m.IsDefined() { return Int8ListOpt(f(*m.value)) } else { return NoneInt8ListOption }  }
/* Int8OptionOption: Int8Option->Int16List */ func MapInt16ListToInt8OptionOption(m Int8OptionOption, f func(Int8Option) Int16List) Int16ListOption {  if m.IsDefined() { return Int16ListOpt(f(*m.value)) } else { return NoneInt16ListOption }  }
/* Int8OptionOption: Int8Option->Int32List */ func MapInt32ListToInt8OptionOption(m Int8OptionOption, f func(Int8Option) Int32List) Int32ListOption {  if m.IsDefined() { return Int32ListOpt(f(*m.value)) } else { return NoneInt32ListOption }  }
/* Int8OptionOption: Int8Option->Int64List */ func MapInt64ListToInt8OptionOption(m Int8OptionOption, f func(Int8Option) Int64List) Int64ListOption {  if m.IsDefined() { return Int64ListOpt(f(*m.value)) } else { return NoneInt64ListOption }  }
/* Int8OptionOption: Int8Option->UintList */ func MapUintListToInt8OptionOption(m Int8OptionOption, f func(Int8Option) UintList) UintListOption {  if m.IsDefined() { return UintListOpt(f(*m.value)) } else { return NoneUintListOption }  }
/* Int8OptionOption: Int8Option->Uint8List */ func MapUint8ListToInt8OptionOption(m Int8OptionOption, f func(Int8Option) Uint8List) Uint8ListOption {  if m.IsDefined() { return Uint8ListOpt(f(*m.value)) } else { return NoneUint8ListOption }  }
/* Int8OptionOption: Int8Option->Uint16List */ func MapUint16ListToInt8OptionOption(m Int8OptionOption, f func(Int8Option) Uint16List) Uint16ListOption {  if m.IsDefined() { return Uint16ListOpt(f(*m.value)) } else { return NoneUint16ListOption }  }
/* Int8OptionOption: Int8Option->Uint32List */ func MapUint32ListToInt8OptionOption(m Int8OptionOption, f func(Int8Option) Uint32List) Uint32ListOption {  if m.IsDefined() { return Uint32ListOpt(f(*m.value)) } else { return NoneUint32ListOption }  }
/* Int8OptionOption: Int8Option->Uint64List */ func MapUint64ListToInt8OptionOption(m Int8OptionOption, f func(Int8Option) Uint64List) Uint64ListOption {  if m.IsDefined() { return Uint64ListOpt(f(*m.value)) } else { return NoneUint64ListOption }  }
/* Int8OptionOption: Int8Option->UintptrList */ func MapUintptrListToInt8OptionOption(m Int8OptionOption, f func(Int8Option) UintptrList) UintptrListOption {  if m.IsDefined() { return UintptrListOpt(f(*m.value)) } else { return NoneUintptrListOption }  }
/* Int8OptionOption: Int8Option->ByteList */ func MapByteListToInt8OptionOption(m Int8OptionOption, f func(Int8Option) ByteList) ByteListOption {  if m.IsDefined() { return ByteListOpt(f(*m.value)) } else { return NoneByteListOption }  }
/* Int8OptionOption: Int8Option->RuneList */ func MapRuneListToInt8OptionOption(m Int8OptionOption, f func(Int8Option) RuneList) RuneListOption {  if m.IsDefined() { return RuneListOpt(f(*m.value)) } else { return NoneRuneListOption }  }
/* Int8OptionOption: Int8Option->Float32List */ func MapFloat32ListToInt8OptionOption(m Int8OptionOption, f func(Int8Option) Float32List) Float32ListOption {  if m.IsDefined() { return Float32ListOpt(f(*m.value)) } else { return NoneFloat32ListOption }  }
/* Int8OptionOption: Int8Option->Float64List */ func MapFloat64ListToInt8OptionOption(m Int8OptionOption, f func(Int8Option) Float64List) Float64ListOption {  if m.IsDefined() { return Float64ListOpt(f(*m.value)) } else { return NoneFloat64ListOption }  }
/* Int8OptionOption: Int8Option->Complex64List */ func MapComplex64ListToInt8OptionOption(m Int8OptionOption, f func(Int8Option) Complex64List) Complex64ListOption {  if m.IsDefined() { return Complex64ListOpt(f(*m.value)) } else { return NoneComplex64ListOption }  }
/* Int8OptionOption: Int8Option->Complex128List */ func MapComplex128ListToInt8OptionOption(m Int8OptionOption, f func(Int8Option) Complex128List) Complex128ListOption {  if m.IsDefined() { return Complex128ListOpt(f(*m.value)) } else { return NoneComplex128ListOption }  }
/* Int8OptionOption: Int8Option->AnyList */ func MapAnyListToInt8OptionOption(m Int8OptionOption, f func(Int8Option) AnyList) AnyListOption {  if m.IsDefined() { return AnyListOpt(f(*m.value)) } else { return NoneAnyListOption }  }
/* Int16OptionOption: Int16Option->bool */ func MapBoolToInt16OptionOption(m Int16OptionOption, f func(Int16Option) bool) BoolOption {  if m.IsDefined() { return Bool(f(*m.value)) } else { return NoneBoolOption }  }
/* Int16OptionOption: Int16Option->string */ func MapStringToInt16OptionOption(m Int16OptionOption, f func(Int16Option) string) StringOption {  if m.IsDefined() { return String(f(*m.value)) } else { return NoneStringOption }  }
/* Int16OptionOption: Int16Option->int */ func MapIntToInt16OptionOption(m Int16OptionOption, f func(Int16Option) int) IntOption {  if m.IsDefined() { return Int(f(*m.value)) } else { return NoneIntOption }  }
/* Int16OptionOption: Int16Option->int8 */ func MapInt8ToInt16OptionOption(m Int16OptionOption, f func(Int16Option) int8) Int8Option {  if m.IsDefined() { return Int8(f(*m.value)) } else { return NoneInt8Option }  }
/* Int16OptionOption: Int16Option->int16 */ func MapInt16ToInt16OptionOption(m Int16OptionOption, f func(Int16Option) int16) Int16Option {  if m.IsDefined() { return Int16(f(*m.value)) } else { return NoneInt16Option }  }
/* Int16OptionOption: Int16Option->int32 */ func MapInt32ToInt16OptionOption(m Int16OptionOption, f func(Int16Option) int32) Int32Option {  if m.IsDefined() { return Int32(f(*m.value)) } else { return NoneInt32Option }  }
/* Int16OptionOption: Int16Option->int64 */ func MapInt64ToInt16OptionOption(m Int16OptionOption, f func(Int16Option) int64) Int64Option {  if m.IsDefined() { return Int64(f(*m.value)) } else { return NoneInt64Option }  }
/* Int16OptionOption: Int16Option->uint */ func MapUintToInt16OptionOption(m Int16OptionOption, f func(Int16Option) uint) UintOption {  if m.IsDefined() { return Uint(f(*m.value)) } else { return NoneUintOption }  }
/* Int16OptionOption: Int16Option->uint8 */ func MapUint8ToInt16OptionOption(m Int16OptionOption, f func(Int16Option) uint8) Uint8Option {  if m.IsDefined() { return Uint8(f(*m.value)) } else { return NoneUint8Option }  }
/* Int16OptionOption: Int16Option->uint16 */ func MapUint16ToInt16OptionOption(m Int16OptionOption, f func(Int16Option) uint16) Uint16Option {  if m.IsDefined() { return Uint16(f(*m.value)) } else { return NoneUint16Option }  }
/* Int16OptionOption: Int16Option->uint32 */ func MapUint32ToInt16OptionOption(m Int16OptionOption, f func(Int16Option) uint32) Uint32Option {  if m.IsDefined() { return Uint32(f(*m.value)) } else { return NoneUint32Option }  }
/* Int16OptionOption: Int16Option->uint64 */ func MapUint64ToInt16OptionOption(m Int16OptionOption, f func(Int16Option) uint64) Uint64Option {  if m.IsDefined() { return Uint64(f(*m.value)) } else { return NoneUint64Option }  }
/* Int16OptionOption: Int16Option->uintptr */ func MapUintptrToInt16OptionOption(m Int16OptionOption, f func(Int16Option) uintptr) UintptrOption {  if m.IsDefined() { return Uintptr(f(*m.value)) } else { return NoneUintptrOption }  }
/* Int16OptionOption: Int16Option->byte */ func MapByteToInt16OptionOption(m Int16OptionOption, f func(Int16Option) byte) ByteOption {  if m.IsDefined() { return Byte(f(*m.value)) } else { return NoneByteOption }  }
/* Int16OptionOption: Int16Option->rune */ func MapRuneToInt16OptionOption(m Int16OptionOption, f func(Int16Option) rune) RuneOption {  if m.IsDefined() { return Rune(f(*m.value)) } else { return NoneRuneOption }  }
/* Int16OptionOption: Int16Option->float32 */ func MapFloat32ToInt16OptionOption(m Int16OptionOption, f func(Int16Option) float32) Float32Option {  if m.IsDefined() { return Float32(f(*m.value)) } else { return NoneFloat32Option }  }
/* Int16OptionOption: Int16Option->float64 */ func MapFloat64ToInt16OptionOption(m Int16OptionOption, f func(Int16Option) float64) Float64Option {  if m.IsDefined() { return Float64(f(*m.value)) } else { return NoneFloat64Option }  }
/* Int16OptionOption: Int16Option->complex64 */ func MapComplex64ToInt16OptionOption(m Int16OptionOption, f func(Int16Option) complex64) Complex64Option {  if m.IsDefined() { return Complex64(f(*m.value)) } else { return NoneComplex64Option }  }
/* Int16OptionOption: Int16Option->complex128 */ func MapComplex128ToInt16OptionOption(m Int16OptionOption, f func(Int16Option) complex128) Complex128Option {  if m.IsDefined() { return Complex128(f(*m.value)) } else { return NoneComplex128Option }  }
/* Int16OptionOption: Int16Option->Any */ func MapAnyToInt16OptionOption(m Int16OptionOption, f func(Int16Option) Any) AnyOption {  if m.IsDefined() { return AnyOpt(f(*m.value)) } else { return NoneAnyOption }  }
/* Int16OptionOption: Int16Option->BoolOption */ func MapBoolOptionToInt16OptionOption(m Int16OptionOption, f func(Int16Option) BoolOption) BoolOptionOption {  if m.IsDefined() { return BoolBool(f(*m.value)) } else { return NoneBoolOptionOption }  }
/* Int16OptionOption: Int16Option->StringOption */ func MapStringOptionToInt16OptionOption(m Int16OptionOption, f func(Int16Option) StringOption) StringOptionOption {  if m.IsDefined() { return StringString(f(*m.value)) } else { return NoneStringOptionOption }  }
/* Int16OptionOption: Int16Option->IntOption */ func MapIntOptionToInt16OptionOption(m Int16OptionOption, f func(Int16Option) IntOption) IntOptionOption {  if m.IsDefined() { return IntInt(f(*m.value)) } else { return NoneIntOptionOption }  }
/* Int16OptionOption: Int16Option->Int8Option */ func MapInt8OptionToInt16OptionOption(m Int16OptionOption, f func(Int16Option) Int8Option) Int8OptionOption {  if m.IsDefined() { return Int8Int8(f(*m.value)) } else { return NoneInt8OptionOption }  }
/* Int16OptionOption: Int16Option->Int16Option */ func MapInt16OptionToInt16OptionOption(m Int16OptionOption, f func(Int16Option) Int16Option) Int16OptionOption {  if m.IsDefined() { return Int16Int16(f(*m.value)) } else { return NoneInt16OptionOption }  }
/* Int16OptionOption: Int16Option->Int32Option */ func MapInt32OptionToInt16OptionOption(m Int16OptionOption, f func(Int16Option) Int32Option) Int32OptionOption {  if m.IsDefined() { return Int32Int32(f(*m.value)) } else { return NoneInt32OptionOption }  }
/* Int16OptionOption: Int16Option->Int64Option */ func MapInt64OptionToInt16OptionOption(m Int16OptionOption, f func(Int16Option) Int64Option) Int64OptionOption {  if m.IsDefined() { return Int64Int64(f(*m.value)) } else { return NoneInt64OptionOption }  }
/* Int16OptionOption: Int16Option->UintOption */ func MapUintOptionToInt16OptionOption(m Int16OptionOption, f func(Int16Option) UintOption) UintOptionOption {  if m.IsDefined() { return UintUint(f(*m.value)) } else { return NoneUintOptionOption }  }
/* Int16OptionOption: Int16Option->Uint8Option */ func MapUint8OptionToInt16OptionOption(m Int16OptionOption, f func(Int16Option) Uint8Option) Uint8OptionOption {  if m.IsDefined() { return Uint8Uint8(f(*m.value)) } else { return NoneUint8OptionOption }  }
/* Int16OptionOption: Int16Option->Uint16Option */ func MapUint16OptionToInt16OptionOption(m Int16OptionOption, f func(Int16Option) Uint16Option) Uint16OptionOption {  if m.IsDefined() { return Uint16Uint16(f(*m.value)) } else { return NoneUint16OptionOption }  }
/* Int16OptionOption: Int16Option->Uint32Option */ func MapUint32OptionToInt16OptionOption(m Int16OptionOption, f func(Int16Option) Uint32Option) Uint32OptionOption {  if m.IsDefined() { return Uint32Uint32(f(*m.value)) } else { return NoneUint32OptionOption }  }
/* Int16OptionOption: Int16Option->Uint64Option */ func MapUint64OptionToInt16OptionOption(m Int16OptionOption, f func(Int16Option) Uint64Option) Uint64OptionOption {  if m.IsDefined() { return Uint64Uint64(f(*m.value)) } else { return NoneUint64OptionOption }  }
/* Int16OptionOption: Int16Option->UintptrOption */ func MapUintptrOptionToInt16OptionOption(m Int16OptionOption, f func(Int16Option) UintptrOption) UintptrOptionOption {  if m.IsDefined() { return UintptrUintptr(f(*m.value)) } else { return NoneUintptrOptionOption }  }
/* Int16OptionOption: Int16Option->ByteOption */ func MapByteOptionToInt16OptionOption(m Int16OptionOption, f func(Int16Option) ByteOption) ByteOptionOption {  if m.IsDefined() { return ByteByte(f(*m.value)) } else { return NoneByteOptionOption }  }
/* Int16OptionOption: Int16Option->RuneOption */ func MapRuneOptionToInt16OptionOption(m Int16OptionOption, f func(Int16Option) RuneOption) RuneOptionOption {  if m.IsDefined() { return RuneRune(f(*m.value)) } else { return NoneRuneOptionOption }  }
/* Int16OptionOption: Int16Option->Float32Option */ func MapFloat32OptionToInt16OptionOption(m Int16OptionOption, f func(Int16Option) Float32Option) Float32OptionOption {  if m.IsDefined() { return Float32Float32(f(*m.value)) } else { return NoneFloat32OptionOption }  }
/* Int16OptionOption: Int16Option->Float64Option */ func MapFloat64OptionToInt16OptionOption(m Int16OptionOption, f func(Int16Option) Float64Option) Float64OptionOption {  if m.IsDefined() { return Float64Float64(f(*m.value)) } else { return NoneFloat64OptionOption }  }
/* Int16OptionOption: Int16Option->Complex64Option */ func MapComplex64OptionToInt16OptionOption(m Int16OptionOption, f func(Int16Option) Complex64Option) Complex64OptionOption {  if m.IsDefined() { return Complex64Complex64(f(*m.value)) } else { return NoneComplex64OptionOption }  }
/* Int16OptionOption: Int16Option->Complex128Option */ func MapComplex128OptionToInt16OptionOption(m Int16OptionOption, f func(Int16Option) Complex128Option) Complex128OptionOption {  if m.IsDefined() { return Complex128Complex128(f(*m.value)) } else { return NoneComplex128OptionOption }  }
/* Int16OptionOption: Int16Option->AnyOption */ func MapAnyOptionToInt16OptionOption(m Int16OptionOption, f func(Int16Option) AnyOption) AnyOptionOption {  if m.IsDefined() { return AnyOptAny(f(*m.value)) } else { return NoneAnyOptionOption }  }
/* Int16OptionOption: Int16Option->[]bool */ func MapBoolArrToInt16OptionOption(m Int16OptionOption, f func(Int16Option) []bool) BoolArrOption {  if m.IsDefined() { return BoolArrOpt(f(*m.value)) } else { return NoneBoolArrOption }  }
/* Int16OptionOption: Int16Option->[]string */ func MapStringArrToInt16OptionOption(m Int16OptionOption, f func(Int16Option) []string) StringArrOption {  if m.IsDefined() { return StringArrOpt(f(*m.value)) } else { return NoneStringArrOption }  }
/* Int16OptionOption: Int16Option->[]int */ func MapIntArrToInt16OptionOption(m Int16OptionOption, f func(Int16Option) []int) IntArrOption {  if m.IsDefined() { return IntArrOpt(f(*m.value)) } else { return NoneIntArrOption }  }
/* Int16OptionOption: Int16Option->[]int8 */ func MapInt8ArrToInt16OptionOption(m Int16OptionOption, f func(Int16Option) []int8) Int8ArrOption {  if m.IsDefined() { return Int8ArrOpt(f(*m.value)) } else { return NoneInt8ArrOption }  }
/* Int16OptionOption: Int16Option->[]int16 */ func MapInt16ArrToInt16OptionOption(m Int16OptionOption, f func(Int16Option) []int16) Int16ArrOption {  if m.IsDefined() { return Int16ArrOpt(f(*m.value)) } else { return NoneInt16ArrOption }  }
/* Int16OptionOption: Int16Option->[]int32 */ func MapInt32ArrToInt16OptionOption(m Int16OptionOption, f func(Int16Option) []int32) Int32ArrOption {  if m.IsDefined() { return Int32ArrOpt(f(*m.value)) } else { return NoneInt32ArrOption }  }
/* Int16OptionOption: Int16Option->[]int64 */ func MapInt64ArrToInt16OptionOption(m Int16OptionOption, f func(Int16Option) []int64) Int64ArrOption {  if m.IsDefined() { return Int64ArrOpt(f(*m.value)) } else { return NoneInt64ArrOption }  }
/* Int16OptionOption: Int16Option->[]uint */ func MapUintArrToInt16OptionOption(m Int16OptionOption, f func(Int16Option) []uint) UintArrOption {  if m.IsDefined() { return UintArrOpt(f(*m.value)) } else { return NoneUintArrOption }  }
/* Int16OptionOption: Int16Option->[]uint8 */ func MapUint8ArrToInt16OptionOption(m Int16OptionOption, f func(Int16Option) []uint8) Uint8ArrOption {  if m.IsDefined() { return Uint8ArrOpt(f(*m.value)) } else { return NoneUint8ArrOption }  }
/* Int16OptionOption: Int16Option->[]uint16 */ func MapUint16ArrToInt16OptionOption(m Int16OptionOption, f func(Int16Option) []uint16) Uint16ArrOption {  if m.IsDefined() { return Uint16ArrOpt(f(*m.value)) } else { return NoneUint16ArrOption }  }
/* Int16OptionOption: Int16Option->[]uint32 */ func MapUint32ArrToInt16OptionOption(m Int16OptionOption, f func(Int16Option) []uint32) Uint32ArrOption {  if m.IsDefined() { return Uint32ArrOpt(f(*m.value)) } else { return NoneUint32ArrOption }  }
/* Int16OptionOption: Int16Option->[]uint64 */ func MapUint64ArrToInt16OptionOption(m Int16OptionOption, f func(Int16Option) []uint64) Uint64ArrOption {  if m.IsDefined() { return Uint64ArrOpt(f(*m.value)) } else { return NoneUint64ArrOption }  }
/* Int16OptionOption: Int16Option->[]uintptr */ func MapUintptrArrToInt16OptionOption(m Int16OptionOption, f func(Int16Option) []uintptr) UintptrArrOption {  if m.IsDefined() { return UintptrArrOpt(f(*m.value)) } else { return NoneUintptrArrOption }  }
/* Int16OptionOption: Int16Option->[]byte */ func MapByteArrToInt16OptionOption(m Int16OptionOption, f func(Int16Option) []byte) ByteArrOption {  if m.IsDefined() { return ByteArrOpt(f(*m.value)) } else { return NoneByteArrOption }  }
/* Int16OptionOption: Int16Option->[]rune */ func MapRuneArrToInt16OptionOption(m Int16OptionOption, f func(Int16Option) []rune) RuneArrOption {  if m.IsDefined() { return RuneArrOpt(f(*m.value)) } else { return NoneRuneArrOption }  }
/* Int16OptionOption: Int16Option->[]float32 */ func MapFloat32ArrToInt16OptionOption(m Int16OptionOption, f func(Int16Option) []float32) Float32ArrOption {  if m.IsDefined() { return Float32ArrOpt(f(*m.value)) } else { return NoneFloat32ArrOption }  }
/* Int16OptionOption: Int16Option->[]float64 */ func MapFloat64ArrToInt16OptionOption(m Int16OptionOption, f func(Int16Option) []float64) Float64ArrOption {  if m.IsDefined() { return Float64ArrOpt(f(*m.value)) } else { return NoneFloat64ArrOption }  }
/* Int16OptionOption: Int16Option->[]complex64 */ func MapComplex64ArrToInt16OptionOption(m Int16OptionOption, f func(Int16Option) []complex64) Complex64ArrOption {  if m.IsDefined() { return Complex64ArrOpt(f(*m.value)) } else { return NoneComplex64ArrOption }  }
/* Int16OptionOption: Int16Option->[]complex128 */ func MapComplex128ArrToInt16OptionOption(m Int16OptionOption, f func(Int16Option) []complex128) Complex128ArrOption {  if m.IsDefined() { return Complex128ArrOpt(f(*m.value)) } else { return NoneComplex128ArrOption }  }
/* Int16OptionOption: Int16Option->[]Any */ func MapAnyArrToInt16OptionOption(m Int16OptionOption, f func(Int16Option) []Any) AnyArrOption {  if m.IsDefined() { return AnyArrOpt(f(*m.value)) } else { return NoneAnyArrOption }  }
/* Int16OptionOption: Int16Option->BoolList */ func MapBoolListToInt16OptionOption(m Int16OptionOption, f func(Int16Option) BoolList) BoolListOption {  if m.IsDefined() { return BoolListOpt(f(*m.value)) } else { return NoneBoolListOption }  }
/* Int16OptionOption: Int16Option->StringList */ func MapStringListToInt16OptionOption(m Int16OptionOption, f func(Int16Option) StringList) StringListOption {  if m.IsDefined() { return StringListOpt(f(*m.value)) } else { return NoneStringListOption }  }
/* Int16OptionOption: Int16Option->IntList */ func MapIntListToInt16OptionOption(m Int16OptionOption, f func(Int16Option) IntList) IntListOption {  if m.IsDefined() { return IntListOpt(f(*m.value)) } else { return NoneIntListOption }  }
/* Int16OptionOption: Int16Option->Int8List */ func MapInt8ListToInt16OptionOption(m Int16OptionOption, f func(Int16Option) Int8List) Int8ListOption {  if m.IsDefined() { return Int8ListOpt(f(*m.value)) } else { return NoneInt8ListOption }  }
/* Int16OptionOption: Int16Option->Int16List */ func MapInt16ListToInt16OptionOption(m Int16OptionOption, f func(Int16Option) Int16List) Int16ListOption {  if m.IsDefined() { return Int16ListOpt(f(*m.value)) } else { return NoneInt16ListOption }  }
/* Int16OptionOption: Int16Option->Int32List */ func MapInt32ListToInt16OptionOption(m Int16OptionOption, f func(Int16Option) Int32List) Int32ListOption {  if m.IsDefined() { return Int32ListOpt(f(*m.value)) } else { return NoneInt32ListOption }  }
/* Int16OptionOption: Int16Option->Int64List */ func MapInt64ListToInt16OptionOption(m Int16OptionOption, f func(Int16Option) Int64List) Int64ListOption {  if m.IsDefined() { return Int64ListOpt(f(*m.value)) } else { return NoneInt64ListOption }  }
/* Int16OptionOption: Int16Option->UintList */ func MapUintListToInt16OptionOption(m Int16OptionOption, f func(Int16Option) UintList) UintListOption {  if m.IsDefined() { return UintListOpt(f(*m.value)) } else { return NoneUintListOption }  }
/* Int16OptionOption: Int16Option->Uint8List */ func MapUint8ListToInt16OptionOption(m Int16OptionOption, f func(Int16Option) Uint8List) Uint8ListOption {  if m.IsDefined() { return Uint8ListOpt(f(*m.value)) } else { return NoneUint8ListOption }  }
/* Int16OptionOption: Int16Option->Uint16List */ func MapUint16ListToInt16OptionOption(m Int16OptionOption, f func(Int16Option) Uint16List) Uint16ListOption {  if m.IsDefined() { return Uint16ListOpt(f(*m.value)) } else { return NoneUint16ListOption }  }
/* Int16OptionOption: Int16Option->Uint32List */ func MapUint32ListToInt16OptionOption(m Int16OptionOption, f func(Int16Option) Uint32List) Uint32ListOption {  if m.IsDefined() { return Uint32ListOpt(f(*m.value)) } else { return NoneUint32ListOption }  }
/* Int16OptionOption: Int16Option->Uint64List */ func MapUint64ListToInt16OptionOption(m Int16OptionOption, f func(Int16Option) Uint64List) Uint64ListOption {  if m.IsDefined() { return Uint64ListOpt(f(*m.value)) } else { return NoneUint64ListOption }  }
/* Int16OptionOption: Int16Option->UintptrList */ func MapUintptrListToInt16OptionOption(m Int16OptionOption, f func(Int16Option) UintptrList) UintptrListOption {  if m.IsDefined() { return UintptrListOpt(f(*m.value)) } else { return NoneUintptrListOption }  }
/* Int16OptionOption: Int16Option->ByteList */ func MapByteListToInt16OptionOption(m Int16OptionOption, f func(Int16Option) ByteList) ByteListOption {  if m.IsDefined() { return ByteListOpt(f(*m.value)) } else { return NoneByteListOption }  }
/* Int16OptionOption: Int16Option->RuneList */ func MapRuneListToInt16OptionOption(m Int16OptionOption, f func(Int16Option) RuneList) RuneListOption {  if m.IsDefined() { return RuneListOpt(f(*m.value)) } else { return NoneRuneListOption }  }
/* Int16OptionOption: Int16Option->Float32List */ func MapFloat32ListToInt16OptionOption(m Int16OptionOption, f func(Int16Option) Float32List) Float32ListOption {  if m.IsDefined() { return Float32ListOpt(f(*m.value)) } else { return NoneFloat32ListOption }  }
/* Int16OptionOption: Int16Option->Float64List */ func MapFloat64ListToInt16OptionOption(m Int16OptionOption, f func(Int16Option) Float64List) Float64ListOption {  if m.IsDefined() { return Float64ListOpt(f(*m.value)) } else { return NoneFloat64ListOption }  }
/* Int16OptionOption: Int16Option->Complex64List */ func MapComplex64ListToInt16OptionOption(m Int16OptionOption, f func(Int16Option) Complex64List) Complex64ListOption {  if m.IsDefined() { return Complex64ListOpt(f(*m.value)) } else { return NoneComplex64ListOption }  }
/* Int16OptionOption: Int16Option->Complex128List */ func MapComplex128ListToInt16OptionOption(m Int16OptionOption, f func(Int16Option) Complex128List) Complex128ListOption {  if m.IsDefined() { return Complex128ListOpt(f(*m.value)) } else { return NoneComplex128ListOption }  }
/* Int16OptionOption: Int16Option->AnyList */ func MapAnyListToInt16OptionOption(m Int16OptionOption, f func(Int16Option) AnyList) AnyListOption {  if m.IsDefined() { return AnyListOpt(f(*m.value)) } else { return NoneAnyListOption }  }
/* Int32OptionOption: Int32Option->bool */ func MapBoolToInt32OptionOption(m Int32OptionOption, f func(Int32Option) bool) BoolOption {  if m.IsDefined() { return Bool(f(*m.value)) } else { return NoneBoolOption }  }
/* Int32OptionOption: Int32Option->string */ func MapStringToInt32OptionOption(m Int32OptionOption, f func(Int32Option) string) StringOption {  if m.IsDefined() { return String(f(*m.value)) } else { return NoneStringOption }  }
/* Int32OptionOption: Int32Option->int */ func MapIntToInt32OptionOption(m Int32OptionOption, f func(Int32Option) int) IntOption {  if m.IsDefined() { return Int(f(*m.value)) } else { return NoneIntOption }  }
/* Int32OptionOption: Int32Option->int8 */ func MapInt8ToInt32OptionOption(m Int32OptionOption, f func(Int32Option) int8) Int8Option {  if m.IsDefined() { return Int8(f(*m.value)) } else { return NoneInt8Option }  }
/* Int32OptionOption: Int32Option->int16 */ func MapInt16ToInt32OptionOption(m Int32OptionOption, f func(Int32Option) int16) Int16Option {  if m.IsDefined() { return Int16(f(*m.value)) } else { return NoneInt16Option }  }
/* Int32OptionOption: Int32Option->int32 */ func MapInt32ToInt32OptionOption(m Int32OptionOption, f func(Int32Option) int32) Int32Option {  if m.IsDefined() { return Int32(f(*m.value)) } else { return NoneInt32Option }  }
/* Int32OptionOption: Int32Option->int64 */ func MapInt64ToInt32OptionOption(m Int32OptionOption, f func(Int32Option) int64) Int64Option {  if m.IsDefined() { return Int64(f(*m.value)) } else { return NoneInt64Option }  }
/* Int32OptionOption: Int32Option->uint */ func MapUintToInt32OptionOption(m Int32OptionOption, f func(Int32Option) uint) UintOption {  if m.IsDefined() { return Uint(f(*m.value)) } else { return NoneUintOption }  }
/* Int32OptionOption: Int32Option->uint8 */ func MapUint8ToInt32OptionOption(m Int32OptionOption, f func(Int32Option) uint8) Uint8Option {  if m.IsDefined() { return Uint8(f(*m.value)) } else { return NoneUint8Option }  }
/* Int32OptionOption: Int32Option->uint16 */ func MapUint16ToInt32OptionOption(m Int32OptionOption, f func(Int32Option) uint16) Uint16Option {  if m.IsDefined() { return Uint16(f(*m.value)) } else { return NoneUint16Option }  }
/* Int32OptionOption: Int32Option->uint32 */ func MapUint32ToInt32OptionOption(m Int32OptionOption, f func(Int32Option) uint32) Uint32Option {  if m.IsDefined() { return Uint32(f(*m.value)) } else { return NoneUint32Option }  }
/* Int32OptionOption: Int32Option->uint64 */ func MapUint64ToInt32OptionOption(m Int32OptionOption, f func(Int32Option) uint64) Uint64Option {  if m.IsDefined() { return Uint64(f(*m.value)) } else { return NoneUint64Option }  }
/* Int32OptionOption: Int32Option->uintptr */ func MapUintptrToInt32OptionOption(m Int32OptionOption, f func(Int32Option) uintptr) UintptrOption {  if m.IsDefined() { return Uintptr(f(*m.value)) } else { return NoneUintptrOption }  }
/* Int32OptionOption: Int32Option->byte */ func MapByteToInt32OptionOption(m Int32OptionOption, f func(Int32Option) byte) ByteOption {  if m.IsDefined() { return Byte(f(*m.value)) } else { return NoneByteOption }  }
/* Int32OptionOption: Int32Option->rune */ func MapRuneToInt32OptionOption(m Int32OptionOption, f func(Int32Option) rune) RuneOption {  if m.IsDefined() { return Rune(f(*m.value)) } else { return NoneRuneOption }  }
/* Int32OptionOption: Int32Option->float32 */ func MapFloat32ToInt32OptionOption(m Int32OptionOption, f func(Int32Option) float32) Float32Option {  if m.IsDefined() { return Float32(f(*m.value)) } else { return NoneFloat32Option }  }
/* Int32OptionOption: Int32Option->float64 */ func MapFloat64ToInt32OptionOption(m Int32OptionOption, f func(Int32Option) float64) Float64Option {  if m.IsDefined() { return Float64(f(*m.value)) } else { return NoneFloat64Option }  }
/* Int32OptionOption: Int32Option->complex64 */ func MapComplex64ToInt32OptionOption(m Int32OptionOption, f func(Int32Option) complex64) Complex64Option {  if m.IsDefined() { return Complex64(f(*m.value)) } else { return NoneComplex64Option }  }
/* Int32OptionOption: Int32Option->complex128 */ func MapComplex128ToInt32OptionOption(m Int32OptionOption, f func(Int32Option) complex128) Complex128Option {  if m.IsDefined() { return Complex128(f(*m.value)) } else { return NoneComplex128Option }  }
/* Int32OptionOption: Int32Option->Any */ func MapAnyToInt32OptionOption(m Int32OptionOption, f func(Int32Option) Any) AnyOption {  if m.IsDefined() { return AnyOpt(f(*m.value)) } else { return NoneAnyOption }  }
/* Int32OptionOption: Int32Option->BoolOption */ func MapBoolOptionToInt32OptionOption(m Int32OptionOption, f func(Int32Option) BoolOption) BoolOptionOption {  if m.IsDefined() { return BoolBool(f(*m.value)) } else { return NoneBoolOptionOption }  }
/* Int32OptionOption: Int32Option->StringOption */ func MapStringOptionToInt32OptionOption(m Int32OptionOption, f func(Int32Option) StringOption) StringOptionOption {  if m.IsDefined() { return StringString(f(*m.value)) } else { return NoneStringOptionOption }  }
/* Int32OptionOption: Int32Option->IntOption */ func MapIntOptionToInt32OptionOption(m Int32OptionOption, f func(Int32Option) IntOption) IntOptionOption {  if m.IsDefined() { return IntInt(f(*m.value)) } else { return NoneIntOptionOption }  }
/* Int32OptionOption: Int32Option->Int8Option */ func MapInt8OptionToInt32OptionOption(m Int32OptionOption, f func(Int32Option) Int8Option) Int8OptionOption {  if m.IsDefined() { return Int8Int8(f(*m.value)) } else { return NoneInt8OptionOption }  }
/* Int32OptionOption: Int32Option->Int16Option */ func MapInt16OptionToInt32OptionOption(m Int32OptionOption, f func(Int32Option) Int16Option) Int16OptionOption {  if m.IsDefined() { return Int16Int16(f(*m.value)) } else { return NoneInt16OptionOption }  }
/* Int32OptionOption: Int32Option->Int32Option */ func MapInt32OptionToInt32OptionOption(m Int32OptionOption, f func(Int32Option) Int32Option) Int32OptionOption {  if m.IsDefined() { return Int32Int32(f(*m.value)) } else { return NoneInt32OptionOption }  }
/* Int32OptionOption: Int32Option->Int64Option */ func MapInt64OptionToInt32OptionOption(m Int32OptionOption, f func(Int32Option) Int64Option) Int64OptionOption {  if m.IsDefined() { return Int64Int64(f(*m.value)) } else { return NoneInt64OptionOption }  }
/* Int32OptionOption: Int32Option->UintOption */ func MapUintOptionToInt32OptionOption(m Int32OptionOption, f func(Int32Option) UintOption) UintOptionOption {  if m.IsDefined() { return UintUint(f(*m.value)) } else { return NoneUintOptionOption }  }
/* Int32OptionOption: Int32Option->Uint8Option */ func MapUint8OptionToInt32OptionOption(m Int32OptionOption, f func(Int32Option) Uint8Option) Uint8OptionOption {  if m.IsDefined() { return Uint8Uint8(f(*m.value)) } else { return NoneUint8OptionOption }  }
/* Int32OptionOption: Int32Option->Uint16Option */ func MapUint16OptionToInt32OptionOption(m Int32OptionOption, f func(Int32Option) Uint16Option) Uint16OptionOption {  if m.IsDefined() { return Uint16Uint16(f(*m.value)) } else { return NoneUint16OptionOption }  }
/* Int32OptionOption: Int32Option->Uint32Option */ func MapUint32OptionToInt32OptionOption(m Int32OptionOption, f func(Int32Option) Uint32Option) Uint32OptionOption {  if m.IsDefined() { return Uint32Uint32(f(*m.value)) } else { return NoneUint32OptionOption }  }
/* Int32OptionOption: Int32Option->Uint64Option */ func MapUint64OptionToInt32OptionOption(m Int32OptionOption, f func(Int32Option) Uint64Option) Uint64OptionOption {  if m.IsDefined() { return Uint64Uint64(f(*m.value)) } else { return NoneUint64OptionOption }  }
/* Int32OptionOption: Int32Option->UintptrOption */ func MapUintptrOptionToInt32OptionOption(m Int32OptionOption, f func(Int32Option) UintptrOption) UintptrOptionOption {  if m.IsDefined() { return UintptrUintptr(f(*m.value)) } else { return NoneUintptrOptionOption }  }
/* Int32OptionOption: Int32Option->ByteOption */ func MapByteOptionToInt32OptionOption(m Int32OptionOption, f func(Int32Option) ByteOption) ByteOptionOption {  if m.IsDefined() { return ByteByte(f(*m.value)) } else { return NoneByteOptionOption }  }
/* Int32OptionOption: Int32Option->RuneOption */ func MapRuneOptionToInt32OptionOption(m Int32OptionOption, f func(Int32Option) RuneOption) RuneOptionOption {  if m.IsDefined() { return RuneRune(f(*m.value)) } else { return NoneRuneOptionOption }  }
/* Int32OptionOption: Int32Option->Float32Option */ func MapFloat32OptionToInt32OptionOption(m Int32OptionOption, f func(Int32Option) Float32Option) Float32OptionOption {  if m.IsDefined() { return Float32Float32(f(*m.value)) } else { return NoneFloat32OptionOption }  }
/* Int32OptionOption: Int32Option->Float64Option */ func MapFloat64OptionToInt32OptionOption(m Int32OptionOption, f func(Int32Option) Float64Option) Float64OptionOption {  if m.IsDefined() { return Float64Float64(f(*m.value)) } else { return NoneFloat64OptionOption }  }
/* Int32OptionOption: Int32Option->Complex64Option */ func MapComplex64OptionToInt32OptionOption(m Int32OptionOption, f func(Int32Option) Complex64Option) Complex64OptionOption {  if m.IsDefined() { return Complex64Complex64(f(*m.value)) } else { return NoneComplex64OptionOption }  }
/* Int32OptionOption: Int32Option->Complex128Option */ func MapComplex128OptionToInt32OptionOption(m Int32OptionOption, f func(Int32Option) Complex128Option) Complex128OptionOption {  if m.IsDefined() { return Complex128Complex128(f(*m.value)) } else { return NoneComplex128OptionOption }  }
/* Int32OptionOption: Int32Option->AnyOption */ func MapAnyOptionToInt32OptionOption(m Int32OptionOption, f func(Int32Option) AnyOption) AnyOptionOption {  if m.IsDefined() { return AnyOptAny(f(*m.value)) } else { return NoneAnyOptionOption }  }
/* Int32OptionOption: Int32Option->[]bool */ func MapBoolArrToInt32OptionOption(m Int32OptionOption, f func(Int32Option) []bool) BoolArrOption {  if m.IsDefined() { return BoolArrOpt(f(*m.value)) } else { return NoneBoolArrOption }  }
/* Int32OptionOption: Int32Option->[]string */ func MapStringArrToInt32OptionOption(m Int32OptionOption, f func(Int32Option) []string) StringArrOption {  if m.IsDefined() { return StringArrOpt(f(*m.value)) } else { return NoneStringArrOption }  }
/* Int32OptionOption: Int32Option->[]int */ func MapIntArrToInt32OptionOption(m Int32OptionOption, f func(Int32Option) []int) IntArrOption {  if m.IsDefined() { return IntArrOpt(f(*m.value)) } else { return NoneIntArrOption }  }
/* Int32OptionOption: Int32Option->[]int8 */ func MapInt8ArrToInt32OptionOption(m Int32OptionOption, f func(Int32Option) []int8) Int8ArrOption {  if m.IsDefined() { return Int8ArrOpt(f(*m.value)) } else { return NoneInt8ArrOption }  }
/* Int32OptionOption: Int32Option->[]int16 */ func MapInt16ArrToInt32OptionOption(m Int32OptionOption, f func(Int32Option) []int16) Int16ArrOption {  if m.IsDefined() { return Int16ArrOpt(f(*m.value)) } else { return NoneInt16ArrOption }  }
/* Int32OptionOption: Int32Option->[]int32 */ func MapInt32ArrToInt32OptionOption(m Int32OptionOption, f func(Int32Option) []int32) Int32ArrOption {  if m.IsDefined() { return Int32ArrOpt(f(*m.value)) } else { return NoneInt32ArrOption }  }
/* Int32OptionOption: Int32Option->[]int64 */ func MapInt64ArrToInt32OptionOption(m Int32OptionOption, f func(Int32Option) []int64) Int64ArrOption {  if m.IsDefined() { return Int64ArrOpt(f(*m.value)) } else { return NoneInt64ArrOption }  }
/* Int32OptionOption: Int32Option->[]uint */ func MapUintArrToInt32OptionOption(m Int32OptionOption, f func(Int32Option) []uint) UintArrOption {  if m.IsDefined() { return UintArrOpt(f(*m.value)) } else { return NoneUintArrOption }  }
/* Int32OptionOption: Int32Option->[]uint8 */ func MapUint8ArrToInt32OptionOption(m Int32OptionOption, f func(Int32Option) []uint8) Uint8ArrOption {  if m.IsDefined() { return Uint8ArrOpt(f(*m.value)) } else { return NoneUint8ArrOption }  }
/* Int32OptionOption: Int32Option->[]uint16 */ func MapUint16ArrToInt32OptionOption(m Int32OptionOption, f func(Int32Option) []uint16) Uint16ArrOption {  if m.IsDefined() { return Uint16ArrOpt(f(*m.value)) } else { return NoneUint16ArrOption }  }
/* Int32OptionOption: Int32Option->[]uint32 */ func MapUint32ArrToInt32OptionOption(m Int32OptionOption, f func(Int32Option) []uint32) Uint32ArrOption {  if m.IsDefined() { return Uint32ArrOpt(f(*m.value)) } else { return NoneUint32ArrOption }  }
/* Int32OptionOption: Int32Option->[]uint64 */ func MapUint64ArrToInt32OptionOption(m Int32OptionOption, f func(Int32Option) []uint64) Uint64ArrOption {  if m.IsDefined() { return Uint64ArrOpt(f(*m.value)) } else { return NoneUint64ArrOption }  }
/* Int32OptionOption: Int32Option->[]uintptr */ func MapUintptrArrToInt32OptionOption(m Int32OptionOption, f func(Int32Option) []uintptr) UintptrArrOption {  if m.IsDefined() { return UintptrArrOpt(f(*m.value)) } else { return NoneUintptrArrOption }  }
/* Int32OptionOption: Int32Option->[]byte */ func MapByteArrToInt32OptionOption(m Int32OptionOption, f func(Int32Option) []byte) ByteArrOption {  if m.IsDefined() { return ByteArrOpt(f(*m.value)) } else { return NoneByteArrOption }  }
/* Int32OptionOption: Int32Option->[]rune */ func MapRuneArrToInt32OptionOption(m Int32OptionOption, f func(Int32Option) []rune) RuneArrOption {  if m.IsDefined() { return RuneArrOpt(f(*m.value)) } else { return NoneRuneArrOption }  }
/* Int32OptionOption: Int32Option->[]float32 */ func MapFloat32ArrToInt32OptionOption(m Int32OptionOption, f func(Int32Option) []float32) Float32ArrOption {  if m.IsDefined() { return Float32ArrOpt(f(*m.value)) } else { return NoneFloat32ArrOption }  }
/* Int32OptionOption: Int32Option->[]float64 */ func MapFloat64ArrToInt32OptionOption(m Int32OptionOption, f func(Int32Option) []float64) Float64ArrOption {  if m.IsDefined() { return Float64ArrOpt(f(*m.value)) } else { return NoneFloat64ArrOption }  }
/* Int32OptionOption: Int32Option->[]complex64 */ func MapComplex64ArrToInt32OptionOption(m Int32OptionOption, f func(Int32Option) []complex64) Complex64ArrOption {  if m.IsDefined() { return Complex64ArrOpt(f(*m.value)) } else { return NoneComplex64ArrOption }  }
/* Int32OptionOption: Int32Option->[]complex128 */ func MapComplex128ArrToInt32OptionOption(m Int32OptionOption, f func(Int32Option) []complex128) Complex128ArrOption {  if m.IsDefined() { return Complex128ArrOpt(f(*m.value)) } else { return NoneComplex128ArrOption }  }
/* Int32OptionOption: Int32Option->[]Any */ func MapAnyArrToInt32OptionOption(m Int32OptionOption, f func(Int32Option) []Any) AnyArrOption {  if m.IsDefined() { return AnyArrOpt(f(*m.value)) } else { return NoneAnyArrOption }  }
/* Int32OptionOption: Int32Option->BoolList */ func MapBoolListToInt32OptionOption(m Int32OptionOption, f func(Int32Option) BoolList) BoolListOption {  if m.IsDefined() { return BoolListOpt(f(*m.value)) } else { return NoneBoolListOption }  }
/* Int32OptionOption: Int32Option->StringList */ func MapStringListToInt32OptionOption(m Int32OptionOption, f func(Int32Option) StringList) StringListOption {  if m.IsDefined() { return StringListOpt(f(*m.value)) } else { return NoneStringListOption }  }
/* Int32OptionOption: Int32Option->IntList */ func MapIntListToInt32OptionOption(m Int32OptionOption, f func(Int32Option) IntList) IntListOption {  if m.IsDefined() { return IntListOpt(f(*m.value)) } else { return NoneIntListOption }  }
/* Int32OptionOption: Int32Option->Int8List */ func MapInt8ListToInt32OptionOption(m Int32OptionOption, f func(Int32Option) Int8List) Int8ListOption {  if m.IsDefined() { return Int8ListOpt(f(*m.value)) } else { return NoneInt8ListOption }  }
/* Int32OptionOption: Int32Option->Int16List */ func MapInt16ListToInt32OptionOption(m Int32OptionOption, f func(Int32Option) Int16List) Int16ListOption {  if m.IsDefined() { return Int16ListOpt(f(*m.value)) } else { return NoneInt16ListOption }  }
/* Int32OptionOption: Int32Option->Int32List */ func MapInt32ListToInt32OptionOption(m Int32OptionOption, f func(Int32Option) Int32List) Int32ListOption {  if m.IsDefined() { return Int32ListOpt(f(*m.value)) } else { return NoneInt32ListOption }  }
/* Int32OptionOption: Int32Option->Int64List */ func MapInt64ListToInt32OptionOption(m Int32OptionOption, f func(Int32Option) Int64List) Int64ListOption {  if m.IsDefined() { return Int64ListOpt(f(*m.value)) } else { return NoneInt64ListOption }  }
/* Int32OptionOption: Int32Option->UintList */ func MapUintListToInt32OptionOption(m Int32OptionOption, f func(Int32Option) UintList) UintListOption {  if m.IsDefined() { return UintListOpt(f(*m.value)) } else { return NoneUintListOption }  }
/* Int32OptionOption: Int32Option->Uint8List */ func MapUint8ListToInt32OptionOption(m Int32OptionOption, f func(Int32Option) Uint8List) Uint8ListOption {  if m.IsDefined() { return Uint8ListOpt(f(*m.value)) } else { return NoneUint8ListOption }  }
/* Int32OptionOption: Int32Option->Uint16List */ func MapUint16ListToInt32OptionOption(m Int32OptionOption, f func(Int32Option) Uint16List) Uint16ListOption {  if m.IsDefined() { return Uint16ListOpt(f(*m.value)) } else { return NoneUint16ListOption }  }
/* Int32OptionOption: Int32Option->Uint32List */ func MapUint32ListToInt32OptionOption(m Int32OptionOption, f func(Int32Option) Uint32List) Uint32ListOption {  if m.IsDefined() { return Uint32ListOpt(f(*m.value)) } else { return NoneUint32ListOption }  }
/* Int32OptionOption: Int32Option->Uint64List */ func MapUint64ListToInt32OptionOption(m Int32OptionOption, f func(Int32Option) Uint64List) Uint64ListOption {  if m.IsDefined() { return Uint64ListOpt(f(*m.value)) } else { return NoneUint64ListOption }  }
/* Int32OptionOption: Int32Option->UintptrList */ func MapUintptrListToInt32OptionOption(m Int32OptionOption, f func(Int32Option) UintptrList) UintptrListOption {  if m.IsDefined() { return UintptrListOpt(f(*m.value)) } else { return NoneUintptrListOption }  }
/* Int32OptionOption: Int32Option->ByteList */ func MapByteListToInt32OptionOption(m Int32OptionOption, f func(Int32Option) ByteList) ByteListOption {  if m.IsDefined() { return ByteListOpt(f(*m.value)) } else { return NoneByteListOption }  }
/* Int32OptionOption: Int32Option->RuneList */ func MapRuneListToInt32OptionOption(m Int32OptionOption, f func(Int32Option) RuneList) RuneListOption {  if m.IsDefined() { return RuneListOpt(f(*m.value)) } else { return NoneRuneListOption }  }
/* Int32OptionOption: Int32Option->Float32List */ func MapFloat32ListToInt32OptionOption(m Int32OptionOption, f func(Int32Option) Float32List) Float32ListOption {  if m.IsDefined() { return Float32ListOpt(f(*m.value)) } else { return NoneFloat32ListOption }  }
/* Int32OptionOption: Int32Option->Float64List */ func MapFloat64ListToInt32OptionOption(m Int32OptionOption, f func(Int32Option) Float64List) Float64ListOption {  if m.IsDefined() { return Float64ListOpt(f(*m.value)) } else { return NoneFloat64ListOption }  }
/* Int32OptionOption: Int32Option->Complex64List */ func MapComplex64ListToInt32OptionOption(m Int32OptionOption, f func(Int32Option) Complex64List) Complex64ListOption {  if m.IsDefined() { return Complex64ListOpt(f(*m.value)) } else { return NoneComplex64ListOption }  }
/* Int32OptionOption: Int32Option->Complex128List */ func MapComplex128ListToInt32OptionOption(m Int32OptionOption, f func(Int32Option) Complex128List) Complex128ListOption {  if m.IsDefined() { return Complex128ListOpt(f(*m.value)) } else { return NoneComplex128ListOption }  }
/* Int32OptionOption: Int32Option->AnyList */ func MapAnyListToInt32OptionOption(m Int32OptionOption, f func(Int32Option) AnyList) AnyListOption {  if m.IsDefined() { return AnyListOpt(f(*m.value)) } else { return NoneAnyListOption }  }
/* Int64OptionOption: Int64Option->bool */ func MapBoolToInt64OptionOption(m Int64OptionOption, f func(Int64Option) bool) BoolOption {  if m.IsDefined() { return Bool(f(*m.value)) } else { return NoneBoolOption }  }
/* Int64OptionOption: Int64Option->string */ func MapStringToInt64OptionOption(m Int64OptionOption, f func(Int64Option) string) StringOption {  if m.IsDefined() { return String(f(*m.value)) } else { return NoneStringOption }  }
/* Int64OptionOption: Int64Option->int */ func MapIntToInt64OptionOption(m Int64OptionOption, f func(Int64Option) int) IntOption {  if m.IsDefined() { return Int(f(*m.value)) } else { return NoneIntOption }  }
/* Int64OptionOption: Int64Option->int8 */ func MapInt8ToInt64OptionOption(m Int64OptionOption, f func(Int64Option) int8) Int8Option {  if m.IsDefined() { return Int8(f(*m.value)) } else { return NoneInt8Option }  }
/* Int64OptionOption: Int64Option->int16 */ func MapInt16ToInt64OptionOption(m Int64OptionOption, f func(Int64Option) int16) Int16Option {  if m.IsDefined() { return Int16(f(*m.value)) } else { return NoneInt16Option }  }
/* Int64OptionOption: Int64Option->int32 */ func MapInt32ToInt64OptionOption(m Int64OptionOption, f func(Int64Option) int32) Int32Option {  if m.IsDefined() { return Int32(f(*m.value)) } else { return NoneInt32Option }  }
/* Int64OptionOption: Int64Option->int64 */ func MapInt64ToInt64OptionOption(m Int64OptionOption, f func(Int64Option) int64) Int64Option {  if m.IsDefined() { return Int64(f(*m.value)) } else { return NoneInt64Option }  }
/* Int64OptionOption: Int64Option->uint */ func MapUintToInt64OptionOption(m Int64OptionOption, f func(Int64Option) uint) UintOption {  if m.IsDefined() { return Uint(f(*m.value)) } else { return NoneUintOption }  }
/* Int64OptionOption: Int64Option->uint8 */ func MapUint8ToInt64OptionOption(m Int64OptionOption, f func(Int64Option) uint8) Uint8Option {  if m.IsDefined() { return Uint8(f(*m.value)) } else { return NoneUint8Option }  }
/* Int64OptionOption: Int64Option->uint16 */ func MapUint16ToInt64OptionOption(m Int64OptionOption, f func(Int64Option) uint16) Uint16Option {  if m.IsDefined() { return Uint16(f(*m.value)) } else { return NoneUint16Option }  }
/* Int64OptionOption: Int64Option->uint32 */ func MapUint32ToInt64OptionOption(m Int64OptionOption, f func(Int64Option) uint32) Uint32Option {  if m.IsDefined() { return Uint32(f(*m.value)) } else { return NoneUint32Option }  }
/* Int64OptionOption: Int64Option->uint64 */ func MapUint64ToInt64OptionOption(m Int64OptionOption, f func(Int64Option) uint64) Uint64Option {  if m.IsDefined() { return Uint64(f(*m.value)) } else { return NoneUint64Option }  }
/* Int64OptionOption: Int64Option->uintptr */ func MapUintptrToInt64OptionOption(m Int64OptionOption, f func(Int64Option) uintptr) UintptrOption {  if m.IsDefined() { return Uintptr(f(*m.value)) } else { return NoneUintptrOption }  }
/* Int64OptionOption: Int64Option->byte */ func MapByteToInt64OptionOption(m Int64OptionOption, f func(Int64Option) byte) ByteOption {  if m.IsDefined() { return Byte(f(*m.value)) } else { return NoneByteOption }  }
/* Int64OptionOption: Int64Option->rune */ func MapRuneToInt64OptionOption(m Int64OptionOption, f func(Int64Option) rune) RuneOption {  if m.IsDefined() { return Rune(f(*m.value)) } else { return NoneRuneOption }  }
/* Int64OptionOption: Int64Option->float32 */ func MapFloat32ToInt64OptionOption(m Int64OptionOption, f func(Int64Option) float32) Float32Option {  if m.IsDefined() { return Float32(f(*m.value)) } else { return NoneFloat32Option }  }
/* Int64OptionOption: Int64Option->float64 */ func MapFloat64ToInt64OptionOption(m Int64OptionOption, f func(Int64Option) float64) Float64Option {  if m.IsDefined() { return Float64(f(*m.value)) } else { return NoneFloat64Option }  }
/* Int64OptionOption: Int64Option->complex64 */ func MapComplex64ToInt64OptionOption(m Int64OptionOption, f func(Int64Option) complex64) Complex64Option {  if m.IsDefined() { return Complex64(f(*m.value)) } else { return NoneComplex64Option }  }
/* Int64OptionOption: Int64Option->complex128 */ func MapComplex128ToInt64OptionOption(m Int64OptionOption, f func(Int64Option) complex128) Complex128Option {  if m.IsDefined() { return Complex128(f(*m.value)) } else { return NoneComplex128Option }  }
/* Int64OptionOption: Int64Option->Any */ func MapAnyToInt64OptionOption(m Int64OptionOption, f func(Int64Option) Any) AnyOption {  if m.IsDefined() { return AnyOpt(f(*m.value)) } else { return NoneAnyOption }  }
/* Int64OptionOption: Int64Option->BoolOption */ func MapBoolOptionToInt64OptionOption(m Int64OptionOption, f func(Int64Option) BoolOption) BoolOptionOption {  if m.IsDefined() { return BoolBool(f(*m.value)) } else { return NoneBoolOptionOption }  }
/* Int64OptionOption: Int64Option->StringOption */ func MapStringOptionToInt64OptionOption(m Int64OptionOption, f func(Int64Option) StringOption) StringOptionOption {  if m.IsDefined() { return StringString(f(*m.value)) } else { return NoneStringOptionOption }  }
/* Int64OptionOption: Int64Option->IntOption */ func MapIntOptionToInt64OptionOption(m Int64OptionOption, f func(Int64Option) IntOption) IntOptionOption {  if m.IsDefined() { return IntInt(f(*m.value)) } else { return NoneIntOptionOption }  }
/* Int64OptionOption: Int64Option->Int8Option */ func MapInt8OptionToInt64OptionOption(m Int64OptionOption, f func(Int64Option) Int8Option) Int8OptionOption {  if m.IsDefined() { return Int8Int8(f(*m.value)) } else { return NoneInt8OptionOption }  }
/* Int64OptionOption: Int64Option->Int16Option */ func MapInt16OptionToInt64OptionOption(m Int64OptionOption, f func(Int64Option) Int16Option) Int16OptionOption {  if m.IsDefined() { return Int16Int16(f(*m.value)) } else { return NoneInt16OptionOption }  }
/* Int64OptionOption: Int64Option->Int32Option */ func MapInt32OptionToInt64OptionOption(m Int64OptionOption, f func(Int64Option) Int32Option) Int32OptionOption {  if m.IsDefined() { return Int32Int32(f(*m.value)) } else { return NoneInt32OptionOption }  }
/* Int64OptionOption: Int64Option->Int64Option */ func MapInt64OptionToInt64OptionOption(m Int64OptionOption, f func(Int64Option) Int64Option) Int64OptionOption {  if m.IsDefined() { return Int64Int64(f(*m.value)) } else { return NoneInt64OptionOption }  }
/* Int64OptionOption: Int64Option->UintOption */ func MapUintOptionToInt64OptionOption(m Int64OptionOption, f func(Int64Option) UintOption) UintOptionOption {  if m.IsDefined() { return UintUint(f(*m.value)) } else { return NoneUintOptionOption }  }
/* Int64OptionOption: Int64Option->Uint8Option */ func MapUint8OptionToInt64OptionOption(m Int64OptionOption, f func(Int64Option) Uint8Option) Uint8OptionOption {  if m.IsDefined() { return Uint8Uint8(f(*m.value)) } else { return NoneUint8OptionOption }  }
/* Int64OptionOption: Int64Option->Uint16Option */ func MapUint16OptionToInt64OptionOption(m Int64OptionOption, f func(Int64Option) Uint16Option) Uint16OptionOption {  if m.IsDefined() { return Uint16Uint16(f(*m.value)) } else { return NoneUint16OptionOption }  }
/* Int64OptionOption: Int64Option->Uint32Option */ func MapUint32OptionToInt64OptionOption(m Int64OptionOption, f func(Int64Option) Uint32Option) Uint32OptionOption {  if m.IsDefined() { return Uint32Uint32(f(*m.value)) } else { return NoneUint32OptionOption }  }
/* Int64OptionOption: Int64Option->Uint64Option */ func MapUint64OptionToInt64OptionOption(m Int64OptionOption, f func(Int64Option) Uint64Option) Uint64OptionOption {  if m.IsDefined() { return Uint64Uint64(f(*m.value)) } else { return NoneUint64OptionOption }  }
/* Int64OptionOption: Int64Option->UintptrOption */ func MapUintptrOptionToInt64OptionOption(m Int64OptionOption, f func(Int64Option) UintptrOption) UintptrOptionOption {  if m.IsDefined() { return UintptrUintptr(f(*m.value)) } else { return NoneUintptrOptionOption }  }
/* Int64OptionOption: Int64Option->ByteOption */ func MapByteOptionToInt64OptionOption(m Int64OptionOption, f func(Int64Option) ByteOption) ByteOptionOption {  if m.IsDefined() { return ByteByte(f(*m.value)) } else { return NoneByteOptionOption }  }
/* Int64OptionOption: Int64Option->RuneOption */ func MapRuneOptionToInt64OptionOption(m Int64OptionOption, f func(Int64Option) RuneOption) RuneOptionOption {  if m.IsDefined() { return RuneRune(f(*m.value)) } else { return NoneRuneOptionOption }  }
/* Int64OptionOption: Int64Option->Float32Option */ func MapFloat32OptionToInt64OptionOption(m Int64OptionOption, f func(Int64Option) Float32Option) Float32OptionOption {  if m.IsDefined() { return Float32Float32(f(*m.value)) } else { return NoneFloat32OptionOption }  }
/* Int64OptionOption: Int64Option->Float64Option */ func MapFloat64OptionToInt64OptionOption(m Int64OptionOption, f func(Int64Option) Float64Option) Float64OptionOption {  if m.IsDefined() { return Float64Float64(f(*m.value)) } else { return NoneFloat64OptionOption }  }
/* Int64OptionOption: Int64Option->Complex64Option */ func MapComplex64OptionToInt64OptionOption(m Int64OptionOption, f func(Int64Option) Complex64Option) Complex64OptionOption {  if m.IsDefined() { return Complex64Complex64(f(*m.value)) } else { return NoneComplex64OptionOption }  }
/* Int64OptionOption: Int64Option->Complex128Option */ func MapComplex128OptionToInt64OptionOption(m Int64OptionOption, f func(Int64Option) Complex128Option) Complex128OptionOption {  if m.IsDefined() { return Complex128Complex128(f(*m.value)) } else { return NoneComplex128OptionOption }  }
/* Int64OptionOption: Int64Option->AnyOption */ func MapAnyOptionToInt64OptionOption(m Int64OptionOption, f func(Int64Option) AnyOption) AnyOptionOption {  if m.IsDefined() { return AnyOptAny(f(*m.value)) } else { return NoneAnyOptionOption }  }
/* Int64OptionOption: Int64Option->[]bool */ func MapBoolArrToInt64OptionOption(m Int64OptionOption, f func(Int64Option) []bool) BoolArrOption {  if m.IsDefined() { return BoolArrOpt(f(*m.value)) } else { return NoneBoolArrOption }  }
/* Int64OptionOption: Int64Option->[]string */ func MapStringArrToInt64OptionOption(m Int64OptionOption, f func(Int64Option) []string) StringArrOption {  if m.IsDefined() { return StringArrOpt(f(*m.value)) } else { return NoneStringArrOption }  }
/* Int64OptionOption: Int64Option->[]int */ func MapIntArrToInt64OptionOption(m Int64OptionOption, f func(Int64Option) []int) IntArrOption {  if m.IsDefined() { return IntArrOpt(f(*m.value)) } else { return NoneIntArrOption }  }
/* Int64OptionOption: Int64Option->[]int8 */ func MapInt8ArrToInt64OptionOption(m Int64OptionOption, f func(Int64Option) []int8) Int8ArrOption {  if m.IsDefined() { return Int8ArrOpt(f(*m.value)) } else { return NoneInt8ArrOption }  }
/* Int64OptionOption: Int64Option->[]int16 */ func MapInt16ArrToInt64OptionOption(m Int64OptionOption, f func(Int64Option) []int16) Int16ArrOption {  if m.IsDefined() { return Int16ArrOpt(f(*m.value)) } else { return NoneInt16ArrOption }  }
/* Int64OptionOption: Int64Option->[]int32 */ func MapInt32ArrToInt64OptionOption(m Int64OptionOption, f func(Int64Option) []int32) Int32ArrOption {  if m.IsDefined() { return Int32ArrOpt(f(*m.value)) } else { return NoneInt32ArrOption }  }
/* Int64OptionOption: Int64Option->[]int64 */ func MapInt64ArrToInt64OptionOption(m Int64OptionOption, f func(Int64Option) []int64) Int64ArrOption {  if m.IsDefined() { return Int64ArrOpt(f(*m.value)) } else { return NoneInt64ArrOption }  }
/* Int64OptionOption: Int64Option->[]uint */ func MapUintArrToInt64OptionOption(m Int64OptionOption, f func(Int64Option) []uint) UintArrOption {  if m.IsDefined() { return UintArrOpt(f(*m.value)) } else { return NoneUintArrOption }  }
/* Int64OptionOption: Int64Option->[]uint8 */ func MapUint8ArrToInt64OptionOption(m Int64OptionOption, f func(Int64Option) []uint8) Uint8ArrOption {  if m.IsDefined() { return Uint8ArrOpt(f(*m.value)) } else { return NoneUint8ArrOption }  }
/* Int64OptionOption: Int64Option->[]uint16 */ func MapUint16ArrToInt64OptionOption(m Int64OptionOption, f func(Int64Option) []uint16) Uint16ArrOption {  if m.IsDefined() { return Uint16ArrOpt(f(*m.value)) } else { return NoneUint16ArrOption }  }
/* Int64OptionOption: Int64Option->[]uint32 */ func MapUint32ArrToInt64OptionOption(m Int64OptionOption, f func(Int64Option) []uint32) Uint32ArrOption {  if m.IsDefined() { return Uint32ArrOpt(f(*m.value)) } else { return NoneUint32ArrOption }  }
/* Int64OptionOption: Int64Option->[]uint64 */ func MapUint64ArrToInt64OptionOption(m Int64OptionOption, f func(Int64Option) []uint64) Uint64ArrOption {  if m.IsDefined() { return Uint64ArrOpt(f(*m.value)) } else { return NoneUint64ArrOption }  }
/* Int64OptionOption: Int64Option->[]uintptr */ func MapUintptrArrToInt64OptionOption(m Int64OptionOption, f func(Int64Option) []uintptr) UintptrArrOption {  if m.IsDefined() { return UintptrArrOpt(f(*m.value)) } else { return NoneUintptrArrOption }  }
/* Int64OptionOption: Int64Option->[]byte */ func MapByteArrToInt64OptionOption(m Int64OptionOption, f func(Int64Option) []byte) ByteArrOption {  if m.IsDefined() { return ByteArrOpt(f(*m.value)) } else { return NoneByteArrOption }  }
/* Int64OptionOption: Int64Option->[]rune */ func MapRuneArrToInt64OptionOption(m Int64OptionOption, f func(Int64Option) []rune) RuneArrOption {  if m.IsDefined() { return RuneArrOpt(f(*m.value)) } else { return NoneRuneArrOption }  }
/* Int64OptionOption: Int64Option->[]float32 */ func MapFloat32ArrToInt64OptionOption(m Int64OptionOption, f func(Int64Option) []float32) Float32ArrOption {  if m.IsDefined() { return Float32ArrOpt(f(*m.value)) } else { return NoneFloat32ArrOption }  }
/* Int64OptionOption: Int64Option->[]float64 */ func MapFloat64ArrToInt64OptionOption(m Int64OptionOption, f func(Int64Option) []float64) Float64ArrOption {  if m.IsDefined() { return Float64ArrOpt(f(*m.value)) } else { return NoneFloat64ArrOption }  }
/* Int64OptionOption: Int64Option->[]complex64 */ func MapComplex64ArrToInt64OptionOption(m Int64OptionOption, f func(Int64Option) []complex64) Complex64ArrOption {  if m.IsDefined() { return Complex64ArrOpt(f(*m.value)) } else { return NoneComplex64ArrOption }  }
/* Int64OptionOption: Int64Option->[]complex128 */ func MapComplex128ArrToInt64OptionOption(m Int64OptionOption, f func(Int64Option) []complex128) Complex128ArrOption {  if m.IsDefined() { return Complex128ArrOpt(f(*m.value)) } else { return NoneComplex128ArrOption }  }
/* Int64OptionOption: Int64Option->[]Any */ func MapAnyArrToInt64OptionOption(m Int64OptionOption, f func(Int64Option) []Any) AnyArrOption {  if m.IsDefined() { return AnyArrOpt(f(*m.value)) } else { return NoneAnyArrOption }  }
/* Int64OptionOption: Int64Option->BoolList */ func MapBoolListToInt64OptionOption(m Int64OptionOption, f func(Int64Option) BoolList) BoolListOption {  if m.IsDefined() { return BoolListOpt(f(*m.value)) } else { return NoneBoolListOption }  }
/* Int64OptionOption: Int64Option->StringList */ func MapStringListToInt64OptionOption(m Int64OptionOption, f func(Int64Option) StringList) StringListOption {  if m.IsDefined() { return StringListOpt(f(*m.value)) } else { return NoneStringListOption }  }
/* Int64OptionOption: Int64Option->IntList */ func MapIntListToInt64OptionOption(m Int64OptionOption, f func(Int64Option) IntList) IntListOption {  if m.IsDefined() { return IntListOpt(f(*m.value)) } else { return NoneIntListOption }  }
/* Int64OptionOption: Int64Option->Int8List */ func MapInt8ListToInt64OptionOption(m Int64OptionOption, f func(Int64Option) Int8List) Int8ListOption {  if m.IsDefined() { return Int8ListOpt(f(*m.value)) } else { return NoneInt8ListOption }  }
/* Int64OptionOption: Int64Option->Int16List */ func MapInt16ListToInt64OptionOption(m Int64OptionOption, f func(Int64Option) Int16List) Int16ListOption {  if m.IsDefined() { return Int16ListOpt(f(*m.value)) } else { return NoneInt16ListOption }  }
/* Int64OptionOption: Int64Option->Int32List */ func MapInt32ListToInt64OptionOption(m Int64OptionOption, f func(Int64Option) Int32List) Int32ListOption {  if m.IsDefined() { return Int32ListOpt(f(*m.value)) } else { return NoneInt32ListOption }  }
/* Int64OptionOption: Int64Option->Int64List */ func MapInt64ListToInt64OptionOption(m Int64OptionOption, f func(Int64Option) Int64List) Int64ListOption {  if m.IsDefined() { return Int64ListOpt(f(*m.value)) } else { return NoneInt64ListOption }  }
/* Int64OptionOption: Int64Option->UintList */ func MapUintListToInt64OptionOption(m Int64OptionOption, f func(Int64Option) UintList) UintListOption {  if m.IsDefined() { return UintListOpt(f(*m.value)) } else { return NoneUintListOption }  }
/* Int64OptionOption: Int64Option->Uint8List */ func MapUint8ListToInt64OptionOption(m Int64OptionOption, f func(Int64Option) Uint8List) Uint8ListOption {  if m.IsDefined() { return Uint8ListOpt(f(*m.value)) } else { return NoneUint8ListOption }  }
/* Int64OptionOption: Int64Option->Uint16List */ func MapUint16ListToInt64OptionOption(m Int64OptionOption, f func(Int64Option) Uint16List) Uint16ListOption {  if m.IsDefined() { return Uint16ListOpt(f(*m.value)) } else { return NoneUint16ListOption }  }
/* Int64OptionOption: Int64Option->Uint32List */ func MapUint32ListToInt64OptionOption(m Int64OptionOption, f func(Int64Option) Uint32List) Uint32ListOption {  if m.IsDefined() { return Uint32ListOpt(f(*m.value)) } else { return NoneUint32ListOption }  }
/* Int64OptionOption: Int64Option->Uint64List */ func MapUint64ListToInt64OptionOption(m Int64OptionOption, f func(Int64Option) Uint64List) Uint64ListOption {  if m.IsDefined() { return Uint64ListOpt(f(*m.value)) } else { return NoneUint64ListOption }  }
/* Int64OptionOption: Int64Option->UintptrList */ func MapUintptrListToInt64OptionOption(m Int64OptionOption, f func(Int64Option) UintptrList) UintptrListOption {  if m.IsDefined() { return UintptrListOpt(f(*m.value)) } else { return NoneUintptrListOption }  }
/* Int64OptionOption: Int64Option->ByteList */ func MapByteListToInt64OptionOption(m Int64OptionOption, f func(Int64Option) ByteList) ByteListOption {  if m.IsDefined() { return ByteListOpt(f(*m.value)) } else { return NoneByteListOption }  }
/* Int64OptionOption: Int64Option->RuneList */ func MapRuneListToInt64OptionOption(m Int64OptionOption, f func(Int64Option) RuneList) RuneListOption {  if m.IsDefined() { return RuneListOpt(f(*m.value)) } else { return NoneRuneListOption }  }
/* Int64OptionOption: Int64Option->Float32List */ func MapFloat32ListToInt64OptionOption(m Int64OptionOption, f func(Int64Option) Float32List) Float32ListOption {  if m.IsDefined() { return Float32ListOpt(f(*m.value)) } else { return NoneFloat32ListOption }  }
/* Int64OptionOption: Int64Option->Float64List */ func MapFloat64ListToInt64OptionOption(m Int64OptionOption, f func(Int64Option) Float64List) Float64ListOption {  if m.IsDefined() { return Float64ListOpt(f(*m.value)) } else { return NoneFloat64ListOption }  }
/* Int64OptionOption: Int64Option->Complex64List */ func MapComplex64ListToInt64OptionOption(m Int64OptionOption, f func(Int64Option) Complex64List) Complex64ListOption {  if m.IsDefined() { return Complex64ListOpt(f(*m.value)) } else { return NoneComplex64ListOption }  }
/* Int64OptionOption: Int64Option->Complex128List */ func MapComplex128ListToInt64OptionOption(m Int64OptionOption, f func(Int64Option) Complex128List) Complex128ListOption {  if m.IsDefined() { return Complex128ListOpt(f(*m.value)) } else { return NoneComplex128ListOption }  }
/* Int64OptionOption: Int64Option->AnyList */ func MapAnyListToInt64OptionOption(m Int64OptionOption, f func(Int64Option) AnyList) AnyListOption {  if m.IsDefined() { return AnyListOpt(f(*m.value)) } else { return NoneAnyListOption }  }
/* UintOptionOption: UintOption->bool */ func MapBoolToUintOptionOption(m UintOptionOption, f func(UintOption) bool) BoolOption {  if m.IsDefined() { return Bool(f(*m.value)) } else { return NoneBoolOption }  }
/* UintOptionOption: UintOption->string */ func MapStringToUintOptionOption(m UintOptionOption, f func(UintOption) string) StringOption {  if m.IsDefined() { return String(f(*m.value)) } else { return NoneStringOption }  }
/* UintOptionOption: UintOption->int */ func MapIntToUintOptionOption(m UintOptionOption, f func(UintOption) int) IntOption {  if m.IsDefined() { return Int(f(*m.value)) } else { return NoneIntOption }  }
/* UintOptionOption: UintOption->int8 */ func MapInt8ToUintOptionOption(m UintOptionOption, f func(UintOption) int8) Int8Option {  if m.IsDefined() { return Int8(f(*m.value)) } else { return NoneInt8Option }  }
/* UintOptionOption: UintOption->int16 */ func MapInt16ToUintOptionOption(m UintOptionOption, f func(UintOption) int16) Int16Option {  if m.IsDefined() { return Int16(f(*m.value)) } else { return NoneInt16Option }  }
/* UintOptionOption: UintOption->int32 */ func MapInt32ToUintOptionOption(m UintOptionOption, f func(UintOption) int32) Int32Option {  if m.IsDefined() { return Int32(f(*m.value)) } else { return NoneInt32Option }  }
/* UintOptionOption: UintOption->int64 */ func MapInt64ToUintOptionOption(m UintOptionOption, f func(UintOption) int64) Int64Option {  if m.IsDefined() { return Int64(f(*m.value)) } else { return NoneInt64Option }  }
/* UintOptionOption: UintOption->uint */ func MapUintToUintOptionOption(m UintOptionOption, f func(UintOption) uint) UintOption {  if m.IsDefined() { return Uint(f(*m.value)) } else { return NoneUintOption }  }
/* UintOptionOption: UintOption->uint8 */ func MapUint8ToUintOptionOption(m UintOptionOption, f func(UintOption) uint8) Uint8Option {  if m.IsDefined() { return Uint8(f(*m.value)) } else { return NoneUint8Option }  }
/* UintOptionOption: UintOption->uint16 */ func MapUint16ToUintOptionOption(m UintOptionOption, f func(UintOption) uint16) Uint16Option {  if m.IsDefined() { return Uint16(f(*m.value)) } else { return NoneUint16Option }  }
/* UintOptionOption: UintOption->uint32 */ func MapUint32ToUintOptionOption(m UintOptionOption, f func(UintOption) uint32) Uint32Option {  if m.IsDefined() { return Uint32(f(*m.value)) } else { return NoneUint32Option }  }
/* UintOptionOption: UintOption->uint64 */ func MapUint64ToUintOptionOption(m UintOptionOption, f func(UintOption) uint64) Uint64Option {  if m.IsDefined() { return Uint64(f(*m.value)) } else { return NoneUint64Option }  }
/* UintOptionOption: UintOption->uintptr */ func MapUintptrToUintOptionOption(m UintOptionOption, f func(UintOption) uintptr) UintptrOption {  if m.IsDefined() { return Uintptr(f(*m.value)) } else { return NoneUintptrOption }  }
/* UintOptionOption: UintOption->byte */ func MapByteToUintOptionOption(m UintOptionOption, f func(UintOption) byte) ByteOption {  if m.IsDefined() { return Byte(f(*m.value)) } else { return NoneByteOption }  }
/* UintOptionOption: UintOption->rune */ func MapRuneToUintOptionOption(m UintOptionOption, f func(UintOption) rune) RuneOption {  if m.IsDefined() { return Rune(f(*m.value)) } else { return NoneRuneOption }  }
/* UintOptionOption: UintOption->float32 */ func MapFloat32ToUintOptionOption(m UintOptionOption, f func(UintOption) float32) Float32Option {  if m.IsDefined() { return Float32(f(*m.value)) } else { return NoneFloat32Option }  }
/* UintOptionOption: UintOption->float64 */ func MapFloat64ToUintOptionOption(m UintOptionOption, f func(UintOption) float64) Float64Option {  if m.IsDefined() { return Float64(f(*m.value)) } else { return NoneFloat64Option }  }
/* UintOptionOption: UintOption->complex64 */ func MapComplex64ToUintOptionOption(m UintOptionOption, f func(UintOption) complex64) Complex64Option {  if m.IsDefined() { return Complex64(f(*m.value)) } else { return NoneComplex64Option }  }
/* UintOptionOption: UintOption->complex128 */ func MapComplex128ToUintOptionOption(m UintOptionOption, f func(UintOption) complex128) Complex128Option {  if m.IsDefined() { return Complex128(f(*m.value)) } else { return NoneComplex128Option }  }
/* UintOptionOption: UintOption->Any */ func MapAnyToUintOptionOption(m UintOptionOption, f func(UintOption) Any) AnyOption {  if m.IsDefined() { return AnyOpt(f(*m.value)) } else { return NoneAnyOption }  }
/* UintOptionOption: UintOption->BoolOption */ func MapBoolOptionToUintOptionOption(m UintOptionOption, f func(UintOption) BoolOption) BoolOptionOption {  if m.IsDefined() { return BoolBool(f(*m.value)) } else { return NoneBoolOptionOption }  }
/* UintOptionOption: UintOption->StringOption */ func MapStringOptionToUintOptionOption(m UintOptionOption, f func(UintOption) StringOption) StringOptionOption {  if m.IsDefined() { return StringString(f(*m.value)) } else { return NoneStringOptionOption }  }
/* UintOptionOption: UintOption->IntOption */ func MapIntOptionToUintOptionOption(m UintOptionOption, f func(UintOption) IntOption) IntOptionOption {  if m.IsDefined() { return IntInt(f(*m.value)) } else { return NoneIntOptionOption }  }
/* UintOptionOption: UintOption->Int8Option */ func MapInt8OptionToUintOptionOption(m UintOptionOption, f func(UintOption) Int8Option) Int8OptionOption {  if m.IsDefined() { return Int8Int8(f(*m.value)) } else { return NoneInt8OptionOption }  }
/* UintOptionOption: UintOption->Int16Option */ func MapInt16OptionToUintOptionOption(m UintOptionOption, f func(UintOption) Int16Option) Int16OptionOption {  if m.IsDefined() { return Int16Int16(f(*m.value)) } else { return NoneInt16OptionOption }  }
/* UintOptionOption: UintOption->Int32Option */ func MapInt32OptionToUintOptionOption(m UintOptionOption, f func(UintOption) Int32Option) Int32OptionOption {  if m.IsDefined() { return Int32Int32(f(*m.value)) } else { return NoneInt32OptionOption }  }
/* UintOptionOption: UintOption->Int64Option */ func MapInt64OptionToUintOptionOption(m UintOptionOption, f func(UintOption) Int64Option) Int64OptionOption {  if m.IsDefined() { return Int64Int64(f(*m.value)) } else { return NoneInt64OptionOption }  }
/* UintOptionOption: UintOption->UintOption */ func MapUintOptionToUintOptionOption(m UintOptionOption, f func(UintOption) UintOption) UintOptionOption {  if m.IsDefined() { return UintUint(f(*m.value)) } else { return NoneUintOptionOption }  }
/* UintOptionOption: UintOption->Uint8Option */ func MapUint8OptionToUintOptionOption(m UintOptionOption, f func(UintOption) Uint8Option) Uint8OptionOption {  if m.IsDefined() { return Uint8Uint8(f(*m.value)) } else { return NoneUint8OptionOption }  }
/* UintOptionOption: UintOption->Uint16Option */ func MapUint16OptionToUintOptionOption(m UintOptionOption, f func(UintOption) Uint16Option) Uint16OptionOption {  if m.IsDefined() { return Uint16Uint16(f(*m.value)) } else { return NoneUint16OptionOption }  }
/* UintOptionOption: UintOption->Uint32Option */ func MapUint32OptionToUintOptionOption(m UintOptionOption, f func(UintOption) Uint32Option) Uint32OptionOption {  if m.IsDefined() { return Uint32Uint32(f(*m.value)) } else { return NoneUint32OptionOption }  }
/* UintOptionOption: UintOption->Uint64Option */ func MapUint64OptionToUintOptionOption(m UintOptionOption, f func(UintOption) Uint64Option) Uint64OptionOption {  if m.IsDefined() { return Uint64Uint64(f(*m.value)) } else { return NoneUint64OptionOption }  }
/* UintOptionOption: UintOption->UintptrOption */ func MapUintptrOptionToUintOptionOption(m UintOptionOption, f func(UintOption) UintptrOption) UintptrOptionOption {  if m.IsDefined() { return UintptrUintptr(f(*m.value)) } else { return NoneUintptrOptionOption }  }
/* UintOptionOption: UintOption->ByteOption */ func MapByteOptionToUintOptionOption(m UintOptionOption, f func(UintOption) ByteOption) ByteOptionOption {  if m.IsDefined() { return ByteByte(f(*m.value)) } else { return NoneByteOptionOption }  }
/* UintOptionOption: UintOption->RuneOption */ func MapRuneOptionToUintOptionOption(m UintOptionOption, f func(UintOption) RuneOption) RuneOptionOption {  if m.IsDefined() { return RuneRune(f(*m.value)) } else { return NoneRuneOptionOption }  }
/* UintOptionOption: UintOption->Float32Option */ func MapFloat32OptionToUintOptionOption(m UintOptionOption, f func(UintOption) Float32Option) Float32OptionOption {  if m.IsDefined() { return Float32Float32(f(*m.value)) } else { return NoneFloat32OptionOption }  }
/* UintOptionOption: UintOption->Float64Option */ func MapFloat64OptionToUintOptionOption(m UintOptionOption, f func(UintOption) Float64Option) Float64OptionOption {  if m.IsDefined() { return Float64Float64(f(*m.value)) } else { return NoneFloat64OptionOption }  }
/* UintOptionOption: UintOption->Complex64Option */ func MapComplex64OptionToUintOptionOption(m UintOptionOption, f func(UintOption) Complex64Option) Complex64OptionOption {  if m.IsDefined() { return Complex64Complex64(f(*m.value)) } else { return NoneComplex64OptionOption }  }
/* UintOptionOption: UintOption->Complex128Option */ func MapComplex128OptionToUintOptionOption(m UintOptionOption, f func(UintOption) Complex128Option) Complex128OptionOption {  if m.IsDefined() { return Complex128Complex128(f(*m.value)) } else { return NoneComplex128OptionOption }  }
/* UintOptionOption: UintOption->AnyOption */ func MapAnyOptionToUintOptionOption(m UintOptionOption, f func(UintOption) AnyOption) AnyOptionOption {  if m.IsDefined() { return AnyOptAny(f(*m.value)) } else { return NoneAnyOptionOption }  }
/* UintOptionOption: UintOption->[]bool */ func MapBoolArrToUintOptionOption(m UintOptionOption, f func(UintOption) []bool) BoolArrOption {  if m.IsDefined() { return BoolArrOpt(f(*m.value)) } else { return NoneBoolArrOption }  }
/* UintOptionOption: UintOption->[]string */ func MapStringArrToUintOptionOption(m UintOptionOption, f func(UintOption) []string) StringArrOption {  if m.IsDefined() { return StringArrOpt(f(*m.value)) } else { return NoneStringArrOption }  }
/* UintOptionOption: UintOption->[]int */ func MapIntArrToUintOptionOption(m UintOptionOption, f func(UintOption) []int) IntArrOption {  if m.IsDefined() { return IntArrOpt(f(*m.value)) } else { return NoneIntArrOption }  }
/* UintOptionOption: UintOption->[]int8 */ func MapInt8ArrToUintOptionOption(m UintOptionOption, f func(UintOption) []int8) Int8ArrOption {  if m.IsDefined() { return Int8ArrOpt(f(*m.value)) } else { return NoneInt8ArrOption }  }
/* UintOptionOption: UintOption->[]int16 */ func MapInt16ArrToUintOptionOption(m UintOptionOption, f func(UintOption) []int16) Int16ArrOption {  if m.IsDefined() { return Int16ArrOpt(f(*m.value)) } else { return NoneInt16ArrOption }  }
/* UintOptionOption: UintOption->[]int32 */ func MapInt32ArrToUintOptionOption(m UintOptionOption, f func(UintOption) []int32) Int32ArrOption {  if m.IsDefined() { return Int32ArrOpt(f(*m.value)) } else { return NoneInt32ArrOption }  }
/* UintOptionOption: UintOption->[]int64 */ func MapInt64ArrToUintOptionOption(m UintOptionOption, f func(UintOption) []int64) Int64ArrOption {  if m.IsDefined() { return Int64ArrOpt(f(*m.value)) } else { return NoneInt64ArrOption }  }
/* UintOptionOption: UintOption->[]uint */ func MapUintArrToUintOptionOption(m UintOptionOption, f func(UintOption) []uint) UintArrOption {  if m.IsDefined() { return UintArrOpt(f(*m.value)) } else { return NoneUintArrOption }  }
/* UintOptionOption: UintOption->[]uint8 */ func MapUint8ArrToUintOptionOption(m UintOptionOption, f func(UintOption) []uint8) Uint8ArrOption {  if m.IsDefined() { return Uint8ArrOpt(f(*m.value)) } else { return NoneUint8ArrOption }  }
/* UintOptionOption: UintOption->[]uint16 */ func MapUint16ArrToUintOptionOption(m UintOptionOption, f func(UintOption) []uint16) Uint16ArrOption {  if m.IsDefined() { return Uint16ArrOpt(f(*m.value)) } else { return NoneUint16ArrOption }  }
/* UintOptionOption: UintOption->[]uint32 */ func MapUint32ArrToUintOptionOption(m UintOptionOption, f func(UintOption) []uint32) Uint32ArrOption {  if m.IsDefined() { return Uint32ArrOpt(f(*m.value)) } else { return NoneUint32ArrOption }  }
/* UintOptionOption: UintOption->[]uint64 */ func MapUint64ArrToUintOptionOption(m UintOptionOption, f func(UintOption) []uint64) Uint64ArrOption {  if m.IsDefined() { return Uint64ArrOpt(f(*m.value)) } else { return NoneUint64ArrOption }  }
/* UintOptionOption: UintOption->[]uintptr */ func MapUintptrArrToUintOptionOption(m UintOptionOption, f func(UintOption) []uintptr) UintptrArrOption {  if m.IsDefined() { return UintptrArrOpt(f(*m.value)) } else { return NoneUintptrArrOption }  }
/* UintOptionOption: UintOption->[]byte */ func MapByteArrToUintOptionOption(m UintOptionOption, f func(UintOption) []byte) ByteArrOption {  if m.IsDefined() { return ByteArrOpt(f(*m.value)) } else { return NoneByteArrOption }  }
/* UintOptionOption: UintOption->[]rune */ func MapRuneArrToUintOptionOption(m UintOptionOption, f func(UintOption) []rune) RuneArrOption {  if m.IsDefined() { return RuneArrOpt(f(*m.value)) } else { return NoneRuneArrOption }  }
/* UintOptionOption: UintOption->[]float32 */ func MapFloat32ArrToUintOptionOption(m UintOptionOption, f func(UintOption) []float32) Float32ArrOption {  if m.IsDefined() { return Float32ArrOpt(f(*m.value)) } else { return NoneFloat32ArrOption }  }
/* UintOptionOption: UintOption->[]float64 */ func MapFloat64ArrToUintOptionOption(m UintOptionOption, f func(UintOption) []float64) Float64ArrOption {  if m.IsDefined() { return Float64ArrOpt(f(*m.value)) } else { return NoneFloat64ArrOption }  }
/* UintOptionOption: UintOption->[]complex64 */ func MapComplex64ArrToUintOptionOption(m UintOptionOption, f func(UintOption) []complex64) Complex64ArrOption {  if m.IsDefined() { return Complex64ArrOpt(f(*m.value)) } else { return NoneComplex64ArrOption }  }
/* UintOptionOption: UintOption->[]complex128 */ func MapComplex128ArrToUintOptionOption(m UintOptionOption, f func(UintOption) []complex128) Complex128ArrOption {  if m.IsDefined() { return Complex128ArrOpt(f(*m.value)) } else { return NoneComplex128ArrOption }  }
/* UintOptionOption: UintOption->[]Any */ func MapAnyArrToUintOptionOption(m UintOptionOption, f func(UintOption) []Any) AnyArrOption {  if m.IsDefined() { return AnyArrOpt(f(*m.value)) } else { return NoneAnyArrOption }  }
/* UintOptionOption: UintOption->BoolList */ func MapBoolListToUintOptionOption(m UintOptionOption, f func(UintOption) BoolList) BoolListOption {  if m.IsDefined() { return BoolListOpt(f(*m.value)) } else { return NoneBoolListOption }  }
/* UintOptionOption: UintOption->StringList */ func MapStringListToUintOptionOption(m UintOptionOption, f func(UintOption) StringList) StringListOption {  if m.IsDefined() { return StringListOpt(f(*m.value)) } else { return NoneStringListOption }  }
/* UintOptionOption: UintOption->IntList */ func MapIntListToUintOptionOption(m UintOptionOption, f func(UintOption) IntList) IntListOption {  if m.IsDefined() { return IntListOpt(f(*m.value)) } else { return NoneIntListOption }  }
/* UintOptionOption: UintOption->Int8List */ func MapInt8ListToUintOptionOption(m UintOptionOption, f func(UintOption) Int8List) Int8ListOption {  if m.IsDefined() { return Int8ListOpt(f(*m.value)) } else { return NoneInt8ListOption }  }
/* UintOptionOption: UintOption->Int16List */ func MapInt16ListToUintOptionOption(m UintOptionOption, f func(UintOption) Int16List) Int16ListOption {  if m.IsDefined() { return Int16ListOpt(f(*m.value)) } else { return NoneInt16ListOption }  }
/* UintOptionOption: UintOption->Int32List */ func MapInt32ListToUintOptionOption(m UintOptionOption, f func(UintOption) Int32List) Int32ListOption {  if m.IsDefined() { return Int32ListOpt(f(*m.value)) } else { return NoneInt32ListOption }  }
/* UintOptionOption: UintOption->Int64List */ func MapInt64ListToUintOptionOption(m UintOptionOption, f func(UintOption) Int64List) Int64ListOption {  if m.IsDefined() { return Int64ListOpt(f(*m.value)) } else { return NoneInt64ListOption }  }
/* UintOptionOption: UintOption->UintList */ func MapUintListToUintOptionOption(m UintOptionOption, f func(UintOption) UintList) UintListOption {  if m.IsDefined() { return UintListOpt(f(*m.value)) } else { return NoneUintListOption }  }
/* UintOptionOption: UintOption->Uint8List */ func MapUint8ListToUintOptionOption(m UintOptionOption, f func(UintOption) Uint8List) Uint8ListOption {  if m.IsDefined() { return Uint8ListOpt(f(*m.value)) } else { return NoneUint8ListOption }  }
/* UintOptionOption: UintOption->Uint16List */ func MapUint16ListToUintOptionOption(m UintOptionOption, f func(UintOption) Uint16List) Uint16ListOption {  if m.IsDefined() { return Uint16ListOpt(f(*m.value)) } else { return NoneUint16ListOption }  }
/* UintOptionOption: UintOption->Uint32List */ func MapUint32ListToUintOptionOption(m UintOptionOption, f func(UintOption) Uint32List) Uint32ListOption {  if m.IsDefined() { return Uint32ListOpt(f(*m.value)) } else { return NoneUint32ListOption }  }
/* UintOptionOption: UintOption->Uint64List */ func MapUint64ListToUintOptionOption(m UintOptionOption, f func(UintOption) Uint64List) Uint64ListOption {  if m.IsDefined() { return Uint64ListOpt(f(*m.value)) } else { return NoneUint64ListOption }  }
/* UintOptionOption: UintOption->UintptrList */ func MapUintptrListToUintOptionOption(m UintOptionOption, f func(UintOption) UintptrList) UintptrListOption {  if m.IsDefined() { return UintptrListOpt(f(*m.value)) } else { return NoneUintptrListOption }  }
/* UintOptionOption: UintOption->ByteList */ func MapByteListToUintOptionOption(m UintOptionOption, f func(UintOption) ByteList) ByteListOption {  if m.IsDefined() { return ByteListOpt(f(*m.value)) } else { return NoneByteListOption }  }
/* UintOptionOption: UintOption->RuneList */ func MapRuneListToUintOptionOption(m UintOptionOption, f func(UintOption) RuneList) RuneListOption {  if m.IsDefined() { return RuneListOpt(f(*m.value)) } else { return NoneRuneListOption }  }
/* UintOptionOption: UintOption->Float32List */ func MapFloat32ListToUintOptionOption(m UintOptionOption, f func(UintOption) Float32List) Float32ListOption {  if m.IsDefined() { return Float32ListOpt(f(*m.value)) } else { return NoneFloat32ListOption }  }
/* UintOptionOption: UintOption->Float64List */ func MapFloat64ListToUintOptionOption(m UintOptionOption, f func(UintOption) Float64List) Float64ListOption {  if m.IsDefined() { return Float64ListOpt(f(*m.value)) } else { return NoneFloat64ListOption }  }
/* UintOptionOption: UintOption->Complex64List */ func MapComplex64ListToUintOptionOption(m UintOptionOption, f func(UintOption) Complex64List) Complex64ListOption {  if m.IsDefined() { return Complex64ListOpt(f(*m.value)) } else { return NoneComplex64ListOption }  }
/* UintOptionOption: UintOption->Complex128List */ func MapComplex128ListToUintOptionOption(m UintOptionOption, f func(UintOption) Complex128List) Complex128ListOption {  if m.IsDefined() { return Complex128ListOpt(f(*m.value)) } else { return NoneComplex128ListOption }  }
/* UintOptionOption: UintOption->AnyList */ func MapAnyListToUintOptionOption(m UintOptionOption, f func(UintOption) AnyList) AnyListOption {  if m.IsDefined() { return AnyListOpt(f(*m.value)) } else { return NoneAnyListOption }  }
/* Uint8OptionOption: Uint8Option->bool */ func MapBoolToUint8OptionOption(m Uint8OptionOption, f func(Uint8Option) bool) BoolOption {  if m.IsDefined() { return Bool(f(*m.value)) } else { return NoneBoolOption }  }
/* Uint8OptionOption: Uint8Option->string */ func MapStringToUint8OptionOption(m Uint8OptionOption, f func(Uint8Option) string) StringOption {  if m.IsDefined() { return String(f(*m.value)) } else { return NoneStringOption }  }
/* Uint8OptionOption: Uint8Option->int */ func MapIntToUint8OptionOption(m Uint8OptionOption, f func(Uint8Option) int) IntOption {  if m.IsDefined() { return Int(f(*m.value)) } else { return NoneIntOption }  }
/* Uint8OptionOption: Uint8Option->int8 */ func MapInt8ToUint8OptionOption(m Uint8OptionOption, f func(Uint8Option) int8) Int8Option {  if m.IsDefined() { return Int8(f(*m.value)) } else { return NoneInt8Option }  }
/* Uint8OptionOption: Uint8Option->int16 */ func MapInt16ToUint8OptionOption(m Uint8OptionOption, f func(Uint8Option) int16) Int16Option {  if m.IsDefined() { return Int16(f(*m.value)) } else { return NoneInt16Option }  }
/* Uint8OptionOption: Uint8Option->int32 */ func MapInt32ToUint8OptionOption(m Uint8OptionOption, f func(Uint8Option) int32) Int32Option {  if m.IsDefined() { return Int32(f(*m.value)) } else { return NoneInt32Option }  }
/* Uint8OptionOption: Uint8Option->int64 */ func MapInt64ToUint8OptionOption(m Uint8OptionOption, f func(Uint8Option) int64) Int64Option {  if m.IsDefined() { return Int64(f(*m.value)) } else { return NoneInt64Option }  }
/* Uint8OptionOption: Uint8Option->uint */ func MapUintToUint8OptionOption(m Uint8OptionOption, f func(Uint8Option) uint) UintOption {  if m.IsDefined() { return Uint(f(*m.value)) } else { return NoneUintOption }  }
/* Uint8OptionOption: Uint8Option->uint8 */ func MapUint8ToUint8OptionOption(m Uint8OptionOption, f func(Uint8Option) uint8) Uint8Option {  if m.IsDefined() { return Uint8(f(*m.value)) } else { return NoneUint8Option }  }
/* Uint8OptionOption: Uint8Option->uint16 */ func MapUint16ToUint8OptionOption(m Uint8OptionOption, f func(Uint8Option) uint16) Uint16Option {  if m.IsDefined() { return Uint16(f(*m.value)) } else { return NoneUint16Option }  }
/* Uint8OptionOption: Uint8Option->uint32 */ func MapUint32ToUint8OptionOption(m Uint8OptionOption, f func(Uint8Option) uint32) Uint32Option {  if m.IsDefined() { return Uint32(f(*m.value)) } else { return NoneUint32Option }  }
/* Uint8OptionOption: Uint8Option->uint64 */ func MapUint64ToUint8OptionOption(m Uint8OptionOption, f func(Uint8Option) uint64) Uint64Option {  if m.IsDefined() { return Uint64(f(*m.value)) } else { return NoneUint64Option }  }
/* Uint8OptionOption: Uint8Option->uintptr */ func MapUintptrToUint8OptionOption(m Uint8OptionOption, f func(Uint8Option) uintptr) UintptrOption {  if m.IsDefined() { return Uintptr(f(*m.value)) } else { return NoneUintptrOption }  }
/* Uint8OptionOption: Uint8Option->byte */ func MapByteToUint8OptionOption(m Uint8OptionOption, f func(Uint8Option) byte) ByteOption {  if m.IsDefined() { return Byte(f(*m.value)) } else { return NoneByteOption }  }
/* Uint8OptionOption: Uint8Option->rune */ func MapRuneToUint8OptionOption(m Uint8OptionOption, f func(Uint8Option) rune) RuneOption {  if m.IsDefined() { return Rune(f(*m.value)) } else { return NoneRuneOption }  }
/* Uint8OptionOption: Uint8Option->float32 */ func MapFloat32ToUint8OptionOption(m Uint8OptionOption, f func(Uint8Option) float32) Float32Option {  if m.IsDefined() { return Float32(f(*m.value)) } else { return NoneFloat32Option }  }
/* Uint8OptionOption: Uint8Option->float64 */ func MapFloat64ToUint8OptionOption(m Uint8OptionOption, f func(Uint8Option) float64) Float64Option {  if m.IsDefined() { return Float64(f(*m.value)) } else { return NoneFloat64Option }  }
/* Uint8OptionOption: Uint8Option->complex64 */ func MapComplex64ToUint8OptionOption(m Uint8OptionOption, f func(Uint8Option) complex64) Complex64Option {  if m.IsDefined() { return Complex64(f(*m.value)) } else { return NoneComplex64Option }  }
/* Uint8OptionOption: Uint8Option->complex128 */ func MapComplex128ToUint8OptionOption(m Uint8OptionOption, f func(Uint8Option) complex128) Complex128Option {  if m.IsDefined() { return Complex128(f(*m.value)) } else { return NoneComplex128Option }  }
/* Uint8OptionOption: Uint8Option->Any */ func MapAnyToUint8OptionOption(m Uint8OptionOption, f func(Uint8Option) Any) AnyOption {  if m.IsDefined() { return AnyOpt(f(*m.value)) } else { return NoneAnyOption }  }
/* Uint8OptionOption: Uint8Option->BoolOption */ func MapBoolOptionToUint8OptionOption(m Uint8OptionOption, f func(Uint8Option) BoolOption) BoolOptionOption {  if m.IsDefined() { return BoolBool(f(*m.value)) } else { return NoneBoolOptionOption }  }
/* Uint8OptionOption: Uint8Option->StringOption */ func MapStringOptionToUint8OptionOption(m Uint8OptionOption, f func(Uint8Option) StringOption) StringOptionOption {  if m.IsDefined() { return StringString(f(*m.value)) } else { return NoneStringOptionOption }  }
/* Uint8OptionOption: Uint8Option->IntOption */ func MapIntOptionToUint8OptionOption(m Uint8OptionOption, f func(Uint8Option) IntOption) IntOptionOption {  if m.IsDefined() { return IntInt(f(*m.value)) } else { return NoneIntOptionOption }  }
/* Uint8OptionOption: Uint8Option->Int8Option */ func MapInt8OptionToUint8OptionOption(m Uint8OptionOption, f func(Uint8Option) Int8Option) Int8OptionOption {  if m.IsDefined() { return Int8Int8(f(*m.value)) } else { return NoneInt8OptionOption }  }
/* Uint8OptionOption: Uint8Option->Int16Option */ func MapInt16OptionToUint8OptionOption(m Uint8OptionOption, f func(Uint8Option) Int16Option) Int16OptionOption {  if m.IsDefined() { return Int16Int16(f(*m.value)) } else { return NoneInt16OptionOption }  }
/* Uint8OptionOption: Uint8Option->Int32Option */ func MapInt32OptionToUint8OptionOption(m Uint8OptionOption, f func(Uint8Option) Int32Option) Int32OptionOption {  if m.IsDefined() { return Int32Int32(f(*m.value)) } else { return NoneInt32OptionOption }  }
/* Uint8OptionOption: Uint8Option->Int64Option */ func MapInt64OptionToUint8OptionOption(m Uint8OptionOption, f func(Uint8Option) Int64Option) Int64OptionOption {  if m.IsDefined() { return Int64Int64(f(*m.value)) } else { return NoneInt64OptionOption }  }
/* Uint8OptionOption: Uint8Option->UintOption */ func MapUintOptionToUint8OptionOption(m Uint8OptionOption, f func(Uint8Option) UintOption) UintOptionOption {  if m.IsDefined() { return UintUint(f(*m.value)) } else { return NoneUintOptionOption }  }
/* Uint8OptionOption: Uint8Option->Uint8Option */ func MapUint8OptionToUint8OptionOption(m Uint8OptionOption, f func(Uint8Option) Uint8Option) Uint8OptionOption {  if m.IsDefined() { return Uint8Uint8(f(*m.value)) } else { return NoneUint8OptionOption }  }
/* Uint8OptionOption: Uint8Option->Uint16Option */ func MapUint16OptionToUint8OptionOption(m Uint8OptionOption, f func(Uint8Option) Uint16Option) Uint16OptionOption {  if m.IsDefined() { return Uint16Uint16(f(*m.value)) } else { return NoneUint16OptionOption }  }
/* Uint8OptionOption: Uint8Option->Uint32Option */ func MapUint32OptionToUint8OptionOption(m Uint8OptionOption, f func(Uint8Option) Uint32Option) Uint32OptionOption {  if m.IsDefined() { return Uint32Uint32(f(*m.value)) } else { return NoneUint32OptionOption }  }
/* Uint8OptionOption: Uint8Option->Uint64Option */ func MapUint64OptionToUint8OptionOption(m Uint8OptionOption, f func(Uint8Option) Uint64Option) Uint64OptionOption {  if m.IsDefined() { return Uint64Uint64(f(*m.value)) } else { return NoneUint64OptionOption }  }
/* Uint8OptionOption: Uint8Option->UintptrOption */ func MapUintptrOptionToUint8OptionOption(m Uint8OptionOption, f func(Uint8Option) UintptrOption) UintptrOptionOption {  if m.IsDefined() { return UintptrUintptr(f(*m.value)) } else { return NoneUintptrOptionOption }  }
/* Uint8OptionOption: Uint8Option->ByteOption */ func MapByteOptionToUint8OptionOption(m Uint8OptionOption, f func(Uint8Option) ByteOption) ByteOptionOption {  if m.IsDefined() { return ByteByte(f(*m.value)) } else { return NoneByteOptionOption }  }
/* Uint8OptionOption: Uint8Option->RuneOption */ func MapRuneOptionToUint8OptionOption(m Uint8OptionOption, f func(Uint8Option) RuneOption) RuneOptionOption {  if m.IsDefined() { return RuneRune(f(*m.value)) } else { return NoneRuneOptionOption }  }
/* Uint8OptionOption: Uint8Option->Float32Option */ func MapFloat32OptionToUint8OptionOption(m Uint8OptionOption, f func(Uint8Option) Float32Option) Float32OptionOption {  if m.IsDefined() { return Float32Float32(f(*m.value)) } else { return NoneFloat32OptionOption }  }
/* Uint8OptionOption: Uint8Option->Float64Option */ func MapFloat64OptionToUint8OptionOption(m Uint8OptionOption, f func(Uint8Option) Float64Option) Float64OptionOption {  if m.IsDefined() { return Float64Float64(f(*m.value)) } else { return NoneFloat64OptionOption }  }
/* Uint8OptionOption: Uint8Option->Complex64Option */ func MapComplex64OptionToUint8OptionOption(m Uint8OptionOption, f func(Uint8Option) Complex64Option) Complex64OptionOption {  if m.IsDefined() { return Complex64Complex64(f(*m.value)) } else { return NoneComplex64OptionOption }  }
/* Uint8OptionOption: Uint8Option->Complex128Option */ func MapComplex128OptionToUint8OptionOption(m Uint8OptionOption, f func(Uint8Option) Complex128Option) Complex128OptionOption {  if m.IsDefined() { return Complex128Complex128(f(*m.value)) } else { return NoneComplex128OptionOption }  }
/* Uint8OptionOption: Uint8Option->AnyOption */ func MapAnyOptionToUint8OptionOption(m Uint8OptionOption, f func(Uint8Option) AnyOption) AnyOptionOption {  if m.IsDefined() { return AnyOptAny(f(*m.value)) } else { return NoneAnyOptionOption }  }
/* Uint8OptionOption: Uint8Option->[]bool */ func MapBoolArrToUint8OptionOption(m Uint8OptionOption, f func(Uint8Option) []bool) BoolArrOption {  if m.IsDefined() { return BoolArrOpt(f(*m.value)) } else { return NoneBoolArrOption }  }
/* Uint8OptionOption: Uint8Option->[]string */ func MapStringArrToUint8OptionOption(m Uint8OptionOption, f func(Uint8Option) []string) StringArrOption {  if m.IsDefined() { return StringArrOpt(f(*m.value)) } else { return NoneStringArrOption }  }
/* Uint8OptionOption: Uint8Option->[]int */ func MapIntArrToUint8OptionOption(m Uint8OptionOption, f func(Uint8Option) []int) IntArrOption {  if m.IsDefined() { return IntArrOpt(f(*m.value)) } else { return NoneIntArrOption }  }
/* Uint8OptionOption: Uint8Option->[]int8 */ func MapInt8ArrToUint8OptionOption(m Uint8OptionOption, f func(Uint8Option) []int8) Int8ArrOption {  if m.IsDefined() { return Int8ArrOpt(f(*m.value)) } else { return NoneInt8ArrOption }  }
/* Uint8OptionOption: Uint8Option->[]int16 */ func MapInt16ArrToUint8OptionOption(m Uint8OptionOption, f func(Uint8Option) []int16) Int16ArrOption {  if m.IsDefined() { return Int16ArrOpt(f(*m.value)) } else { return NoneInt16ArrOption }  }
/* Uint8OptionOption: Uint8Option->[]int32 */ func MapInt32ArrToUint8OptionOption(m Uint8OptionOption, f func(Uint8Option) []int32) Int32ArrOption {  if m.IsDefined() { return Int32ArrOpt(f(*m.value)) } else { return NoneInt32ArrOption }  }
/* Uint8OptionOption: Uint8Option->[]int64 */ func MapInt64ArrToUint8OptionOption(m Uint8OptionOption, f func(Uint8Option) []int64) Int64ArrOption {  if m.IsDefined() { return Int64ArrOpt(f(*m.value)) } else { return NoneInt64ArrOption }  }
/* Uint8OptionOption: Uint8Option->[]uint */ func MapUintArrToUint8OptionOption(m Uint8OptionOption, f func(Uint8Option) []uint) UintArrOption {  if m.IsDefined() { return UintArrOpt(f(*m.value)) } else { return NoneUintArrOption }  }
/* Uint8OptionOption: Uint8Option->[]uint8 */ func MapUint8ArrToUint8OptionOption(m Uint8OptionOption, f func(Uint8Option) []uint8) Uint8ArrOption {  if m.IsDefined() { return Uint8ArrOpt(f(*m.value)) } else { return NoneUint8ArrOption }  }
/* Uint8OptionOption: Uint8Option->[]uint16 */ func MapUint16ArrToUint8OptionOption(m Uint8OptionOption, f func(Uint8Option) []uint16) Uint16ArrOption {  if m.IsDefined() { return Uint16ArrOpt(f(*m.value)) } else { return NoneUint16ArrOption }  }
/* Uint8OptionOption: Uint8Option->[]uint32 */ func MapUint32ArrToUint8OptionOption(m Uint8OptionOption, f func(Uint8Option) []uint32) Uint32ArrOption {  if m.IsDefined() { return Uint32ArrOpt(f(*m.value)) } else { return NoneUint32ArrOption }  }
/* Uint8OptionOption: Uint8Option->[]uint64 */ func MapUint64ArrToUint8OptionOption(m Uint8OptionOption, f func(Uint8Option) []uint64) Uint64ArrOption {  if m.IsDefined() { return Uint64ArrOpt(f(*m.value)) } else { return NoneUint64ArrOption }  }
/* Uint8OptionOption: Uint8Option->[]uintptr */ func MapUintptrArrToUint8OptionOption(m Uint8OptionOption, f func(Uint8Option) []uintptr) UintptrArrOption {  if m.IsDefined() { return UintptrArrOpt(f(*m.value)) } else { return NoneUintptrArrOption }  }
/* Uint8OptionOption: Uint8Option->[]byte */ func MapByteArrToUint8OptionOption(m Uint8OptionOption, f func(Uint8Option) []byte) ByteArrOption {  if m.IsDefined() { return ByteArrOpt(f(*m.value)) } else { return NoneByteArrOption }  }
/* Uint8OptionOption: Uint8Option->[]rune */ func MapRuneArrToUint8OptionOption(m Uint8OptionOption, f func(Uint8Option) []rune) RuneArrOption {  if m.IsDefined() { return RuneArrOpt(f(*m.value)) } else { return NoneRuneArrOption }  }
/* Uint8OptionOption: Uint8Option->[]float32 */ func MapFloat32ArrToUint8OptionOption(m Uint8OptionOption, f func(Uint8Option) []float32) Float32ArrOption {  if m.IsDefined() { return Float32ArrOpt(f(*m.value)) } else { return NoneFloat32ArrOption }  }
/* Uint8OptionOption: Uint8Option->[]float64 */ func MapFloat64ArrToUint8OptionOption(m Uint8OptionOption, f func(Uint8Option) []float64) Float64ArrOption {  if m.IsDefined() { return Float64ArrOpt(f(*m.value)) } else { return NoneFloat64ArrOption }  }
/* Uint8OptionOption: Uint8Option->[]complex64 */ func MapComplex64ArrToUint8OptionOption(m Uint8OptionOption, f func(Uint8Option) []complex64) Complex64ArrOption {  if m.IsDefined() { return Complex64ArrOpt(f(*m.value)) } else { return NoneComplex64ArrOption }  }
/* Uint8OptionOption: Uint8Option->[]complex128 */ func MapComplex128ArrToUint8OptionOption(m Uint8OptionOption, f func(Uint8Option) []complex128) Complex128ArrOption {  if m.IsDefined() { return Complex128ArrOpt(f(*m.value)) } else { return NoneComplex128ArrOption }  }
/* Uint8OptionOption: Uint8Option->[]Any */ func MapAnyArrToUint8OptionOption(m Uint8OptionOption, f func(Uint8Option) []Any) AnyArrOption {  if m.IsDefined() { return AnyArrOpt(f(*m.value)) } else { return NoneAnyArrOption }  }
/* Uint8OptionOption: Uint8Option->BoolList */ func MapBoolListToUint8OptionOption(m Uint8OptionOption, f func(Uint8Option) BoolList) BoolListOption {  if m.IsDefined() { return BoolListOpt(f(*m.value)) } else { return NoneBoolListOption }  }
/* Uint8OptionOption: Uint8Option->StringList */ func MapStringListToUint8OptionOption(m Uint8OptionOption, f func(Uint8Option) StringList) StringListOption {  if m.IsDefined() { return StringListOpt(f(*m.value)) } else { return NoneStringListOption }  }
/* Uint8OptionOption: Uint8Option->IntList */ func MapIntListToUint8OptionOption(m Uint8OptionOption, f func(Uint8Option) IntList) IntListOption {  if m.IsDefined() { return IntListOpt(f(*m.value)) } else { return NoneIntListOption }  }
/* Uint8OptionOption: Uint8Option->Int8List */ func MapInt8ListToUint8OptionOption(m Uint8OptionOption, f func(Uint8Option) Int8List) Int8ListOption {  if m.IsDefined() { return Int8ListOpt(f(*m.value)) } else { return NoneInt8ListOption }  }
/* Uint8OptionOption: Uint8Option->Int16List */ func MapInt16ListToUint8OptionOption(m Uint8OptionOption, f func(Uint8Option) Int16List) Int16ListOption {  if m.IsDefined() { return Int16ListOpt(f(*m.value)) } else { return NoneInt16ListOption }  }
/* Uint8OptionOption: Uint8Option->Int32List */ func MapInt32ListToUint8OptionOption(m Uint8OptionOption, f func(Uint8Option) Int32List) Int32ListOption {  if m.IsDefined() { return Int32ListOpt(f(*m.value)) } else { return NoneInt32ListOption }  }
/* Uint8OptionOption: Uint8Option->Int64List */ func MapInt64ListToUint8OptionOption(m Uint8OptionOption, f func(Uint8Option) Int64List) Int64ListOption {  if m.IsDefined() { return Int64ListOpt(f(*m.value)) } else { return NoneInt64ListOption }  }
/* Uint8OptionOption: Uint8Option->UintList */ func MapUintListToUint8OptionOption(m Uint8OptionOption, f func(Uint8Option) UintList) UintListOption {  if m.IsDefined() { return UintListOpt(f(*m.value)) } else { return NoneUintListOption }  }
/* Uint8OptionOption: Uint8Option->Uint8List */ func MapUint8ListToUint8OptionOption(m Uint8OptionOption, f func(Uint8Option) Uint8List) Uint8ListOption {  if m.IsDefined() { return Uint8ListOpt(f(*m.value)) } else { return NoneUint8ListOption }  }
/* Uint8OptionOption: Uint8Option->Uint16List */ func MapUint16ListToUint8OptionOption(m Uint8OptionOption, f func(Uint8Option) Uint16List) Uint16ListOption {  if m.IsDefined() { return Uint16ListOpt(f(*m.value)) } else { return NoneUint16ListOption }  }
/* Uint8OptionOption: Uint8Option->Uint32List */ func MapUint32ListToUint8OptionOption(m Uint8OptionOption, f func(Uint8Option) Uint32List) Uint32ListOption {  if m.IsDefined() { return Uint32ListOpt(f(*m.value)) } else { return NoneUint32ListOption }  }
/* Uint8OptionOption: Uint8Option->Uint64List */ func MapUint64ListToUint8OptionOption(m Uint8OptionOption, f func(Uint8Option) Uint64List) Uint64ListOption {  if m.IsDefined() { return Uint64ListOpt(f(*m.value)) } else { return NoneUint64ListOption }  }
/* Uint8OptionOption: Uint8Option->UintptrList */ func MapUintptrListToUint8OptionOption(m Uint8OptionOption, f func(Uint8Option) UintptrList) UintptrListOption {  if m.IsDefined() { return UintptrListOpt(f(*m.value)) } else { return NoneUintptrListOption }  }
/* Uint8OptionOption: Uint8Option->ByteList */ func MapByteListToUint8OptionOption(m Uint8OptionOption, f func(Uint8Option) ByteList) ByteListOption {  if m.IsDefined() { return ByteListOpt(f(*m.value)) } else { return NoneByteListOption }  }
/* Uint8OptionOption: Uint8Option->RuneList */ func MapRuneListToUint8OptionOption(m Uint8OptionOption, f func(Uint8Option) RuneList) RuneListOption {  if m.IsDefined() { return RuneListOpt(f(*m.value)) } else { return NoneRuneListOption }  }
/* Uint8OptionOption: Uint8Option->Float32List */ func MapFloat32ListToUint8OptionOption(m Uint8OptionOption, f func(Uint8Option) Float32List) Float32ListOption {  if m.IsDefined() { return Float32ListOpt(f(*m.value)) } else { return NoneFloat32ListOption }  }
/* Uint8OptionOption: Uint8Option->Float64List */ func MapFloat64ListToUint8OptionOption(m Uint8OptionOption, f func(Uint8Option) Float64List) Float64ListOption {  if m.IsDefined() { return Float64ListOpt(f(*m.value)) } else { return NoneFloat64ListOption }  }
/* Uint8OptionOption: Uint8Option->Complex64List */ func MapComplex64ListToUint8OptionOption(m Uint8OptionOption, f func(Uint8Option) Complex64List) Complex64ListOption {  if m.IsDefined() { return Complex64ListOpt(f(*m.value)) } else { return NoneComplex64ListOption }  }
/* Uint8OptionOption: Uint8Option->Complex128List */ func MapComplex128ListToUint8OptionOption(m Uint8OptionOption, f func(Uint8Option) Complex128List) Complex128ListOption {  if m.IsDefined() { return Complex128ListOpt(f(*m.value)) } else { return NoneComplex128ListOption }  }
/* Uint8OptionOption: Uint8Option->AnyList */ func MapAnyListToUint8OptionOption(m Uint8OptionOption, f func(Uint8Option) AnyList) AnyListOption {  if m.IsDefined() { return AnyListOpt(f(*m.value)) } else { return NoneAnyListOption }  }
/* Uint16OptionOption: Uint16Option->bool */ func MapBoolToUint16OptionOption(m Uint16OptionOption, f func(Uint16Option) bool) BoolOption {  if m.IsDefined() { return Bool(f(*m.value)) } else { return NoneBoolOption }  }
/* Uint16OptionOption: Uint16Option->string */ func MapStringToUint16OptionOption(m Uint16OptionOption, f func(Uint16Option) string) StringOption {  if m.IsDefined() { return String(f(*m.value)) } else { return NoneStringOption }  }
/* Uint16OptionOption: Uint16Option->int */ func MapIntToUint16OptionOption(m Uint16OptionOption, f func(Uint16Option) int) IntOption {  if m.IsDefined() { return Int(f(*m.value)) } else { return NoneIntOption }  }
/* Uint16OptionOption: Uint16Option->int8 */ func MapInt8ToUint16OptionOption(m Uint16OptionOption, f func(Uint16Option) int8) Int8Option {  if m.IsDefined() { return Int8(f(*m.value)) } else { return NoneInt8Option }  }
/* Uint16OptionOption: Uint16Option->int16 */ func MapInt16ToUint16OptionOption(m Uint16OptionOption, f func(Uint16Option) int16) Int16Option {  if m.IsDefined() { return Int16(f(*m.value)) } else { return NoneInt16Option }  }
/* Uint16OptionOption: Uint16Option->int32 */ func MapInt32ToUint16OptionOption(m Uint16OptionOption, f func(Uint16Option) int32) Int32Option {  if m.IsDefined() { return Int32(f(*m.value)) } else { return NoneInt32Option }  }
/* Uint16OptionOption: Uint16Option->int64 */ func MapInt64ToUint16OptionOption(m Uint16OptionOption, f func(Uint16Option) int64) Int64Option {  if m.IsDefined() { return Int64(f(*m.value)) } else { return NoneInt64Option }  }
/* Uint16OptionOption: Uint16Option->uint */ func MapUintToUint16OptionOption(m Uint16OptionOption, f func(Uint16Option) uint) UintOption {  if m.IsDefined() { return Uint(f(*m.value)) } else { return NoneUintOption }  }
/* Uint16OptionOption: Uint16Option->uint8 */ func MapUint8ToUint16OptionOption(m Uint16OptionOption, f func(Uint16Option) uint8) Uint8Option {  if m.IsDefined() { return Uint8(f(*m.value)) } else { return NoneUint8Option }  }
/* Uint16OptionOption: Uint16Option->uint16 */ func MapUint16ToUint16OptionOption(m Uint16OptionOption, f func(Uint16Option) uint16) Uint16Option {  if m.IsDefined() { return Uint16(f(*m.value)) } else { return NoneUint16Option }  }
/* Uint16OptionOption: Uint16Option->uint32 */ func MapUint32ToUint16OptionOption(m Uint16OptionOption, f func(Uint16Option) uint32) Uint32Option {  if m.IsDefined() { return Uint32(f(*m.value)) } else { return NoneUint32Option }  }
/* Uint16OptionOption: Uint16Option->uint64 */ func MapUint64ToUint16OptionOption(m Uint16OptionOption, f func(Uint16Option) uint64) Uint64Option {  if m.IsDefined() { return Uint64(f(*m.value)) } else { return NoneUint64Option }  }
/* Uint16OptionOption: Uint16Option->uintptr */ func MapUintptrToUint16OptionOption(m Uint16OptionOption, f func(Uint16Option) uintptr) UintptrOption {  if m.IsDefined() { return Uintptr(f(*m.value)) } else { return NoneUintptrOption }  }
/* Uint16OptionOption: Uint16Option->byte */ func MapByteToUint16OptionOption(m Uint16OptionOption, f func(Uint16Option) byte) ByteOption {  if m.IsDefined() { return Byte(f(*m.value)) } else { return NoneByteOption }  }
/* Uint16OptionOption: Uint16Option->rune */ func MapRuneToUint16OptionOption(m Uint16OptionOption, f func(Uint16Option) rune) RuneOption {  if m.IsDefined() { return Rune(f(*m.value)) } else { return NoneRuneOption }  }
/* Uint16OptionOption: Uint16Option->float32 */ func MapFloat32ToUint16OptionOption(m Uint16OptionOption, f func(Uint16Option) float32) Float32Option {  if m.IsDefined() { return Float32(f(*m.value)) } else { return NoneFloat32Option }  }
/* Uint16OptionOption: Uint16Option->float64 */ func MapFloat64ToUint16OptionOption(m Uint16OptionOption, f func(Uint16Option) float64) Float64Option {  if m.IsDefined() { return Float64(f(*m.value)) } else { return NoneFloat64Option }  }
/* Uint16OptionOption: Uint16Option->complex64 */ func MapComplex64ToUint16OptionOption(m Uint16OptionOption, f func(Uint16Option) complex64) Complex64Option {  if m.IsDefined() { return Complex64(f(*m.value)) } else { return NoneComplex64Option }  }
/* Uint16OptionOption: Uint16Option->complex128 */ func MapComplex128ToUint16OptionOption(m Uint16OptionOption, f func(Uint16Option) complex128) Complex128Option {  if m.IsDefined() { return Complex128(f(*m.value)) } else { return NoneComplex128Option }  }
/* Uint16OptionOption: Uint16Option->Any */ func MapAnyToUint16OptionOption(m Uint16OptionOption, f func(Uint16Option) Any) AnyOption {  if m.IsDefined() { return AnyOpt(f(*m.value)) } else { return NoneAnyOption }  }
/* Uint16OptionOption: Uint16Option->BoolOption */ func MapBoolOptionToUint16OptionOption(m Uint16OptionOption, f func(Uint16Option) BoolOption) BoolOptionOption {  if m.IsDefined() { return BoolBool(f(*m.value)) } else { return NoneBoolOptionOption }  }
/* Uint16OptionOption: Uint16Option->StringOption */ func MapStringOptionToUint16OptionOption(m Uint16OptionOption, f func(Uint16Option) StringOption) StringOptionOption {  if m.IsDefined() { return StringString(f(*m.value)) } else { return NoneStringOptionOption }  }
/* Uint16OptionOption: Uint16Option->IntOption */ func MapIntOptionToUint16OptionOption(m Uint16OptionOption, f func(Uint16Option) IntOption) IntOptionOption {  if m.IsDefined() { return IntInt(f(*m.value)) } else { return NoneIntOptionOption }  }
/* Uint16OptionOption: Uint16Option->Int8Option */ func MapInt8OptionToUint16OptionOption(m Uint16OptionOption, f func(Uint16Option) Int8Option) Int8OptionOption {  if m.IsDefined() { return Int8Int8(f(*m.value)) } else { return NoneInt8OptionOption }  }
/* Uint16OptionOption: Uint16Option->Int16Option */ func MapInt16OptionToUint16OptionOption(m Uint16OptionOption, f func(Uint16Option) Int16Option) Int16OptionOption {  if m.IsDefined() { return Int16Int16(f(*m.value)) } else { return NoneInt16OptionOption }  }
/* Uint16OptionOption: Uint16Option->Int32Option */ func MapInt32OptionToUint16OptionOption(m Uint16OptionOption, f func(Uint16Option) Int32Option) Int32OptionOption {  if m.IsDefined() { return Int32Int32(f(*m.value)) } else { return NoneInt32OptionOption }  }
/* Uint16OptionOption: Uint16Option->Int64Option */ func MapInt64OptionToUint16OptionOption(m Uint16OptionOption, f func(Uint16Option) Int64Option) Int64OptionOption {  if m.IsDefined() { return Int64Int64(f(*m.value)) } else { return NoneInt64OptionOption }  }
/* Uint16OptionOption: Uint16Option->UintOption */ func MapUintOptionToUint16OptionOption(m Uint16OptionOption, f func(Uint16Option) UintOption) UintOptionOption {  if m.IsDefined() { return UintUint(f(*m.value)) } else { return NoneUintOptionOption }  }
/* Uint16OptionOption: Uint16Option->Uint8Option */ func MapUint8OptionToUint16OptionOption(m Uint16OptionOption, f func(Uint16Option) Uint8Option) Uint8OptionOption {  if m.IsDefined() { return Uint8Uint8(f(*m.value)) } else { return NoneUint8OptionOption }  }
/* Uint16OptionOption: Uint16Option->Uint16Option */ func MapUint16OptionToUint16OptionOption(m Uint16OptionOption, f func(Uint16Option) Uint16Option) Uint16OptionOption {  if m.IsDefined() { return Uint16Uint16(f(*m.value)) } else { return NoneUint16OptionOption }  }
/* Uint16OptionOption: Uint16Option->Uint32Option */ func MapUint32OptionToUint16OptionOption(m Uint16OptionOption, f func(Uint16Option) Uint32Option) Uint32OptionOption {  if m.IsDefined() { return Uint32Uint32(f(*m.value)) } else { return NoneUint32OptionOption }  }
/* Uint16OptionOption: Uint16Option->Uint64Option */ func MapUint64OptionToUint16OptionOption(m Uint16OptionOption, f func(Uint16Option) Uint64Option) Uint64OptionOption {  if m.IsDefined() { return Uint64Uint64(f(*m.value)) } else { return NoneUint64OptionOption }  }
/* Uint16OptionOption: Uint16Option->UintptrOption */ func MapUintptrOptionToUint16OptionOption(m Uint16OptionOption, f func(Uint16Option) UintptrOption) UintptrOptionOption {  if m.IsDefined() { return UintptrUintptr(f(*m.value)) } else { return NoneUintptrOptionOption }  }
/* Uint16OptionOption: Uint16Option->ByteOption */ func MapByteOptionToUint16OptionOption(m Uint16OptionOption, f func(Uint16Option) ByteOption) ByteOptionOption {  if m.IsDefined() { return ByteByte(f(*m.value)) } else { return NoneByteOptionOption }  }
/* Uint16OptionOption: Uint16Option->RuneOption */ func MapRuneOptionToUint16OptionOption(m Uint16OptionOption, f func(Uint16Option) RuneOption) RuneOptionOption {  if m.IsDefined() { return RuneRune(f(*m.value)) } else { return NoneRuneOptionOption }  }
/* Uint16OptionOption: Uint16Option->Float32Option */ func MapFloat32OptionToUint16OptionOption(m Uint16OptionOption, f func(Uint16Option) Float32Option) Float32OptionOption {  if m.IsDefined() { return Float32Float32(f(*m.value)) } else { return NoneFloat32OptionOption }  }
/* Uint16OptionOption: Uint16Option->Float64Option */ func MapFloat64OptionToUint16OptionOption(m Uint16OptionOption, f func(Uint16Option) Float64Option) Float64OptionOption {  if m.IsDefined() { return Float64Float64(f(*m.value)) } else { return NoneFloat64OptionOption }  }
/* Uint16OptionOption: Uint16Option->Complex64Option */ func MapComplex64OptionToUint16OptionOption(m Uint16OptionOption, f func(Uint16Option) Complex64Option) Complex64OptionOption {  if m.IsDefined() { return Complex64Complex64(f(*m.value)) } else { return NoneComplex64OptionOption }  }
/* Uint16OptionOption: Uint16Option->Complex128Option */ func MapComplex128OptionToUint16OptionOption(m Uint16OptionOption, f func(Uint16Option) Complex128Option) Complex128OptionOption {  if m.IsDefined() { return Complex128Complex128(f(*m.value)) } else { return NoneComplex128OptionOption }  }
/* Uint16OptionOption: Uint16Option->AnyOption */ func MapAnyOptionToUint16OptionOption(m Uint16OptionOption, f func(Uint16Option) AnyOption) AnyOptionOption {  if m.IsDefined() { return AnyOptAny(f(*m.value)) } else { return NoneAnyOptionOption }  }
/* Uint16OptionOption: Uint16Option->[]bool */ func MapBoolArrToUint16OptionOption(m Uint16OptionOption, f func(Uint16Option) []bool) BoolArrOption {  if m.IsDefined() { return BoolArrOpt(f(*m.value)) } else { return NoneBoolArrOption }  }
/* Uint16OptionOption: Uint16Option->[]string */ func MapStringArrToUint16OptionOption(m Uint16OptionOption, f func(Uint16Option) []string) StringArrOption {  if m.IsDefined() { return StringArrOpt(f(*m.value)) } else { return NoneStringArrOption }  }
/* Uint16OptionOption: Uint16Option->[]int */ func MapIntArrToUint16OptionOption(m Uint16OptionOption, f func(Uint16Option) []int) IntArrOption {  if m.IsDefined() { return IntArrOpt(f(*m.value)) } else { return NoneIntArrOption }  }
/* Uint16OptionOption: Uint16Option->[]int8 */ func MapInt8ArrToUint16OptionOption(m Uint16OptionOption, f func(Uint16Option) []int8) Int8ArrOption {  if m.IsDefined() { return Int8ArrOpt(f(*m.value)) } else { return NoneInt8ArrOption }  }
/* Uint16OptionOption: Uint16Option->[]int16 */ func MapInt16ArrToUint16OptionOption(m Uint16OptionOption, f func(Uint16Option) []int16) Int16ArrOption {  if m.IsDefined() { return Int16ArrOpt(f(*m.value)) } else { return NoneInt16ArrOption }  }
/* Uint16OptionOption: Uint16Option->[]int32 */ func MapInt32ArrToUint16OptionOption(m Uint16OptionOption, f func(Uint16Option) []int32) Int32ArrOption {  if m.IsDefined() { return Int32ArrOpt(f(*m.value)) } else { return NoneInt32ArrOption }  }
/* Uint16OptionOption: Uint16Option->[]int64 */ func MapInt64ArrToUint16OptionOption(m Uint16OptionOption, f func(Uint16Option) []int64) Int64ArrOption {  if m.IsDefined() { return Int64ArrOpt(f(*m.value)) } else { return NoneInt64ArrOption }  }
/* Uint16OptionOption: Uint16Option->[]uint */ func MapUintArrToUint16OptionOption(m Uint16OptionOption, f func(Uint16Option) []uint) UintArrOption {  if m.IsDefined() { return UintArrOpt(f(*m.value)) } else { return NoneUintArrOption }  }
/* Uint16OptionOption: Uint16Option->[]uint8 */ func MapUint8ArrToUint16OptionOption(m Uint16OptionOption, f func(Uint16Option) []uint8) Uint8ArrOption {  if m.IsDefined() { return Uint8ArrOpt(f(*m.value)) } else { return NoneUint8ArrOption }  }
/* Uint16OptionOption: Uint16Option->[]uint16 */ func MapUint16ArrToUint16OptionOption(m Uint16OptionOption, f func(Uint16Option) []uint16) Uint16ArrOption {  if m.IsDefined() { return Uint16ArrOpt(f(*m.value)) } else { return NoneUint16ArrOption }  }
/* Uint16OptionOption: Uint16Option->[]uint32 */ func MapUint32ArrToUint16OptionOption(m Uint16OptionOption, f func(Uint16Option) []uint32) Uint32ArrOption {  if m.IsDefined() { return Uint32ArrOpt(f(*m.value)) } else { return NoneUint32ArrOption }  }
/* Uint16OptionOption: Uint16Option->[]uint64 */ func MapUint64ArrToUint16OptionOption(m Uint16OptionOption, f func(Uint16Option) []uint64) Uint64ArrOption {  if m.IsDefined() { return Uint64ArrOpt(f(*m.value)) } else { return NoneUint64ArrOption }  }
/* Uint16OptionOption: Uint16Option->[]uintptr */ func MapUintptrArrToUint16OptionOption(m Uint16OptionOption, f func(Uint16Option) []uintptr) UintptrArrOption {  if m.IsDefined() { return UintptrArrOpt(f(*m.value)) } else { return NoneUintptrArrOption }  }
/* Uint16OptionOption: Uint16Option->[]byte */ func MapByteArrToUint16OptionOption(m Uint16OptionOption, f func(Uint16Option) []byte) ByteArrOption {  if m.IsDefined() { return ByteArrOpt(f(*m.value)) } else { return NoneByteArrOption }  }
/* Uint16OptionOption: Uint16Option->[]rune */ func MapRuneArrToUint16OptionOption(m Uint16OptionOption, f func(Uint16Option) []rune) RuneArrOption {  if m.IsDefined() { return RuneArrOpt(f(*m.value)) } else { return NoneRuneArrOption }  }
/* Uint16OptionOption: Uint16Option->[]float32 */ func MapFloat32ArrToUint16OptionOption(m Uint16OptionOption, f func(Uint16Option) []float32) Float32ArrOption {  if m.IsDefined() { return Float32ArrOpt(f(*m.value)) } else { return NoneFloat32ArrOption }  }
/* Uint16OptionOption: Uint16Option->[]float64 */ func MapFloat64ArrToUint16OptionOption(m Uint16OptionOption, f func(Uint16Option) []float64) Float64ArrOption {  if m.IsDefined() { return Float64ArrOpt(f(*m.value)) } else { return NoneFloat64ArrOption }  }
/* Uint16OptionOption: Uint16Option->[]complex64 */ func MapComplex64ArrToUint16OptionOption(m Uint16OptionOption, f func(Uint16Option) []complex64) Complex64ArrOption {  if m.IsDefined() { return Complex64ArrOpt(f(*m.value)) } else { return NoneComplex64ArrOption }  }
/* Uint16OptionOption: Uint16Option->[]complex128 */ func MapComplex128ArrToUint16OptionOption(m Uint16OptionOption, f func(Uint16Option) []complex128) Complex128ArrOption {  if m.IsDefined() { return Complex128ArrOpt(f(*m.value)) } else { return NoneComplex128ArrOption }  }
/* Uint16OptionOption: Uint16Option->[]Any */ func MapAnyArrToUint16OptionOption(m Uint16OptionOption, f func(Uint16Option) []Any) AnyArrOption {  if m.IsDefined() { return AnyArrOpt(f(*m.value)) } else { return NoneAnyArrOption }  }
/* Uint16OptionOption: Uint16Option->BoolList */ func MapBoolListToUint16OptionOption(m Uint16OptionOption, f func(Uint16Option) BoolList) BoolListOption {  if m.IsDefined() { return BoolListOpt(f(*m.value)) } else { return NoneBoolListOption }  }
/* Uint16OptionOption: Uint16Option->StringList */ func MapStringListToUint16OptionOption(m Uint16OptionOption, f func(Uint16Option) StringList) StringListOption {  if m.IsDefined() { return StringListOpt(f(*m.value)) } else { return NoneStringListOption }  }
/* Uint16OptionOption: Uint16Option->IntList */ func MapIntListToUint16OptionOption(m Uint16OptionOption, f func(Uint16Option) IntList) IntListOption {  if m.IsDefined() { return IntListOpt(f(*m.value)) } else { return NoneIntListOption }  }
/* Uint16OptionOption: Uint16Option->Int8List */ func MapInt8ListToUint16OptionOption(m Uint16OptionOption, f func(Uint16Option) Int8List) Int8ListOption {  if m.IsDefined() { return Int8ListOpt(f(*m.value)) } else { return NoneInt8ListOption }  }
/* Uint16OptionOption: Uint16Option->Int16List */ func MapInt16ListToUint16OptionOption(m Uint16OptionOption, f func(Uint16Option) Int16List) Int16ListOption {  if m.IsDefined() { return Int16ListOpt(f(*m.value)) } else { return NoneInt16ListOption }  }
/* Uint16OptionOption: Uint16Option->Int32List */ func MapInt32ListToUint16OptionOption(m Uint16OptionOption, f func(Uint16Option) Int32List) Int32ListOption {  if m.IsDefined() { return Int32ListOpt(f(*m.value)) } else { return NoneInt32ListOption }  }
/* Uint16OptionOption: Uint16Option->Int64List */ func MapInt64ListToUint16OptionOption(m Uint16OptionOption, f func(Uint16Option) Int64List) Int64ListOption {  if m.IsDefined() { return Int64ListOpt(f(*m.value)) } else { return NoneInt64ListOption }  }
/* Uint16OptionOption: Uint16Option->UintList */ func MapUintListToUint16OptionOption(m Uint16OptionOption, f func(Uint16Option) UintList) UintListOption {  if m.IsDefined() { return UintListOpt(f(*m.value)) } else { return NoneUintListOption }  }
/* Uint16OptionOption: Uint16Option->Uint8List */ func MapUint8ListToUint16OptionOption(m Uint16OptionOption, f func(Uint16Option) Uint8List) Uint8ListOption {  if m.IsDefined() { return Uint8ListOpt(f(*m.value)) } else { return NoneUint8ListOption }  }
/* Uint16OptionOption: Uint16Option->Uint16List */ func MapUint16ListToUint16OptionOption(m Uint16OptionOption, f func(Uint16Option) Uint16List) Uint16ListOption {  if m.IsDefined() { return Uint16ListOpt(f(*m.value)) } else { return NoneUint16ListOption }  }
/* Uint16OptionOption: Uint16Option->Uint32List */ func MapUint32ListToUint16OptionOption(m Uint16OptionOption, f func(Uint16Option) Uint32List) Uint32ListOption {  if m.IsDefined() { return Uint32ListOpt(f(*m.value)) } else { return NoneUint32ListOption }  }
/* Uint16OptionOption: Uint16Option->Uint64List */ func MapUint64ListToUint16OptionOption(m Uint16OptionOption, f func(Uint16Option) Uint64List) Uint64ListOption {  if m.IsDefined() { return Uint64ListOpt(f(*m.value)) } else { return NoneUint64ListOption }  }
/* Uint16OptionOption: Uint16Option->UintptrList */ func MapUintptrListToUint16OptionOption(m Uint16OptionOption, f func(Uint16Option) UintptrList) UintptrListOption {  if m.IsDefined() { return UintptrListOpt(f(*m.value)) } else { return NoneUintptrListOption }  }
/* Uint16OptionOption: Uint16Option->ByteList */ func MapByteListToUint16OptionOption(m Uint16OptionOption, f func(Uint16Option) ByteList) ByteListOption {  if m.IsDefined() { return ByteListOpt(f(*m.value)) } else { return NoneByteListOption }  }
/* Uint16OptionOption: Uint16Option->RuneList */ func MapRuneListToUint16OptionOption(m Uint16OptionOption, f func(Uint16Option) RuneList) RuneListOption {  if m.IsDefined() { return RuneListOpt(f(*m.value)) } else { return NoneRuneListOption }  }
/* Uint16OptionOption: Uint16Option->Float32List */ func MapFloat32ListToUint16OptionOption(m Uint16OptionOption, f func(Uint16Option) Float32List) Float32ListOption {  if m.IsDefined() { return Float32ListOpt(f(*m.value)) } else { return NoneFloat32ListOption }  }
/* Uint16OptionOption: Uint16Option->Float64List */ func MapFloat64ListToUint16OptionOption(m Uint16OptionOption, f func(Uint16Option) Float64List) Float64ListOption {  if m.IsDefined() { return Float64ListOpt(f(*m.value)) } else { return NoneFloat64ListOption }  }
/* Uint16OptionOption: Uint16Option->Complex64List */ func MapComplex64ListToUint16OptionOption(m Uint16OptionOption, f func(Uint16Option) Complex64List) Complex64ListOption {  if m.IsDefined() { return Complex64ListOpt(f(*m.value)) } else { return NoneComplex64ListOption }  }
/* Uint16OptionOption: Uint16Option->Complex128List */ func MapComplex128ListToUint16OptionOption(m Uint16OptionOption, f func(Uint16Option) Complex128List) Complex128ListOption {  if m.IsDefined() { return Complex128ListOpt(f(*m.value)) } else { return NoneComplex128ListOption }  }
/* Uint16OptionOption: Uint16Option->AnyList */ func MapAnyListToUint16OptionOption(m Uint16OptionOption, f func(Uint16Option) AnyList) AnyListOption {  if m.IsDefined() { return AnyListOpt(f(*m.value)) } else { return NoneAnyListOption }  }
/* Uint32OptionOption: Uint32Option->bool */ func MapBoolToUint32OptionOption(m Uint32OptionOption, f func(Uint32Option) bool) BoolOption {  if m.IsDefined() { return Bool(f(*m.value)) } else { return NoneBoolOption }  }
/* Uint32OptionOption: Uint32Option->string */ func MapStringToUint32OptionOption(m Uint32OptionOption, f func(Uint32Option) string) StringOption {  if m.IsDefined() { return String(f(*m.value)) } else { return NoneStringOption }  }
/* Uint32OptionOption: Uint32Option->int */ func MapIntToUint32OptionOption(m Uint32OptionOption, f func(Uint32Option) int) IntOption {  if m.IsDefined() { return Int(f(*m.value)) } else { return NoneIntOption }  }
/* Uint32OptionOption: Uint32Option->int8 */ func MapInt8ToUint32OptionOption(m Uint32OptionOption, f func(Uint32Option) int8) Int8Option {  if m.IsDefined() { return Int8(f(*m.value)) } else { return NoneInt8Option }  }
/* Uint32OptionOption: Uint32Option->int16 */ func MapInt16ToUint32OptionOption(m Uint32OptionOption, f func(Uint32Option) int16) Int16Option {  if m.IsDefined() { return Int16(f(*m.value)) } else { return NoneInt16Option }  }
/* Uint32OptionOption: Uint32Option->int32 */ func MapInt32ToUint32OptionOption(m Uint32OptionOption, f func(Uint32Option) int32) Int32Option {  if m.IsDefined() { return Int32(f(*m.value)) } else { return NoneInt32Option }  }
/* Uint32OptionOption: Uint32Option->int64 */ func MapInt64ToUint32OptionOption(m Uint32OptionOption, f func(Uint32Option) int64) Int64Option {  if m.IsDefined() { return Int64(f(*m.value)) } else { return NoneInt64Option }  }
/* Uint32OptionOption: Uint32Option->uint */ func MapUintToUint32OptionOption(m Uint32OptionOption, f func(Uint32Option) uint) UintOption {  if m.IsDefined() { return Uint(f(*m.value)) } else { return NoneUintOption }  }
/* Uint32OptionOption: Uint32Option->uint8 */ func MapUint8ToUint32OptionOption(m Uint32OptionOption, f func(Uint32Option) uint8) Uint8Option {  if m.IsDefined() { return Uint8(f(*m.value)) } else { return NoneUint8Option }  }
/* Uint32OptionOption: Uint32Option->uint16 */ func MapUint16ToUint32OptionOption(m Uint32OptionOption, f func(Uint32Option) uint16) Uint16Option {  if m.IsDefined() { return Uint16(f(*m.value)) } else { return NoneUint16Option }  }
/* Uint32OptionOption: Uint32Option->uint32 */ func MapUint32ToUint32OptionOption(m Uint32OptionOption, f func(Uint32Option) uint32) Uint32Option {  if m.IsDefined() { return Uint32(f(*m.value)) } else { return NoneUint32Option }  }
/* Uint32OptionOption: Uint32Option->uint64 */ func MapUint64ToUint32OptionOption(m Uint32OptionOption, f func(Uint32Option) uint64) Uint64Option {  if m.IsDefined() { return Uint64(f(*m.value)) } else { return NoneUint64Option }  }
/* Uint32OptionOption: Uint32Option->uintptr */ func MapUintptrToUint32OptionOption(m Uint32OptionOption, f func(Uint32Option) uintptr) UintptrOption {  if m.IsDefined() { return Uintptr(f(*m.value)) } else { return NoneUintptrOption }  }
/* Uint32OptionOption: Uint32Option->byte */ func MapByteToUint32OptionOption(m Uint32OptionOption, f func(Uint32Option) byte) ByteOption {  if m.IsDefined() { return Byte(f(*m.value)) } else { return NoneByteOption }  }
/* Uint32OptionOption: Uint32Option->rune */ func MapRuneToUint32OptionOption(m Uint32OptionOption, f func(Uint32Option) rune) RuneOption {  if m.IsDefined() { return Rune(f(*m.value)) } else { return NoneRuneOption }  }
/* Uint32OptionOption: Uint32Option->float32 */ func MapFloat32ToUint32OptionOption(m Uint32OptionOption, f func(Uint32Option) float32) Float32Option {  if m.IsDefined() { return Float32(f(*m.value)) } else { return NoneFloat32Option }  }
/* Uint32OptionOption: Uint32Option->float64 */ func MapFloat64ToUint32OptionOption(m Uint32OptionOption, f func(Uint32Option) float64) Float64Option {  if m.IsDefined() { return Float64(f(*m.value)) } else { return NoneFloat64Option }  }
/* Uint32OptionOption: Uint32Option->complex64 */ func MapComplex64ToUint32OptionOption(m Uint32OptionOption, f func(Uint32Option) complex64) Complex64Option {  if m.IsDefined() { return Complex64(f(*m.value)) } else { return NoneComplex64Option }  }
/* Uint32OptionOption: Uint32Option->complex128 */ func MapComplex128ToUint32OptionOption(m Uint32OptionOption, f func(Uint32Option) complex128) Complex128Option {  if m.IsDefined() { return Complex128(f(*m.value)) } else { return NoneComplex128Option }  }
/* Uint32OptionOption: Uint32Option->Any */ func MapAnyToUint32OptionOption(m Uint32OptionOption, f func(Uint32Option) Any) AnyOption {  if m.IsDefined() { return AnyOpt(f(*m.value)) } else { return NoneAnyOption }  }
/* Uint32OptionOption: Uint32Option->BoolOption */ func MapBoolOptionToUint32OptionOption(m Uint32OptionOption, f func(Uint32Option) BoolOption) BoolOptionOption {  if m.IsDefined() { return BoolBool(f(*m.value)) } else { return NoneBoolOptionOption }  }
/* Uint32OptionOption: Uint32Option->StringOption */ func MapStringOptionToUint32OptionOption(m Uint32OptionOption, f func(Uint32Option) StringOption) StringOptionOption {  if m.IsDefined() { return StringString(f(*m.value)) } else { return NoneStringOptionOption }  }
/* Uint32OptionOption: Uint32Option->IntOption */ func MapIntOptionToUint32OptionOption(m Uint32OptionOption, f func(Uint32Option) IntOption) IntOptionOption {  if m.IsDefined() { return IntInt(f(*m.value)) } else { return NoneIntOptionOption }  }
/* Uint32OptionOption: Uint32Option->Int8Option */ func MapInt8OptionToUint32OptionOption(m Uint32OptionOption, f func(Uint32Option) Int8Option) Int8OptionOption {  if m.IsDefined() { return Int8Int8(f(*m.value)) } else { return NoneInt8OptionOption }  }
/* Uint32OptionOption: Uint32Option->Int16Option */ func MapInt16OptionToUint32OptionOption(m Uint32OptionOption, f func(Uint32Option) Int16Option) Int16OptionOption {  if m.IsDefined() { return Int16Int16(f(*m.value)) } else { return NoneInt16OptionOption }  }
/* Uint32OptionOption: Uint32Option->Int32Option */ func MapInt32OptionToUint32OptionOption(m Uint32OptionOption, f func(Uint32Option) Int32Option) Int32OptionOption {  if m.IsDefined() { return Int32Int32(f(*m.value)) } else { return NoneInt32OptionOption }  }
/* Uint32OptionOption: Uint32Option->Int64Option */ func MapInt64OptionToUint32OptionOption(m Uint32OptionOption, f func(Uint32Option) Int64Option) Int64OptionOption {  if m.IsDefined() { return Int64Int64(f(*m.value)) } else { return NoneInt64OptionOption }  }
/* Uint32OptionOption: Uint32Option->UintOption */ func MapUintOptionToUint32OptionOption(m Uint32OptionOption, f func(Uint32Option) UintOption) UintOptionOption {  if m.IsDefined() { return UintUint(f(*m.value)) } else { return NoneUintOptionOption }  }
/* Uint32OptionOption: Uint32Option->Uint8Option */ func MapUint8OptionToUint32OptionOption(m Uint32OptionOption, f func(Uint32Option) Uint8Option) Uint8OptionOption {  if m.IsDefined() { return Uint8Uint8(f(*m.value)) } else { return NoneUint8OptionOption }  }
/* Uint32OptionOption: Uint32Option->Uint16Option */ func MapUint16OptionToUint32OptionOption(m Uint32OptionOption, f func(Uint32Option) Uint16Option) Uint16OptionOption {  if m.IsDefined() { return Uint16Uint16(f(*m.value)) } else { return NoneUint16OptionOption }  }
/* Uint32OptionOption: Uint32Option->Uint32Option */ func MapUint32OptionToUint32OptionOption(m Uint32OptionOption, f func(Uint32Option) Uint32Option) Uint32OptionOption {  if m.IsDefined() { return Uint32Uint32(f(*m.value)) } else { return NoneUint32OptionOption }  }
/* Uint32OptionOption: Uint32Option->Uint64Option */ func MapUint64OptionToUint32OptionOption(m Uint32OptionOption, f func(Uint32Option) Uint64Option) Uint64OptionOption {  if m.IsDefined() { return Uint64Uint64(f(*m.value)) } else { return NoneUint64OptionOption }  }
/* Uint32OptionOption: Uint32Option->UintptrOption */ func MapUintptrOptionToUint32OptionOption(m Uint32OptionOption, f func(Uint32Option) UintptrOption) UintptrOptionOption {  if m.IsDefined() { return UintptrUintptr(f(*m.value)) } else { return NoneUintptrOptionOption }  }
/* Uint32OptionOption: Uint32Option->ByteOption */ func MapByteOptionToUint32OptionOption(m Uint32OptionOption, f func(Uint32Option) ByteOption) ByteOptionOption {  if m.IsDefined() { return ByteByte(f(*m.value)) } else { return NoneByteOptionOption }  }
/* Uint32OptionOption: Uint32Option->RuneOption */ func MapRuneOptionToUint32OptionOption(m Uint32OptionOption, f func(Uint32Option) RuneOption) RuneOptionOption {  if m.IsDefined() { return RuneRune(f(*m.value)) } else { return NoneRuneOptionOption }  }
/* Uint32OptionOption: Uint32Option->Float32Option */ func MapFloat32OptionToUint32OptionOption(m Uint32OptionOption, f func(Uint32Option) Float32Option) Float32OptionOption {  if m.IsDefined() { return Float32Float32(f(*m.value)) } else { return NoneFloat32OptionOption }  }
/* Uint32OptionOption: Uint32Option->Float64Option */ func MapFloat64OptionToUint32OptionOption(m Uint32OptionOption, f func(Uint32Option) Float64Option) Float64OptionOption {  if m.IsDefined() { return Float64Float64(f(*m.value)) } else { return NoneFloat64OptionOption }  }
/* Uint32OptionOption: Uint32Option->Complex64Option */ func MapComplex64OptionToUint32OptionOption(m Uint32OptionOption, f func(Uint32Option) Complex64Option) Complex64OptionOption {  if m.IsDefined() { return Complex64Complex64(f(*m.value)) } else { return NoneComplex64OptionOption }  }
/* Uint32OptionOption: Uint32Option->Complex128Option */ func MapComplex128OptionToUint32OptionOption(m Uint32OptionOption, f func(Uint32Option) Complex128Option) Complex128OptionOption {  if m.IsDefined() { return Complex128Complex128(f(*m.value)) } else { return NoneComplex128OptionOption }  }
/* Uint32OptionOption: Uint32Option->AnyOption */ func MapAnyOptionToUint32OptionOption(m Uint32OptionOption, f func(Uint32Option) AnyOption) AnyOptionOption {  if m.IsDefined() { return AnyOptAny(f(*m.value)) } else { return NoneAnyOptionOption }  }
/* Uint32OptionOption: Uint32Option->[]bool */ func MapBoolArrToUint32OptionOption(m Uint32OptionOption, f func(Uint32Option) []bool) BoolArrOption {  if m.IsDefined() { return BoolArrOpt(f(*m.value)) } else { return NoneBoolArrOption }  }
/* Uint32OptionOption: Uint32Option->[]string */ func MapStringArrToUint32OptionOption(m Uint32OptionOption, f func(Uint32Option) []string) StringArrOption {  if m.IsDefined() { return StringArrOpt(f(*m.value)) } else { return NoneStringArrOption }  }
/* Uint32OptionOption: Uint32Option->[]int */ func MapIntArrToUint32OptionOption(m Uint32OptionOption, f func(Uint32Option) []int) IntArrOption {  if m.IsDefined() { return IntArrOpt(f(*m.value)) } else { return NoneIntArrOption }  }
/* Uint32OptionOption: Uint32Option->[]int8 */ func MapInt8ArrToUint32OptionOption(m Uint32OptionOption, f func(Uint32Option) []int8) Int8ArrOption {  if m.IsDefined() { return Int8ArrOpt(f(*m.value)) } else { return NoneInt8ArrOption }  }
/* Uint32OptionOption: Uint32Option->[]int16 */ func MapInt16ArrToUint32OptionOption(m Uint32OptionOption, f func(Uint32Option) []int16) Int16ArrOption {  if m.IsDefined() { return Int16ArrOpt(f(*m.value)) } else { return NoneInt16ArrOption }  }
/* Uint32OptionOption: Uint32Option->[]int32 */ func MapInt32ArrToUint32OptionOption(m Uint32OptionOption, f func(Uint32Option) []int32) Int32ArrOption {  if m.IsDefined() { return Int32ArrOpt(f(*m.value)) } else { return NoneInt32ArrOption }  }
/* Uint32OptionOption: Uint32Option->[]int64 */ func MapInt64ArrToUint32OptionOption(m Uint32OptionOption, f func(Uint32Option) []int64) Int64ArrOption {  if m.IsDefined() { return Int64ArrOpt(f(*m.value)) } else { return NoneInt64ArrOption }  }
/* Uint32OptionOption: Uint32Option->[]uint */ func MapUintArrToUint32OptionOption(m Uint32OptionOption, f func(Uint32Option) []uint) UintArrOption {  if m.IsDefined() { return UintArrOpt(f(*m.value)) } else { return NoneUintArrOption }  }
/* Uint32OptionOption: Uint32Option->[]uint8 */ func MapUint8ArrToUint32OptionOption(m Uint32OptionOption, f func(Uint32Option) []uint8) Uint8ArrOption {  if m.IsDefined() { return Uint8ArrOpt(f(*m.value)) } else { return NoneUint8ArrOption }  }
/* Uint32OptionOption: Uint32Option->[]uint16 */ func MapUint16ArrToUint32OptionOption(m Uint32OptionOption, f func(Uint32Option) []uint16) Uint16ArrOption {  if m.IsDefined() { return Uint16ArrOpt(f(*m.value)) } else { return NoneUint16ArrOption }  }
/* Uint32OptionOption: Uint32Option->[]uint32 */ func MapUint32ArrToUint32OptionOption(m Uint32OptionOption, f func(Uint32Option) []uint32) Uint32ArrOption {  if m.IsDefined() { return Uint32ArrOpt(f(*m.value)) } else { return NoneUint32ArrOption }  }
/* Uint32OptionOption: Uint32Option->[]uint64 */ func MapUint64ArrToUint32OptionOption(m Uint32OptionOption, f func(Uint32Option) []uint64) Uint64ArrOption {  if m.IsDefined() { return Uint64ArrOpt(f(*m.value)) } else { return NoneUint64ArrOption }  }
/* Uint32OptionOption: Uint32Option->[]uintptr */ func MapUintptrArrToUint32OptionOption(m Uint32OptionOption, f func(Uint32Option) []uintptr) UintptrArrOption {  if m.IsDefined() { return UintptrArrOpt(f(*m.value)) } else { return NoneUintptrArrOption }  }
/* Uint32OptionOption: Uint32Option->[]byte */ func MapByteArrToUint32OptionOption(m Uint32OptionOption, f func(Uint32Option) []byte) ByteArrOption {  if m.IsDefined() { return ByteArrOpt(f(*m.value)) } else { return NoneByteArrOption }  }
/* Uint32OptionOption: Uint32Option->[]rune */ func MapRuneArrToUint32OptionOption(m Uint32OptionOption, f func(Uint32Option) []rune) RuneArrOption {  if m.IsDefined() { return RuneArrOpt(f(*m.value)) } else { return NoneRuneArrOption }  }
/* Uint32OptionOption: Uint32Option->[]float32 */ func MapFloat32ArrToUint32OptionOption(m Uint32OptionOption, f func(Uint32Option) []float32) Float32ArrOption {  if m.IsDefined() { return Float32ArrOpt(f(*m.value)) } else { return NoneFloat32ArrOption }  }
/* Uint32OptionOption: Uint32Option->[]float64 */ func MapFloat64ArrToUint32OptionOption(m Uint32OptionOption, f func(Uint32Option) []float64) Float64ArrOption {  if m.IsDefined() { return Float64ArrOpt(f(*m.value)) } else { return NoneFloat64ArrOption }  }
/* Uint32OptionOption: Uint32Option->[]complex64 */ func MapComplex64ArrToUint32OptionOption(m Uint32OptionOption, f func(Uint32Option) []complex64) Complex64ArrOption {  if m.IsDefined() { return Complex64ArrOpt(f(*m.value)) } else { return NoneComplex64ArrOption }  }
/* Uint32OptionOption: Uint32Option->[]complex128 */ func MapComplex128ArrToUint32OptionOption(m Uint32OptionOption, f func(Uint32Option) []complex128) Complex128ArrOption {  if m.IsDefined() { return Complex128ArrOpt(f(*m.value)) } else { return NoneComplex128ArrOption }  }
/* Uint32OptionOption: Uint32Option->[]Any */ func MapAnyArrToUint32OptionOption(m Uint32OptionOption, f func(Uint32Option) []Any) AnyArrOption {  if m.IsDefined() { return AnyArrOpt(f(*m.value)) } else { return NoneAnyArrOption }  }
/* Uint32OptionOption: Uint32Option->BoolList */ func MapBoolListToUint32OptionOption(m Uint32OptionOption, f func(Uint32Option) BoolList) BoolListOption {  if m.IsDefined() { return BoolListOpt(f(*m.value)) } else { return NoneBoolListOption }  }
/* Uint32OptionOption: Uint32Option->StringList */ func MapStringListToUint32OptionOption(m Uint32OptionOption, f func(Uint32Option) StringList) StringListOption {  if m.IsDefined() { return StringListOpt(f(*m.value)) } else { return NoneStringListOption }  }
/* Uint32OptionOption: Uint32Option->IntList */ func MapIntListToUint32OptionOption(m Uint32OptionOption, f func(Uint32Option) IntList) IntListOption {  if m.IsDefined() { return IntListOpt(f(*m.value)) } else { return NoneIntListOption }  }
/* Uint32OptionOption: Uint32Option->Int8List */ func MapInt8ListToUint32OptionOption(m Uint32OptionOption, f func(Uint32Option) Int8List) Int8ListOption {  if m.IsDefined() { return Int8ListOpt(f(*m.value)) } else { return NoneInt8ListOption }  }
/* Uint32OptionOption: Uint32Option->Int16List */ func MapInt16ListToUint32OptionOption(m Uint32OptionOption, f func(Uint32Option) Int16List) Int16ListOption {  if m.IsDefined() { return Int16ListOpt(f(*m.value)) } else { return NoneInt16ListOption }  }
/* Uint32OptionOption: Uint32Option->Int32List */ func MapInt32ListToUint32OptionOption(m Uint32OptionOption, f func(Uint32Option) Int32List) Int32ListOption {  if m.IsDefined() { return Int32ListOpt(f(*m.value)) } else { return NoneInt32ListOption }  }
/* Uint32OptionOption: Uint32Option->Int64List */ func MapInt64ListToUint32OptionOption(m Uint32OptionOption, f func(Uint32Option) Int64List) Int64ListOption {  if m.IsDefined() { return Int64ListOpt(f(*m.value)) } else { return NoneInt64ListOption }  }
/* Uint32OptionOption: Uint32Option->UintList */ func MapUintListToUint32OptionOption(m Uint32OptionOption, f func(Uint32Option) UintList) UintListOption {  if m.IsDefined() { return UintListOpt(f(*m.value)) } else { return NoneUintListOption }  }
/* Uint32OptionOption: Uint32Option->Uint8List */ func MapUint8ListToUint32OptionOption(m Uint32OptionOption, f func(Uint32Option) Uint8List) Uint8ListOption {  if m.IsDefined() { return Uint8ListOpt(f(*m.value)) } else { return NoneUint8ListOption }  }
/* Uint32OptionOption: Uint32Option->Uint16List */ func MapUint16ListToUint32OptionOption(m Uint32OptionOption, f func(Uint32Option) Uint16List) Uint16ListOption {  if m.IsDefined() { return Uint16ListOpt(f(*m.value)) } else { return NoneUint16ListOption }  }
/* Uint32OptionOption: Uint32Option->Uint32List */ func MapUint32ListToUint32OptionOption(m Uint32OptionOption, f func(Uint32Option) Uint32List) Uint32ListOption {  if m.IsDefined() { return Uint32ListOpt(f(*m.value)) } else { return NoneUint32ListOption }  }
/* Uint32OptionOption: Uint32Option->Uint64List */ func MapUint64ListToUint32OptionOption(m Uint32OptionOption, f func(Uint32Option) Uint64List) Uint64ListOption {  if m.IsDefined() { return Uint64ListOpt(f(*m.value)) } else { return NoneUint64ListOption }  }
/* Uint32OptionOption: Uint32Option->UintptrList */ func MapUintptrListToUint32OptionOption(m Uint32OptionOption, f func(Uint32Option) UintptrList) UintptrListOption {  if m.IsDefined() { return UintptrListOpt(f(*m.value)) } else { return NoneUintptrListOption }  }
/* Uint32OptionOption: Uint32Option->ByteList */ func MapByteListToUint32OptionOption(m Uint32OptionOption, f func(Uint32Option) ByteList) ByteListOption {  if m.IsDefined() { return ByteListOpt(f(*m.value)) } else { return NoneByteListOption }  }
/* Uint32OptionOption: Uint32Option->RuneList */ func MapRuneListToUint32OptionOption(m Uint32OptionOption, f func(Uint32Option) RuneList) RuneListOption {  if m.IsDefined() { return RuneListOpt(f(*m.value)) } else { return NoneRuneListOption }  }
/* Uint32OptionOption: Uint32Option->Float32List */ func MapFloat32ListToUint32OptionOption(m Uint32OptionOption, f func(Uint32Option) Float32List) Float32ListOption {  if m.IsDefined() { return Float32ListOpt(f(*m.value)) } else { return NoneFloat32ListOption }  }
/* Uint32OptionOption: Uint32Option->Float64List */ func MapFloat64ListToUint32OptionOption(m Uint32OptionOption, f func(Uint32Option) Float64List) Float64ListOption {  if m.IsDefined() { return Float64ListOpt(f(*m.value)) } else { return NoneFloat64ListOption }  }
/* Uint32OptionOption: Uint32Option->Complex64List */ func MapComplex64ListToUint32OptionOption(m Uint32OptionOption, f func(Uint32Option) Complex64List) Complex64ListOption {  if m.IsDefined() { return Complex64ListOpt(f(*m.value)) } else { return NoneComplex64ListOption }  }
/* Uint32OptionOption: Uint32Option->Complex128List */ func MapComplex128ListToUint32OptionOption(m Uint32OptionOption, f func(Uint32Option) Complex128List) Complex128ListOption {  if m.IsDefined() { return Complex128ListOpt(f(*m.value)) } else { return NoneComplex128ListOption }  }
/* Uint32OptionOption: Uint32Option->AnyList */ func MapAnyListToUint32OptionOption(m Uint32OptionOption, f func(Uint32Option) AnyList) AnyListOption {  if m.IsDefined() { return AnyListOpt(f(*m.value)) } else { return NoneAnyListOption }  }
/* Uint64OptionOption: Uint64Option->bool */ func MapBoolToUint64OptionOption(m Uint64OptionOption, f func(Uint64Option) bool) BoolOption {  if m.IsDefined() { return Bool(f(*m.value)) } else { return NoneBoolOption }  }
/* Uint64OptionOption: Uint64Option->string */ func MapStringToUint64OptionOption(m Uint64OptionOption, f func(Uint64Option) string) StringOption {  if m.IsDefined() { return String(f(*m.value)) } else { return NoneStringOption }  }
/* Uint64OptionOption: Uint64Option->int */ func MapIntToUint64OptionOption(m Uint64OptionOption, f func(Uint64Option) int) IntOption {  if m.IsDefined() { return Int(f(*m.value)) } else { return NoneIntOption }  }
/* Uint64OptionOption: Uint64Option->int8 */ func MapInt8ToUint64OptionOption(m Uint64OptionOption, f func(Uint64Option) int8) Int8Option {  if m.IsDefined() { return Int8(f(*m.value)) } else { return NoneInt8Option }  }
/* Uint64OptionOption: Uint64Option->int16 */ func MapInt16ToUint64OptionOption(m Uint64OptionOption, f func(Uint64Option) int16) Int16Option {  if m.IsDefined() { return Int16(f(*m.value)) } else { return NoneInt16Option }  }
/* Uint64OptionOption: Uint64Option->int32 */ func MapInt32ToUint64OptionOption(m Uint64OptionOption, f func(Uint64Option) int32) Int32Option {  if m.IsDefined() { return Int32(f(*m.value)) } else { return NoneInt32Option }  }
/* Uint64OptionOption: Uint64Option->int64 */ func MapInt64ToUint64OptionOption(m Uint64OptionOption, f func(Uint64Option) int64) Int64Option {  if m.IsDefined() { return Int64(f(*m.value)) } else { return NoneInt64Option }  }
/* Uint64OptionOption: Uint64Option->uint */ func MapUintToUint64OptionOption(m Uint64OptionOption, f func(Uint64Option) uint) UintOption {  if m.IsDefined() { return Uint(f(*m.value)) } else { return NoneUintOption }  }
/* Uint64OptionOption: Uint64Option->uint8 */ func MapUint8ToUint64OptionOption(m Uint64OptionOption, f func(Uint64Option) uint8) Uint8Option {  if m.IsDefined() { return Uint8(f(*m.value)) } else { return NoneUint8Option }  }
/* Uint64OptionOption: Uint64Option->uint16 */ func MapUint16ToUint64OptionOption(m Uint64OptionOption, f func(Uint64Option) uint16) Uint16Option {  if m.IsDefined() { return Uint16(f(*m.value)) } else { return NoneUint16Option }  }
/* Uint64OptionOption: Uint64Option->uint32 */ func MapUint32ToUint64OptionOption(m Uint64OptionOption, f func(Uint64Option) uint32) Uint32Option {  if m.IsDefined() { return Uint32(f(*m.value)) } else { return NoneUint32Option }  }
/* Uint64OptionOption: Uint64Option->uint64 */ func MapUint64ToUint64OptionOption(m Uint64OptionOption, f func(Uint64Option) uint64) Uint64Option {  if m.IsDefined() { return Uint64(f(*m.value)) } else { return NoneUint64Option }  }
/* Uint64OptionOption: Uint64Option->uintptr */ func MapUintptrToUint64OptionOption(m Uint64OptionOption, f func(Uint64Option) uintptr) UintptrOption {  if m.IsDefined() { return Uintptr(f(*m.value)) } else { return NoneUintptrOption }  }
/* Uint64OptionOption: Uint64Option->byte */ func MapByteToUint64OptionOption(m Uint64OptionOption, f func(Uint64Option) byte) ByteOption {  if m.IsDefined() { return Byte(f(*m.value)) } else { return NoneByteOption }  }
/* Uint64OptionOption: Uint64Option->rune */ func MapRuneToUint64OptionOption(m Uint64OptionOption, f func(Uint64Option) rune) RuneOption {  if m.IsDefined() { return Rune(f(*m.value)) } else { return NoneRuneOption }  }
/* Uint64OptionOption: Uint64Option->float32 */ func MapFloat32ToUint64OptionOption(m Uint64OptionOption, f func(Uint64Option) float32) Float32Option {  if m.IsDefined() { return Float32(f(*m.value)) } else { return NoneFloat32Option }  }
/* Uint64OptionOption: Uint64Option->float64 */ func MapFloat64ToUint64OptionOption(m Uint64OptionOption, f func(Uint64Option) float64) Float64Option {  if m.IsDefined() { return Float64(f(*m.value)) } else { return NoneFloat64Option }  }
/* Uint64OptionOption: Uint64Option->complex64 */ func MapComplex64ToUint64OptionOption(m Uint64OptionOption, f func(Uint64Option) complex64) Complex64Option {  if m.IsDefined() { return Complex64(f(*m.value)) } else { return NoneComplex64Option }  }
/* Uint64OptionOption: Uint64Option->complex128 */ func MapComplex128ToUint64OptionOption(m Uint64OptionOption, f func(Uint64Option) complex128) Complex128Option {  if m.IsDefined() { return Complex128(f(*m.value)) } else { return NoneComplex128Option }  }
/* Uint64OptionOption: Uint64Option->Any */ func MapAnyToUint64OptionOption(m Uint64OptionOption, f func(Uint64Option) Any) AnyOption {  if m.IsDefined() { return AnyOpt(f(*m.value)) } else { return NoneAnyOption }  }
/* Uint64OptionOption: Uint64Option->BoolOption */ func MapBoolOptionToUint64OptionOption(m Uint64OptionOption, f func(Uint64Option) BoolOption) BoolOptionOption {  if m.IsDefined() { return BoolBool(f(*m.value)) } else { return NoneBoolOptionOption }  }
/* Uint64OptionOption: Uint64Option->StringOption */ func MapStringOptionToUint64OptionOption(m Uint64OptionOption, f func(Uint64Option) StringOption) StringOptionOption {  if m.IsDefined() { return StringString(f(*m.value)) } else { return NoneStringOptionOption }  }
/* Uint64OptionOption: Uint64Option->IntOption */ func MapIntOptionToUint64OptionOption(m Uint64OptionOption, f func(Uint64Option) IntOption) IntOptionOption {  if m.IsDefined() { return IntInt(f(*m.value)) } else { return NoneIntOptionOption }  }
/* Uint64OptionOption: Uint64Option->Int8Option */ func MapInt8OptionToUint64OptionOption(m Uint64OptionOption, f func(Uint64Option) Int8Option) Int8OptionOption {  if m.IsDefined() { return Int8Int8(f(*m.value)) } else { return NoneInt8OptionOption }  }
/* Uint64OptionOption: Uint64Option->Int16Option */ func MapInt16OptionToUint64OptionOption(m Uint64OptionOption, f func(Uint64Option) Int16Option) Int16OptionOption {  if m.IsDefined() { return Int16Int16(f(*m.value)) } else { return NoneInt16OptionOption }  }
/* Uint64OptionOption: Uint64Option->Int32Option */ func MapInt32OptionToUint64OptionOption(m Uint64OptionOption, f func(Uint64Option) Int32Option) Int32OptionOption {  if m.IsDefined() { return Int32Int32(f(*m.value)) } else { return NoneInt32OptionOption }  }
/* Uint64OptionOption: Uint64Option->Int64Option */ func MapInt64OptionToUint64OptionOption(m Uint64OptionOption, f func(Uint64Option) Int64Option) Int64OptionOption {  if m.IsDefined() { return Int64Int64(f(*m.value)) } else { return NoneInt64OptionOption }  }
/* Uint64OptionOption: Uint64Option->UintOption */ func MapUintOptionToUint64OptionOption(m Uint64OptionOption, f func(Uint64Option) UintOption) UintOptionOption {  if m.IsDefined() { return UintUint(f(*m.value)) } else { return NoneUintOptionOption }  }
/* Uint64OptionOption: Uint64Option->Uint8Option */ func MapUint8OptionToUint64OptionOption(m Uint64OptionOption, f func(Uint64Option) Uint8Option) Uint8OptionOption {  if m.IsDefined() { return Uint8Uint8(f(*m.value)) } else { return NoneUint8OptionOption }  }
/* Uint64OptionOption: Uint64Option->Uint16Option */ func MapUint16OptionToUint64OptionOption(m Uint64OptionOption, f func(Uint64Option) Uint16Option) Uint16OptionOption {  if m.IsDefined() { return Uint16Uint16(f(*m.value)) } else { return NoneUint16OptionOption }  }
/* Uint64OptionOption: Uint64Option->Uint32Option */ func MapUint32OptionToUint64OptionOption(m Uint64OptionOption, f func(Uint64Option) Uint32Option) Uint32OptionOption {  if m.IsDefined() { return Uint32Uint32(f(*m.value)) } else { return NoneUint32OptionOption }  }
/* Uint64OptionOption: Uint64Option->Uint64Option */ func MapUint64OptionToUint64OptionOption(m Uint64OptionOption, f func(Uint64Option) Uint64Option) Uint64OptionOption {  if m.IsDefined() { return Uint64Uint64(f(*m.value)) } else { return NoneUint64OptionOption }  }
/* Uint64OptionOption: Uint64Option->UintptrOption */ func MapUintptrOptionToUint64OptionOption(m Uint64OptionOption, f func(Uint64Option) UintptrOption) UintptrOptionOption {  if m.IsDefined() { return UintptrUintptr(f(*m.value)) } else { return NoneUintptrOptionOption }  }
/* Uint64OptionOption: Uint64Option->ByteOption */ func MapByteOptionToUint64OptionOption(m Uint64OptionOption, f func(Uint64Option) ByteOption) ByteOptionOption {  if m.IsDefined() { return ByteByte(f(*m.value)) } else { return NoneByteOptionOption }  }
/* Uint64OptionOption: Uint64Option->RuneOption */ func MapRuneOptionToUint64OptionOption(m Uint64OptionOption, f func(Uint64Option) RuneOption) RuneOptionOption {  if m.IsDefined() { return RuneRune(f(*m.value)) } else { return NoneRuneOptionOption }  }
/* Uint64OptionOption: Uint64Option->Float32Option */ func MapFloat32OptionToUint64OptionOption(m Uint64OptionOption, f func(Uint64Option) Float32Option) Float32OptionOption {  if m.IsDefined() { return Float32Float32(f(*m.value)) } else { return NoneFloat32OptionOption }  }
/* Uint64OptionOption: Uint64Option->Float64Option */ func MapFloat64OptionToUint64OptionOption(m Uint64OptionOption, f func(Uint64Option) Float64Option) Float64OptionOption {  if m.IsDefined() { return Float64Float64(f(*m.value)) } else { return NoneFloat64OptionOption }  }
/* Uint64OptionOption: Uint64Option->Complex64Option */ func MapComplex64OptionToUint64OptionOption(m Uint64OptionOption, f func(Uint64Option) Complex64Option) Complex64OptionOption {  if m.IsDefined() { return Complex64Complex64(f(*m.value)) } else { return NoneComplex64OptionOption }  }
/* Uint64OptionOption: Uint64Option->Complex128Option */ func MapComplex128OptionToUint64OptionOption(m Uint64OptionOption, f func(Uint64Option) Complex128Option) Complex128OptionOption {  if m.IsDefined() { return Complex128Complex128(f(*m.value)) } else { return NoneComplex128OptionOption }  }
/* Uint64OptionOption: Uint64Option->AnyOption */ func MapAnyOptionToUint64OptionOption(m Uint64OptionOption, f func(Uint64Option) AnyOption) AnyOptionOption {  if m.IsDefined() { return AnyOptAny(f(*m.value)) } else { return NoneAnyOptionOption }  }
/* Uint64OptionOption: Uint64Option->[]bool */ func MapBoolArrToUint64OptionOption(m Uint64OptionOption, f func(Uint64Option) []bool) BoolArrOption {  if m.IsDefined() { return BoolArrOpt(f(*m.value)) } else { return NoneBoolArrOption }  }
/* Uint64OptionOption: Uint64Option->[]string */ func MapStringArrToUint64OptionOption(m Uint64OptionOption, f func(Uint64Option) []string) StringArrOption {  if m.IsDefined() { return StringArrOpt(f(*m.value)) } else { return NoneStringArrOption }  }
/* Uint64OptionOption: Uint64Option->[]int */ func MapIntArrToUint64OptionOption(m Uint64OptionOption, f func(Uint64Option) []int) IntArrOption {  if m.IsDefined() { return IntArrOpt(f(*m.value)) } else { return NoneIntArrOption }  }
/* Uint64OptionOption: Uint64Option->[]int8 */ func MapInt8ArrToUint64OptionOption(m Uint64OptionOption, f func(Uint64Option) []int8) Int8ArrOption {  if m.IsDefined() { return Int8ArrOpt(f(*m.value)) } else { return NoneInt8ArrOption }  }
/* Uint64OptionOption: Uint64Option->[]int16 */ func MapInt16ArrToUint64OptionOption(m Uint64OptionOption, f func(Uint64Option) []int16) Int16ArrOption {  if m.IsDefined() { return Int16ArrOpt(f(*m.value)) } else { return NoneInt16ArrOption }  }
/* Uint64OptionOption: Uint64Option->[]int32 */ func MapInt32ArrToUint64OptionOption(m Uint64OptionOption, f func(Uint64Option) []int32) Int32ArrOption {  if m.IsDefined() { return Int32ArrOpt(f(*m.value)) } else { return NoneInt32ArrOption }  }
/* Uint64OptionOption: Uint64Option->[]int64 */ func MapInt64ArrToUint64OptionOption(m Uint64OptionOption, f func(Uint64Option) []int64) Int64ArrOption {  if m.IsDefined() { return Int64ArrOpt(f(*m.value)) } else { return NoneInt64ArrOption }  }
/* Uint64OptionOption: Uint64Option->[]uint */ func MapUintArrToUint64OptionOption(m Uint64OptionOption, f func(Uint64Option) []uint) UintArrOption {  if m.IsDefined() { return UintArrOpt(f(*m.value)) } else { return NoneUintArrOption }  }
/* Uint64OptionOption: Uint64Option->[]uint8 */ func MapUint8ArrToUint64OptionOption(m Uint64OptionOption, f func(Uint64Option) []uint8) Uint8ArrOption {  if m.IsDefined() { return Uint8ArrOpt(f(*m.value)) } else { return NoneUint8ArrOption }  }
/* Uint64OptionOption: Uint64Option->[]uint16 */ func MapUint16ArrToUint64OptionOption(m Uint64OptionOption, f func(Uint64Option) []uint16) Uint16ArrOption {  if m.IsDefined() { return Uint16ArrOpt(f(*m.value)) } else { return NoneUint16ArrOption }  }
/* Uint64OptionOption: Uint64Option->[]uint32 */ func MapUint32ArrToUint64OptionOption(m Uint64OptionOption, f func(Uint64Option) []uint32) Uint32ArrOption {  if m.IsDefined() { return Uint32ArrOpt(f(*m.value)) } else { return NoneUint32ArrOption }  }
/* Uint64OptionOption: Uint64Option->[]uint64 */ func MapUint64ArrToUint64OptionOption(m Uint64OptionOption, f func(Uint64Option) []uint64) Uint64ArrOption {  if m.IsDefined() { return Uint64ArrOpt(f(*m.value)) } else { return NoneUint64ArrOption }  }
/* Uint64OptionOption: Uint64Option->[]uintptr */ func MapUintptrArrToUint64OptionOption(m Uint64OptionOption, f func(Uint64Option) []uintptr) UintptrArrOption {  if m.IsDefined() { return UintptrArrOpt(f(*m.value)) } else { return NoneUintptrArrOption }  }
/* Uint64OptionOption: Uint64Option->[]byte */ func MapByteArrToUint64OptionOption(m Uint64OptionOption, f func(Uint64Option) []byte) ByteArrOption {  if m.IsDefined() { return ByteArrOpt(f(*m.value)) } else { return NoneByteArrOption }  }
/* Uint64OptionOption: Uint64Option->[]rune */ func MapRuneArrToUint64OptionOption(m Uint64OptionOption, f func(Uint64Option) []rune) RuneArrOption {  if m.IsDefined() { return RuneArrOpt(f(*m.value)) } else { return NoneRuneArrOption }  }
/* Uint64OptionOption: Uint64Option->[]float32 */ func MapFloat32ArrToUint64OptionOption(m Uint64OptionOption, f func(Uint64Option) []float32) Float32ArrOption {  if m.IsDefined() { return Float32ArrOpt(f(*m.value)) } else { return NoneFloat32ArrOption }  }
/* Uint64OptionOption: Uint64Option->[]float64 */ func MapFloat64ArrToUint64OptionOption(m Uint64OptionOption, f func(Uint64Option) []float64) Float64ArrOption {  if m.IsDefined() { return Float64ArrOpt(f(*m.value)) } else { return NoneFloat64ArrOption }  }
/* Uint64OptionOption: Uint64Option->[]complex64 */ func MapComplex64ArrToUint64OptionOption(m Uint64OptionOption, f func(Uint64Option) []complex64) Complex64ArrOption {  if m.IsDefined() { return Complex64ArrOpt(f(*m.value)) } else { return NoneComplex64ArrOption }  }
/* Uint64OptionOption: Uint64Option->[]complex128 */ func MapComplex128ArrToUint64OptionOption(m Uint64OptionOption, f func(Uint64Option) []complex128) Complex128ArrOption {  if m.IsDefined() { return Complex128ArrOpt(f(*m.value)) } else { return NoneComplex128ArrOption }  }
/* Uint64OptionOption: Uint64Option->[]Any */ func MapAnyArrToUint64OptionOption(m Uint64OptionOption, f func(Uint64Option) []Any) AnyArrOption {  if m.IsDefined() { return AnyArrOpt(f(*m.value)) } else { return NoneAnyArrOption }  }
/* Uint64OptionOption: Uint64Option->BoolList */ func MapBoolListToUint64OptionOption(m Uint64OptionOption, f func(Uint64Option) BoolList) BoolListOption {  if m.IsDefined() { return BoolListOpt(f(*m.value)) } else { return NoneBoolListOption }  }
/* Uint64OptionOption: Uint64Option->StringList */ func MapStringListToUint64OptionOption(m Uint64OptionOption, f func(Uint64Option) StringList) StringListOption {  if m.IsDefined() { return StringListOpt(f(*m.value)) } else { return NoneStringListOption }  }
/* Uint64OptionOption: Uint64Option->IntList */ func MapIntListToUint64OptionOption(m Uint64OptionOption, f func(Uint64Option) IntList) IntListOption {  if m.IsDefined() { return IntListOpt(f(*m.value)) } else { return NoneIntListOption }  }
/* Uint64OptionOption: Uint64Option->Int8List */ func MapInt8ListToUint64OptionOption(m Uint64OptionOption, f func(Uint64Option) Int8List) Int8ListOption {  if m.IsDefined() { return Int8ListOpt(f(*m.value)) } else { return NoneInt8ListOption }  }
/* Uint64OptionOption: Uint64Option->Int16List */ func MapInt16ListToUint64OptionOption(m Uint64OptionOption, f func(Uint64Option) Int16List) Int16ListOption {  if m.IsDefined() { return Int16ListOpt(f(*m.value)) } else { return NoneInt16ListOption }  }
/* Uint64OptionOption: Uint64Option->Int32List */ func MapInt32ListToUint64OptionOption(m Uint64OptionOption, f func(Uint64Option) Int32List) Int32ListOption {  if m.IsDefined() { return Int32ListOpt(f(*m.value)) } else { return NoneInt32ListOption }  }
/* Uint64OptionOption: Uint64Option->Int64List */ func MapInt64ListToUint64OptionOption(m Uint64OptionOption, f func(Uint64Option) Int64List) Int64ListOption {  if m.IsDefined() { return Int64ListOpt(f(*m.value)) } else { return NoneInt64ListOption }  }
/* Uint64OptionOption: Uint64Option->UintList */ func MapUintListToUint64OptionOption(m Uint64OptionOption, f func(Uint64Option) UintList) UintListOption {  if m.IsDefined() { return UintListOpt(f(*m.value)) } else { return NoneUintListOption }  }
/* Uint64OptionOption: Uint64Option->Uint8List */ func MapUint8ListToUint64OptionOption(m Uint64OptionOption, f func(Uint64Option) Uint8List) Uint8ListOption {  if m.IsDefined() { return Uint8ListOpt(f(*m.value)) } else { return NoneUint8ListOption }  }
/* Uint64OptionOption: Uint64Option->Uint16List */ func MapUint16ListToUint64OptionOption(m Uint64OptionOption, f func(Uint64Option) Uint16List) Uint16ListOption {  if m.IsDefined() { return Uint16ListOpt(f(*m.value)) } else { return NoneUint16ListOption }  }
/* Uint64OptionOption: Uint64Option->Uint32List */ func MapUint32ListToUint64OptionOption(m Uint64OptionOption, f func(Uint64Option) Uint32List) Uint32ListOption {  if m.IsDefined() { return Uint32ListOpt(f(*m.value)) } else { return NoneUint32ListOption }  }
/* Uint64OptionOption: Uint64Option->Uint64List */ func MapUint64ListToUint64OptionOption(m Uint64OptionOption, f func(Uint64Option) Uint64List) Uint64ListOption {  if m.IsDefined() { return Uint64ListOpt(f(*m.value)) } else { return NoneUint64ListOption }  }
/* Uint64OptionOption: Uint64Option->UintptrList */ func MapUintptrListToUint64OptionOption(m Uint64OptionOption, f func(Uint64Option) UintptrList) UintptrListOption {  if m.IsDefined() { return UintptrListOpt(f(*m.value)) } else { return NoneUintptrListOption }  }
/* Uint64OptionOption: Uint64Option->ByteList */ func MapByteListToUint64OptionOption(m Uint64OptionOption, f func(Uint64Option) ByteList) ByteListOption {  if m.IsDefined() { return ByteListOpt(f(*m.value)) } else { return NoneByteListOption }  }
/* Uint64OptionOption: Uint64Option->RuneList */ func MapRuneListToUint64OptionOption(m Uint64OptionOption, f func(Uint64Option) RuneList) RuneListOption {  if m.IsDefined() { return RuneListOpt(f(*m.value)) } else { return NoneRuneListOption }  }
/* Uint64OptionOption: Uint64Option->Float32List */ func MapFloat32ListToUint64OptionOption(m Uint64OptionOption, f func(Uint64Option) Float32List) Float32ListOption {  if m.IsDefined() { return Float32ListOpt(f(*m.value)) } else { return NoneFloat32ListOption }  }
/* Uint64OptionOption: Uint64Option->Float64List */ func MapFloat64ListToUint64OptionOption(m Uint64OptionOption, f func(Uint64Option) Float64List) Float64ListOption {  if m.IsDefined() { return Float64ListOpt(f(*m.value)) } else { return NoneFloat64ListOption }  }
/* Uint64OptionOption: Uint64Option->Complex64List */ func MapComplex64ListToUint64OptionOption(m Uint64OptionOption, f func(Uint64Option) Complex64List) Complex64ListOption {  if m.IsDefined() { return Complex64ListOpt(f(*m.value)) } else { return NoneComplex64ListOption }  }
/* Uint64OptionOption: Uint64Option->Complex128List */ func MapComplex128ListToUint64OptionOption(m Uint64OptionOption, f func(Uint64Option) Complex128List) Complex128ListOption {  if m.IsDefined() { return Complex128ListOpt(f(*m.value)) } else { return NoneComplex128ListOption }  }
/* Uint64OptionOption: Uint64Option->AnyList */ func MapAnyListToUint64OptionOption(m Uint64OptionOption, f func(Uint64Option) AnyList) AnyListOption {  if m.IsDefined() { return AnyListOpt(f(*m.value)) } else { return NoneAnyListOption }  }
/* UintptrOptionOption: UintptrOption->bool */ func MapBoolToUintptrOptionOption(m UintptrOptionOption, f func(UintptrOption) bool) BoolOption {  if m.IsDefined() { return Bool(f(*m.value)) } else { return NoneBoolOption }  }
/* UintptrOptionOption: UintptrOption->string */ func MapStringToUintptrOptionOption(m UintptrOptionOption, f func(UintptrOption) string) StringOption {  if m.IsDefined() { return String(f(*m.value)) } else { return NoneStringOption }  }
/* UintptrOptionOption: UintptrOption->int */ func MapIntToUintptrOptionOption(m UintptrOptionOption, f func(UintptrOption) int) IntOption {  if m.IsDefined() { return Int(f(*m.value)) } else { return NoneIntOption }  }
/* UintptrOptionOption: UintptrOption->int8 */ func MapInt8ToUintptrOptionOption(m UintptrOptionOption, f func(UintptrOption) int8) Int8Option {  if m.IsDefined() { return Int8(f(*m.value)) } else { return NoneInt8Option }  }
/* UintptrOptionOption: UintptrOption->int16 */ func MapInt16ToUintptrOptionOption(m UintptrOptionOption, f func(UintptrOption) int16) Int16Option {  if m.IsDefined() { return Int16(f(*m.value)) } else { return NoneInt16Option }  }
/* UintptrOptionOption: UintptrOption->int32 */ func MapInt32ToUintptrOptionOption(m UintptrOptionOption, f func(UintptrOption) int32) Int32Option {  if m.IsDefined() { return Int32(f(*m.value)) } else { return NoneInt32Option }  }
/* UintptrOptionOption: UintptrOption->int64 */ func MapInt64ToUintptrOptionOption(m UintptrOptionOption, f func(UintptrOption) int64) Int64Option {  if m.IsDefined() { return Int64(f(*m.value)) } else { return NoneInt64Option }  }
/* UintptrOptionOption: UintptrOption->uint */ func MapUintToUintptrOptionOption(m UintptrOptionOption, f func(UintptrOption) uint) UintOption {  if m.IsDefined() { return Uint(f(*m.value)) } else { return NoneUintOption }  }
/* UintptrOptionOption: UintptrOption->uint8 */ func MapUint8ToUintptrOptionOption(m UintptrOptionOption, f func(UintptrOption) uint8) Uint8Option {  if m.IsDefined() { return Uint8(f(*m.value)) } else { return NoneUint8Option }  }
/* UintptrOptionOption: UintptrOption->uint16 */ func MapUint16ToUintptrOptionOption(m UintptrOptionOption, f func(UintptrOption) uint16) Uint16Option {  if m.IsDefined() { return Uint16(f(*m.value)) } else { return NoneUint16Option }  }
/* UintptrOptionOption: UintptrOption->uint32 */ func MapUint32ToUintptrOptionOption(m UintptrOptionOption, f func(UintptrOption) uint32) Uint32Option {  if m.IsDefined() { return Uint32(f(*m.value)) } else { return NoneUint32Option }  }
/* UintptrOptionOption: UintptrOption->uint64 */ func MapUint64ToUintptrOptionOption(m UintptrOptionOption, f func(UintptrOption) uint64) Uint64Option {  if m.IsDefined() { return Uint64(f(*m.value)) } else { return NoneUint64Option }  }
/* UintptrOptionOption: UintptrOption->uintptr */ func MapUintptrToUintptrOptionOption(m UintptrOptionOption, f func(UintptrOption) uintptr) UintptrOption {  if m.IsDefined() { return Uintptr(f(*m.value)) } else { return NoneUintptrOption }  }
/* UintptrOptionOption: UintptrOption->byte */ func MapByteToUintptrOptionOption(m UintptrOptionOption, f func(UintptrOption) byte) ByteOption {  if m.IsDefined() { return Byte(f(*m.value)) } else { return NoneByteOption }  }
/* UintptrOptionOption: UintptrOption->rune */ func MapRuneToUintptrOptionOption(m UintptrOptionOption, f func(UintptrOption) rune) RuneOption {  if m.IsDefined() { return Rune(f(*m.value)) } else { return NoneRuneOption }  }
/* UintptrOptionOption: UintptrOption->float32 */ func MapFloat32ToUintptrOptionOption(m UintptrOptionOption, f func(UintptrOption) float32) Float32Option {  if m.IsDefined() { return Float32(f(*m.value)) } else { return NoneFloat32Option }  }
/* UintptrOptionOption: UintptrOption->float64 */ func MapFloat64ToUintptrOptionOption(m UintptrOptionOption, f func(UintptrOption) float64) Float64Option {  if m.IsDefined() { return Float64(f(*m.value)) } else { return NoneFloat64Option }  }
/* UintptrOptionOption: UintptrOption->complex64 */ func MapComplex64ToUintptrOptionOption(m UintptrOptionOption, f func(UintptrOption) complex64) Complex64Option {  if m.IsDefined() { return Complex64(f(*m.value)) } else { return NoneComplex64Option }  }
/* UintptrOptionOption: UintptrOption->complex128 */ func MapComplex128ToUintptrOptionOption(m UintptrOptionOption, f func(UintptrOption) complex128) Complex128Option {  if m.IsDefined() { return Complex128(f(*m.value)) } else { return NoneComplex128Option }  }
/* UintptrOptionOption: UintptrOption->Any */ func MapAnyToUintptrOptionOption(m UintptrOptionOption, f func(UintptrOption) Any) AnyOption {  if m.IsDefined() { return AnyOpt(f(*m.value)) } else { return NoneAnyOption }  }
/* UintptrOptionOption: UintptrOption->BoolOption */ func MapBoolOptionToUintptrOptionOption(m UintptrOptionOption, f func(UintptrOption) BoolOption) BoolOptionOption {  if m.IsDefined() { return BoolBool(f(*m.value)) } else { return NoneBoolOptionOption }  }
/* UintptrOptionOption: UintptrOption->StringOption */ func MapStringOptionToUintptrOptionOption(m UintptrOptionOption, f func(UintptrOption) StringOption) StringOptionOption {  if m.IsDefined() { return StringString(f(*m.value)) } else { return NoneStringOptionOption }  }
/* UintptrOptionOption: UintptrOption->IntOption */ func MapIntOptionToUintptrOptionOption(m UintptrOptionOption, f func(UintptrOption) IntOption) IntOptionOption {  if m.IsDefined() { return IntInt(f(*m.value)) } else { return NoneIntOptionOption }  }
/* UintptrOptionOption: UintptrOption->Int8Option */ func MapInt8OptionToUintptrOptionOption(m UintptrOptionOption, f func(UintptrOption) Int8Option) Int8OptionOption {  if m.IsDefined() { return Int8Int8(f(*m.value)) } else { return NoneInt8OptionOption }  }
/* UintptrOptionOption: UintptrOption->Int16Option */ func MapInt16OptionToUintptrOptionOption(m UintptrOptionOption, f func(UintptrOption) Int16Option) Int16OptionOption {  if m.IsDefined() { return Int16Int16(f(*m.value)) } else { return NoneInt16OptionOption }  }
/* UintptrOptionOption: UintptrOption->Int32Option */ func MapInt32OptionToUintptrOptionOption(m UintptrOptionOption, f func(UintptrOption) Int32Option) Int32OptionOption {  if m.IsDefined() { return Int32Int32(f(*m.value)) } else { return NoneInt32OptionOption }  }
/* UintptrOptionOption: UintptrOption->Int64Option */ func MapInt64OptionToUintptrOptionOption(m UintptrOptionOption, f func(UintptrOption) Int64Option) Int64OptionOption {  if m.IsDefined() { return Int64Int64(f(*m.value)) } else { return NoneInt64OptionOption }  }
/* UintptrOptionOption: UintptrOption->UintOption */ func MapUintOptionToUintptrOptionOption(m UintptrOptionOption, f func(UintptrOption) UintOption) UintOptionOption {  if m.IsDefined() { return UintUint(f(*m.value)) } else { return NoneUintOptionOption }  }
/* UintptrOptionOption: UintptrOption->Uint8Option */ func MapUint8OptionToUintptrOptionOption(m UintptrOptionOption, f func(UintptrOption) Uint8Option) Uint8OptionOption {  if m.IsDefined() { return Uint8Uint8(f(*m.value)) } else { return NoneUint8OptionOption }  }
/* UintptrOptionOption: UintptrOption->Uint16Option */ func MapUint16OptionToUintptrOptionOption(m UintptrOptionOption, f func(UintptrOption) Uint16Option) Uint16OptionOption {  if m.IsDefined() { return Uint16Uint16(f(*m.value)) } else { return NoneUint16OptionOption }  }
/* UintptrOptionOption: UintptrOption->Uint32Option */ func MapUint32OptionToUintptrOptionOption(m UintptrOptionOption, f func(UintptrOption) Uint32Option) Uint32OptionOption {  if m.IsDefined() { return Uint32Uint32(f(*m.value)) } else { return NoneUint32OptionOption }  }
/* UintptrOptionOption: UintptrOption->Uint64Option */ func MapUint64OptionToUintptrOptionOption(m UintptrOptionOption, f func(UintptrOption) Uint64Option) Uint64OptionOption {  if m.IsDefined() { return Uint64Uint64(f(*m.value)) } else { return NoneUint64OptionOption }  }
/* UintptrOptionOption: UintptrOption->UintptrOption */ func MapUintptrOptionToUintptrOptionOption(m UintptrOptionOption, f func(UintptrOption) UintptrOption) UintptrOptionOption {  if m.IsDefined() { return UintptrUintptr(f(*m.value)) } else { return NoneUintptrOptionOption }  }
/* UintptrOptionOption: UintptrOption->ByteOption */ func MapByteOptionToUintptrOptionOption(m UintptrOptionOption, f func(UintptrOption) ByteOption) ByteOptionOption {  if m.IsDefined() { return ByteByte(f(*m.value)) } else { return NoneByteOptionOption }  }
/* UintptrOptionOption: UintptrOption->RuneOption */ func MapRuneOptionToUintptrOptionOption(m UintptrOptionOption, f func(UintptrOption) RuneOption) RuneOptionOption {  if m.IsDefined() { return RuneRune(f(*m.value)) } else { return NoneRuneOptionOption }  }
/* UintptrOptionOption: UintptrOption->Float32Option */ func MapFloat32OptionToUintptrOptionOption(m UintptrOptionOption, f func(UintptrOption) Float32Option) Float32OptionOption {  if m.IsDefined() { return Float32Float32(f(*m.value)) } else { return NoneFloat32OptionOption }  }
/* UintptrOptionOption: UintptrOption->Float64Option */ func MapFloat64OptionToUintptrOptionOption(m UintptrOptionOption, f func(UintptrOption) Float64Option) Float64OptionOption {  if m.IsDefined() { return Float64Float64(f(*m.value)) } else { return NoneFloat64OptionOption }  }
/* UintptrOptionOption: UintptrOption->Complex64Option */ func MapComplex64OptionToUintptrOptionOption(m UintptrOptionOption, f func(UintptrOption) Complex64Option) Complex64OptionOption {  if m.IsDefined() { return Complex64Complex64(f(*m.value)) } else { return NoneComplex64OptionOption }  }
/* UintptrOptionOption: UintptrOption->Complex128Option */ func MapComplex128OptionToUintptrOptionOption(m UintptrOptionOption, f func(UintptrOption) Complex128Option) Complex128OptionOption {  if m.IsDefined() { return Complex128Complex128(f(*m.value)) } else { return NoneComplex128OptionOption }  }
/* UintptrOptionOption: UintptrOption->AnyOption */ func MapAnyOptionToUintptrOptionOption(m UintptrOptionOption, f func(UintptrOption) AnyOption) AnyOptionOption {  if m.IsDefined() { return AnyOptAny(f(*m.value)) } else { return NoneAnyOptionOption }  }
/* UintptrOptionOption: UintptrOption->[]bool */ func MapBoolArrToUintptrOptionOption(m UintptrOptionOption, f func(UintptrOption) []bool) BoolArrOption {  if m.IsDefined() { return BoolArrOpt(f(*m.value)) } else { return NoneBoolArrOption }  }
/* UintptrOptionOption: UintptrOption->[]string */ func MapStringArrToUintptrOptionOption(m UintptrOptionOption, f func(UintptrOption) []string) StringArrOption {  if m.IsDefined() { return StringArrOpt(f(*m.value)) } else { return NoneStringArrOption }  }
/* UintptrOptionOption: UintptrOption->[]int */ func MapIntArrToUintptrOptionOption(m UintptrOptionOption, f func(UintptrOption) []int) IntArrOption {  if m.IsDefined() { return IntArrOpt(f(*m.value)) } else { return NoneIntArrOption }  }
/* UintptrOptionOption: UintptrOption->[]int8 */ func MapInt8ArrToUintptrOptionOption(m UintptrOptionOption, f func(UintptrOption) []int8) Int8ArrOption {  if m.IsDefined() { return Int8ArrOpt(f(*m.value)) } else { return NoneInt8ArrOption }  }
/* UintptrOptionOption: UintptrOption->[]int16 */ func MapInt16ArrToUintptrOptionOption(m UintptrOptionOption, f func(UintptrOption) []int16) Int16ArrOption {  if m.IsDefined() { return Int16ArrOpt(f(*m.value)) } else { return NoneInt16ArrOption }  }
/* UintptrOptionOption: UintptrOption->[]int32 */ func MapInt32ArrToUintptrOptionOption(m UintptrOptionOption, f func(UintptrOption) []int32) Int32ArrOption {  if m.IsDefined() { return Int32ArrOpt(f(*m.value)) } else { return NoneInt32ArrOption }  }
/* UintptrOptionOption: UintptrOption->[]int64 */ func MapInt64ArrToUintptrOptionOption(m UintptrOptionOption, f func(UintptrOption) []int64) Int64ArrOption {  if m.IsDefined() { return Int64ArrOpt(f(*m.value)) } else { return NoneInt64ArrOption }  }
/* UintptrOptionOption: UintptrOption->[]uint */ func MapUintArrToUintptrOptionOption(m UintptrOptionOption, f func(UintptrOption) []uint) UintArrOption {  if m.IsDefined() { return UintArrOpt(f(*m.value)) } else { return NoneUintArrOption }  }
/* UintptrOptionOption: UintptrOption->[]uint8 */ func MapUint8ArrToUintptrOptionOption(m UintptrOptionOption, f func(UintptrOption) []uint8) Uint8ArrOption {  if m.IsDefined() { return Uint8ArrOpt(f(*m.value)) } else { return NoneUint8ArrOption }  }
/* UintptrOptionOption: UintptrOption->[]uint16 */ func MapUint16ArrToUintptrOptionOption(m UintptrOptionOption, f func(UintptrOption) []uint16) Uint16ArrOption {  if m.IsDefined() { return Uint16ArrOpt(f(*m.value)) } else { return NoneUint16ArrOption }  }
/* UintptrOptionOption: UintptrOption->[]uint32 */ func MapUint32ArrToUintptrOptionOption(m UintptrOptionOption, f func(UintptrOption) []uint32) Uint32ArrOption {  if m.IsDefined() { return Uint32ArrOpt(f(*m.value)) } else { return NoneUint32ArrOption }  }
/* UintptrOptionOption: UintptrOption->[]uint64 */ func MapUint64ArrToUintptrOptionOption(m UintptrOptionOption, f func(UintptrOption) []uint64) Uint64ArrOption {  if m.IsDefined() { return Uint64ArrOpt(f(*m.value)) } else { return NoneUint64ArrOption }  }
/* UintptrOptionOption: UintptrOption->[]uintptr */ func MapUintptrArrToUintptrOptionOption(m UintptrOptionOption, f func(UintptrOption) []uintptr) UintptrArrOption {  if m.IsDefined() { return UintptrArrOpt(f(*m.value)) } else { return NoneUintptrArrOption }  }
/* UintptrOptionOption: UintptrOption->[]byte */ func MapByteArrToUintptrOptionOption(m UintptrOptionOption, f func(UintptrOption) []byte) ByteArrOption {  if m.IsDefined() { return ByteArrOpt(f(*m.value)) } else { return NoneByteArrOption }  }
/* UintptrOptionOption: UintptrOption->[]rune */ func MapRuneArrToUintptrOptionOption(m UintptrOptionOption, f func(UintptrOption) []rune) RuneArrOption {  if m.IsDefined() { return RuneArrOpt(f(*m.value)) } else { return NoneRuneArrOption }  }
/* UintptrOptionOption: UintptrOption->[]float32 */ func MapFloat32ArrToUintptrOptionOption(m UintptrOptionOption, f func(UintptrOption) []float32) Float32ArrOption {  if m.IsDefined() { return Float32ArrOpt(f(*m.value)) } else { return NoneFloat32ArrOption }  }
/* UintptrOptionOption: UintptrOption->[]float64 */ func MapFloat64ArrToUintptrOptionOption(m UintptrOptionOption, f func(UintptrOption) []float64) Float64ArrOption {  if m.IsDefined() { return Float64ArrOpt(f(*m.value)) } else { return NoneFloat64ArrOption }  }
/* UintptrOptionOption: UintptrOption->[]complex64 */ func MapComplex64ArrToUintptrOptionOption(m UintptrOptionOption, f func(UintptrOption) []complex64) Complex64ArrOption {  if m.IsDefined() { return Complex64ArrOpt(f(*m.value)) } else { return NoneComplex64ArrOption }  }
/* UintptrOptionOption: UintptrOption->[]complex128 */ func MapComplex128ArrToUintptrOptionOption(m UintptrOptionOption, f func(UintptrOption) []complex128) Complex128ArrOption {  if m.IsDefined() { return Complex128ArrOpt(f(*m.value)) } else { return NoneComplex128ArrOption }  }
/* UintptrOptionOption: UintptrOption->[]Any */ func MapAnyArrToUintptrOptionOption(m UintptrOptionOption, f func(UintptrOption) []Any) AnyArrOption {  if m.IsDefined() { return AnyArrOpt(f(*m.value)) } else { return NoneAnyArrOption }  }
/* UintptrOptionOption: UintptrOption->BoolList */ func MapBoolListToUintptrOptionOption(m UintptrOptionOption, f func(UintptrOption) BoolList) BoolListOption {  if m.IsDefined() { return BoolListOpt(f(*m.value)) } else { return NoneBoolListOption }  }
/* UintptrOptionOption: UintptrOption->StringList */ func MapStringListToUintptrOptionOption(m UintptrOptionOption, f func(UintptrOption) StringList) StringListOption {  if m.IsDefined() { return StringListOpt(f(*m.value)) } else { return NoneStringListOption }  }
/* UintptrOptionOption: UintptrOption->IntList */ func MapIntListToUintptrOptionOption(m UintptrOptionOption, f func(UintptrOption) IntList) IntListOption {  if m.IsDefined() { return IntListOpt(f(*m.value)) } else { return NoneIntListOption }  }
/* UintptrOptionOption: UintptrOption->Int8List */ func MapInt8ListToUintptrOptionOption(m UintptrOptionOption, f func(UintptrOption) Int8List) Int8ListOption {  if m.IsDefined() { return Int8ListOpt(f(*m.value)) } else { return NoneInt8ListOption }  }
/* UintptrOptionOption: UintptrOption->Int16List */ func MapInt16ListToUintptrOptionOption(m UintptrOptionOption, f func(UintptrOption) Int16List) Int16ListOption {  if m.IsDefined() { return Int16ListOpt(f(*m.value)) } else { return NoneInt16ListOption }  }
/* UintptrOptionOption: UintptrOption->Int32List */ func MapInt32ListToUintptrOptionOption(m UintptrOptionOption, f func(UintptrOption) Int32List) Int32ListOption {  if m.IsDefined() { return Int32ListOpt(f(*m.value)) } else { return NoneInt32ListOption }  }
/* UintptrOptionOption: UintptrOption->Int64List */ func MapInt64ListToUintptrOptionOption(m UintptrOptionOption, f func(UintptrOption) Int64List) Int64ListOption {  if m.IsDefined() { return Int64ListOpt(f(*m.value)) } else { return NoneInt64ListOption }  }
/* UintptrOptionOption: UintptrOption->UintList */ func MapUintListToUintptrOptionOption(m UintptrOptionOption, f func(UintptrOption) UintList) UintListOption {  if m.IsDefined() { return UintListOpt(f(*m.value)) } else { return NoneUintListOption }  }
/* UintptrOptionOption: UintptrOption->Uint8List */ func MapUint8ListToUintptrOptionOption(m UintptrOptionOption, f func(UintptrOption) Uint8List) Uint8ListOption {  if m.IsDefined() { return Uint8ListOpt(f(*m.value)) } else { return NoneUint8ListOption }  }
/* UintptrOptionOption: UintptrOption->Uint16List */ func MapUint16ListToUintptrOptionOption(m UintptrOptionOption, f func(UintptrOption) Uint16List) Uint16ListOption {  if m.IsDefined() { return Uint16ListOpt(f(*m.value)) } else { return NoneUint16ListOption }  }
/* UintptrOptionOption: UintptrOption->Uint32List */ func MapUint32ListToUintptrOptionOption(m UintptrOptionOption, f func(UintptrOption) Uint32List) Uint32ListOption {  if m.IsDefined() { return Uint32ListOpt(f(*m.value)) } else { return NoneUint32ListOption }  }
/* UintptrOptionOption: UintptrOption->Uint64List */ func MapUint64ListToUintptrOptionOption(m UintptrOptionOption, f func(UintptrOption) Uint64List) Uint64ListOption {  if m.IsDefined() { return Uint64ListOpt(f(*m.value)) } else { return NoneUint64ListOption }  }
/* UintptrOptionOption: UintptrOption->UintptrList */ func MapUintptrListToUintptrOptionOption(m UintptrOptionOption, f func(UintptrOption) UintptrList) UintptrListOption {  if m.IsDefined() { return UintptrListOpt(f(*m.value)) } else { return NoneUintptrListOption }  }
/* UintptrOptionOption: UintptrOption->ByteList */ func MapByteListToUintptrOptionOption(m UintptrOptionOption, f func(UintptrOption) ByteList) ByteListOption {  if m.IsDefined() { return ByteListOpt(f(*m.value)) } else { return NoneByteListOption }  }
/* UintptrOptionOption: UintptrOption->RuneList */ func MapRuneListToUintptrOptionOption(m UintptrOptionOption, f func(UintptrOption) RuneList) RuneListOption {  if m.IsDefined() { return RuneListOpt(f(*m.value)) } else { return NoneRuneListOption }  }
/* UintptrOptionOption: UintptrOption->Float32List */ func MapFloat32ListToUintptrOptionOption(m UintptrOptionOption, f func(UintptrOption) Float32List) Float32ListOption {  if m.IsDefined() { return Float32ListOpt(f(*m.value)) } else { return NoneFloat32ListOption }  }
/* UintptrOptionOption: UintptrOption->Float64List */ func MapFloat64ListToUintptrOptionOption(m UintptrOptionOption, f func(UintptrOption) Float64List) Float64ListOption {  if m.IsDefined() { return Float64ListOpt(f(*m.value)) } else { return NoneFloat64ListOption }  }
/* UintptrOptionOption: UintptrOption->Complex64List */ func MapComplex64ListToUintptrOptionOption(m UintptrOptionOption, f func(UintptrOption) Complex64List) Complex64ListOption {  if m.IsDefined() { return Complex64ListOpt(f(*m.value)) } else { return NoneComplex64ListOption }  }
/* UintptrOptionOption: UintptrOption->Complex128List */ func MapComplex128ListToUintptrOptionOption(m UintptrOptionOption, f func(UintptrOption) Complex128List) Complex128ListOption {  if m.IsDefined() { return Complex128ListOpt(f(*m.value)) } else { return NoneComplex128ListOption }  }
/* UintptrOptionOption: UintptrOption->AnyList */ func MapAnyListToUintptrOptionOption(m UintptrOptionOption, f func(UintptrOption) AnyList) AnyListOption {  if m.IsDefined() { return AnyListOpt(f(*m.value)) } else { return NoneAnyListOption }  }
/* ByteOptionOption: ByteOption->bool */ func MapBoolToByteOptionOption(m ByteOptionOption, f func(ByteOption) bool) BoolOption {  if m.IsDefined() { return Bool(f(*m.value)) } else { return NoneBoolOption }  }
/* ByteOptionOption: ByteOption->string */ func MapStringToByteOptionOption(m ByteOptionOption, f func(ByteOption) string) StringOption {  if m.IsDefined() { return String(f(*m.value)) } else { return NoneStringOption }  }
/* ByteOptionOption: ByteOption->int */ func MapIntToByteOptionOption(m ByteOptionOption, f func(ByteOption) int) IntOption {  if m.IsDefined() { return Int(f(*m.value)) } else { return NoneIntOption }  }
/* ByteOptionOption: ByteOption->int8 */ func MapInt8ToByteOptionOption(m ByteOptionOption, f func(ByteOption) int8) Int8Option {  if m.IsDefined() { return Int8(f(*m.value)) } else { return NoneInt8Option }  }
/* ByteOptionOption: ByteOption->int16 */ func MapInt16ToByteOptionOption(m ByteOptionOption, f func(ByteOption) int16) Int16Option {  if m.IsDefined() { return Int16(f(*m.value)) } else { return NoneInt16Option }  }
/* ByteOptionOption: ByteOption->int32 */ func MapInt32ToByteOptionOption(m ByteOptionOption, f func(ByteOption) int32) Int32Option {  if m.IsDefined() { return Int32(f(*m.value)) } else { return NoneInt32Option }  }
/* ByteOptionOption: ByteOption->int64 */ func MapInt64ToByteOptionOption(m ByteOptionOption, f func(ByteOption) int64) Int64Option {  if m.IsDefined() { return Int64(f(*m.value)) } else { return NoneInt64Option }  }
/* ByteOptionOption: ByteOption->uint */ func MapUintToByteOptionOption(m ByteOptionOption, f func(ByteOption) uint) UintOption {  if m.IsDefined() { return Uint(f(*m.value)) } else { return NoneUintOption }  }
/* ByteOptionOption: ByteOption->uint8 */ func MapUint8ToByteOptionOption(m ByteOptionOption, f func(ByteOption) uint8) Uint8Option {  if m.IsDefined() { return Uint8(f(*m.value)) } else { return NoneUint8Option }  }
/* ByteOptionOption: ByteOption->uint16 */ func MapUint16ToByteOptionOption(m ByteOptionOption, f func(ByteOption) uint16) Uint16Option {  if m.IsDefined() { return Uint16(f(*m.value)) } else { return NoneUint16Option }  }
/* ByteOptionOption: ByteOption->uint32 */ func MapUint32ToByteOptionOption(m ByteOptionOption, f func(ByteOption) uint32) Uint32Option {  if m.IsDefined() { return Uint32(f(*m.value)) } else { return NoneUint32Option }  }
/* ByteOptionOption: ByteOption->uint64 */ func MapUint64ToByteOptionOption(m ByteOptionOption, f func(ByteOption) uint64) Uint64Option {  if m.IsDefined() { return Uint64(f(*m.value)) } else { return NoneUint64Option }  }
/* ByteOptionOption: ByteOption->uintptr */ func MapUintptrToByteOptionOption(m ByteOptionOption, f func(ByteOption) uintptr) UintptrOption {  if m.IsDefined() { return Uintptr(f(*m.value)) } else { return NoneUintptrOption }  }
/* ByteOptionOption: ByteOption->byte */ func MapByteToByteOptionOption(m ByteOptionOption, f func(ByteOption) byte) ByteOption {  if m.IsDefined() { return Byte(f(*m.value)) } else { return NoneByteOption }  }
/* ByteOptionOption: ByteOption->rune */ func MapRuneToByteOptionOption(m ByteOptionOption, f func(ByteOption) rune) RuneOption {  if m.IsDefined() { return Rune(f(*m.value)) } else { return NoneRuneOption }  }
/* ByteOptionOption: ByteOption->float32 */ func MapFloat32ToByteOptionOption(m ByteOptionOption, f func(ByteOption) float32) Float32Option {  if m.IsDefined() { return Float32(f(*m.value)) } else { return NoneFloat32Option }  }
/* ByteOptionOption: ByteOption->float64 */ func MapFloat64ToByteOptionOption(m ByteOptionOption, f func(ByteOption) float64) Float64Option {  if m.IsDefined() { return Float64(f(*m.value)) } else { return NoneFloat64Option }  }
/* ByteOptionOption: ByteOption->complex64 */ func MapComplex64ToByteOptionOption(m ByteOptionOption, f func(ByteOption) complex64) Complex64Option {  if m.IsDefined() { return Complex64(f(*m.value)) } else { return NoneComplex64Option }  }
/* ByteOptionOption: ByteOption->complex128 */ func MapComplex128ToByteOptionOption(m ByteOptionOption, f func(ByteOption) complex128) Complex128Option {  if m.IsDefined() { return Complex128(f(*m.value)) } else { return NoneComplex128Option }  }
/* ByteOptionOption: ByteOption->Any */ func MapAnyToByteOptionOption(m ByteOptionOption, f func(ByteOption) Any) AnyOption {  if m.IsDefined() { return AnyOpt(f(*m.value)) } else { return NoneAnyOption }  }
/* ByteOptionOption: ByteOption->BoolOption */ func MapBoolOptionToByteOptionOption(m ByteOptionOption, f func(ByteOption) BoolOption) BoolOptionOption {  if m.IsDefined() { return BoolBool(f(*m.value)) } else { return NoneBoolOptionOption }  }
/* ByteOptionOption: ByteOption->StringOption */ func MapStringOptionToByteOptionOption(m ByteOptionOption, f func(ByteOption) StringOption) StringOptionOption {  if m.IsDefined() { return StringString(f(*m.value)) } else { return NoneStringOptionOption }  }
/* ByteOptionOption: ByteOption->IntOption */ func MapIntOptionToByteOptionOption(m ByteOptionOption, f func(ByteOption) IntOption) IntOptionOption {  if m.IsDefined() { return IntInt(f(*m.value)) } else { return NoneIntOptionOption }  }
/* ByteOptionOption: ByteOption->Int8Option */ func MapInt8OptionToByteOptionOption(m ByteOptionOption, f func(ByteOption) Int8Option) Int8OptionOption {  if m.IsDefined() { return Int8Int8(f(*m.value)) } else { return NoneInt8OptionOption }  }
/* ByteOptionOption: ByteOption->Int16Option */ func MapInt16OptionToByteOptionOption(m ByteOptionOption, f func(ByteOption) Int16Option) Int16OptionOption {  if m.IsDefined() { return Int16Int16(f(*m.value)) } else { return NoneInt16OptionOption }  }
/* ByteOptionOption: ByteOption->Int32Option */ func MapInt32OptionToByteOptionOption(m ByteOptionOption, f func(ByteOption) Int32Option) Int32OptionOption {  if m.IsDefined() { return Int32Int32(f(*m.value)) } else { return NoneInt32OptionOption }  }
/* ByteOptionOption: ByteOption->Int64Option */ func MapInt64OptionToByteOptionOption(m ByteOptionOption, f func(ByteOption) Int64Option) Int64OptionOption {  if m.IsDefined() { return Int64Int64(f(*m.value)) } else { return NoneInt64OptionOption }  }
/* ByteOptionOption: ByteOption->UintOption */ func MapUintOptionToByteOptionOption(m ByteOptionOption, f func(ByteOption) UintOption) UintOptionOption {  if m.IsDefined() { return UintUint(f(*m.value)) } else { return NoneUintOptionOption }  }
/* ByteOptionOption: ByteOption->Uint8Option */ func MapUint8OptionToByteOptionOption(m ByteOptionOption, f func(ByteOption) Uint8Option) Uint8OptionOption {  if m.IsDefined() { return Uint8Uint8(f(*m.value)) } else { return NoneUint8OptionOption }  }
/* ByteOptionOption: ByteOption->Uint16Option */ func MapUint16OptionToByteOptionOption(m ByteOptionOption, f func(ByteOption) Uint16Option) Uint16OptionOption {  if m.IsDefined() { return Uint16Uint16(f(*m.value)) } else { return NoneUint16OptionOption }  }
/* ByteOptionOption: ByteOption->Uint32Option */ func MapUint32OptionToByteOptionOption(m ByteOptionOption, f func(ByteOption) Uint32Option) Uint32OptionOption {  if m.IsDefined() { return Uint32Uint32(f(*m.value)) } else { return NoneUint32OptionOption }  }
/* ByteOptionOption: ByteOption->Uint64Option */ func MapUint64OptionToByteOptionOption(m ByteOptionOption, f func(ByteOption) Uint64Option) Uint64OptionOption {  if m.IsDefined() { return Uint64Uint64(f(*m.value)) } else { return NoneUint64OptionOption }  }
/* ByteOptionOption: ByteOption->UintptrOption */ func MapUintptrOptionToByteOptionOption(m ByteOptionOption, f func(ByteOption) UintptrOption) UintptrOptionOption {  if m.IsDefined() { return UintptrUintptr(f(*m.value)) } else { return NoneUintptrOptionOption }  }
/* ByteOptionOption: ByteOption->ByteOption */ func MapByteOptionToByteOptionOption(m ByteOptionOption, f func(ByteOption) ByteOption) ByteOptionOption {  if m.IsDefined() { return ByteByte(f(*m.value)) } else { return NoneByteOptionOption }  }
/* ByteOptionOption: ByteOption->RuneOption */ func MapRuneOptionToByteOptionOption(m ByteOptionOption, f func(ByteOption) RuneOption) RuneOptionOption {  if m.IsDefined() { return RuneRune(f(*m.value)) } else { return NoneRuneOptionOption }  }
/* ByteOptionOption: ByteOption->Float32Option */ func MapFloat32OptionToByteOptionOption(m ByteOptionOption, f func(ByteOption) Float32Option) Float32OptionOption {  if m.IsDefined() { return Float32Float32(f(*m.value)) } else { return NoneFloat32OptionOption }  }
/* ByteOptionOption: ByteOption->Float64Option */ func MapFloat64OptionToByteOptionOption(m ByteOptionOption, f func(ByteOption) Float64Option) Float64OptionOption {  if m.IsDefined() { return Float64Float64(f(*m.value)) } else { return NoneFloat64OptionOption }  }
/* ByteOptionOption: ByteOption->Complex64Option */ func MapComplex64OptionToByteOptionOption(m ByteOptionOption, f func(ByteOption) Complex64Option) Complex64OptionOption {  if m.IsDefined() { return Complex64Complex64(f(*m.value)) } else { return NoneComplex64OptionOption }  }
/* ByteOptionOption: ByteOption->Complex128Option */ func MapComplex128OptionToByteOptionOption(m ByteOptionOption, f func(ByteOption) Complex128Option) Complex128OptionOption {  if m.IsDefined() { return Complex128Complex128(f(*m.value)) } else { return NoneComplex128OptionOption }  }
/* ByteOptionOption: ByteOption->AnyOption */ func MapAnyOptionToByteOptionOption(m ByteOptionOption, f func(ByteOption) AnyOption) AnyOptionOption {  if m.IsDefined() { return AnyOptAny(f(*m.value)) } else { return NoneAnyOptionOption }  }
/* ByteOptionOption: ByteOption->[]bool */ func MapBoolArrToByteOptionOption(m ByteOptionOption, f func(ByteOption) []bool) BoolArrOption {  if m.IsDefined() { return BoolArrOpt(f(*m.value)) } else { return NoneBoolArrOption }  }
/* ByteOptionOption: ByteOption->[]string */ func MapStringArrToByteOptionOption(m ByteOptionOption, f func(ByteOption) []string) StringArrOption {  if m.IsDefined() { return StringArrOpt(f(*m.value)) } else { return NoneStringArrOption }  }
/* ByteOptionOption: ByteOption->[]int */ func MapIntArrToByteOptionOption(m ByteOptionOption, f func(ByteOption) []int) IntArrOption {  if m.IsDefined() { return IntArrOpt(f(*m.value)) } else { return NoneIntArrOption }  }
/* ByteOptionOption: ByteOption->[]int8 */ func MapInt8ArrToByteOptionOption(m ByteOptionOption, f func(ByteOption) []int8) Int8ArrOption {  if m.IsDefined() { return Int8ArrOpt(f(*m.value)) } else { return NoneInt8ArrOption }  }
/* ByteOptionOption: ByteOption->[]int16 */ func MapInt16ArrToByteOptionOption(m ByteOptionOption, f func(ByteOption) []int16) Int16ArrOption {  if m.IsDefined() { return Int16ArrOpt(f(*m.value)) } else { return NoneInt16ArrOption }  }
/* ByteOptionOption: ByteOption->[]int32 */ func MapInt32ArrToByteOptionOption(m ByteOptionOption, f func(ByteOption) []int32) Int32ArrOption {  if m.IsDefined() { return Int32ArrOpt(f(*m.value)) } else { return NoneInt32ArrOption }  }
/* ByteOptionOption: ByteOption->[]int64 */ func MapInt64ArrToByteOptionOption(m ByteOptionOption, f func(ByteOption) []int64) Int64ArrOption {  if m.IsDefined() { return Int64ArrOpt(f(*m.value)) } else { return NoneInt64ArrOption }  }
/* ByteOptionOption: ByteOption->[]uint */ func MapUintArrToByteOptionOption(m ByteOptionOption, f func(ByteOption) []uint) UintArrOption {  if m.IsDefined() { return UintArrOpt(f(*m.value)) } else { return NoneUintArrOption }  }
/* ByteOptionOption: ByteOption->[]uint8 */ func MapUint8ArrToByteOptionOption(m ByteOptionOption, f func(ByteOption) []uint8) Uint8ArrOption {  if m.IsDefined() { return Uint8ArrOpt(f(*m.value)) } else { return NoneUint8ArrOption }  }
/* ByteOptionOption: ByteOption->[]uint16 */ func MapUint16ArrToByteOptionOption(m ByteOptionOption, f func(ByteOption) []uint16) Uint16ArrOption {  if m.IsDefined() { return Uint16ArrOpt(f(*m.value)) } else { return NoneUint16ArrOption }  }
/* ByteOptionOption: ByteOption->[]uint32 */ func MapUint32ArrToByteOptionOption(m ByteOptionOption, f func(ByteOption) []uint32) Uint32ArrOption {  if m.IsDefined() { return Uint32ArrOpt(f(*m.value)) } else { return NoneUint32ArrOption }  }
/* ByteOptionOption: ByteOption->[]uint64 */ func MapUint64ArrToByteOptionOption(m ByteOptionOption, f func(ByteOption) []uint64) Uint64ArrOption {  if m.IsDefined() { return Uint64ArrOpt(f(*m.value)) } else { return NoneUint64ArrOption }  }
/* ByteOptionOption: ByteOption->[]uintptr */ func MapUintptrArrToByteOptionOption(m ByteOptionOption, f func(ByteOption) []uintptr) UintptrArrOption {  if m.IsDefined() { return UintptrArrOpt(f(*m.value)) } else { return NoneUintptrArrOption }  }
/* ByteOptionOption: ByteOption->[]byte */ func MapByteArrToByteOptionOption(m ByteOptionOption, f func(ByteOption) []byte) ByteArrOption {  if m.IsDefined() { return ByteArrOpt(f(*m.value)) } else { return NoneByteArrOption }  }
/* ByteOptionOption: ByteOption->[]rune */ func MapRuneArrToByteOptionOption(m ByteOptionOption, f func(ByteOption) []rune) RuneArrOption {  if m.IsDefined() { return RuneArrOpt(f(*m.value)) } else { return NoneRuneArrOption }  }
/* ByteOptionOption: ByteOption->[]float32 */ func MapFloat32ArrToByteOptionOption(m ByteOptionOption, f func(ByteOption) []float32) Float32ArrOption {  if m.IsDefined() { return Float32ArrOpt(f(*m.value)) } else { return NoneFloat32ArrOption }  }
/* ByteOptionOption: ByteOption->[]float64 */ func MapFloat64ArrToByteOptionOption(m ByteOptionOption, f func(ByteOption) []float64) Float64ArrOption {  if m.IsDefined() { return Float64ArrOpt(f(*m.value)) } else { return NoneFloat64ArrOption }  }
/* ByteOptionOption: ByteOption->[]complex64 */ func MapComplex64ArrToByteOptionOption(m ByteOptionOption, f func(ByteOption) []complex64) Complex64ArrOption {  if m.IsDefined() { return Complex64ArrOpt(f(*m.value)) } else { return NoneComplex64ArrOption }  }
/* ByteOptionOption: ByteOption->[]complex128 */ func MapComplex128ArrToByteOptionOption(m ByteOptionOption, f func(ByteOption) []complex128) Complex128ArrOption {  if m.IsDefined() { return Complex128ArrOpt(f(*m.value)) } else { return NoneComplex128ArrOption }  }
/* ByteOptionOption: ByteOption->[]Any */ func MapAnyArrToByteOptionOption(m ByteOptionOption, f func(ByteOption) []Any) AnyArrOption {  if m.IsDefined() { return AnyArrOpt(f(*m.value)) } else { return NoneAnyArrOption }  }
/* ByteOptionOption: ByteOption->BoolList */ func MapBoolListToByteOptionOption(m ByteOptionOption, f func(ByteOption) BoolList) BoolListOption {  if m.IsDefined() { return BoolListOpt(f(*m.value)) } else { return NoneBoolListOption }  }
/* ByteOptionOption: ByteOption->StringList */ func MapStringListToByteOptionOption(m ByteOptionOption, f func(ByteOption) StringList) StringListOption {  if m.IsDefined() { return StringListOpt(f(*m.value)) } else { return NoneStringListOption }  }
/* ByteOptionOption: ByteOption->IntList */ func MapIntListToByteOptionOption(m ByteOptionOption, f func(ByteOption) IntList) IntListOption {  if m.IsDefined() { return IntListOpt(f(*m.value)) } else { return NoneIntListOption }  }
/* ByteOptionOption: ByteOption->Int8List */ func MapInt8ListToByteOptionOption(m ByteOptionOption, f func(ByteOption) Int8List) Int8ListOption {  if m.IsDefined() { return Int8ListOpt(f(*m.value)) } else { return NoneInt8ListOption }  }
/* ByteOptionOption: ByteOption->Int16List */ func MapInt16ListToByteOptionOption(m ByteOptionOption, f func(ByteOption) Int16List) Int16ListOption {  if m.IsDefined() { return Int16ListOpt(f(*m.value)) } else { return NoneInt16ListOption }  }
/* ByteOptionOption: ByteOption->Int32List */ func MapInt32ListToByteOptionOption(m ByteOptionOption, f func(ByteOption) Int32List) Int32ListOption {  if m.IsDefined() { return Int32ListOpt(f(*m.value)) } else { return NoneInt32ListOption }  }
/* ByteOptionOption: ByteOption->Int64List */ func MapInt64ListToByteOptionOption(m ByteOptionOption, f func(ByteOption) Int64List) Int64ListOption {  if m.IsDefined() { return Int64ListOpt(f(*m.value)) } else { return NoneInt64ListOption }  }
/* ByteOptionOption: ByteOption->UintList */ func MapUintListToByteOptionOption(m ByteOptionOption, f func(ByteOption) UintList) UintListOption {  if m.IsDefined() { return UintListOpt(f(*m.value)) } else { return NoneUintListOption }  }
/* ByteOptionOption: ByteOption->Uint8List */ func MapUint8ListToByteOptionOption(m ByteOptionOption, f func(ByteOption) Uint8List) Uint8ListOption {  if m.IsDefined() { return Uint8ListOpt(f(*m.value)) } else { return NoneUint8ListOption }  }
/* ByteOptionOption: ByteOption->Uint16List */ func MapUint16ListToByteOptionOption(m ByteOptionOption, f func(ByteOption) Uint16List) Uint16ListOption {  if m.IsDefined() { return Uint16ListOpt(f(*m.value)) } else { return NoneUint16ListOption }  }
/* ByteOptionOption: ByteOption->Uint32List */ func MapUint32ListToByteOptionOption(m ByteOptionOption, f func(ByteOption) Uint32List) Uint32ListOption {  if m.IsDefined() { return Uint32ListOpt(f(*m.value)) } else { return NoneUint32ListOption }  }
/* ByteOptionOption: ByteOption->Uint64List */ func MapUint64ListToByteOptionOption(m ByteOptionOption, f func(ByteOption) Uint64List) Uint64ListOption {  if m.IsDefined() { return Uint64ListOpt(f(*m.value)) } else { return NoneUint64ListOption }  }
/* ByteOptionOption: ByteOption->UintptrList */ func MapUintptrListToByteOptionOption(m ByteOptionOption, f func(ByteOption) UintptrList) UintptrListOption {  if m.IsDefined() { return UintptrListOpt(f(*m.value)) } else { return NoneUintptrListOption }  }
/* ByteOptionOption: ByteOption->ByteList */ func MapByteListToByteOptionOption(m ByteOptionOption, f func(ByteOption) ByteList) ByteListOption {  if m.IsDefined() { return ByteListOpt(f(*m.value)) } else { return NoneByteListOption }  }
/* ByteOptionOption: ByteOption->RuneList */ func MapRuneListToByteOptionOption(m ByteOptionOption, f func(ByteOption) RuneList) RuneListOption {  if m.IsDefined() { return RuneListOpt(f(*m.value)) } else { return NoneRuneListOption }  }
/* ByteOptionOption: ByteOption->Float32List */ func MapFloat32ListToByteOptionOption(m ByteOptionOption, f func(ByteOption) Float32List) Float32ListOption {  if m.IsDefined() { return Float32ListOpt(f(*m.value)) } else { return NoneFloat32ListOption }  }
/* ByteOptionOption: ByteOption->Float64List */ func MapFloat64ListToByteOptionOption(m ByteOptionOption, f func(ByteOption) Float64List) Float64ListOption {  if m.IsDefined() { return Float64ListOpt(f(*m.value)) } else { return NoneFloat64ListOption }  }
/* ByteOptionOption: ByteOption->Complex64List */ func MapComplex64ListToByteOptionOption(m ByteOptionOption, f func(ByteOption) Complex64List) Complex64ListOption {  if m.IsDefined() { return Complex64ListOpt(f(*m.value)) } else { return NoneComplex64ListOption }  }
/* ByteOptionOption: ByteOption->Complex128List */ func MapComplex128ListToByteOptionOption(m ByteOptionOption, f func(ByteOption) Complex128List) Complex128ListOption {  if m.IsDefined() { return Complex128ListOpt(f(*m.value)) } else { return NoneComplex128ListOption }  }
/* ByteOptionOption: ByteOption->AnyList */ func MapAnyListToByteOptionOption(m ByteOptionOption, f func(ByteOption) AnyList) AnyListOption {  if m.IsDefined() { return AnyListOpt(f(*m.value)) } else { return NoneAnyListOption }  }
/* RuneOptionOption: RuneOption->bool */ func MapBoolToRuneOptionOption(m RuneOptionOption, f func(RuneOption) bool) BoolOption {  if m.IsDefined() { return Bool(f(*m.value)) } else { return NoneBoolOption }  }
/* RuneOptionOption: RuneOption->string */ func MapStringToRuneOptionOption(m RuneOptionOption, f func(RuneOption) string) StringOption {  if m.IsDefined() { return String(f(*m.value)) } else { return NoneStringOption }  }
/* RuneOptionOption: RuneOption->int */ func MapIntToRuneOptionOption(m RuneOptionOption, f func(RuneOption) int) IntOption {  if m.IsDefined() { return Int(f(*m.value)) } else { return NoneIntOption }  }
/* RuneOptionOption: RuneOption->int8 */ func MapInt8ToRuneOptionOption(m RuneOptionOption, f func(RuneOption) int8) Int8Option {  if m.IsDefined() { return Int8(f(*m.value)) } else { return NoneInt8Option }  }
/* RuneOptionOption: RuneOption->int16 */ func MapInt16ToRuneOptionOption(m RuneOptionOption, f func(RuneOption) int16) Int16Option {  if m.IsDefined() { return Int16(f(*m.value)) } else { return NoneInt16Option }  }
/* RuneOptionOption: RuneOption->int32 */ func MapInt32ToRuneOptionOption(m RuneOptionOption, f func(RuneOption) int32) Int32Option {  if m.IsDefined() { return Int32(f(*m.value)) } else { return NoneInt32Option }  }
/* RuneOptionOption: RuneOption->int64 */ func MapInt64ToRuneOptionOption(m RuneOptionOption, f func(RuneOption) int64) Int64Option {  if m.IsDefined() { return Int64(f(*m.value)) } else { return NoneInt64Option }  }
/* RuneOptionOption: RuneOption->uint */ func MapUintToRuneOptionOption(m RuneOptionOption, f func(RuneOption) uint) UintOption {  if m.IsDefined() { return Uint(f(*m.value)) } else { return NoneUintOption }  }
/* RuneOptionOption: RuneOption->uint8 */ func MapUint8ToRuneOptionOption(m RuneOptionOption, f func(RuneOption) uint8) Uint8Option {  if m.IsDefined() { return Uint8(f(*m.value)) } else { return NoneUint8Option }  }
/* RuneOptionOption: RuneOption->uint16 */ func MapUint16ToRuneOptionOption(m RuneOptionOption, f func(RuneOption) uint16) Uint16Option {  if m.IsDefined() { return Uint16(f(*m.value)) } else { return NoneUint16Option }  }
/* RuneOptionOption: RuneOption->uint32 */ func MapUint32ToRuneOptionOption(m RuneOptionOption, f func(RuneOption) uint32) Uint32Option {  if m.IsDefined() { return Uint32(f(*m.value)) } else { return NoneUint32Option }  }
/* RuneOptionOption: RuneOption->uint64 */ func MapUint64ToRuneOptionOption(m RuneOptionOption, f func(RuneOption) uint64) Uint64Option {  if m.IsDefined() { return Uint64(f(*m.value)) } else { return NoneUint64Option }  }
/* RuneOptionOption: RuneOption->uintptr */ func MapUintptrToRuneOptionOption(m RuneOptionOption, f func(RuneOption) uintptr) UintptrOption {  if m.IsDefined() { return Uintptr(f(*m.value)) } else { return NoneUintptrOption }  }
/* RuneOptionOption: RuneOption->byte */ func MapByteToRuneOptionOption(m RuneOptionOption, f func(RuneOption) byte) ByteOption {  if m.IsDefined() { return Byte(f(*m.value)) } else { return NoneByteOption }  }
/* RuneOptionOption: RuneOption->rune */ func MapRuneToRuneOptionOption(m RuneOptionOption, f func(RuneOption) rune) RuneOption {  if m.IsDefined() { return Rune(f(*m.value)) } else { return NoneRuneOption }  }
/* RuneOptionOption: RuneOption->float32 */ func MapFloat32ToRuneOptionOption(m RuneOptionOption, f func(RuneOption) float32) Float32Option {  if m.IsDefined() { return Float32(f(*m.value)) } else { return NoneFloat32Option }  }
/* RuneOptionOption: RuneOption->float64 */ func MapFloat64ToRuneOptionOption(m RuneOptionOption, f func(RuneOption) float64) Float64Option {  if m.IsDefined() { return Float64(f(*m.value)) } else { return NoneFloat64Option }  }
/* RuneOptionOption: RuneOption->complex64 */ func MapComplex64ToRuneOptionOption(m RuneOptionOption, f func(RuneOption) complex64) Complex64Option {  if m.IsDefined() { return Complex64(f(*m.value)) } else { return NoneComplex64Option }  }
/* RuneOptionOption: RuneOption->complex128 */ func MapComplex128ToRuneOptionOption(m RuneOptionOption, f func(RuneOption) complex128) Complex128Option {  if m.IsDefined() { return Complex128(f(*m.value)) } else { return NoneComplex128Option }  }
/* RuneOptionOption: RuneOption->Any */ func MapAnyToRuneOptionOption(m RuneOptionOption, f func(RuneOption) Any) AnyOption {  if m.IsDefined() { return AnyOpt(f(*m.value)) } else { return NoneAnyOption }  }
/* RuneOptionOption: RuneOption->BoolOption */ func MapBoolOptionToRuneOptionOption(m RuneOptionOption, f func(RuneOption) BoolOption) BoolOptionOption {  if m.IsDefined() { return BoolBool(f(*m.value)) } else { return NoneBoolOptionOption }  }
/* RuneOptionOption: RuneOption->StringOption */ func MapStringOptionToRuneOptionOption(m RuneOptionOption, f func(RuneOption) StringOption) StringOptionOption {  if m.IsDefined() { return StringString(f(*m.value)) } else { return NoneStringOptionOption }  }
/* RuneOptionOption: RuneOption->IntOption */ func MapIntOptionToRuneOptionOption(m RuneOptionOption, f func(RuneOption) IntOption) IntOptionOption {  if m.IsDefined() { return IntInt(f(*m.value)) } else { return NoneIntOptionOption }  }
/* RuneOptionOption: RuneOption->Int8Option */ func MapInt8OptionToRuneOptionOption(m RuneOptionOption, f func(RuneOption) Int8Option) Int8OptionOption {  if m.IsDefined() { return Int8Int8(f(*m.value)) } else { return NoneInt8OptionOption }  }
/* RuneOptionOption: RuneOption->Int16Option */ func MapInt16OptionToRuneOptionOption(m RuneOptionOption, f func(RuneOption) Int16Option) Int16OptionOption {  if m.IsDefined() { return Int16Int16(f(*m.value)) } else { return NoneInt16OptionOption }  }
/* RuneOptionOption: RuneOption->Int32Option */ func MapInt32OptionToRuneOptionOption(m RuneOptionOption, f func(RuneOption) Int32Option) Int32OptionOption {  if m.IsDefined() { return Int32Int32(f(*m.value)) } else { return NoneInt32OptionOption }  }
/* RuneOptionOption: RuneOption->Int64Option */ func MapInt64OptionToRuneOptionOption(m RuneOptionOption, f func(RuneOption) Int64Option) Int64OptionOption {  if m.IsDefined() { return Int64Int64(f(*m.value)) } else { return NoneInt64OptionOption }  }
/* RuneOptionOption: RuneOption->UintOption */ func MapUintOptionToRuneOptionOption(m RuneOptionOption, f func(RuneOption) UintOption) UintOptionOption {  if m.IsDefined() { return UintUint(f(*m.value)) } else { return NoneUintOptionOption }  }
/* RuneOptionOption: RuneOption->Uint8Option */ func MapUint8OptionToRuneOptionOption(m RuneOptionOption, f func(RuneOption) Uint8Option) Uint8OptionOption {  if m.IsDefined() { return Uint8Uint8(f(*m.value)) } else { return NoneUint8OptionOption }  }
/* RuneOptionOption: RuneOption->Uint16Option */ func MapUint16OptionToRuneOptionOption(m RuneOptionOption, f func(RuneOption) Uint16Option) Uint16OptionOption {  if m.IsDefined() { return Uint16Uint16(f(*m.value)) } else { return NoneUint16OptionOption }  }
/* RuneOptionOption: RuneOption->Uint32Option */ func MapUint32OptionToRuneOptionOption(m RuneOptionOption, f func(RuneOption) Uint32Option) Uint32OptionOption {  if m.IsDefined() { return Uint32Uint32(f(*m.value)) } else { return NoneUint32OptionOption }  }
/* RuneOptionOption: RuneOption->Uint64Option */ func MapUint64OptionToRuneOptionOption(m RuneOptionOption, f func(RuneOption) Uint64Option) Uint64OptionOption {  if m.IsDefined() { return Uint64Uint64(f(*m.value)) } else { return NoneUint64OptionOption }  }
/* RuneOptionOption: RuneOption->UintptrOption */ func MapUintptrOptionToRuneOptionOption(m RuneOptionOption, f func(RuneOption) UintptrOption) UintptrOptionOption {  if m.IsDefined() { return UintptrUintptr(f(*m.value)) } else { return NoneUintptrOptionOption }  }
/* RuneOptionOption: RuneOption->ByteOption */ func MapByteOptionToRuneOptionOption(m RuneOptionOption, f func(RuneOption) ByteOption) ByteOptionOption {  if m.IsDefined() { return ByteByte(f(*m.value)) } else { return NoneByteOptionOption }  }
/* RuneOptionOption: RuneOption->RuneOption */ func MapRuneOptionToRuneOptionOption(m RuneOptionOption, f func(RuneOption) RuneOption) RuneOptionOption {  if m.IsDefined() { return RuneRune(f(*m.value)) } else { return NoneRuneOptionOption }  }
/* RuneOptionOption: RuneOption->Float32Option */ func MapFloat32OptionToRuneOptionOption(m RuneOptionOption, f func(RuneOption) Float32Option) Float32OptionOption {  if m.IsDefined() { return Float32Float32(f(*m.value)) } else { return NoneFloat32OptionOption }  }
/* RuneOptionOption: RuneOption->Float64Option */ func MapFloat64OptionToRuneOptionOption(m RuneOptionOption, f func(RuneOption) Float64Option) Float64OptionOption {  if m.IsDefined() { return Float64Float64(f(*m.value)) } else { return NoneFloat64OptionOption }  }
/* RuneOptionOption: RuneOption->Complex64Option */ func MapComplex64OptionToRuneOptionOption(m RuneOptionOption, f func(RuneOption) Complex64Option) Complex64OptionOption {  if m.IsDefined() { return Complex64Complex64(f(*m.value)) } else { return NoneComplex64OptionOption }  }
/* RuneOptionOption: RuneOption->Complex128Option */ func MapComplex128OptionToRuneOptionOption(m RuneOptionOption, f func(RuneOption) Complex128Option) Complex128OptionOption {  if m.IsDefined() { return Complex128Complex128(f(*m.value)) } else { return NoneComplex128OptionOption }  }
/* RuneOptionOption: RuneOption->AnyOption */ func MapAnyOptionToRuneOptionOption(m RuneOptionOption, f func(RuneOption) AnyOption) AnyOptionOption {  if m.IsDefined() { return AnyOptAny(f(*m.value)) } else { return NoneAnyOptionOption }  }
/* RuneOptionOption: RuneOption->[]bool */ func MapBoolArrToRuneOptionOption(m RuneOptionOption, f func(RuneOption) []bool) BoolArrOption {  if m.IsDefined() { return BoolArrOpt(f(*m.value)) } else { return NoneBoolArrOption }  }
/* RuneOptionOption: RuneOption->[]string */ func MapStringArrToRuneOptionOption(m RuneOptionOption, f func(RuneOption) []string) StringArrOption {  if m.IsDefined() { return StringArrOpt(f(*m.value)) } else { return NoneStringArrOption }  }
/* RuneOptionOption: RuneOption->[]int */ func MapIntArrToRuneOptionOption(m RuneOptionOption, f func(RuneOption) []int) IntArrOption {  if m.IsDefined() { return IntArrOpt(f(*m.value)) } else { return NoneIntArrOption }  }
/* RuneOptionOption: RuneOption->[]int8 */ func MapInt8ArrToRuneOptionOption(m RuneOptionOption, f func(RuneOption) []int8) Int8ArrOption {  if m.IsDefined() { return Int8ArrOpt(f(*m.value)) } else { return NoneInt8ArrOption }  }
/* RuneOptionOption: RuneOption->[]int16 */ func MapInt16ArrToRuneOptionOption(m RuneOptionOption, f func(RuneOption) []int16) Int16ArrOption {  if m.IsDefined() { return Int16ArrOpt(f(*m.value)) } else { return NoneInt16ArrOption }  }
/* RuneOptionOption: RuneOption->[]int32 */ func MapInt32ArrToRuneOptionOption(m RuneOptionOption, f func(RuneOption) []int32) Int32ArrOption {  if m.IsDefined() { return Int32ArrOpt(f(*m.value)) } else { return NoneInt32ArrOption }  }
/* RuneOptionOption: RuneOption->[]int64 */ func MapInt64ArrToRuneOptionOption(m RuneOptionOption, f func(RuneOption) []int64) Int64ArrOption {  if m.IsDefined() { return Int64ArrOpt(f(*m.value)) } else { return NoneInt64ArrOption }  }
/* RuneOptionOption: RuneOption->[]uint */ func MapUintArrToRuneOptionOption(m RuneOptionOption, f func(RuneOption) []uint) UintArrOption {  if m.IsDefined() { return UintArrOpt(f(*m.value)) } else { return NoneUintArrOption }  }
/* RuneOptionOption: RuneOption->[]uint8 */ func MapUint8ArrToRuneOptionOption(m RuneOptionOption, f func(RuneOption) []uint8) Uint8ArrOption {  if m.IsDefined() { return Uint8ArrOpt(f(*m.value)) } else { return NoneUint8ArrOption }  }
/* RuneOptionOption: RuneOption->[]uint16 */ func MapUint16ArrToRuneOptionOption(m RuneOptionOption, f func(RuneOption) []uint16) Uint16ArrOption {  if m.IsDefined() { return Uint16ArrOpt(f(*m.value)) } else { return NoneUint16ArrOption }  }
/* RuneOptionOption: RuneOption->[]uint32 */ func MapUint32ArrToRuneOptionOption(m RuneOptionOption, f func(RuneOption) []uint32) Uint32ArrOption {  if m.IsDefined() { return Uint32ArrOpt(f(*m.value)) } else { return NoneUint32ArrOption }  }
/* RuneOptionOption: RuneOption->[]uint64 */ func MapUint64ArrToRuneOptionOption(m RuneOptionOption, f func(RuneOption) []uint64) Uint64ArrOption {  if m.IsDefined() { return Uint64ArrOpt(f(*m.value)) } else { return NoneUint64ArrOption }  }
/* RuneOptionOption: RuneOption->[]uintptr */ func MapUintptrArrToRuneOptionOption(m RuneOptionOption, f func(RuneOption) []uintptr) UintptrArrOption {  if m.IsDefined() { return UintptrArrOpt(f(*m.value)) } else { return NoneUintptrArrOption }  }
/* RuneOptionOption: RuneOption->[]byte */ func MapByteArrToRuneOptionOption(m RuneOptionOption, f func(RuneOption) []byte) ByteArrOption {  if m.IsDefined() { return ByteArrOpt(f(*m.value)) } else { return NoneByteArrOption }  }
/* RuneOptionOption: RuneOption->[]rune */ func MapRuneArrToRuneOptionOption(m RuneOptionOption, f func(RuneOption) []rune) RuneArrOption {  if m.IsDefined() { return RuneArrOpt(f(*m.value)) } else { return NoneRuneArrOption }  }
/* RuneOptionOption: RuneOption->[]float32 */ func MapFloat32ArrToRuneOptionOption(m RuneOptionOption, f func(RuneOption) []float32) Float32ArrOption {  if m.IsDefined() { return Float32ArrOpt(f(*m.value)) } else { return NoneFloat32ArrOption }  }
/* RuneOptionOption: RuneOption->[]float64 */ func MapFloat64ArrToRuneOptionOption(m RuneOptionOption, f func(RuneOption) []float64) Float64ArrOption {  if m.IsDefined() { return Float64ArrOpt(f(*m.value)) } else { return NoneFloat64ArrOption }  }
/* RuneOptionOption: RuneOption->[]complex64 */ func MapComplex64ArrToRuneOptionOption(m RuneOptionOption, f func(RuneOption) []complex64) Complex64ArrOption {  if m.IsDefined() { return Complex64ArrOpt(f(*m.value)) } else { return NoneComplex64ArrOption }  }
/* RuneOptionOption: RuneOption->[]complex128 */ func MapComplex128ArrToRuneOptionOption(m RuneOptionOption, f func(RuneOption) []complex128) Complex128ArrOption {  if m.IsDefined() { return Complex128ArrOpt(f(*m.value)) } else { return NoneComplex128ArrOption }  }
/* RuneOptionOption: RuneOption->[]Any */ func MapAnyArrToRuneOptionOption(m RuneOptionOption, f func(RuneOption) []Any) AnyArrOption {  if m.IsDefined() { return AnyArrOpt(f(*m.value)) } else { return NoneAnyArrOption }  }
/* RuneOptionOption: RuneOption->BoolList */ func MapBoolListToRuneOptionOption(m RuneOptionOption, f func(RuneOption) BoolList) BoolListOption {  if m.IsDefined() { return BoolListOpt(f(*m.value)) } else { return NoneBoolListOption }  }
/* RuneOptionOption: RuneOption->StringList */ func MapStringListToRuneOptionOption(m RuneOptionOption, f func(RuneOption) StringList) StringListOption {  if m.IsDefined() { return StringListOpt(f(*m.value)) } else { return NoneStringListOption }  }
/* RuneOptionOption: RuneOption->IntList */ func MapIntListToRuneOptionOption(m RuneOptionOption, f func(RuneOption) IntList) IntListOption {  if m.IsDefined() { return IntListOpt(f(*m.value)) } else { return NoneIntListOption }  }
/* RuneOptionOption: RuneOption->Int8List */ func MapInt8ListToRuneOptionOption(m RuneOptionOption, f func(RuneOption) Int8List) Int8ListOption {  if m.IsDefined() { return Int8ListOpt(f(*m.value)) } else { return NoneInt8ListOption }  }
/* RuneOptionOption: RuneOption->Int16List */ func MapInt16ListToRuneOptionOption(m RuneOptionOption, f func(RuneOption) Int16List) Int16ListOption {  if m.IsDefined() { return Int16ListOpt(f(*m.value)) } else { return NoneInt16ListOption }  }
/* RuneOptionOption: RuneOption->Int32List */ func MapInt32ListToRuneOptionOption(m RuneOptionOption, f func(RuneOption) Int32List) Int32ListOption {  if m.IsDefined() { return Int32ListOpt(f(*m.value)) } else { return NoneInt32ListOption }  }
/* RuneOptionOption: RuneOption->Int64List */ func MapInt64ListToRuneOptionOption(m RuneOptionOption, f func(RuneOption) Int64List) Int64ListOption {  if m.IsDefined() { return Int64ListOpt(f(*m.value)) } else { return NoneInt64ListOption }  }
/* RuneOptionOption: RuneOption->UintList */ func MapUintListToRuneOptionOption(m RuneOptionOption, f func(RuneOption) UintList) UintListOption {  if m.IsDefined() { return UintListOpt(f(*m.value)) } else { return NoneUintListOption }  }
/* RuneOptionOption: RuneOption->Uint8List */ func MapUint8ListToRuneOptionOption(m RuneOptionOption, f func(RuneOption) Uint8List) Uint8ListOption {  if m.IsDefined() { return Uint8ListOpt(f(*m.value)) } else { return NoneUint8ListOption }  }
/* RuneOptionOption: RuneOption->Uint16List */ func MapUint16ListToRuneOptionOption(m RuneOptionOption, f func(RuneOption) Uint16List) Uint16ListOption {  if m.IsDefined() { return Uint16ListOpt(f(*m.value)) } else { return NoneUint16ListOption }  }
/* RuneOptionOption: RuneOption->Uint32List */ func MapUint32ListToRuneOptionOption(m RuneOptionOption, f func(RuneOption) Uint32List) Uint32ListOption {  if m.IsDefined() { return Uint32ListOpt(f(*m.value)) } else { return NoneUint32ListOption }  }
/* RuneOptionOption: RuneOption->Uint64List */ func MapUint64ListToRuneOptionOption(m RuneOptionOption, f func(RuneOption) Uint64List) Uint64ListOption {  if m.IsDefined() { return Uint64ListOpt(f(*m.value)) } else { return NoneUint64ListOption }  }
/* RuneOptionOption: RuneOption->UintptrList */ func MapUintptrListToRuneOptionOption(m RuneOptionOption, f func(RuneOption) UintptrList) UintptrListOption {  if m.IsDefined() { return UintptrListOpt(f(*m.value)) } else { return NoneUintptrListOption }  }
/* RuneOptionOption: RuneOption->ByteList */ func MapByteListToRuneOptionOption(m RuneOptionOption, f func(RuneOption) ByteList) ByteListOption {  if m.IsDefined() { return ByteListOpt(f(*m.value)) } else { return NoneByteListOption }  }
/* RuneOptionOption: RuneOption->RuneList */ func MapRuneListToRuneOptionOption(m RuneOptionOption, f func(RuneOption) RuneList) RuneListOption {  if m.IsDefined() { return RuneListOpt(f(*m.value)) } else { return NoneRuneListOption }  }
/* RuneOptionOption: RuneOption->Float32List */ func MapFloat32ListToRuneOptionOption(m RuneOptionOption, f func(RuneOption) Float32List) Float32ListOption {  if m.IsDefined() { return Float32ListOpt(f(*m.value)) } else { return NoneFloat32ListOption }  }
/* RuneOptionOption: RuneOption->Float64List */ func MapFloat64ListToRuneOptionOption(m RuneOptionOption, f func(RuneOption) Float64List) Float64ListOption {  if m.IsDefined() { return Float64ListOpt(f(*m.value)) } else { return NoneFloat64ListOption }  }
/* RuneOptionOption: RuneOption->Complex64List */ func MapComplex64ListToRuneOptionOption(m RuneOptionOption, f func(RuneOption) Complex64List) Complex64ListOption {  if m.IsDefined() { return Complex64ListOpt(f(*m.value)) } else { return NoneComplex64ListOption }  }
/* RuneOptionOption: RuneOption->Complex128List */ func MapComplex128ListToRuneOptionOption(m RuneOptionOption, f func(RuneOption) Complex128List) Complex128ListOption {  if m.IsDefined() { return Complex128ListOpt(f(*m.value)) } else { return NoneComplex128ListOption }  }
/* RuneOptionOption: RuneOption->AnyList */ func MapAnyListToRuneOptionOption(m RuneOptionOption, f func(RuneOption) AnyList) AnyListOption {  if m.IsDefined() { return AnyListOpt(f(*m.value)) } else { return NoneAnyListOption }  }
/* Float32OptionOption: Float32Option->bool */ func MapBoolToFloat32OptionOption(m Float32OptionOption, f func(Float32Option) bool) BoolOption {  if m.IsDefined() { return Bool(f(*m.value)) } else { return NoneBoolOption }  }
/* Float32OptionOption: Float32Option->string */ func MapStringToFloat32OptionOption(m Float32OptionOption, f func(Float32Option) string) StringOption {  if m.IsDefined() { return String(f(*m.value)) } else { return NoneStringOption }  }
/* Float32OptionOption: Float32Option->int */ func MapIntToFloat32OptionOption(m Float32OptionOption, f func(Float32Option) int) IntOption {  if m.IsDefined() { return Int(f(*m.value)) } else { return NoneIntOption }  }
/* Float32OptionOption: Float32Option->int8 */ func MapInt8ToFloat32OptionOption(m Float32OptionOption, f func(Float32Option) int8) Int8Option {  if m.IsDefined() { return Int8(f(*m.value)) } else { return NoneInt8Option }  }
/* Float32OptionOption: Float32Option->int16 */ func MapInt16ToFloat32OptionOption(m Float32OptionOption, f func(Float32Option) int16) Int16Option {  if m.IsDefined() { return Int16(f(*m.value)) } else { return NoneInt16Option }  }
/* Float32OptionOption: Float32Option->int32 */ func MapInt32ToFloat32OptionOption(m Float32OptionOption, f func(Float32Option) int32) Int32Option {  if m.IsDefined() { return Int32(f(*m.value)) } else { return NoneInt32Option }  }
/* Float32OptionOption: Float32Option->int64 */ func MapInt64ToFloat32OptionOption(m Float32OptionOption, f func(Float32Option) int64) Int64Option {  if m.IsDefined() { return Int64(f(*m.value)) } else { return NoneInt64Option }  }
/* Float32OptionOption: Float32Option->uint */ func MapUintToFloat32OptionOption(m Float32OptionOption, f func(Float32Option) uint) UintOption {  if m.IsDefined() { return Uint(f(*m.value)) } else { return NoneUintOption }  }
/* Float32OptionOption: Float32Option->uint8 */ func MapUint8ToFloat32OptionOption(m Float32OptionOption, f func(Float32Option) uint8) Uint8Option {  if m.IsDefined() { return Uint8(f(*m.value)) } else { return NoneUint8Option }  }
/* Float32OptionOption: Float32Option->uint16 */ func MapUint16ToFloat32OptionOption(m Float32OptionOption, f func(Float32Option) uint16) Uint16Option {  if m.IsDefined() { return Uint16(f(*m.value)) } else { return NoneUint16Option }  }
/* Float32OptionOption: Float32Option->uint32 */ func MapUint32ToFloat32OptionOption(m Float32OptionOption, f func(Float32Option) uint32) Uint32Option {  if m.IsDefined() { return Uint32(f(*m.value)) } else { return NoneUint32Option }  }
/* Float32OptionOption: Float32Option->uint64 */ func MapUint64ToFloat32OptionOption(m Float32OptionOption, f func(Float32Option) uint64) Uint64Option {  if m.IsDefined() { return Uint64(f(*m.value)) } else { return NoneUint64Option }  }
/* Float32OptionOption: Float32Option->uintptr */ func MapUintptrToFloat32OptionOption(m Float32OptionOption, f func(Float32Option) uintptr) UintptrOption {  if m.IsDefined() { return Uintptr(f(*m.value)) } else { return NoneUintptrOption }  }
/* Float32OptionOption: Float32Option->byte */ func MapByteToFloat32OptionOption(m Float32OptionOption, f func(Float32Option) byte) ByteOption {  if m.IsDefined() { return Byte(f(*m.value)) } else { return NoneByteOption }  }
/* Float32OptionOption: Float32Option->rune */ func MapRuneToFloat32OptionOption(m Float32OptionOption, f func(Float32Option) rune) RuneOption {  if m.IsDefined() { return Rune(f(*m.value)) } else { return NoneRuneOption }  }
/* Float32OptionOption: Float32Option->float32 */ func MapFloat32ToFloat32OptionOption(m Float32OptionOption, f func(Float32Option) float32) Float32Option {  if m.IsDefined() { return Float32(f(*m.value)) } else { return NoneFloat32Option }  }
/* Float32OptionOption: Float32Option->float64 */ func MapFloat64ToFloat32OptionOption(m Float32OptionOption, f func(Float32Option) float64) Float64Option {  if m.IsDefined() { return Float64(f(*m.value)) } else { return NoneFloat64Option }  }
/* Float32OptionOption: Float32Option->complex64 */ func MapComplex64ToFloat32OptionOption(m Float32OptionOption, f func(Float32Option) complex64) Complex64Option {  if m.IsDefined() { return Complex64(f(*m.value)) } else { return NoneComplex64Option }  }
/* Float32OptionOption: Float32Option->complex128 */ func MapComplex128ToFloat32OptionOption(m Float32OptionOption, f func(Float32Option) complex128) Complex128Option {  if m.IsDefined() { return Complex128(f(*m.value)) } else { return NoneComplex128Option }  }
/* Float32OptionOption: Float32Option->Any */ func MapAnyToFloat32OptionOption(m Float32OptionOption, f func(Float32Option) Any) AnyOption {  if m.IsDefined() { return AnyOpt(f(*m.value)) } else { return NoneAnyOption }  }
/* Float32OptionOption: Float32Option->BoolOption */ func MapBoolOptionToFloat32OptionOption(m Float32OptionOption, f func(Float32Option) BoolOption) BoolOptionOption {  if m.IsDefined() { return BoolBool(f(*m.value)) } else { return NoneBoolOptionOption }  }
/* Float32OptionOption: Float32Option->StringOption */ func MapStringOptionToFloat32OptionOption(m Float32OptionOption, f func(Float32Option) StringOption) StringOptionOption {  if m.IsDefined() { return StringString(f(*m.value)) } else { return NoneStringOptionOption }  }
/* Float32OptionOption: Float32Option->IntOption */ func MapIntOptionToFloat32OptionOption(m Float32OptionOption, f func(Float32Option) IntOption) IntOptionOption {  if m.IsDefined() { return IntInt(f(*m.value)) } else { return NoneIntOptionOption }  }
/* Float32OptionOption: Float32Option->Int8Option */ func MapInt8OptionToFloat32OptionOption(m Float32OptionOption, f func(Float32Option) Int8Option) Int8OptionOption {  if m.IsDefined() { return Int8Int8(f(*m.value)) } else { return NoneInt8OptionOption }  }
/* Float32OptionOption: Float32Option->Int16Option */ func MapInt16OptionToFloat32OptionOption(m Float32OptionOption, f func(Float32Option) Int16Option) Int16OptionOption {  if m.IsDefined() { return Int16Int16(f(*m.value)) } else { return NoneInt16OptionOption }  }
/* Float32OptionOption: Float32Option->Int32Option */ func MapInt32OptionToFloat32OptionOption(m Float32OptionOption, f func(Float32Option) Int32Option) Int32OptionOption {  if m.IsDefined() { return Int32Int32(f(*m.value)) } else { return NoneInt32OptionOption }  }
/* Float32OptionOption: Float32Option->Int64Option */ func MapInt64OptionToFloat32OptionOption(m Float32OptionOption, f func(Float32Option) Int64Option) Int64OptionOption {  if m.IsDefined() { return Int64Int64(f(*m.value)) } else { return NoneInt64OptionOption }  }
/* Float32OptionOption: Float32Option->UintOption */ func MapUintOptionToFloat32OptionOption(m Float32OptionOption, f func(Float32Option) UintOption) UintOptionOption {  if m.IsDefined() { return UintUint(f(*m.value)) } else { return NoneUintOptionOption }  }
/* Float32OptionOption: Float32Option->Uint8Option */ func MapUint8OptionToFloat32OptionOption(m Float32OptionOption, f func(Float32Option) Uint8Option) Uint8OptionOption {  if m.IsDefined() { return Uint8Uint8(f(*m.value)) } else { return NoneUint8OptionOption }  }
/* Float32OptionOption: Float32Option->Uint16Option */ func MapUint16OptionToFloat32OptionOption(m Float32OptionOption, f func(Float32Option) Uint16Option) Uint16OptionOption {  if m.IsDefined() { return Uint16Uint16(f(*m.value)) } else { return NoneUint16OptionOption }  }
/* Float32OptionOption: Float32Option->Uint32Option */ func MapUint32OptionToFloat32OptionOption(m Float32OptionOption, f func(Float32Option) Uint32Option) Uint32OptionOption {  if m.IsDefined() { return Uint32Uint32(f(*m.value)) } else { return NoneUint32OptionOption }  }
/* Float32OptionOption: Float32Option->Uint64Option */ func MapUint64OptionToFloat32OptionOption(m Float32OptionOption, f func(Float32Option) Uint64Option) Uint64OptionOption {  if m.IsDefined() { return Uint64Uint64(f(*m.value)) } else { return NoneUint64OptionOption }  }
/* Float32OptionOption: Float32Option->UintptrOption */ func MapUintptrOptionToFloat32OptionOption(m Float32OptionOption, f func(Float32Option) UintptrOption) UintptrOptionOption {  if m.IsDefined() { return UintptrUintptr(f(*m.value)) } else { return NoneUintptrOptionOption }  }
/* Float32OptionOption: Float32Option->ByteOption */ func MapByteOptionToFloat32OptionOption(m Float32OptionOption, f func(Float32Option) ByteOption) ByteOptionOption {  if m.IsDefined() { return ByteByte(f(*m.value)) } else { return NoneByteOptionOption }  }
/* Float32OptionOption: Float32Option->RuneOption */ func MapRuneOptionToFloat32OptionOption(m Float32OptionOption, f func(Float32Option) RuneOption) RuneOptionOption {  if m.IsDefined() { return RuneRune(f(*m.value)) } else { return NoneRuneOptionOption }  }
/* Float32OptionOption: Float32Option->Float32Option */ func MapFloat32OptionToFloat32OptionOption(m Float32OptionOption, f func(Float32Option) Float32Option) Float32OptionOption {  if m.IsDefined() { return Float32Float32(f(*m.value)) } else { return NoneFloat32OptionOption }  }
/* Float32OptionOption: Float32Option->Float64Option */ func MapFloat64OptionToFloat32OptionOption(m Float32OptionOption, f func(Float32Option) Float64Option) Float64OptionOption {  if m.IsDefined() { return Float64Float64(f(*m.value)) } else { return NoneFloat64OptionOption }  }
/* Float32OptionOption: Float32Option->Complex64Option */ func MapComplex64OptionToFloat32OptionOption(m Float32OptionOption, f func(Float32Option) Complex64Option) Complex64OptionOption {  if m.IsDefined() { return Complex64Complex64(f(*m.value)) } else { return NoneComplex64OptionOption }  }
/* Float32OptionOption: Float32Option->Complex128Option */ func MapComplex128OptionToFloat32OptionOption(m Float32OptionOption, f func(Float32Option) Complex128Option) Complex128OptionOption {  if m.IsDefined() { return Complex128Complex128(f(*m.value)) } else { return NoneComplex128OptionOption }  }
/* Float32OptionOption: Float32Option->AnyOption */ func MapAnyOptionToFloat32OptionOption(m Float32OptionOption, f func(Float32Option) AnyOption) AnyOptionOption {  if m.IsDefined() { return AnyOptAny(f(*m.value)) } else { return NoneAnyOptionOption }  }
/* Float32OptionOption: Float32Option->[]bool */ func MapBoolArrToFloat32OptionOption(m Float32OptionOption, f func(Float32Option) []bool) BoolArrOption {  if m.IsDefined() { return BoolArrOpt(f(*m.value)) } else { return NoneBoolArrOption }  }
/* Float32OptionOption: Float32Option->[]string */ func MapStringArrToFloat32OptionOption(m Float32OptionOption, f func(Float32Option) []string) StringArrOption {  if m.IsDefined() { return StringArrOpt(f(*m.value)) } else { return NoneStringArrOption }  }
/* Float32OptionOption: Float32Option->[]int */ func MapIntArrToFloat32OptionOption(m Float32OptionOption, f func(Float32Option) []int) IntArrOption {  if m.IsDefined() { return IntArrOpt(f(*m.value)) } else { return NoneIntArrOption }  }
/* Float32OptionOption: Float32Option->[]int8 */ func MapInt8ArrToFloat32OptionOption(m Float32OptionOption, f func(Float32Option) []int8) Int8ArrOption {  if m.IsDefined() { return Int8ArrOpt(f(*m.value)) } else { return NoneInt8ArrOption }  }
/* Float32OptionOption: Float32Option->[]int16 */ func MapInt16ArrToFloat32OptionOption(m Float32OptionOption, f func(Float32Option) []int16) Int16ArrOption {  if m.IsDefined() { return Int16ArrOpt(f(*m.value)) } else { return NoneInt16ArrOption }  }
/* Float32OptionOption: Float32Option->[]int32 */ func MapInt32ArrToFloat32OptionOption(m Float32OptionOption, f func(Float32Option) []int32) Int32ArrOption {  if m.IsDefined() { return Int32ArrOpt(f(*m.value)) } else { return NoneInt32ArrOption }  }
/* Float32OptionOption: Float32Option->[]int64 */ func MapInt64ArrToFloat32OptionOption(m Float32OptionOption, f func(Float32Option) []int64) Int64ArrOption {  if m.IsDefined() { return Int64ArrOpt(f(*m.value)) } else { return NoneInt64ArrOption }  }
/* Float32OptionOption: Float32Option->[]uint */ func MapUintArrToFloat32OptionOption(m Float32OptionOption, f func(Float32Option) []uint) UintArrOption {  if m.IsDefined() { return UintArrOpt(f(*m.value)) } else { return NoneUintArrOption }  }
/* Float32OptionOption: Float32Option->[]uint8 */ func MapUint8ArrToFloat32OptionOption(m Float32OptionOption, f func(Float32Option) []uint8) Uint8ArrOption {  if m.IsDefined() { return Uint8ArrOpt(f(*m.value)) } else { return NoneUint8ArrOption }  }
/* Float32OptionOption: Float32Option->[]uint16 */ func MapUint16ArrToFloat32OptionOption(m Float32OptionOption, f func(Float32Option) []uint16) Uint16ArrOption {  if m.IsDefined() { return Uint16ArrOpt(f(*m.value)) } else { return NoneUint16ArrOption }  }
/* Float32OptionOption: Float32Option->[]uint32 */ func MapUint32ArrToFloat32OptionOption(m Float32OptionOption, f func(Float32Option) []uint32) Uint32ArrOption {  if m.IsDefined() { return Uint32ArrOpt(f(*m.value)) } else { return NoneUint32ArrOption }  }
/* Float32OptionOption: Float32Option->[]uint64 */ func MapUint64ArrToFloat32OptionOption(m Float32OptionOption, f func(Float32Option) []uint64) Uint64ArrOption {  if m.IsDefined() { return Uint64ArrOpt(f(*m.value)) } else { return NoneUint64ArrOption }  }
/* Float32OptionOption: Float32Option->[]uintptr */ func MapUintptrArrToFloat32OptionOption(m Float32OptionOption, f func(Float32Option) []uintptr) UintptrArrOption {  if m.IsDefined() { return UintptrArrOpt(f(*m.value)) } else { return NoneUintptrArrOption }  }
/* Float32OptionOption: Float32Option->[]byte */ func MapByteArrToFloat32OptionOption(m Float32OptionOption, f func(Float32Option) []byte) ByteArrOption {  if m.IsDefined() { return ByteArrOpt(f(*m.value)) } else { return NoneByteArrOption }  }
/* Float32OptionOption: Float32Option->[]rune */ func MapRuneArrToFloat32OptionOption(m Float32OptionOption, f func(Float32Option) []rune) RuneArrOption {  if m.IsDefined() { return RuneArrOpt(f(*m.value)) } else { return NoneRuneArrOption }  }
/* Float32OptionOption: Float32Option->[]float32 */ func MapFloat32ArrToFloat32OptionOption(m Float32OptionOption, f func(Float32Option) []float32) Float32ArrOption {  if m.IsDefined() { return Float32ArrOpt(f(*m.value)) } else { return NoneFloat32ArrOption }  }
/* Float32OptionOption: Float32Option->[]float64 */ func MapFloat64ArrToFloat32OptionOption(m Float32OptionOption, f func(Float32Option) []float64) Float64ArrOption {  if m.IsDefined() { return Float64ArrOpt(f(*m.value)) } else { return NoneFloat64ArrOption }  }
/* Float32OptionOption: Float32Option->[]complex64 */ func MapComplex64ArrToFloat32OptionOption(m Float32OptionOption, f func(Float32Option) []complex64) Complex64ArrOption {  if m.IsDefined() { return Complex64ArrOpt(f(*m.value)) } else { return NoneComplex64ArrOption }  }
/* Float32OptionOption: Float32Option->[]complex128 */ func MapComplex128ArrToFloat32OptionOption(m Float32OptionOption, f func(Float32Option) []complex128) Complex128ArrOption {  if m.IsDefined() { return Complex128ArrOpt(f(*m.value)) } else { return NoneComplex128ArrOption }  }
/* Float32OptionOption: Float32Option->[]Any */ func MapAnyArrToFloat32OptionOption(m Float32OptionOption, f func(Float32Option) []Any) AnyArrOption {  if m.IsDefined() { return AnyArrOpt(f(*m.value)) } else { return NoneAnyArrOption }  }
/* Float32OptionOption: Float32Option->BoolList */ func MapBoolListToFloat32OptionOption(m Float32OptionOption, f func(Float32Option) BoolList) BoolListOption {  if m.IsDefined() { return BoolListOpt(f(*m.value)) } else { return NoneBoolListOption }  }
/* Float32OptionOption: Float32Option->StringList */ func MapStringListToFloat32OptionOption(m Float32OptionOption, f func(Float32Option) StringList) StringListOption {  if m.IsDefined() { return StringListOpt(f(*m.value)) } else { return NoneStringListOption }  }
/* Float32OptionOption: Float32Option->IntList */ func MapIntListToFloat32OptionOption(m Float32OptionOption, f func(Float32Option) IntList) IntListOption {  if m.IsDefined() { return IntListOpt(f(*m.value)) } else { return NoneIntListOption }  }
/* Float32OptionOption: Float32Option->Int8List */ func MapInt8ListToFloat32OptionOption(m Float32OptionOption, f func(Float32Option) Int8List) Int8ListOption {  if m.IsDefined() { return Int8ListOpt(f(*m.value)) } else { return NoneInt8ListOption }  }
/* Float32OptionOption: Float32Option->Int16List */ func MapInt16ListToFloat32OptionOption(m Float32OptionOption, f func(Float32Option) Int16List) Int16ListOption {  if m.IsDefined() { return Int16ListOpt(f(*m.value)) } else { return NoneInt16ListOption }  }
/* Float32OptionOption: Float32Option->Int32List */ func MapInt32ListToFloat32OptionOption(m Float32OptionOption, f func(Float32Option) Int32List) Int32ListOption {  if m.IsDefined() { return Int32ListOpt(f(*m.value)) } else { return NoneInt32ListOption }  }
/* Float32OptionOption: Float32Option->Int64List */ func MapInt64ListToFloat32OptionOption(m Float32OptionOption, f func(Float32Option) Int64List) Int64ListOption {  if m.IsDefined() { return Int64ListOpt(f(*m.value)) } else { return NoneInt64ListOption }  }
/* Float32OptionOption: Float32Option->UintList */ func MapUintListToFloat32OptionOption(m Float32OptionOption, f func(Float32Option) UintList) UintListOption {  if m.IsDefined() { return UintListOpt(f(*m.value)) } else { return NoneUintListOption }  }
/* Float32OptionOption: Float32Option->Uint8List */ func MapUint8ListToFloat32OptionOption(m Float32OptionOption, f func(Float32Option) Uint8List) Uint8ListOption {  if m.IsDefined() { return Uint8ListOpt(f(*m.value)) } else { return NoneUint8ListOption }  }
/* Float32OptionOption: Float32Option->Uint16List */ func MapUint16ListToFloat32OptionOption(m Float32OptionOption, f func(Float32Option) Uint16List) Uint16ListOption {  if m.IsDefined() { return Uint16ListOpt(f(*m.value)) } else { return NoneUint16ListOption }  }
/* Float32OptionOption: Float32Option->Uint32List */ func MapUint32ListToFloat32OptionOption(m Float32OptionOption, f func(Float32Option) Uint32List) Uint32ListOption {  if m.IsDefined() { return Uint32ListOpt(f(*m.value)) } else { return NoneUint32ListOption }  }
/* Float32OptionOption: Float32Option->Uint64List */ func MapUint64ListToFloat32OptionOption(m Float32OptionOption, f func(Float32Option) Uint64List) Uint64ListOption {  if m.IsDefined() { return Uint64ListOpt(f(*m.value)) } else { return NoneUint64ListOption }  }
/* Float32OptionOption: Float32Option->UintptrList */ func MapUintptrListToFloat32OptionOption(m Float32OptionOption, f func(Float32Option) UintptrList) UintptrListOption {  if m.IsDefined() { return UintptrListOpt(f(*m.value)) } else { return NoneUintptrListOption }  }
/* Float32OptionOption: Float32Option->ByteList */ func MapByteListToFloat32OptionOption(m Float32OptionOption, f func(Float32Option) ByteList) ByteListOption {  if m.IsDefined() { return ByteListOpt(f(*m.value)) } else { return NoneByteListOption }  }
/* Float32OptionOption: Float32Option->RuneList */ func MapRuneListToFloat32OptionOption(m Float32OptionOption, f func(Float32Option) RuneList) RuneListOption {  if m.IsDefined() { return RuneListOpt(f(*m.value)) } else { return NoneRuneListOption }  }
/* Float32OptionOption: Float32Option->Float32List */ func MapFloat32ListToFloat32OptionOption(m Float32OptionOption, f func(Float32Option) Float32List) Float32ListOption {  if m.IsDefined() { return Float32ListOpt(f(*m.value)) } else { return NoneFloat32ListOption }  }
/* Float32OptionOption: Float32Option->Float64List */ func MapFloat64ListToFloat32OptionOption(m Float32OptionOption, f func(Float32Option) Float64List) Float64ListOption {  if m.IsDefined() { return Float64ListOpt(f(*m.value)) } else { return NoneFloat64ListOption }  }
/* Float32OptionOption: Float32Option->Complex64List */ func MapComplex64ListToFloat32OptionOption(m Float32OptionOption, f func(Float32Option) Complex64List) Complex64ListOption {  if m.IsDefined() { return Complex64ListOpt(f(*m.value)) } else { return NoneComplex64ListOption }  }
/* Float32OptionOption: Float32Option->Complex128List */ func MapComplex128ListToFloat32OptionOption(m Float32OptionOption, f func(Float32Option) Complex128List) Complex128ListOption {  if m.IsDefined() { return Complex128ListOpt(f(*m.value)) } else { return NoneComplex128ListOption }  }
/* Float32OptionOption: Float32Option->AnyList */ func MapAnyListToFloat32OptionOption(m Float32OptionOption, f func(Float32Option) AnyList) AnyListOption {  if m.IsDefined() { return AnyListOpt(f(*m.value)) } else { return NoneAnyListOption }  }
/* Float64OptionOption: Float64Option->bool */ func MapBoolToFloat64OptionOption(m Float64OptionOption, f func(Float64Option) bool) BoolOption {  if m.IsDefined() { return Bool(f(*m.value)) } else { return NoneBoolOption }  }
/* Float64OptionOption: Float64Option->string */ func MapStringToFloat64OptionOption(m Float64OptionOption, f func(Float64Option) string) StringOption {  if m.IsDefined() { return String(f(*m.value)) } else { return NoneStringOption }  }
/* Float64OptionOption: Float64Option->int */ func MapIntToFloat64OptionOption(m Float64OptionOption, f func(Float64Option) int) IntOption {  if m.IsDefined() { return Int(f(*m.value)) } else { return NoneIntOption }  }
/* Float64OptionOption: Float64Option->int8 */ func MapInt8ToFloat64OptionOption(m Float64OptionOption, f func(Float64Option) int8) Int8Option {  if m.IsDefined() { return Int8(f(*m.value)) } else { return NoneInt8Option }  }
/* Float64OptionOption: Float64Option->int16 */ func MapInt16ToFloat64OptionOption(m Float64OptionOption, f func(Float64Option) int16) Int16Option {  if m.IsDefined() { return Int16(f(*m.value)) } else { return NoneInt16Option }  }
/* Float64OptionOption: Float64Option->int32 */ func MapInt32ToFloat64OptionOption(m Float64OptionOption, f func(Float64Option) int32) Int32Option {  if m.IsDefined() { return Int32(f(*m.value)) } else { return NoneInt32Option }  }
/* Float64OptionOption: Float64Option->int64 */ func MapInt64ToFloat64OptionOption(m Float64OptionOption, f func(Float64Option) int64) Int64Option {  if m.IsDefined() { return Int64(f(*m.value)) } else { return NoneInt64Option }  }
/* Float64OptionOption: Float64Option->uint */ func MapUintToFloat64OptionOption(m Float64OptionOption, f func(Float64Option) uint) UintOption {  if m.IsDefined() { return Uint(f(*m.value)) } else { return NoneUintOption }  }
/* Float64OptionOption: Float64Option->uint8 */ func MapUint8ToFloat64OptionOption(m Float64OptionOption, f func(Float64Option) uint8) Uint8Option {  if m.IsDefined() { return Uint8(f(*m.value)) } else { return NoneUint8Option }  }
/* Float64OptionOption: Float64Option->uint16 */ func MapUint16ToFloat64OptionOption(m Float64OptionOption, f func(Float64Option) uint16) Uint16Option {  if m.IsDefined() { return Uint16(f(*m.value)) } else { return NoneUint16Option }  }
/* Float64OptionOption: Float64Option->uint32 */ func MapUint32ToFloat64OptionOption(m Float64OptionOption, f func(Float64Option) uint32) Uint32Option {  if m.IsDefined() { return Uint32(f(*m.value)) } else { return NoneUint32Option }  }
/* Float64OptionOption: Float64Option->uint64 */ func MapUint64ToFloat64OptionOption(m Float64OptionOption, f func(Float64Option) uint64) Uint64Option {  if m.IsDefined() { return Uint64(f(*m.value)) } else { return NoneUint64Option }  }
/* Float64OptionOption: Float64Option->uintptr */ func MapUintptrToFloat64OptionOption(m Float64OptionOption, f func(Float64Option) uintptr) UintptrOption {  if m.IsDefined() { return Uintptr(f(*m.value)) } else { return NoneUintptrOption }  }
/* Float64OptionOption: Float64Option->byte */ func MapByteToFloat64OptionOption(m Float64OptionOption, f func(Float64Option) byte) ByteOption {  if m.IsDefined() { return Byte(f(*m.value)) } else { return NoneByteOption }  }
/* Float64OptionOption: Float64Option->rune */ func MapRuneToFloat64OptionOption(m Float64OptionOption, f func(Float64Option) rune) RuneOption {  if m.IsDefined() { return Rune(f(*m.value)) } else { return NoneRuneOption }  }
/* Float64OptionOption: Float64Option->float32 */ func MapFloat32ToFloat64OptionOption(m Float64OptionOption, f func(Float64Option) float32) Float32Option {  if m.IsDefined() { return Float32(f(*m.value)) } else { return NoneFloat32Option }  }
/* Float64OptionOption: Float64Option->float64 */ func MapFloat64ToFloat64OptionOption(m Float64OptionOption, f func(Float64Option) float64) Float64Option {  if m.IsDefined() { return Float64(f(*m.value)) } else { return NoneFloat64Option }  }
/* Float64OptionOption: Float64Option->complex64 */ func MapComplex64ToFloat64OptionOption(m Float64OptionOption, f func(Float64Option) complex64) Complex64Option {  if m.IsDefined() { return Complex64(f(*m.value)) } else { return NoneComplex64Option }  }
/* Float64OptionOption: Float64Option->complex128 */ func MapComplex128ToFloat64OptionOption(m Float64OptionOption, f func(Float64Option) complex128) Complex128Option {  if m.IsDefined() { return Complex128(f(*m.value)) } else { return NoneComplex128Option }  }
/* Float64OptionOption: Float64Option->Any */ func MapAnyToFloat64OptionOption(m Float64OptionOption, f func(Float64Option) Any) AnyOption {  if m.IsDefined() { return AnyOpt(f(*m.value)) } else { return NoneAnyOption }  }
/* Float64OptionOption: Float64Option->BoolOption */ func MapBoolOptionToFloat64OptionOption(m Float64OptionOption, f func(Float64Option) BoolOption) BoolOptionOption {  if m.IsDefined() { return BoolBool(f(*m.value)) } else { return NoneBoolOptionOption }  }
/* Float64OptionOption: Float64Option->StringOption */ func MapStringOptionToFloat64OptionOption(m Float64OptionOption, f func(Float64Option) StringOption) StringOptionOption {  if m.IsDefined() { return StringString(f(*m.value)) } else { return NoneStringOptionOption }  }
/* Float64OptionOption: Float64Option->IntOption */ func MapIntOptionToFloat64OptionOption(m Float64OptionOption, f func(Float64Option) IntOption) IntOptionOption {  if m.IsDefined() { return IntInt(f(*m.value)) } else { return NoneIntOptionOption }  }
/* Float64OptionOption: Float64Option->Int8Option */ func MapInt8OptionToFloat64OptionOption(m Float64OptionOption, f func(Float64Option) Int8Option) Int8OptionOption {  if m.IsDefined() { return Int8Int8(f(*m.value)) } else { return NoneInt8OptionOption }  }
/* Float64OptionOption: Float64Option->Int16Option */ func MapInt16OptionToFloat64OptionOption(m Float64OptionOption, f func(Float64Option) Int16Option) Int16OptionOption {  if m.IsDefined() { return Int16Int16(f(*m.value)) } else { return NoneInt16OptionOption }  }
/* Float64OptionOption: Float64Option->Int32Option */ func MapInt32OptionToFloat64OptionOption(m Float64OptionOption, f func(Float64Option) Int32Option) Int32OptionOption {  if m.IsDefined() { return Int32Int32(f(*m.value)) } else { return NoneInt32OptionOption }  }
/* Float64OptionOption: Float64Option->Int64Option */ func MapInt64OptionToFloat64OptionOption(m Float64OptionOption, f func(Float64Option) Int64Option) Int64OptionOption {  if m.IsDefined() { return Int64Int64(f(*m.value)) } else { return NoneInt64OptionOption }  }
/* Float64OptionOption: Float64Option->UintOption */ func MapUintOptionToFloat64OptionOption(m Float64OptionOption, f func(Float64Option) UintOption) UintOptionOption {  if m.IsDefined() { return UintUint(f(*m.value)) } else { return NoneUintOptionOption }  }
/* Float64OptionOption: Float64Option->Uint8Option */ func MapUint8OptionToFloat64OptionOption(m Float64OptionOption, f func(Float64Option) Uint8Option) Uint8OptionOption {  if m.IsDefined() { return Uint8Uint8(f(*m.value)) } else { return NoneUint8OptionOption }  }
/* Float64OptionOption: Float64Option->Uint16Option */ func MapUint16OptionToFloat64OptionOption(m Float64OptionOption, f func(Float64Option) Uint16Option) Uint16OptionOption {  if m.IsDefined() { return Uint16Uint16(f(*m.value)) } else { return NoneUint16OptionOption }  }
/* Float64OptionOption: Float64Option->Uint32Option */ func MapUint32OptionToFloat64OptionOption(m Float64OptionOption, f func(Float64Option) Uint32Option) Uint32OptionOption {  if m.IsDefined() { return Uint32Uint32(f(*m.value)) } else { return NoneUint32OptionOption }  }
/* Float64OptionOption: Float64Option->Uint64Option */ func MapUint64OptionToFloat64OptionOption(m Float64OptionOption, f func(Float64Option) Uint64Option) Uint64OptionOption {  if m.IsDefined() { return Uint64Uint64(f(*m.value)) } else { return NoneUint64OptionOption }  }
/* Float64OptionOption: Float64Option->UintptrOption */ func MapUintptrOptionToFloat64OptionOption(m Float64OptionOption, f func(Float64Option) UintptrOption) UintptrOptionOption {  if m.IsDefined() { return UintptrUintptr(f(*m.value)) } else { return NoneUintptrOptionOption }  }
/* Float64OptionOption: Float64Option->ByteOption */ func MapByteOptionToFloat64OptionOption(m Float64OptionOption, f func(Float64Option) ByteOption) ByteOptionOption {  if m.IsDefined() { return ByteByte(f(*m.value)) } else { return NoneByteOptionOption }  }
/* Float64OptionOption: Float64Option->RuneOption */ func MapRuneOptionToFloat64OptionOption(m Float64OptionOption, f func(Float64Option) RuneOption) RuneOptionOption {  if m.IsDefined() { return RuneRune(f(*m.value)) } else { return NoneRuneOptionOption }  }
/* Float64OptionOption: Float64Option->Float32Option */ func MapFloat32OptionToFloat64OptionOption(m Float64OptionOption, f func(Float64Option) Float32Option) Float32OptionOption {  if m.IsDefined() { return Float32Float32(f(*m.value)) } else { return NoneFloat32OptionOption }  }
/* Float64OptionOption: Float64Option->Float64Option */ func MapFloat64OptionToFloat64OptionOption(m Float64OptionOption, f func(Float64Option) Float64Option) Float64OptionOption {  if m.IsDefined() { return Float64Float64(f(*m.value)) } else { return NoneFloat64OptionOption }  }
/* Float64OptionOption: Float64Option->Complex64Option */ func MapComplex64OptionToFloat64OptionOption(m Float64OptionOption, f func(Float64Option) Complex64Option) Complex64OptionOption {  if m.IsDefined() { return Complex64Complex64(f(*m.value)) } else { return NoneComplex64OptionOption }  }
/* Float64OptionOption: Float64Option->Complex128Option */ func MapComplex128OptionToFloat64OptionOption(m Float64OptionOption, f func(Float64Option) Complex128Option) Complex128OptionOption {  if m.IsDefined() { return Complex128Complex128(f(*m.value)) } else { return NoneComplex128OptionOption }  }
/* Float64OptionOption: Float64Option->AnyOption */ func MapAnyOptionToFloat64OptionOption(m Float64OptionOption, f func(Float64Option) AnyOption) AnyOptionOption {  if m.IsDefined() { return AnyOptAny(f(*m.value)) } else { return NoneAnyOptionOption }  }
/* Float64OptionOption: Float64Option->[]bool */ func MapBoolArrToFloat64OptionOption(m Float64OptionOption, f func(Float64Option) []bool) BoolArrOption {  if m.IsDefined() { return BoolArrOpt(f(*m.value)) } else { return NoneBoolArrOption }  }
/* Float64OptionOption: Float64Option->[]string */ func MapStringArrToFloat64OptionOption(m Float64OptionOption, f func(Float64Option) []string) StringArrOption {  if m.IsDefined() { return StringArrOpt(f(*m.value)) } else { return NoneStringArrOption }  }
/* Float64OptionOption: Float64Option->[]int */ func MapIntArrToFloat64OptionOption(m Float64OptionOption, f func(Float64Option) []int) IntArrOption {  if m.IsDefined() { return IntArrOpt(f(*m.value)) } else { return NoneIntArrOption }  }
/* Float64OptionOption: Float64Option->[]int8 */ func MapInt8ArrToFloat64OptionOption(m Float64OptionOption, f func(Float64Option) []int8) Int8ArrOption {  if m.IsDefined() { return Int8ArrOpt(f(*m.value)) } else { return NoneInt8ArrOption }  }
/* Float64OptionOption: Float64Option->[]int16 */ func MapInt16ArrToFloat64OptionOption(m Float64OptionOption, f func(Float64Option) []int16) Int16ArrOption {  if m.IsDefined() { return Int16ArrOpt(f(*m.value)) } else { return NoneInt16ArrOption }  }
/* Float64OptionOption: Float64Option->[]int32 */ func MapInt32ArrToFloat64OptionOption(m Float64OptionOption, f func(Float64Option) []int32) Int32ArrOption {  if m.IsDefined() { return Int32ArrOpt(f(*m.value)) } else { return NoneInt32ArrOption }  }
/* Float64OptionOption: Float64Option->[]int64 */ func MapInt64ArrToFloat64OptionOption(m Float64OptionOption, f func(Float64Option) []int64) Int64ArrOption {  if m.IsDefined() { return Int64ArrOpt(f(*m.value)) } else { return NoneInt64ArrOption }  }
/* Float64OptionOption: Float64Option->[]uint */ func MapUintArrToFloat64OptionOption(m Float64OptionOption, f func(Float64Option) []uint) UintArrOption {  if m.IsDefined() { return UintArrOpt(f(*m.value)) } else { return NoneUintArrOption }  }
/* Float64OptionOption: Float64Option->[]uint8 */ func MapUint8ArrToFloat64OptionOption(m Float64OptionOption, f func(Float64Option) []uint8) Uint8ArrOption {  if m.IsDefined() { return Uint8ArrOpt(f(*m.value)) } else { return NoneUint8ArrOption }  }
/* Float64OptionOption: Float64Option->[]uint16 */ func MapUint16ArrToFloat64OptionOption(m Float64OptionOption, f func(Float64Option) []uint16) Uint16ArrOption {  if m.IsDefined() { return Uint16ArrOpt(f(*m.value)) } else { return NoneUint16ArrOption }  }
/* Float64OptionOption: Float64Option->[]uint32 */ func MapUint32ArrToFloat64OptionOption(m Float64OptionOption, f func(Float64Option) []uint32) Uint32ArrOption {  if m.IsDefined() { return Uint32ArrOpt(f(*m.value)) } else { return NoneUint32ArrOption }  }
/* Float64OptionOption: Float64Option->[]uint64 */ func MapUint64ArrToFloat64OptionOption(m Float64OptionOption, f func(Float64Option) []uint64) Uint64ArrOption {  if m.IsDefined() { return Uint64ArrOpt(f(*m.value)) } else { return NoneUint64ArrOption }  }
/* Float64OptionOption: Float64Option->[]uintptr */ func MapUintptrArrToFloat64OptionOption(m Float64OptionOption, f func(Float64Option) []uintptr) UintptrArrOption {  if m.IsDefined() { return UintptrArrOpt(f(*m.value)) } else { return NoneUintptrArrOption }  }
/* Float64OptionOption: Float64Option->[]byte */ func MapByteArrToFloat64OptionOption(m Float64OptionOption, f func(Float64Option) []byte) ByteArrOption {  if m.IsDefined() { return ByteArrOpt(f(*m.value)) } else { return NoneByteArrOption }  }
/* Float64OptionOption: Float64Option->[]rune */ func MapRuneArrToFloat64OptionOption(m Float64OptionOption, f func(Float64Option) []rune) RuneArrOption {  if m.IsDefined() { return RuneArrOpt(f(*m.value)) } else { return NoneRuneArrOption }  }
/* Float64OptionOption: Float64Option->[]float32 */ func MapFloat32ArrToFloat64OptionOption(m Float64OptionOption, f func(Float64Option) []float32) Float32ArrOption {  if m.IsDefined() { return Float32ArrOpt(f(*m.value)) } else { return NoneFloat32ArrOption }  }
/* Float64OptionOption: Float64Option->[]float64 */ func MapFloat64ArrToFloat64OptionOption(m Float64OptionOption, f func(Float64Option) []float64) Float64ArrOption {  if m.IsDefined() { return Float64ArrOpt(f(*m.value)) } else { return NoneFloat64ArrOption }  }
/* Float64OptionOption: Float64Option->[]complex64 */ func MapComplex64ArrToFloat64OptionOption(m Float64OptionOption, f func(Float64Option) []complex64) Complex64ArrOption {  if m.IsDefined() { return Complex64ArrOpt(f(*m.value)) } else { return NoneComplex64ArrOption }  }
/* Float64OptionOption: Float64Option->[]complex128 */ func MapComplex128ArrToFloat64OptionOption(m Float64OptionOption, f func(Float64Option) []complex128) Complex128ArrOption {  if m.IsDefined() { return Complex128ArrOpt(f(*m.value)) } else { return NoneComplex128ArrOption }  }
/* Float64OptionOption: Float64Option->[]Any */ func MapAnyArrToFloat64OptionOption(m Float64OptionOption, f func(Float64Option) []Any) AnyArrOption {  if m.IsDefined() { return AnyArrOpt(f(*m.value)) } else { return NoneAnyArrOption }  }
/* Float64OptionOption: Float64Option->BoolList */ func MapBoolListToFloat64OptionOption(m Float64OptionOption, f func(Float64Option) BoolList) BoolListOption {  if m.IsDefined() { return BoolListOpt(f(*m.value)) } else { return NoneBoolListOption }  }
/* Float64OptionOption: Float64Option->StringList */ func MapStringListToFloat64OptionOption(m Float64OptionOption, f func(Float64Option) StringList) StringListOption {  if m.IsDefined() { return StringListOpt(f(*m.value)) } else { return NoneStringListOption }  }
/* Float64OptionOption: Float64Option->IntList */ func MapIntListToFloat64OptionOption(m Float64OptionOption, f func(Float64Option) IntList) IntListOption {  if m.IsDefined() { return IntListOpt(f(*m.value)) } else { return NoneIntListOption }  }
/* Float64OptionOption: Float64Option->Int8List */ func MapInt8ListToFloat64OptionOption(m Float64OptionOption, f func(Float64Option) Int8List) Int8ListOption {  if m.IsDefined() { return Int8ListOpt(f(*m.value)) } else { return NoneInt8ListOption }  }
/* Float64OptionOption: Float64Option->Int16List */ func MapInt16ListToFloat64OptionOption(m Float64OptionOption, f func(Float64Option) Int16List) Int16ListOption {  if m.IsDefined() { return Int16ListOpt(f(*m.value)) } else { return NoneInt16ListOption }  }
/* Float64OptionOption: Float64Option->Int32List */ func MapInt32ListToFloat64OptionOption(m Float64OptionOption, f func(Float64Option) Int32List) Int32ListOption {  if m.IsDefined() { return Int32ListOpt(f(*m.value)) } else { return NoneInt32ListOption }  }
/* Float64OptionOption: Float64Option->Int64List */ func MapInt64ListToFloat64OptionOption(m Float64OptionOption, f func(Float64Option) Int64List) Int64ListOption {  if m.IsDefined() { return Int64ListOpt(f(*m.value)) } else { return NoneInt64ListOption }  }
/* Float64OptionOption: Float64Option->UintList */ func MapUintListToFloat64OptionOption(m Float64OptionOption, f func(Float64Option) UintList) UintListOption {  if m.IsDefined() { return UintListOpt(f(*m.value)) } else { return NoneUintListOption }  }
/* Float64OptionOption: Float64Option->Uint8List */ func MapUint8ListToFloat64OptionOption(m Float64OptionOption, f func(Float64Option) Uint8List) Uint8ListOption {  if m.IsDefined() { return Uint8ListOpt(f(*m.value)) } else { return NoneUint8ListOption }  }
/* Float64OptionOption: Float64Option->Uint16List */ func MapUint16ListToFloat64OptionOption(m Float64OptionOption, f func(Float64Option) Uint16List) Uint16ListOption {  if m.IsDefined() { return Uint16ListOpt(f(*m.value)) } else { return NoneUint16ListOption }  }
/* Float64OptionOption: Float64Option->Uint32List */ func MapUint32ListToFloat64OptionOption(m Float64OptionOption, f func(Float64Option) Uint32List) Uint32ListOption {  if m.IsDefined() { return Uint32ListOpt(f(*m.value)) } else { return NoneUint32ListOption }  }
/* Float64OptionOption: Float64Option->Uint64List */ func MapUint64ListToFloat64OptionOption(m Float64OptionOption, f func(Float64Option) Uint64List) Uint64ListOption {  if m.IsDefined() { return Uint64ListOpt(f(*m.value)) } else { return NoneUint64ListOption }  }
/* Float64OptionOption: Float64Option->UintptrList */ func MapUintptrListToFloat64OptionOption(m Float64OptionOption, f func(Float64Option) UintptrList) UintptrListOption {  if m.IsDefined() { return UintptrListOpt(f(*m.value)) } else { return NoneUintptrListOption }  }
/* Float64OptionOption: Float64Option->ByteList */ func MapByteListToFloat64OptionOption(m Float64OptionOption, f func(Float64Option) ByteList) ByteListOption {  if m.IsDefined() { return ByteListOpt(f(*m.value)) } else { return NoneByteListOption }  }
/* Float64OptionOption: Float64Option->RuneList */ func MapRuneListToFloat64OptionOption(m Float64OptionOption, f func(Float64Option) RuneList) RuneListOption {  if m.IsDefined() { return RuneListOpt(f(*m.value)) } else { return NoneRuneListOption }  }
/* Float64OptionOption: Float64Option->Float32List */ func MapFloat32ListToFloat64OptionOption(m Float64OptionOption, f func(Float64Option) Float32List) Float32ListOption {  if m.IsDefined() { return Float32ListOpt(f(*m.value)) } else { return NoneFloat32ListOption }  }
/* Float64OptionOption: Float64Option->Float64List */ func MapFloat64ListToFloat64OptionOption(m Float64OptionOption, f func(Float64Option) Float64List) Float64ListOption {  if m.IsDefined() { return Float64ListOpt(f(*m.value)) } else { return NoneFloat64ListOption }  }
/* Float64OptionOption: Float64Option->Complex64List */ func MapComplex64ListToFloat64OptionOption(m Float64OptionOption, f func(Float64Option) Complex64List) Complex64ListOption {  if m.IsDefined() { return Complex64ListOpt(f(*m.value)) } else { return NoneComplex64ListOption }  }
/* Float64OptionOption: Float64Option->Complex128List */ func MapComplex128ListToFloat64OptionOption(m Float64OptionOption, f func(Float64Option) Complex128List) Complex128ListOption {  if m.IsDefined() { return Complex128ListOpt(f(*m.value)) } else { return NoneComplex128ListOption }  }
/* Float64OptionOption: Float64Option->AnyList */ func MapAnyListToFloat64OptionOption(m Float64OptionOption, f func(Float64Option) AnyList) AnyListOption {  if m.IsDefined() { return AnyListOpt(f(*m.value)) } else { return NoneAnyListOption }  }
/* Complex64OptionOption: Complex64Option->bool */ func MapBoolToComplex64OptionOption(m Complex64OptionOption, f func(Complex64Option) bool) BoolOption {  if m.IsDefined() { return Bool(f(*m.value)) } else { return NoneBoolOption }  }
/* Complex64OptionOption: Complex64Option->string */ func MapStringToComplex64OptionOption(m Complex64OptionOption, f func(Complex64Option) string) StringOption {  if m.IsDefined() { return String(f(*m.value)) } else { return NoneStringOption }  }
/* Complex64OptionOption: Complex64Option->int */ func MapIntToComplex64OptionOption(m Complex64OptionOption, f func(Complex64Option) int) IntOption {  if m.IsDefined() { return Int(f(*m.value)) } else { return NoneIntOption }  }
/* Complex64OptionOption: Complex64Option->int8 */ func MapInt8ToComplex64OptionOption(m Complex64OptionOption, f func(Complex64Option) int8) Int8Option {  if m.IsDefined() { return Int8(f(*m.value)) } else { return NoneInt8Option }  }
/* Complex64OptionOption: Complex64Option->int16 */ func MapInt16ToComplex64OptionOption(m Complex64OptionOption, f func(Complex64Option) int16) Int16Option {  if m.IsDefined() { return Int16(f(*m.value)) } else { return NoneInt16Option }  }
/* Complex64OptionOption: Complex64Option->int32 */ func MapInt32ToComplex64OptionOption(m Complex64OptionOption, f func(Complex64Option) int32) Int32Option {  if m.IsDefined() { return Int32(f(*m.value)) } else { return NoneInt32Option }  }
/* Complex64OptionOption: Complex64Option->int64 */ func MapInt64ToComplex64OptionOption(m Complex64OptionOption, f func(Complex64Option) int64) Int64Option {  if m.IsDefined() { return Int64(f(*m.value)) } else { return NoneInt64Option }  }
/* Complex64OptionOption: Complex64Option->uint */ func MapUintToComplex64OptionOption(m Complex64OptionOption, f func(Complex64Option) uint) UintOption {  if m.IsDefined() { return Uint(f(*m.value)) } else { return NoneUintOption }  }
/* Complex64OptionOption: Complex64Option->uint8 */ func MapUint8ToComplex64OptionOption(m Complex64OptionOption, f func(Complex64Option) uint8) Uint8Option {  if m.IsDefined() { return Uint8(f(*m.value)) } else { return NoneUint8Option }  }
/* Complex64OptionOption: Complex64Option->uint16 */ func MapUint16ToComplex64OptionOption(m Complex64OptionOption, f func(Complex64Option) uint16) Uint16Option {  if m.IsDefined() { return Uint16(f(*m.value)) } else { return NoneUint16Option }  }
/* Complex64OptionOption: Complex64Option->uint32 */ func MapUint32ToComplex64OptionOption(m Complex64OptionOption, f func(Complex64Option) uint32) Uint32Option {  if m.IsDefined() { return Uint32(f(*m.value)) } else { return NoneUint32Option }  }
/* Complex64OptionOption: Complex64Option->uint64 */ func MapUint64ToComplex64OptionOption(m Complex64OptionOption, f func(Complex64Option) uint64) Uint64Option {  if m.IsDefined() { return Uint64(f(*m.value)) } else { return NoneUint64Option }  }
/* Complex64OptionOption: Complex64Option->uintptr */ func MapUintptrToComplex64OptionOption(m Complex64OptionOption, f func(Complex64Option) uintptr) UintptrOption {  if m.IsDefined() { return Uintptr(f(*m.value)) } else { return NoneUintptrOption }  }
/* Complex64OptionOption: Complex64Option->byte */ func MapByteToComplex64OptionOption(m Complex64OptionOption, f func(Complex64Option) byte) ByteOption {  if m.IsDefined() { return Byte(f(*m.value)) } else { return NoneByteOption }  }
/* Complex64OptionOption: Complex64Option->rune */ func MapRuneToComplex64OptionOption(m Complex64OptionOption, f func(Complex64Option) rune) RuneOption {  if m.IsDefined() { return Rune(f(*m.value)) } else { return NoneRuneOption }  }
/* Complex64OptionOption: Complex64Option->float32 */ func MapFloat32ToComplex64OptionOption(m Complex64OptionOption, f func(Complex64Option) float32) Float32Option {  if m.IsDefined() { return Float32(f(*m.value)) } else { return NoneFloat32Option }  }
/* Complex64OptionOption: Complex64Option->float64 */ func MapFloat64ToComplex64OptionOption(m Complex64OptionOption, f func(Complex64Option) float64) Float64Option {  if m.IsDefined() { return Float64(f(*m.value)) } else { return NoneFloat64Option }  }
/* Complex64OptionOption: Complex64Option->complex64 */ func MapComplex64ToComplex64OptionOption(m Complex64OptionOption, f func(Complex64Option) complex64) Complex64Option {  if m.IsDefined() { return Complex64(f(*m.value)) } else { return NoneComplex64Option }  }
/* Complex64OptionOption: Complex64Option->complex128 */ func MapComplex128ToComplex64OptionOption(m Complex64OptionOption, f func(Complex64Option) complex128) Complex128Option {  if m.IsDefined() { return Complex128(f(*m.value)) } else { return NoneComplex128Option }  }
/* Complex64OptionOption: Complex64Option->Any */ func MapAnyToComplex64OptionOption(m Complex64OptionOption, f func(Complex64Option) Any) AnyOption {  if m.IsDefined() { return AnyOpt(f(*m.value)) } else { return NoneAnyOption }  }
/* Complex64OptionOption: Complex64Option->BoolOption */ func MapBoolOptionToComplex64OptionOption(m Complex64OptionOption, f func(Complex64Option) BoolOption) BoolOptionOption {  if m.IsDefined() { return BoolBool(f(*m.value)) } else { return NoneBoolOptionOption }  }
/* Complex64OptionOption: Complex64Option->StringOption */ func MapStringOptionToComplex64OptionOption(m Complex64OptionOption, f func(Complex64Option) StringOption) StringOptionOption {  if m.IsDefined() { return StringString(f(*m.value)) } else { return NoneStringOptionOption }  }
/* Complex64OptionOption: Complex64Option->IntOption */ func MapIntOptionToComplex64OptionOption(m Complex64OptionOption, f func(Complex64Option) IntOption) IntOptionOption {  if m.IsDefined() { return IntInt(f(*m.value)) } else { return NoneIntOptionOption }  }
/* Complex64OptionOption: Complex64Option->Int8Option */ func MapInt8OptionToComplex64OptionOption(m Complex64OptionOption, f func(Complex64Option) Int8Option) Int8OptionOption {  if m.IsDefined() { return Int8Int8(f(*m.value)) } else { return NoneInt8OptionOption }  }
/* Complex64OptionOption: Complex64Option->Int16Option */ func MapInt16OptionToComplex64OptionOption(m Complex64OptionOption, f func(Complex64Option) Int16Option) Int16OptionOption {  if m.IsDefined() { return Int16Int16(f(*m.value)) } else { return NoneInt16OptionOption }  }
/* Complex64OptionOption: Complex64Option->Int32Option */ func MapInt32OptionToComplex64OptionOption(m Complex64OptionOption, f func(Complex64Option) Int32Option) Int32OptionOption {  if m.IsDefined() { return Int32Int32(f(*m.value)) } else { return NoneInt32OptionOption }  }
/* Complex64OptionOption: Complex64Option->Int64Option */ func MapInt64OptionToComplex64OptionOption(m Complex64OptionOption, f func(Complex64Option) Int64Option) Int64OptionOption {  if m.IsDefined() { return Int64Int64(f(*m.value)) } else { return NoneInt64OptionOption }  }
/* Complex64OptionOption: Complex64Option->UintOption */ func MapUintOptionToComplex64OptionOption(m Complex64OptionOption, f func(Complex64Option) UintOption) UintOptionOption {  if m.IsDefined() { return UintUint(f(*m.value)) } else { return NoneUintOptionOption }  }
/* Complex64OptionOption: Complex64Option->Uint8Option */ func MapUint8OptionToComplex64OptionOption(m Complex64OptionOption, f func(Complex64Option) Uint8Option) Uint8OptionOption {  if m.IsDefined() { return Uint8Uint8(f(*m.value)) } else { return NoneUint8OptionOption }  }
/* Complex64OptionOption: Complex64Option->Uint16Option */ func MapUint16OptionToComplex64OptionOption(m Complex64OptionOption, f func(Complex64Option) Uint16Option) Uint16OptionOption {  if m.IsDefined() { return Uint16Uint16(f(*m.value)) } else { return NoneUint16OptionOption }  }
/* Complex64OptionOption: Complex64Option->Uint32Option */ func MapUint32OptionToComplex64OptionOption(m Complex64OptionOption, f func(Complex64Option) Uint32Option) Uint32OptionOption {  if m.IsDefined() { return Uint32Uint32(f(*m.value)) } else { return NoneUint32OptionOption }  }
/* Complex64OptionOption: Complex64Option->Uint64Option */ func MapUint64OptionToComplex64OptionOption(m Complex64OptionOption, f func(Complex64Option) Uint64Option) Uint64OptionOption {  if m.IsDefined() { return Uint64Uint64(f(*m.value)) } else { return NoneUint64OptionOption }  }
/* Complex64OptionOption: Complex64Option->UintptrOption */ func MapUintptrOptionToComplex64OptionOption(m Complex64OptionOption, f func(Complex64Option) UintptrOption) UintptrOptionOption {  if m.IsDefined() { return UintptrUintptr(f(*m.value)) } else { return NoneUintptrOptionOption }  }
/* Complex64OptionOption: Complex64Option->ByteOption */ func MapByteOptionToComplex64OptionOption(m Complex64OptionOption, f func(Complex64Option) ByteOption) ByteOptionOption {  if m.IsDefined() { return ByteByte(f(*m.value)) } else { return NoneByteOptionOption }  }
/* Complex64OptionOption: Complex64Option->RuneOption */ func MapRuneOptionToComplex64OptionOption(m Complex64OptionOption, f func(Complex64Option) RuneOption) RuneOptionOption {  if m.IsDefined() { return RuneRune(f(*m.value)) } else { return NoneRuneOptionOption }  }
/* Complex64OptionOption: Complex64Option->Float32Option */ func MapFloat32OptionToComplex64OptionOption(m Complex64OptionOption, f func(Complex64Option) Float32Option) Float32OptionOption {  if m.IsDefined() { return Float32Float32(f(*m.value)) } else { return NoneFloat32OptionOption }  }
/* Complex64OptionOption: Complex64Option->Float64Option */ func MapFloat64OptionToComplex64OptionOption(m Complex64OptionOption, f func(Complex64Option) Float64Option) Float64OptionOption {  if m.IsDefined() { return Float64Float64(f(*m.value)) } else { return NoneFloat64OptionOption }  }
/* Complex64OptionOption: Complex64Option->Complex64Option */ func MapComplex64OptionToComplex64OptionOption(m Complex64OptionOption, f func(Complex64Option) Complex64Option) Complex64OptionOption {  if m.IsDefined() { return Complex64Complex64(f(*m.value)) } else { return NoneComplex64OptionOption }  }
/* Complex64OptionOption: Complex64Option->Complex128Option */ func MapComplex128OptionToComplex64OptionOption(m Complex64OptionOption, f func(Complex64Option) Complex128Option) Complex128OptionOption {  if m.IsDefined() { return Complex128Complex128(f(*m.value)) } else { return NoneComplex128OptionOption }  }
/* Complex64OptionOption: Complex64Option->AnyOption */ func MapAnyOptionToComplex64OptionOption(m Complex64OptionOption, f func(Complex64Option) AnyOption) AnyOptionOption {  if m.IsDefined() { return AnyOptAny(f(*m.value)) } else { return NoneAnyOptionOption }  }
/* Complex64OptionOption: Complex64Option->[]bool */ func MapBoolArrToComplex64OptionOption(m Complex64OptionOption, f func(Complex64Option) []bool) BoolArrOption {  if m.IsDefined() { return BoolArrOpt(f(*m.value)) } else { return NoneBoolArrOption }  }
/* Complex64OptionOption: Complex64Option->[]string */ func MapStringArrToComplex64OptionOption(m Complex64OptionOption, f func(Complex64Option) []string) StringArrOption {  if m.IsDefined() { return StringArrOpt(f(*m.value)) } else { return NoneStringArrOption }  }
/* Complex64OptionOption: Complex64Option->[]int */ func MapIntArrToComplex64OptionOption(m Complex64OptionOption, f func(Complex64Option) []int) IntArrOption {  if m.IsDefined() { return IntArrOpt(f(*m.value)) } else { return NoneIntArrOption }  }
/* Complex64OptionOption: Complex64Option->[]int8 */ func MapInt8ArrToComplex64OptionOption(m Complex64OptionOption, f func(Complex64Option) []int8) Int8ArrOption {  if m.IsDefined() { return Int8ArrOpt(f(*m.value)) } else { return NoneInt8ArrOption }  }
/* Complex64OptionOption: Complex64Option->[]int16 */ func MapInt16ArrToComplex64OptionOption(m Complex64OptionOption, f func(Complex64Option) []int16) Int16ArrOption {  if m.IsDefined() { return Int16ArrOpt(f(*m.value)) } else { return NoneInt16ArrOption }  }
/* Complex64OptionOption: Complex64Option->[]int32 */ func MapInt32ArrToComplex64OptionOption(m Complex64OptionOption, f func(Complex64Option) []int32) Int32ArrOption {  if m.IsDefined() { return Int32ArrOpt(f(*m.value)) } else { return NoneInt32ArrOption }  }
/* Complex64OptionOption: Complex64Option->[]int64 */ func MapInt64ArrToComplex64OptionOption(m Complex64OptionOption, f func(Complex64Option) []int64) Int64ArrOption {  if m.IsDefined() { return Int64ArrOpt(f(*m.value)) } else { return NoneInt64ArrOption }  }
/* Complex64OptionOption: Complex64Option->[]uint */ func MapUintArrToComplex64OptionOption(m Complex64OptionOption, f func(Complex64Option) []uint) UintArrOption {  if m.IsDefined() { return UintArrOpt(f(*m.value)) } else { return NoneUintArrOption }  }
/* Complex64OptionOption: Complex64Option->[]uint8 */ func MapUint8ArrToComplex64OptionOption(m Complex64OptionOption, f func(Complex64Option) []uint8) Uint8ArrOption {  if m.IsDefined() { return Uint8ArrOpt(f(*m.value)) } else { return NoneUint8ArrOption }  }
/* Complex64OptionOption: Complex64Option->[]uint16 */ func MapUint16ArrToComplex64OptionOption(m Complex64OptionOption, f func(Complex64Option) []uint16) Uint16ArrOption {  if m.IsDefined() { return Uint16ArrOpt(f(*m.value)) } else { return NoneUint16ArrOption }  }
/* Complex64OptionOption: Complex64Option->[]uint32 */ func MapUint32ArrToComplex64OptionOption(m Complex64OptionOption, f func(Complex64Option) []uint32) Uint32ArrOption {  if m.IsDefined() { return Uint32ArrOpt(f(*m.value)) } else { return NoneUint32ArrOption }  }
/* Complex64OptionOption: Complex64Option->[]uint64 */ func MapUint64ArrToComplex64OptionOption(m Complex64OptionOption, f func(Complex64Option) []uint64) Uint64ArrOption {  if m.IsDefined() { return Uint64ArrOpt(f(*m.value)) } else { return NoneUint64ArrOption }  }
/* Complex64OptionOption: Complex64Option->[]uintptr */ func MapUintptrArrToComplex64OptionOption(m Complex64OptionOption, f func(Complex64Option) []uintptr) UintptrArrOption {  if m.IsDefined() { return UintptrArrOpt(f(*m.value)) } else { return NoneUintptrArrOption }  }
/* Complex64OptionOption: Complex64Option->[]byte */ func MapByteArrToComplex64OptionOption(m Complex64OptionOption, f func(Complex64Option) []byte) ByteArrOption {  if m.IsDefined() { return ByteArrOpt(f(*m.value)) } else { return NoneByteArrOption }  }
/* Complex64OptionOption: Complex64Option->[]rune */ func MapRuneArrToComplex64OptionOption(m Complex64OptionOption, f func(Complex64Option) []rune) RuneArrOption {  if m.IsDefined() { return RuneArrOpt(f(*m.value)) } else { return NoneRuneArrOption }  }
/* Complex64OptionOption: Complex64Option->[]float32 */ func MapFloat32ArrToComplex64OptionOption(m Complex64OptionOption, f func(Complex64Option) []float32) Float32ArrOption {  if m.IsDefined() { return Float32ArrOpt(f(*m.value)) } else { return NoneFloat32ArrOption }  }
/* Complex64OptionOption: Complex64Option->[]float64 */ func MapFloat64ArrToComplex64OptionOption(m Complex64OptionOption, f func(Complex64Option) []float64) Float64ArrOption {  if m.IsDefined() { return Float64ArrOpt(f(*m.value)) } else { return NoneFloat64ArrOption }  }
/* Complex64OptionOption: Complex64Option->[]complex64 */ func MapComplex64ArrToComplex64OptionOption(m Complex64OptionOption, f func(Complex64Option) []complex64) Complex64ArrOption {  if m.IsDefined() { return Complex64ArrOpt(f(*m.value)) } else { return NoneComplex64ArrOption }  }
/* Complex64OptionOption: Complex64Option->[]complex128 */ func MapComplex128ArrToComplex64OptionOption(m Complex64OptionOption, f func(Complex64Option) []complex128) Complex128ArrOption {  if m.IsDefined() { return Complex128ArrOpt(f(*m.value)) } else { return NoneComplex128ArrOption }  }
/* Complex64OptionOption: Complex64Option->[]Any */ func MapAnyArrToComplex64OptionOption(m Complex64OptionOption, f func(Complex64Option) []Any) AnyArrOption {  if m.IsDefined() { return AnyArrOpt(f(*m.value)) } else { return NoneAnyArrOption }  }
/* Complex64OptionOption: Complex64Option->BoolList */ func MapBoolListToComplex64OptionOption(m Complex64OptionOption, f func(Complex64Option) BoolList) BoolListOption {  if m.IsDefined() { return BoolListOpt(f(*m.value)) } else { return NoneBoolListOption }  }
/* Complex64OptionOption: Complex64Option->StringList */ func MapStringListToComplex64OptionOption(m Complex64OptionOption, f func(Complex64Option) StringList) StringListOption {  if m.IsDefined() { return StringListOpt(f(*m.value)) } else { return NoneStringListOption }  }
/* Complex64OptionOption: Complex64Option->IntList */ func MapIntListToComplex64OptionOption(m Complex64OptionOption, f func(Complex64Option) IntList) IntListOption {  if m.IsDefined() { return IntListOpt(f(*m.value)) } else { return NoneIntListOption }  }
/* Complex64OptionOption: Complex64Option->Int8List */ func MapInt8ListToComplex64OptionOption(m Complex64OptionOption, f func(Complex64Option) Int8List) Int8ListOption {  if m.IsDefined() { return Int8ListOpt(f(*m.value)) } else { return NoneInt8ListOption }  }
/* Complex64OptionOption: Complex64Option->Int16List */ func MapInt16ListToComplex64OptionOption(m Complex64OptionOption, f func(Complex64Option) Int16List) Int16ListOption {  if m.IsDefined() { return Int16ListOpt(f(*m.value)) } else { return NoneInt16ListOption }  }
/* Complex64OptionOption: Complex64Option->Int32List */ func MapInt32ListToComplex64OptionOption(m Complex64OptionOption, f func(Complex64Option) Int32List) Int32ListOption {  if m.IsDefined() { return Int32ListOpt(f(*m.value)) } else { return NoneInt32ListOption }  }
/* Complex64OptionOption: Complex64Option->Int64List */ func MapInt64ListToComplex64OptionOption(m Complex64OptionOption, f func(Complex64Option) Int64List) Int64ListOption {  if m.IsDefined() { return Int64ListOpt(f(*m.value)) } else { return NoneInt64ListOption }  }
/* Complex64OptionOption: Complex64Option->UintList */ func MapUintListToComplex64OptionOption(m Complex64OptionOption, f func(Complex64Option) UintList) UintListOption {  if m.IsDefined() { return UintListOpt(f(*m.value)) } else { return NoneUintListOption }  }
/* Complex64OptionOption: Complex64Option->Uint8List */ func MapUint8ListToComplex64OptionOption(m Complex64OptionOption, f func(Complex64Option) Uint8List) Uint8ListOption {  if m.IsDefined() { return Uint8ListOpt(f(*m.value)) } else { return NoneUint8ListOption }  }
/* Complex64OptionOption: Complex64Option->Uint16List */ func MapUint16ListToComplex64OptionOption(m Complex64OptionOption, f func(Complex64Option) Uint16List) Uint16ListOption {  if m.IsDefined() { return Uint16ListOpt(f(*m.value)) } else { return NoneUint16ListOption }  }
/* Complex64OptionOption: Complex64Option->Uint32List */ func MapUint32ListToComplex64OptionOption(m Complex64OptionOption, f func(Complex64Option) Uint32List) Uint32ListOption {  if m.IsDefined() { return Uint32ListOpt(f(*m.value)) } else { return NoneUint32ListOption }  }
/* Complex64OptionOption: Complex64Option->Uint64List */ func MapUint64ListToComplex64OptionOption(m Complex64OptionOption, f func(Complex64Option) Uint64List) Uint64ListOption {  if m.IsDefined() { return Uint64ListOpt(f(*m.value)) } else { return NoneUint64ListOption }  }
/* Complex64OptionOption: Complex64Option->UintptrList */ func MapUintptrListToComplex64OptionOption(m Complex64OptionOption, f func(Complex64Option) UintptrList) UintptrListOption {  if m.IsDefined() { return UintptrListOpt(f(*m.value)) } else { return NoneUintptrListOption }  }
/* Complex64OptionOption: Complex64Option->ByteList */ func MapByteListToComplex64OptionOption(m Complex64OptionOption, f func(Complex64Option) ByteList) ByteListOption {  if m.IsDefined() { return ByteListOpt(f(*m.value)) } else { return NoneByteListOption }  }
/* Complex64OptionOption: Complex64Option->RuneList */ func MapRuneListToComplex64OptionOption(m Complex64OptionOption, f func(Complex64Option) RuneList) RuneListOption {  if m.IsDefined() { return RuneListOpt(f(*m.value)) } else { return NoneRuneListOption }  }
/* Complex64OptionOption: Complex64Option->Float32List */ func MapFloat32ListToComplex64OptionOption(m Complex64OptionOption, f func(Complex64Option) Float32List) Float32ListOption {  if m.IsDefined() { return Float32ListOpt(f(*m.value)) } else { return NoneFloat32ListOption }  }
/* Complex64OptionOption: Complex64Option->Float64List */ func MapFloat64ListToComplex64OptionOption(m Complex64OptionOption, f func(Complex64Option) Float64List) Float64ListOption {  if m.IsDefined() { return Float64ListOpt(f(*m.value)) } else { return NoneFloat64ListOption }  }
/* Complex64OptionOption: Complex64Option->Complex64List */ func MapComplex64ListToComplex64OptionOption(m Complex64OptionOption, f func(Complex64Option) Complex64List) Complex64ListOption {  if m.IsDefined() { return Complex64ListOpt(f(*m.value)) } else { return NoneComplex64ListOption }  }
/* Complex64OptionOption: Complex64Option->Complex128List */ func MapComplex128ListToComplex64OptionOption(m Complex64OptionOption, f func(Complex64Option) Complex128List) Complex128ListOption {  if m.IsDefined() { return Complex128ListOpt(f(*m.value)) } else { return NoneComplex128ListOption }  }
/* Complex64OptionOption: Complex64Option->AnyList */ func MapAnyListToComplex64OptionOption(m Complex64OptionOption, f func(Complex64Option) AnyList) AnyListOption {  if m.IsDefined() { return AnyListOpt(f(*m.value)) } else { return NoneAnyListOption }  }
/* Complex128OptionOption: Complex128Option->bool */ func MapBoolToComplex128OptionOption(m Complex128OptionOption, f func(Complex128Option) bool) BoolOption {  if m.IsDefined() { return Bool(f(*m.value)) } else { return NoneBoolOption }  }
/* Complex128OptionOption: Complex128Option->string */ func MapStringToComplex128OptionOption(m Complex128OptionOption, f func(Complex128Option) string) StringOption {  if m.IsDefined() { return String(f(*m.value)) } else { return NoneStringOption }  }
/* Complex128OptionOption: Complex128Option->int */ func MapIntToComplex128OptionOption(m Complex128OptionOption, f func(Complex128Option) int) IntOption {  if m.IsDefined() { return Int(f(*m.value)) } else { return NoneIntOption }  }
/* Complex128OptionOption: Complex128Option->int8 */ func MapInt8ToComplex128OptionOption(m Complex128OptionOption, f func(Complex128Option) int8) Int8Option {  if m.IsDefined() { return Int8(f(*m.value)) } else { return NoneInt8Option }  }
/* Complex128OptionOption: Complex128Option->int16 */ func MapInt16ToComplex128OptionOption(m Complex128OptionOption, f func(Complex128Option) int16) Int16Option {  if m.IsDefined() { return Int16(f(*m.value)) } else { return NoneInt16Option }  }
/* Complex128OptionOption: Complex128Option->int32 */ func MapInt32ToComplex128OptionOption(m Complex128OptionOption, f func(Complex128Option) int32) Int32Option {  if m.IsDefined() { return Int32(f(*m.value)) } else { return NoneInt32Option }  }
/* Complex128OptionOption: Complex128Option->int64 */ func MapInt64ToComplex128OptionOption(m Complex128OptionOption, f func(Complex128Option) int64) Int64Option {  if m.IsDefined() { return Int64(f(*m.value)) } else { return NoneInt64Option }  }
/* Complex128OptionOption: Complex128Option->uint */ func MapUintToComplex128OptionOption(m Complex128OptionOption, f func(Complex128Option) uint) UintOption {  if m.IsDefined() { return Uint(f(*m.value)) } else { return NoneUintOption }  }
/* Complex128OptionOption: Complex128Option->uint8 */ func MapUint8ToComplex128OptionOption(m Complex128OptionOption, f func(Complex128Option) uint8) Uint8Option {  if m.IsDefined() { return Uint8(f(*m.value)) } else { return NoneUint8Option }  }
/* Complex128OptionOption: Complex128Option->uint16 */ func MapUint16ToComplex128OptionOption(m Complex128OptionOption, f func(Complex128Option) uint16) Uint16Option {  if m.IsDefined() { return Uint16(f(*m.value)) } else { return NoneUint16Option }  }
/* Complex128OptionOption: Complex128Option->uint32 */ func MapUint32ToComplex128OptionOption(m Complex128OptionOption, f func(Complex128Option) uint32) Uint32Option {  if m.IsDefined() { return Uint32(f(*m.value)) } else { return NoneUint32Option }  }
/* Complex128OptionOption: Complex128Option->uint64 */ func MapUint64ToComplex128OptionOption(m Complex128OptionOption, f func(Complex128Option) uint64) Uint64Option {  if m.IsDefined() { return Uint64(f(*m.value)) } else { return NoneUint64Option }  }
/* Complex128OptionOption: Complex128Option->uintptr */ func MapUintptrToComplex128OptionOption(m Complex128OptionOption, f func(Complex128Option) uintptr) UintptrOption {  if m.IsDefined() { return Uintptr(f(*m.value)) } else { return NoneUintptrOption }  }
/* Complex128OptionOption: Complex128Option->byte */ func MapByteToComplex128OptionOption(m Complex128OptionOption, f func(Complex128Option) byte) ByteOption {  if m.IsDefined() { return Byte(f(*m.value)) } else { return NoneByteOption }  }
/* Complex128OptionOption: Complex128Option->rune */ func MapRuneToComplex128OptionOption(m Complex128OptionOption, f func(Complex128Option) rune) RuneOption {  if m.IsDefined() { return Rune(f(*m.value)) } else { return NoneRuneOption }  }
/* Complex128OptionOption: Complex128Option->float32 */ func MapFloat32ToComplex128OptionOption(m Complex128OptionOption, f func(Complex128Option) float32) Float32Option {  if m.IsDefined() { return Float32(f(*m.value)) } else { return NoneFloat32Option }  }
/* Complex128OptionOption: Complex128Option->float64 */ func MapFloat64ToComplex128OptionOption(m Complex128OptionOption, f func(Complex128Option) float64) Float64Option {  if m.IsDefined() { return Float64(f(*m.value)) } else { return NoneFloat64Option }  }
/* Complex128OptionOption: Complex128Option->complex64 */ func MapComplex64ToComplex128OptionOption(m Complex128OptionOption, f func(Complex128Option) complex64) Complex64Option {  if m.IsDefined() { return Complex64(f(*m.value)) } else { return NoneComplex64Option }  }
/* Complex128OptionOption: Complex128Option->complex128 */ func MapComplex128ToComplex128OptionOption(m Complex128OptionOption, f func(Complex128Option) complex128) Complex128Option {  if m.IsDefined() { return Complex128(f(*m.value)) } else { return NoneComplex128Option }  }
/* Complex128OptionOption: Complex128Option->Any */ func MapAnyToComplex128OptionOption(m Complex128OptionOption, f func(Complex128Option) Any) AnyOption {  if m.IsDefined() { return AnyOpt(f(*m.value)) } else { return NoneAnyOption }  }
/* Complex128OptionOption: Complex128Option->BoolOption */ func MapBoolOptionToComplex128OptionOption(m Complex128OptionOption, f func(Complex128Option) BoolOption) BoolOptionOption {  if m.IsDefined() { return BoolBool(f(*m.value)) } else { return NoneBoolOptionOption }  }
/* Complex128OptionOption: Complex128Option->StringOption */ func MapStringOptionToComplex128OptionOption(m Complex128OptionOption, f func(Complex128Option) StringOption) StringOptionOption {  if m.IsDefined() { return StringString(f(*m.value)) } else { return NoneStringOptionOption }  }
/* Complex128OptionOption: Complex128Option->IntOption */ func MapIntOptionToComplex128OptionOption(m Complex128OptionOption, f func(Complex128Option) IntOption) IntOptionOption {  if m.IsDefined() { return IntInt(f(*m.value)) } else { return NoneIntOptionOption }  }
/* Complex128OptionOption: Complex128Option->Int8Option */ func MapInt8OptionToComplex128OptionOption(m Complex128OptionOption, f func(Complex128Option) Int8Option) Int8OptionOption {  if m.IsDefined() { return Int8Int8(f(*m.value)) } else { return NoneInt8OptionOption }  }
/* Complex128OptionOption: Complex128Option->Int16Option */ func MapInt16OptionToComplex128OptionOption(m Complex128OptionOption, f func(Complex128Option) Int16Option) Int16OptionOption {  if m.IsDefined() { return Int16Int16(f(*m.value)) } else { return NoneInt16OptionOption }  }
/* Complex128OptionOption: Complex128Option->Int32Option */ func MapInt32OptionToComplex128OptionOption(m Complex128OptionOption, f func(Complex128Option) Int32Option) Int32OptionOption {  if m.IsDefined() { return Int32Int32(f(*m.value)) } else { return NoneInt32OptionOption }  }
/* Complex128OptionOption: Complex128Option->Int64Option */ func MapInt64OptionToComplex128OptionOption(m Complex128OptionOption, f func(Complex128Option) Int64Option) Int64OptionOption {  if m.IsDefined() { return Int64Int64(f(*m.value)) } else { return NoneInt64OptionOption }  }
/* Complex128OptionOption: Complex128Option->UintOption */ func MapUintOptionToComplex128OptionOption(m Complex128OptionOption, f func(Complex128Option) UintOption) UintOptionOption {  if m.IsDefined() { return UintUint(f(*m.value)) } else { return NoneUintOptionOption }  }
/* Complex128OptionOption: Complex128Option->Uint8Option */ func MapUint8OptionToComplex128OptionOption(m Complex128OptionOption, f func(Complex128Option) Uint8Option) Uint8OptionOption {  if m.IsDefined() { return Uint8Uint8(f(*m.value)) } else { return NoneUint8OptionOption }  }
/* Complex128OptionOption: Complex128Option->Uint16Option */ func MapUint16OptionToComplex128OptionOption(m Complex128OptionOption, f func(Complex128Option) Uint16Option) Uint16OptionOption {  if m.IsDefined() { return Uint16Uint16(f(*m.value)) } else { return NoneUint16OptionOption }  }
/* Complex128OptionOption: Complex128Option->Uint32Option */ func MapUint32OptionToComplex128OptionOption(m Complex128OptionOption, f func(Complex128Option) Uint32Option) Uint32OptionOption {  if m.IsDefined() { return Uint32Uint32(f(*m.value)) } else { return NoneUint32OptionOption }  }
/* Complex128OptionOption: Complex128Option->Uint64Option */ func MapUint64OptionToComplex128OptionOption(m Complex128OptionOption, f func(Complex128Option) Uint64Option) Uint64OptionOption {  if m.IsDefined() { return Uint64Uint64(f(*m.value)) } else { return NoneUint64OptionOption }  }
/* Complex128OptionOption: Complex128Option->UintptrOption */ func MapUintptrOptionToComplex128OptionOption(m Complex128OptionOption, f func(Complex128Option) UintptrOption) UintptrOptionOption {  if m.IsDefined() { return UintptrUintptr(f(*m.value)) } else { return NoneUintptrOptionOption }  }
/* Complex128OptionOption: Complex128Option->ByteOption */ func MapByteOptionToComplex128OptionOption(m Complex128OptionOption, f func(Complex128Option) ByteOption) ByteOptionOption {  if m.IsDefined() { return ByteByte(f(*m.value)) } else { return NoneByteOptionOption }  }
/* Complex128OptionOption: Complex128Option->RuneOption */ func MapRuneOptionToComplex128OptionOption(m Complex128OptionOption, f func(Complex128Option) RuneOption) RuneOptionOption {  if m.IsDefined() { return RuneRune(f(*m.value)) } else { return NoneRuneOptionOption }  }
/* Complex128OptionOption: Complex128Option->Float32Option */ func MapFloat32OptionToComplex128OptionOption(m Complex128OptionOption, f func(Complex128Option) Float32Option) Float32OptionOption {  if m.IsDefined() { return Float32Float32(f(*m.value)) } else { return NoneFloat32OptionOption }  }
/* Complex128OptionOption: Complex128Option->Float64Option */ func MapFloat64OptionToComplex128OptionOption(m Complex128OptionOption, f func(Complex128Option) Float64Option) Float64OptionOption {  if m.IsDefined() { return Float64Float64(f(*m.value)) } else { return NoneFloat64OptionOption }  }
/* Complex128OptionOption: Complex128Option->Complex64Option */ func MapComplex64OptionToComplex128OptionOption(m Complex128OptionOption, f func(Complex128Option) Complex64Option) Complex64OptionOption {  if m.IsDefined() { return Complex64Complex64(f(*m.value)) } else { return NoneComplex64OptionOption }  }
/* Complex128OptionOption: Complex128Option->Complex128Option */ func MapComplex128OptionToComplex128OptionOption(m Complex128OptionOption, f func(Complex128Option) Complex128Option) Complex128OptionOption {  if m.IsDefined() { return Complex128Complex128(f(*m.value)) } else { return NoneComplex128OptionOption }  }
/* Complex128OptionOption: Complex128Option->AnyOption */ func MapAnyOptionToComplex128OptionOption(m Complex128OptionOption, f func(Complex128Option) AnyOption) AnyOptionOption {  if m.IsDefined() { return AnyOptAny(f(*m.value)) } else { return NoneAnyOptionOption }  }
/* Complex128OptionOption: Complex128Option->[]bool */ func MapBoolArrToComplex128OptionOption(m Complex128OptionOption, f func(Complex128Option) []bool) BoolArrOption {  if m.IsDefined() { return BoolArrOpt(f(*m.value)) } else { return NoneBoolArrOption }  }
/* Complex128OptionOption: Complex128Option->[]string */ func MapStringArrToComplex128OptionOption(m Complex128OptionOption, f func(Complex128Option) []string) StringArrOption {  if m.IsDefined() { return StringArrOpt(f(*m.value)) } else { return NoneStringArrOption }  }
/* Complex128OptionOption: Complex128Option->[]int */ func MapIntArrToComplex128OptionOption(m Complex128OptionOption, f func(Complex128Option) []int) IntArrOption {  if m.IsDefined() { return IntArrOpt(f(*m.value)) } else { return NoneIntArrOption }  }
/* Complex128OptionOption: Complex128Option->[]int8 */ func MapInt8ArrToComplex128OptionOption(m Complex128OptionOption, f func(Complex128Option) []int8) Int8ArrOption {  if m.IsDefined() { return Int8ArrOpt(f(*m.value)) } else { return NoneInt8ArrOption }  }
/* Complex128OptionOption: Complex128Option->[]int16 */ func MapInt16ArrToComplex128OptionOption(m Complex128OptionOption, f func(Complex128Option) []int16) Int16ArrOption {  if m.IsDefined() { return Int16ArrOpt(f(*m.value)) } else { return NoneInt16ArrOption }  }
/* Complex128OptionOption: Complex128Option->[]int32 */ func MapInt32ArrToComplex128OptionOption(m Complex128OptionOption, f func(Complex128Option) []int32) Int32ArrOption {  if m.IsDefined() { return Int32ArrOpt(f(*m.value)) } else { return NoneInt32ArrOption }  }
/* Complex128OptionOption: Complex128Option->[]int64 */ func MapInt64ArrToComplex128OptionOption(m Complex128OptionOption, f func(Complex128Option) []int64) Int64ArrOption {  if m.IsDefined() { return Int64ArrOpt(f(*m.value)) } else { return NoneInt64ArrOption }  }
/* Complex128OptionOption: Complex128Option->[]uint */ func MapUintArrToComplex128OptionOption(m Complex128OptionOption, f func(Complex128Option) []uint) UintArrOption {  if m.IsDefined() { return UintArrOpt(f(*m.value)) } else { return NoneUintArrOption }  }
/* Complex128OptionOption: Complex128Option->[]uint8 */ func MapUint8ArrToComplex128OptionOption(m Complex128OptionOption, f func(Complex128Option) []uint8) Uint8ArrOption {  if m.IsDefined() { return Uint8ArrOpt(f(*m.value)) } else { return NoneUint8ArrOption }  }
/* Complex128OptionOption: Complex128Option->[]uint16 */ func MapUint16ArrToComplex128OptionOption(m Complex128OptionOption, f func(Complex128Option) []uint16) Uint16ArrOption {  if m.IsDefined() { return Uint16ArrOpt(f(*m.value)) } else { return NoneUint16ArrOption }  }
/* Complex128OptionOption: Complex128Option->[]uint32 */ func MapUint32ArrToComplex128OptionOption(m Complex128OptionOption, f func(Complex128Option) []uint32) Uint32ArrOption {  if m.IsDefined() { return Uint32ArrOpt(f(*m.value)) } else { return NoneUint32ArrOption }  }
/* Complex128OptionOption: Complex128Option->[]uint64 */ func MapUint64ArrToComplex128OptionOption(m Complex128OptionOption, f func(Complex128Option) []uint64) Uint64ArrOption {  if m.IsDefined() { return Uint64ArrOpt(f(*m.value)) } else { return NoneUint64ArrOption }  }
/* Complex128OptionOption: Complex128Option->[]uintptr */ func MapUintptrArrToComplex128OptionOption(m Complex128OptionOption, f func(Complex128Option) []uintptr) UintptrArrOption {  if m.IsDefined() { return UintptrArrOpt(f(*m.value)) } else { return NoneUintptrArrOption }  }
/* Complex128OptionOption: Complex128Option->[]byte */ func MapByteArrToComplex128OptionOption(m Complex128OptionOption, f func(Complex128Option) []byte) ByteArrOption {  if m.IsDefined() { return ByteArrOpt(f(*m.value)) } else { return NoneByteArrOption }  }
/* Complex128OptionOption: Complex128Option->[]rune */ func MapRuneArrToComplex128OptionOption(m Complex128OptionOption, f func(Complex128Option) []rune) RuneArrOption {  if m.IsDefined() { return RuneArrOpt(f(*m.value)) } else { return NoneRuneArrOption }  }
/* Complex128OptionOption: Complex128Option->[]float32 */ func MapFloat32ArrToComplex128OptionOption(m Complex128OptionOption, f func(Complex128Option) []float32) Float32ArrOption {  if m.IsDefined() { return Float32ArrOpt(f(*m.value)) } else { return NoneFloat32ArrOption }  }
/* Complex128OptionOption: Complex128Option->[]float64 */ func MapFloat64ArrToComplex128OptionOption(m Complex128OptionOption, f func(Complex128Option) []float64) Float64ArrOption {  if m.IsDefined() { return Float64ArrOpt(f(*m.value)) } else { return NoneFloat64ArrOption }  }
/* Complex128OptionOption: Complex128Option->[]complex64 */ func MapComplex64ArrToComplex128OptionOption(m Complex128OptionOption, f func(Complex128Option) []complex64) Complex64ArrOption {  if m.IsDefined() { return Complex64ArrOpt(f(*m.value)) } else { return NoneComplex64ArrOption }  }
/* Complex128OptionOption: Complex128Option->[]complex128 */ func MapComplex128ArrToComplex128OptionOption(m Complex128OptionOption, f func(Complex128Option) []complex128) Complex128ArrOption {  if m.IsDefined() { return Complex128ArrOpt(f(*m.value)) } else { return NoneComplex128ArrOption }  }
/* Complex128OptionOption: Complex128Option->[]Any */ func MapAnyArrToComplex128OptionOption(m Complex128OptionOption, f func(Complex128Option) []Any) AnyArrOption {  if m.IsDefined() { return AnyArrOpt(f(*m.value)) } else { return NoneAnyArrOption }  }
/* Complex128OptionOption: Complex128Option->BoolList */ func MapBoolListToComplex128OptionOption(m Complex128OptionOption, f func(Complex128Option) BoolList) BoolListOption {  if m.IsDefined() { return BoolListOpt(f(*m.value)) } else { return NoneBoolListOption }  }
/* Complex128OptionOption: Complex128Option->StringList */ func MapStringListToComplex128OptionOption(m Complex128OptionOption, f func(Complex128Option) StringList) StringListOption {  if m.IsDefined() { return StringListOpt(f(*m.value)) } else { return NoneStringListOption }  }
/* Complex128OptionOption: Complex128Option->IntList */ func MapIntListToComplex128OptionOption(m Complex128OptionOption, f func(Complex128Option) IntList) IntListOption {  if m.IsDefined() { return IntListOpt(f(*m.value)) } else { return NoneIntListOption }  }
/* Complex128OptionOption: Complex128Option->Int8List */ func MapInt8ListToComplex128OptionOption(m Complex128OptionOption, f func(Complex128Option) Int8List) Int8ListOption {  if m.IsDefined() { return Int8ListOpt(f(*m.value)) } else { return NoneInt8ListOption }  }
/* Complex128OptionOption: Complex128Option->Int16List */ func MapInt16ListToComplex128OptionOption(m Complex128OptionOption, f func(Complex128Option) Int16List) Int16ListOption {  if m.IsDefined() { return Int16ListOpt(f(*m.value)) } else { return NoneInt16ListOption }  }
/* Complex128OptionOption: Complex128Option->Int32List */ func MapInt32ListToComplex128OptionOption(m Complex128OptionOption, f func(Complex128Option) Int32List) Int32ListOption {  if m.IsDefined() { return Int32ListOpt(f(*m.value)) } else { return NoneInt32ListOption }  }
/* Complex128OptionOption: Complex128Option->Int64List */ func MapInt64ListToComplex128OptionOption(m Complex128OptionOption, f func(Complex128Option) Int64List) Int64ListOption {  if m.IsDefined() { return Int64ListOpt(f(*m.value)) } else { return NoneInt64ListOption }  }
/* Complex128OptionOption: Complex128Option->UintList */ func MapUintListToComplex128OptionOption(m Complex128OptionOption, f func(Complex128Option) UintList) UintListOption {  if m.IsDefined() { return UintListOpt(f(*m.value)) } else { return NoneUintListOption }  }
/* Complex128OptionOption: Complex128Option->Uint8List */ func MapUint8ListToComplex128OptionOption(m Complex128OptionOption, f func(Complex128Option) Uint8List) Uint8ListOption {  if m.IsDefined() { return Uint8ListOpt(f(*m.value)) } else { return NoneUint8ListOption }  }
/* Complex128OptionOption: Complex128Option->Uint16List */ func MapUint16ListToComplex128OptionOption(m Complex128OptionOption, f func(Complex128Option) Uint16List) Uint16ListOption {  if m.IsDefined() { return Uint16ListOpt(f(*m.value)) } else { return NoneUint16ListOption }  }
/* Complex128OptionOption: Complex128Option->Uint32List */ func MapUint32ListToComplex128OptionOption(m Complex128OptionOption, f func(Complex128Option) Uint32List) Uint32ListOption {  if m.IsDefined() { return Uint32ListOpt(f(*m.value)) } else { return NoneUint32ListOption }  }
/* Complex128OptionOption: Complex128Option->Uint64List */ func MapUint64ListToComplex128OptionOption(m Complex128OptionOption, f func(Complex128Option) Uint64List) Uint64ListOption {  if m.IsDefined() { return Uint64ListOpt(f(*m.value)) } else { return NoneUint64ListOption }  }
/* Complex128OptionOption: Complex128Option->UintptrList */ func MapUintptrListToComplex128OptionOption(m Complex128OptionOption, f func(Complex128Option) UintptrList) UintptrListOption {  if m.IsDefined() { return UintptrListOpt(f(*m.value)) } else { return NoneUintptrListOption }  }
/* Complex128OptionOption: Complex128Option->ByteList */ func MapByteListToComplex128OptionOption(m Complex128OptionOption, f func(Complex128Option) ByteList) ByteListOption {  if m.IsDefined() { return ByteListOpt(f(*m.value)) } else { return NoneByteListOption }  }
/* Complex128OptionOption: Complex128Option->RuneList */ func MapRuneListToComplex128OptionOption(m Complex128OptionOption, f func(Complex128Option) RuneList) RuneListOption {  if m.IsDefined() { return RuneListOpt(f(*m.value)) } else { return NoneRuneListOption }  }
/* Complex128OptionOption: Complex128Option->Float32List */ func MapFloat32ListToComplex128OptionOption(m Complex128OptionOption, f func(Complex128Option) Float32List) Float32ListOption {  if m.IsDefined() { return Float32ListOpt(f(*m.value)) } else { return NoneFloat32ListOption }  }
/* Complex128OptionOption: Complex128Option->Float64List */ func MapFloat64ListToComplex128OptionOption(m Complex128OptionOption, f func(Complex128Option) Float64List) Float64ListOption {  if m.IsDefined() { return Float64ListOpt(f(*m.value)) } else { return NoneFloat64ListOption }  }
/* Complex128OptionOption: Complex128Option->Complex64List */ func MapComplex64ListToComplex128OptionOption(m Complex128OptionOption, f func(Complex128Option) Complex64List) Complex64ListOption {  if m.IsDefined() { return Complex64ListOpt(f(*m.value)) } else { return NoneComplex64ListOption }  }
/* Complex128OptionOption: Complex128Option->Complex128List */ func MapComplex128ListToComplex128OptionOption(m Complex128OptionOption, f func(Complex128Option) Complex128List) Complex128ListOption {  if m.IsDefined() { return Complex128ListOpt(f(*m.value)) } else { return NoneComplex128ListOption }  }
/* Complex128OptionOption: Complex128Option->AnyList */ func MapAnyListToComplex128OptionOption(m Complex128OptionOption, f func(Complex128Option) AnyList) AnyListOption {  if m.IsDefined() { return AnyListOpt(f(*m.value)) } else { return NoneAnyListOption }  }
/* AnyOptionOption: AnyOption->bool */ func MapBoolToAnyOptionOption(m AnyOptionOption, f func(AnyOption) bool) BoolOption {  if m.IsDefined() { return Bool(f(*m.value)) } else { return NoneBoolOption }  }
/* AnyOptionOption: AnyOption->string */ func MapStringToAnyOptionOption(m AnyOptionOption, f func(AnyOption) string) StringOption {  if m.IsDefined() { return String(f(*m.value)) } else { return NoneStringOption }  }
/* AnyOptionOption: AnyOption->int */ func MapIntToAnyOptionOption(m AnyOptionOption, f func(AnyOption) int) IntOption {  if m.IsDefined() { return Int(f(*m.value)) } else { return NoneIntOption }  }
/* AnyOptionOption: AnyOption->int8 */ func MapInt8ToAnyOptionOption(m AnyOptionOption, f func(AnyOption) int8) Int8Option {  if m.IsDefined() { return Int8(f(*m.value)) } else { return NoneInt8Option }  }
/* AnyOptionOption: AnyOption->int16 */ func MapInt16ToAnyOptionOption(m AnyOptionOption, f func(AnyOption) int16) Int16Option {  if m.IsDefined() { return Int16(f(*m.value)) } else { return NoneInt16Option }  }
/* AnyOptionOption: AnyOption->int32 */ func MapInt32ToAnyOptionOption(m AnyOptionOption, f func(AnyOption) int32) Int32Option {  if m.IsDefined() { return Int32(f(*m.value)) } else { return NoneInt32Option }  }
/* AnyOptionOption: AnyOption->int64 */ func MapInt64ToAnyOptionOption(m AnyOptionOption, f func(AnyOption) int64) Int64Option {  if m.IsDefined() { return Int64(f(*m.value)) } else { return NoneInt64Option }  }
/* AnyOptionOption: AnyOption->uint */ func MapUintToAnyOptionOption(m AnyOptionOption, f func(AnyOption) uint) UintOption {  if m.IsDefined() { return Uint(f(*m.value)) } else { return NoneUintOption }  }
/* AnyOptionOption: AnyOption->uint8 */ func MapUint8ToAnyOptionOption(m AnyOptionOption, f func(AnyOption) uint8) Uint8Option {  if m.IsDefined() { return Uint8(f(*m.value)) } else { return NoneUint8Option }  }
/* AnyOptionOption: AnyOption->uint16 */ func MapUint16ToAnyOptionOption(m AnyOptionOption, f func(AnyOption) uint16) Uint16Option {  if m.IsDefined() { return Uint16(f(*m.value)) } else { return NoneUint16Option }  }
/* AnyOptionOption: AnyOption->uint32 */ func MapUint32ToAnyOptionOption(m AnyOptionOption, f func(AnyOption) uint32) Uint32Option {  if m.IsDefined() { return Uint32(f(*m.value)) } else { return NoneUint32Option }  }
/* AnyOptionOption: AnyOption->uint64 */ func MapUint64ToAnyOptionOption(m AnyOptionOption, f func(AnyOption) uint64) Uint64Option {  if m.IsDefined() { return Uint64(f(*m.value)) } else { return NoneUint64Option }  }
/* AnyOptionOption: AnyOption->uintptr */ func MapUintptrToAnyOptionOption(m AnyOptionOption, f func(AnyOption) uintptr) UintptrOption {  if m.IsDefined() { return Uintptr(f(*m.value)) } else { return NoneUintptrOption }  }
/* AnyOptionOption: AnyOption->byte */ func MapByteToAnyOptionOption(m AnyOptionOption, f func(AnyOption) byte) ByteOption {  if m.IsDefined() { return Byte(f(*m.value)) } else { return NoneByteOption }  }
/* AnyOptionOption: AnyOption->rune */ func MapRuneToAnyOptionOption(m AnyOptionOption, f func(AnyOption) rune) RuneOption {  if m.IsDefined() { return Rune(f(*m.value)) } else { return NoneRuneOption }  }
/* AnyOptionOption: AnyOption->float32 */ func MapFloat32ToAnyOptionOption(m AnyOptionOption, f func(AnyOption) float32) Float32Option {  if m.IsDefined() { return Float32(f(*m.value)) } else { return NoneFloat32Option }  }
/* AnyOptionOption: AnyOption->float64 */ func MapFloat64ToAnyOptionOption(m AnyOptionOption, f func(AnyOption) float64) Float64Option {  if m.IsDefined() { return Float64(f(*m.value)) } else { return NoneFloat64Option }  }
/* AnyOptionOption: AnyOption->complex64 */ func MapComplex64ToAnyOptionOption(m AnyOptionOption, f func(AnyOption) complex64) Complex64Option {  if m.IsDefined() { return Complex64(f(*m.value)) } else { return NoneComplex64Option }  }
/* AnyOptionOption: AnyOption->complex128 */ func MapComplex128ToAnyOptionOption(m AnyOptionOption, f func(AnyOption) complex128) Complex128Option {  if m.IsDefined() { return Complex128(f(*m.value)) } else { return NoneComplex128Option }  }
/* AnyOptionOption: AnyOption->Any */ func MapAnyToAnyOptionOption(m AnyOptionOption, f func(AnyOption) Any) AnyOption {  if m.IsDefined() { return AnyOpt(f(*m.value)) } else { return NoneAnyOption }  }
/* AnyOptionOption: AnyOption->BoolOption */ func MapBoolOptionToAnyOptionOption(m AnyOptionOption, f func(AnyOption) BoolOption) BoolOptionOption {  if m.IsDefined() { return BoolBool(f(*m.value)) } else { return NoneBoolOptionOption }  }
/* AnyOptionOption: AnyOption->StringOption */ func MapStringOptionToAnyOptionOption(m AnyOptionOption, f func(AnyOption) StringOption) StringOptionOption {  if m.IsDefined() { return StringString(f(*m.value)) } else { return NoneStringOptionOption }  }
/* AnyOptionOption: AnyOption->IntOption */ func MapIntOptionToAnyOptionOption(m AnyOptionOption, f func(AnyOption) IntOption) IntOptionOption {  if m.IsDefined() { return IntInt(f(*m.value)) } else { return NoneIntOptionOption }  }
/* AnyOptionOption: AnyOption->Int8Option */ func MapInt8OptionToAnyOptionOption(m AnyOptionOption, f func(AnyOption) Int8Option) Int8OptionOption {  if m.IsDefined() { return Int8Int8(f(*m.value)) } else { return NoneInt8OptionOption }  }
/* AnyOptionOption: AnyOption->Int16Option */ func MapInt16OptionToAnyOptionOption(m AnyOptionOption, f func(AnyOption) Int16Option) Int16OptionOption {  if m.IsDefined() { return Int16Int16(f(*m.value)) } else { return NoneInt16OptionOption }  }
/* AnyOptionOption: AnyOption->Int32Option */ func MapInt32OptionToAnyOptionOption(m AnyOptionOption, f func(AnyOption) Int32Option) Int32OptionOption {  if m.IsDefined() { return Int32Int32(f(*m.value)) } else { return NoneInt32OptionOption }  }
/* AnyOptionOption: AnyOption->Int64Option */ func MapInt64OptionToAnyOptionOption(m AnyOptionOption, f func(AnyOption) Int64Option) Int64OptionOption {  if m.IsDefined() { return Int64Int64(f(*m.value)) } else { return NoneInt64OptionOption }  }
/* AnyOptionOption: AnyOption->UintOption */ func MapUintOptionToAnyOptionOption(m AnyOptionOption, f func(AnyOption) UintOption) UintOptionOption {  if m.IsDefined() { return UintUint(f(*m.value)) } else { return NoneUintOptionOption }  }
/* AnyOptionOption: AnyOption->Uint8Option */ func MapUint8OptionToAnyOptionOption(m AnyOptionOption, f func(AnyOption) Uint8Option) Uint8OptionOption {  if m.IsDefined() { return Uint8Uint8(f(*m.value)) } else { return NoneUint8OptionOption }  }
/* AnyOptionOption: AnyOption->Uint16Option */ func MapUint16OptionToAnyOptionOption(m AnyOptionOption, f func(AnyOption) Uint16Option) Uint16OptionOption {  if m.IsDefined() { return Uint16Uint16(f(*m.value)) } else { return NoneUint16OptionOption }  }
/* AnyOptionOption: AnyOption->Uint32Option */ func MapUint32OptionToAnyOptionOption(m AnyOptionOption, f func(AnyOption) Uint32Option) Uint32OptionOption {  if m.IsDefined() { return Uint32Uint32(f(*m.value)) } else { return NoneUint32OptionOption }  }
/* AnyOptionOption: AnyOption->Uint64Option */ func MapUint64OptionToAnyOptionOption(m AnyOptionOption, f func(AnyOption) Uint64Option) Uint64OptionOption {  if m.IsDefined() { return Uint64Uint64(f(*m.value)) } else { return NoneUint64OptionOption }  }
/* AnyOptionOption: AnyOption->UintptrOption */ func MapUintptrOptionToAnyOptionOption(m AnyOptionOption, f func(AnyOption) UintptrOption) UintptrOptionOption {  if m.IsDefined() { return UintptrUintptr(f(*m.value)) } else { return NoneUintptrOptionOption }  }
/* AnyOptionOption: AnyOption->ByteOption */ func MapByteOptionToAnyOptionOption(m AnyOptionOption, f func(AnyOption) ByteOption) ByteOptionOption {  if m.IsDefined() { return ByteByte(f(*m.value)) } else { return NoneByteOptionOption }  }
/* AnyOptionOption: AnyOption->RuneOption */ func MapRuneOptionToAnyOptionOption(m AnyOptionOption, f func(AnyOption) RuneOption) RuneOptionOption {  if m.IsDefined() { return RuneRune(f(*m.value)) } else { return NoneRuneOptionOption }  }
/* AnyOptionOption: AnyOption->Float32Option */ func MapFloat32OptionToAnyOptionOption(m AnyOptionOption, f func(AnyOption) Float32Option) Float32OptionOption {  if m.IsDefined() { return Float32Float32(f(*m.value)) } else { return NoneFloat32OptionOption }  }
/* AnyOptionOption: AnyOption->Float64Option */ func MapFloat64OptionToAnyOptionOption(m AnyOptionOption, f func(AnyOption) Float64Option) Float64OptionOption {  if m.IsDefined() { return Float64Float64(f(*m.value)) } else { return NoneFloat64OptionOption }  }
/* AnyOptionOption: AnyOption->Complex64Option */ func MapComplex64OptionToAnyOptionOption(m AnyOptionOption, f func(AnyOption) Complex64Option) Complex64OptionOption {  if m.IsDefined() { return Complex64Complex64(f(*m.value)) } else { return NoneComplex64OptionOption }  }
/* AnyOptionOption: AnyOption->Complex128Option */ func MapComplex128OptionToAnyOptionOption(m AnyOptionOption, f func(AnyOption) Complex128Option) Complex128OptionOption {  if m.IsDefined() { return Complex128Complex128(f(*m.value)) } else { return NoneComplex128OptionOption }  }
/* AnyOptionOption: AnyOption->AnyOption */ func MapAnyOptionToAnyOptionOption(m AnyOptionOption, f func(AnyOption) AnyOption) AnyOptionOption {  if m.IsDefined() { return AnyOptAny(f(*m.value)) } else { return NoneAnyOptionOption }  }
/* AnyOptionOption: AnyOption->[]bool */ func MapBoolArrToAnyOptionOption(m AnyOptionOption, f func(AnyOption) []bool) BoolArrOption {  if m.IsDefined() { return BoolArrOpt(f(*m.value)) } else { return NoneBoolArrOption }  }
/* AnyOptionOption: AnyOption->[]string */ func MapStringArrToAnyOptionOption(m AnyOptionOption, f func(AnyOption) []string) StringArrOption {  if m.IsDefined() { return StringArrOpt(f(*m.value)) } else { return NoneStringArrOption }  }
/* AnyOptionOption: AnyOption->[]int */ func MapIntArrToAnyOptionOption(m AnyOptionOption, f func(AnyOption) []int) IntArrOption {  if m.IsDefined() { return IntArrOpt(f(*m.value)) } else { return NoneIntArrOption }  }
/* AnyOptionOption: AnyOption->[]int8 */ func MapInt8ArrToAnyOptionOption(m AnyOptionOption, f func(AnyOption) []int8) Int8ArrOption {  if m.IsDefined() { return Int8ArrOpt(f(*m.value)) } else { return NoneInt8ArrOption }  }
/* AnyOptionOption: AnyOption->[]int16 */ func MapInt16ArrToAnyOptionOption(m AnyOptionOption, f func(AnyOption) []int16) Int16ArrOption {  if m.IsDefined() { return Int16ArrOpt(f(*m.value)) } else { return NoneInt16ArrOption }  }
/* AnyOptionOption: AnyOption->[]int32 */ func MapInt32ArrToAnyOptionOption(m AnyOptionOption, f func(AnyOption) []int32) Int32ArrOption {  if m.IsDefined() { return Int32ArrOpt(f(*m.value)) } else { return NoneInt32ArrOption }  }
/* AnyOptionOption: AnyOption->[]int64 */ func MapInt64ArrToAnyOptionOption(m AnyOptionOption, f func(AnyOption) []int64) Int64ArrOption {  if m.IsDefined() { return Int64ArrOpt(f(*m.value)) } else { return NoneInt64ArrOption }  }
/* AnyOptionOption: AnyOption->[]uint */ func MapUintArrToAnyOptionOption(m AnyOptionOption, f func(AnyOption) []uint) UintArrOption {  if m.IsDefined() { return UintArrOpt(f(*m.value)) } else { return NoneUintArrOption }  }
/* AnyOptionOption: AnyOption->[]uint8 */ func MapUint8ArrToAnyOptionOption(m AnyOptionOption, f func(AnyOption) []uint8) Uint8ArrOption {  if m.IsDefined() { return Uint8ArrOpt(f(*m.value)) } else { return NoneUint8ArrOption }  }
/* AnyOptionOption: AnyOption->[]uint16 */ func MapUint16ArrToAnyOptionOption(m AnyOptionOption, f func(AnyOption) []uint16) Uint16ArrOption {  if m.IsDefined() { return Uint16ArrOpt(f(*m.value)) } else { return NoneUint16ArrOption }  }
/* AnyOptionOption: AnyOption->[]uint32 */ func MapUint32ArrToAnyOptionOption(m AnyOptionOption, f func(AnyOption) []uint32) Uint32ArrOption {  if m.IsDefined() { return Uint32ArrOpt(f(*m.value)) } else { return NoneUint32ArrOption }  }
/* AnyOptionOption: AnyOption->[]uint64 */ func MapUint64ArrToAnyOptionOption(m AnyOptionOption, f func(AnyOption) []uint64) Uint64ArrOption {  if m.IsDefined() { return Uint64ArrOpt(f(*m.value)) } else { return NoneUint64ArrOption }  }
/* AnyOptionOption: AnyOption->[]uintptr */ func MapUintptrArrToAnyOptionOption(m AnyOptionOption, f func(AnyOption) []uintptr) UintptrArrOption {  if m.IsDefined() { return UintptrArrOpt(f(*m.value)) } else { return NoneUintptrArrOption }  }
/* AnyOptionOption: AnyOption->[]byte */ func MapByteArrToAnyOptionOption(m AnyOptionOption, f func(AnyOption) []byte) ByteArrOption {  if m.IsDefined() { return ByteArrOpt(f(*m.value)) } else { return NoneByteArrOption }  }
/* AnyOptionOption: AnyOption->[]rune */ func MapRuneArrToAnyOptionOption(m AnyOptionOption, f func(AnyOption) []rune) RuneArrOption {  if m.IsDefined() { return RuneArrOpt(f(*m.value)) } else { return NoneRuneArrOption }  }
/* AnyOptionOption: AnyOption->[]float32 */ func MapFloat32ArrToAnyOptionOption(m AnyOptionOption, f func(AnyOption) []float32) Float32ArrOption {  if m.IsDefined() { return Float32ArrOpt(f(*m.value)) } else { return NoneFloat32ArrOption }  }
/* AnyOptionOption: AnyOption->[]float64 */ func MapFloat64ArrToAnyOptionOption(m AnyOptionOption, f func(AnyOption) []float64) Float64ArrOption {  if m.IsDefined() { return Float64ArrOpt(f(*m.value)) } else { return NoneFloat64ArrOption }  }
/* AnyOptionOption: AnyOption->[]complex64 */ func MapComplex64ArrToAnyOptionOption(m AnyOptionOption, f func(AnyOption) []complex64) Complex64ArrOption {  if m.IsDefined() { return Complex64ArrOpt(f(*m.value)) } else { return NoneComplex64ArrOption }  }
/* AnyOptionOption: AnyOption->[]complex128 */ func MapComplex128ArrToAnyOptionOption(m AnyOptionOption, f func(AnyOption) []complex128) Complex128ArrOption {  if m.IsDefined() { return Complex128ArrOpt(f(*m.value)) } else { return NoneComplex128ArrOption }  }
/* AnyOptionOption: AnyOption->[]Any */ func MapAnyArrToAnyOptionOption(m AnyOptionOption, f func(AnyOption) []Any) AnyArrOption {  if m.IsDefined() { return AnyArrOpt(f(*m.value)) } else { return NoneAnyArrOption }  }
/* AnyOptionOption: AnyOption->BoolList */ func MapBoolListToAnyOptionOption(m AnyOptionOption, f func(AnyOption) BoolList) BoolListOption {  if m.IsDefined() { return BoolListOpt(f(*m.value)) } else { return NoneBoolListOption }  }
/* AnyOptionOption: AnyOption->StringList */ func MapStringListToAnyOptionOption(m AnyOptionOption, f func(AnyOption) StringList) StringListOption {  if m.IsDefined() { return StringListOpt(f(*m.value)) } else { return NoneStringListOption }  }
/* AnyOptionOption: AnyOption->IntList */ func MapIntListToAnyOptionOption(m AnyOptionOption, f func(AnyOption) IntList) IntListOption {  if m.IsDefined() { return IntListOpt(f(*m.value)) } else { return NoneIntListOption }  }
/* AnyOptionOption: AnyOption->Int8List */ func MapInt8ListToAnyOptionOption(m AnyOptionOption, f func(AnyOption) Int8List) Int8ListOption {  if m.IsDefined() { return Int8ListOpt(f(*m.value)) } else { return NoneInt8ListOption }  }
/* AnyOptionOption: AnyOption->Int16List */ func MapInt16ListToAnyOptionOption(m AnyOptionOption, f func(AnyOption) Int16List) Int16ListOption {  if m.IsDefined() { return Int16ListOpt(f(*m.value)) } else { return NoneInt16ListOption }  }
/* AnyOptionOption: AnyOption->Int32List */ func MapInt32ListToAnyOptionOption(m AnyOptionOption, f func(AnyOption) Int32List) Int32ListOption {  if m.IsDefined() { return Int32ListOpt(f(*m.value)) } else { return NoneInt32ListOption }  }
/* AnyOptionOption: AnyOption->Int64List */ func MapInt64ListToAnyOptionOption(m AnyOptionOption, f func(AnyOption) Int64List) Int64ListOption {  if m.IsDefined() { return Int64ListOpt(f(*m.value)) } else { return NoneInt64ListOption }  }
/* AnyOptionOption: AnyOption->UintList */ func MapUintListToAnyOptionOption(m AnyOptionOption, f func(AnyOption) UintList) UintListOption {  if m.IsDefined() { return UintListOpt(f(*m.value)) } else { return NoneUintListOption }  }
/* AnyOptionOption: AnyOption->Uint8List */ func MapUint8ListToAnyOptionOption(m AnyOptionOption, f func(AnyOption) Uint8List) Uint8ListOption {  if m.IsDefined() { return Uint8ListOpt(f(*m.value)) } else { return NoneUint8ListOption }  }
/* AnyOptionOption: AnyOption->Uint16List */ func MapUint16ListToAnyOptionOption(m AnyOptionOption, f func(AnyOption) Uint16List) Uint16ListOption {  if m.IsDefined() { return Uint16ListOpt(f(*m.value)) } else { return NoneUint16ListOption }  }
/* AnyOptionOption: AnyOption->Uint32List */ func MapUint32ListToAnyOptionOption(m AnyOptionOption, f func(AnyOption) Uint32List) Uint32ListOption {  if m.IsDefined() { return Uint32ListOpt(f(*m.value)) } else { return NoneUint32ListOption }  }
/* AnyOptionOption: AnyOption->Uint64List */ func MapUint64ListToAnyOptionOption(m AnyOptionOption, f func(AnyOption) Uint64List) Uint64ListOption {  if m.IsDefined() { return Uint64ListOpt(f(*m.value)) } else { return NoneUint64ListOption }  }
/* AnyOptionOption: AnyOption->UintptrList */ func MapUintptrListToAnyOptionOption(m AnyOptionOption, f func(AnyOption) UintptrList) UintptrListOption {  if m.IsDefined() { return UintptrListOpt(f(*m.value)) } else { return NoneUintptrListOption }  }
/* AnyOptionOption: AnyOption->ByteList */ func MapByteListToAnyOptionOption(m AnyOptionOption, f func(AnyOption) ByteList) ByteListOption {  if m.IsDefined() { return ByteListOpt(f(*m.value)) } else { return NoneByteListOption }  }
/* AnyOptionOption: AnyOption->RuneList */ func MapRuneListToAnyOptionOption(m AnyOptionOption, f func(AnyOption) RuneList) RuneListOption {  if m.IsDefined() { return RuneListOpt(f(*m.value)) } else { return NoneRuneListOption }  }
/* AnyOptionOption: AnyOption->Float32List */ func MapFloat32ListToAnyOptionOption(m AnyOptionOption, f func(AnyOption) Float32List) Float32ListOption {  if m.IsDefined() { return Float32ListOpt(f(*m.value)) } else { return NoneFloat32ListOption }  }
/* AnyOptionOption: AnyOption->Float64List */ func MapFloat64ListToAnyOptionOption(m AnyOptionOption, f func(AnyOption) Float64List) Float64ListOption {  if m.IsDefined() { return Float64ListOpt(f(*m.value)) } else { return NoneFloat64ListOption }  }
/* AnyOptionOption: AnyOption->Complex64List */ func MapComplex64ListToAnyOptionOption(m AnyOptionOption, f func(AnyOption) Complex64List) Complex64ListOption {  if m.IsDefined() { return Complex64ListOpt(f(*m.value)) } else { return NoneComplex64ListOption }  }
/* AnyOptionOption: AnyOption->Complex128List */ func MapComplex128ListToAnyOptionOption(m AnyOptionOption, f func(AnyOption) Complex128List) Complex128ListOption {  if m.IsDefined() { return Complex128ListOpt(f(*m.value)) } else { return NoneComplex128ListOption }  }
/* AnyOptionOption: AnyOption->AnyList */ func MapAnyListToAnyOptionOption(m AnyOptionOption, f func(AnyOption) AnyList) AnyListOption {  if m.IsDefined() { return AnyListOpt(f(*m.value)) } else { return NoneAnyListOption }  }