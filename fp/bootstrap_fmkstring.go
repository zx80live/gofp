// bootstrap_fmkstring.go
// DO NOT EDIT THIS FILE WAS GENERATED AUTOMATICALLY BY https://github.com/zx80live/gofp-bootstrap

package fp

import "fmt"

func MkStringBoolArr(o []bool, start, sep, end string) string {

	content := ""
	for _, e := range o {
		content = fmt.Sprintf("%v%v%v", content, BoolToString(e), sep)
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringStringArr(o []string, start, sep, end string) string {

	content := ""
	for _, e := range o {
		content = fmt.Sprintf("%v%v%v", content, StringToString(e), sep)
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringIntArr(o []int, start, sep, end string) string {

	content := ""
	for _, e := range o {
		content = fmt.Sprintf("%v%v%v", content, IntToString(e), sep)
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringInt8Arr(o []int8, start, sep, end string) string {

	content := ""
	for _, e := range o {
		content = fmt.Sprintf("%v%v%v", content, Int8ToString(e), sep)
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringInt16Arr(o []int16, start, sep, end string) string {

	content := ""
	for _, e := range o {
		content = fmt.Sprintf("%v%v%v", content, Int16ToString(e), sep)
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringInt32Arr(o []int32, start, sep, end string) string {

	content := ""
	for _, e := range o {
		content = fmt.Sprintf("%v%v%v", content, Int32ToString(e), sep)
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringInt64Arr(o []int64, start, sep, end string) string {

	content := ""
	for _, e := range o {
		content = fmt.Sprintf("%v%v%v", content, Int64ToString(e), sep)
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUintArr(o []uint, start, sep, end string) string {

	content := ""
	for _, e := range o {
		content = fmt.Sprintf("%v%v%v", content, UintToString(e), sep)
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUint8Arr(o []uint8, start, sep, end string) string {

	content := ""
	for _, e := range o {
		content = fmt.Sprintf("%v%v%v", content, Uint8ToString(e), sep)
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUint16Arr(o []uint16, start, sep, end string) string {

	content := ""
	for _, e := range o {
		content = fmt.Sprintf("%v%v%v", content, Uint16ToString(e), sep)
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUint32Arr(o []uint32, start, sep, end string) string {

	content := ""
	for _, e := range o {
		content = fmt.Sprintf("%v%v%v", content, Uint32ToString(e), sep)
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUint64Arr(o []uint64, start, sep, end string) string {

	content := ""
	for _, e := range o {
		content = fmt.Sprintf("%v%v%v", content, Uint64ToString(e), sep)
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUintptrArr(o []uintptr, start, sep, end string) string {

	content := ""
	for _, e := range o {
		content = fmt.Sprintf("%v%v%v", content, UintptrToString(e), sep)
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringByteArr(o []byte, start, sep, end string) string {

	content := ""
	for _, e := range o {
		content = fmt.Sprintf("%v%v%v", content, ByteToString(e), sep)
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringRuneArr(o []rune, start, sep, end string) string {

	content := ""
	for _, e := range o {
		content = fmt.Sprintf("%v%v%v", content, RuneToString(e), sep)
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringFloat32Arr(o []float32, start, sep, end string) string {

	content := ""
	for _, e := range o {
		content = fmt.Sprintf("%v%v%v", content, Float32ToString(e), sep)
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringFloat64Arr(o []float64, start, sep, end string) string {

	content := ""
	for _, e := range o {
		content = fmt.Sprintf("%v%v%v", content, Float64ToString(e), sep)
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringComplex64Arr(o []complex64, start, sep, end string) string {

	content := ""
	for _, e := range o {
		content = fmt.Sprintf("%v%v%v", content, Complex64ToString(e), sep)
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringComplex128Arr(o []complex128, start, sep, end string) string {

	content := ""
	for _, e := range o {
		content = fmt.Sprintf("%v%v%v", content, Complex128ToString(e), sep)
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringAnyArr(o []Any, start, sep, end string) string {

	content := ""
	for _, e := range o {
		content = fmt.Sprintf("%v%v%v", content, AnyToString(e), sep)
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringBoolArrArr(o [][]bool, start, sep, end string) string {

	content := ""
	for _, e := range o {
		content = fmt.Sprintf("%v%v%v", content, BoolArrToString(e), sep)
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringStringArrArr(o [][]string, start, sep, end string) string {

	content := ""
	for _, e := range o {
		content = fmt.Sprintf("%v%v%v", content, StringArrToString(e), sep)
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringIntArrArr(o [][]int, start, sep, end string) string {

	content := ""
	for _, e := range o {
		content = fmt.Sprintf("%v%v%v", content, IntArrToString(e), sep)
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringInt8ArrArr(o [][]int8, start, sep, end string) string {

	content := ""
	for _, e := range o {
		content = fmt.Sprintf("%v%v%v", content, Int8ArrToString(e), sep)
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringInt16ArrArr(o [][]int16, start, sep, end string) string {

	content := ""
	for _, e := range o {
		content = fmt.Sprintf("%v%v%v", content, Int16ArrToString(e), sep)
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringInt32ArrArr(o [][]int32, start, sep, end string) string {

	content := ""
	for _, e := range o {
		content = fmt.Sprintf("%v%v%v", content, Int32ArrToString(e), sep)
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringInt64ArrArr(o [][]int64, start, sep, end string) string {

	content := ""
	for _, e := range o {
		content = fmt.Sprintf("%v%v%v", content, Int64ArrToString(e), sep)
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUintArrArr(o [][]uint, start, sep, end string) string {

	content := ""
	for _, e := range o {
		content = fmt.Sprintf("%v%v%v", content, UintArrToString(e), sep)
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUint8ArrArr(o [][]uint8, start, sep, end string) string {

	content := ""
	for _, e := range o {
		content = fmt.Sprintf("%v%v%v", content, Uint8ArrToString(e), sep)
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUint16ArrArr(o [][]uint16, start, sep, end string) string {

	content := ""
	for _, e := range o {
		content = fmt.Sprintf("%v%v%v", content, Uint16ArrToString(e), sep)
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUint32ArrArr(o [][]uint32, start, sep, end string) string {

	content := ""
	for _, e := range o {
		content = fmt.Sprintf("%v%v%v", content, Uint32ArrToString(e), sep)
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUint64ArrArr(o [][]uint64, start, sep, end string) string {

	content := ""
	for _, e := range o {
		content = fmt.Sprintf("%v%v%v", content, Uint64ArrToString(e), sep)
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUintptrArrArr(o [][]uintptr, start, sep, end string) string {

	content := ""
	for _, e := range o {
		content = fmt.Sprintf("%v%v%v", content, UintptrArrToString(e), sep)
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringByteArrArr(o [][]byte, start, sep, end string) string {

	content := ""
	for _, e := range o {
		content = fmt.Sprintf("%v%v%v", content, ByteArrToString(e), sep)
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringRuneArrArr(o [][]rune, start, sep, end string) string {

	content := ""
	for _, e := range o {
		content = fmt.Sprintf("%v%v%v", content, RuneArrToString(e), sep)
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringFloat32ArrArr(o [][]float32, start, sep, end string) string {

	content := ""
	for _, e := range o {
		content = fmt.Sprintf("%v%v%v", content, Float32ArrToString(e), sep)
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringFloat64ArrArr(o [][]float64, start, sep, end string) string {

	content := ""
	for _, e := range o {
		content = fmt.Sprintf("%v%v%v", content, Float64ArrToString(e), sep)
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringComplex64ArrArr(o [][]complex64, start, sep, end string) string {

	content := ""
	for _, e := range o {
		content = fmt.Sprintf("%v%v%v", content, Complex64ArrToString(e), sep)
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringComplex128ArrArr(o [][]complex128, start, sep, end string) string {

	content := ""
	for _, e := range o {
		content = fmt.Sprintf("%v%v%v", content, Complex128ArrToString(e), sep)
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringAnyArrArr(o [][]Any, start, sep, end string) string {

	content := ""
	for _, e := range o {
		content = fmt.Sprintf("%v%v%v", content, AnyArrToString(e), sep)
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringBoolOptionArr(o []BoolOption, start, sep, end string) string {

	content := ""
	for _, e := range o {
		content = fmt.Sprintf("%v%v%v", content, BoolOptionToString(e), sep)
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringStringOptionArr(o []StringOption, start, sep, end string) string {

	content := ""
	for _, e := range o {
		content = fmt.Sprintf("%v%v%v", content, StringOptionToString(e), sep)
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringIntOptionArr(o []IntOption, start, sep, end string) string {

	content := ""
	for _, e := range o {
		content = fmt.Sprintf("%v%v%v", content, IntOptionToString(e), sep)
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringInt8OptionArr(o []Int8Option, start, sep, end string) string {

	content := ""
	for _, e := range o {
		content = fmt.Sprintf("%v%v%v", content, Int8OptionToString(e), sep)
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringInt16OptionArr(o []Int16Option, start, sep, end string) string {

	content := ""
	for _, e := range o {
		content = fmt.Sprintf("%v%v%v", content, Int16OptionToString(e), sep)
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringInt32OptionArr(o []Int32Option, start, sep, end string) string {

	content := ""
	for _, e := range o {
		content = fmt.Sprintf("%v%v%v", content, Int32OptionToString(e), sep)
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringInt64OptionArr(o []Int64Option, start, sep, end string) string {

	content := ""
	for _, e := range o {
		content = fmt.Sprintf("%v%v%v", content, Int64OptionToString(e), sep)
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUintOptionArr(o []UintOption, start, sep, end string) string {

	content := ""
	for _, e := range o {
		content = fmt.Sprintf("%v%v%v", content, UintOptionToString(e), sep)
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUint8OptionArr(o []Uint8Option, start, sep, end string) string {

	content := ""
	for _, e := range o {
		content = fmt.Sprintf("%v%v%v", content, Uint8OptionToString(e), sep)
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUint16OptionArr(o []Uint16Option, start, sep, end string) string {

	content := ""
	for _, e := range o {
		content = fmt.Sprintf("%v%v%v", content, Uint16OptionToString(e), sep)
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUint32OptionArr(o []Uint32Option, start, sep, end string) string {

	content := ""
	for _, e := range o {
		content = fmt.Sprintf("%v%v%v", content, Uint32OptionToString(e), sep)
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUint64OptionArr(o []Uint64Option, start, sep, end string) string {

	content := ""
	for _, e := range o {
		content = fmt.Sprintf("%v%v%v", content, Uint64OptionToString(e), sep)
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUintptrOptionArr(o []UintptrOption, start, sep, end string) string {

	content := ""
	for _, e := range o {
		content = fmt.Sprintf("%v%v%v", content, UintptrOptionToString(e), sep)
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringByteOptionArr(o []ByteOption, start, sep, end string) string {

	content := ""
	for _, e := range o {
		content = fmt.Sprintf("%v%v%v", content, ByteOptionToString(e), sep)
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringRuneOptionArr(o []RuneOption, start, sep, end string) string {

	content := ""
	for _, e := range o {
		content = fmt.Sprintf("%v%v%v", content, RuneOptionToString(e), sep)
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringFloat32OptionArr(o []Float32Option, start, sep, end string) string {

	content := ""
	for _, e := range o {
		content = fmt.Sprintf("%v%v%v", content, Float32OptionToString(e), sep)
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringFloat64OptionArr(o []Float64Option, start, sep, end string) string {

	content := ""
	for _, e := range o {
		content = fmt.Sprintf("%v%v%v", content, Float64OptionToString(e), sep)
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringComplex64OptionArr(o []Complex64Option, start, sep, end string) string {

	content := ""
	for _, e := range o {
		content = fmt.Sprintf("%v%v%v", content, Complex64OptionToString(e), sep)
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringComplex128OptionArr(o []Complex128Option, start, sep, end string) string {

	content := ""
	for _, e := range o {
		content = fmt.Sprintf("%v%v%v", content, Complex128OptionToString(e), sep)
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringAnyOptionArr(o []AnyOption, start, sep, end string) string {

	content := ""
	for _, e := range o {
		content = fmt.Sprintf("%v%v%v", content, AnyOptionToString(e), sep)
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringBoolList(o BoolList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, BoolToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringStringList(o StringList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, StringToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringIntList(o IntList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, IntToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringInt8List(o Int8List, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int8ToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringInt16List(o Int16List, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int16ToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringInt32List(o Int32List, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int32ToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringInt64List(o Int64List, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int64ToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUintList(o UintList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, UintToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUint8List(o Uint8List, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint8ToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUint16List(o Uint16List, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint16ToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUint32List(o Uint32List, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint32ToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUint64List(o Uint64List, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint64ToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUintptrList(o UintptrList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, UintptrToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringByteList(o ByteList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, ByteToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringRuneList(o RuneList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, RuneToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringFloat32List(o Float32List, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Float32ToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringFloat64List(o Float64List, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Float64ToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringComplex64List(o Complex64List, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Complex64ToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringComplex128List(o Complex128List, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Complex128ToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringAnyList(o AnyList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, AnyToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringBoolOptionList(o BoolOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, BoolOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringStringOptionList(o StringOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, StringOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringIntOptionList(o IntOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, IntOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringInt8OptionList(o Int8OptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int8OptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringInt16OptionList(o Int16OptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int16OptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringInt32OptionList(o Int32OptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int32OptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringInt64OptionList(o Int64OptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int64OptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUintOptionList(o UintOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, UintOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUint8OptionList(o Uint8OptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint8OptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUint16OptionList(o Uint16OptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint16OptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUint32OptionList(o Uint32OptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint32OptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUint64OptionList(o Uint64OptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint64OptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUintptrOptionList(o UintptrOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, UintptrOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringByteOptionList(o ByteOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, ByteOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringRuneOptionList(o RuneOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, RuneOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringFloat32OptionList(o Float32OptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Float32OptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringFloat64OptionList(o Float64OptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Float64OptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringComplex64OptionList(o Complex64OptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Complex64OptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringComplex128OptionList(o Complex128OptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Complex128OptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringAnyOptionList(o AnyOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, AnyOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringBoolArrOptionList(o BoolArrOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, BoolArrOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringStringArrOptionList(o StringArrOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, StringArrOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringIntArrOptionList(o IntArrOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, IntArrOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringInt8ArrOptionList(o Int8ArrOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int8ArrOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringInt16ArrOptionList(o Int16ArrOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int16ArrOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringInt32ArrOptionList(o Int32ArrOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int32ArrOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringInt64ArrOptionList(o Int64ArrOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int64ArrOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUintArrOptionList(o UintArrOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, UintArrOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUint8ArrOptionList(o Uint8ArrOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint8ArrOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUint16ArrOptionList(o Uint16ArrOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint16ArrOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUint32ArrOptionList(o Uint32ArrOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint32ArrOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUint64ArrOptionList(o Uint64ArrOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint64ArrOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUintptrArrOptionList(o UintptrArrOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, UintptrArrOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringByteArrOptionList(o ByteArrOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, ByteArrOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringRuneArrOptionList(o RuneArrOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, RuneArrOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringFloat32ArrOptionList(o Float32ArrOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Float32ArrOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringFloat64ArrOptionList(o Float64ArrOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Float64ArrOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringComplex64ArrOptionList(o Complex64ArrOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Complex64ArrOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringComplex128ArrOptionList(o Complex128ArrOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Complex128ArrOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringAnyArrOptionList(o AnyArrOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, AnyArrOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringBoolArrArrOptionList(o BoolArrArrOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, BoolArrArrOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringStringArrArrOptionList(o StringArrArrOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, StringArrArrOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringIntArrArrOptionList(o IntArrArrOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, IntArrArrOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringInt8ArrArrOptionList(o Int8ArrArrOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int8ArrArrOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringInt16ArrArrOptionList(o Int16ArrArrOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int16ArrArrOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringInt32ArrArrOptionList(o Int32ArrArrOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int32ArrArrOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringInt64ArrArrOptionList(o Int64ArrArrOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int64ArrArrOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUintArrArrOptionList(o UintArrArrOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, UintArrArrOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUint8ArrArrOptionList(o Uint8ArrArrOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint8ArrArrOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUint16ArrArrOptionList(o Uint16ArrArrOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint16ArrArrOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUint32ArrArrOptionList(o Uint32ArrArrOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint32ArrArrOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUint64ArrArrOptionList(o Uint64ArrArrOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint64ArrArrOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUintptrArrArrOptionList(o UintptrArrArrOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, UintptrArrArrOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringByteArrArrOptionList(o ByteArrArrOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, ByteArrArrOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringRuneArrArrOptionList(o RuneArrArrOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, RuneArrArrOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringFloat32ArrArrOptionList(o Float32ArrArrOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Float32ArrArrOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringFloat64ArrArrOptionList(o Float64ArrArrOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Float64ArrArrOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringComplex64ArrArrOptionList(o Complex64ArrArrOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Complex64ArrArrOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringComplex128ArrArrOptionList(o Complex128ArrArrOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Complex128ArrArrOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringAnyArrArrOptionList(o AnyArrArrOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, AnyArrArrOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringBoolOptionArrOptionList(o BoolOptionArrOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, BoolOptionArrOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringStringOptionArrOptionList(o StringOptionArrOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, StringOptionArrOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringIntOptionArrOptionList(o IntOptionArrOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, IntOptionArrOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringInt8OptionArrOptionList(o Int8OptionArrOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int8OptionArrOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringInt16OptionArrOptionList(o Int16OptionArrOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int16OptionArrOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringInt32OptionArrOptionList(o Int32OptionArrOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int32OptionArrOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringInt64OptionArrOptionList(o Int64OptionArrOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int64OptionArrOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUintOptionArrOptionList(o UintOptionArrOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, UintOptionArrOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUint8OptionArrOptionList(o Uint8OptionArrOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint8OptionArrOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUint16OptionArrOptionList(o Uint16OptionArrOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint16OptionArrOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUint32OptionArrOptionList(o Uint32OptionArrOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint32OptionArrOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUint64OptionArrOptionList(o Uint64OptionArrOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint64OptionArrOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUintptrOptionArrOptionList(o UintptrOptionArrOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, UintptrOptionArrOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringByteOptionArrOptionList(o ByteOptionArrOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, ByteOptionArrOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringRuneOptionArrOptionList(o RuneOptionArrOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, RuneOptionArrOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringFloat32OptionArrOptionList(o Float32OptionArrOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Float32OptionArrOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringFloat64OptionArrOptionList(o Float64OptionArrOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Float64OptionArrOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringComplex64OptionArrOptionList(o Complex64OptionArrOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Complex64OptionArrOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringComplex128OptionArrOptionList(o Complex128OptionArrOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Complex128OptionArrOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringAnyOptionArrOptionList(o AnyOptionArrOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, AnyOptionArrOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringBoolListOptionList(o BoolListOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, BoolListOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringStringListOptionList(o StringListOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, StringListOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringIntListOptionList(o IntListOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, IntListOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringInt8ListOptionList(o Int8ListOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int8ListOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringInt16ListOptionList(o Int16ListOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int16ListOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringInt32ListOptionList(o Int32ListOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int32ListOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringInt64ListOptionList(o Int64ListOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int64ListOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUintListOptionList(o UintListOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, UintListOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUint8ListOptionList(o Uint8ListOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint8ListOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUint16ListOptionList(o Uint16ListOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint16ListOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUint32ListOptionList(o Uint32ListOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint32ListOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUint64ListOptionList(o Uint64ListOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint64ListOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUintptrListOptionList(o UintptrListOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, UintptrListOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringByteListOptionList(o ByteListOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, ByteListOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringRuneListOptionList(o RuneListOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, RuneListOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringFloat32ListOptionList(o Float32ListOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Float32ListOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringFloat64ListOptionList(o Float64ListOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Float64ListOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringComplex64ListOptionList(o Complex64ListOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Complex64ListOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringComplex128ListOptionList(o Complex128ListOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Complex128ListOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringAnyListOptionList(o AnyListOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, AnyListOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringBoolOptionOptionList(o BoolOptionOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, BoolOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringStringOptionOptionList(o StringOptionOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, StringOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringIntOptionOptionList(o IntOptionOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, IntOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringInt8OptionOptionList(o Int8OptionOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int8OptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringInt16OptionOptionList(o Int16OptionOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int16OptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringInt32OptionOptionList(o Int32OptionOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int32OptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringInt64OptionOptionList(o Int64OptionOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int64OptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUintOptionOptionList(o UintOptionOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, UintOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUint8OptionOptionList(o Uint8OptionOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint8OptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUint16OptionOptionList(o Uint16OptionOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint16OptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUint32OptionOptionList(o Uint32OptionOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint32OptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUint64OptionOptionList(o Uint64OptionOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint64OptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUintptrOptionOptionList(o UintptrOptionOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, UintptrOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringByteOptionOptionList(o ByteOptionOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, ByteOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringRuneOptionOptionList(o RuneOptionOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, RuneOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringFloat32OptionOptionList(o Float32OptionOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Float32OptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringFloat64OptionOptionList(o Float64OptionOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Float64OptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringComplex64OptionOptionList(o Complex64OptionOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Complex64OptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringComplex128OptionOptionList(o Complex128OptionOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Complex128OptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringAnyOptionOptionList(o AnyOptionOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, AnyOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringBoolArrOptionOptionList(o BoolArrOptionOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, BoolArrOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringStringArrOptionOptionList(o StringArrOptionOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, StringArrOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringIntArrOptionOptionList(o IntArrOptionOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, IntArrOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringInt8ArrOptionOptionList(o Int8ArrOptionOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int8ArrOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringInt16ArrOptionOptionList(o Int16ArrOptionOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int16ArrOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringInt32ArrOptionOptionList(o Int32ArrOptionOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int32ArrOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringInt64ArrOptionOptionList(o Int64ArrOptionOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int64ArrOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUintArrOptionOptionList(o UintArrOptionOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, UintArrOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUint8ArrOptionOptionList(o Uint8ArrOptionOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint8ArrOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUint16ArrOptionOptionList(o Uint16ArrOptionOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint16ArrOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUint32ArrOptionOptionList(o Uint32ArrOptionOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint32ArrOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUint64ArrOptionOptionList(o Uint64ArrOptionOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint64ArrOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUintptrArrOptionOptionList(o UintptrArrOptionOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, UintptrArrOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringByteArrOptionOptionList(o ByteArrOptionOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, ByteArrOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringRuneArrOptionOptionList(o RuneArrOptionOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, RuneArrOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringFloat32ArrOptionOptionList(o Float32ArrOptionOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Float32ArrOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringFloat64ArrOptionOptionList(o Float64ArrOptionOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Float64ArrOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringComplex64ArrOptionOptionList(o Complex64ArrOptionOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Complex64ArrOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringComplex128ArrOptionOptionList(o Complex128ArrOptionOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Complex128ArrOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringAnyArrOptionOptionList(o AnyArrOptionOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, AnyArrOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringBoolArrArrOptionOptionList(o BoolArrArrOptionOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, BoolArrArrOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringStringArrArrOptionOptionList(o StringArrArrOptionOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, StringArrArrOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringIntArrArrOptionOptionList(o IntArrArrOptionOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, IntArrArrOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringInt8ArrArrOptionOptionList(o Int8ArrArrOptionOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int8ArrArrOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringInt16ArrArrOptionOptionList(o Int16ArrArrOptionOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int16ArrArrOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringInt32ArrArrOptionOptionList(o Int32ArrArrOptionOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int32ArrArrOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringInt64ArrArrOptionOptionList(o Int64ArrArrOptionOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int64ArrArrOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUintArrArrOptionOptionList(o UintArrArrOptionOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, UintArrArrOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUint8ArrArrOptionOptionList(o Uint8ArrArrOptionOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint8ArrArrOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUint16ArrArrOptionOptionList(o Uint16ArrArrOptionOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint16ArrArrOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUint32ArrArrOptionOptionList(o Uint32ArrArrOptionOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint32ArrArrOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUint64ArrArrOptionOptionList(o Uint64ArrArrOptionOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint64ArrArrOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUintptrArrArrOptionOptionList(o UintptrArrArrOptionOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, UintptrArrArrOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringByteArrArrOptionOptionList(o ByteArrArrOptionOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, ByteArrArrOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringRuneArrArrOptionOptionList(o RuneArrArrOptionOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, RuneArrArrOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringFloat32ArrArrOptionOptionList(o Float32ArrArrOptionOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Float32ArrArrOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringFloat64ArrArrOptionOptionList(o Float64ArrArrOptionOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Float64ArrArrOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringComplex64ArrArrOptionOptionList(o Complex64ArrArrOptionOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Complex64ArrArrOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringComplex128ArrArrOptionOptionList(o Complex128ArrArrOptionOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Complex128ArrArrOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringAnyArrArrOptionOptionList(o AnyArrArrOptionOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, AnyArrArrOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringBoolOptionArrOptionOptionList(o BoolOptionArrOptionOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, BoolOptionArrOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringStringOptionArrOptionOptionList(o StringOptionArrOptionOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, StringOptionArrOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringIntOptionArrOptionOptionList(o IntOptionArrOptionOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, IntOptionArrOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringInt8OptionArrOptionOptionList(o Int8OptionArrOptionOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int8OptionArrOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringInt16OptionArrOptionOptionList(o Int16OptionArrOptionOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int16OptionArrOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringInt32OptionArrOptionOptionList(o Int32OptionArrOptionOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int32OptionArrOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringInt64OptionArrOptionOptionList(o Int64OptionArrOptionOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int64OptionArrOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUintOptionArrOptionOptionList(o UintOptionArrOptionOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, UintOptionArrOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUint8OptionArrOptionOptionList(o Uint8OptionArrOptionOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint8OptionArrOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUint16OptionArrOptionOptionList(o Uint16OptionArrOptionOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint16OptionArrOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUint32OptionArrOptionOptionList(o Uint32OptionArrOptionOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint32OptionArrOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUint64OptionArrOptionOptionList(o Uint64OptionArrOptionOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint64OptionArrOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUintptrOptionArrOptionOptionList(o UintptrOptionArrOptionOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, UintptrOptionArrOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringByteOptionArrOptionOptionList(o ByteOptionArrOptionOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, ByteOptionArrOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringRuneOptionArrOptionOptionList(o RuneOptionArrOptionOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, RuneOptionArrOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringFloat32OptionArrOptionOptionList(o Float32OptionArrOptionOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Float32OptionArrOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringFloat64OptionArrOptionOptionList(o Float64OptionArrOptionOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Float64OptionArrOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringComplex64OptionArrOptionOptionList(o Complex64OptionArrOptionOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Complex64OptionArrOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringComplex128OptionArrOptionOptionList(o Complex128OptionArrOptionOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Complex128OptionArrOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringAnyOptionArrOptionOptionList(o AnyOptionArrOptionOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, AnyOptionArrOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringBoolListOptionOptionList(o BoolListOptionOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, BoolListOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringStringListOptionOptionList(o StringListOptionOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, StringListOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringIntListOptionOptionList(o IntListOptionOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, IntListOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringInt8ListOptionOptionList(o Int8ListOptionOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int8ListOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringInt16ListOptionOptionList(o Int16ListOptionOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int16ListOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringInt32ListOptionOptionList(o Int32ListOptionOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int32ListOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringInt64ListOptionOptionList(o Int64ListOptionOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int64ListOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUintListOptionOptionList(o UintListOptionOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, UintListOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUint8ListOptionOptionList(o Uint8ListOptionOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint8ListOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUint16ListOptionOptionList(o Uint16ListOptionOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint16ListOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUint32ListOptionOptionList(o Uint32ListOptionOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint32ListOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUint64ListOptionOptionList(o Uint64ListOptionOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint64ListOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUintptrListOptionOptionList(o UintptrListOptionOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, UintptrListOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringByteListOptionOptionList(o ByteListOptionOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, ByteListOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringRuneListOptionOptionList(o RuneListOptionOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, RuneListOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringFloat32ListOptionOptionList(o Float32ListOptionOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Float32ListOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringFloat64ListOptionOptionList(o Float64ListOptionOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Float64ListOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringComplex64ListOptionOptionList(o Complex64ListOptionOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Complex64ListOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringComplex128ListOptionOptionList(o Complex128ListOptionOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Complex128ListOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringAnyListOptionOptionList(o AnyListOptionOptionList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, AnyListOptionOptionToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringBoolArrList(o BoolArrList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, BoolArrToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringStringArrList(o StringArrList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, StringArrToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringIntArrList(o IntArrList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, IntArrToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringInt8ArrList(o Int8ArrList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int8ArrToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringInt16ArrList(o Int16ArrList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int16ArrToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringInt32ArrList(o Int32ArrList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int32ArrToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringInt64ArrList(o Int64ArrList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int64ArrToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUintArrList(o UintArrList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, UintArrToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUint8ArrList(o Uint8ArrList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint8ArrToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUint16ArrList(o Uint16ArrList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint16ArrToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUint32ArrList(o Uint32ArrList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint32ArrToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUint64ArrList(o Uint64ArrList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint64ArrToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUintptrArrList(o UintptrArrList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, UintptrArrToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringByteArrList(o ByteArrList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, ByteArrToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringRuneArrList(o RuneArrList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, RuneArrToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringFloat32ArrList(o Float32ArrList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Float32ArrToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringFloat64ArrList(o Float64ArrList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Float64ArrToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringComplex64ArrList(o Complex64ArrList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Complex64ArrToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringComplex128ArrList(o Complex128ArrList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Complex128ArrToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringAnyArrList(o AnyArrList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, AnyArrToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringBoolArrArrList(o BoolArrArrList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, BoolArrArrToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringStringArrArrList(o StringArrArrList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, StringArrArrToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringIntArrArrList(o IntArrArrList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, IntArrArrToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringInt8ArrArrList(o Int8ArrArrList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int8ArrArrToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringInt16ArrArrList(o Int16ArrArrList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int16ArrArrToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringInt32ArrArrList(o Int32ArrArrList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int32ArrArrToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringInt64ArrArrList(o Int64ArrArrList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int64ArrArrToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUintArrArrList(o UintArrArrList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, UintArrArrToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUint8ArrArrList(o Uint8ArrArrList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint8ArrArrToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUint16ArrArrList(o Uint16ArrArrList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint16ArrArrToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUint32ArrArrList(o Uint32ArrArrList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint32ArrArrToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUint64ArrArrList(o Uint64ArrArrList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint64ArrArrToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUintptrArrArrList(o UintptrArrArrList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, UintptrArrArrToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringByteArrArrList(o ByteArrArrList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, ByteArrArrToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringRuneArrArrList(o RuneArrArrList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, RuneArrArrToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringFloat32ArrArrList(o Float32ArrArrList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Float32ArrArrToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringFloat64ArrArrList(o Float64ArrArrList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Float64ArrArrToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringComplex64ArrArrList(o Complex64ArrArrList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Complex64ArrArrToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringComplex128ArrArrList(o Complex128ArrArrList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Complex128ArrArrToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringAnyArrArrList(o AnyArrArrList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, AnyArrArrToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringBoolOptionArrList(o BoolOptionArrList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, BoolOptionArrToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringStringOptionArrList(o StringOptionArrList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, StringOptionArrToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringIntOptionArrList(o IntOptionArrList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, IntOptionArrToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringInt8OptionArrList(o Int8OptionArrList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int8OptionArrToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringInt16OptionArrList(o Int16OptionArrList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int16OptionArrToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringInt32OptionArrList(o Int32OptionArrList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int32OptionArrToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringInt64OptionArrList(o Int64OptionArrList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int64OptionArrToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUintOptionArrList(o UintOptionArrList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, UintOptionArrToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUint8OptionArrList(o Uint8OptionArrList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint8OptionArrToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUint16OptionArrList(o Uint16OptionArrList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint16OptionArrToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUint32OptionArrList(o Uint32OptionArrList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint32OptionArrToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUint64OptionArrList(o Uint64OptionArrList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint64OptionArrToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUintptrOptionArrList(o UintptrOptionArrList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, UintptrOptionArrToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringByteOptionArrList(o ByteOptionArrList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, ByteOptionArrToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringRuneOptionArrList(o RuneOptionArrList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, RuneOptionArrToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringFloat32OptionArrList(o Float32OptionArrList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Float32OptionArrToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringFloat64OptionArrList(o Float64OptionArrList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Float64OptionArrToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringComplex64OptionArrList(o Complex64OptionArrList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Complex64OptionArrToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringComplex128OptionArrList(o Complex128OptionArrList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Complex128OptionArrToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringAnyOptionArrList(o AnyOptionArrList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, AnyOptionArrToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringBoolListList(o BoolListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, BoolListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringStringListList(o StringListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, StringListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringIntListList(o IntListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, IntListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringInt8ListList(o Int8ListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int8ListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringInt16ListList(o Int16ListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int16ListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringInt32ListList(o Int32ListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int32ListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringInt64ListList(o Int64ListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int64ListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUintListList(o UintListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, UintListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUint8ListList(o Uint8ListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint8ListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUint16ListList(o Uint16ListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint16ListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUint32ListList(o Uint32ListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint32ListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUint64ListList(o Uint64ListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint64ListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUintptrListList(o UintptrListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, UintptrListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringByteListList(o ByteListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, ByteListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringRuneListList(o RuneListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, RuneListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringFloat32ListList(o Float32ListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Float32ListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringFloat64ListList(o Float64ListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Float64ListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringComplex64ListList(o Complex64ListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Complex64ListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringComplex128ListList(o Complex128ListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Complex128ListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringAnyListList(o AnyListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, AnyListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringBoolOptionListList(o BoolOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, BoolOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringStringOptionListList(o StringOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, StringOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringIntOptionListList(o IntOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, IntOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringInt8OptionListList(o Int8OptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int8OptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringInt16OptionListList(o Int16OptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int16OptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringInt32OptionListList(o Int32OptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int32OptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringInt64OptionListList(o Int64OptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int64OptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUintOptionListList(o UintOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, UintOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUint8OptionListList(o Uint8OptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint8OptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUint16OptionListList(o Uint16OptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint16OptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUint32OptionListList(o Uint32OptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint32OptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUint64OptionListList(o Uint64OptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint64OptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUintptrOptionListList(o UintptrOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, UintptrOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringByteOptionListList(o ByteOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, ByteOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringRuneOptionListList(o RuneOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, RuneOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringFloat32OptionListList(o Float32OptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Float32OptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringFloat64OptionListList(o Float64OptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Float64OptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringComplex64OptionListList(o Complex64OptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Complex64OptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringComplex128OptionListList(o Complex128OptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Complex128OptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringAnyOptionListList(o AnyOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, AnyOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringBoolArrOptionListList(o BoolArrOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, BoolArrOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringStringArrOptionListList(o StringArrOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, StringArrOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringIntArrOptionListList(o IntArrOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, IntArrOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringInt8ArrOptionListList(o Int8ArrOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int8ArrOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringInt16ArrOptionListList(o Int16ArrOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int16ArrOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringInt32ArrOptionListList(o Int32ArrOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int32ArrOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringInt64ArrOptionListList(o Int64ArrOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int64ArrOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUintArrOptionListList(o UintArrOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, UintArrOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUint8ArrOptionListList(o Uint8ArrOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint8ArrOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUint16ArrOptionListList(o Uint16ArrOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint16ArrOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUint32ArrOptionListList(o Uint32ArrOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint32ArrOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUint64ArrOptionListList(o Uint64ArrOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint64ArrOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUintptrArrOptionListList(o UintptrArrOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, UintptrArrOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringByteArrOptionListList(o ByteArrOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, ByteArrOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringRuneArrOptionListList(o RuneArrOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, RuneArrOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringFloat32ArrOptionListList(o Float32ArrOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Float32ArrOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringFloat64ArrOptionListList(o Float64ArrOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Float64ArrOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringComplex64ArrOptionListList(o Complex64ArrOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Complex64ArrOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringComplex128ArrOptionListList(o Complex128ArrOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Complex128ArrOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringAnyArrOptionListList(o AnyArrOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, AnyArrOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringBoolArrArrOptionListList(o BoolArrArrOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, BoolArrArrOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringStringArrArrOptionListList(o StringArrArrOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, StringArrArrOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringIntArrArrOptionListList(o IntArrArrOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, IntArrArrOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringInt8ArrArrOptionListList(o Int8ArrArrOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int8ArrArrOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringInt16ArrArrOptionListList(o Int16ArrArrOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int16ArrArrOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringInt32ArrArrOptionListList(o Int32ArrArrOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int32ArrArrOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringInt64ArrArrOptionListList(o Int64ArrArrOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int64ArrArrOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUintArrArrOptionListList(o UintArrArrOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, UintArrArrOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUint8ArrArrOptionListList(o Uint8ArrArrOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint8ArrArrOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUint16ArrArrOptionListList(o Uint16ArrArrOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint16ArrArrOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUint32ArrArrOptionListList(o Uint32ArrArrOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint32ArrArrOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUint64ArrArrOptionListList(o Uint64ArrArrOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint64ArrArrOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUintptrArrArrOptionListList(o UintptrArrArrOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, UintptrArrArrOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringByteArrArrOptionListList(o ByteArrArrOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, ByteArrArrOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringRuneArrArrOptionListList(o RuneArrArrOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, RuneArrArrOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringFloat32ArrArrOptionListList(o Float32ArrArrOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Float32ArrArrOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringFloat64ArrArrOptionListList(o Float64ArrArrOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Float64ArrArrOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringComplex64ArrArrOptionListList(o Complex64ArrArrOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Complex64ArrArrOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringComplex128ArrArrOptionListList(o Complex128ArrArrOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Complex128ArrArrOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringAnyArrArrOptionListList(o AnyArrArrOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, AnyArrArrOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringBoolOptionArrOptionListList(o BoolOptionArrOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, BoolOptionArrOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringStringOptionArrOptionListList(o StringOptionArrOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, StringOptionArrOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringIntOptionArrOptionListList(o IntOptionArrOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, IntOptionArrOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringInt8OptionArrOptionListList(o Int8OptionArrOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int8OptionArrOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringInt16OptionArrOptionListList(o Int16OptionArrOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int16OptionArrOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringInt32OptionArrOptionListList(o Int32OptionArrOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int32OptionArrOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringInt64OptionArrOptionListList(o Int64OptionArrOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int64OptionArrOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUintOptionArrOptionListList(o UintOptionArrOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, UintOptionArrOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUint8OptionArrOptionListList(o Uint8OptionArrOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint8OptionArrOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUint16OptionArrOptionListList(o Uint16OptionArrOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint16OptionArrOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUint32OptionArrOptionListList(o Uint32OptionArrOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint32OptionArrOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUint64OptionArrOptionListList(o Uint64OptionArrOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint64OptionArrOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUintptrOptionArrOptionListList(o UintptrOptionArrOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, UintptrOptionArrOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringByteOptionArrOptionListList(o ByteOptionArrOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, ByteOptionArrOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringRuneOptionArrOptionListList(o RuneOptionArrOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, RuneOptionArrOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringFloat32OptionArrOptionListList(o Float32OptionArrOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Float32OptionArrOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringFloat64OptionArrOptionListList(o Float64OptionArrOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Float64OptionArrOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringComplex64OptionArrOptionListList(o Complex64OptionArrOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Complex64OptionArrOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringComplex128OptionArrOptionListList(o Complex128OptionArrOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Complex128OptionArrOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringAnyOptionArrOptionListList(o AnyOptionArrOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, AnyOptionArrOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringBoolListOptionListList(o BoolListOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, BoolListOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringStringListOptionListList(o StringListOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, StringListOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringIntListOptionListList(o IntListOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, IntListOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringInt8ListOptionListList(o Int8ListOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int8ListOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringInt16ListOptionListList(o Int16ListOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int16ListOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringInt32ListOptionListList(o Int32ListOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int32ListOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringInt64ListOptionListList(o Int64ListOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int64ListOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUintListOptionListList(o UintListOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, UintListOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUint8ListOptionListList(o Uint8ListOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint8ListOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUint16ListOptionListList(o Uint16ListOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint16ListOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUint32ListOptionListList(o Uint32ListOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint32ListOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUint64ListOptionListList(o Uint64ListOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint64ListOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUintptrListOptionListList(o UintptrListOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, UintptrListOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringByteListOptionListList(o ByteListOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, ByteListOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringRuneListOptionListList(o RuneListOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, RuneListOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringFloat32ListOptionListList(o Float32ListOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Float32ListOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringFloat64ListOptionListList(o Float64ListOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Float64ListOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringComplex64ListOptionListList(o Complex64ListOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Complex64ListOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringComplex128ListOptionListList(o Complex128ListOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Complex128ListOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringAnyListOptionListList(o AnyListOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, AnyListOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringBoolOptionOptionListList(o BoolOptionOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, BoolOptionOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringStringOptionOptionListList(o StringOptionOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, StringOptionOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringIntOptionOptionListList(o IntOptionOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, IntOptionOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringInt8OptionOptionListList(o Int8OptionOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int8OptionOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringInt16OptionOptionListList(o Int16OptionOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int16OptionOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringInt32OptionOptionListList(o Int32OptionOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int32OptionOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringInt64OptionOptionListList(o Int64OptionOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int64OptionOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUintOptionOptionListList(o UintOptionOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, UintOptionOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUint8OptionOptionListList(o Uint8OptionOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint8OptionOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUint16OptionOptionListList(o Uint16OptionOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint16OptionOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUint32OptionOptionListList(o Uint32OptionOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint32OptionOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUint64OptionOptionListList(o Uint64OptionOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint64OptionOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUintptrOptionOptionListList(o UintptrOptionOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, UintptrOptionOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringByteOptionOptionListList(o ByteOptionOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, ByteOptionOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringRuneOptionOptionListList(o RuneOptionOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, RuneOptionOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringFloat32OptionOptionListList(o Float32OptionOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Float32OptionOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringFloat64OptionOptionListList(o Float64OptionOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Float64OptionOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringComplex64OptionOptionListList(o Complex64OptionOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Complex64OptionOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringComplex128OptionOptionListList(o Complex128OptionOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Complex128OptionOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringAnyOptionOptionListList(o AnyOptionOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, AnyOptionOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringBoolArrOptionOptionListList(o BoolArrOptionOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, BoolArrOptionOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringStringArrOptionOptionListList(o StringArrOptionOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, StringArrOptionOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringIntArrOptionOptionListList(o IntArrOptionOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, IntArrOptionOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringInt8ArrOptionOptionListList(o Int8ArrOptionOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int8ArrOptionOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringInt16ArrOptionOptionListList(o Int16ArrOptionOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int16ArrOptionOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringInt32ArrOptionOptionListList(o Int32ArrOptionOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int32ArrOptionOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringInt64ArrOptionOptionListList(o Int64ArrOptionOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int64ArrOptionOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUintArrOptionOptionListList(o UintArrOptionOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, UintArrOptionOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUint8ArrOptionOptionListList(o Uint8ArrOptionOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint8ArrOptionOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUint16ArrOptionOptionListList(o Uint16ArrOptionOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint16ArrOptionOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUint32ArrOptionOptionListList(o Uint32ArrOptionOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint32ArrOptionOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUint64ArrOptionOptionListList(o Uint64ArrOptionOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint64ArrOptionOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUintptrArrOptionOptionListList(o UintptrArrOptionOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, UintptrArrOptionOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringByteArrOptionOptionListList(o ByteArrOptionOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, ByteArrOptionOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringRuneArrOptionOptionListList(o RuneArrOptionOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, RuneArrOptionOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringFloat32ArrOptionOptionListList(o Float32ArrOptionOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Float32ArrOptionOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringFloat64ArrOptionOptionListList(o Float64ArrOptionOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Float64ArrOptionOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringComplex64ArrOptionOptionListList(o Complex64ArrOptionOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Complex64ArrOptionOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringComplex128ArrOptionOptionListList(o Complex128ArrOptionOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Complex128ArrOptionOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringAnyArrOptionOptionListList(o AnyArrOptionOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, AnyArrOptionOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringBoolArrArrOptionOptionListList(o BoolArrArrOptionOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, BoolArrArrOptionOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringStringArrArrOptionOptionListList(o StringArrArrOptionOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, StringArrArrOptionOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringIntArrArrOptionOptionListList(o IntArrArrOptionOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, IntArrArrOptionOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringInt8ArrArrOptionOptionListList(o Int8ArrArrOptionOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int8ArrArrOptionOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringInt16ArrArrOptionOptionListList(o Int16ArrArrOptionOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int16ArrArrOptionOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringInt32ArrArrOptionOptionListList(o Int32ArrArrOptionOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int32ArrArrOptionOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringInt64ArrArrOptionOptionListList(o Int64ArrArrOptionOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int64ArrArrOptionOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUintArrArrOptionOptionListList(o UintArrArrOptionOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, UintArrArrOptionOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUint8ArrArrOptionOptionListList(o Uint8ArrArrOptionOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint8ArrArrOptionOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUint16ArrArrOptionOptionListList(o Uint16ArrArrOptionOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint16ArrArrOptionOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUint32ArrArrOptionOptionListList(o Uint32ArrArrOptionOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint32ArrArrOptionOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUint64ArrArrOptionOptionListList(o Uint64ArrArrOptionOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint64ArrArrOptionOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUintptrArrArrOptionOptionListList(o UintptrArrArrOptionOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, UintptrArrArrOptionOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringByteArrArrOptionOptionListList(o ByteArrArrOptionOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, ByteArrArrOptionOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringRuneArrArrOptionOptionListList(o RuneArrArrOptionOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, RuneArrArrOptionOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringFloat32ArrArrOptionOptionListList(o Float32ArrArrOptionOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Float32ArrArrOptionOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringFloat64ArrArrOptionOptionListList(o Float64ArrArrOptionOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Float64ArrArrOptionOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringComplex64ArrArrOptionOptionListList(o Complex64ArrArrOptionOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Complex64ArrArrOptionOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringComplex128ArrArrOptionOptionListList(o Complex128ArrArrOptionOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Complex128ArrArrOptionOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringAnyArrArrOptionOptionListList(o AnyArrArrOptionOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, AnyArrArrOptionOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringBoolOptionArrOptionOptionListList(o BoolOptionArrOptionOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, BoolOptionArrOptionOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringStringOptionArrOptionOptionListList(o StringOptionArrOptionOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, StringOptionArrOptionOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringIntOptionArrOptionOptionListList(o IntOptionArrOptionOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, IntOptionArrOptionOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringInt8OptionArrOptionOptionListList(o Int8OptionArrOptionOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int8OptionArrOptionOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringInt16OptionArrOptionOptionListList(o Int16OptionArrOptionOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int16OptionArrOptionOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringInt32OptionArrOptionOptionListList(o Int32OptionArrOptionOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int32OptionArrOptionOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringInt64OptionArrOptionOptionListList(o Int64OptionArrOptionOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int64OptionArrOptionOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUintOptionArrOptionOptionListList(o UintOptionArrOptionOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, UintOptionArrOptionOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUint8OptionArrOptionOptionListList(o Uint8OptionArrOptionOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint8OptionArrOptionOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUint16OptionArrOptionOptionListList(o Uint16OptionArrOptionOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint16OptionArrOptionOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUint32OptionArrOptionOptionListList(o Uint32OptionArrOptionOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint32OptionArrOptionOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUint64OptionArrOptionOptionListList(o Uint64OptionArrOptionOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint64OptionArrOptionOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUintptrOptionArrOptionOptionListList(o UintptrOptionArrOptionOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, UintptrOptionArrOptionOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringByteOptionArrOptionOptionListList(o ByteOptionArrOptionOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, ByteOptionArrOptionOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringRuneOptionArrOptionOptionListList(o RuneOptionArrOptionOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, RuneOptionArrOptionOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringFloat32OptionArrOptionOptionListList(o Float32OptionArrOptionOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Float32OptionArrOptionOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringFloat64OptionArrOptionOptionListList(o Float64OptionArrOptionOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Float64OptionArrOptionOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringComplex64OptionArrOptionOptionListList(o Complex64OptionArrOptionOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Complex64OptionArrOptionOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringComplex128OptionArrOptionOptionListList(o Complex128OptionArrOptionOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Complex128OptionArrOptionOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringAnyOptionArrOptionOptionListList(o AnyOptionArrOptionOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, AnyOptionArrOptionOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringBoolListOptionOptionListList(o BoolListOptionOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, BoolListOptionOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringStringListOptionOptionListList(o StringListOptionOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, StringListOptionOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringIntListOptionOptionListList(o IntListOptionOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, IntListOptionOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringInt8ListOptionOptionListList(o Int8ListOptionOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int8ListOptionOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringInt16ListOptionOptionListList(o Int16ListOptionOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int16ListOptionOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringInt32ListOptionOptionListList(o Int32ListOptionOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int32ListOptionOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringInt64ListOptionOptionListList(o Int64ListOptionOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int64ListOptionOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUintListOptionOptionListList(o UintListOptionOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, UintListOptionOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUint8ListOptionOptionListList(o Uint8ListOptionOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint8ListOptionOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUint16ListOptionOptionListList(o Uint16ListOptionOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint16ListOptionOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUint32ListOptionOptionListList(o Uint32ListOptionOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint32ListOptionOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUint64ListOptionOptionListList(o Uint64ListOptionOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint64ListOptionOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUintptrListOptionOptionListList(o UintptrListOptionOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, UintptrListOptionOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringByteListOptionOptionListList(o ByteListOptionOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, ByteListOptionOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringRuneListOptionOptionListList(o RuneListOptionOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, RuneListOptionOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringFloat32ListOptionOptionListList(o Float32ListOptionOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Float32ListOptionOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringFloat64ListOptionOptionListList(o Float64ListOptionOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Float64ListOptionOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringComplex64ListOptionOptionListList(o Complex64ListOptionOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Complex64ListOptionOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringComplex128ListOptionOptionListList(o Complex128ListOptionOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Complex128ListOptionOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringAnyListOptionOptionListList(o AnyListOptionOptionListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, AnyListOptionOptionListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringBoolArrListList(o BoolArrListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, BoolArrListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringStringArrListList(o StringArrListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, StringArrListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringIntArrListList(o IntArrListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, IntArrListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringInt8ArrListList(o Int8ArrListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int8ArrListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringInt16ArrListList(o Int16ArrListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int16ArrListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringInt32ArrListList(o Int32ArrListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int32ArrListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringInt64ArrListList(o Int64ArrListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int64ArrListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUintArrListList(o UintArrListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, UintArrListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUint8ArrListList(o Uint8ArrListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint8ArrListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUint16ArrListList(o Uint16ArrListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint16ArrListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUint32ArrListList(o Uint32ArrListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint32ArrListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUint64ArrListList(o Uint64ArrListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint64ArrListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUintptrArrListList(o UintptrArrListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, UintptrArrListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringByteArrListList(o ByteArrListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, ByteArrListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringRuneArrListList(o RuneArrListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, RuneArrListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringFloat32ArrListList(o Float32ArrListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Float32ArrListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringFloat64ArrListList(o Float64ArrListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Float64ArrListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringComplex64ArrListList(o Complex64ArrListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Complex64ArrListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringComplex128ArrListList(o Complex128ArrListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Complex128ArrListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringAnyArrListList(o AnyArrListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, AnyArrListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringBoolArrArrListList(o BoolArrArrListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, BoolArrArrListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringStringArrArrListList(o StringArrArrListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, StringArrArrListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringIntArrArrListList(o IntArrArrListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, IntArrArrListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringInt8ArrArrListList(o Int8ArrArrListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int8ArrArrListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringInt16ArrArrListList(o Int16ArrArrListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int16ArrArrListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringInt32ArrArrListList(o Int32ArrArrListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int32ArrArrListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringInt64ArrArrListList(o Int64ArrArrListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int64ArrArrListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUintArrArrListList(o UintArrArrListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, UintArrArrListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUint8ArrArrListList(o Uint8ArrArrListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint8ArrArrListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUint16ArrArrListList(o Uint16ArrArrListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint16ArrArrListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUint32ArrArrListList(o Uint32ArrArrListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint32ArrArrListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUint64ArrArrListList(o Uint64ArrArrListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint64ArrArrListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUintptrArrArrListList(o UintptrArrArrListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, UintptrArrArrListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringByteArrArrListList(o ByteArrArrListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, ByteArrArrListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringRuneArrArrListList(o RuneArrArrListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, RuneArrArrListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringFloat32ArrArrListList(o Float32ArrArrListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Float32ArrArrListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringFloat64ArrArrListList(o Float64ArrArrListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Float64ArrArrListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringComplex64ArrArrListList(o Complex64ArrArrListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Complex64ArrArrListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringComplex128ArrArrListList(o Complex128ArrArrListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Complex128ArrArrListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringAnyArrArrListList(o AnyArrArrListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, AnyArrArrListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringBoolOptionArrListList(o BoolOptionArrListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, BoolOptionArrListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringStringOptionArrListList(o StringOptionArrListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, StringOptionArrListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringIntOptionArrListList(o IntOptionArrListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, IntOptionArrListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringInt8OptionArrListList(o Int8OptionArrListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int8OptionArrListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringInt16OptionArrListList(o Int16OptionArrListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int16OptionArrListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringInt32OptionArrListList(o Int32OptionArrListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int32OptionArrListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringInt64OptionArrListList(o Int64OptionArrListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Int64OptionArrListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUintOptionArrListList(o UintOptionArrListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, UintOptionArrListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUint8OptionArrListList(o Uint8OptionArrListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint8OptionArrListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUint16OptionArrListList(o Uint16OptionArrListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint16OptionArrListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUint32OptionArrListList(o Uint32OptionArrListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint32OptionArrListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUint64OptionArrListList(o Uint64OptionArrListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Uint64OptionArrListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringUintptrOptionArrListList(o UintptrOptionArrListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, UintptrOptionArrListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringByteOptionArrListList(o ByteOptionArrListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, ByteOptionArrListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringRuneOptionArrListList(o RuneOptionArrListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, RuneOptionArrListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringFloat32OptionArrListList(o Float32OptionArrListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Float32OptionArrListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringFloat64OptionArrListList(o Float64OptionArrListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Float64OptionArrListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringComplex64OptionArrListList(o Complex64OptionArrListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Complex64OptionArrListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringComplex128OptionArrListList(o Complex128OptionArrListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, Complex128OptionArrListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
func MkStringAnyOptionArrListList(o AnyOptionArrListList, start, sep, end string) string {

	content := ""
	xs := o
	for xs.NonEmpty() {
		content = fmt.Sprintf("%v%v%v", content, AnyOptionArrListToString(*xs.head), sep)
		xs = *xs.tail
	}
	l := len(content)
	if l > 0 {
		content = content[:l-1]
	}
	return fmt.Sprintf("%v%v%v", start, content, end)

}
