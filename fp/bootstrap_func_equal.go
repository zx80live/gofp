// bootstrap_func_equal.go
// DO NOT EDIT THIS FILE WAS GENERATED AUTOMATICALLY BY https://github.com/zx80live/gofp-bootstrap

package fp

func BoolEquals(a, b bool) bool                               { return a == b }
func StringEquals(a, b string) bool                           { return a == b }
func IntEquals(a, b int) bool                                 { return a == b }
func Int8Equals(a, b int8) bool                               { return a == b }
func Int16Equals(a, b int16) bool                             { return a == b }
func Int32Equals(a, b int32) bool                             { return a == b }
func Int64Equals(a, b int64) bool                             { return a == b }
func UintEquals(a, b uint) bool                               { return a == b }
func Uint8Equals(a, b uint8) bool                             { return a == b }
func Uint16Equals(a, b uint16) bool                           { return a == b }
func Uint32Equals(a, b uint32) bool                           { return a == b }
func Uint64Equals(a, b uint64) bool                           { return a == b }
func UintptrEquals(a, b uintptr) bool                         { return a == b }
func ByteEquals(a, b byte) bool                               { return a == b }
func RuneEquals(a, b rune) bool                               { return a == b }
func Float32Equals(a, b float32) bool                         { return a == b }
func Float64Equals(a, b float64) bool                         { return a == b }
func Complex64Equals(a, b complex64) bool                     { return a == b }
func Complex128Equals(a, b complex128) bool                   { return a == b }
func AnyEquals(a, b Any) bool                                 { return a == b }
func BoolOptionEquals(a, b BoolOption) bool                   { return a.Equals(b) }
func StringOptionEquals(a, b StringOption) bool               { return a.Equals(b) }
func IntOptionEquals(a, b IntOption) bool                     { return a.Equals(b) }
func Int64OptionEquals(a, b Int64Option) bool                 { return a.Equals(b) }
func ByteOptionEquals(a, b ByteOption) bool                   { return a.Equals(b) }
func RuneOptionEquals(a, b RuneOption) bool                   { return a.Equals(b) }
func Float32OptionEquals(a, b Float32Option) bool             { return a.Equals(b) }
func Float64OptionEquals(a, b Float64Option) bool             { return a.Equals(b) }
func AnyOptionEquals(a, b AnyOption) bool                     { return a.Equals(b) }
func BoolOptionOptionEquals(a, b BoolOptionOption) bool       { return a.Equals(b) }
func StringOptionOptionEquals(a, b StringOptionOption) bool   { return a.Equals(b) }
func IntOptionOptionEquals(a, b IntOptionOption) bool         { return a.Equals(b) }
func Int64OptionOptionEquals(a, b Int64OptionOption) bool     { return a.Equals(b) }
func ByteOptionOptionEquals(a, b ByteOptionOption) bool       { return a.Equals(b) }
func RuneOptionOptionEquals(a, b RuneOptionOption) bool       { return a.Equals(b) }
func Float32OptionOptionEquals(a, b Float32OptionOption) bool { return a.Equals(b) }
func Float64OptionOptionEquals(a, b Float64OptionOption) bool { return a.Equals(b) }
func AnyOptionOptionEquals(a, b AnyOptionOption) bool         { return a.Equals(b) }
func BoolArrayOptionEquals(a, b BoolArrayOption) bool         { return a.Equals(b) }
func StringArrayOptionEquals(a, b StringArrayOption) bool     { return a.Equals(b) }
func IntArrayOptionEquals(a, b IntArrayOption) bool           { return a.Equals(b) }
func Int64ArrayOptionEquals(a, b Int64ArrayOption) bool       { return a.Equals(b) }
func ByteArrayOptionEquals(a, b ByteArrayOption) bool         { return a.Equals(b) }
func RuneArrayOptionEquals(a, b RuneArrayOption) bool         { return a.Equals(b) }
func Float32ArrayOptionEquals(a, b Float32ArrayOption) bool   { return a.Equals(b) }
func Float64ArrayOptionEquals(a, b Float64ArrayOption) bool   { return a.Equals(b) }
func AnyArrayOptionEquals(a, b AnyArrayOption) bool           { return a.Equals(b) }
func BoolListOptionEquals(a, b BoolListOption) bool           { return a.Equals(b) }
func StringListOptionEquals(a, b StringListOption) bool       { return a.Equals(b) }
func IntListOptionEquals(a, b IntListOption) bool             { return a.Equals(b) }
func Int64ListOptionEquals(a, b Int64ListOption) bool         { return a.Equals(b) }
func ByteListOptionEquals(a, b ByteListOption) bool           { return a.Equals(b) }
func RuneListOptionEquals(a, b RuneListOption) bool           { return a.Equals(b) }
func Float32ListOptionEquals(a, b Float32ListOption) bool     { return a.Equals(b) }
func Float64ListOptionEquals(a, b Float64ListOption) bool     { return a.Equals(b) }
func AnyListOptionEquals(a, b AnyListOption) bool             { return a.Equals(b) }
func BoolArrayEquals(a, b []bool) bool {
	len1 := len(a)
	if len1 != len(b) {
		return false
	}
	for i, e := range a {
		if BoolEquals(e, b[i]) {
			return false
		}
	}
	return true
}
func StringArrayEquals(a, b []string) bool {
	len1 := len(a)
	if len1 != len(b) {
		return false
	}
	for i, e := range a {
		if StringEquals(e, b[i]) {
			return false
		}
	}
	return true
}
func IntArrayEquals(a, b []int) bool {
	len1 := len(a)
	if len1 != len(b) {
		return false
	}
	for i, e := range a {
		if IntEquals(e, b[i]) {
			return false
		}
	}
	return true
}
func Int64ArrayEquals(a, b []int64) bool {
	len1 := len(a)
	if len1 != len(b) {
		return false
	}
	for i, e := range a {
		if Int64Equals(e, b[i]) {
			return false
		}
	}
	return true
}
func ByteArrayEquals(a, b []byte) bool {
	len1 := len(a)
	if len1 != len(b) {
		return false
	}
	for i, e := range a {
		if ByteEquals(e, b[i]) {
			return false
		}
	}
	return true
}
func RuneArrayEquals(a, b []rune) bool {
	len1 := len(a)
	if len1 != len(b) {
		return false
	}
	for i, e := range a {
		if RuneEquals(e, b[i]) {
			return false
		}
	}
	return true
}
func Float32ArrayEquals(a, b []float32) bool {
	len1 := len(a)
	if len1 != len(b) {
		return false
	}
	for i, e := range a {
		if Float32Equals(e, b[i]) {
			return false
		}
	}
	return true
}
func Float64ArrayEquals(a, b []float64) bool {
	len1 := len(a)
	if len1 != len(b) {
		return false
	}
	for i, e := range a {
		if Float64Equals(e, b[i]) {
			return false
		}
	}
	return true
}
func AnyArrayEquals(a, b []Any) bool {
	len1 := len(a)
	if len1 != len(b) {
		return false
	}
	for i, e := range a {
		if AnyEquals(e, b[i]) {
			return false
		}
	}
	return true
}
func BoolArrayArrayEquals(a, b [][]bool) bool {
	len1 := len(a)
	if len1 != len(b) {
		return false
	}
	for i, e := range a {
		if BoolArrayEquals(e, b[i]) {
			return false
		}
	}
	return true
}
func StringArrayArrayEquals(a, b [][]string) bool {
	len1 := len(a)
	if len1 != len(b) {
		return false
	}
	for i, e := range a {
		if StringArrayEquals(e, b[i]) {
			return false
		}
	}
	return true
}
func IntArrayArrayEquals(a, b [][]int) bool {
	len1 := len(a)
	if len1 != len(b) {
		return false
	}
	for i, e := range a {
		if IntArrayEquals(e, b[i]) {
			return false
		}
	}
	return true
}
func Int64ArrayArrayEquals(a, b [][]int64) bool {
	len1 := len(a)
	if len1 != len(b) {
		return false
	}
	for i, e := range a {
		if Int64ArrayEquals(e, b[i]) {
			return false
		}
	}
	return true
}
func ByteArrayArrayEquals(a, b [][]byte) bool {
	len1 := len(a)
	if len1 != len(b) {
		return false
	}
	for i, e := range a {
		if ByteArrayEquals(e, b[i]) {
			return false
		}
	}
	return true
}
func RuneArrayArrayEquals(a, b [][]rune) bool {
	len1 := len(a)
	if len1 != len(b) {
		return false
	}
	for i, e := range a {
		if RuneArrayEquals(e, b[i]) {
			return false
		}
	}
	return true
}
func Float32ArrayArrayEquals(a, b [][]float32) bool {
	len1 := len(a)
	if len1 != len(b) {
		return false
	}
	for i, e := range a {
		if Float32ArrayEquals(e, b[i]) {
			return false
		}
	}
	return true
}
func Float64ArrayArrayEquals(a, b [][]float64) bool {
	len1 := len(a)
	if len1 != len(b) {
		return false
	}
	for i, e := range a {
		if Float64ArrayEquals(e, b[i]) {
			return false
		}
	}
	return true
}
func AnyArrayArrayEquals(a, b [][]Any) bool {
	len1 := len(a)
	if len1 != len(b) {
		return false
	}
	for i, e := range a {
		if AnyArrayEquals(e, b[i]) {
			return false
		}
	}
	return true
}
func BoolListEquals(a, b BoolList) bool                   { return a.Equals(b) }
func StringListEquals(a, b StringList) bool               { return a.Equals(b) }
func IntListEquals(a, b IntList) bool                     { return a.Equals(b) }
func Int64ListEquals(a, b Int64List) bool                 { return a.Equals(b) }
func ByteListEquals(a, b ByteList) bool                   { return a.Equals(b) }
func RuneListEquals(a, b RuneList) bool                   { return a.Equals(b) }
func Float32ListEquals(a, b Float32List) bool             { return a.Equals(b) }
func Float64ListEquals(a, b Float64List) bool             { return a.Equals(b) }
func AnyListEquals(a, b AnyList) bool                     { return a.Equals(b) }
func BoolArrayListEquals(a, b BoolArrayList) bool         { return a.Equals(b) }
func StringArrayListEquals(a, b StringArrayList) bool     { return a.Equals(b) }
func IntArrayListEquals(a, b IntArrayList) bool           { return a.Equals(b) }
func Int64ArrayListEquals(a, b Int64ArrayList) bool       { return a.Equals(b) }
func ByteArrayListEquals(a, b ByteArrayList) bool         { return a.Equals(b) }
func RuneArrayListEquals(a, b RuneArrayList) bool         { return a.Equals(b) }
func Float32ArrayListEquals(a, b Float32ArrayList) bool   { return a.Equals(b) }
func Float64ArrayListEquals(a, b Float64ArrayList) bool   { return a.Equals(b) }
func AnyArrayListEquals(a, b AnyArrayList) bool           { return a.Equals(b) }
func BoolOptionListEquals(a, b BoolOptionList) bool       { return a.Equals(b) }
func StringOptionListEquals(a, b StringOptionList) bool   { return a.Equals(b) }
func IntOptionListEquals(a, b IntOptionList) bool         { return a.Equals(b) }
func Int64OptionListEquals(a, b Int64OptionList) bool     { return a.Equals(b) }
func ByteOptionListEquals(a, b ByteOptionList) bool       { return a.Equals(b) }
func RuneOptionListEquals(a, b RuneOptionList) bool       { return a.Equals(b) }
func Float32OptionListEquals(a, b Float32OptionList) bool { return a.Equals(b) }
func Float64OptionListEquals(a, b Float64OptionList) bool { return a.Equals(b) }
func AnyOptionListEquals(a, b AnyOptionList) bool         { return a.Equals(b) }
func BoolListListEquals(a, b BoolListList) bool           { return a.Equals(b) }
func StringListListEquals(a, b StringListList) bool       { return a.Equals(b) }
func IntListListEquals(a, b IntListList) bool             { return a.Equals(b) }
func Int64ListListEquals(a, b Int64ListList) bool         { return a.Equals(b) }
func ByteListListEquals(a, b ByteListList) bool           { return a.Equals(b) }
func RuneListListEquals(a, b RuneListList) bool           { return a.Equals(b) }
func Float32ListListEquals(a, b Float32ListList) bool     { return a.Equals(b) }
func Float64ListListEquals(a, b Float64ListList) bool     { return a.Equals(b) }
func AnyListListEquals(a, b AnyListList) bool             { return a.Equals(b) }
