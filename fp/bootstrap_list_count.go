// bootstrap_list_count.go
// DO NOT EDIT THIS FILE WAS GENERATED AUTOMATICALLY BY https://github.com/zx80live/gofp-bootstrap

package fp

func (l BoolList) Count(p func(bool) bool) int {
	i := 0
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			i++
		}
		xs = *xs.tail
	}
	return i
}
func (l StringList) Count(p func(string) bool) int {
	i := 0
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			i++
		}
		xs = *xs.tail
	}
	return i
}
func (l IntList) Count(p func(int) bool) int {
	i := 0
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			i++
		}
		xs = *xs.tail
	}
	return i
}
func (l Int64List) Count(p func(int64) bool) int {
	i := 0
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			i++
		}
		xs = *xs.tail
	}
	return i
}
func (l ByteList) Count(p func(byte) bool) int {
	i := 0
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			i++
		}
		xs = *xs.tail
	}
	return i
}
func (l RuneList) Count(p func(rune) bool) int {
	i := 0
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			i++
		}
		xs = *xs.tail
	}
	return i
}
func (l Float32List) Count(p func(float32) bool) int {
	i := 0
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			i++
		}
		xs = *xs.tail
	}
	return i
}
func (l Float64List) Count(p func(float64) bool) int {
	i := 0
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			i++
		}
		xs = *xs.tail
	}
	return i
}
func (l AnyList) Count(p func(Any) bool) int {
	i := 0
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			i++
		}
		xs = *xs.tail
	}
	return i
}
func (l Tuple2List) Count(p func(Tuple2) bool) int {
	i := 0
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			i++
		}
		xs = *xs.tail
	}
	return i
}
func (l BoolArrayList) Count(p func([]bool) bool) int {
	i := 0
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			i++
		}
		xs = *xs.tail
	}
	return i
}
func (l StringArrayList) Count(p func([]string) bool) int {
	i := 0
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			i++
		}
		xs = *xs.tail
	}
	return i
}
func (l IntArrayList) Count(p func([]int) bool) int {
	i := 0
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			i++
		}
		xs = *xs.tail
	}
	return i
}
func (l Int64ArrayList) Count(p func([]int64) bool) int {
	i := 0
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			i++
		}
		xs = *xs.tail
	}
	return i
}
func (l ByteArrayList) Count(p func([]byte) bool) int {
	i := 0
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			i++
		}
		xs = *xs.tail
	}
	return i
}
func (l RuneArrayList) Count(p func([]rune) bool) int {
	i := 0
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			i++
		}
		xs = *xs.tail
	}
	return i
}
func (l Float32ArrayList) Count(p func([]float32) bool) int {
	i := 0
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			i++
		}
		xs = *xs.tail
	}
	return i
}
func (l Float64ArrayList) Count(p func([]float64) bool) int {
	i := 0
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			i++
		}
		xs = *xs.tail
	}
	return i
}
func (l AnyArrayList) Count(p func([]Any) bool) int {
	i := 0
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			i++
		}
		xs = *xs.tail
	}
	return i
}
func (l Tuple2ArrayList) Count(p func([]Tuple2) bool) int {
	i := 0
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			i++
		}
		xs = *xs.tail
	}
	return i
}
func (l BoolOptionList) Count(p func(BoolOption) bool) int {
	i := 0
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			i++
		}
		xs = *xs.tail
	}
	return i
}
func (l StringOptionList) Count(p func(StringOption) bool) int {
	i := 0
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			i++
		}
		xs = *xs.tail
	}
	return i
}
func (l IntOptionList) Count(p func(IntOption) bool) int {
	i := 0
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			i++
		}
		xs = *xs.tail
	}
	return i
}
func (l Int64OptionList) Count(p func(Int64Option) bool) int {
	i := 0
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			i++
		}
		xs = *xs.tail
	}
	return i
}
func (l ByteOptionList) Count(p func(ByteOption) bool) int {
	i := 0
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			i++
		}
		xs = *xs.tail
	}
	return i
}
func (l RuneOptionList) Count(p func(RuneOption) bool) int {
	i := 0
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			i++
		}
		xs = *xs.tail
	}
	return i
}
func (l Float32OptionList) Count(p func(Float32Option) bool) int {
	i := 0
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			i++
		}
		xs = *xs.tail
	}
	return i
}
func (l Float64OptionList) Count(p func(Float64Option) bool) int {
	i := 0
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			i++
		}
		xs = *xs.tail
	}
	return i
}
func (l AnyOptionList) Count(p func(AnyOption) bool) int {
	i := 0
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			i++
		}
		xs = *xs.tail
	}
	return i
}
func (l Tuple2OptionList) Count(p func(Tuple2Option) bool) int {
	i := 0
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			i++
		}
		xs = *xs.tail
	}
	return i
}
func (l BoolListList) Count(p func(BoolList) bool) int {
	i := 0
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			i++
		}
		xs = *xs.tail
	}
	return i
}
func (l StringListList) Count(p func(StringList) bool) int {
	i := 0
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			i++
		}
		xs = *xs.tail
	}
	return i
}
func (l IntListList) Count(p func(IntList) bool) int {
	i := 0
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			i++
		}
		xs = *xs.tail
	}
	return i
}
func (l Int64ListList) Count(p func(Int64List) bool) int {
	i := 0
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			i++
		}
		xs = *xs.tail
	}
	return i
}
func (l ByteListList) Count(p func(ByteList) bool) int {
	i := 0
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			i++
		}
		xs = *xs.tail
	}
	return i
}
func (l RuneListList) Count(p func(RuneList) bool) int {
	i := 0
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			i++
		}
		xs = *xs.tail
	}
	return i
}
func (l Float32ListList) Count(p func(Float32List) bool) int {
	i := 0
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			i++
		}
		xs = *xs.tail
	}
	return i
}
func (l Float64ListList) Count(p func(Float64List) bool) int {
	i := 0
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			i++
		}
		xs = *xs.tail
	}
	return i
}
func (l AnyListList) Count(p func(AnyList) bool) int {
	i := 0
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			i++
		}
		xs = *xs.tail
	}
	return i
}
func (l Tuple2ListList) Count(p func(Tuple2List) bool) int {
	i := 0
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			i++
		}
		xs = *xs.tail
	}
	return i
}
