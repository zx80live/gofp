// bootstrap_list_equals.go
// DO NOT EDIT THIS FILE WAS GENERATED AUTOMATICALLY BY https://github.com/zx80live/gofp-bootstrap

package fp

func (a BoolList) Equals(b BoolList) bool {
	len1 := a.Size()
	len2 := b.Size()
	if len1 != len2 {
		return false
	}
	xs1 := a
	xs2 := b
	for xs1.NonEmpty() {
		if !BoolEquals(*xs1.head, *xs2.head) {
			return false
		}
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return true
}
func (a StringList) Equals(b StringList) bool {
	len1 := a.Size()
	len2 := b.Size()
	if len1 != len2 {
		return false
	}
	xs1 := a
	xs2 := b
	for xs1.NonEmpty() {
		if !StringEquals(*xs1.head, *xs2.head) {
			return false
		}
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return true
}
func (a IntList) Equals(b IntList) bool {
	len1 := a.Size()
	len2 := b.Size()
	if len1 != len2 {
		return false
	}
	xs1 := a
	xs2 := b
	for xs1.NonEmpty() {
		if !IntEquals(*xs1.head, *xs2.head) {
			return false
		}
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return true
}
func (a Int64List) Equals(b Int64List) bool {
	len1 := a.Size()
	len2 := b.Size()
	if len1 != len2 {
		return false
	}
	xs1 := a
	xs2 := b
	for xs1.NonEmpty() {
		if !Int64Equals(*xs1.head, *xs2.head) {
			return false
		}
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return true
}
func (a ByteList) Equals(b ByteList) bool {
	len1 := a.Size()
	len2 := b.Size()
	if len1 != len2 {
		return false
	}
	xs1 := a
	xs2 := b
	for xs1.NonEmpty() {
		if !ByteEquals(*xs1.head, *xs2.head) {
			return false
		}
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return true
}
func (a RuneList) Equals(b RuneList) bool {
	len1 := a.Size()
	len2 := b.Size()
	if len1 != len2 {
		return false
	}
	xs1 := a
	xs2 := b
	for xs1.NonEmpty() {
		if !RuneEquals(*xs1.head, *xs2.head) {
			return false
		}
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return true
}
func (a Float32List) Equals(b Float32List) bool {
	len1 := a.Size()
	len2 := b.Size()
	if len1 != len2 {
		return false
	}
	xs1 := a
	xs2 := b
	for xs1.NonEmpty() {
		if !Float32Equals(*xs1.head, *xs2.head) {
			return false
		}
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return true
}
func (a Float64List) Equals(b Float64List) bool {
	len1 := a.Size()
	len2 := b.Size()
	if len1 != len2 {
		return false
	}
	xs1 := a
	xs2 := b
	for xs1.NonEmpty() {
		if !Float64Equals(*xs1.head, *xs2.head) {
			return false
		}
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return true
}
func (a AnyList) Equals(b AnyList) bool {
	len1 := a.Size()
	len2 := b.Size()
	if len1 != len2 {
		return false
	}
	xs1 := a
	xs2 := b
	for xs1.NonEmpty() {
		if !AnyEquals(*xs1.head, *xs2.head) {
			return false
		}
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return true
}
func (a BoolArrayList) Equals(b BoolArrayList) bool {
	len1 := a.Size()
	len2 := b.Size()
	if len1 != len2 {
		return false
	}
	xs1 := a
	xs2 := b
	for xs1.NonEmpty() {
		if !BoolArrayEquals(*xs1.head, *xs2.head) {
			return false
		}
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return true
}
func (a StringArrayList) Equals(b StringArrayList) bool {
	len1 := a.Size()
	len2 := b.Size()
	if len1 != len2 {
		return false
	}
	xs1 := a
	xs2 := b
	for xs1.NonEmpty() {
		if !StringArrayEquals(*xs1.head, *xs2.head) {
			return false
		}
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return true
}
func (a IntArrayList) Equals(b IntArrayList) bool {
	len1 := a.Size()
	len2 := b.Size()
	if len1 != len2 {
		return false
	}
	xs1 := a
	xs2 := b
	for xs1.NonEmpty() {
		if !IntArrayEquals(*xs1.head, *xs2.head) {
			return false
		}
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return true
}
func (a Int64ArrayList) Equals(b Int64ArrayList) bool {
	len1 := a.Size()
	len2 := b.Size()
	if len1 != len2 {
		return false
	}
	xs1 := a
	xs2 := b
	for xs1.NonEmpty() {
		if !Int64ArrayEquals(*xs1.head, *xs2.head) {
			return false
		}
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return true
}
func (a ByteArrayList) Equals(b ByteArrayList) bool {
	len1 := a.Size()
	len2 := b.Size()
	if len1 != len2 {
		return false
	}
	xs1 := a
	xs2 := b
	for xs1.NonEmpty() {
		if !ByteArrayEquals(*xs1.head, *xs2.head) {
			return false
		}
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return true
}
func (a RuneArrayList) Equals(b RuneArrayList) bool {
	len1 := a.Size()
	len2 := b.Size()
	if len1 != len2 {
		return false
	}
	xs1 := a
	xs2 := b
	for xs1.NonEmpty() {
		if !RuneArrayEquals(*xs1.head, *xs2.head) {
			return false
		}
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return true
}
func (a Float32ArrayList) Equals(b Float32ArrayList) bool {
	len1 := a.Size()
	len2 := b.Size()
	if len1 != len2 {
		return false
	}
	xs1 := a
	xs2 := b
	for xs1.NonEmpty() {
		if !Float32ArrayEquals(*xs1.head, *xs2.head) {
			return false
		}
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return true
}
func (a Float64ArrayList) Equals(b Float64ArrayList) bool {
	len1 := a.Size()
	len2 := b.Size()
	if len1 != len2 {
		return false
	}
	xs1 := a
	xs2 := b
	for xs1.NonEmpty() {
		if !Float64ArrayEquals(*xs1.head, *xs2.head) {
			return false
		}
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return true
}
func (a AnyArrayList) Equals(b AnyArrayList) bool {
	len1 := a.Size()
	len2 := b.Size()
	if len1 != len2 {
		return false
	}
	xs1 := a
	xs2 := b
	for xs1.NonEmpty() {
		if !AnyArrayEquals(*xs1.head, *xs2.head) {
			return false
		}
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return true
}
func (a BoolOptionList) Equals(b BoolOptionList) bool {
	len1 := a.Size()
	len2 := b.Size()
	if len1 != len2 {
		return false
	}
	xs1 := a
	xs2 := b
	for xs1.NonEmpty() {
		if !BoolOptionEquals(*xs1.head, *xs2.head) {
			return false
		}
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return true
}
func (a StringOptionList) Equals(b StringOptionList) bool {
	len1 := a.Size()
	len2 := b.Size()
	if len1 != len2 {
		return false
	}
	xs1 := a
	xs2 := b
	for xs1.NonEmpty() {
		if !StringOptionEquals(*xs1.head, *xs2.head) {
			return false
		}
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return true
}
func (a IntOptionList) Equals(b IntOptionList) bool {
	len1 := a.Size()
	len2 := b.Size()
	if len1 != len2 {
		return false
	}
	xs1 := a
	xs2 := b
	for xs1.NonEmpty() {
		if !IntOptionEquals(*xs1.head, *xs2.head) {
			return false
		}
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return true
}
func (a Int64OptionList) Equals(b Int64OptionList) bool {
	len1 := a.Size()
	len2 := b.Size()
	if len1 != len2 {
		return false
	}
	xs1 := a
	xs2 := b
	for xs1.NonEmpty() {
		if !Int64OptionEquals(*xs1.head, *xs2.head) {
			return false
		}
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return true
}
func (a ByteOptionList) Equals(b ByteOptionList) bool {
	len1 := a.Size()
	len2 := b.Size()
	if len1 != len2 {
		return false
	}
	xs1 := a
	xs2 := b
	for xs1.NonEmpty() {
		if !ByteOptionEquals(*xs1.head, *xs2.head) {
			return false
		}
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return true
}
func (a RuneOptionList) Equals(b RuneOptionList) bool {
	len1 := a.Size()
	len2 := b.Size()
	if len1 != len2 {
		return false
	}
	xs1 := a
	xs2 := b
	for xs1.NonEmpty() {
		if !RuneOptionEquals(*xs1.head, *xs2.head) {
			return false
		}
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return true
}
func (a Float32OptionList) Equals(b Float32OptionList) bool {
	len1 := a.Size()
	len2 := b.Size()
	if len1 != len2 {
		return false
	}
	xs1 := a
	xs2 := b
	for xs1.NonEmpty() {
		if !Float32OptionEquals(*xs1.head, *xs2.head) {
			return false
		}
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return true
}
func (a Float64OptionList) Equals(b Float64OptionList) bool {
	len1 := a.Size()
	len2 := b.Size()
	if len1 != len2 {
		return false
	}
	xs1 := a
	xs2 := b
	for xs1.NonEmpty() {
		if !Float64OptionEquals(*xs1.head, *xs2.head) {
			return false
		}
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return true
}
func (a AnyOptionList) Equals(b AnyOptionList) bool {
	len1 := a.Size()
	len2 := b.Size()
	if len1 != len2 {
		return false
	}
	xs1 := a
	xs2 := b
	for xs1.NonEmpty() {
		if !AnyOptionEquals(*xs1.head, *xs2.head) {
			return false
		}
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return true
}
func (a BoolListList) Equals(b BoolListList) bool {
	len1 := a.Size()
	len2 := b.Size()
	if len1 != len2 {
		return false
	}
	xs1 := a
	xs2 := b
	for xs1.NonEmpty() {
		if !BoolListEquals(*xs1.head, *xs2.head) {
			return false
		}
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return true
}
func (a StringListList) Equals(b StringListList) bool {
	len1 := a.Size()
	len2 := b.Size()
	if len1 != len2 {
		return false
	}
	xs1 := a
	xs2 := b
	for xs1.NonEmpty() {
		if !StringListEquals(*xs1.head, *xs2.head) {
			return false
		}
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return true
}
func (a IntListList) Equals(b IntListList) bool {
	len1 := a.Size()
	len2 := b.Size()
	if len1 != len2 {
		return false
	}
	xs1 := a
	xs2 := b
	for xs1.NonEmpty() {
		if !IntListEquals(*xs1.head, *xs2.head) {
			return false
		}
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return true
}
func (a Int64ListList) Equals(b Int64ListList) bool {
	len1 := a.Size()
	len2 := b.Size()
	if len1 != len2 {
		return false
	}
	xs1 := a
	xs2 := b
	for xs1.NonEmpty() {
		if !Int64ListEquals(*xs1.head, *xs2.head) {
			return false
		}
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return true
}
func (a ByteListList) Equals(b ByteListList) bool {
	len1 := a.Size()
	len2 := b.Size()
	if len1 != len2 {
		return false
	}
	xs1 := a
	xs2 := b
	for xs1.NonEmpty() {
		if !ByteListEquals(*xs1.head, *xs2.head) {
			return false
		}
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return true
}
func (a RuneListList) Equals(b RuneListList) bool {
	len1 := a.Size()
	len2 := b.Size()
	if len1 != len2 {
		return false
	}
	xs1 := a
	xs2 := b
	for xs1.NonEmpty() {
		if !RuneListEquals(*xs1.head, *xs2.head) {
			return false
		}
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return true
}
func (a Float32ListList) Equals(b Float32ListList) bool {
	len1 := a.Size()
	len2 := b.Size()
	if len1 != len2 {
		return false
	}
	xs1 := a
	xs2 := b
	for xs1.NonEmpty() {
		if !Float32ListEquals(*xs1.head, *xs2.head) {
			return false
		}
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return true
}
func (a Float64ListList) Equals(b Float64ListList) bool {
	len1 := a.Size()
	len2 := b.Size()
	if len1 != len2 {
		return false
	}
	xs1 := a
	xs2 := b
	for xs1.NonEmpty() {
		if !Float64ListEquals(*xs1.head, *xs2.head) {
			return false
		}
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return true
}
func (a AnyListList) Equals(b AnyListList) bool {
	len1 := a.Size()
	len2 := b.Size()
	if len1 != len2 {
		return false
	}
	xs1 := a
	xs2 := b
	for xs1.NonEmpty() {
		if !AnyListEquals(*xs1.head, *xs2.head) {
			return false
		}
		xs1 = *xs1.tail
		xs2 = *xs2.tail
	}
	return true
}
