// bootstrap_list_filter.go
// DO NOT EDIT THIS FILE WAS GENERATED AUTOMATICALLY BY https://github.com/zx80live/gofp-bootstrap

package fp

func (l BoolList) Filter(p BoolPredicate) BoolList {
	acc := NilBool
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringList) Filter(p StringPredicate) StringList {
	acc := NilString
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntList) Filter(p IntPredicate) IntList {
	acc := NilInt
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8List) Filter(p Int8Predicate) Int8List {
	acc := NilInt8
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16List) Filter(p Int16Predicate) Int16List {
	acc := NilInt16
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32List) Filter(p Int32Predicate) Int32List {
	acc := NilInt32
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64List) Filter(p Int64Predicate) Int64List {
	acc := NilInt64
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintList) Filter(p UintPredicate) UintList {
	acc := NilUint
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8List) Filter(p Uint8Predicate) Uint8List {
	acc := NilUint8
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16List) Filter(p Uint16Predicate) Uint16List {
	acc := NilUint16
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32List) Filter(p Uint32Predicate) Uint32List {
	acc := NilUint32
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64List) Filter(p Uint64Predicate) Uint64List {
	acc := NilUint64
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrList) Filter(p UintptrPredicate) UintptrList {
	acc := NilUintptr
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteList) Filter(p BytePredicate) ByteList {
	acc := NilByte
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneList) Filter(p RunePredicate) RuneList {
	acc := NilRune
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32List) Filter(p Float32Predicate) Float32List {
	acc := NilFloat32
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64List) Filter(p Float64Predicate) Float64List {
	acc := NilFloat64
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64List) Filter(p Complex64Predicate) Complex64List {
	acc := NilComplex64
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128List) Filter(p Complex128Predicate) Complex128List {
	acc := NilComplex128
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyList) Filter(p AnyPredicate) AnyList {
	acc := NilAny
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolOptionList) Filter(p BoolOptionPredicate) BoolOptionList {
	acc := NilBoolOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringOptionList) Filter(p StringOptionPredicate) StringOptionList {
	acc := NilStringOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntOptionList) Filter(p IntOptionPredicate) IntOptionList {
	acc := NilIntOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8OptionList) Filter(p Int8OptionPredicate) Int8OptionList {
	acc := NilInt8Option
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16OptionList) Filter(p Int16OptionPredicate) Int16OptionList {
	acc := NilInt16Option
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32OptionList) Filter(p Int32OptionPredicate) Int32OptionList {
	acc := NilInt32Option
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64OptionList) Filter(p Int64OptionPredicate) Int64OptionList {
	acc := NilInt64Option
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintOptionList) Filter(p UintOptionPredicate) UintOptionList {
	acc := NilUintOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8OptionList) Filter(p Uint8OptionPredicate) Uint8OptionList {
	acc := NilUint8Option
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16OptionList) Filter(p Uint16OptionPredicate) Uint16OptionList {
	acc := NilUint16Option
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32OptionList) Filter(p Uint32OptionPredicate) Uint32OptionList {
	acc := NilUint32Option
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64OptionList) Filter(p Uint64OptionPredicate) Uint64OptionList {
	acc := NilUint64Option
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrOptionList) Filter(p UintptrOptionPredicate) UintptrOptionList {
	acc := NilUintptrOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteOptionList) Filter(p ByteOptionPredicate) ByteOptionList {
	acc := NilByteOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneOptionList) Filter(p RuneOptionPredicate) RuneOptionList {
	acc := NilRuneOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32OptionList) Filter(p Float32OptionPredicate) Float32OptionList {
	acc := NilFloat32Option
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64OptionList) Filter(p Float64OptionPredicate) Float64OptionList {
	acc := NilFloat64Option
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64OptionList) Filter(p Complex64OptionPredicate) Complex64OptionList {
	acc := NilComplex64Option
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128OptionList) Filter(p Complex128OptionPredicate) Complex128OptionList {
	acc := NilComplex128Option
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyOptionList) Filter(p AnyOptionPredicate) AnyOptionList {
	acc := NilAnyOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrayOptionList) Filter(p BoolArrayOptionPredicate) BoolArrayOptionList {
	acc := NilBoolArrayOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringArrayOptionList) Filter(p StringArrayOptionPredicate) StringArrayOptionList {
	acc := NilStringArrayOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntArrayOptionList) Filter(p IntArrayOptionPredicate) IntArrayOptionList {
	acc := NilIntArrayOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrayOptionList) Filter(p Int8ArrayOptionPredicate) Int8ArrayOptionList {
	acc := NilInt8ArrayOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrayOptionList) Filter(p Int16ArrayOptionPredicate) Int16ArrayOptionList {
	acc := NilInt16ArrayOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrayOptionList) Filter(p Int32ArrayOptionPredicate) Int32ArrayOptionList {
	acc := NilInt32ArrayOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrayOptionList) Filter(p Int64ArrayOptionPredicate) Int64ArrayOptionList {
	acc := NilInt64ArrayOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintArrayOptionList) Filter(p UintArrayOptionPredicate) UintArrayOptionList {
	acc := NilUintArrayOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrayOptionList) Filter(p Uint8ArrayOptionPredicate) Uint8ArrayOptionList {
	acc := NilUint8ArrayOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrayOptionList) Filter(p Uint16ArrayOptionPredicate) Uint16ArrayOptionList {
	acc := NilUint16ArrayOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrayOptionList) Filter(p Uint32ArrayOptionPredicate) Uint32ArrayOptionList {
	acc := NilUint32ArrayOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrayOptionList) Filter(p Uint64ArrayOptionPredicate) Uint64ArrayOptionList {
	acc := NilUint64ArrayOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrayOptionList) Filter(p UintptrArrayOptionPredicate) UintptrArrayOptionList {
	acc := NilUintptrArrayOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrayOptionList) Filter(p ByteArrayOptionPredicate) ByteArrayOptionList {
	acc := NilByteArrayOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrayOptionList) Filter(p RuneArrayOptionPredicate) RuneArrayOptionList {
	acc := NilRuneArrayOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrayOptionList) Filter(p Float32ArrayOptionPredicate) Float32ArrayOptionList {
	acc := NilFloat32ArrayOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrayOptionList) Filter(p Float64ArrayOptionPredicate) Float64ArrayOptionList {
	acc := NilFloat64ArrayOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrayOptionList) Filter(p Complex64ArrayOptionPredicate) Complex64ArrayOptionList {
	acc := NilComplex64ArrayOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrayOptionList) Filter(p Complex128ArrayOptionPredicate) Complex128ArrayOptionList {
	acc := NilComplex128ArrayOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrayOptionList) Filter(p AnyArrayOptionPredicate) AnyArrayOptionList {
	acc := NilAnyArrayOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrayArrayOptionList) Filter(p BoolArrayArrayOptionPredicate) BoolArrayArrayOptionList {
	acc := NilBoolArrayArrayOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringArrayArrayOptionList) Filter(p StringArrayArrayOptionPredicate) StringArrayArrayOptionList {
	acc := NilStringArrayArrayOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntArrayArrayOptionList) Filter(p IntArrayArrayOptionPredicate) IntArrayArrayOptionList {
	acc := NilIntArrayArrayOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrayArrayOptionList) Filter(p Int8ArrayArrayOptionPredicate) Int8ArrayArrayOptionList {
	acc := NilInt8ArrayArrayOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrayArrayOptionList) Filter(p Int16ArrayArrayOptionPredicate) Int16ArrayArrayOptionList {
	acc := NilInt16ArrayArrayOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrayArrayOptionList) Filter(p Int32ArrayArrayOptionPredicate) Int32ArrayArrayOptionList {
	acc := NilInt32ArrayArrayOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrayArrayOptionList) Filter(p Int64ArrayArrayOptionPredicate) Int64ArrayArrayOptionList {
	acc := NilInt64ArrayArrayOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintArrayArrayOptionList) Filter(p UintArrayArrayOptionPredicate) UintArrayArrayOptionList {
	acc := NilUintArrayArrayOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrayArrayOptionList) Filter(p Uint8ArrayArrayOptionPredicate) Uint8ArrayArrayOptionList {
	acc := NilUint8ArrayArrayOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrayArrayOptionList) Filter(p Uint16ArrayArrayOptionPredicate) Uint16ArrayArrayOptionList {
	acc := NilUint16ArrayArrayOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrayArrayOptionList) Filter(p Uint32ArrayArrayOptionPredicate) Uint32ArrayArrayOptionList {
	acc := NilUint32ArrayArrayOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrayArrayOptionList) Filter(p Uint64ArrayArrayOptionPredicate) Uint64ArrayArrayOptionList {
	acc := NilUint64ArrayArrayOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrayArrayOptionList) Filter(p UintptrArrayArrayOptionPredicate) UintptrArrayArrayOptionList {
	acc := NilUintptrArrayArrayOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrayArrayOptionList) Filter(p ByteArrayArrayOptionPredicate) ByteArrayArrayOptionList {
	acc := NilByteArrayArrayOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrayArrayOptionList) Filter(p RuneArrayArrayOptionPredicate) RuneArrayArrayOptionList {
	acc := NilRuneArrayArrayOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrayArrayOptionList) Filter(p Float32ArrayArrayOptionPredicate) Float32ArrayArrayOptionList {
	acc := NilFloat32ArrayArrayOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrayArrayOptionList) Filter(p Float64ArrayArrayOptionPredicate) Float64ArrayArrayOptionList {
	acc := NilFloat64ArrayArrayOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrayArrayOptionList) Filter(p Complex64ArrayArrayOptionPredicate) Complex64ArrayArrayOptionList {
	acc := NilComplex64ArrayArrayOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrayArrayOptionList) Filter(p Complex128ArrayArrayOptionPredicate) Complex128ArrayArrayOptionList {
	acc := NilComplex128ArrayArrayOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrayArrayOptionList) Filter(p AnyArrayArrayOptionPredicate) AnyArrayArrayOptionList {
	acc := NilAnyArrayArrayOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolOptionArrayOptionList) Filter(p BoolOptionArrayOptionPredicate) BoolOptionArrayOptionList {
	acc := NilBoolOptionArrayOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringOptionArrayOptionList) Filter(p StringOptionArrayOptionPredicate) StringOptionArrayOptionList {
	acc := NilStringOptionArrayOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntOptionArrayOptionList) Filter(p IntOptionArrayOptionPredicate) IntOptionArrayOptionList {
	acc := NilIntOptionArrayOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8OptionArrayOptionList) Filter(p Int8OptionArrayOptionPredicate) Int8OptionArrayOptionList {
	acc := NilInt8OptionArrayOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16OptionArrayOptionList) Filter(p Int16OptionArrayOptionPredicate) Int16OptionArrayOptionList {
	acc := NilInt16OptionArrayOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32OptionArrayOptionList) Filter(p Int32OptionArrayOptionPredicate) Int32OptionArrayOptionList {
	acc := NilInt32OptionArrayOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64OptionArrayOptionList) Filter(p Int64OptionArrayOptionPredicate) Int64OptionArrayOptionList {
	acc := NilInt64OptionArrayOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintOptionArrayOptionList) Filter(p UintOptionArrayOptionPredicate) UintOptionArrayOptionList {
	acc := NilUintOptionArrayOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8OptionArrayOptionList) Filter(p Uint8OptionArrayOptionPredicate) Uint8OptionArrayOptionList {
	acc := NilUint8OptionArrayOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16OptionArrayOptionList) Filter(p Uint16OptionArrayOptionPredicate) Uint16OptionArrayOptionList {
	acc := NilUint16OptionArrayOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32OptionArrayOptionList) Filter(p Uint32OptionArrayOptionPredicate) Uint32OptionArrayOptionList {
	acc := NilUint32OptionArrayOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64OptionArrayOptionList) Filter(p Uint64OptionArrayOptionPredicate) Uint64OptionArrayOptionList {
	acc := NilUint64OptionArrayOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrOptionArrayOptionList) Filter(p UintptrOptionArrayOptionPredicate) UintptrOptionArrayOptionList {
	acc := NilUintptrOptionArrayOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteOptionArrayOptionList) Filter(p ByteOptionArrayOptionPredicate) ByteOptionArrayOptionList {
	acc := NilByteOptionArrayOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneOptionArrayOptionList) Filter(p RuneOptionArrayOptionPredicate) RuneOptionArrayOptionList {
	acc := NilRuneOptionArrayOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32OptionArrayOptionList) Filter(p Float32OptionArrayOptionPredicate) Float32OptionArrayOptionList {
	acc := NilFloat32OptionArrayOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64OptionArrayOptionList) Filter(p Float64OptionArrayOptionPredicate) Float64OptionArrayOptionList {
	acc := NilFloat64OptionArrayOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64OptionArrayOptionList) Filter(p Complex64OptionArrayOptionPredicate) Complex64OptionArrayOptionList {
	acc := NilComplex64OptionArrayOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128OptionArrayOptionList) Filter(p Complex128OptionArrayOptionPredicate) Complex128OptionArrayOptionList {
	acc := NilComplex128OptionArrayOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyOptionArrayOptionList) Filter(p AnyOptionArrayOptionPredicate) AnyOptionArrayOptionList {
	acc := NilAnyOptionArrayOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolListOptionList) Filter(p BoolListOptionPredicate) BoolListOptionList {
	acc := NilBoolListOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringListOptionList) Filter(p StringListOptionPredicate) StringListOptionList {
	acc := NilStringListOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntListOptionList) Filter(p IntListOptionPredicate) IntListOptionList {
	acc := NilIntListOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ListOptionList) Filter(p Int8ListOptionPredicate) Int8ListOptionList {
	acc := NilInt8ListOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ListOptionList) Filter(p Int16ListOptionPredicate) Int16ListOptionList {
	acc := NilInt16ListOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ListOptionList) Filter(p Int32ListOptionPredicate) Int32ListOptionList {
	acc := NilInt32ListOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ListOptionList) Filter(p Int64ListOptionPredicate) Int64ListOptionList {
	acc := NilInt64ListOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintListOptionList) Filter(p UintListOptionPredicate) UintListOptionList {
	acc := NilUintListOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ListOptionList) Filter(p Uint8ListOptionPredicate) Uint8ListOptionList {
	acc := NilUint8ListOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ListOptionList) Filter(p Uint16ListOptionPredicate) Uint16ListOptionList {
	acc := NilUint16ListOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ListOptionList) Filter(p Uint32ListOptionPredicate) Uint32ListOptionList {
	acc := NilUint32ListOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ListOptionList) Filter(p Uint64ListOptionPredicate) Uint64ListOptionList {
	acc := NilUint64ListOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrListOptionList) Filter(p UintptrListOptionPredicate) UintptrListOptionList {
	acc := NilUintptrListOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteListOptionList) Filter(p ByteListOptionPredicate) ByteListOptionList {
	acc := NilByteListOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneListOptionList) Filter(p RuneListOptionPredicate) RuneListOptionList {
	acc := NilRuneListOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ListOptionList) Filter(p Float32ListOptionPredicate) Float32ListOptionList {
	acc := NilFloat32ListOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ListOptionList) Filter(p Float64ListOptionPredicate) Float64ListOptionList {
	acc := NilFloat64ListOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ListOptionList) Filter(p Complex64ListOptionPredicate) Complex64ListOptionList {
	acc := NilComplex64ListOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ListOptionList) Filter(p Complex128ListOptionPredicate) Complex128ListOptionList {
	acc := NilComplex128ListOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyListOptionList) Filter(p AnyListOptionPredicate) AnyListOptionList {
	acc := NilAnyListOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolOptionOptionList) Filter(p BoolOptionOptionPredicate) BoolOptionOptionList {
	acc := NilBoolOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringOptionOptionList) Filter(p StringOptionOptionPredicate) StringOptionOptionList {
	acc := NilStringOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntOptionOptionList) Filter(p IntOptionOptionPredicate) IntOptionOptionList {
	acc := NilIntOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8OptionOptionList) Filter(p Int8OptionOptionPredicate) Int8OptionOptionList {
	acc := NilInt8OptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16OptionOptionList) Filter(p Int16OptionOptionPredicate) Int16OptionOptionList {
	acc := NilInt16OptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32OptionOptionList) Filter(p Int32OptionOptionPredicate) Int32OptionOptionList {
	acc := NilInt32OptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64OptionOptionList) Filter(p Int64OptionOptionPredicate) Int64OptionOptionList {
	acc := NilInt64OptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintOptionOptionList) Filter(p UintOptionOptionPredicate) UintOptionOptionList {
	acc := NilUintOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8OptionOptionList) Filter(p Uint8OptionOptionPredicate) Uint8OptionOptionList {
	acc := NilUint8OptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16OptionOptionList) Filter(p Uint16OptionOptionPredicate) Uint16OptionOptionList {
	acc := NilUint16OptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32OptionOptionList) Filter(p Uint32OptionOptionPredicate) Uint32OptionOptionList {
	acc := NilUint32OptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64OptionOptionList) Filter(p Uint64OptionOptionPredicate) Uint64OptionOptionList {
	acc := NilUint64OptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrOptionOptionList) Filter(p UintptrOptionOptionPredicate) UintptrOptionOptionList {
	acc := NilUintptrOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteOptionOptionList) Filter(p ByteOptionOptionPredicate) ByteOptionOptionList {
	acc := NilByteOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneOptionOptionList) Filter(p RuneOptionOptionPredicate) RuneOptionOptionList {
	acc := NilRuneOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32OptionOptionList) Filter(p Float32OptionOptionPredicate) Float32OptionOptionList {
	acc := NilFloat32OptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64OptionOptionList) Filter(p Float64OptionOptionPredicate) Float64OptionOptionList {
	acc := NilFloat64OptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64OptionOptionList) Filter(p Complex64OptionOptionPredicate) Complex64OptionOptionList {
	acc := NilComplex64OptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128OptionOptionList) Filter(p Complex128OptionOptionPredicate) Complex128OptionOptionList {
	acc := NilComplex128OptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyOptionOptionList) Filter(p AnyOptionOptionPredicate) AnyOptionOptionList {
	acc := NilAnyOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrayOptionOptionList) Filter(p BoolArrayOptionOptionPredicate) BoolArrayOptionOptionList {
	acc := NilBoolArrayOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringArrayOptionOptionList) Filter(p StringArrayOptionOptionPredicate) StringArrayOptionOptionList {
	acc := NilStringArrayOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntArrayOptionOptionList) Filter(p IntArrayOptionOptionPredicate) IntArrayOptionOptionList {
	acc := NilIntArrayOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrayOptionOptionList) Filter(p Int8ArrayOptionOptionPredicate) Int8ArrayOptionOptionList {
	acc := NilInt8ArrayOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrayOptionOptionList) Filter(p Int16ArrayOptionOptionPredicate) Int16ArrayOptionOptionList {
	acc := NilInt16ArrayOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrayOptionOptionList) Filter(p Int32ArrayOptionOptionPredicate) Int32ArrayOptionOptionList {
	acc := NilInt32ArrayOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrayOptionOptionList) Filter(p Int64ArrayOptionOptionPredicate) Int64ArrayOptionOptionList {
	acc := NilInt64ArrayOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintArrayOptionOptionList) Filter(p UintArrayOptionOptionPredicate) UintArrayOptionOptionList {
	acc := NilUintArrayOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrayOptionOptionList) Filter(p Uint8ArrayOptionOptionPredicate) Uint8ArrayOptionOptionList {
	acc := NilUint8ArrayOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrayOptionOptionList) Filter(p Uint16ArrayOptionOptionPredicate) Uint16ArrayOptionOptionList {
	acc := NilUint16ArrayOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrayOptionOptionList) Filter(p Uint32ArrayOptionOptionPredicate) Uint32ArrayOptionOptionList {
	acc := NilUint32ArrayOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrayOptionOptionList) Filter(p Uint64ArrayOptionOptionPredicate) Uint64ArrayOptionOptionList {
	acc := NilUint64ArrayOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrayOptionOptionList) Filter(p UintptrArrayOptionOptionPredicate) UintptrArrayOptionOptionList {
	acc := NilUintptrArrayOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrayOptionOptionList) Filter(p ByteArrayOptionOptionPredicate) ByteArrayOptionOptionList {
	acc := NilByteArrayOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrayOptionOptionList) Filter(p RuneArrayOptionOptionPredicate) RuneArrayOptionOptionList {
	acc := NilRuneArrayOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrayOptionOptionList) Filter(p Float32ArrayOptionOptionPredicate) Float32ArrayOptionOptionList {
	acc := NilFloat32ArrayOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrayOptionOptionList) Filter(p Float64ArrayOptionOptionPredicate) Float64ArrayOptionOptionList {
	acc := NilFloat64ArrayOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrayOptionOptionList) Filter(p Complex64ArrayOptionOptionPredicate) Complex64ArrayOptionOptionList {
	acc := NilComplex64ArrayOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrayOptionOptionList) Filter(p Complex128ArrayOptionOptionPredicate) Complex128ArrayOptionOptionList {
	acc := NilComplex128ArrayOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrayOptionOptionList) Filter(p AnyArrayOptionOptionPredicate) AnyArrayOptionOptionList {
	acc := NilAnyArrayOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrayArrayOptionOptionList) Filter(p BoolArrayArrayOptionOptionPredicate) BoolArrayArrayOptionOptionList {
	acc := NilBoolArrayArrayOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringArrayArrayOptionOptionList) Filter(p StringArrayArrayOptionOptionPredicate) StringArrayArrayOptionOptionList {
	acc := NilStringArrayArrayOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntArrayArrayOptionOptionList) Filter(p IntArrayArrayOptionOptionPredicate) IntArrayArrayOptionOptionList {
	acc := NilIntArrayArrayOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrayArrayOptionOptionList) Filter(p Int8ArrayArrayOptionOptionPredicate) Int8ArrayArrayOptionOptionList {
	acc := NilInt8ArrayArrayOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrayArrayOptionOptionList) Filter(p Int16ArrayArrayOptionOptionPredicate) Int16ArrayArrayOptionOptionList {
	acc := NilInt16ArrayArrayOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrayArrayOptionOptionList) Filter(p Int32ArrayArrayOptionOptionPredicate) Int32ArrayArrayOptionOptionList {
	acc := NilInt32ArrayArrayOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrayArrayOptionOptionList) Filter(p Int64ArrayArrayOptionOptionPredicate) Int64ArrayArrayOptionOptionList {
	acc := NilInt64ArrayArrayOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintArrayArrayOptionOptionList) Filter(p UintArrayArrayOptionOptionPredicate) UintArrayArrayOptionOptionList {
	acc := NilUintArrayArrayOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrayArrayOptionOptionList) Filter(p Uint8ArrayArrayOptionOptionPredicate) Uint8ArrayArrayOptionOptionList {
	acc := NilUint8ArrayArrayOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrayArrayOptionOptionList) Filter(p Uint16ArrayArrayOptionOptionPredicate) Uint16ArrayArrayOptionOptionList {
	acc := NilUint16ArrayArrayOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrayArrayOptionOptionList) Filter(p Uint32ArrayArrayOptionOptionPredicate) Uint32ArrayArrayOptionOptionList {
	acc := NilUint32ArrayArrayOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrayArrayOptionOptionList) Filter(p Uint64ArrayArrayOptionOptionPredicate) Uint64ArrayArrayOptionOptionList {
	acc := NilUint64ArrayArrayOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrayArrayOptionOptionList) Filter(p UintptrArrayArrayOptionOptionPredicate) UintptrArrayArrayOptionOptionList {
	acc := NilUintptrArrayArrayOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrayArrayOptionOptionList) Filter(p ByteArrayArrayOptionOptionPredicate) ByteArrayArrayOptionOptionList {
	acc := NilByteArrayArrayOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrayArrayOptionOptionList) Filter(p RuneArrayArrayOptionOptionPredicate) RuneArrayArrayOptionOptionList {
	acc := NilRuneArrayArrayOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrayArrayOptionOptionList) Filter(p Float32ArrayArrayOptionOptionPredicate) Float32ArrayArrayOptionOptionList {
	acc := NilFloat32ArrayArrayOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrayArrayOptionOptionList) Filter(p Float64ArrayArrayOptionOptionPredicate) Float64ArrayArrayOptionOptionList {
	acc := NilFloat64ArrayArrayOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrayArrayOptionOptionList) Filter(p Complex64ArrayArrayOptionOptionPredicate) Complex64ArrayArrayOptionOptionList {
	acc := NilComplex64ArrayArrayOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrayArrayOptionOptionList) Filter(p Complex128ArrayArrayOptionOptionPredicate) Complex128ArrayArrayOptionOptionList {
	acc := NilComplex128ArrayArrayOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrayArrayOptionOptionList) Filter(p AnyArrayArrayOptionOptionPredicate) AnyArrayArrayOptionOptionList {
	acc := NilAnyArrayArrayOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolOptionArrayOptionOptionList) Filter(p BoolOptionArrayOptionOptionPredicate) BoolOptionArrayOptionOptionList {
	acc := NilBoolOptionArrayOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringOptionArrayOptionOptionList) Filter(p StringOptionArrayOptionOptionPredicate) StringOptionArrayOptionOptionList {
	acc := NilStringOptionArrayOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntOptionArrayOptionOptionList) Filter(p IntOptionArrayOptionOptionPredicate) IntOptionArrayOptionOptionList {
	acc := NilIntOptionArrayOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8OptionArrayOptionOptionList) Filter(p Int8OptionArrayOptionOptionPredicate) Int8OptionArrayOptionOptionList {
	acc := NilInt8OptionArrayOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16OptionArrayOptionOptionList) Filter(p Int16OptionArrayOptionOptionPredicate) Int16OptionArrayOptionOptionList {
	acc := NilInt16OptionArrayOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32OptionArrayOptionOptionList) Filter(p Int32OptionArrayOptionOptionPredicate) Int32OptionArrayOptionOptionList {
	acc := NilInt32OptionArrayOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64OptionArrayOptionOptionList) Filter(p Int64OptionArrayOptionOptionPredicate) Int64OptionArrayOptionOptionList {
	acc := NilInt64OptionArrayOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintOptionArrayOptionOptionList) Filter(p UintOptionArrayOptionOptionPredicate) UintOptionArrayOptionOptionList {
	acc := NilUintOptionArrayOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8OptionArrayOptionOptionList) Filter(p Uint8OptionArrayOptionOptionPredicate) Uint8OptionArrayOptionOptionList {
	acc := NilUint8OptionArrayOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16OptionArrayOptionOptionList) Filter(p Uint16OptionArrayOptionOptionPredicate) Uint16OptionArrayOptionOptionList {
	acc := NilUint16OptionArrayOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32OptionArrayOptionOptionList) Filter(p Uint32OptionArrayOptionOptionPredicate) Uint32OptionArrayOptionOptionList {
	acc := NilUint32OptionArrayOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64OptionArrayOptionOptionList) Filter(p Uint64OptionArrayOptionOptionPredicate) Uint64OptionArrayOptionOptionList {
	acc := NilUint64OptionArrayOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrOptionArrayOptionOptionList) Filter(p UintptrOptionArrayOptionOptionPredicate) UintptrOptionArrayOptionOptionList {
	acc := NilUintptrOptionArrayOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteOptionArrayOptionOptionList) Filter(p ByteOptionArrayOptionOptionPredicate) ByteOptionArrayOptionOptionList {
	acc := NilByteOptionArrayOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneOptionArrayOptionOptionList) Filter(p RuneOptionArrayOptionOptionPredicate) RuneOptionArrayOptionOptionList {
	acc := NilRuneOptionArrayOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32OptionArrayOptionOptionList) Filter(p Float32OptionArrayOptionOptionPredicate) Float32OptionArrayOptionOptionList {
	acc := NilFloat32OptionArrayOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64OptionArrayOptionOptionList) Filter(p Float64OptionArrayOptionOptionPredicate) Float64OptionArrayOptionOptionList {
	acc := NilFloat64OptionArrayOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64OptionArrayOptionOptionList) Filter(p Complex64OptionArrayOptionOptionPredicate) Complex64OptionArrayOptionOptionList {
	acc := NilComplex64OptionArrayOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128OptionArrayOptionOptionList) Filter(p Complex128OptionArrayOptionOptionPredicate) Complex128OptionArrayOptionOptionList {
	acc := NilComplex128OptionArrayOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyOptionArrayOptionOptionList) Filter(p AnyOptionArrayOptionOptionPredicate) AnyOptionArrayOptionOptionList {
	acc := NilAnyOptionArrayOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolListOptionOptionList) Filter(p BoolListOptionOptionPredicate) BoolListOptionOptionList {
	acc := NilBoolListOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringListOptionOptionList) Filter(p StringListOptionOptionPredicate) StringListOptionOptionList {
	acc := NilStringListOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntListOptionOptionList) Filter(p IntListOptionOptionPredicate) IntListOptionOptionList {
	acc := NilIntListOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ListOptionOptionList) Filter(p Int8ListOptionOptionPredicate) Int8ListOptionOptionList {
	acc := NilInt8ListOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ListOptionOptionList) Filter(p Int16ListOptionOptionPredicate) Int16ListOptionOptionList {
	acc := NilInt16ListOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ListOptionOptionList) Filter(p Int32ListOptionOptionPredicate) Int32ListOptionOptionList {
	acc := NilInt32ListOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ListOptionOptionList) Filter(p Int64ListOptionOptionPredicate) Int64ListOptionOptionList {
	acc := NilInt64ListOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintListOptionOptionList) Filter(p UintListOptionOptionPredicate) UintListOptionOptionList {
	acc := NilUintListOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ListOptionOptionList) Filter(p Uint8ListOptionOptionPredicate) Uint8ListOptionOptionList {
	acc := NilUint8ListOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ListOptionOptionList) Filter(p Uint16ListOptionOptionPredicate) Uint16ListOptionOptionList {
	acc := NilUint16ListOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ListOptionOptionList) Filter(p Uint32ListOptionOptionPredicate) Uint32ListOptionOptionList {
	acc := NilUint32ListOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ListOptionOptionList) Filter(p Uint64ListOptionOptionPredicate) Uint64ListOptionOptionList {
	acc := NilUint64ListOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrListOptionOptionList) Filter(p UintptrListOptionOptionPredicate) UintptrListOptionOptionList {
	acc := NilUintptrListOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteListOptionOptionList) Filter(p ByteListOptionOptionPredicate) ByteListOptionOptionList {
	acc := NilByteListOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneListOptionOptionList) Filter(p RuneListOptionOptionPredicate) RuneListOptionOptionList {
	acc := NilRuneListOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ListOptionOptionList) Filter(p Float32ListOptionOptionPredicate) Float32ListOptionOptionList {
	acc := NilFloat32ListOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ListOptionOptionList) Filter(p Float64ListOptionOptionPredicate) Float64ListOptionOptionList {
	acc := NilFloat64ListOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ListOptionOptionList) Filter(p Complex64ListOptionOptionPredicate) Complex64ListOptionOptionList {
	acc := NilComplex64ListOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ListOptionOptionList) Filter(p Complex128ListOptionOptionPredicate) Complex128ListOptionOptionList {
	acc := NilComplex128ListOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyListOptionOptionList) Filter(p AnyListOptionOptionPredicate) AnyListOptionOptionList {
	acc := NilAnyListOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolOptionOptionOptionList) Filter(p BoolOptionOptionOptionPredicate) BoolOptionOptionOptionList {
	acc := NilBoolOptionOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringOptionOptionOptionList) Filter(p StringOptionOptionOptionPredicate) StringOptionOptionOptionList {
	acc := NilStringOptionOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntOptionOptionOptionList) Filter(p IntOptionOptionOptionPredicate) IntOptionOptionOptionList {
	acc := NilIntOptionOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8OptionOptionOptionList) Filter(p Int8OptionOptionOptionPredicate) Int8OptionOptionOptionList {
	acc := NilInt8OptionOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16OptionOptionOptionList) Filter(p Int16OptionOptionOptionPredicate) Int16OptionOptionOptionList {
	acc := NilInt16OptionOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32OptionOptionOptionList) Filter(p Int32OptionOptionOptionPredicate) Int32OptionOptionOptionList {
	acc := NilInt32OptionOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64OptionOptionOptionList) Filter(p Int64OptionOptionOptionPredicate) Int64OptionOptionOptionList {
	acc := NilInt64OptionOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintOptionOptionOptionList) Filter(p UintOptionOptionOptionPredicate) UintOptionOptionOptionList {
	acc := NilUintOptionOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8OptionOptionOptionList) Filter(p Uint8OptionOptionOptionPredicate) Uint8OptionOptionOptionList {
	acc := NilUint8OptionOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16OptionOptionOptionList) Filter(p Uint16OptionOptionOptionPredicate) Uint16OptionOptionOptionList {
	acc := NilUint16OptionOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32OptionOptionOptionList) Filter(p Uint32OptionOptionOptionPredicate) Uint32OptionOptionOptionList {
	acc := NilUint32OptionOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64OptionOptionOptionList) Filter(p Uint64OptionOptionOptionPredicate) Uint64OptionOptionOptionList {
	acc := NilUint64OptionOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrOptionOptionOptionList) Filter(p UintptrOptionOptionOptionPredicate) UintptrOptionOptionOptionList {
	acc := NilUintptrOptionOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteOptionOptionOptionList) Filter(p ByteOptionOptionOptionPredicate) ByteOptionOptionOptionList {
	acc := NilByteOptionOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneOptionOptionOptionList) Filter(p RuneOptionOptionOptionPredicate) RuneOptionOptionOptionList {
	acc := NilRuneOptionOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32OptionOptionOptionList) Filter(p Float32OptionOptionOptionPredicate) Float32OptionOptionOptionList {
	acc := NilFloat32OptionOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64OptionOptionOptionList) Filter(p Float64OptionOptionOptionPredicate) Float64OptionOptionOptionList {
	acc := NilFloat64OptionOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64OptionOptionOptionList) Filter(p Complex64OptionOptionOptionPredicate) Complex64OptionOptionOptionList {
	acc := NilComplex64OptionOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128OptionOptionOptionList) Filter(p Complex128OptionOptionOptionPredicate) Complex128OptionOptionOptionList {
	acc := NilComplex128OptionOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyOptionOptionOptionList) Filter(p AnyOptionOptionOptionPredicate) AnyOptionOptionOptionList {
	acc := NilAnyOptionOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrayOptionOptionOptionList) Filter(p BoolArrayOptionOptionOptionPredicate) BoolArrayOptionOptionOptionList {
	acc := NilBoolArrayOptionOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringArrayOptionOptionOptionList) Filter(p StringArrayOptionOptionOptionPredicate) StringArrayOptionOptionOptionList {
	acc := NilStringArrayOptionOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntArrayOptionOptionOptionList) Filter(p IntArrayOptionOptionOptionPredicate) IntArrayOptionOptionOptionList {
	acc := NilIntArrayOptionOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrayOptionOptionOptionList) Filter(p Int8ArrayOptionOptionOptionPredicate) Int8ArrayOptionOptionOptionList {
	acc := NilInt8ArrayOptionOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrayOptionOptionOptionList) Filter(p Int16ArrayOptionOptionOptionPredicate) Int16ArrayOptionOptionOptionList {
	acc := NilInt16ArrayOptionOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrayOptionOptionOptionList) Filter(p Int32ArrayOptionOptionOptionPredicate) Int32ArrayOptionOptionOptionList {
	acc := NilInt32ArrayOptionOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrayOptionOptionOptionList) Filter(p Int64ArrayOptionOptionOptionPredicate) Int64ArrayOptionOptionOptionList {
	acc := NilInt64ArrayOptionOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintArrayOptionOptionOptionList) Filter(p UintArrayOptionOptionOptionPredicate) UintArrayOptionOptionOptionList {
	acc := NilUintArrayOptionOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrayOptionOptionOptionList) Filter(p Uint8ArrayOptionOptionOptionPredicate) Uint8ArrayOptionOptionOptionList {
	acc := NilUint8ArrayOptionOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrayOptionOptionOptionList) Filter(p Uint16ArrayOptionOptionOptionPredicate) Uint16ArrayOptionOptionOptionList {
	acc := NilUint16ArrayOptionOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrayOptionOptionOptionList) Filter(p Uint32ArrayOptionOptionOptionPredicate) Uint32ArrayOptionOptionOptionList {
	acc := NilUint32ArrayOptionOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrayOptionOptionOptionList) Filter(p Uint64ArrayOptionOptionOptionPredicate) Uint64ArrayOptionOptionOptionList {
	acc := NilUint64ArrayOptionOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrayOptionOptionOptionList) Filter(p UintptrArrayOptionOptionOptionPredicate) UintptrArrayOptionOptionOptionList {
	acc := NilUintptrArrayOptionOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrayOptionOptionOptionList) Filter(p ByteArrayOptionOptionOptionPredicate) ByteArrayOptionOptionOptionList {
	acc := NilByteArrayOptionOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrayOptionOptionOptionList) Filter(p RuneArrayOptionOptionOptionPredicate) RuneArrayOptionOptionOptionList {
	acc := NilRuneArrayOptionOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrayOptionOptionOptionList) Filter(p Float32ArrayOptionOptionOptionPredicate) Float32ArrayOptionOptionOptionList {
	acc := NilFloat32ArrayOptionOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrayOptionOptionOptionList) Filter(p Float64ArrayOptionOptionOptionPredicate) Float64ArrayOptionOptionOptionList {
	acc := NilFloat64ArrayOptionOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrayOptionOptionOptionList) Filter(p Complex64ArrayOptionOptionOptionPredicate) Complex64ArrayOptionOptionOptionList {
	acc := NilComplex64ArrayOptionOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrayOptionOptionOptionList) Filter(p Complex128ArrayOptionOptionOptionPredicate) Complex128ArrayOptionOptionOptionList {
	acc := NilComplex128ArrayOptionOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrayOptionOptionOptionList) Filter(p AnyArrayOptionOptionOptionPredicate) AnyArrayOptionOptionOptionList {
	acc := NilAnyArrayOptionOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrayArrayOptionOptionOptionList) Filter(p BoolArrayArrayOptionOptionOptionPredicate) BoolArrayArrayOptionOptionOptionList {
	acc := NilBoolArrayArrayOptionOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringArrayArrayOptionOptionOptionList) Filter(p StringArrayArrayOptionOptionOptionPredicate) StringArrayArrayOptionOptionOptionList {
	acc := NilStringArrayArrayOptionOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntArrayArrayOptionOptionOptionList) Filter(p IntArrayArrayOptionOptionOptionPredicate) IntArrayArrayOptionOptionOptionList {
	acc := NilIntArrayArrayOptionOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrayArrayOptionOptionOptionList) Filter(p Int8ArrayArrayOptionOptionOptionPredicate) Int8ArrayArrayOptionOptionOptionList {
	acc := NilInt8ArrayArrayOptionOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrayArrayOptionOptionOptionList) Filter(p Int16ArrayArrayOptionOptionOptionPredicate) Int16ArrayArrayOptionOptionOptionList {
	acc := NilInt16ArrayArrayOptionOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrayArrayOptionOptionOptionList) Filter(p Int32ArrayArrayOptionOptionOptionPredicate) Int32ArrayArrayOptionOptionOptionList {
	acc := NilInt32ArrayArrayOptionOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrayArrayOptionOptionOptionList) Filter(p Int64ArrayArrayOptionOptionOptionPredicate) Int64ArrayArrayOptionOptionOptionList {
	acc := NilInt64ArrayArrayOptionOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintArrayArrayOptionOptionOptionList) Filter(p UintArrayArrayOptionOptionOptionPredicate) UintArrayArrayOptionOptionOptionList {
	acc := NilUintArrayArrayOptionOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrayArrayOptionOptionOptionList) Filter(p Uint8ArrayArrayOptionOptionOptionPredicate) Uint8ArrayArrayOptionOptionOptionList {
	acc := NilUint8ArrayArrayOptionOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrayArrayOptionOptionOptionList) Filter(p Uint16ArrayArrayOptionOptionOptionPredicate) Uint16ArrayArrayOptionOptionOptionList {
	acc := NilUint16ArrayArrayOptionOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrayArrayOptionOptionOptionList) Filter(p Uint32ArrayArrayOptionOptionOptionPredicate) Uint32ArrayArrayOptionOptionOptionList {
	acc := NilUint32ArrayArrayOptionOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrayArrayOptionOptionOptionList) Filter(p Uint64ArrayArrayOptionOptionOptionPredicate) Uint64ArrayArrayOptionOptionOptionList {
	acc := NilUint64ArrayArrayOptionOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrayArrayOptionOptionOptionList) Filter(p UintptrArrayArrayOptionOptionOptionPredicate) UintptrArrayArrayOptionOptionOptionList {
	acc := NilUintptrArrayArrayOptionOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrayArrayOptionOptionOptionList) Filter(p ByteArrayArrayOptionOptionOptionPredicate) ByteArrayArrayOptionOptionOptionList {
	acc := NilByteArrayArrayOptionOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrayArrayOptionOptionOptionList) Filter(p RuneArrayArrayOptionOptionOptionPredicate) RuneArrayArrayOptionOptionOptionList {
	acc := NilRuneArrayArrayOptionOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrayArrayOptionOptionOptionList) Filter(p Float32ArrayArrayOptionOptionOptionPredicate) Float32ArrayArrayOptionOptionOptionList {
	acc := NilFloat32ArrayArrayOptionOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrayArrayOptionOptionOptionList) Filter(p Float64ArrayArrayOptionOptionOptionPredicate) Float64ArrayArrayOptionOptionOptionList {
	acc := NilFloat64ArrayArrayOptionOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrayArrayOptionOptionOptionList) Filter(p Complex64ArrayArrayOptionOptionOptionPredicate) Complex64ArrayArrayOptionOptionOptionList {
	acc := NilComplex64ArrayArrayOptionOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrayArrayOptionOptionOptionList) Filter(p Complex128ArrayArrayOptionOptionOptionPredicate) Complex128ArrayArrayOptionOptionOptionList {
	acc := NilComplex128ArrayArrayOptionOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrayArrayOptionOptionOptionList) Filter(p AnyArrayArrayOptionOptionOptionPredicate) AnyArrayArrayOptionOptionOptionList {
	acc := NilAnyArrayArrayOptionOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolOptionArrayOptionOptionOptionList) Filter(p BoolOptionArrayOptionOptionOptionPredicate) BoolOptionArrayOptionOptionOptionList {
	acc := NilBoolOptionArrayOptionOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringOptionArrayOptionOptionOptionList) Filter(p StringOptionArrayOptionOptionOptionPredicate) StringOptionArrayOptionOptionOptionList {
	acc := NilStringOptionArrayOptionOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntOptionArrayOptionOptionOptionList) Filter(p IntOptionArrayOptionOptionOptionPredicate) IntOptionArrayOptionOptionOptionList {
	acc := NilIntOptionArrayOptionOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8OptionArrayOptionOptionOptionList) Filter(p Int8OptionArrayOptionOptionOptionPredicate) Int8OptionArrayOptionOptionOptionList {
	acc := NilInt8OptionArrayOptionOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16OptionArrayOptionOptionOptionList) Filter(p Int16OptionArrayOptionOptionOptionPredicate) Int16OptionArrayOptionOptionOptionList {
	acc := NilInt16OptionArrayOptionOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32OptionArrayOptionOptionOptionList) Filter(p Int32OptionArrayOptionOptionOptionPredicate) Int32OptionArrayOptionOptionOptionList {
	acc := NilInt32OptionArrayOptionOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64OptionArrayOptionOptionOptionList) Filter(p Int64OptionArrayOptionOptionOptionPredicate) Int64OptionArrayOptionOptionOptionList {
	acc := NilInt64OptionArrayOptionOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintOptionArrayOptionOptionOptionList) Filter(p UintOptionArrayOptionOptionOptionPredicate) UintOptionArrayOptionOptionOptionList {
	acc := NilUintOptionArrayOptionOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8OptionArrayOptionOptionOptionList) Filter(p Uint8OptionArrayOptionOptionOptionPredicate) Uint8OptionArrayOptionOptionOptionList {
	acc := NilUint8OptionArrayOptionOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16OptionArrayOptionOptionOptionList) Filter(p Uint16OptionArrayOptionOptionOptionPredicate) Uint16OptionArrayOptionOptionOptionList {
	acc := NilUint16OptionArrayOptionOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32OptionArrayOptionOptionOptionList) Filter(p Uint32OptionArrayOptionOptionOptionPredicate) Uint32OptionArrayOptionOptionOptionList {
	acc := NilUint32OptionArrayOptionOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64OptionArrayOptionOptionOptionList) Filter(p Uint64OptionArrayOptionOptionOptionPredicate) Uint64OptionArrayOptionOptionOptionList {
	acc := NilUint64OptionArrayOptionOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrOptionArrayOptionOptionOptionList) Filter(p UintptrOptionArrayOptionOptionOptionPredicate) UintptrOptionArrayOptionOptionOptionList {
	acc := NilUintptrOptionArrayOptionOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteOptionArrayOptionOptionOptionList) Filter(p ByteOptionArrayOptionOptionOptionPredicate) ByteOptionArrayOptionOptionOptionList {
	acc := NilByteOptionArrayOptionOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneOptionArrayOptionOptionOptionList) Filter(p RuneOptionArrayOptionOptionOptionPredicate) RuneOptionArrayOptionOptionOptionList {
	acc := NilRuneOptionArrayOptionOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32OptionArrayOptionOptionOptionList) Filter(p Float32OptionArrayOptionOptionOptionPredicate) Float32OptionArrayOptionOptionOptionList {
	acc := NilFloat32OptionArrayOptionOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64OptionArrayOptionOptionOptionList) Filter(p Float64OptionArrayOptionOptionOptionPredicate) Float64OptionArrayOptionOptionOptionList {
	acc := NilFloat64OptionArrayOptionOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64OptionArrayOptionOptionOptionList) Filter(p Complex64OptionArrayOptionOptionOptionPredicate) Complex64OptionArrayOptionOptionOptionList {
	acc := NilComplex64OptionArrayOptionOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128OptionArrayOptionOptionOptionList) Filter(p Complex128OptionArrayOptionOptionOptionPredicate) Complex128OptionArrayOptionOptionOptionList {
	acc := NilComplex128OptionArrayOptionOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyOptionArrayOptionOptionOptionList) Filter(p AnyOptionArrayOptionOptionOptionPredicate) AnyOptionArrayOptionOptionOptionList {
	acc := NilAnyOptionArrayOptionOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolListOptionOptionOptionList) Filter(p BoolListOptionOptionOptionPredicate) BoolListOptionOptionOptionList {
	acc := NilBoolListOptionOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringListOptionOptionOptionList) Filter(p StringListOptionOptionOptionPredicate) StringListOptionOptionOptionList {
	acc := NilStringListOptionOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntListOptionOptionOptionList) Filter(p IntListOptionOptionOptionPredicate) IntListOptionOptionOptionList {
	acc := NilIntListOptionOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ListOptionOptionOptionList) Filter(p Int8ListOptionOptionOptionPredicate) Int8ListOptionOptionOptionList {
	acc := NilInt8ListOptionOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ListOptionOptionOptionList) Filter(p Int16ListOptionOptionOptionPredicate) Int16ListOptionOptionOptionList {
	acc := NilInt16ListOptionOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ListOptionOptionOptionList) Filter(p Int32ListOptionOptionOptionPredicate) Int32ListOptionOptionOptionList {
	acc := NilInt32ListOptionOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ListOptionOptionOptionList) Filter(p Int64ListOptionOptionOptionPredicate) Int64ListOptionOptionOptionList {
	acc := NilInt64ListOptionOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintListOptionOptionOptionList) Filter(p UintListOptionOptionOptionPredicate) UintListOptionOptionOptionList {
	acc := NilUintListOptionOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ListOptionOptionOptionList) Filter(p Uint8ListOptionOptionOptionPredicate) Uint8ListOptionOptionOptionList {
	acc := NilUint8ListOptionOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ListOptionOptionOptionList) Filter(p Uint16ListOptionOptionOptionPredicate) Uint16ListOptionOptionOptionList {
	acc := NilUint16ListOptionOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ListOptionOptionOptionList) Filter(p Uint32ListOptionOptionOptionPredicate) Uint32ListOptionOptionOptionList {
	acc := NilUint32ListOptionOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ListOptionOptionOptionList) Filter(p Uint64ListOptionOptionOptionPredicate) Uint64ListOptionOptionOptionList {
	acc := NilUint64ListOptionOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrListOptionOptionOptionList) Filter(p UintptrListOptionOptionOptionPredicate) UintptrListOptionOptionOptionList {
	acc := NilUintptrListOptionOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteListOptionOptionOptionList) Filter(p ByteListOptionOptionOptionPredicate) ByteListOptionOptionOptionList {
	acc := NilByteListOptionOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneListOptionOptionOptionList) Filter(p RuneListOptionOptionOptionPredicate) RuneListOptionOptionOptionList {
	acc := NilRuneListOptionOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ListOptionOptionOptionList) Filter(p Float32ListOptionOptionOptionPredicate) Float32ListOptionOptionOptionList {
	acc := NilFloat32ListOptionOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ListOptionOptionOptionList) Filter(p Float64ListOptionOptionOptionPredicate) Float64ListOptionOptionOptionList {
	acc := NilFloat64ListOptionOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ListOptionOptionOptionList) Filter(p Complex64ListOptionOptionOptionPredicate) Complex64ListOptionOptionOptionList {
	acc := NilComplex64ListOptionOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ListOptionOptionOptionList) Filter(p Complex128ListOptionOptionOptionPredicate) Complex128ListOptionOptionOptionList {
	acc := NilComplex128ListOptionOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyListOptionOptionOptionList) Filter(p AnyListOptionOptionOptionPredicate) AnyListOptionOptionOptionList {
	acc := NilAnyListOptionOptionOption
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrayList) Filter(p BoolArrayPredicate) BoolArrayList {
	acc := NilBoolArray
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringArrayList) Filter(p StringArrayPredicate) StringArrayList {
	acc := NilStringArray
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntArrayList) Filter(p IntArrayPredicate) IntArrayList {
	acc := NilIntArray
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrayList) Filter(p Int8ArrayPredicate) Int8ArrayList {
	acc := NilInt8Array
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrayList) Filter(p Int16ArrayPredicate) Int16ArrayList {
	acc := NilInt16Array
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrayList) Filter(p Int32ArrayPredicate) Int32ArrayList {
	acc := NilInt32Array
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrayList) Filter(p Int64ArrayPredicate) Int64ArrayList {
	acc := NilInt64Array
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintArrayList) Filter(p UintArrayPredicate) UintArrayList {
	acc := NilUintArray
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrayList) Filter(p Uint8ArrayPredicate) Uint8ArrayList {
	acc := NilUint8Array
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrayList) Filter(p Uint16ArrayPredicate) Uint16ArrayList {
	acc := NilUint16Array
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrayList) Filter(p Uint32ArrayPredicate) Uint32ArrayList {
	acc := NilUint32Array
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrayList) Filter(p Uint64ArrayPredicate) Uint64ArrayList {
	acc := NilUint64Array
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrayList) Filter(p UintptrArrayPredicate) UintptrArrayList {
	acc := NilUintptrArray
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrayList) Filter(p ByteArrayPredicate) ByteArrayList {
	acc := NilByteArray
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrayList) Filter(p RuneArrayPredicate) RuneArrayList {
	acc := NilRuneArray
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrayList) Filter(p Float32ArrayPredicate) Float32ArrayList {
	acc := NilFloat32Array
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrayList) Filter(p Float64ArrayPredicate) Float64ArrayList {
	acc := NilFloat64Array
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrayList) Filter(p Complex64ArrayPredicate) Complex64ArrayList {
	acc := NilComplex64Array
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrayList) Filter(p Complex128ArrayPredicate) Complex128ArrayList {
	acc := NilComplex128Array
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrayList) Filter(p AnyArrayPredicate) AnyArrayList {
	acc := NilAnyArray
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolArrayArrayList) Filter(p BoolArrayArrayPredicate) BoolArrayArrayList {
	acc := NilBoolArrayArray
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringArrayArrayList) Filter(p StringArrayArrayPredicate) StringArrayArrayList {
	acc := NilStringArrayArray
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntArrayArrayList) Filter(p IntArrayArrayPredicate) IntArrayArrayList {
	acc := NilIntArrayArray
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ArrayArrayList) Filter(p Int8ArrayArrayPredicate) Int8ArrayArrayList {
	acc := NilInt8ArrayArray
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ArrayArrayList) Filter(p Int16ArrayArrayPredicate) Int16ArrayArrayList {
	acc := NilInt16ArrayArray
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ArrayArrayList) Filter(p Int32ArrayArrayPredicate) Int32ArrayArrayList {
	acc := NilInt32ArrayArray
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ArrayArrayList) Filter(p Int64ArrayArrayPredicate) Int64ArrayArrayList {
	acc := NilInt64ArrayArray
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintArrayArrayList) Filter(p UintArrayArrayPredicate) UintArrayArrayList {
	acc := NilUintArrayArray
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ArrayArrayList) Filter(p Uint8ArrayArrayPredicate) Uint8ArrayArrayList {
	acc := NilUint8ArrayArray
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ArrayArrayList) Filter(p Uint16ArrayArrayPredicate) Uint16ArrayArrayList {
	acc := NilUint16ArrayArray
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ArrayArrayList) Filter(p Uint32ArrayArrayPredicate) Uint32ArrayArrayList {
	acc := NilUint32ArrayArray
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ArrayArrayList) Filter(p Uint64ArrayArrayPredicate) Uint64ArrayArrayList {
	acc := NilUint64ArrayArray
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrArrayArrayList) Filter(p UintptrArrayArrayPredicate) UintptrArrayArrayList {
	acc := NilUintptrArrayArray
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteArrayArrayList) Filter(p ByteArrayArrayPredicate) ByteArrayArrayList {
	acc := NilByteArrayArray
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneArrayArrayList) Filter(p RuneArrayArrayPredicate) RuneArrayArrayList {
	acc := NilRuneArrayArray
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ArrayArrayList) Filter(p Float32ArrayArrayPredicate) Float32ArrayArrayList {
	acc := NilFloat32ArrayArray
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ArrayArrayList) Filter(p Float64ArrayArrayPredicate) Float64ArrayArrayList {
	acc := NilFloat64ArrayArray
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ArrayArrayList) Filter(p Complex64ArrayArrayPredicate) Complex64ArrayArrayList {
	acc := NilComplex64ArrayArray
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ArrayArrayList) Filter(p Complex128ArrayArrayPredicate) Complex128ArrayArrayList {
	acc := NilComplex128ArrayArray
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyArrayArrayList) Filter(p AnyArrayArrayPredicate) AnyArrayArrayList {
	acc := NilAnyArrayArray
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolOptionArrayList) Filter(p BoolOptionArrayPredicate) BoolOptionArrayList {
	acc := NilBoolOptionArray
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringOptionArrayList) Filter(p StringOptionArrayPredicate) StringOptionArrayList {
	acc := NilStringOptionArray
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntOptionArrayList) Filter(p IntOptionArrayPredicate) IntOptionArrayList {
	acc := NilIntOptionArray
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8OptionArrayList) Filter(p Int8OptionArrayPredicate) Int8OptionArrayList {
	acc := NilInt8OptionArray
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16OptionArrayList) Filter(p Int16OptionArrayPredicate) Int16OptionArrayList {
	acc := NilInt16OptionArray
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32OptionArrayList) Filter(p Int32OptionArrayPredicate) Int32OptionArrayList {
	acc := NilInt32OptionArray
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64OptionArrayList) Filter(p Int64OptionArrayPredicate) Int64OptionArrayList {
	acc := NilInt64OptionArray
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintOptionArrayList) Filter(p UintOptionArrayPredicate) UintOptionArrayList {
	acc := NilUintOptionArray
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8OptionArrayList) Filter(p Uint8OptionArrayPredicate) Uint8OptionArrayList {
	acc := NilUint8OptionArray
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16OptionArrayList) Filter(p Uint16OptionArrayPredicate) Uint16OptionArrayList {
	acc := NilUint16OptionArray
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32OptionArrayList) Filter(p Uint32OptionArrayPredicate) Uint32OptionArrayList {
	acc := NilUint32OptionArray
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64OptionArrayList) Filter(p Uint64OptionArrayPredicate) Uint64OptionArrayList {
	acc := NilUint64OptionArray
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrOptionArrayList) Filter(p UintptrOptionArrayPredicate) UintptrOptionArrayList {
	acc := NilUintptrOptionArray
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteOptionArrayList) Filter(p ByteOptionArrayPredicate) ByteOptionArrayList {
	acc := NilByteOptionArray
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneOptionArrayList) Filter(p RuneOptionArrayPredicate) RuneOptionArrayList {
	acc := NilRuneOptionArray
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32OptionArrayList) Filter(p Float32OptionArrayPredicate) Float32OptionArrayList {
	acc := NilFloat32OptionArray
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64OptionArrayList) Filter(p Float64OptionArrayPredicate) Float64OptionArrayList {
	acc := NilFloat64OptionArray
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64OptionArrayList) Filter(p Complex64OptionArrayPredicate) Complex64OptionArrayList {
	acc := NilComplex64OptionArray
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128OptionArrayList) Filter(p Complex128OptionArrayPredicate) Complex128OptionArrayList {
	acc := NilComplex128OptionArray
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyOptionArrayList) Filter(p AnyOptionArrayPredicate) AnyOptionArrayList {
	acc := NilAnyOptionArray
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l BoolListList) Filter(p BoolListPredicate) BoolListList {
	acc := NilBoolList
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l StringListList) Filter(p StringListPredicate) StringListList {
	acc := NilStringList
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l IntListList) Filter(p IntListPredicate) IntListList {
	acc := NilIntList
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int8ListList) Filter(p Int8ListPredicate) Int8ListList {
	acc := NilInt8List
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int16ListList) Filter(p Int16ListPredicate) Int16ListList {
	acc := NilInt16List
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int32ListList) Filter(p Int32ListPredicate) Int32ListList {
	acc := NilInt32List
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Int64ListList) Filter(p Int64ListPredicate) Int64ListList {
	acc := NilInt64List
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintListList) Filter(p UintListPredicate) UintListList {
	acc := NilUintList
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint8ListList) Filter(p Uint8ListPredicate) Uint8ListList {
	acc := NilUint8List
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint16ListList) Filter(p Uint16ListPredicate) Uint16ListList {
	acc := NilUint16List
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint32ListList) Filter(p Uint32ListPredicate) Uint32ListList {
	acc := NilUint32List
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Uint64ListList) Filter(p Uint64ListPredicate) Uint64ListList {
	acc := NilUint64List
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l UintptrListList) Filter(p UintptrListPredicate) UintptrListList {
	acc := NilUintptrList
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l ByteListList) Filter(p ByteListPredicate) ByteListList {
	acc := NilByteList
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l RuneListList) Filter(p RuneListPredicate) RuneListList {
	acc := NilRuneList
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float32ListList) Filter(p Float32ListPredicate) Float32ListList {
	acc := NilFloat32List
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Float64ListList) Filter(p Float64ListPredicate) Float64ListList {
	acc := NilFloat64List
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex64ListList) Filter(p Complex64ListPredicate) Complex64ListList {
	acc := NilComplex64List
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l Complex128ListList) Filter(p Complex128ListPredicate) Complex128ListList {
	acc := NilComplex128List
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
func (l AnyListList) Filter(p AnyListPredicate) AnyListList {
	acc := NilAnyList
	xs := l
	for xs.NonEmpty() {
		if p(*xs.head) {
			acc = acc.Cons(*xs.head)
		}
		xs = *xs.tail
	}
	return acc.Reverse()
}
