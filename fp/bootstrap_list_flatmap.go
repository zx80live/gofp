// bootstrap_list_flatmap.go
// DO NOT EDIT THIS FILE WAS GENERATED AUTOMATICALLY BY https://github.com/zx80live/gofp-bootstrap

package fp

func (m BoolList) FlatMapBool(f func(bool) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBoolList
	} else {
		acc := NilBoolList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolList) FlatMapString(f func(bool) StringList) StringList {
	if m.IsEmpty() {
		return NilStringList
	} else {
		acc := NilStringList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolList) FlatMapInt(f func(bool) IntList) IntList {
	if m.IsEmpty() {
		return NilIntList
	} else {
		acc := NilIntList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolList) FlatMapInt8(f func(bool) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8List
	} else {
		acc := NilInt8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolList) FlatMapInt16(f func(bool) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16List
	} else {
		acc := NilInt16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolList) FlatMapInt32(f func(bool) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32List
	} else {
		acc := NilInt32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolList) FlatMapInt64(f func(bool) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64List
	} else {
		acc := NilInt64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolList) FlatMapUint(f func(bool) UintList) UintList {
	if m.IsEmpty() {
		return NilUintList
	} else {
		acc := NilUintList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolList) FlatMapUint8(f func(bool) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8List
	} else {
		acc := NilUint8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolList) FlatMapUint16(f func(bool) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16List
	} else {
		acc := NilUint16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolList) FlatMapUint32(f func(bool) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32List
	} else {
		acc := NilUint32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolList) FlatMapUint64(f func(bool) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64List
	} else {
		acc := NilUint64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolList) FlatMapUintptr(f func(bool) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptrList
	} else {
		acc := NilUintptrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolList) FlatMapByte(f func(bool) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByteList
	} else {
		acc := NilByteList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolList) FlatMapRune(f func(bool) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRuneList
	} else {
		acc := NilRuneList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolList) FlatMapFloat32(f func(bool) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32List
	} else {
		acc := NilFloat32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolList) FlatMapFloat64(f func(bool) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64List
	} else {
		acc := NilFloat64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolList) FlatMapComplex64(f func(bool) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64List
	} else {
		acc := NilComplex64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolList) FlatMapComplex128(f func(bool) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128List
	} else {
		acc := NilComplex128List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolList) FlatMapAny(f func(bool) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAnyList
	} else {
		acc := NilAnyList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringList) FlatMapBool(f func(string) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBoolList
	} else {
		acc := NilBoolList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringList) FlatMapString(f func(string) StringList) StringList {
	if m.IsEmpty() {
		return NilStringList
	} else {
		acc := NilStringList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringList) FlatMapInt(f func(string) IntList) IntList {
	if m.IsEmpty() {
		return NilIntList
	} else {
		acc := NilIntList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringList) FlatMapInt8(f func(string) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8List
	} else {
		acc := NilInt8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringList) FlatMapInt16(f func(string) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16List
	} else {
		acc := NilInt16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringList) FlatMapInt32(f func(string) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32List
	} else {
		acc := NilInt32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringList) FlatMapInt64(f func(string) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64List
	} else {
		acc := NilInt64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringList) FlatMapUint(f func(string) UintList) UintList {
	if m.IsEmpty() {
		return NilUintList
	} else {
		acc := NilUintList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringList) FlatMapUint8(f func(string) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8List
	} else {
		acc := NilUint8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringList) FlatMapUint16(f func(string) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16List
	} else {
		acc := NilUint16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringList) FlatMapUint32(f func(string) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32List
	} else {
		acc := NilUint32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringList) FlatMapUint64(f func(string) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64List
	} else {
		acc := NilUint64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringList) FlatMapUintptr(f func(string) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptrList
	} else {
		acc := NilUintptrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringList) FlatMapByte(f func(string) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByteList
	} else {
		acc := NilByteList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringList) FlatMapRune(f func(string) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRuneList
	} else {
		acc := NilRuneList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringList) FlatMapFloat32(f func(string) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32List
	} else {
		acc := NilFloat32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringList) FlatMapFloat64(f func(string) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64List
	} else {
		acc := NilFloat64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringList) FlatMapComplex64(f func(string) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64List
	} else {
		acc := NilComplex64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringList) FlatMapComplex128(f func(string) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128List
	} else {
		acc := NilComplex128List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringList) FlatMapAny(f func(string) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAnyList
	} else {
		acc := NilAnyList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntList) FlatMapBool(f func(int) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBoolList
	} else {
		acc := NilBoolList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntList) FlatMapString(f func(int) StringList) StringList {
	if m.IsEmpty() {
		return NilStringList
	} else {
		acc := NilStringList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntList) FlatMapInt(f func(int) IntList) IntList {
	if m.IsEmpty() {
		return NilIntList
	} else {
		acc := NilIntList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntList) FlatMapInt8(f func(int) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8List
	} else {
		acc := NilInt8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntList) FlatMapInt16(f func(int) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16List
	} else {
		acc := NilInt16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntList) FlatMapInt32(f func(int) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32List
	} else {
		acc := NilInt32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntList) FlatMapInt64(f func(int) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64List
	} else {
		acc := NilInt64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntList) FlatMapUint(f func(int) UintList) UintList {
	if m.IsEmpty() {
		return NilUintList
	} else {
		acc := NilUintList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntList) FlatMapUint8(f func(int) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8List
	} else {
		acc := NilUint8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntList) FlatMapUint16(f func(int) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16List
	} else {
		acc := NilUint16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntList) FlatMapUint32(f func(int) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32List
	} else {
		acc := NilUint32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntList) FlatMapUint64(f func(int) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64List
	} else {
		acc := NilUint64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntList) FlatMapUintptr(f func(int) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptrList
	} else {
		acc := NilUintptrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntList) FlatMapByte(f func(int) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByteList
	} else {
		acc := NilByteList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntList) FlatMapRune(f func(int) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRuneList
	} else {
		acc := NilRuneList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntList) FlatMapFloat32(f func(int) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32List
	} else {
		acc := NilFloat32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntList) FlatMapFloat64(f func(int) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64List
	} else {
		acc := NilFloat64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntList) FlatMapComplex64(f func(int) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64List
	} else {
		acc := NilComplex64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntList) FlatMapComplex128(f func(int) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128List
	} else {
		acc := NilComplex128List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntList) FlatMapAny(f func(int) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAnyList
	} else {
		acc := NilAnyList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8List) FlatMapBool(f func(int8) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBoolList
	} else {
		acc := NilBoolList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8List) FlatMapString(f func(int8) StringList) StringList {
	if m.IsEmpty() {
		return NilStringList
	} else {
		acc := NilStringList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8List) FlatMapInt(f func(int8) IntList) IntList {
	if m.IsEmpty() {
		return NilIntList
	} else {
		acc := NilIntList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8List) FlatMapInt8(f func(int8) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8List
	} else {
		acc := NilInt8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8List) FlatMapInt16(f func(int8) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16List
	} else {
		acc := NilInt16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8List) FlatMapInt32(f func(int8) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32List
	} else {
		acc := NilInt32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8List) FlatMapInt64(f func(int8) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64List
	} else {
		acc := NilInt64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8List) FlatMapUint(f func(int8) UintList) UintList {
	if m.IsEmpty() {
		return NilUintList
	} else {
		acc := NilUintList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8List) FlatMapUint8(f func(int8) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8List
	} else {
		acc := NilUint8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8List) FlatMapUint16(f func(int8) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16List
	} else {
		acc := NilUint16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8List) FlatMapUint32(f func(int8) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32List
	} else {
		acc := NilUint32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8List) FlatMapUint64(f func(int8) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64List
	} else {
		acc := NilUint64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8List) FlatMapUintptr(f func(int8) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptrList
	} else {
		acc := NilUintptrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8List) FlatMapByte(f func(int8) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByteList
	} else {
		acc := NilByteList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8List) FlatMapRune(f func(int8) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRuneList
	} else {
		acc := NilRuneList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8List) FlatMapFloat32(f func(int8) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32List
	} else {
		acc := NilFloat32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8List) FlatMapFloat64(f func(int8) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64List
	} else {
		acc := NilFloat64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8List) FlatMapComplex64(f func(int8) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64List
	} else {
		acc := NilComplex64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8List) FlatMapComplex128(f func(int8) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128List
	} else {
		acc := NilComplex128List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8List) FlatMapAny(f func(int8) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAnyList
	} else {
		acc := NilAnyList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16List) FlatMapBool(f func(int16) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBoolList
	} else {
		acc := NilBoolList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16List) FlatMapString(f func(int16) StringList) StringList {
	if m.IsEmpty() {
		return NilStringList
	} else {
		acc := NilStringList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16List) FlatMapInt(f func(int16) IntList) IntList {
	if m.IsEmpty() {
		return NilIntList
	} else {
		acc := NilIntList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16List) FlatMapInt8(f func(int16) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8List
	} else {
		acc := NilInt8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16List) FlatMapInt16(f func(int16) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16List
	} else {
		acc := NilInt16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16List) FlatMapInt32(f func(int16) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32List
	} else {
		acc := NilInt32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16List) FlatMapInt64(f func(int16) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64List
	} else {
		acc := NilInt64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16List) FlatMapUint(f func(int16) UintList) UintList {
	if m.IsEmpty() {
		return NilUintList
	} else {
		acc := NilUintList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16List) FlatMapUint8(f func(int16) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8List
	} else {
		acc := NilUint8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16List) FlatMapUint16(f func(int16) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16List
	} else {
		acc := NilUint16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16List) FlatMapUint32(f func(int16) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32List
	} else {
		acc := NilUint32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16List) FlatMapUint64(f func(int16) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64List
	} else {
		acc := NilUint64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16List) FlatMapUintptr(f func(int16) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptrList
	} else {
		acc := NilUintptrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16List) FlatMapByte(f func(int16) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByteList
	} else {
		acc := NilByteList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16List) FlatMapRune(f func(int16) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRuneList
	} else {
		acc := NilRuneList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16List) FlatMapFloat32(f func(int16) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32List
	} else {
		acc := NilFloat32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16List) FlatMapFloat64(f func(int16) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64List
	} else {
		acc := NilFloat64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16List) FlatMapComplex64(f func(int16) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64List
	} else {
		acc := NilComplex64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16List) FlatMapComplex128(f func(int16) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128List
	} else {
		acc := NilComplex128List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16List) FlatMapAny(f func(int16) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAnyList
	} else {
		acc := NilAnyList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32List) FlatMapBool(f func(int32) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBoolList
	} else {
		acc := NilBoolList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32List) FlatMapString(f func(int32) StringList) StringList {
	if m.IsEmpty() {
		return NilStringList
	} else {
		acc := NilStringList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32List) FlatMapInt(f func(int32) IntList) IntList {
	if m.IsEmpty() {
		return NilIntList
	} else {
		acc := NilIntList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32List) FlatMapInt8(f func(int32) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8List
	} else {
		acc := NilInt8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32List) FlatMapInt16(f func(int32) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16List
	} else {
		acc := NilInt16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32List) FlatMapInt32(f func(int32) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32List
	} else {
		acc := NilInt32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32List) FlatMapInt64(f func(int32) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64List
	} else {
		acc := NilInt64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32List) FlatMapUint(f func(int32) UintList) UintList {
	if m.IsEmpty() {
		return NilUintList
	} else {
		acc := NilUintList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32List) FlatMapUint8(f func(int32) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8List
	} else {
		acc := NilUint8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32List) FlatMapUint16(f func(int32) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16List
	} else {
		acc := NilUint16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32List) FlatMapUint32(f func(int32) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32List
	} else {
		acc := NilUint32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32List) FlatMapUint64(f func(int32) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64List
	} else {
		acc := NilUint64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32List) FlatMapUintptr(f func(int32) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptrList
	} else {
		acc := NilUintptrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32List) FlatMapByte(f func(int32) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByteList
	} else {
		acc := NilByteList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32List) FlatMapRune(f func(int32) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRuneList
	} else {
		acc := NilRuneList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32List) FlatMapFloat32(f func(int32) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32List
	} else {
		acc := NilFloat32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32List) FlatMapFloat64(f func(int32) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64List
	} else {
		acc := NilFloat64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32List) FlatMapComplex64(f func(int32) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64List
	} else {
		acc := NilComplex64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32List) FlatMapComplex128(f func(int32) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128List
	} else {
		acc := NilComplex128List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32List) FlatMapAny(f func(int32) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAnyList
	} else {
		acc := NilAnyList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64List) FlatMapBool(f func(int64) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBoolList
	} else {
		acc := NilBoolList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64List) FlatMapString(f func(int64) StringList) StringList {
	if m.IsEmpty() {
		return NilStringList
	} else {
		acc := NilStringList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64List) FlatMapInt(f func(int64) IntList) IntList {
	if m.IsEmpty() {
		return NilIntList
	} else {
		acc := NilIntList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64List) FlatMapInt8(f func(int64) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8List
	} else {
		acc := NilInt8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64List) FlatMapInt16(f func(int64) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16List
	} else {
		acc := NilInt16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64List) FlatMapInt32(f func(int64) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32List
	} else {
		acc := NilInt32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64List) FlatMapInt64(f func(int64) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64List
	} else {
		acc := NilInt64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64List) FlatMapUint(f func(int64) UintList) UintList {
	if m.IsEmpty() {
		return NilUintList
	} else {
		acc := NilUintList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64List) FlatMapUint8(f func(int64) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8List
	} else {
		acc := NilUint8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64List) FlatMapUint16(f func(int64) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16List
	} else {
		acc := NilUint16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64List) FlatMapUint32(f func(int64) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32List
	} else {
		acc := NilUint32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64List) FlatMapUint64(f func(int64) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64List
	} else {
		acc := NilUint64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64List) FlatMapUintptr(f func(int64) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptrList
	} else {
		acc := NilUintptrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64List) FlatMapByte(f func(int64) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByteList
	} else {
		acc := NilByteList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64List) FlatMapRune(f func(int64) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRuneList
	} else {
		acc := NilRuneList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64List) FlatMapFloat32(f func(int64) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32List
	} else {
		acc := NilFloat32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64List) FlatMapFloat64(f func(int64) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64List
	} else {
		acc := NilFloat64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64List) FlatMapComplex64(f func(int64) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64List
	} else {
		acc := NilComplex64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64List) FlatMapComplex128(f func(int64) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128List
	} else {
		acc := NilComplex128List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64List) FlatMapAny(f func(int64) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAnyList
	} else {
		acc := NilAnyList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintList) FlatMapBool(f func(uint) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBoolList
	} else {
		acc := NilBoolList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintList) FlatMapString(f func(uint) StringList) StringList {
	if m.IsEmpty() {
		return NilStringList
	} else {
		acc := NilStringList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintList) FlatMapInt(f func(uint) IntList) IntList {
	if m.IsEmpty() {
		return NilIntList
	} else {
		acc := NilIntList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintList) FlatMapInt8(f func(uint) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8List
	} else {
		acc := NilInt8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintList) FlatMapInt16(f func(uint) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16List
	} else {
		acc := NilInt16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintList) FlatMapInt32(f func(uint) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32List
	} else {
		acc := NilInt32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintList) FlatMapInt64(f func(uint) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64List
	} else {
		acc := NilInt64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintList) FlatMapUint(f func(uint) UintList) UintList {
	if m.IsEmpty() {
		return NilUintList
	} else {
		acc := NilUintList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintList) FlatMapUint8(f func(uint) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8List
	} else {
		acc := NilUint8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintList) FlatMapUint16(f func(uint) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16List
	} else {
		acc := NilUint16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintList) FlatMapUint32(f func(uint) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32List
	} else {
		acc := NilUint32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintList) FlatMapUint64(f func(uint) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64List
	} else {
		acc := NilUint64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintList) FlatMapUintptr(f func(uint) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptrList
	} else {
		acc := NilUintptrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintList) FlatMapByte(f func(uint) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByteList
	} else {
		acc := NilByteList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintList) FlatMapRune(f func(uint) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRuneList
	} else {
		acc := NilRuneList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintList) FlatMapFloat32(f func(uint) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32List
	} else {
		acc := NilFloat32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintList) FlatMapFloat64(f func(uint) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64List
	} else {
		acc := NilFloat64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintList) FlatMapComplex64(f func(uint) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64List
	} else {
		acc := NilComplex64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintList) FlatMapComplex128(f func(uint) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128List
	} else {
		acc := NilComplex128List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintList) FlatMapAny(f func(uint) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAnyList
	} else {
		acc := NilAnyList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8List) FlatMapBool(f func(uint8) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBoolList
	} else {
		acc := NilBoolList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8List) FlatMapString(f func(uint8) StringList) StringList {
	if m.IsEmpty() {
		return NilStringList
	} else {
		acc := NilStringList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8List) FlatMapInt(f func(uint8) IntList) IntList {
	if m.IsEmpty() {
		return NilIntList
	} else {
		acc := NilIntList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8List) FlatMapInt8(f func(uint8) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8List
	} else {
		acc := NilInt8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8List) FlatMapInt16(f func(uint8) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16List
	} else {
		acc := NilInt16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8List) FlatMapInt32(f func(uint8) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32List
	} else {
		acc := NilInt32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8List) FlatMapInt64(f func(uint8) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64List
	} else {
		acc := NilInt64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8List) FlatMapUint(f func(uint8) UintList) UintList {
	if m.IsEmpty() {
		return NilUintList
	} else {
		acc := NilUintList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8List) FlatMapUint8(f func(uint8) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8List
	} else {
		acc := NilUint8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8List) FlatMapUint16(f func(uint8) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16List
	} else {
		acc := NilUint16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8List) FlatMapUint32(f func(uint8) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32List
	} else {
		acc := NilUint32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8List) FlatMapUint64(f func(uint8) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64List
	} else {
		acc := NilUint64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8List) FlatMapUintptr(f func(uint8) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptrList
	} else {
		acc := NilUintptrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8List) FlatMapByte(f func(uint8) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByteList
	} else {
		acc := NilByteList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8List) FlatMapRune(f func(uint8) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRuneList
	} else {
		acc := NilRuneList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8List) FlatMapFloat32(f func(uint8) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32List
	} else {
		acc := NilFloat32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8List) FlatMapFloat64(f func(uint8) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64List
	} else {
		acc := NilFloat64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8List) FlatMapComplex64(f func(uint8) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64List
	} else {
		acc := NilComplex64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8List) FlatMapComplex128(f func(uint8) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128List
	} else {
		acc := NilComplex128List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8List) FlatMapAny(f func(uint8) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAnyList
	} else {
		acc := NilAnyList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16List) FlatMapBool(f func(uint16) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBoolList
	} else {
		acc := NilBoolList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16List) FlatMapString(f func(uint16) StringList) StringList {
	if m.IsEmpty() {
		return NilStringList
	} else {
		acc := NilStringList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16List) FlatMapInt(f func(uint16) IntList) IntList {
	if m.IsEmpty() {
		return NilIntList
	} else {
		acc := NilIntList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16List) FlatMapInt8(f func(uint16) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8List
	} else {
		acc := NilInt8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16List) FlatMapInt16(f func(uint16) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16List
	} else {
		acc := NilInt16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16List) FlatMapInt32(f func(uint16) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32List
	} else {
		acc := NilInt32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16List) FlatMapInt64(f func(uint16) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64List
	} else {
		acc := NilInt64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16List) FlatMapUint(f func(uint16) UintList) UintList {
	if m.IsEmpty() {
		return NilUintList
	} else {
		acc := NilUintList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16List) FlatMapUint8(f func(uint16) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8List
	} else {
		acc := NilUint8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16List) FlatMapUint16(f func(uint16) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16List
	} else {
		acc := NilUint16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16List) FlatMapUint32(f func(uint16) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32List
	} else {
		acc := NilUint32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16List) FlatMapUint64(f func(uint16) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64List
	} else {
		acc := NilUint64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16List) FlatMapUintptr(f func(uint16) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptrList
	} else {
		acc := NilUintptrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16List) FlatMapByte(f func(uint16) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByteList
	} else {
		acc := NilByteList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16List) FlatMapRune(f func(uint16) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRuneList
	} else {
		acc := NilRuneList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16List) FlatMapFloat32(f func(uint16) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32List
	} else {
		acc := NilFloat32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16List) FlatMapFloat64(f func(uint16) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64List
	} else {
		acc := NilFloat64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16List) FlatMapComplex64(f func(uint16) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64List
	} else {
		acc := NilComplex64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16List) FlatMapComplex128(f func(uint16) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128List
	} else {
		acc := NilComplex128List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16List) FlatMapAny(f func(uint16) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAnyList
	} else {
		acc := NilAnyList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32List) FlatMapBool(f func(uint32) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBoolList
	} else {
		acc := NilBoolList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32List) FlatMapString(f func(uint32) StringList) StringList {
	if m.IsEmpty() {
		return NilStringList
	} else {
		acc := NilStringList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32List) FlatMapInt(f func(uint32) IntList) IntList {
	if m.IsEmpty() {
		return NilIntList
	} else {
		acc := NilIntList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32List) FlatMapInt8(f func(uint32) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8List
	} else {
		acc := NilInt8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32List) FlatMapInt16(f func(uint32) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16List
	} else {
		acc := NilInt16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32List) FlatMapInt32(f func(uint32) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32List
	} else {
		acc := NilInt32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32List) FlatMapInt64(f func(uint32) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64List
	} else {
		acc := NilInt64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32List) FlatMapUint(f func(uint32) UintList) UintList {
	if m.IsEmpty() {
		return NilUintList
	} else {
		acc := NilUintList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32List) FlatMapUint8(f func(uint32) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8List
	} else {
		acc := NilUint8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32List) FlatMapUint16(f func(uint32) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16List
	} else {
		acc := NilUint16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32List) FlatMapUint32(f func(uint32) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32List
	} else {
		acc := NilUint32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32List) FlatMapUint64(f func(uint32) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64List
	} else {
		acc := NilUint64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32List) FlatMapUintptr(f func(uint32) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptrList
	} else {
		acc := NilUintptrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32List) FlatMapByte(f func(uint32) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByteList
	} else {
		acc := NilByteList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32List) FlatMapRune(f func(uint32) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRuneList
	} else {
		acc := NilRuneList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32List) FlatMapFloat32(f func(uint32) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32List
	} else {
		acc := NilFloat32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32List) FlatMapFloat64(f func(uint32) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64List
	} else {
		acc := NilFloat64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32List) FlatMapComplex64(f func(uint32) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64List
	} else {
		acc := NilComplex64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32List) FlatMapComplex128(f func(uint32) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128List
	} else {
		acc := NilComplex128List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32List) FlatMapAny(f func(uint32) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAnyList
	} else {
		acc := NilAnyList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64List) FlatMapBool(f func(uint64) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBoolList
	} else {
		acc := NilBoolList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64List) FlatMapString(f func(uint64) StringList) StringList {
	if m.IsEmpty() {
		return NilStringList
	} else {
		acc := NilStringList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64List) FlatMapInt(f func(uint64) IntList) IntList {
	if m.IsEmpty() {
		return NilIntList
	} else {
		acc := NilIntList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64List) FlatMapInt8(f func(uint64) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8List
	} else {
		acc := NilInt8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64List) FlatMapInt16(f func(uint64) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16List
	} else {
		acc := NilInt16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64List) FlatMapInt32(f func(uint64) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32List
	} else {
		acc := NilInt32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64List) FlatMapInt64(f func(uint64) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64List
	} else {
		acc := NilInt64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64List) FlatMapUint(f func(uint64) UintList) UintList {
	if m.IsEmpty() {
		return NilUintList
	} else {
		acc := NilUintList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64List) FlatMapUint8(f func(uint64) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8List
	} else {
		acc := NilUint8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64List) FlatMapUint16(f func(uint64) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16List
	} else {
		acc := NilUint16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64List) FlatMapUint32(f func(uint64) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32List
	} else {
		acc := NilUint32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64List) FlatMapUint64(f func(uint64) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64List
	} else {
		acc := NilUint64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64List) FlatMapUintptr(f func(uint64) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptrList
	} else {
		acc := NilUintptrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64List) FlatMapByte(f func(uint64) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByteList
	} else {
		acc := NilByteList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64List) FlatMapRune(f func(uint64) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRuneList
	} else {
		acc := NilRuneList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64List) FlatMapFloat32(f func(uint64) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32List
	} else {
		acc := NilFloat32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64List) FlatMapFloat64(f func(uint64) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64List
	} else {
		acc := NilFloat64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64List) FlatMapComplex64(f func(uint64) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64List
	} else {
		acc := NilComplex64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64List) FlatMapComplex128(f func(uint64) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128List
	} else {
		acc := NilComplex128List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64List) FlatMapAny(f func(uint64) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAnyList
	} else {
		acc := NilAnyList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrList) FlatMapBool(f func(uintptr) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBoolList
	} else {
		acc := NilBoolList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrList) FlatMapString(f func(uintptr) StringList) StringList {
	if m.IsEmpty() {
		return NilStringList
	} else {
		acc := NilStringList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrList) FlatMapInt(f func(uintptr) IntList) IntList {
	if m.IsEmpty() {
		return NilIntList
	} else {
		acc := NilIntList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrList) FlatMapInt8(f func(uintptr) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8List
	} else {
		acc := NilInt8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrList) FlatMapInt16(f func(uintptr) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16List
	} else {
		acc := NilInt16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrList) FlatMapInt32(f func(uintptr) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32List
	} else {
		acc := NilInt32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrList) FlatMapInt64(f func(uintptr) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64List
	} else {
		acc := NilInt64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrList) FlatMapUint(f func(uintptr) UintList) UintList {
	if m.IsEmpty() {
		return NilUintList
	} else {
		acc := NilUintList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrList) FlatMapUint8(f func(uintptr) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8List
	} else {
		acc := NilUint8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrList) FlatMapUint16(f func(uintptr) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16List
	} else {
		acc := NilUint16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrList) FlatMapUint32(f func(uintptr) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32List
	} else {
		acc := NilUint32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrList) FlatMapUint64(f func(uintptr) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64List
	} else {
		acc := NilUint64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrList) FlatMapUintptr(f func(uintptr) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptrList
	} else {
		acc := NilUintptrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrList) FlatMapByte(f func(uintptr) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByteList
	} else {
		acc := NilByteList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrList) FlatMapRune(f func(uintptr) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRuneList
	} else {
		acc := NilRuneList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrList) FlatMapFloat32(f func(uintptr) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32List
	} else {
		acc := NilFloat32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrList) FlatMapFloat64(f func(uintptr) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64List
	} else {
		acc := NilFloat64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrList) FlatMapComplex64(f func(uintptr) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64List
	} else {
		acc := NilComplex64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrList) FlatMapComplex128(f func(uintptr) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128List
	} else {
		acc := NilComplex128List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrList) FlatMapAny(f func(uintptr) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAnyList
	} else {
		acc := NilAnyList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteList) FlatMapBool(f func(byte) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBoolList
	} else {
		acc := NilBoolList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteList) FlatMapString(f func(byte) StringList) StringList {
	if m.IsEmpty() {
		return NilStringList
	} else {
		acc := NilStringList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteList) FlatMapInt(f func(byte) IntList) IntList {
	if m.IsEmpty() {
		return NilIntList
	} else {
		acc := NilIntList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteList) FlatMapInt8(f func(byte) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8List
	} else {
		acc := NilInt8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteList) FlatMapInt16(f func(byte) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16List
	} else {
		acc := NilInt16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteList) FlatMapInt32(f func(byte) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32List
	} else {
		acc := NilInt32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteList) FlatMapInt64(f func(byte) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64List
	} else {
		acc := NilInt64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteList) FlatMapUint(f func(byte) UintList) UintList {
	if m.IsEmpty() {
		return NilUintList
	} else {
		acc := NilUintList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteList) FlatMapUint8(f func(byte) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8List
	} else {
		acc := NilUint8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteList) FlatMapUint16(f func(byte) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16List
	} else {
		acc := NilUint16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteList) FlatMapUint32(f func(byte) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32List
	} else {
		acc := NilUint32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteList) FlatMapUint64(f func(byte) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64List
	} else {
		acc := NilUint64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteList) FlatMapUintptr(f func(byte) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptrList
	} else {
		acc := NilUintptrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteList) FlatMapByte(f func(byte) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByteList
	} else {
		acc := NilByteList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteList) FlatMapRune(f func(byte) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRuneList
	} else {
		acc := NilRuneList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteList) FlatMapFloat32(f func(byte) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32List
	} else {
		acc := NilFloat32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteList) FlatMapFloat64(f func(byte) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64List
	} else {
		acc := NilFloat64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteList) FlatMapComplex64(f func(byte) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64List
	} else {
		acc := NilComplex64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteList) FlatMapComplex128(f func(byte) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128List
	} else {
		acc := NilComplex128List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteList) FlatMapAny(f func(byte) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAnyList
	} else {
		acc := NilAnyList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneList) FlatMapBool(f func(rune) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBoolList
	} else {
		acc := NilBoolList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneList) FlatMapString(f func(rune) StringList) StringList {
	if m.IsEmpty() {
		return NilStringList
	} else {
		acc := NilStringList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneList) FlatMapInt(f func(rune) IntList) IntList {
	if m.IsEmpty() {
		return NilIntList
	} else {
		acc := NilIntList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneList) FlatMapInt8(f func(rune) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8List
	} else {
		acc := NilInt8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneList) FlatMapInt16(f func(rune) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16List
	} else {
		acc := NilInt16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneList) FlatMapInt32(f func(rune) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32List
	} else {
		acc := NilInt32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneList) FlatMapInt64(f func(rune) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64List
	} else {
		acc := NilInt64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneList) FlatMapUint(f func(rune) UintList) UintList {
	if m.IsEmpty() {
		return NilUintList
	} else {
		acc := NilUintList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneList) FlatMapUint8(f func(rune) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8List
	} else {
		acc := NilUint8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneList) FlatMapUint16(f func(rune) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16List
	} else {
		acc := NilUint16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneList) FlatMapUint32(f func(rune) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32List
	} else {
		acc := NilUint32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneList) FlatMapUint64(f func(rune) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64List
	} else {
		acc := NilUint64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneList) FlatMapUintptr(f func(rune) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptrList
	} else {
		acc := NilUintptrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneList) FlatMapByte(f func(rune) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByteList
	} else {
		acc := NilByteList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneList) FlatMapRune(f func(rune) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRuneList
	} else {
		acc := NilRuneList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneList) FlatMapFloat32(f func(rune) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32List
	} else {
		acc := NilFloat32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneList) FlatMapFloat64(f func(rune) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64List
	} else {
		acc := NilFloat64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneList) FlatMapComplex64(f func(rune) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64List
	} else {
		acc := NilComplex64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneList) FlatMapComplex128(f func(rune) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128List
	} else {
		acc := NilComplex128List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneList) FlatMapAny(f func(rune) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAnyList
	} else {
		acc := NilAnyList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32List) FlatMapBool(f func(float32) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBoolList
	} else {
		acc := NilBoolList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32List) FlatMapString(f func(float32) StringList) StringList {
	if m.IsEmpty() {
		return NilStringList
	} else {
		acc := NilStringList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32List) FlatMapInt(f func(float32) IntList) IntList {
	if m.IsEmpty() {
		return NilIntList
	} else {
		acc := NilIntList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32List) FlatMapInt8(f func(float32) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8List
	} else {
		acc := NilInt8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32List) FlatMapInt16(f func(float32) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16List
	} else {
		acc := NilInt16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32List) FlatMapInt32(f func(float32) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32List
	} else {
		acc := NilInt32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32List) FlatMapInt64(f func(float32) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64List
	} else {
		acc := NilInt64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32List) FlatMapUint(f func(float32) UintList) UintList {
	if m.IsEmpty() {
		return NilUintList
	} else {
		acc := NilUintList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32List) FlatMapUint8(f func(float32) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8List
	} else {
		acc := NilUint8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32List) FlatMapUint16(f func(float32) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16List
	} else {
		acc := NilUint16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32List) FlatMapUint32(f func(float32) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32List
	} else {
		acc := NilUint32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32List) FlatMapUint64(f func(float32) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64List
	} else {
		acc := NilUint64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32List) FlatMapUintptr(f func(float32) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptrList
	} else {
		acc := NilUintptrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32List) FlatMapByte(f func(float32) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByteList
	} else {
		acc := NilByteList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32List) FlatMapRune(f func(float32) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRuneList
	} else {
		acc := NilRuneList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32List) FlatMapFloat32(f func(float32) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32List
	} else {
		acc := NilFloat32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32List) FlatMapFloat64(f func(float32) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64List
	} else {
		acc := NilFloat64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32List) FlatMapComplex64(f func(float32) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64List
	} else {
		acc := NilComplex64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32List) FlatMapComplex128(f func(float32) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128List
	} else {
		acc := NilComplex128List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32List) FlatMapAny(f func(float32) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAnyList
	} else {
		acc := NilAnyList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64List) FlatMapBool(f func(float64) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBoolList
	} else {
		acc := NilBoolList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64List) FlatMapString(f func(float64) StringList) StringList {
	if m.IsEmpty() {
		return NilStringList
	} else {
		acc := NilStringList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64List) FlatMapInt(f func(float64) IntList) IntList {
	if m.IsEmpty() {
		return NilIntList
	} else {
		acc := NilIntList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64List) FlatMapInt8(f func(float64) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8List
	} else {
		acc := NilInt8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64List) FlatMapInt16(f func(float64) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16List
	} else {
		acc := NilInt16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64List) FlatMapInt32(f func(float64) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32List
	} else {
		acc := NilInt32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64List) FlatMapInt64(f func(float64) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64List
	} else {
		acc := NilInt64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64List) FlatMapUint(f func(float64) UintList) UintList {
	if m.IsEmpty() {
		return NilUintList
	} else {
		acc := NilUintList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64List) FlatMapUint8(f func(float64) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8List
	} else {
		acc := NilUint8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64List) FlatMapUint16(f func(float64) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16List
	} else {
		acc := NilUint16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64List) FlatMapUint32(f func(float64) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32List
	} else {
		acc := NilUint32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64List) FlatMapUint64(f func(float64) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64List
	} else {
		acc := NilUint64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64List) FlatMapUintptr(f func(float64) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptrList
	} else {
		acc := NilUintptrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64List) FlatMapByte(f func(float64) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByteList
	} else {
		acc := NilByteList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64List) FlatMapRune(f func(float64) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRuneList
	} else {
		acc := NilRuneList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64List) FlatMapFloat32(f func(float64) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32List
	} else {
		acc := NilFloat32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64List) FlatMapFloat64(f func(float64) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64List
	} else {
		acc := NilFloat64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64List) FlatMapComplex64(f func(float64) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64List
	} else {
		acc := NilComplex64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64List) FlatMapComplex128(f func(float64) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128List
	} else {
		acc := NilComplex128List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64List) FlatMapAny(f func(float64) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAnyList
	} else {
		acc := NilAnyList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64List) FlatMapBool(f func(complex64) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBoolList
	} else {
		acc := NilBoolList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64List) FlatMapString(f func(complex64) StringList) StringList {
	if m.IsEmpty() {
		return NilStringList
	} else {
		acc := NilStringList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64List) FlatMapInt(f func(complex64) IntList) IntList {
	if m.IsEmpty() {
		return NilIntList
	} else {
		acc := NilIntList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64List) FlatMapInt8(f func(complex64) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8List
	} else {
		acc := NilInt8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64List) FlatMapInt16(f func(complex64) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16List
	} else {
		acc := NilInt16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64List) FlatMapInt32(f func(complex64) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32List
	} else {
		acc := NilInt32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64List) FlatMapInt64(f func(complex64) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64List
	} else {
		acc := NilInt64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64List) FlatMapUint(f func(complex64) UintList) UintList {
	if m.IsEmpty() {
		return NilUintList
	} else {
		acc := NilUintList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64List) FlatMapUint8(f func(complex64) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8List
	} else {
		acc := NilUint8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64List) FlatMapUint16(f func(complex64) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16List
	} else {
		acc := NilUint16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64List) FlatMapUint32(f func(complex64) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32List
	} else {
		acc := NilUint32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64List) FlatMapUint64(f func(complex64) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64List
	} else {
		acc := NilUint64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64List) FlatMapUintptr(f func(complex64) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptrList
	} else {
		acc := NilUintptrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64List) FlatMapByte(f func(complex64) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByteList
	} else {
		acc := NilByteList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64List) FlatMapRune(f func(complex64) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRuneList
	} else {
		acc := NilRuneList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64List) FlatMapFloat32(f func(complex64) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32List
	} else {
		acc := NilFloat32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64List) FlatMapFloat64(f func(complex64) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64List
	} else {
		acc := NilFloat64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64List) FlatMapComplex64(f func(complex64) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64List
	} else {
		acc := NilComplex64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64List) FlatMapComplex128(f func(complex64) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128List
	} else {
		acc := NilComplex128List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64List) FlatMapAny(f func(complex64) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAnyList
	} else {
		acc := NilAnyList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128List) FlatMapBool(f func(complex128) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBoolList
	} else {
		acc := NilBoolList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128List) FlatMapString(f func(complex128) StringList) StringList {
	if m.IsEmpty() {
		return NilStringList
	} else {
		acc := NilStringList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128List) FlatMapInt(f func(complex128) IntList) IntList {
	if m.IsEmpty() {
		return NilIntList
	} else {
		acc := NilIntList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128List) FlatMapInt8(f func(complex128) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8List
	} else {
		acc := NilInt8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128List) FlatMapInt16(f func(complex128) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16List
	} else {
		acc := NilInt16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128List) FlatMapInt32(f func(complex128) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32List
	} else {
		acc := NilInt32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128List) FlatMapInt64(f func(complex128) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64List
	} else {
		acc := NilInt64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128List) FlatMapUint(f func(complex128) UintList) UintList {
	if m.IsEmpty() {
		return NilUintList
	} else {
		acc := NilUintList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128List) FlatMapUint8(f func(complex128) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8List
	} else {
		acc := NilUint8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128List) FlatMapUint16(f func(complex128) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16List
	} else {
		acc := NilUint16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128List) FlatMapUint32(f func(complex128) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32List
	} else {
		acc := NilUint32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128List) FlatMapUint64(f func(complex128) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64List
	} else {
		acc := NilUint64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128List) FlatMapUintptr(f func(complex128) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptrList
	} else {
		acc := NilUintptrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128List) FlatMapByte(f func(complex128) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByteList
	} else {
		acc := NilByteList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128List) FlatMapRune(f func(complex128) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRuneList
	} else {
		acc := NilRuneList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128List) FlatMapFloat32(f func(complex128) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32List
	} else {
		acc := NilFloat32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128List) FlatMapFloat64(f func(complex128) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64List
	} else {
		acc := NilFloat64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128List) FlatMapComplex64(f func(complex128) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64List
	} else {
		acc := NilComplex64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128List) FlatMapComplex128(f func(complex128) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128List
	} else {
		acc := NilComplex128List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128List) FlatMapAny(f func(complex128) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAnyList
	} else {
		acc := NilAnyList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyList) FlatMapBool(f func(Any) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBoolList
	} else {
		acc := NilBoolList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyList) FlatMapString(f func(Any) StringList) StringList {
	if m.IsEmpty() {
		return NilStringList
	} else {
		acc := NilStringList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyList) FlatMapInt(f func(Any) IntList) IntList {
	if m.IsEmpty() {
		return NilIntList
	} else {
		acc := NilIntList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyList) FlatMapInt8(f func(Any) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8List
	} else {
		acc := NilInt8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyList) FlatMapInt16(f func(Any) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16List
	} else {
		acc := NilInt16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyList) FlatMapInt32(f func(Any) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32List
	} else {
		acc := NilInt32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyList) FlatMapInt64(f func(Any) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64List
	} else {
		acc := NilInt64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyList) FlatMapUint(f func(Any) UintList) UintList {
	if m.IsEmpty() {
		return NilUintList
	} else {
		acc := NilUintList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyList) FlatMapUint8(f func(Any) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8List
	} else {
		acc := NilUint8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyList) FlatMapUint16(f func(Any) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16List
	} else {
		acc := NilUint16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyList) FlatMapUint32(f func(Any) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32List
	} else {
		acc := NilUint32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyList) FlatMapUint64(f func(Any) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64List
	} else {
		acc := NilUint64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyList) FlatMapUintptr(f func(Any) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptrList
	} else {
		acc := NilUintptrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyList) FlatMapByte(f func(Any) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByteList
	} else {
		acc := NilByteList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyList) FlatMapRune(f func(Any) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRuneList
	} else {
		acc := NilRuneList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyList) FlatMapFloat32(f func(Any) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32List
	} else {
		acc := NilFloat32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyList) FlatMapFloat64(f func(Any) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64List
	} else {
		acc := NilFloat64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyList) FlatMapComplex64(f func(Any) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64List
	} else {
		acc := NilComplex64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyList) FlatMapComplex128(f func(Any) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128List
	} else {
		acc := NilComplex128List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyList) FlatMapAny(f func(Any) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAnyList
	} else {
		acc := NilAnyList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionList) FlatMapBool(f func(BoolOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBoolList
	} else {
		acc := NilBoolList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionList) FlatMapString(f func(BoolOption) StringList) StringList {
	if m.IsEmpty() {
		return NilStringList
	} else {
		acc := NilStringList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionList) FlatMapInt(f func(BoolOption) IntList) IntList {
	if m.IsEmpty() {
		return NilIntList
	} else {
		acc := NilIntList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionList) FlatMapInt8(f func(BoolOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8List
	} else {
		acc := NilInt8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionList) FlatMapInt16(f func(BoolOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16List
	} else {
		acc := NilInt16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionList) FlatMapInt32(f func(BoolOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32List
	} else {
		acc := NilInt32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionList) FlatMapInt64(f func(BoolOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64List
	} else {
		acc := NilInt64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionList) FlatMapUint(f func(BoolOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUintList
	} else {
		acc := NilUintList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionList) FlatMapUint8(f func(BoolOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8List
	} else {
		acc := NilUint8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionList) FlatMapUint16(f func(BoolOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16List
	} else {
		acc := NilUint16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionList) FlatMapUint32(f func(BoolOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32List
	} else {
		acc := NilUint32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionList) FlatMapUint64(f func(BoolOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64List
	} else {
		acc := NilUint64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionList) FlatMapUintptr(f func(BoolOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptrList
	} else {
		acc := NilUintptrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionList) FlatMapByte(f func(BoolOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByteList
	} else {
		acc := NilByteList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionList) FlatMapRune(f func(BoolOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRuneList
	} else {
		acc := NilRuneList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionList) FlatMapFloat32(f func(BoolOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32List
	} else {
		acc := NilFloat32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionList) FlatMapFloat64(f func(BoolOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64List
	} else {
		acc := NilFloat64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionList) FlatMapComplex64(f func(BoolOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64List
	} else {
		acc := NilComplex64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionList) FlatMapComplex128(f func(BoolOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128List
	} else {
		acc := NilComplex128List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionList) FlatMapAny(f func(BoolOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAnyList
	} else {
		acc := NilAnyList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionList) FlatMapBool(f func(StringOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBoolList
	} else {
		acc := NilBoolList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionList) FlatMapString(f func(StringOption) StringList) StringList {
	if m.IsEmpty() {
		return NilStringList
	} else {
		acc := NilStringList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionList) FlatMapInt(f func(StringOption) IntList) IntList {
	if m.IsEmpty() {
		return NilIntList
	} else {
		acc := NilIntList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionList) FlatMapInt8(f func(StringOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8List
	} else {
		acc := NilInt8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionList) FlatMapInt16(f func(StringOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16List
	} else {
		acc := NilInt16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionList) FlatMapInt32(f func(StringOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32List
	} else {
		acc := NilInt32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionList) FlatMapInt64(f func(StringOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64List
	} else {
		acc := NilInt64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionList) FlatMapUint(f func(StringOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUintList
	} else {
		acc := NilUintList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionList) FlatMapUint8(f func(StringOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8List
	} else {
		acc := NilUint8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionList) FlatMapUint16(f func(StringOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16List
	} else {
		acc := NilUint16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionList) FlatMapUint32(f func(StringOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32List
	} else {
		acc := NilUint32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionList) FlatMapUint64(f func(StringOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64List
	} else {
		acc := NilUint64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionList) FlatMapUintptr(f func(StringOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptrList
	} else {
		acc := NilUintptrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionList) FlatMapByte(f func(StringOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByteList
	} else {
		acc := NilByteList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionList) FlatMapRune(f func(StringOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRuneList
	} else {
		acc := NilRuneList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionList) FlatMapFloat32(f func(StringOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32List
	} else {
		acc := NilFloat32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionList) FlatMapFloat64(f func(StringOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64List
	} else {
		acc := NilFloat64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionList) FlatMapComplex64(f func(StringOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64List
	} else {
		acc := NilComplex64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionList) FlatMapComplex128(f func(StringOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128List
	} else {
		acc := NilComplex128List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionList) FlatMapAny(f func(StringOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAnyList
	} else {
		acc := NilAnyList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionList) FlatMapBool(f func(IntOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBoolList
	} else {
		acc := NilBoolList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionList) FlatMapString(f func(IntOption) StringList) StringList {
	if m.IsEmpty() {
		return NilStringList
	} else {
		acc := NilStringList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionList) FlatMapInt(f func(IntOption) IntList) IntList {
	if m.IsEmpty() {
		return NilIntList
	} else {
		acc := NilIntList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionList) FlatMapInt8(f func(IntOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8List
	} else {
		acc := NilInt8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionList) FlatMapInt16(f func(IntOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16List
	} else {
		acc := NilInt16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionList) FlatMapInt32(f func(IntOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32List
	} else {
		acc := NilInt32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionList) FlatMapInt64(f func(IntOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64List
	} else {
		acc := NilInt64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionList) FlatMapUint(f func(IntOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUintList
	} else {
		acc := NilUintList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionList) FlatMapUint8(f func(IntOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8List
	} else {
		acc := NilUint8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionList) FlatMapUint16(f func(IntOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16List
	} else {
		acc := NilUint16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionList) FlatMapUint32(f func(IntOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32List
	} else {
		acc := NilUint32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionList) FlatMapUint64(f func(IntOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64List
	} else {
		acc := NilUint64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionList) FlatMapUintptr(f func(IntOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptrList
	} else {
		acc := NilUintptrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionList) FlatMapByte(f func(IntOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByteList
	} else {
		acc := NilByteList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionList) FlatMapRune(f func(IntOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRuneList
	} else {
		acc := NilRuneList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionList) FlatMapFloat32(f func(IntOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32List
	} else {
		acc := NilFloat32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionList) FlatMapFloat64(f func(IntOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64List
	} else {
		acc := NilFloat64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionList) FlatMapComplex64(f func(IntOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64List
	} else {
		acc := NilComplex64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionList) FlatMapComplex128(f func(IntOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128List
	} else {
		acc := NilComplex128List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionList) FlatMapAny(f func(IntOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAnyList
	} else {
		acc := NilAnyList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionList) FlatMapBool(f func(Int8Option) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBoolList
	} else {
		acc := NilBoolList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionList) FlatMapString(f func(Int8Option) StringList) StringList {
	if m.IsEmpty() {
		return NilStringList
	} else {
		acc := NilStringList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionList) FlatMapInt(f func(Int8Option) IntList) IntList {
	if m.IsEmpty() {
		return NilIntList
	} else {
		acc := NilIntList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionList) FlatMapInt8(f func(Int8Option) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8List
	} else {
		acc := NilInt8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionList) FlatMapInt16(f func(Int8Option) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16List
	} else {
		acc := NilInt16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionList) FlatMapInt32(f func(Int8Option) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32List
	} else {
		acc := NilInt32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionList) FlatMapInt64(f func(Int8Option) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64List
	} else {
		acc := NilInt64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionList) FlatMapUint(f func(Int8Option) UintList) UintList {
	if m.IsEmpty() {
		return NilUintList
	} else {
		acc := NilUintList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionList) FlatMapUint8(f func(Int8Option) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8List
	} else {
		acc := NilUint8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionList) FlatMapUint16(f func(Int8Option) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16List
	} else {
		acc := NilUint16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionList) FlatMapUint32(f func(Int8Option) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32List
	} else {
		acc := NilUint32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionList) FlatMapUint64(f func(Int8Option) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64List
	} else {
		acc := NilUint64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionList) FlatMapUintptr(f func(Int8Option) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptrList
	} else {
		acc := NilUintptrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionList) FlatMapByte(f func(Int8Option) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByteList
	} else {
		acc := NilByteList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionList) FlatMapRune(f func(Int8Option) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRuneList
	} else {
		acc := NilRuneList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionList) FlatMapFloat32(f func(Int8Option) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32List
	} else {
		acc := NilFloat32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionList) FlatMapFloat64(f func(Int8Option) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64List
	} else {
		acc := NilFloat64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionList) FlatMapComplex64(f func(Int8Option) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64List
	} else {
		acc := NilComplex64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionList) FlatMapComplex128(f func(Int8Option) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128List
	} else {
		acc := NilComplex128List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionList) FlatMapAny(f func(Int8Option) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAnyList
	} else {
		acc := NilAnyList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionList) FlatMapBool(f func(Int16Option) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBoolList
	} else {
		acc := NilBoolList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionList) FlatMapString(f func(Int16Option) StringList) StringList {
	if m.IsEmpty() {
		return NilStringList
	} else {
		acc := NilStringList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionList) FlatMapInt(f func(Int16Option) IntList) IntList {
	if m.IsEmpty() {
		return NilIntList
	} else {
		acc := NilIntList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionList) FlatMapInt8(f func(Int16Option) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8List
	} else {
		acc := NilInt8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionList) FlatMapInt16(f func(Int16Option) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16List
	} else {
		acc := NilInt16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionList) FlatMapInt32(f func(Int16Option) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32List
	} else {
		acc := NilInt32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionList) FlatMapInt64(f func(Int16Option) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64List
	} else {
		acc := NilInt64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionList) FlatMapUint(f func(Int16Option) UintList) UintList {
	if m.IsEmpty() {
		return NilUintList
	} else {
		acc := NilUintList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionList) FlatMapUint8(f func(Int16Option) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8List
	} else {
		acc := NilUint8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionList) FlatMapUint16(f func(Int16Option) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16List
	} else {
		acc := NilUint16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionList) FlatMapUint32(f func(Int16Option) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32List
	} else {
		acc := NilUint32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionList) FlatMapUint64(f func(Int16Option) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64List
	} else {
		acc := NilUint64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionList) FlatMapUintptr(f func(Int16Option) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptrList
	} else {
		acc := NilUintptrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionList) FlatMapByte(f func(Int16Option) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByteList
	} else {
		acc := NilByteList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionList) FlatMapRune(f func(Int16Option) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRuneList
	} else {
		acc := NilRuneList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionList) FlatMapFloat32(f func(Int16Option) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32List
	} else {
		acc := NilFloat32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionList) FlatMapFloat64(f func(Int16Option) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64List
	} else {
		acc := NilFloat64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionList) FlatMapComplex64(f func(Int16Option) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64List
	} else {
		acc := NilComplex64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionList) FlatMapComplex128(f func(Int16Option) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128List
	} else {
		acc := NilComplex128List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionList) FlatMapAny(f func(Int16Option) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAnyList
	} else {
		acc := NilAnyList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionList) FlatMapBool(f func(Int32Option) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBoolList
	} else {
		acc := NilBoolList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionList) FlatMapString(f func(Int32Option) StringList) StringList {
	if m.IsEmpty() {
		return NilStringList
	} else {
		acc := NilStringList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionList) FlatMapInt(f func(Int32Option) IntList) IntList {
	if m.IsEmpty() {
		return NilIntList
	} else {
		acc := NilIntList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionList) FlatMapInt8(f func(Int32Option) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8List
	} else {
		acc := NilInt8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionList) FlatMapInt16(f func(Int32Option) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16List
	} else {
		acc := NilInt16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionList) FlatMapInt32(f func(Int32Option) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32List
	} else {
		acc := NilInt32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionList) FlatMapInt64(f func(Int32Option) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64List
	} else {
		acc := NilInt64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionList) FlatMapUint(f func(Int32Option) UintList) UintList {
	if m.IsEmpty() {
		return NilUintList
	} else {
		acc := NilUintList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionList) FlatMapUint8(f func(Int32Option) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8List
	} else {
		acc := NilUint8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionList) FlatMapUint16(f func(Int32Option) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16List
	} else {
		acc := NilUint16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionList) FlatMapUint32(f func(Int32Option) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32List
	} else {
		acc := NilUint32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionList) FlatMapUint64(f func(Int32Option) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64List
	} else {
		acc := NilUint64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionList) FlatMapUintptr(f func(Int32Option) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptrList
	} else {
		acc := NilUintptrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionList) FlatMapByte(f func(Int32Option) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByteList
	} else {
		acc := NilByteList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionList) FlatMapRune(f func(Int32Option) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRuneList
	} else {
		acc := NilRuneList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionList) FlatMapFloat32(f func(Int32Option) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32List
	} else {
		acc := NilFloat32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionList) FlatMapFloat64(f func(Int32Option) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64List
	} else {
		acc := NilFloat64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionList) FlatMapComplex64(f func(Int32Option) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64List
	} else {
		acc := NilComplex64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionList) FlatMapComplex128(f func(Int32Option) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128List
	} else {
		acc := NilComplex128List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionList) FlatMapAny(f func(Int32Option) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAnyList
	} else {
		acc := NilAnyList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionList) FlatMapBool(f func(Int64Option) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBoolList
	} else {
		acc := NilBoolList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionList) FlatMapString(f func(Int64Option) StringList) StringList {
	if m.IsEmpty() {
		return NilStringList
	} else {
		acc := NilStringList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionList) FlatMapInt(f func(Int64Option) IntList) IntList {
	if m.IsEmpty() {
		return NilIntList
	} else {
		acc := NilIntList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionList) FlatMapInt8(f func(Int64Option) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8List
	} else {
		acc := NilInt8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionList) FlatMapInt16(f func(Int64Option) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16List
	} else {
		acc := NilInt16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionList) FlatMapInt32(f func(Int64Option) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32List
	} else {
		acc := NilInt32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionList) FlatMapInt64(f func(Int64Option) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64List
	} else {
		acc := NilInt64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionList) FlatMapUint(f func(Int64Option) UintList) UintList {
	if m.IsEmpty() {
		return NilUintList
	} else {
		acc := NilUintList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionList) FlatMapUint8(f func(Int64Option) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8List
	} else {
		acc := NilUint8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionList) FlatMapUint16(f func(Int64Option) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16List
	} else {
		acc := NilUint16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionList) FlatMapUint32(f func(Int64Option) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32List
	} else {
		acc := NilUint32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionList) FlatMapUint64(f func(Int64Option) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64List
	} else {
		acc := NilUint64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionList) FlatMapUintptr(f func(Int64Option) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptrList
	} else {
		acc := NilUintptrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionList) FlatMapByte(f func(Int64Option) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByteList
	} else {
		acc := NilByteList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionList) FlatMapRune(f func(Int64Option) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRuneList
	} else {
		acc := NilRuneList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionList) FlatMapFloat32(f func(Int64Option) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32List
	} else {
		acc := NilFloat32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionList) FlatMapFloat64(f func(Int64Option) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64List
	} else {
		acc := NilFloat64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionList) FlatMapComplex64(f func(Int64Option) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64List
	} else {
		acc := NilComplex64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionList) FlatMapComplex128(f func(Int64Option) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128List
	} else {
		acc := NilComplex128List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionList) FlatMapAny(f func(Int64Option) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAnyList
	} else {
		acc := NilAnyList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionList) FlatMapBool(f func(UintOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBoolList
	} else {
		acc := NilBoolList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionList) FlatMapString(f func(UintOption) StringList) StringList {
	if m.IsEmpty() {
		return NilStringList
	} else {
		acc := NilStringList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionList) FlatMapInt(f func(UintOption) IntList) IntList {
	if m.IsEmpty() {
		return NilIntList
	} else {
		acc := NilIntList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionList) FlatMapInt8(f func(UintOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8List
	} else {
		acc := NilInt8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionList) FlatMapInt16(f func(UintOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16List
	} else {
		acc := NilInt16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionList) FlatMapInt32(f func(UintOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32List
	} else {
		acc := NilInt32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionList) FlatMapInt64(f func(UintOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64List
	} else {
		acc := NilInt64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionList) FlatMapUint(f func(UintOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUintList
	} else {
		acc := NilUintList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionList) FlatMapUint8(f func(UintOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8List
	} else {
		acc := NilUint8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionList) FlatMapUint16(f func(UintOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16List
	} else {
		acc := NilUint16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionList) FlatMapUint32(f func(UintOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32List
	} else {
		acc := NilUint32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionList) FlatMapUint64(f func(UintOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64List
	} else {
		acc := NilUint64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionList) FlatMapUintptr(f func(UintOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptrList
	} else {
		acc := NilUintptrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionList) FlatMapByte(f func(UintOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByteList
	} else {
		acc := NilByteList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionList) FlatMapRune(f func(UintOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRuneList
	} else {
		acc := NilRuneList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionList) FlatMapFloat32(f func(UintOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32List
	} else {
		acc := NilFloat32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionList) FlatMapFloat64(f func(UintOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64List
	} else {
		acc := NilFloat64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionList) FlatMapComplex64(f func(UintOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64List
	} else {
		acc := NilComplex64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionList) FlatMapComplex128(f func(UintOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128List
	} else {
		acc := NilComplex128List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionList) FlatMapAny(f func(UintOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAnyList
	} else {
		acc := NilAnyList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionList) FlatMapBool(f func(Uint8Option) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBoolList
	} else {
		acc := NilBoolList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionList) FlatMapString(f func(Uint8Option) StringList) StringList {
	if m.IsEmpty() {
		return NilStringList
	} else {
		acc := NilStringList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionList) FlatMapInt(f func(Uint8Option) IntList) IntList {
	if m.IsEmpty() {
		return NilIntList
	} else {
		acc := NilIntList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionList) FlatMapInt8(f func(Uint8Option) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8List
	} else {
		acc := NilInt8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionList) FlatMapInt16(f func(Uint8Option) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16List
	} else {
		acc := NilInt16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionList) FlatMapInt32(f func(Uint8Option) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32List
	} else {
		acc := NilInt32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionList) FlatMapInt64(f func(Uint8Option) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64List
	} else {
		acc := NilInt64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionList) FlatMapUint(f func(Uint8Option) UintList) UintList {
	if m.IsEmpty() {
		return NilUintList
	} else {
		acc := NilUintList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionList) FlatMapUint8(f func(Uint8Option) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8List
	} else {
		acc := NilUint8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionList) FlatMapUint16(f func(Uint8Option) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16List
	} else {
		acc := NilUint16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionList) FlatMapUint32(f func(Uint8Option) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32List
	} else {
		acc := NilUint32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionList) FlatMapUint64(f func(Uint8Option) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64List
	} else {
		acc := NilUint64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionList) FlatMapUintptr(f func(Uint8Option) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptrList
	} else {
		acc := NilUintptrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionList) FlatMapByte(f func(Uint8Option) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByteList
	} else {
		acc := NilByteList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionList) FlatMapRune(f func(Uint8Option) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRuneList
	} else {
		acc := NilRuneList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionList) FlatMapFloat32(f func(Uint8Option) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32List
	} else {
		acc := NilFloat32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionList) FlatMapFloat64(f func(Uint8Option) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64List
	} else {
		acc := NilFloat64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionList) FlatMapComplex64(f func(Uint8Option) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64List
	} else {
		acc := NilComplex64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionList) FlatMapComplex128(f func(Uint8Option) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128List
	} else {
		acc := NilComplex128List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionList) FlatMapAny(f func(Uint8Option) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAnyList
	} else {
		acc := NilAnyList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionList) FlatMapBool(f func(Uint16Option) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBoolList
	} else {
		acc := NilBoolList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionList) FlatMapString(f func(Uint16Option) StringList) StringList {
	if m.IsEmpty() {
		return NilStringList
	} else {
		acc := NilStringList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionList) FlatMapInt(f func(Uint16Option) IntList) IntList {
	if m.IsEmpty() {
		return NilIntList
	} else {
		acc := NilIntList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionList) FlatMapInt8(f func(Uint16Option) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8List
	} else {
		acc := NilInt8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionList) FlatMapInt16(f func(Uint16Option) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16List
	} else {
		acc := NilInt16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionList) FlatMapInt32(f func(Uint16Option) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32List
	} else {
		acc := NilInt32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionList) FlatMapInt64(f func(Uint16Option) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64List
	} else {
		acc := NilInt64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionList) FlatMapUint(f func(Uint16Option) UintList) UintList {
	if m.IsEmpty() {
		return NilUintList
	} else {
		acc := NilUintList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionList) FlatMapUint8(f func(Uint16Option) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8List
	} else {
		acc := NilUint8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionList) FlatMapUint16(f func(Uint16Option) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16List
	} else {
		acc := NilUint16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionList) FlatMapUint32(f func(Uint16Option) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32List
	} else {
		acc := NilUint32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionList) FlatMapUint64(f func(Uint16Option) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64List
	} else {
		acc := NilUint64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionList) FlatMapUintptr(f func(Uint16Option) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptrList
	} else {
		acc := NilUintptrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionList) FlatMapByte(f func(Uint16Option) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByteList
	} else {
		acc := NilByteList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionList) FlatMapRune(f func(Uint16Option) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRuneList
	} else {
		acc := NilRuneList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionList) FlatMapFloat32(f func(Uint16Option) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32List
	} else {
		acc := NilFloat32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionList) FlatMapFloat64(f func(Uint16Option) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64List
	} else {
		acc := NilFloat64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionList) FlatMapComplex64(f func(Uint16Option) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64List
	} else {
		acc := NilComplex64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionList) FlatMapComplex128(f func(Uint16Option) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128List
	} else {
		acc := NilComplex128List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionList) FlatMapAny(f func(Uint16Option) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAnyList
	} else {
		acc := NilAnyList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionList) FlatMapBool(f func(Uint32Option) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBoolList
	} else {
		acc := NilBoolList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionList) FlatMapString(f func(Uint32Option) StringList) StringList {
	if m.IsEmpty() {
		return NilStringList
	} else {
		acc := NilStringList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionList) FlatMapInt(f func(Uint32Option) IntList) IntList {
	if m.IsEmpty() {
		return NilIntList
	} else {
		acc := NilIntList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionList) FlatMapInt8(f func(Uint32Option) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8List
	} else {
		acc := NilInt8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionList) FlatMapInt16(f func(Uint32Option) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16List
	} else {
		acc := NilInt16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionList) FlatMapInt32(f func(Uint32Option) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32List
	} else {
		acc := NilInt32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionList) FlatMapInt64(f func(Uint32Option) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64List
	} else {
		acc := NilInt64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionList) FlatMapUint(f func(Uint32Option) UintList) UintList {
	if m.IsEmpty() {
		return NilUintList
	} else {
		acc := NilUintList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionList) FlatMapUint8(f func(Uint32Option) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8List
	} else {
		acc := NilUint8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionList) FlatMapUint16(f func(Uint32Option) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16List
	} else {
		acc := NilUint16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionList) FlatMapUint32(f func(Uint32Option) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32List
	} else {
		acc := NilUint32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionList) FlatMapUint64(f func(Uint32Option) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64List
	} else {
		acc := NilUint64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionList) FlatMapUintptr(f func(Uint32Option) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptrList
	} else {
		acc := NilUintptrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionList) FlatMapByte(f func(Uint32Option) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByteList
	} else {
		acc := NilByteList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionList) FlatMapRune(f func(Uint32Option) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRuneList
	} else {
		acc := NilRuneList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionList) FlatMapFloat32(f func(Uint32Option) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32List
	} else {
		acc := NilFloat32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionList) FlatMapFloat64(f func(Uint32Option) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64List
	} else {
		acc := NilFloat64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionList) FlatMapComplex64(f func(Uint32Option) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64List
	} else {
		acc := NilComplex64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionList) FlatMapComplex128(f func(Uint32Option) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128List
	} else {
		acc := NilComplex128List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionList) FlatMapAny(f func(Uint32Option) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAnyList
	} else {
		acc := NilAnyList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionList) FlatMapBool(f func(Uint64Option) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBoolList
	} else {
		acc := NilBoolList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionList) FlatMapString(f func(Uint64Option) StringList) StringList {
	if m.IsEmpty() {
		return NilStringList
	} else {
		acc := NilStringList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionList) FlatMapInt(f func(Uint64Option) IntList) IntList {
	if m.IsEmpty() {
		return NilIntList
	} else {
		acc := NilIntList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionList) FlatMapInt8(f func(Uint64Option) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8List
	} else {
		acc := NilInt8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionList) FlatMapInt16(f func(Uint64Option) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16List
	} else {
		acc := NilInt16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionList) FlatMapInt32(f func(Uint64Option) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32List
	} else {
		acc := NilInt32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionList) FlatMapInt64(f func(Uint64Option) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64List
	} else {
		acc := NilInt64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionList) FlatMapUint(f func(Uint64Option) UintList) UintList {
	if m.IsEmpty() {
		return NilUintList
	} else {
		acc := NilUintList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionList) FlatMapUint8(f func(Uint64Option) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8List
	} else {
		acc := NilUint8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionList) FlatMapUint16(f func(Uint64Option) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16List
	} else {
		acc := NilUint16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionList) FlatMapUint32(f func(Uint64Option) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32List
	} else {
		acc := NilUint32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionList) FlatMapUint64(f func(Uint64Option) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64List
	} else {
		acc := NilUint64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionList) FlatMapUintptr(f func(Uint64Option) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptrList
	} else {
		acc := NilUintptrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionList) FlatMapByte(f func(Uint64Option) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByteList
	} else {
		acc := NilByteList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionList) FlatMapRune(f func(Uint64Option) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRuneList
	} else {
		acc := NilRuneList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionList) FlatMapFloat32(f func(Uint64Option) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32List
	} else {
		acc := NilFloat32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionList) FlatMapFloat64(f func(Uint64Option) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64List
	} else {
		acc := NilFloat64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionList) FlatMapComplex64(f func(Uint64Option) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64List
	} else {
		acc := NilComplex64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionList) FlatMapComplex128(f func(Uint64Option) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128List
	} else {
		acc := NilComplex128List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionList) FlatMapAny(f func(Uint64Option) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAnyList
	} else {
		acc := NilAnyList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionList) FlatMapBool(f func(UintptrOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBoolList
	} else {
		acc := NilBoolList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionList) FlatMapString(f func(UintptrOption) StringList) StringList {
	if m.IsEmpty() {
		return NilStringList
	} else {
		acc := NilStringList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionList) FlatMapInt(f func(UintptrOption) IntList) IntList {
	if m.IsEmpty() {
		return NilIntList
	} else {
		acc := NilIntList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionList) FlatMapInt8(f func(UintptrOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8List
	} else {
		acc := NilInt8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionList) FlatMapInt16(f func(UintptrOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16List
	} else {
		acc := NilInt16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionList) FlatMapInt32(f func(UintptrOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32List
	} else {
		acc := NilInt32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionList) FlatMapInt64(f func(UintptrOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64List
	} else {
		acc := NilInt64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionList) FlatMapUint(f func(UintptrOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUintList
	} else {
		acc := NilUintList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionList) FlatMapUint8(f func(UintptrOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8List
	} else {
		acc := NilUint8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionList) FlatMapUint16(f func(UintptrOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16List
	} else {
		acc := NilUint16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionList) FlatMapUint32(f func(UintptrOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32List
	} else {
		acc := NilUint32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionList) FlatMapUint64(f func(UintptrOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64List
	} else {
		acc := NilUint64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionList) FlatMapUintptr(f func(UintptrOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptrList
	} else {
		acc := NilUintptrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionList) FlatMapByte(f func(UintptrOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByteList
	} else {
		acc := NilByteList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionList) FlatMapRune(f func(UintptrOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRuneList
	} else {
		acc := NilRuneList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionList) FlatMapFloat32(f func(UintptrOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32List
	} else {
		acc := NilFloat32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionList) FlatMapFloat64(f func(UintptrOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64List
	} else {
		acc := NilFloat64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionList) FlatMapComplex64(f func(UintptrOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64List
	} else {
		acc := NilComplex64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionList) FlatMapComplex128(f func(UintptrOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128List
	} else {
		acc := NilComplex128List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionList) FlatMapAny(f func(UintptrOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAnyList
	} else {
		acc := NilAnyList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionList) FlatMapBool(f func(ByteOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBoolList
	} else {
		acc := NilBoolList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionList) FlatMapString(f func(ByteOption) StringList) StringList {
	if m.IsEmpty() {
		return NilStringList
	} else {
		acc := NilStringList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionList) FlatMapInt(f func(ByteOption) IntList) IntList {
	if m.IsEmpty() {
		return NilIntList
	} else {
		acc := NilIntList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionList) FlatMapInt8(f func(ByteOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8List
	} else {
		acc := NilInt8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionList) FlatMapInt16(f func(ByteOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16List
	} else {
		acc := NilInt16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionList) FlatMapInt32(f func(ByteOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32List
	} else {
		acc := NilInt32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionList) FlatMapInt64(f func(ByteOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64List
	} else {
		acc := NilInt64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionList) FlatMapUint(f func(ByteOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUintList
	} else {
		acc := NilUintList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionList) FlatMapUint8(f func(ByteOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8List
	} else {
		acc := NilUint8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionList) FlatMapUint16(f func(ByteOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16List
	} else {
		acc := NilUint16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionList) FlatMapUint32(f func(ByteOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32List
	} else {
		acc := NilUint32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionList) FlatMapUint64(f func(ByteOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64List
	} else {
		acc := NilUint64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionList) FlatMapUintptr(f func(ByteOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptrList
	} else {
		acc := NilUintptrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionList) FlatMapByte(f func(ByteOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByteList
	} else {
		acc := NilByteList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionList) FlatMapRune(f func(ByteOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRuneList
	} else {
		acc := NilRuneList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionList) FlatMapFloat32(f func(ByteOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32List
	} else {
		acc := NilFloat32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionList) FlatMapFloat64(f func(ByteOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64List
	} else {
		acc := NilFloat64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionList) FlatMapComplex64(f func(ByteOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64List
	} else {
		acc := NilComplex64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionList) FlatMapComplex128(f func(ByteOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128List
	} else {
		acc := NilComplex128List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionList) FlatMapAny(f func(ByteOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAnyList
	} else {
		acc := NilAnyList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionList) FlatMapBool(f func(RuneOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBoolList
	} else {
		acc := NilBoolList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionList) FlatMapString(f func(RuneOption) StringList) StringList {
	if m.IsEmpty() {
		return NilStringList
	} else {
		acc := NilStringList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionList) FlatMapInt(f func(RuneOption) IntList) IntList {
	if m.IsEmpty() {
		return NilIntList
	} else {
		acc := NilIntList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionList) FlatMapInt8(f func(RuneOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8List
	} else {
		acc := NilInt8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionList) FlatMapInt16(f func(RuneOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16List
	} else {
		acc := NilInt16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionList) FlatMapInt32(f func(RuneOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32List
	} else {
		acc := NilInt32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionList) FlatMapInt64(f func(RuneOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64List
	} else {
		acc := NilInt64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionList) FlatMapUint(f func(RuneOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUintList
	} else {
		acc := NilUintList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionList) FlatMapUint8(f func(RuneOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8List
	} else {
		acc := NilUint8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionList) FlatMapUint16(f func(RuneOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16List
	} else {
		acc := NilUint16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionList) FlatMapUint32(f func(RuneOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32List
	} else {
		acc := NilUint32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionList) FlatMapUint64(f func(RuneOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64List
	} else {
		acc := NilUint64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionList) FlatMapUintptr(f func(RuneOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptrList
	} else {
		acc := NilUintptrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionList) FlatMapByte(f func(RuneOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByteList
	} else {
		acc := NilByteList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionList) FlatMapRune(f func(RuneOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRuneList
	} else {
		acc := NilRuneList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionList) FlatMapFloat32(f func(RuneOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32List
	} else {
		acc := NilFloat32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionList) FlatMapFloat64(f func(RuneOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64List
	} else {
		acc := NilFloat64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionList) FlatMapComplex64(f func(RuneOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64List
	} else {
		acc := NilComplex64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionList) FlatMapComplex128(f func(RuneOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128List
	} else {
		acc := NilComplex128List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionList) FlatMapAny(f func(RuneOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAnyList
	} else {
		acc := NilAnyList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionList) FlatMapBool(f func(Float32Option) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBoolList
	} else {
		acc := NilBoolList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionList) FlatMapString(f func(Float32Option) StringList) StringList {
	if m.IsEmpty() {
		return NilStringList
	} else {
		acc := NilStringList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionList) FlatMapInt(f func(Float32Option) IntList) IntList {
	if m.IsEmpty() {
		return NilIntList
	} else {
		acc := NilIntList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionList) FlatMapInt8(f func(Float32Option) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8List
	} else {
		acc := NilInt8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionList) FlatMapInt16(f func(Float32Option) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16List
	} else {
		acc := NilInt16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionList) FlatMapInt32(f func(Float32Option) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32List
	} else {
		acc := NilInt32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionList) FlatMapInt64(f func(Float32Option) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64List
	} else {
		acc := NilInt64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionList) FlatMapUint(f func(Float32Option) UintList) UintList {
	if m.IsEmpty() {
		return NilUintList
	} else {
		acc := NilUintList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionList) FlatMapUint8(f func(Float32Option) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8List
	} else {
		acc := NilUint8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionList) FlatMapUint16(f func(Float32Option) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16List
	} else {
		acc := NilUint16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionList) FlatMapUint32(f func(Float32Option) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32List
	} else {
		acc := NilUint32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionList) FlatMapUint64(f func(Float32Option) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64List
	} else {
		acc := NilUint64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionList) FlatMapUintptr(f func(Float32Option) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptrList
	} else {
		acc := NilUintptrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionList) FlatMapByte(f func(Float32Option) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByteList
	} else {
		acc := NilByteList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionList) FlatMapRune(f func(Float32Option) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRuneList
	} else {
		acc := NilRuneList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionList) FlatMapFloat32(f func(Float32Option) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32List
	} else {
		acc := NilFloat32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionList) FlatMapFloat64(f func(Float32Option) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64List
	} else {
		acc := NilFloat64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionList) FlatMapComplex64(f func(Float32Option) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64List
	} else {
		acc := NilComplex64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionList) FlatMapComplex128(f func(Float32Option) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128List
	} else {
		acc := NilComplex128List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionList) FlatMapAny(f func(Float32Option) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAnyList
	} else {
		acc := NilAnyList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionList) FlatMapBool(f func(Float64Option) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBoolList
	} else {
		acc := NilBoolList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionList) FlatMapString(f func(Float64Option) StringList) StringList {
	if m.IsEmpty() {
		return NilStringList
	} else {
		acc := NilStringList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionList) FlatMapInt(f func(Float64Option) IntList) IntList {
	if m.IsEmpty() {
		return NilIntList
	} else {
		acc := NilIntList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionList) FlatMapInt8(f func(Float64Option) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8List
	} else {
		acc := NilInt8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionList) FlatMapInt16(f func(Float64Option) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16List
	} else {
		acc := NilInt16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionList) FlatMapInt32(f func(Float64Option) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32List
	} else {
		acc := NilInt32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionList) FlatMapInt64(f func(Float64Option) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64List
	} else {
		acc := NilInt64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionList) FlatMapUint(f func(Float64Option) UintList) UintList {
	if m.IsEmpty() {
		return NilUintList
	} else {
		acc := NilUintList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionList) FlatMapUint8(f func(Float64Option) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8List
	} else {
		acc := NilUint8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionList) FlatMapUint16(f func(Float64Option) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16List
	} else {
		acc := NilUint16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionList) FlatMapUint32(f func(Float64Option) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32List
	} else {
		acc := NilUint32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionList) FlatMapUint64(f func(Float64Option) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64List
	} else {
		acc := NilUint64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionList) FlatMapUintptr(f func(Float64Option) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptrList
	} else {
		acc := NilUintptrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionList) FlatMapByte(f func(Float64Option) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByteList
	} else {
		acc := NilByteList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionList) FlatMapRune(f func(Float64Option) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRuneList
	} else {
		acc := NilRuneList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionList) FlatMapFloat32(f func(Float64Option) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32List
	} else {
		acc := NilFloat32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionList) FlatMapFloat64(f func(Float64Option) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64List
	} else {
		acc := NilFloat64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionList) FlatMapComplex64(f func(Float64Option) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64List
	} else {
		acc := NilComplex64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionList) FlatMapComplex128(f func(Float64Option) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128List
	} else {
		acc := NilComplex128List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionList) FlatMapAny(f func(Float64Option) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAnyList
	} else {
		acc := NilAnyList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionList) FlatMapBool(f func(Complex64Option) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBoolList
	} else {
		acc := NilBoolList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionList) FlatMapString(f func(Complex64Option) StringList) StringList {
	if m.IsEmpty() {
		return NilStringList
	} else {
		acc := NilStringList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionList) FlatMapInt(f func(Complex64Option) IntList) IntList {
	if m.IsEmpty() {
		return NilIntList
	} else {
		acc := NilIntList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionList) FlatMapInt8(f func(Complex64Option) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8List
	} else {
		acc := NilInt8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionList) FlatMapInt16(f func(Complex64Option) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16List
	} else {
		acc := NilInt16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionList) FlatMapInt32(f func(Complex64Option) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32List
	} else {
		acc := NilInt32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionList) FlatMapInt64(f func(Complex64Option) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64List
	} else {
		acc := NilInt64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionList) FlatMapUint(f func(Complex64Option) UintList) UintList {
	if m.IsEmpty() {
		return NilUintList
	} else {
		acc := NilUintList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionList) FlatMapUint8(f func(Complex64Option) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8List
	} else {
		acc := NilUint8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionList) FlatMapUint16(f func(Complex64Option) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16List
	} else {
		acc := NilUint16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionList) FlatMapUint32(f func(Complex64Option) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32List
	} else {
		acc := NilUint32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionList) FlatMapUint64(f func(Complex64Option) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64List
	} else {
		acc := NilUint64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionList) FlatMapUintptr(f func(Complex64Option) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptrList
	} else {
		acc := NilUintptrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionList) FlatMapByte(f func(Complex64Option) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByteList
	} else {
		acc := NilByteList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionList) FlatMapRune(f func(Complex64Option) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRuneList
	} else {
		acc := NilRuneList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionList) FlatMapFloat32(f func(Complex64Option) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32List
	} else {
		acc := NilFloat32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionList) FlatMapFloat64(f func(Complex64Option) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64List
	} else {
		acc := NilFloat64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionList) FlatMapComplex64(f func(Complex64Option) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64List
	} else {
		acc := NilComplex64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionList) FlatMapComplex128(f func(Complex64Option) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128List
	} else {
		acc := NilComplex128List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionList) FlatMapAny(f func(Complex64Option) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAnyList
	} else {
		acc := NilAnyList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionList) FlatMapBool(f func(Complex128Option) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBoolList
	} else {
		acc := NilBoolList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionList) FlatMapString(f func(Complex128Option) StringList) StringList {
	if m.IsEmpty() {
		return NilStringList
	} else {
		acc := NilStringList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionList) FlatMapInt(f func(Complex128Option) IntList) IntList {
	if m.IsEmpty() {
		return NilIntList
	} else {
		acc := NilIntList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionList) FlatMapInt8(f func(Complex128Option) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8List
	} else {
		acc := NilInt8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionList) FlatMapInt16(f func(Complex128Option) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16List
	} else {
		acc := NilInt16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionList) FlatMapInt32(f func(Complex128Option) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32List
	} else {
		acc := NilInt32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionList) FlatMapInt64(f func(Complex128Option) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64List
	} else {
		acc := NilInt64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionList) FlatMapUint(f func(Complex128Option) UintList) UintList {
	if m.IsEmpty() {
		return NilUintList
	} else {
		acc := NilUintList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionList) FlatMapUint8(f func(Complex128Option) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8List
	} else {
		acc := NilUint8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionList) FlatMapUint16(f func(Complex128Option) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16List
	} else {
		acc := NilUint16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionList) FlatMapUint32(f func(Complex128Option) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32List
	} else {
		acc := NilUint32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionList) FlatMapUint64(f func(Complex128Option) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64List
	} else {
		acc := NilUint64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionList) FlatMapUintptr(f func(Complex128Option) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptrList
	} else {
		acc := NilUintptrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionList) FlatMapByte(f func(Complex128Option) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByteList
	} else {
		acc := NilByteList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionList) FlatMapRune(f func(Complex128Option) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRuneList
	} else {
		acc := NilRuneList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionList) FlatMapFloat32(f func(Complex128Option) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32List
	} else {
		acc := NilFloat32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionList) FlatMapFloat64(f func(Complex128Option) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64List
	} else {
		acc := NilFloat64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionList) FlatMapComplex64(f func(Complex128Option) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64List
	} else {
		acc := NilComplex64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionList) FlatMapComplex128(f func(Complex128Option) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128List
	} else {
		acc := NilComplex128List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionList) FlatMapAny(f func(Complex128Option) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAnyList
	} else {
		acc := NilAnyList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionList) FlatMapBool(f func(AnyOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBoolList
	} else {
		acc := NilBoolList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionList) FlatMapString(f func(AnyOption) StringList) StringList {
	if m.IsEmpty() {
		return NilStringList
	} else {
		acc := NilStringList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionList) FlatMapInt(f func(AnyOption) IntList) IntList {
	if m.IsEmpty() {
		return NilIntList
	} else {
		acc := NilIntList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionList) FlatMapInt8(f func(AnyOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8List
	} else {
		acc := NilInt8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionList) FlatMapInt16(f func(AnyOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16List
	} else {
		acc := NilInt16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionList) FlatMapInt32(f func(AnyOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32List
	} else {
		acc := NilInt32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionList) FlatMapInt64(f func(AnyOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64List
	} else {
		acc := NilInt64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionList) FlatMapUint(f func(AnyOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUintList
	} else {
		acc := NilUintList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionList) FlatMapUint8(f func(AnyOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8List
	} else {
		acc := NilUint8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionList) FlatMapUint16(f func(AnyOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16List
	} else {
		acc := NilUint16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionList) FlatMapUint32(f func(AnyOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32List
	} else {
		acc := NilUint32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionList) FlatMapUint64(f func(AnyOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64List
	} else {
		acc := NilUint64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionList) FlatMapUintptr(f func(AnyOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptrList
	} else {
		acc := NilUintptrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionList) FlatMapByte(f func(AnyOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByteList
	} else {
		acc := NilByteList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionList) FlatMapRune(f func(AnyOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRuneList
	} else {
		acc := NilRuneList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionList) FlatMapFloat32(f func(AnyOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32List
	} else {
		acc := NilFloat32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionList) FlatMapFloat64(f func(AnyOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64List
	} else {
		acc := NilFloat64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionList) FlatMapComplex64(f func(AnyOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64List
	} else {
		acc := NilComplex64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionList) FlatMapComplex128(f func(AnyOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128List
	} else {
		acc := NilComplex128List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionList) FlatMapAny(f func(AnyOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAnyList
	} else {
		acc := NilAnyList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrList) FlatMapBool(f func([]bool) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBoolList
	} else {
		acc := NilBoolList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrList) FlatMapString(f func([]bool) StringList) StringList {
	if m.IsEmpty() {
		return NilStringList
	} else {
		acc := NilStringList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrList) FlatMapInt(f func([]bool) IntList) IntList {
	if m.IsEmpty() {
		return NilIntList
	} else {
		acc := NilIntList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrList) FlatMapInt8(f func([]bool) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8List
	} else {
		acc := NilInt8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrList) FlatMapInt16(f func([]bool) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16List
	} else {
		acc := NilInt16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrList) FlatMapInt32(f func([]bool) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32List
	} else {
		acc := NilInt32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrList) FlatMapInt64(f func([]bool) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64List
	} else {
		acc := NilInt64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrList) FlatMapUint(f func([]bool) UintList) UintList {
	if m.IsEmpty() {
		return NilUintList
	} else {
		acc := NilUintList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrList) FlatMapUint8(f func([]bool) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8List
	} else {
		acc := NilUint8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrList) FlatMapUint16(f func([]bool) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16List
	} else {
		acc := NilUint16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrList) FlatMapUint32(f func([]bool) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32List
	} else {
		acc := NilUint32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrList) FlatMapUint64(f func([]bool) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64List
	} else {
		acc := NilUint64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrList) FlatMapUintptr(f func([]bool) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptrList
	} else {
		acc := NilUintptrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrList) FlatMapByte(f func([]bool) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByteList
	} else {
		acc := NilByteList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrList) FlatMapRune(f func([]bool) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRuneList
	} else {
		acc := NilRuneList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrList) FlatMapFloat32(f func([]bool) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32List
	} else {
		acc := NilFloat32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrList) FlatMapFloat64(f func([]bool) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64List
	} else {
		acc := NilFloat64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrList) FlatMapComplex64(f func([]bool) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64List
	} else {
		acc := NilComplex64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrList) FlatMapComplex128(f func([]bool) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128List
	} else {
		acc := NilComplex128List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrList) FlatMapAny(f func([]bool) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAnyList
	} else {
		acc := NilAnyList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrList) FlatMapBool(f func([]string) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBoolList
	} else {
		acc := NilBoolList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrList) FlatMapString(f func([]string) StringList) StringList {
	if m.IsEmpty() {
		return NilStringList
	} else {
		acc := NilStringList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrList) FlatMapInt(f func([]string) IntList) IntList {
	if m.IsEmpty() {
		return NilIntList
	} else {
		acc := NilIntList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrList) FlatMapInt8(f func([]string) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8List
	} else {
		acc := NilInt8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrList) FlatMapInt16(f func([]string) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16List
	} else {
		acc := NilInt16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrList) FlatMapInt32(f func([]string) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32List
	} else {
		acc := NilInt32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrList) FlatMapInt64(f func([]string) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64List
	} else {
		acc := NilInt64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrList) FlatMapUint(f func([]string) UintList) UintList {
	if m.IsEmpty() {
		return NilUintList
	} else {
		acc := NilUintList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrList) FlatMapUint8(f func([]string) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8List
	} else {
		acc := NilUint8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrList) FlatMapUint16(f func([]string) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16List
	} else {
		acc := NilUint16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrList) FlatMapUint32(f func([]string) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32List
	} else {
		acc := NilUint32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrList) FlatMapUint64(f func([]string) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64List
	} else {
		acc := NilUint64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrList) FlatMapUintptr(f func([]string) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptrList
	} else {
		acc := NilUintptrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrList) FlatMapByte(f func([]string) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByteList
	} else {
		acc := NilByteList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrList) FlatMapRune(f func([]string) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRuneList
	} else {
		acc := NilRuneList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrList) FlatMapFloat32(f func([]string) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32List
	} else {
		acc := NilFloat32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrList) FlatMapFloat64(f func([]string) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64List
	} else {
		acc := NilFloat64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrList) FlatMapComplex64(f func([]string) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64List
	} else {
		acc := NilComplex64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrList) FlatMapComplex128(f func([]string) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128List
	} else {
		acc := NilComplex128List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrList) FlatMapAny(f func([]string) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAnyList
	} else {
		acc := NilAnyList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrList) FlatMapBool(f func([]int) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBoolList
	} else {
		acc := NilBoolList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrList) FlatMapString(f func([]int) StringList) StringList {
	if m.IsEmpty() {
		return NilStringList
	} else {
		acc := NilStringList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrList) FlatMapInt(f func([]int) IntList) IntList {
	if m.IsEmpty() {
		return NilIntList
	} else {
		acc := NilIntList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrList) FlatMapInt8(f func([]int) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8List
	} else {
		acc := NilInt8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrList) FlatMapInt16(f func([]int) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16List
	} else {
		acc := NilInt16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrList) FlatMapInt32(f func([]int) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32List
	} else {
		acc := NilInt32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrList) FlatMapInt64(f func([]int) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64List
	} else {
		acc := NilInt64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrList) FlatMapUint(f func([]int) UintList) UintList {
	if m.IsEmpty() {
		return NilUintList
	} else {
		acc := NilUintList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrList) FlatMapUint8(f func([]int) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8List
	} else {
		acc := NilUint8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrList) FlatMapUint16(f func([]int) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16List
	} else {
		acc := NilUint16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrList) FlatMapUint32(f func([]int) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32List
	} else {
		acc := NilUint32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrList) FlatMapUint64(f func([]int) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64List
	} else {
		acc := NilUint64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrList) FlatMapUintptr(f func([]int) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptrList
	} else {
		acc := NilUintptrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrList) FlatMapByte(f func([]int) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByteList
	} else {
		acc := NilByteList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrList) FlatMapRune(f func([]int) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRuneList
	} else {
		acc := NilRuneList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrList) FlatMapFloat32(f func([]int) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32List
	} else {
		acc := NilFloat32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrList) FlatMapFloat64(f func([]int) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64List
	} else {
		acc := NilFloat64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrList) FlatMapComplex64(f func([]int) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64List
	} else {
		acc := NilComplex64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrList) FlatMapComplex128(f func([]int) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128List
	} else {
		acc := NilComplex128List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrList) FlatMapAny(f func([]int) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAnyList
	} else {
		acc := NilAnyList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrList) FlatMapBool(f func([]int8) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBoolList
	} else {
		acc := NilBoolList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrList) FlatMapString(f func([]int8) StringList) StringList {
	if m.IsEmpty() {
		return NilStringList
	} else {
		acc := NilStringList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrList) FlatMapInt(f func([]int8) IntList) IntList {
	if m.IsEmpty() {
		return NilIntList
	} else {
		acc := NilIntList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrList) FlatMapInt8(f func([]int8) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8List
	} else {
		acc := NilInt8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrList) FlatMapInt16(f func([]int8) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16List
	} else {
		acc := NilInt16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrList) FlatMapInt32(f func([]int8) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32List
	} else {
		acc := NilInt32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrList) FlatMapInt64(f func([]int8) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64List
	} else {
		acc := NilInt64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrList) FlatMapUint(f func([]int8) UintList) UintList {
	if m.IsEmpty() {
		return NilUintList
	} else {
		acc := NilUintList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrList) FlatMapUint8(f func([]int8) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8List
	} else {
		acc := NilUint8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrList) FlatMapUint16(f func([]int8) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16List
	} else {
		acc := NilUint16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrList) FlatMapUint32(f func([]int8) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32List
	} else {
		acc := NilUint32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrList) FlatMapUint64(f func([]int8) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64List
	} else {
		acc := NilUint64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrList) FlatMapUintptr(f func([]int8) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptrList
	} else {
		acc := NilUintptrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrList) FlatMapByte(f func([]int8) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByteList
	} else {
		acc := NilByteList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrList) FlatMapRune(f func([]int8) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRuneList
	} else {
		acc := NilRuneList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrList) FlatMapFloat32(f func([]int8) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32List
	} else {
		acc := NilFloat32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrList) FlatMapFloat64(f func([]int8) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64List
	} else {
		acc := NilFloat64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrList) FlatMapComplex64(f func([]int8) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64List
	} else {
		acc := NilComplex64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrList) FlatMapComplex128(f func([]int8) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128List
	} else {
		acc := NilComplex128List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrList) FlatMapAny(f func([]int8) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAnyList
	} else {
		acc := NilAnyList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrList) FlatMapBool(f func([]int16) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBoolList
	} else {
		acc := NilBoolList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrList) FlatMapString(f func([]int16) StringList) StringList {
	if m.IsEmpty() {
		return NilStringList
	} else {
		acc := NilStringList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrList) FlatMapInt(f func([]int16) IntList) IntList {
	if m.IsEmpty() {
		return NilIntList
	} else {
		acc := NilIntList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrList) FlatMapInt8(f func([]int16) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8List
	} else {
		acc := NilInt8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrList) FlatMapInt16(f func([]int16) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16List
	} else {
		acc := NilInt16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrList) FlatMapInt32(f func([]int16) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32List
	} else {
		acc := NilInt32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrList) FlatMapInt64(f func([]int16) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64List
	} else {
		acc := NilInt64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrList) FlatMapUint(f func([]int16) UintList) UintList {
	if m.IsEmpty() {
		return NilUintList
	} else {
		acc := NilUintList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrList) FlatMapUint8(f func([]int16) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8List
	} else {
		acc := NilUint8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrList) FlatMapUint16(f func([]int16) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16List
	} else {
		acc := NilUint16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrList) FlatMapUint32(f func([]int16) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32List
	} else {
		acc := NilUint32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrList) FlatMapUint64(f func([]int16) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64List
	} else {
		acc := NilUint64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrList) FlatMapUintptr(f func([]int16) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptrList
	} else {
		acc := NilUintptrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrList) FlatMapByte(f func([]int16) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByteList
	} else {
		acc := NilByteList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrList) FlatMapRune(f func([]int16) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRuneList
	} else {
		acc := NilRuneList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrList) FlatMapFloat32(f func([]int16) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32List
	} else {
		acc := NilFloat32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrList) FlatMapFloat64(f func([]int16) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64List
	} else {
		acc := NilFloat64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrList) FlatMapComplex64(f func([]int16) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64List
	} else {
		acc := NilComplex64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrList) FlatMapComplex128(f func([]int16) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128List
	} else {
		acc := NilComplex128List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrList) FlatMapAny(f func([]int16) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAnyList
	} else {
		acc := NilAnyList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrList) FlatMapBool(f func([]int32) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBoolList
	} else {
		acc := NilBoolList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrList) FlatMapString(f func([]int32) StringList) StringList {
	if m.IsEmpty() {
		return NilStringList
	} else {
		acc := NilStringList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrList) FlatMapInt(f func([]int32) IntList) IntList {
	if m.IsEmpty() {
		return NilIntList
	} else {
		acc := NilIntList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrList) FlatMapInt8(f func([]int32) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8List
	} else {
		acc := NilInt8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrList) FlatMapInt16(f func([]int32) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16List
	} else {
		acc := NilInt16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrList) FlatMapInt32(f func([]int32) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32List
	} else {
		acc := NilInt32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrList) FlatMapInt64(f func([]int32) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64List
	} else {
		acc := NilInt64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrList) FlatMapUint(f func([]int32) UintList) UintList {
	if m.IsEmpty() {
		return NilUintList
	} else {
		acc := NilUintList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrList) FlatMapUint8(f func([]int32) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8List
	} else {
		acc := NilUint8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrList) FlatMapUint16(f func([]int32) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16List
	} else {
		acc := NilUint16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrList) FlatMapUint32(f func([]int32) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32List
	} else {
		acc := NilUint32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrList) FlatMapUint64(f func([]int32) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64List
	} else {
		acc := NilUint64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrList) FlatMapUintptr(f func([]int32) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptrList
	} else {
		acc := NilUintptrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrList) FlatMapByte(f func([]int32) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByteList
	} else {
		acc := NilByteList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrList) FlatMapRune(f func([]int32) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRuneList
	} else {
		acc := NilRuneList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrList) FlatMapFloat32(f func([]int32) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32List
	} else {
		acc := NilFloat32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrList) FlatMapFloat64(f func([]int32) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64List
	} else {
		acc := NilFloat64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrList) FlatMapComplex64(f func([]int32) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64List
	} else {
		acc := NilComplex64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrList) FlatMapComplex128(f func([]int32) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128List
	} else {
		acc := NilComplex128List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrList) FlatMapAny(f func([]int32) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAnyList
	} else {
		acc := NilAnyList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrList) FlatMapBool(f func([]int64) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBoolList
	} else {
		acc := NilBoolList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrList) FlatMapString(f func([]int64) StringList) StringList {
	if m.IsEmpty() {
		return NilStringList
	} else {
		acc := NilStringList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrList) FlatMapInt(f func([]int64) IntList) IntList {
	if m.IsEmpty() {
		return NilIntList
	} else {
		acc := NilIntList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrList) FlatMapInt8(f func([]int64) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8List
	} else {
		acc := NilInt8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrList) FlatMapInt16(f func([]int64) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16List
	} else {
		acc := NilInt16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrList) FlatMapInt32(f func([]int64) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32List
	} else {
		acc := NilInt32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrList) FlatMapInt64(f func([]int64) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64List
	} else {
		acc := NilInt64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrList) FlatMapUint(f func([]int64) UintList) UintList {
	if m.IsEmpty() {
		return NilUintList
	} else {
		acc := NilUintList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrList) FlatMapUint8(f func([]int64) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8List
	} else {
		acc := NilUint8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrList) FlatMapUint16(f func([]int64) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16List
	} else {
		acc := NilUint16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrList) FlatMapUint32(f func([]int64) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32List
	} else {
		acc := NilUint32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrList) FlatMapUint64(f func([]int64) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64List
	} else {
		acc := NilUint64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrList) FlatMapUintptr(f func([]int64) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptrList
	} else {
		acc := NilUintptrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrList) FlatMapByte(f func([]int64) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByteList
	} else {
		acc := NilByteList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrList) FlatMapRune(f func([]int64) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRuneList
	} else {
		acc := NilRuneList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrList) FlatMapFloat32(f func([]int64) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32List
	} else {
		acc := NilFloat32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrList) FlatMapFloat64(f func([]int64) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64List
	} else {
		acc := NilFloat64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrList) FlatMapComplex64(f func([]int64) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64List
	} else {
		acc := NilComplex64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrList) FlatMapComplex128(f func([]int64) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128List
	} else {
		acc := NilComplex128List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrList) FlatMapAny(f func([]int64) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAnyList
	} else {
		acc := NilAnyList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrList) FlatMapBool(f func([]uint) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBoolList
	} else {
		acc := NilBoolList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrList) FlatMapString(f func([]uint) StringList) StringList {
	if m.IsEmpty() {
		return NilStringList
	} else {
		acc := NilStringList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrList) FlatMapInt(f func([]uint) IntList) IntList {
	if m.IsEmpty() {
		return NilIntList
	} else {
		acc := NilIntList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrList) FlatMapInt8(f func([]uint) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8List
	} else {
		acc := NilInt8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrList) FlatMapInt16(f func([]uint) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16List
	} else {
		acc := NilInt16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrList) FlatMapInt32(f func([]uint) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32List
	} else {
		acc := NilInt32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrList) FlatMapInt64(f func([]uint) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64List
	} else {
		acc := NilInt64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrList) FlatMapUint(f func([]uint) UintList) UintList {
	if m.IsEmpty() {
		return NilUintList
	} else {
		acc := NilUintList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrList) FlatMapUint8(f func([]uint) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8List
	} else {
		acc := NilUint8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrList) FlatMapUint16(f func([]uint) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16List
	} else {
		acc := NilUint16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrList) FlatMapUint32(f func([]uint) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32List
	} else {
		acc := NilUint32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrList) FlatMapUint64(f func([]uint) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64List
	} else {
		acc := NilUint64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrList) FlatMapUintptr(f func([]uint) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptrList
	} else {
		acc := NilUintptrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrList) FlatMapByte(f func([]uint) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByteList
	} else {
		acc := NilByteList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrList) FlatMapRune(f func([]uint) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRuneList
	} else {
		acc := NilRuneList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrList) FlatMapFloat32(f func([]uint) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32List
	} else {
		acc := NilFloat32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrList) FlatMapFloat64(f func([]uint) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64List
	} else {
		acc := NilFloat64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrList) FlatMapComplex64(f func([]uint) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64List
	} else {
		acc := NilComplex64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrList) FlatMapComplex128(f func([]uint) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128List
	} else {
		acc := NilComplex128List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrList) FlatMapAny(f func([]uint) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAnyList
	} else {
		acc := NilAnyList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrList) FlatMapBool(f func([]uint8) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBoolList
	} else {
		acc := NilBoolList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrList) FlatMapString(f func([]uint8) StringList) StringList {
	if m.IsEmpty() {
		return NilStringList
	} else {
		acc := NilStringList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrList) FlatMapInt(f func([]uint8) IntList) IntList {
	if m.IsEmpty() {
		return NilIntList
	} else {
		acc := NilIntList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrList) FlatMapInt8(f func([]uint8) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8List
	} else {
		acc := NilInt8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrList) FlatMapInt16(f func([]uint8) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16List
	} else {
		acc := NilInt16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrList) FlatMapInt32(f func([]uint8) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32List
	} else {
		acc := NilInt32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrList) FlatMapInt64(f func([]uint8) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64List
	} else {
		acc := NilInt64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrList) FlatMapUint(f func([]uint8) UintList) UintList {
	if m.IsEmpty() {
		return NilUintList
	} else {
		acc := NilUintList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrList) FlatMapUint8(f func([]uint8) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8List
	} else {
		acc := NilUint8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrList) FlatMapUint16(f func([]uint8) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16List
	} else {
		acc := NilUint16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrList) FlatMapUint32(f func([]uint8) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32List
	} else {
		acc := NilUint32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrList) FlatMapUint64(f func([]uint8) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64List
	} else {
		acc := NilUint64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrList) FlatMapUintptr(f func([]uint8) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptrList
	} else {
		acc := NilUintptrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrList) FlatMapByte(f func([]uint8) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByteList
	} else {
		acc := NilByteList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrList) FlatMapRune(f func([]uint8) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRuneList
	} else {
		acc := NilRuneList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrList) FlatMapFloat32(f func([]uint8) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32List
	} else {
		acc := NilFloat32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrList) FlatMapFloat64(f func([]uint8) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64List
	} else {
		acc := NilFloat64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrList) FlatMapComplex64(f func([]uint8) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64List
	} else {
		acc := NilComplex64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrList) FlatMapComplex128(f func([]uint8) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128List
	} else {
		acc := NilComplex128List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrList) FlatMapAny(f func([]uint8) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAnyList
	} else {
		acc := NilAnyList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrList) FlatMapBool(f func([]uint16) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBoolList
	} else {
		acc := NilBoolList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrList) FlatMapString(f func([]uint16) StringList) StringList {
	if m.IsEmpty() {
		return NilStringList
	} else {
		acc := NilStringList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrList) FlatMapInt(f func([]uint16) IntList) IntList {
	if m.IsEmpty() {
		return NilIntList
	} else {
		acc := NilIntList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrList) FlatMapInt8(f func([]uint16) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8List
	} else {
		acc := NilInt8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrList) FlatMapInt16(f func([]uint16) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16List
	} else {
		acc := NilInt16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrList) FlatMapInt32(f func([]uint16) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32List
	} else {
		acc := NilInt32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrList) FlatMapInt64(f func([]uint16) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64List
	} else {
		acc := NilInt64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrList) FlatMapUint(f func([]uint16) UintList) UintList {
	if m.IsEmpty() {
		return NilUintList
	} else {
		acc := NilUintList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrList) FlatMapUint8(f func([]uint16) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8List
	} else {
		acc := NilUint8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrList) FlatMapUint16(f func([]uint16) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16List
	} else {
		acc := NilUint16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrList) FlatMapUint32(f func([]uint16) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32List
	} else {
		acc := NilUint32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrList) FlatMapUint64(f func([]uint16) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64List
	} else {
		acc := NilUint64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrList) FlatMapUintptr(f func([]uint16) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptrList
	} else {
		acc := NilUintptrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrList) FlatMapByte(f func([]uint16) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByteList
	} else {
		acc := NilByteList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrList) FlatMapRune(f func([]uint16) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRuneList
	} else {
		acc := NilRuneList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrList) FlatMapFloat32(f func([]uint16) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32List
	} else {
		acc := NilFloat32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrList) FlatMapFloat64(f func([]uint16) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64List
	} else {
		acc := NilFloat64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrList) FlatMapComplex64(f func([]uint16) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64List
	} else {
		acc := NilComplex64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrList) FlatMapComplex128(f func([]uint16) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128List
	} else {
		acc := NilComplex128List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrList) FlatMapAny(f func([]uint16) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAnyList
	} else {
		acc := NilAnyList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrList) FlatMapBool(f func([]uint32) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBoolList
	} else {
		acc := NilBoolList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrList) FlatMapString(f func([]uint32) StringList) StringList {
	if m.IsEmpty() {
		return NilStringList
	} else {
		acc := NilStringList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrList) FlatMapInt(f func([]uint32) IntList) IntList {
	if m.IsEmpty() {
		return NilIntList
	} else {
		acc := NilIntList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrList) FlatMapInt8(f func([]uint32) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8List
	} else {
		acc := NilInt8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrList) FlatMapInt16(f func([]uint32) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16List
	} else {
		acc := NilInt16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrList) FlatMapInt32(f func([]uint32) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32List
	} else {
		acc := NilInt32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrList) FlatMapInt64(f func([]uint32) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64List
	} else {
		acc := NilInt64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrList) FlatMapUint(f func([]uint32) UintList) UintList {
	if m.IsEmpty() {
		return NilUintList
	} else {
		acc := NilUintList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrList) FlatMapUint8(f func([]uint32) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8List
	} else {
		acc := NilUint8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrList) FlatMapUint16(f func([]uint32) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16List
	} else {
		acc := NilUint16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrList) FlatMapUint32(f func([]uint32) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32List
	} else {
		acc := NilUint32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrList) FlatMapUint64(f func([]uint32) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64List
	} else {
		acc := NilUint64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrList) FlatMapUintptr(f func([]uint32) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptrList
	} else {
		acc := NilUintptrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrList) FlatMapByte(f func([]uint32) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByteList
	} else {
		acc := NilByteList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrList) FlatMapRune(f func([]uint32) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRuneList
	} else {
		acc := NilRuneList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrList) FlatMapFloat32(f func([]uint32) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32List
	} else {
		acc := NilFloat32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrList) FlatMapFloat64(f func([]uint32) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64List
	} else {
		acc := NilFloat64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrList) FlatMapComplex64(f func([]uint32) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64List
	} else {
		acc := NilComplex64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrList) FlatMapComplex128(f func([]uint32) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128List
	} else {
		acc := NilComplex128List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrList) FlatMapAny(f func([]uint32) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAnyList
	} else {
		acc := NilAnyList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrList) FlatMapBool(f func([]uint64) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBoolList
	} else {
		acc := NilBoolList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrList) FlatMapString(f func([]uint64) StringList) StringList {
	if m.IsEmpty() {
		return NilStringList
	} else {
		acc := NilStringList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrList) FlatMapInt(f func([]uint64) IntList) IntList {
	if m.IsEmpty() {
		return NilIntList
	} else {
		acc := NilIntList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrList) FlatMapInt8(f func([]uint64) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8List
	} else {
		acc := NilInt8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrList) FlatMapInt16(f func([]uint64) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16List
	} else {
		acc := NilInt16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrList) FlatMapInt32(f func([]uint64) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32List
	} else {
		acc := NilInt32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrList) FlatMapInt64(f func([]uint64) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64List
	} else {
		acc := NilInt64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrList) FlatMapUint(f func([]uint64) UintList) UintList {
	if m.IsEmpty() {
		return NilUintList
	} else {
		acc := NilUintList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrList) FlatMapUint8(f func([]uint64) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8List
	} else {
		acc := NilUint8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrList) FlatMapUint16(f func([]uint64) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16List
	} else {
		acc := NilUint16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrList) FlatMapUint32(f func([]uint64) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32List
	} else {
		acc := NilUint32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrList) FlatMapUint64(f func([]uint64) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64List
	} else {
		acc := NilUint64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrList) FlatMapUintptr(f func([]uint64) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptrList
	} else {
		acc := NilUintptrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrList) FlatMapByte(f func([]uint64) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByteList
	} else {
		acc := NilByteList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrList) FlatMapRune(f func([]uint64) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRuneList
	} else {
		acc := NilRuneList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrList) FlatMapFloat32(f func([]uint64) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32List
	} else {
		acc := NilFloat32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrList) FlatMapFloat64(f func([]uint64) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64List
	} else {
		acc := NilFloat64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrList) FlatMapComplex64(f func([]uint64) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64List
	} else {
		acc := NilComplex64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrList) FlatMapComplex128(f func([]uint64) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128List
	} else {
		acc := NilComplex128List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrList) FlatMapAny(f func([]uint64) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAnyList
	} else {
		acc := NilAnyList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrList) FlatMapBool(f func([]uintptr) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBoolList
	} else {
		acc := NilBoolList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrList) FlatMapString(f func([]uintptr) StringList) StringList {
	if m.IsEmpty() {
		return NilStringList
	} else {
		acc := NilStringList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrList) FlatMapInt(f func([]uintptr) IntList) IntList {
	if m.IsEmpty() {
		return NilIntList
	} else {
		acc := NilIntList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrList) FlatMapInt8(f func([]uintptr) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8List
	} else {
		acc := NilInt8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrList) FlatMapInt16(f func([]uintptr) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16List
	} else {
		acc := NilInt16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrList) FlatMapInt32(f func([]uintptr) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32List
	} else {
		acc := NilInt32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrList) FlatMapInt64(f func([]uintptr) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64List
	} else {
		acc := NilInt64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrList) FlatMapUint(f func([]uintptr) UintList) UintList {
	if m.IsEmpty() {
		return NilUintList
	} else {
		acc := NilUintList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrList) FlatMapUint8(f func([]uintptr) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8List
	} else {
		acc := NilUint8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrList) FlatMapUint16(f func([]uintptr) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16List
	} else {
		acc := NilUint16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrList) FlatMapUint32(f func([]uintptr) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32List
	} else {
		acc := NilUint32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrList) FlatMapUint64(f func([]uintptr) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64List
	} else {
		acc := NilUint64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrList) FlatMapUintptr(f func([]uintptr) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptrList
	} else {
		acc := NilUintptrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrList) FlatMapByte(f func([]uintptr) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByteList
	} else {
		acc := NilByteList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrList) FlatMapRune(f func([]uintptr) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRuneList
	} else {
		acc := NilRuneList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrList) FlatMapFloat32(f func([]uintptr) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32List
	} else {
		acc := NilFloat32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrList) FlatMapFloat64(f func([]uintptr) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64List
	} else {
		acc := NilFloat64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrList) FlatMapComplex64(f func([]uintptr) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64List
	} else {
		acc := NilComplex64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrList) FlatMapComplex128(f func([]uintptr) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128List
	} else {
		acc := NilComplex128List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrList) FlatMapAny(f func([]uintptr) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAnyList
	} else {
		acc := NilAnyList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrList) FlatMapBool(f func([]byte) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBoolList
	} else {
		acc := NilBoolList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrList) FlatMapString(f func([]byte) StringList) StringList {
	if m.IsEmpty() {
		return NilStringList
	} else {
		acc := NilStringList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrList) FlatMapInt(f func([]byte) IntList) IntList {
	if m.IsEmpty() {
		return NilIntList
	} else {
		acc := NilIntList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrList) FlatMapInt8(f func([]byte) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8List
	} else {
		acc := NilInt8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrList) FlatMapInt16(f func([]byte) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16List
	} else {
		acc := NilInt16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrList) FlatMapInt32(f func([]byte) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32List
	} else {
		acc := NilInt32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrList) FlatMapInt64(f func([]byte) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64List
	} else {
		acc := NilInt64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrList) FlatMapUint(f func([]byte) UintList) UintList {
	if m.IsEmpty() {
		return NilUintList
	} else {
		acc := NilUintList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrList) FlatMapUint8(f func([]byte) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8List
	} else {
		acc := NilUint8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrList) FlatMapUint16(f func([]byte) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16List
	} else {
		acc := NilUint16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrList) FlatMapUint32(f func([]byte) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32List
	} else {
		acc := NilUint32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrList) FlatMapUint64(f func([]byte) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64List
	} else {
		acc := NilUint64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrList) FlatMapUintptr(f func([]byte) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptrList
	} else {
		acc := NilUintptrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrList) FlatMapByte(f func([]byte) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByteList
	} else {
		acc := NilByteList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrList) FlatMapRune(f func([]byte) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRuneList
	} else {
		acc := NilRuneList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrList) FlatMapFloat32(f func([]byte) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32List
	} else {
		acc := NilFloat32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrList) FlatMapFloat64(f func([]byte) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64List
	} else {
		acc := NilFloat64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrList) FlatMapComplex64(f func([]byte) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64List
	} else {
		acc := NilComplex64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrList) FlatMapComplex128(f func([]byte) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128List
	} else {
		acc := NilComplex128List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrList) FlatMapAny(f func([]byte) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAnyList
	} else {
		acc := NilAnyList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrList) FlatMapBool(f func([]rune) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBoolList
	} else {
		acc := NilBoolList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrList) FlatMapString(f func([]rune) StringList) StringList {
	if m.IsEmpty() {
		return NilStringList
	} else {
		acc := NilStringList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrList) FlatMapInt(f func([]rune) IntList) IntList {
	if m.IsEmpty() {
		return NilIntList
	} else {
		acc := NilIntList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrList) FlatMapInt8(f func([]rune) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8List
	} else {
		acc := NilInt8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrList) FlatMapInt16(f func([]rune) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16List
	} else {
		acc := NilInt16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrList) FlatMapInt32(f func([]rune) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32List
	} else {
		acc := NilInt32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrList) FlatMapInt64(f func([]rune) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64List
	} else {
		acc := NilInt64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrList) FlatMapUint(f func([]rune) UintList) UintList {
	if m.IsEmpty() {
		return NilUintList
	} else {
		acc := NilUintList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrList) FlatMapUint8(f func([]rune) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8List
	} else {
		acc := NilUint8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrList) FlatMapUint16(f func([]rune) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16List
	} else {
		acc := NilUint16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrList) FlatMapUint32(f func([]rune) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32List
	} else {
		acc := NilUint32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrList) FlatMapUint64(f func([]rune) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64List
	} else {
		acc := NilUint64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrList) FlatMapUintptr(f func([]rune) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptrList
	} else {
		acc := NilUintptrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrList) FlatMapByte(f func([]rune) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByteList
	} else {
		acc := NilByteList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrList) FlatMapRune(f func([]rune) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRuneList
	} else {
		acc := NilRuneList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrList) FlatMapFloat32(f func([]rune) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32List
	} else {
		acc := NilFloat32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrList) FlatMapFloat64(f func([]rune) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64List
	} else {
		acc := NilFloat64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrList) FlatMapComplex64(f func([]rune) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64List
	} else {
		acc := NilComplex64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrList) FlatMapComplex128(f func([]rune) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128List
	} else {
		acc := NilComplex128List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrList) FlatMapAny(f func([]rune) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAnyList
	} else {
		acc := NilAnyList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrList) FlatMapBool(f func([]float32) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBoolList
	} else {
		acc := NilBoolList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrList) FlatMapString(f func([]float32) StringList) StringList {
	if m.IsEmpty() {
		return NilStringList
	} else {
		acc := NilStringList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrList) FlatMapInt(f func([]float32) IntList) IntList {
	if m.IsEmpty() {
		return NilIntList
	} else {
		acc := NilIntList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrList) FlatMapInt8(f func([]float32) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8List
	} else {
		acc := NilInt8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrList) FlatMapInt16(f func([]float32) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16List
	} else {
		acc := NilInt16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrList) FlatMapInt32(f func([]float32) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32List
	} else {
		acc := NilInt32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrList) FlatMapInt64(f func([]float32) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64List
	} else {
		acc := NilInt64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrList) FlatMapUint(f func([]float32) UintList) UintList {
	if m.IsEmpty() {
		return NilUintList
	} else {
		acc := NilUintList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrList) FlatMapUint8(f func([]float32) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8List
	} else {
		acc := NilUint8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrList) FlatMapUint16(f func([]float32) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16List
	} else {
		acc := NilUint16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrList) FlatMapUint32(f func([]float32) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32List
	} else {
		acc := NilUint32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrList) FlatMapUint64(f func([]float32) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64List
	} else {
		acc := NilUint64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrList) FlatMapUintptr(f func([]float32) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptrList
	} else {
		acc := NilUintptrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrList) FlatMapByte(f func([]float32) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByteList
	} else {
		acc := NilByteList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrList) FlatMapRune(f func([]float32) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRuneList
	} else {
		acc := NilRuneList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrList) FlatMapFloat32(f func([]float32) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32List
	} else {
		acc := NilFloat32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrList) FlatMapFloat64(f func([]float32) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64List
	} else {
		acc := NilFloat64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrList) FlatMapComplex64(f func([]float32) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64List
	} else {
		acc := NilComplex64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrList) FlatMapComplex128(f func([]float32) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128List
	} else {
		acc := NilComplex128List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrList) FlatMapAny(f func([]float32) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAnyList
	} else {
		acc := NilAnyList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrList) FlatMapBool(f func([]float64) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBoolList
	} else {
		acc := NilBoolList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrList) FlatMapString(f func([]float64) StringList) StringList {
	if m.IsEmpty() {
		return NilStringList
	} else {
		acc := NilStringList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrList) FlatMapInt(f func([]float64) IntList) IntList {
	if m.IsEmpty() {
		return NilIntList
	} else {
		acc := NilIntList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrList) FlatMapInt8(f func([]float64) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8List
	} else {
		acc := NilInt8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrList) FlatMapInt16(f func([]float64) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16List
	} else {
		acc := NilInt16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrList) FlatMapInt32(f func([]float64) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32List
	} else {
		acc := NilInt32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrList) FlatMapInt64(f func([]float64) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64List
	} else {
		acc := NilInt64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrList) FlatMapUint(f func([]float64) UintList) UintList {
	if m.IsEmpty() {
		return NilUintList
	} else {
		acc := NilUintList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrList) FlatMapUint8(f func([]float64) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8List
	} else {
		acc := NilUint8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrList) FlatMapUint16(f func([]float64) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16List
	} else {
		acc := NilUint16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrList) FlatMapUint32(f func([]float64) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32List
	} else {
		acc := NilUint32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrList) FlatMapUint64(f func([]float64) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64List
	} else {
		acc := NilUint64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrList) FlatMapUintptr(f func([]float64) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptrList
	} else {
		acc := NilUintptrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrList) FlatMapByte(f func([]float64) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByteList
	} else {
		acc := NilByteList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrList) FlatMapRune(f func([]float64) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRuneList
	} else {
		acc := NilRuneList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrList) FlatMapFloat32(f func([]float64) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32List
	} else {
		acc := NilFloat32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrList) FlatMapFloat64(f func([]float64) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64List
	} else {
		acc := NilFloat64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrList) FlatMapComplex64(f func([]float64) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64List
	} else {
		acc := NilComplex64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrList) FlatMapComplex128(f func([]float64) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128List
	} else {
		acc := NilComplex128List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrList) FlatMapAny(f func([]float64) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAnyList
	} else {
		acc := NilAnyList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrList) FlatMapBool(f func([]complex64) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBoolList
	} else {
		acc := NilBoolList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrList) FlatMapString(f func([]complex64) StringList) StringList {
	if m.IsEmpty() {
		return NilStringList
	} else {
		acc := NilStringList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrList) FlatMapInt(f func([]complex64) IntList) IntList {
	if m.IsEmpty() {
		return NilIntList
	} else {
		acc := NilIntList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrList) FlatMapInt8(f func([]complex64) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8List
	} else {
		acc := NilInt8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrList) FlatMapInt16(f func([]complex64) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16List
	} else {
		acc := NilInt16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrList) FlatMapInt32(f func([]complex64) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32List
	} else {
		acc := NilInt32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrList) FlatMapInt64(f func([]complex64) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64List
	} else {
		acc := NilInt64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrList) FlatMapUint(f func([]complex64) UintList) UintList {
	if m.IsEmpty() {
		return NilUintList
	} else {
		acc := NilUintList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrList) FlatMapUint8(f func([]complex64) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8List
	} else {
		acc := NilUint8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrList) FlatMapUint16(f func([]complex64) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16List
	} else {
		acc := NilUint16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrList) FlatMapUint32(f func([]complex64) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32List
	} else {
		acc := NilUint32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrList) FlatMapUint64(f func([]complex64) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64List
	} else {
		acc := NilUint64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrList) FlatMapUintptr(f func([]complex64) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptrList
	} else {
		acc := NilUintptrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrList) FlatMapByte(f func([]complex64) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByteList
	} else {
		acc := NilByteList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrList) FlatMapRune(f func([]complex64) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRuneList
	} else {
		acc := NilRuneList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrList) FlatMapFloat32(f func([]complex64) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32List
	} else {
		acc := NilFloat32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrList) FlatMapFloat64(f func([]complex64) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64List
	} else {
		acc := NilFloat64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrList) FlatMapComplex64(f func([]complex64) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64List
	} else {
		acc := NilComplex64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrList) FlatMapComplex128(f func([]complex64) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128List
	} else {
		acc := NilComplex128List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrList) FlatMapAny(f func([]complex64) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAnyList
	} else {
		acc := NilAnyList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrList) FlatMapBool(f func([]complex128) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBoolList
	} else {
		acc := NilBoolList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrList) FlatMapString(f func([]complex128) StringList) StringList {
	if m.IsEmpty() {
		return NilStringList
	} else {
		acc := NilStringList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrList) FlatMapInt(f func([]complex128) IntList) IntList {
	if m.IsEmpty() {
		return NilIntList
	} else {
		acc := NilIntList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrList) FlatMapInt8(f func([]complex128) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8List
	} else {
		acc := NilInt8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrList) FlatMapInt16(f func([]complex128) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16List
	} else {
		acc := NilInt16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrList) FlatMapInt32(f func([]complex128) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32List
	} else {
		acc := NilInt32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrList) FlatMapInt64(f func([]complex128) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64List
	} else {
		acc := NilInt64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrList) FlatMapUint(f func([]complex128) UintList) UintList {
	if m.IsEmpty() {
		return NilUintList
	} else {
		acc := NilUintList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrList) FlatMapUint8(f func([]complex128) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8List
	} else {
		acc := NilUint8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrList) FlatMapUint16(f func([]complex128) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16List
	} else {
		acc := NilUint16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrList) FlatMapUint32(f func([]complex128) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32List
	} else {
		acc := NilUint32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrList) FlatMapUint64(f func([]complex128) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64List
	} else {
		acc := NilUint64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrList) FlatMapUintptr(f func([]complex128) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptrList
	} else {
		acc := NilUintptrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrList) FlatMapByte(f func([]complex128) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByteList
	} else {
		acc := NilByteList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrList) FlatMapRune(f func([]complex128) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRuneList
	} else {
		acc := NilRuneList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrList) FlatMapFloat32(f func([]complex128) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32List
	} else {
		acc := NilFloat32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrList) FlatMapFloat64(f func([]complex128) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64List
	} else {
		acc := NilFloat64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrList) FlatMapComplex64(f func([]complex128) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64List
	} else {
		acc := NilComplex64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrList) FlatMapComplex128(f func([]complex128) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128List
	} else {
		acc := NilComplex128List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrList) FlatMapAny(f func([]complex128) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAnyList
	} else {
		acc := NilAnyList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrList) FlatMapBool(f func([]Any) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBoolList
	} else {
		acc := NilBoolList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrList) FlatMapString(f func([]Any) StringList) StringList {
	if m.IsEmpty() {
		return NilStringList
	} else {
		acc := NilStringList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrList) FlatMapInt(f func([]Any) IntList) IntList {
	if m.IsEmpty() {
		return NilIntList
	} else {
		acc := NilIntList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrList) FlatMapInt8(f func([]Any) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8List
	} else {
		acc := NilInt8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrList) FlatMapInt16(f func([]Any) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16List
	} else {
		acc := NilInt16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrList) FlatMapInt32(f func([]Any) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32List
	} else {
		acc := NilInt32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrList) FlatMapInt64(f func([]Any) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64List
	} else {
		acc := NilInt64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrList) FlatMapUint(f func([]Any) UintList) UintList {
	if m.IsEmpty() {
		return NilUintList
	} else {
		acc := NilUintList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrList) FlatMapUint8(f func([]Any) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8List
	} else {
		acc := NilUint8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrList) FlatMapUint16(f func([]Any) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16List
	} else {
		acc := NilUint16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrList) FlatMapUint32(f func([]Any) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32List
	} else {
		acc := NilUint32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrList) FlatMapUint64(f func([]Any) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64List
	} else {
		acc := NilUint64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrList) FlatMapUintptr(f func([]Any) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptrList
	} else {
		acc := NilUintptrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrList) FlatMapByte(f func([]Any) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByteList
	} else {
		acc := NilByteList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrList) FlatMapRune(f func([]Any) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRuneList
	} else {
		acc := NilRuneList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrList) FlatMapFloat32(f func([]Any) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32List
	} else {
		acc := NilFloat32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrList) FlatMapFloat64(f func([]Any) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64List
	} else {
		acc := NilFloat64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrList) FlatMapComplex64(f func([]Any) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64List
	} else {
		acc := NilComplex64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrList) FlatMapComplex128(f func([]Any) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128List
	} else {
		acc := NilComplex128List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrList) FlatMapAny(f func([]Any) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAnyList
	} else {
		acc := NilAnyList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListList) FlatMapBool(f func(BoolList) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBoolList
	} else {
		acc := NilBoolList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListList) FlatMapString(f func(BoolList) StringList) StringList {
	if m.IsEmpty() {
		return NilStringList
	} else {
		acc := NilStringList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListList) FlatMapInt(f func(BoolList) IntList) IntList {
	if m.IsEmpty() {
		return NilIntList
	} else {
		acc := NilIntList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListList) FlatMapInt8(f func(BoolList) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8List
	} else {
		acc := NilInt8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListList) FlatMapInt16(f func(BoolList) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16List
	} else {
		acc := NilInt16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListList) FlatMapInt32(f func(BoolList) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32List
	} else {
		acc := NilInt32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListList) FlatMapInt64(f func(BoolList) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64List
	} else {
		acc := NilInt64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListList) FlatMapUint(f func(BoolList) UintList) UintList {
	if m.IsEmpty() {
		return NilUintList
	} else {
		acc := NilUintList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListList) FlatMapUint8(f func(BoolList) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8List
	} else {
		acc := NilUint8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListList) FlatMapUint16(f func(BoolList) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16List
	} else {
		acc := NilUint16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListList) FlatMapUint32(f func(BoolList) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32List
	} else {
		acc := NilUint32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListList) FlatMapUint64(f func(BoolList) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64List
	} else {
		acc := NilUint64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListList) FlatMapUintptr(f func(BoolList) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptrList
	} else {
		acc := NilUintptrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListList) FlatMapByte(f func(BoolList) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByteList
	} else {
		acc := NilByteList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListList) FlatMapRune(f func(BoolList) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRuneList
	} else {
		acc := NilRuneList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListList) FlatMapFloat32(f func(BoolList) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32List
	} else {
		acc := NilFloat32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListList) FlatMapFloat64(f func(BoolList) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64List
	} else {
		acc := NilFloat64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListList) FlatMapComplex64(f func(BoolList) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64List
	} else {
		acc := NilComplex64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListList) FlatMapComplex128(f func(BoolList) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128List
	} else {
		acc := NilComplex128List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListList) FlatMapAny(f func(BoolList) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAnyList
	} else {
		acc := NilAnyList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListList) FlatMapBool(f func(StringList) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBoolList
	} else {
		acc := NilBoolList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListList) FlatMapString(f func(StringList) StringList) StringList {
	if m.IsEmpty() {
		return NilStringList
	} else {
		acc := NilStringList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListList) FlatMapInt(f func(StringList) IntList) IntList {
	if m.IsEmpty() {
		return NilIntList
	} else {
		acc := NilIntList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListList) FlatMapInt8(f func(StringList) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8List
	} else {
		acc := NilInt8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListList) FlatMapInt16(f func(StringList) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16List
	} else {
		acc := NilInt16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListList) FlatMapInt32(f func(StringList) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32List
	} else {
		acc := NilInt32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListList) FlatMapInt64(f func(StringList) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64List
	} else {
		acc := NilInt64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListList) FlatMapUint(f func(StringList) UintList) UintList {
	if m.IsEmpty() {
		return NilUintList
	} else {
		acc := NilUintList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListList) FlatMapUint8(f func(StringList) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8List
	} else {
		acc := NilUint8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListList) FlatMapUint16(f func(StringList) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16List
	} else {
		acc := NilUint16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListList) FlatMapUint32(f func(StringList) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32List
	} else {
		acc := NilUint32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListList) FlatMapUint64(f func(StringList) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64List
	} else {
		acc := NilUint64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListList) FlatMapUintptr(f func(StringList) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptrList
	} else {
		acc := NilUintptrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListList) FlatMapByte(f func(StringList) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByteList
	} else {
		acc := NilByteList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListList) FlatMapRune(f func(StringList) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRuneList
	} else {
		acc := NilRuneList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListList) FlatMapFloat32(f func(StringList) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32List
	} else {
		acc := NilFloat32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListList) FlatMapFloat64(f func(StringList) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64List
	} else {
		acc := NilFloat64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListList) FlatMapComplex64(f func(StringList) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64List
	} else {
		acc := NilComplex64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListList) FlatMapComplex128(f func(StringList) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128List
	} else {
		acc := NilComplex128List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListList) FlatMapAny(f func(StringList) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAnyList
	} else {
		acc := NilAnyList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListList) FlatMapBool(f func(IntList) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBoolList
	} else {
		acc := NilBoolList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListList) FlatMapString(f func(IntList) StringList) StringList {
	if m.IsEmpty() {
		return NilStringList
	} else {
		acc := NilStringList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListList) FlatMapInt(f func(IntList) IntList) IntList {
	if m.IsEmpty() {
		return NilIntList
	} else {
		acc := NilIntList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListList) FlatMapInt8(f func(IntList) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8List
	} else {
		acc := NilInt8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListList) FlatMapInt16(f func(IntList) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16List
	} else {
		acc := NilInt16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListList) FlatMapInt32(f func(IntList) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32List
	} else {
		acc := NilInt32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListList) FlatMapInt64(f func(IntList) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64List
	} else {
		acc := NilInt64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListList) FlatMapUint(f func(IntList) UintList) UintList {
	if m.IsEmpty() {
		return NilUintList
	} else {
		acc := NilUintList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListList) FlatMapUint8(f func(IntList) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8List
	} else {
		acc := NilUint8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListList) FlatMapUint16(f func(IntList) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16List
	} else {
		acc := NilUint16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListList) FlatMapUint32(f func(IntList) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32List
	} else {
		acc := NilUint32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListList) FlatMapUint64(f func(IntList) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64List
	} else {
		acc := NilUint64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListList) FlatMapUintptr(f func(IntList) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptrList
	} else {
		acc := NilUintptrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListList) FlatMapByte(f func(IntList) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByteList
	} else {
		acc := NilByteList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListList) FlatMapRune(f func(IntList) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRuneList
	} else {
		acc := NilRuneList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListList) FlatMapFloat32(f func(IntList) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32List
	} else {
		acc := NilFloat32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListList) FlatMapFloat64(f func(IntList) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64List
	} else {
		acc := NilFloat64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListList) FlatMapComplex64(f func(IntList) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64List
	} else {
		acc := NilComplex64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListList) FlatMapComplex128(f func(IntList) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128List
	} else {
		acc := NilComplex128List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListList) FlatMapAny(f func(IntList) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAnyList
	} else {
		acc := NilAnyList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ListList) FlatMapBool(f func(Int8List) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBoolList
	} else {
		acc := NilBoolList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ListList) FlatMapString(f func(Int8List) StringList) StringList {
	if m.IsEmpty() {
		return NilStringList
	} else {
		acc := NilStringList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ListList) FlatMapInt(f func(Int8List) IntList) IntList {
	if m.IsEmpty() {
		return NilIntList
	} else {
		acc := NilIntList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ListList) FlatMapInt8(f func(Int8List) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8List
	} else {
		acc := NilInt8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ListList) FlatMapInt16(f func(Int8List) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16List
	} else {
		acc := NilInt16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ListList) FlatMapInt32(f func(Int8List) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32List
	} else {
		acc := NilInt32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ListList) FlatMapInt64(f func(Int8List) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64List
	} else {
		acc := NilInt64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ListList) FlatMapUint(f func(Int8List) UintList) UintList {
	if m.IsEmpty() {
		return NilUintList
	} else {
		acc := NilUintList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ListList) FlatMapUint8(f func(Int8List) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8List
	} else {
		acc := NilUint8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ListList) FlatMapUint16(f func(Int8List) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16List
	} else {
		acc := NilUint16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ListList) FlatMapUint32(f func(Int8List) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32List
	} else {
		acc := NilUint32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ListList) FlatMapUint64(f func(Int8List) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64List
	} else {
		acc := NilUint64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ListList) FlatMapUintptr(f func(Int8List) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptrList
	} else {
		acc := NilUintptrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ListList) FlatMapByte(f func(Int8List) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByteList
	} else {
		acc := NilByteList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ListList) FlatMapRune(f func(Int8List) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRuneList
	} else {
		acc := NilRuneList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ListList) FlatMapFloat32(f func(Int8List) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32List
	} else {
		acc := NilFloat32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ListList) FlatMapFloat64(f func(Int8List) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64List
	} else {
		acc := NilFloat64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ListList) FlatMapComplex64(f func(Int8List) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64List
	} else {
		acc := NilComplex64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ListList) FlatMapComplex128(f func(Int8List) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128List
	} else {
		acc := NilComplex128List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ListList) FlatMapAny(f func(Int8List) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAnyList
	} else {
		acc := NilAnyList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ListList) FlatMapBool(f func(Int16List) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBoolList
	} else {
		acc := NilBoolList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ListList) FlatMapString(f func(Int16List) StringList) StringList {
	if m.IsEmpty() {
		return NilStringList
	} else {
		acc := NilStringList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ListList) FlatMapInt(f func(Int16List) IntList) IntList {
	if m.IsEmpty() {
		return NilIntList
	} else {
		acc := NilIntList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ListList) FlatMapInt8(f func(Int16List) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8List
	} else {
		acc := NilInt8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ListList) FlatMapInt16(f func(Int16List) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16List
	} else {
		acc := NilInt16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ListList) FlatMapInt32(f func(Int16List) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32List
	} else {
		acc := NilInt32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ListList) FlatMapInt64(f func(Int16List) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64List
	} else {
		acc := NilInt64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ListList) FlatMapUint(f func(Int16List) UintList) UintList {
	if m.IsEmpty() {
		return NilUintList
	} else {
		acc := NilUintList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ListList) FlatMapUint8(f func(Int16List) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8List
	} else {
		acc := NilUint8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ListList) FlatMapUint16(f func(Int16List) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16List
	} else {
		acc := NilUint16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ListList) FlatMapUint32(f func(Int16List) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32List
	} else {
		acc := NilUint32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ListList) FlatMapUint64(f func(Int16List) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64List
	} else {
		acc := NilUint64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ListList) FlatMapUintptr(f func(Int16List) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptrList
	} else {
		acc := NilUintptrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ListList) FlatMapByte(f func(Int16List) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByteList
	} else {
		acc := NilByteList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ListList) FlatMapRune(f func(Int16List) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRuneList
	} else {
		acc := NilRuneList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ListList) FlatMapFloat32(f func(Int16List) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32List
	} else {
		acc := NilFloat32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ListList) FlatMapFloat64(f func(Int16List) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64List
	} else {
		acc := NilFloat64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ListList) FlatMapComplex64(f func(Int16List) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64List
	} else {
		acc := NilComplex64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ListList) FlatMapComplex128(f func(Int16List) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128List
	} else {
		acc := NilComplex128List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ListList) FlatMapAny(f func(Int16List) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAnyList
	} else {
		acc := NilAnyList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListList) FlatMapBool(f func(Int32List) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBoolList
	} else {
		acc := NilBoolList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListList) FlatMapString(f func(Int32List) StringList) StringList {
	if m.IsEmpty() {
		return NilStringList
	} else {
		acc := NilStringList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListList) FlatMapInt(f func(Int32List) IntList) IntList {
	if m.IsEmpty() {
		return NilIntList
	} else {
		acc := NilIntList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListList) FlatMapInt8(f func(Int32List) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8List
	} else {
		acc := NilInt8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListList) FlatMapInt16(f func(Int32List) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16List
	} else {
		acc := NilInt16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListList) FlatMapInt32(f func(Int32List) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32List
	} else {
		acc := NilInt32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListList) FlatMapInt64(f func(Int32List) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64List
	} else {
		acc := NilInt64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListList) FlatMapUint(f func(Int32List) UintList) UintList {
	if m.IsEmpty() {
		return NilUintList
	} else {
		acc := NilUintList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListList) FlatMapUint8(f func(Int32List) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8List
	} else {
		acc := NilUint8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListList) FlatMapUint16(f func(Int32List) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16List
	} else {
		acc := NilUint16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListList) FlatMapUint32(f func(Int32List) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32List
	} else {
		acc := NilUint32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListList) FlatMapUint64(f func(Int32List) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64List
	} else {
		acc := NilUint64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListList) FlatMapUintptr(f func(Int32List) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptrList
	} else {
		acc := NilUintptrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListList) FlatMapByte(f func(Int32List) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByteList
	} else {
		acc := NilByteList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListList) FlatMapRune(f func(Int32List) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRuneList
	} else {
		acc := NilRuneList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListList) FlatMapFloat32(f func(Int32List) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32List
	} else {
		acc := NilFloat32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListList) FlatMapFloat64(f func(Int32List) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64List
	} else {
		acc := NilFloat64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListList) FlatMapComplex64(f func(Int32List) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64List
	} else {
		acc := NilComplex64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListList) FlatMapComplex128(f func(Int32List) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128List
	} else {
		acc := NilComplex128List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListList) FlatMapAny(f func(Int32List) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAnyList
	} else {
		acc := NilAnyList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListList) FlatMapBool(f func(Int64List) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBoolList
	} else {
		acc := NilBoolList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListList) FlatMapString(f func(Int64List) StringList) StringList {
	if m.IsEmpty() {
		return NilStringList
	} else {
		acc := NilStringList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListList) FlatMapInt(f func(Int64List) IntList) IntList {
	if m.IsEmpty() {
		return NilIntList
	} else {
		acc := NilIntList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListList) FlatMapInt8(f func(Int64List) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8List
	} else {
		acc := NilInt8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListList) FlatMapInt16(f func(Int64List) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16List
	} else {
		acc := NilInt16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListList) FlatMapInt32(f func(Int64List) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32List
	} else {
		acc := NilInt32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListList) FlatMapInt64(f func(Int64List) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64List
	} else {
		acc := NilInt64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListList) FlatMapUint(f func(Int64List) UintList) UintList {
	if m.IsEmpty() {
		return NilUintList
	} else {
		acc := NilUintList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListList) FlatMapUint8(f func(Int64List) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8List
	} else {
		acc := NilUint8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListList) FlatMapUint16(f func(Int64List) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16List
	} else {
		acc := NilUint16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListList) FlatMapUint32(f func(Int64List) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32List
	} else {
		acc := NilUint32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListList) FlatMapUint64(f func(Int64List) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64List
	} else {
		acc := NilUint64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListList) FlatMapUintptr(f func(Int64List) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptrList
	} else {
		acc := NilUintptrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListList) FlatMapByte(f func(Int64List) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByteList
	} else {
		acc := NilByteList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListList) FlatMapRune(f func(Int64List) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRuneList
	} else {
		acc := NilRuneList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListList) FlatMapFloat32(f func(Int64List) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32List
	} else {
		acc := NilFloat32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListList) FlatMapFloat64(f func(Int64List) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64List
	} else {
		acc := NilFloat64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListList) FlatMapComplex64(f func(Int64List) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64List
	} else {
		acc := NilComplex64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListList) FlatMapComplex128(f func(Int64List) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128List
	} else {
		acc := NilComplex128List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListList) FlatMapAny(f func(Int64List) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAnyList
	} else {
		acc := NilAnyList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListList) FlatMapBool(f func(UintList) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBoolList
	} else {
		acc := NilBoolList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListList) FlatMapString(f func(UintList) StringList) StringList {
	if m.IsEmpty() {
		return NilStringList
	} else {
		acc := NilStringList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListList) FlatMapInt(f func(UintList) IntList) IntList {
	if m.IsEmpty() {
		return NilIntList
	} else {
		acc := NilIntList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListList) FlatMapInt8(f func(UintList) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8List
	} else {
		acc := NilInt8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListList) FlatMapInt16(f func(UintList) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16List
	} else {
		acc := NilInt16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListList) FlatMapInt32(f func(UintList) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32List
	} else {
		acc := NilInt32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListList) FlatMapInt64(f func(UintList) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64List
	} else {
		acc := NilInt64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListList) FlatMapUint(f func(UintList) UintList) UintList {
	if m.IsEmpty() {
		return NilUintList
	} else {
		acc := NilUintList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListList) FlatMapUint8(f func(UintList) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8List
	} else {
		acc := NilUint8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListList) FlatMapUint16(f func(UintList) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16List
	} else {
		acc := NilUint16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListList) FlatMapUint32(f func(UintList) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32List
	} else {
		acc := NilUint32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListList) FlatMapUint64(f func(UintList) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64List
	} else {
		acc := NilUint64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListList) FlatMapUintptr(f func(UintList) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptrList
	} else {
		acc := NilUintptrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListList) FlatMapByte(f func(UintList) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByteList
	} else {
		acc := NilByteList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListList) FlatMapRune(f func(UintList) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRuneList
	} else {
		acc := NilRuneList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListList) FlatMapFloat32(f func(UintList) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32List
	} else {
		acc := NilFloat32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListList) FlatMapFloat64(f func(UintList) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64List
	} else {
		acc := NilFloat64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListList) FlatMapComplex64(f func(UintList) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64List
	} else {
		acc := NilComplex64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListList) FlatMapComplex128(f func(UintList) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128List
	} else {
		acc := NilComplex128List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListList) FlatMapAny(f func(UintList) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAnyList
	} else {
		acc := NilAnyList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ListList) FlatMapBool(f func(Uint8List) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBoolList
	} else {
		acc := NilBoolList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ListList) FlatMapString(f func(Uint8List) StringList) StringList {
	if m.IsEmpty() {
		return NilStringList
	} else {
		acc := NilStringList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ListList) FlatMapInt(f func(Uint8List) IntList) IntList {
	if m.IsEmpty() {
		return NilIntList
	} else {
		acc := NilIntList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ListList) FlatMapInt8(f func(Uint8List) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8List
	} else {
		acc := NilInt8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ListList) FlatMapInt16(f func(Uint8List) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16List
	} else {
		acc := NilInt16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ListList) FlatMapInt32(f func(Uint8List) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32List
	} else {
		acc := NilInt32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ListList) FlatMapInt64(f func(Uint8List) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64List
	} else {
		acc := NilInt64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ListList) FlatMapUint(f func(Uint8List) UintList) UintList {
	if m.IsEmpty() {
		return NilUintList
	} else {
		acc := NilUintList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ListList) FlatMapUint8(f func(Uint8List) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8List
	} else {
		acc := NilUint8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ListList) FlatMapUint16(f func(Uint8List) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16List
	} else {
		acc := NilUint16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ListList) FlatMapUint32(f func(Uint8List) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32List
	} else {
		acc := NilUint32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ListList) FlatMapUint64(f func(Uint8List) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64List
	} else {
		acc := NilUint64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ListList) FlatMapUintptr(f func(Uint8List) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptrList
	} else {
		acc := NilUintptrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ListList) FlatMapByte(f func(Uint8List) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByteList
	} else {
		acc := NilByteList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ListList) FlatMapRune(f func(Uint8List) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRuneList
	} else {
		acc := NilRuneList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ListList) FlatMapFloat32(f func(Uint8List) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32List
	} else {
		acc := NilFloat32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ListList) FlatMapFloat64(f func(Uint8List) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64List
	} else {
		acc := NilFloat64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ListList) FlatMapComplex64(f func(Uint8List) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64List
	} else {
		acc := NilComplex64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ListList) FlatMapComplex128(f func(Uint8List) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128List
	} else {
		acc := NilComplex128List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ListList) FlatMapAny(f func(Uint8List) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAnyList
	} else {
		acc := NilAnyList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ListList) FlatMapBool(f func(Uint16List) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBoolList
	} else {
		acc := NilBoolList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ListList) FlatMapString(f func(Uint16List) StringList) StringList {
	if m.IsEmpty() {
		return NilStringList
	} else {
		acc := NilStringList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ListList) FlatMapInt(f func(Uint16List) IntList) IntList {
	if m.IsEmpty() {
		return NilIntList
	} else {
		acc := NilIntList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ListList) FlatMapInt8(f func(Uint16List) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8List
	} else {
		acc := NilInt8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ListList) FlatMapInt16(f func(Uint16List) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16List
	} else {
		acc := NilInt16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ListList) FlatMapInt32(f func(Uint16List) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32List
	} else {
		acc := NilInt32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ListList) FlatMapInt64(f func(Uint16List) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64List
	} else {
		acc := NilInt64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ListList) FlatMapUint(f func(Uint16List) UintList) UintList {
	if m.IsEmpty() {
		return NilUintList
	} else {
		acc := NilUintList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ListList) FlatMapUint8(f func(Uint16List) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8List
	} else {
		acc := NilUint8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ListList) FlatMapUint16(f func(Uint16List) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16List
	} else {
		acc := NilUint16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ListList) FlatMapUint32(f func(Uint16List) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32List
	} else {
		acc := NilUint32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ListList) FlatMapUint64(f func(Uint16List) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64List
	} else {
		acc := NilUint64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ListList) FlatMapUintptr(f func(Uint16List) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptrList
	} else {
		acc := NilUintptrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ListList) FlatMapByte(f func(Uint16List) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByteList
	} else {
		acc := NilByteList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ListList) FlatMapRune(f func(Uint16List) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRuneList
	} else {
		acc := NilRuneList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ListList) FlatMapFloat32(f func(Uint16List) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32List
	} else {
		acc := NilFloat32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ListList) FlatMapFloat64(f func(Uint16List) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64List
	} else {
		acc := NilFloat64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ListList) FlatMapComplex64(f func(Uint16List) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64List
	} else {
		acc := NilComplex64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ListList) FlatMapComplex128(f func(Uint16List) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128List
	} else {
		acc := NilComplex128List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ListList) FlatMapAny(f func(Uint16List) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAnyList
	} else {
		acc := NilAnyList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ListList) FlatMapBool(f func(Uint32List) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBoolList
	} else {
		acc := NilBoolList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ListList) FlatMapString(f func(Uint32List) StringList) StringList {
	if m.IsEmpty() {
		return NilStringList
	} else {
		acc := NilStringList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ListList) FlatMapInt(f func(Uint32List) IntList) IntList {
	if m.IsEmpty() {
		return NilIntList
	} else {
		acc := NilIntList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ListList) FlatMapInt8(f func(Uint32List) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8List
	} else {
		acc := NilInt8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ListList) FlatMapInt16(f func(Uint32List) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16List
	} else {
		acc := NilInt16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ListList) FlatMapInt32(f func(Uint32List) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32List
	} else {
		acc := NilInt32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ListList) FlatMapInt64(f func(Uint32List) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64List
	} else {
		acc := NilInt64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ListList) FlatMapUint(f func(Uint32List) UintList) UintList {
	if m.IsEmpty() {
		return NilUintList
	} else {
		acc := NilUintList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ListList) FlatMapUint8(f func(Uint32List) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8List
	} else {
		acc := NilUint8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ListList) FlatMapUint16(f func(Uint32List) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16List
	} else {
		acc := NilUint16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ListList) FlatMapUint32(f func(Uint32List) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32List
	} else {
		acc := NilUint32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ListList) FlatMapUint64(f func(Uint32List) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64List
	} else {
		acc := NilUint64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ListList) FlatMapUintptr(f func(Uint32List) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptrList
	} else {
		acc := NilUintptrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ListList) FlatMapByte(f func(Uint32List) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByteList
	} else {
		acc := NilByteList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ListList) FlatMapRune(f func(Uint32List) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRuneList
	} else {
		acc := NilRuneList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ListList) FlatMapFloat32(f func(Uint32List) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32List
	} else {
		acc := NilFloat32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ListList) FlatMapFloat64(f func(Uint32List) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64List
	} else {
		acc := NilFloat64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ListList) FlatMapComplex64(f func(Uint32List) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64List
	} else {
		acc := NilComplex64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ListList) FlatMapComplex128(f func(Uint32List) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128List
	} else {
		acc := NilComplex128List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ListList) FlatMapAny(f func(Uint32List) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAnyList
	} else {
		acc := NilAnyList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListList) FlatMapBool(f func(Uint64List) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBoolList
	} else {
		acc := NilBoolList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListList) FlatMapString(f func(Uint64List) StringList) StringList {
	if m.IsEmpty() {
		return NilStringList
	} else {
		acc := NilStringList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListList) FlatMapInt(f func(Uint64List) IntList) IntList {
	if m.IsEmpty() {
		return NilIntList
	} else {
		acc := NilIntList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListList) FlatMapInt8(f func(Uint64List) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8List
	} else {
		acc := NilInt8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListList) FlatMapInt16(f func(Uint64List) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16List
	} else {
		acc := NilInt16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListList) FlatMapInt32(f func(Uint64List) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32List
	} else {
		acc := NilInt32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListList) FlatMapInt64(f func(Uint64List) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64List
	} else {
		acc := NilInt64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListList) FlatMapUint(f func(Uint64List) UintList) UintList {
	if m.IsEmpty() {
		return NilUintList
	} else {
		acc := NilUintList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListList) FlatMapUint8(f func(Uint64List) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8List
	} else {
		acc := NilUint8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListList) FlatMapUint16(f func(Uint64List) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16List
	} else {
		acc := NilUint16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListList) FlatMapUint32(f func(Uint64List) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32List
	} else {
		acc := NilUint32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListList) FlatMapUint64(f func(Uint64List) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64List
	} else {
		acc := NilUint64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListList) FlatMapUintptr(f func(Uint64List) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptrList
	} else {
		acc := NilUintptrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListList) FlatMapByte(f func(Uint64List) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByteList
	} else {
		acc := NilByteList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListList) FlatMapRune(f func(Uint64List) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRuneList
	} else {
		acc := NilRuneList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListList) FlatMapFloat32(f func(Uint64List) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32List
	} else {
		acc := NilFloat32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListList) FlatMapFloat64(f func(Uint64List) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64List
	} else {
		acc := NilFloat64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListList) FlatMapComplex64(f func(Uint64List) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64List
	} else {
		acc := NilComplex64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListList) FlatMapComplex128(f func(Uint64List) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128List
	} else {
		acc := NilComplex128List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListList) FlatMapAny(f func(Uint64List) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAnyList
	} else {
		acc := NilAnyList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListList) FlatMapBool(f func(UintptrList) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBoolList
	} else {
		acc := NilBoolList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListList) FlatMapString(f func(UintptrList) StringList) StringList {
	if m.IsEmpty() {
		return NilStringList
	} else {
		acc := NilStringList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListList) FlatMapInt(f func(UintptrList) IntList) IntList {
	if m.IsEmpty() {
		return NilIntList
	} else {
		acc := NilIntList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListList) FlatMapInt8(f func(UintptrList) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8List
	} else {
		acc := NilInt8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListList) FlatMapInt16(f func(UintptrList) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16List
	} else {
		acc := NilInt16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListList) FlatMapInt32(f func(UintptrList) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32List
	} else {
		acc := NilInt32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListList) FlatMapInt64(f func(UintptrList) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64List
	} else {
		acc := NilInt64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListList) FlatMapUint(f func(UintptrList) UintList) UintList {
	if m.IsEmpty() {
		return NilUintList
	} else {
		acc := NilUintList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListList) FlatMapUint8(f func(UintptrList) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8List
	} else {
		acc := NilUint8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListList) FlatMapUint16(f func(UintptrList) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16List
	} else {
		acc := NilUint16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListList) FlatMapUint32(f func(UintptrList) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32List
	} else {
		acc := NilUint32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListList) FlatMapUint64(f func(UintptrList) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64List
	} else {
		acc := NilUint64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListList) FlatMapUintptr(f func(UintptrList) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptrList
	} else {
		acc := NilUintptrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListList) FlatMapByte(f func(UintptrList) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByteList
	} else {
		acc := NilByteList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListList) FlatMapRune(f func(UintptrList) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRuneList
	} else {
		acc := NilRuneList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListList) FlatMapFloat32(f func(UintptrList) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32List
	} else {
		acc := NilFloat32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListList) FlatMapFloat64(f func(UintptrList) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64List
	} else {
		acc := NilFloat64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListList) FlatMapComplex64(f func(UintptrList) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64List
	} else {
		acc := NilComplex64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListList) FlatMapComplex128(f func(UintptrList) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128List
	} else {
		acc := NilComplex128List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListList) FlatMapAny(f func(UintptrList) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAnyList
	} else {
		acc := NilAnyList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListList) FlatMapBool(f func(ByteList) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBoolList
	} else {
		acc := NilBoolList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListList) FlatMapString(f func(ByteList) StringList) StringList {
	if m.IsEmpty() {
		return NilStringList
	} else {
		acc := NilStringList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListList) FlatMapInt(f func(ByteList) IntList) IntList {
	if m.IsEmpty() {
		return NilIntList
	} else {
		acc := NilIntList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListList) FlatMapInt8(f func(ByteList) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8List
	} else {
		acc := NilInt8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListList) FlatMapInt16(f func(ByteList) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16List
	} else {
		acc := NilInt16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListList) FlatMapInt32(f func(ByteList) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32List
	} else {
		acc := NilInt32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListList) FlatMapInt64(f func(ByteList) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64List
	} else {
		acc := NilInt64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListList) FlatMapUint(f func(ByteList) UintList) UintList {
	if m.IsEmpty() {
		return NilUintList
	} else {
		acc := NilUintList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListList) FlatMapUint8(f func(ByteList) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8List
	} else {
		acc := NilUint8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListList) FlatMapUint16(f func(ByteList) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16List
	} else {
		acc := NilUint16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListList) FlatMapUint32(f func(ByteList) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32List
	} else {
		acc := NilUint32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListList) FlatMapUint64(f func(ByteList) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64List
	} else {
		acc := NilUint64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListList) FlatMapUintptr(f func(ByteList) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptrList
	} else {
		acc := NilUintptrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListList) FlatMapByte(f func(ByteList) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByteList
	} else {
		acc := NilByteList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListList) FlatMapRune(f func(ByteList) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRuneList
	} else {
		acc := NilRuneList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListList) FlatMapFloat32(f func(ByteList) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32List
	} else {
		acc := NilFloat32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListList) FlatMapFloat64(f func(ByteList) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64List
	} else {
		acc := NilFloat64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListList) FlatMapComplex64(f func(ByteList) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64List
	} else {
		acc := NilComplex64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListList) FlatMapComplex128(f func(ByteList) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128List
	} else {
		acc := NilComplex128List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListList) FlatMapAny(f func(ByteList) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAnyList
	} else {
		acc := NilAnyList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListList) FlatMapBool(f func(RuneList) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBoolList
	} else {
		acc := NilBoolList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListList) FlatMapString(f func(RuneList) StringList) StringList {
	if m.IsEmpty() {
		return NilStringList
	} else {
		acc := NilStringList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListList) FlatMapInt(f func(RuneList) IntList) IntList {
	if m.IsEmpty() {
		return NilIntList
	} else {
		acc := NilIntList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListList) FlatMapInt8(f func(RuneList) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8List
	} else {
		acc := NilInt8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListList) FlatMapInt16(f func(RuneList) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16List
	} else {
		acc := NilInt16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListList) FlatMapInt32(f func(RuneList) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32List
	} else {
		acc := NilInt32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListList) FlatMapInt64(f func(RuneList) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64List
	} else {
		acc := NilInt64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListList) FlatMapUint(f func(RuneList) UintList) UintList {
	if m.IsEmpty() {
		return NilUintList
	} else {
		acc := NilUintList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListList) FlatMapUint8(f func(RuneList) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8List
	} else {
		acc := NilUint8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListList) FlatMapUint16(f func(RuneList) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16List
	} else {
		acc := NilUint16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListList) FlatMapUint32(f func(RuneList) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32List
	} else {
		acc := NilUint32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListList) FlatMapUint64(f func(RuneList) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64List
	} else {
		acc := NilUint64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListList) FlatMapUintptr(f func(RuneList) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptrList
	} else {
		acc := NilUintptrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListList) FlatMapByte(f func(RuneList) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByteList
	} else {
		acc := NilByteList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListList) FlatMapRune(f func(RuneList) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRuneList
	} else {
		acc := NilRuneList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListList) FlatMapFloat32(f func(RuneList) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32List
	} else {
		acc := NilFloat32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListList) FlatMapFloat64(f func(RuneList) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64List
	} else {
		acc := NilFloat64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListList) FlatMapComplex64(f func(RuneList) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64List
	} else {
		acc := NilComplex64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListList) FlatMapComplex128(f func(RuneList) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128List
	} else {
		acc := NilComplex128List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListList) FlatMapAny(f func(RuneList) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAnyList
	} else {
		acc := NilAnyList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListList) FlatMapBool(f func(Float32List) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBoolList
	} else {
		acc := NilBoolList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListList) FlatMapString(f func(Float32List) StringList) StringList {
	if m.IsEmpty() {
		return NilStringList
	} else {
		acc := NilStringList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListList) FlatMapInt(f func(Float32List) IntList) IntList {
	if m.IsEmpty() {
		return NilIntList
	} else {
		acc := NilIntList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListList) FlatMapInt8(f func(Float32List) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8List
	} else {
		acc := NilInt8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListList) FlatMapInt16(f func(Float32List) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16List
	} else {
		acc := NilInt16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListList) FlatMapInt32(f func(Float32List) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32List
	} else {
		acc := NilInt32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListList) FlatMapInt64(f func(Float32List) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64List
	} else {
		acc := NilInt64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListList) FlatMapUint(f func(Float32List) UintList) UintList {
	if m.IsEmpty() {
		return NilUintList
	} else {
		acc := NilUintList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListList) FlatMapUint8(f func(Float32List) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8List
	} else {
		acc := NilUint8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListList) FlatMapUint16(f func(Float32List) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16List
	} else {
		acc := NilUint16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListList) FlatMapUint32(f func(Float32List) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32List
	} else {
		acc := NilUint32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListList) FlatMapUint64(f func(Float32List) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64List
	} else {
		acc := NilUint64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListList) FlatMapUintptr(f func(Float32List) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptrList
	} else {
		acc := NilUintptrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListList) FlatMapByte(f func(Float32List) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByteList
	} else {
		acc := NilByteList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListList) FlatMapRune(f func(Float32List) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRuneList
	} else {
		acc := NilRuneList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListList) FlatMapFloat32(f func(Float32List) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32List
	} else {
		acc := NilFloat32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListList) FlatMapFloat64(f func(Float32List) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64List
	} else {
		acc := NilFloat64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListList) FlatMapComplex64(f func(Float32List) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64List
	} else {
		acc := NilComplex64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListList) FlatMapComplex128(f func(Float32List) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128List
	} else {
		acc := NilComplex128List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListList) FlatMapAny(f func(Float32List) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAnyList
	} else {
		acc := NilAnyList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListList) FlatMapBool(f func(Float64List) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBoolList
	} else {
		acc := NilBoolList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListList) FlatMapString(f func(Float64List) StringList) StringList {
	if m.IsEmpty() {
		return NilStringList
	} else {
		acc := NilStringList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListList) FlatMapInt(f func(Float64List) IntList) IntList {
	if m.IsEmpty() {
		return NilIntList
	} else {
		acc := NilIntList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListList) FlatMapInt8(f func(Float64List) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8List
	} else {
		acc := NilInt8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListList) FlatMapInt16(f func(Float64List) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16List
	} else {
		acc := NilInt16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListList) FlatMapInt32(f func(Float64List) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32List
	} else {
		acc := NilInt32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListList) FlatMapInt64(f func(Float64List) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64List
	} else {
		acc := NilInt64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListList) FlatMapUint(f func(Float64List) UintList) UintList {
	if m.IsEmpty() {
		return NilUintList
	} else {
		acc := NilUintList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListList) FlatMapUint8(f func(Float64List) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8List
	} else {
		acc := NilUint8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListList) FlatMapUint16(f func(Float64List) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16List
	} else {
		acc := NilUint16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListList) FlatMapUint32(f func(Float64List) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32List
	} else {
		acc := NilUint32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListList) FlatMapUint64(f func(Float64List) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64List
	} else {
		acc := NilUint64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListList) FlatMapUintptr(f func(Float64List) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptrList
	} else {
		acc := NilUintptrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListList) FlatMapByte(f func(Float64List) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByteList
	} else {
		acc := NilByteList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListList) FlatMapRune(f func(Float64List) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRuneList
	} else {
		acc := NilRuneList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListList) FlatMapFloat32(f func(Float64List) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32List
	} else {
		acc := NilFloat32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListList) FlatMapFloat64(f func(Float64List) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64List
	} else {
		acc := NilFloat64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListList) FlatMapComplex64(f func(Float64List) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64List
	} else {
		acc := NilComplex64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListList) FlatMapComplex128(f func(Float64List) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128List
	} else {
		acc := NilComplex128List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListList) FlatMapAny(f func(Float64List) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAnyList
	} else {
		acc := NilAnyList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ListList) FlatMapBool(f func(Complex64List) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBoolList
	} else {
		acc := NilBoolList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ListList) FlatMapString(f func(Complex64List) StringList) StringList {
	if m.IsEmpty() {
		return NilStringList
	} else {
		acc := NilStringList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ListList) FlatMapInt(f func(Complex64List) IntList) IntList {
	if m.IsEmpty() {
		return NilIntList
	} else {
		acc := NilIntList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ListList) FlatMapInt8(f func(Complex64List) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8List
	} else {
		acc := NilInt8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ListList) FlatMapInt16(f func(Complex64List) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16List
	} else {
		acc := NilInt16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ListList) FlatMapInt32(f func(Complex64List) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32List
	} else {
		acc := NilInt32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ListList) FlatMapInt64(f func(Complex64List) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64List
	} else {
		acc := NilInt64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ListList) FlatMapUint(f func(Complex64List) UintList) UintList {
	if m.IsEmpty() {
		return NilUintList
	} else {
		acc := NilUintList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ListList) FlatMapUint8(f func(Complex64List) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8List
	} else {
		acc := NilUint8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ListList) FlatMapUint16(f func(Complex64List) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16List
	} else {
		acc := NilUint16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ListList) FlatMapUint32(f func(Complex64List) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32List
	} else {
		acc := NilUint32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ListList) FlatMapUint64(f func(Complex64List) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64List
	} else {
		acc := NilUint64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ListList) FlatMapUintptr(f func(Complex64List) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptrList
	} else {
		acc := NilUintptrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ListList) FlatMapByte(f func(Complex64List) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByteList
	} else {
		acc := NilByteList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ListList) FlatMapRune(f func(Complex64List) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRuneList
	} else {
		acc := NilRuneList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ListList) FlatMapFloat32(f func(Complex64List) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32List
	} else {
		acc := NilFloat32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ListList) FlatMapFloat64(f func(Complex64List) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64List
	} else {
		acc := NilFloat64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ListList) FlatMapComplex64(f func(Complex64List) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64List
	} else {
		acc := NilComplex64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ListList) FlatMapComplex128(f func(Complex64List) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128List
	} else {
		acc := NilComplex128List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ListList) FlatMapAny(f func(Complex64List) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAnyList
	} else {
		acc := NilAnyList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ListList) FlatMapBool(f func(Complex128List) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBoolList
	} else {
		acc := NilBoolList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ListList) FlatMapString(f func(Complex128List) StringList) StringList {
	if m.IsEmpty() {
		return NilStringList
	} else {
		acc := NilStringList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ListList) FlatMapInt(f func(Complex128List) IntList) IntList {
	if m.IsEmpty() {
		return NilIntList
	} else {
		acc := NilIntList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ListList) FlatMapInt8(f func(Complex128List) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8List
	} else {
		acc := NilInt8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ListList) FlatMapInt16(f func(Complex128List) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16List
	} else {
		acc := NilInt16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ListList) FlatMapInt32(f func(Complex128List) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32List
	} else {
		acc := NilInt32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ListList) FlatMapInt64(f func(Complex128List) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64List
	} else {
		acc := NilInt64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ListList) FlatMapUint(f func(Complex128List) UintList) UintList {
	if m.IsEmpty() {
		return NilUintList
	} else {
		acc := NilUintList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ListList) FlatMapUint8(f func(Complex128List) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8List
	} else {
		acc := NilUint8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ListList) FlatMapUint16(f func(Complex128List) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16List
	} else {
		acc := NilUint16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ListList) FlatMapUint32(f func(Complex128List) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32List
	} else {
		acc := NilUint32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ListList) FlatMapUint64(f func(Complex128List) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64List
	} else {
		acc := NilUint64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ListList) FlatMapUintptr(f func(Complex128List) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptrList
	} else {
		acc := NilUintptrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ListList) FlatMapByte(f func(Complex128List) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByteList
	} else {
		acc := NilByteList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ListList) FlatMapRune(f func(Complex128List) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRuneList
	} else {
		acc := NilRuneList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ListList) FlatMapFloat32(f func(Complex128List) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32List
	} else {
		acc := NilFloat32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ListList) FlatMapFloat64(f func(Complex128List) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64List
	} else {
		acc := NilFloat64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ListList) FlatMapComplex64(f func(Complex128List) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64List
	} else {
		acc := NilComplex64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ListList) FlatMapComplex128(f func(Complex128List) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128List
	} else {
		acc := NilComplex128List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ListList) FlatMapAny(f func(Complex128List) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAnyList
	} else {
		acc := NilAnyList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListList) FlatMapBool(f func(AnyList) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBoolList
	} else {
		acc := NilBoolList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListList) FlatMapString(f func(AnyList) StringList) StringList {
	if m.IsEmpty() {
		return NilStringList
	} else {
		acc := NilStringList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListList) FlatMapInt(f func(AnyList) IntList) IntList {
	if m.IsEmpty() {
		return NilIntList
	} else {
		acc := NilIntList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListList) FlatMapInt8(f func(AnyList) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8List
	} else {
		acc := NilInt8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListList) FlatMapInt16(f func(AnyList) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16List
	} else {
		acc := NilInt16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListList) FlatMapInt32(f func(AnyList) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32List
	} else {
		acc := NilInt32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListList) FlatMapInt64(f func(AnyList) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64List
	} else {
		acc := NilInt64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListList) FlatMapUint(f func(AnyList) UintList) UintList {
	if m.IsEmpty() {
		return NilUintList
	} else {
		acc := NilUintList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListList) FlatMapUint8(f func(AnyList) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8List
	} else {
		acc := NilUint8List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListList) FlatMapUint16(f func(AnyList) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16List
	} else {
		acc := NilUint16List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListList) FlatMapUint32(f func(AnyList) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32List
	} else {
		acc := NilUint32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListList) FlatMapUint64(f func(AnyList) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64List
	} else {
		acc := NilUint64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListList) FlatMapUintptr(f func(AnyList) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptrList
	} else {
		acc := NilUintptrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListList) FlatMapByte(f func(AnyList) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByteList
	} else {
		acc := NilByteList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListList) FlatMapRune(f func(AnyList) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRuneList
	} else {
		acc := NilRuneList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListList) FlatMapFloat32(f func(AnyList) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32List
	} else {
		acc := NilFloat32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListList) FlatMapFloat64(f func(AnyList) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64List
	} else {
		acc := NilFloat64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListList) FlatMapComplex64(f func(AnyList) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64List
	} else {
		acc := NilComplex64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListList) FlatMapComplex128(f func(AnyList) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128List
	} else {
		acc := NilComplex128List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListList) FlatMapAny(f func(AnyList) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAnyList
	} else {
		acc := NilAnyList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
