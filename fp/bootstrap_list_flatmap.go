// bootstrap_list_flatmap.go
// DO NOT EDIT THIS FILE WAS GENERATED AUTOMATICALLY BY https://github.com/zx80live/gofp-bootstrap

package fp

func (m BoolList) FlatMapBoolList(f func(bool) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBoolList
	} else {
		acc := NilBoolList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolList) FlatMapAnyList(f func(bool) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAnyList
	} else {
		acc := NilAnyList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolList) FlatMapByteList(f func(bool) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByteList
	} else {
		acc := NilByteList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolList) FlatMapIntList(f func(bool) IntList) IntList {
	if m.IsEmpty() {
		return NilIntList
	} else {
		acc := NilIntList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolList) FlatMapInt32List(f func(bool) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32List
	} else {
		acc := NilInt32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolList) FlatMapInt64List(f func(bool) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64List
	} else {
		acc := NilInt64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolList) FlatMapUintList(f func(bool) UintList) UintList {
	if m.IsEmpty() {
		return NilUintList
	} else {
		acc := NilUintList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolList) FlatMapUint64List(f func(bool) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64List
	} else {
		acc := NilUint64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolList) FlatMapUintptrList(f func(bool) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptrList
	} else {
		acc := NilUintptrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolList) FlatMapFloat32List(f func(bool) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32List
	} else {
		acc := NilFloat32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolList) FlatMapFloat64List(f func(bool) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64List
	} else {
		acc := NilFloat64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolList) FlatMapRuneList(f func(bool) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRuneList
	} else {
		acc := NilRuneList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolList) FlatMapStringList(f func(bool) StringList) StringList {
	if m.IsEmpty() {
		return NilStringList
	} else {
		acc := NilStringList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolList) FlatMapBoolArrList(f func(bool) BoolArrList) BoolArrList {
	if m.IsEmpty() {
		return NilBoolArrList
	} else {
		acc := NilBoolArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolList) FlatMapAnyArrList(f func(bool) AnyArrList) AnyArrList {
	if m.IsEmpty() {
		return NilAnyArrList
	} else {
		acc := NilAnyArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolList) FlatMapByteArrList(f func(bool) ByteArrList) ByteArrList {
	if m.IsEmpty() {
		return NilByteArrList
	} else {
		acc := NilByteArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolList) FlatMapIntArrList(f func(bool) IntArrList) IntArrList {
	if m.IsEmpty() {
		return NilIntArrList
	} else {
		acc := NilIntArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolList) FlatMapInt32ArrList(f func(bool) Int32ArrList) Int32ArrList {
	if m.IsEmpty() {
		return NilInt32ArrList
	} else {
		acc := NilInt32ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolList) FlatMapInt64ArrList(f func(bool) Int64ArrList) Int64ArrList {
	if m.IsEmpty() {
		return NilInt64ArrList
	} else {
		acc := NilInt64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolList) FlatMapUintArrList(f func(bool) UintArrList) UintArrList {
	if m.IsEmpty() {
		return NilUintArrList
	} else {
		acc := NilUintArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolList) FlatMapUint64ArrList(f func(bool) Uint64ArrList) Uint64ArrList {
	if m.IsEmpty() {
		return NilUint64ArrList
	} else {
		acc := NilUint64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolList) FlatMapUintptrArrList(f func(bool) UintptrArrList) UintptrArrList {
	if m.IsEmpty() {
		return NilUintptrArrList
	} else {
		acc := NilUintptrArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolList) FlatMapFloat32ArrList(f func(bool) Float32ArrList) Float32ArrList {
	if m.IsEmpty() {
		return NilFloat32ArrList
	} else {
		acc := NilFloat32ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolList) FlatMapFloat64ArrList(f func(bool) Float64ArrList) Float64ArrList {
	if m.IsEmpty() {
		return NilFloat64ArrList
	} else {
		acc := NilFloat64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolList) FlatMapRuneArrList(f func(bool) RuneArrList) RuneArrList {
	if m.IsEmpty() {
		return NilRuneArrList
	} else {
		acc := NilRuneArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolList) FlatMapStringArrList(f func(bool) StringArrList) StringArrList {
	if m.IsEmpty() {
		return NilStringArrList
	} else {
		acc := NilStringArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolList) FlatMapBoolListList(f func(bool) BoolListList) BoolListList {
	if m.IsEmpty() {
		return NilBoolListList
	} else {
		acc := NilBoolListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolList) FlatMapAnyListList(f func(bool) AnyListList) AnyListList {
	if m.IsEmpty() {
		return NilAnyListList
	} else {
		acc := NilAnyListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolList) FlatMapByteListList(f func(bool) ByteListList) ByteListList {
	if m.IsEmpty() {
		return NilByteListList
	} else {
		acc := NilByteListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolList) FlatMapIntListList(f func(bool) IntListList) IntListList {
	if m.IsEmpty() {
		return NilIntListList
	} else {
		acc := NilIntListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolList) FlatMapInt32ListList(f func(bool) Int32ListList) Int32ListList {
	if m.IsEmpty() {
		return NilInt32ListList
	} else {
		acc := NilInt32ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolList) FlatMapInt64ListList(f func(bool) Int64ListList) Int64ListList {
	if m.IsEmpty() {
		return NilInt64ListList
	} else {
		acc := NilInt64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolList) FlatMapUintListList(f func(bool) UintListList) UintListList {
	if m.IsEmpty() {
		return NilUintListList
	} else {
		acc := NilUintListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolList) FlatMapUint64ListList(f func(bool) Uint64ListList) Uint64ListList {
	if m.IsEmpty() {
		return NilUint64ListList
	} else {
		acc := NilUint64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolList) FlatMapUintptrListList(f func(bool) UintptrListList) UintptrListList {
	if m.IsEmpty() {
		return NilUintptrListList
	} else {
		acc := NilUintptrListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolList) FlatMapFloat32ListList(f func(bool) Float32ListList) Float32ListList {
	if m.IsEmpty() {
		return NilFloat32ListList
	} else {
		acc := NilFloat32ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolList) FlatMapFloat64ListList(f func(bool) Float64ListList) Float64ListList {
	if m.IsEmpty() {
		return NilFloat64ListList
	} else {
		acc := NilFloat64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolList) FlatMapRuneListList(f func(bool) RuneListList) RuneListList {
	if m.IsEmpty() {
		return NilRuneListList
	} else {
		acc := NilRuneListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolList) FlatMapStringListList(f func(bool) StringListList) StringListList {
	if m.IsEmpty() {
		return NilStringListList
	} else {
		acc := NilStringListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolList) FlatMapBoolOptionList(f func(bool) BoolOptionList) BoolOptionList {
	if m.IsEmpty() {
		return NilBoolOptionList
	} else {
		acc := NilBoolOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolList) FlatMapAnyOptionList(f func(bool) AnyOptionList) AnyOptionList {
	if m.IsEmpty() {
		return NilAnyOptionList
	} else {
		acc := NilAnyOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolList) FlatMapByteOptionList(f func(bool) ByteOptionList) ByteOptionList {
	if m.IsEmpty() {
		return NilByteOptionList
	} else {
		acc := NilByteOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolList) FlatMapIntOptionList(f func(bool) IntOptionList) IntOptionList {
	if m.IsEmpty() {
		return NilIntOptionList
	} else {
		acc := NilIntOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolList) FlatMapInt32OptionList(f func(bool) Int32OptionList) Int32OptionList {
	if m.IsEmpty() {
		return NilInt32OptionList
	} else {
		acc := NilInt32OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolList) FlatMapInt64OptionList(f func(bool) Int64OptionList) Int64OptionList {
	if m.IsEmpty() {
		return NilInt64OptionList
	} else {
		acc := NilInt64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolList) FlatMapUintOptionList(f func(bool) UintOptionList) UintOptionList {
	if m.IsEmpty() {
		return NilUintOptionList
	} else {
		acc := NilUintOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolList) FlatMapUint64OptionList(f func(bool) Uint64OptionList) Uint64OptionList {
	if m.IsEmpty() {
		return NilUint64OptionList
	} else {
		acc := NilUint64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolList) FlatMapUintptrOptionList(f func(bool) UintptrOptionList) UintptrOptionList {
	if m.IsEmpty() {
		return NilUintptrOptionList
	} else {
		acc := NilUintptrOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolList) FlatMapFloat32OptionList(f func(bool) Float32OptionList) Float32OptionList {
	if m.IsEmpty() {
		return NilFloat32OptionList
	} else {
		acc := NilFloat32OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolList) FlatMapFloat64OptionList(f func(bool) Float64OptionList) Float64OptionList {
	if m.IsEmpty() {
		return NilFloat64OptionList
	} else {
		acc := NilFloat64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolList) FlatMapRuneOptionList(f func(bool) RuneOptionList) RuneOptionList {
	if m.IsEmpty() {
		return NilRuneOptionList
	} else {
		acc := NilRuneOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolList) FlatMapStringOptionList(f func(bool) StringOptionList) StringOptionList {
	if m.IsEmpty() {
		return NilStringOptionList
	} else {
		acc := NilStringOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyList) FlatMapBoolList(f func(Any) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBoolList
	} else {
		acc := NilBoolList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyList) FlatMapAnyList(f func(Any) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAnyList
	} else {
		acc := NilAnyList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyList) FlatMapByteList(f func(Any) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByteList
	} else {
		acc := NilByteList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyList) FlatMapIntList(f func(Any) IntList) IntList {
	if m.IsEmpty() {
		return NilIntList
	} else {
		acc := NilIntList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyList) FlatMapInt32List(f func(Any) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32List
	} else {
		acc := NilInt32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyList) FlatMapInt64List(f func(Any) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64List
	} else {
		acc := NilInt64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyList) FlatMapUintList(f func(Any) UintList) UintList {
	if m.IsEmpty() {
		return NilUintList
	} else {
		acc := NilUintList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyList) FlatMapUint64List(f func(Any) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64List
	} else {
		acc := NilUint64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyList) FlatMapUintptrList(f func(Any) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptrList
	} else {
		acc := NilUintptrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyList) FlatMapFloat32List(f func(Any) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32List
	} else {
		acc := NilFloat32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyList) FlatMapFloat64List(f func(Any) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64List
	} else {
		acc := NilFloat64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyList) FlatMapRuneList(f func(Any) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRuneList
	} else {
		acc := NilRuneList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyList) FlatMapStringList(f func(Any) StringList) StringList {
	if m.IsEmpty() {
		return NilStringList
	} else {
		acc := NilStringList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyList) FlatMapBoolArrList(f func(Any) BoolArrList) BoolArrList {
	if m.IsEmpty() {
		return NilBoolArrList
	} else {
		acc := NilBoolArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyList) FlatMapAnyArrList(f func(Any) AnyArrList) AnyArrList {
	if m.IsEmpty() {
		return NilAnyArrList
	} else {
		acc := NilAnyArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyList) FlatMapByteArrList(f func(Any) ByteArrList) ByteArrList {
	if m.IsEmpty() {
		return NilByteArrList
	} else {
		acc := NilByteArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyList) FlatMapIntArrList(f func(Any) IntArrList) IntArrList {
	if m.IsEmpty() {
		return NilIntArrList
	} else {
		acc := NilIntArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyList) FlatMapInt32ArrList(f func(Any) Int32ArrList) Int32ArrList {
	if m.IsEmpty() {
		return NilInt32ArrList
	} else {
		acc := NilInt32ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyList) FlatMapInt64ArrList(f func(Any) Int64ArrList) Int64ArrList {
	if m.IsEmpty() {
		return NilInt64ArrList
	} else {
		acc := NilInt64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyList) FlatMapUintArrList(f func(Any) UintArrList) UintArrList {
	if m.IsEmpty() {
		return NilUintArrList
	} else {
		acc := NilUintArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyList) FlatMapUint64ArrList(f func(Any) Uint64ArrList) Uint64ArrList {
	if m.IsEmpty() {
		return NilUint64ArrList
	} else {
		acc := NilUint64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyList) FlatMapUintptrArrList(f func(Any) UintptrArrList) UintptrArrList {
	if m.IsEmpty() {
		return NilUintptrArrList
	} else {
		acc := NilUintptrArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyList) FlatMapFloat32ArrList(f func(Any) Float32ArrList) Float32ArrList {
	if m.IsEmpty() {
		return NilFloat32ArrList
	} else {
		acc := NilFloat32ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyList) FlatMapFloat64ArrList(f func(Any) Float64ArrList) Float64ArrList {
	if m.IsEmpty() {
		return NilFloat64ArrList
	} else {
		acc := NilFloat64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyList) FlatMapRuneArrList(f func(Any) RuneArrList) RuneArrList {
	if m.IsEmpty() {
		return NilRuneArrList
	} else {
		acc := NilRuneArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyList) FlatMapStringArrList(f func(Any) StringArrList) StringArrList {
	if m.IsEmpty() {
		return NilStringArrList
	} else {
		acc := NilStringArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyList) FlatMapBoolListList(f func(Any) BoolListList) BoolListList {
	if m.IsEmpty() {
		return NilBoolListList
	} else {
		acc := NilBoolListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyList) FlatMapAnyListList(f func(Any) AnyListList) AnyListList {
	if m.IsEmpty() {
		return NilAnyListList
	} else {
		acc := NilAnyListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyList) FlatMapByteListList(f func(Any) ByteListList) ByteListList {
	if m.IsEmpty() {
		return NilByteListList
	} else {
		acc := NilByteListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyList) FlatMapIntListList(f func(Any) IntListList) IntListList {
	if m.IsEmpty() {
		return NilIntListList
	} else {
		acc := NilIntListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyList) FlatMapInt32ListList(f func(Any) Int32ListList) Int32ListList {
	if m.IsEmpty() {
		return NilInt32ListList
	} else {
		acc := NilInt32ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyList) FlatMapInt64ListList(f func(Any) Int64ListList) Int64ListList {
	if m.IsEmpty() {
		return NilInt64ListList
	} else {
		acc := NilInt64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyList) FlatMapUintListList(f func(Any) UintListList) UintListList {
	if m.IsEmpty() {
		return NilUintListList
	} else {
		acc := NilUintListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyList) FlatMapUint64ListList(f func(Any) Uint64ListList) Uint64ListList {
	if m.IsEmpty() {
		return NilUint64ListList
	} else {
		acc := NilUint64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyList) FlatMapUintptrListList(f func(Any) UintptrListList) UintptrListList {
	if m.IsEmpty() {
		return NilUintptrListList
	} else {
		acc := NilUintptrListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyList) FlatMapFloat32ListList(f func(Any) Float32ListList) Float32ListList {
	if m.IsEmpty() {
		return NilFloat32ListList
	} else {
		acc := NilFloat32ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyList) FlatMapFloat64ListList(f func(Any) Float64ListList) Float64ListList {
	if m.IsEmpty() {
		return NilFloat64ListList
	} else {
		acc := NilFloat64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyList) FlatMapRuneListList(f func(Any) RuneListList) RuneListList {
	if m.IsEmpty() {
		return NilRuneListList
	} else {
		acc := NilRuneListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyList) FlatMapStringListList(f func(Any) StringListList) StringListList {
	if m.IsEmpty() {
		return NilStringListList
	} else {
		acc := NilStringListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyList) FlatMapBoolOptionList(f func(Any) BoolOptionList) BoolOptionList {
	if m.IsEmpty() {
		return NilBoolOptionList
	} else {
		acc := NilBoolOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyList) FlatMapAnyOptionList(f func(Any) AnyOptionList) AnyOptionList {
	if m.IsEmpty() {
		return NilAnyOptionList
	} else {
		acc := NilAnyOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyList) FlatMapByteOptionList(f func(Any) ByteOptionList) ByteOptionList {
	if m.IsEmpty() {
		return NilByteOptionList
	} else {
		acc := NilByteOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyList) FlatMapIntOptionList(f func(Any) IntOptionList) IntOptionList {
	if m.IsEmpty() {
		return NilIntOptionList
	} else {
		acc := NilIntOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyList) FlatMapInt32OptionList(f func(Any) Int32OptionList) Int32OptionList {
	if m.IsEmpty() {
		return NilInt32OptionList
	} else {
		acc := NilInt32OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyList) FlatMapInt64OptionList(f func(Any) Int64OptionList) Int64OptionList {
	if m.IsEmpty() {
		return NilInt64OptionList
	} else {
		acc := NilInt64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyList) FlatMapUintOptionList(f func(Any) UintOptionList) UintOptionList {
	if m.IsEmpty() {
		return NilUintOptionList
	} else {
		acc := NilUintOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyList) FlatMapUint64OptionList(f func(Any) Uint64OptionList) Uint64OptionList {
	if m.IsEmpty() {
		return NilUint64OptionList
	} else {
		acc := NilUint64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyList) FlatMapUintptrOptionList(f func(Any) UintptrOptionList) UintptrOptionList {
	if m.IsEmpty() {
		return NilUintptrOptionList
	} else {
		acc := NilUintptrOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyList) FlatMapFloat32OptionList(f func(Any) Float32OptionList) Float32OptionList {
	if m.IsEmpty() {
		return NilFloat32OptionList
	} else {
		acc := NilFloat32OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyList) FlatMapFloat64OptionList(f func(Any) Float64OptionList) Float64OptionList {
	if m.IsEmpty() {
		return NilFloat64OptionList
	} else {
		acc := NilFloat64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyList) FlatMapRuneOptionList(f func(Any) RuneOptionList) RuneOptionList {
	if m.IsEmpty() {
		return NilRuneOptionList
	} else {
		acc := NilRuneOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyList) FlatMapStringOptionList(f func(Any) StringOptionList) StringOptionList {
	if m.IsEmpty() {
		return NilStringOptionList
	} else {
		acc := NilStringOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteList) FlatMapBoolList(f func(byte) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBoolList
	} else {
		acc := NilBoolList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteList) FlatMapAnyList(f func(byte) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAnyList
	} else {
		acc := NilAnyList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteList) FlatMapByteList(f func(byte) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByteList
	} else {
		acc := NilByteList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteList) FlatMapIntList(f func(byte) IntList) IntList {
	if m.IsEmpty() {
		return NilIntList
	} else {
		acc := NilIntList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteList) FlatMapInt32List(f func(byte) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32List
	} else {
		acc := NilInt32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteList) FlatMapInt64List(f func(byte) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64List
	} else {
		acc := NilInt64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteList) FlatMapUintList(f func(byte) UintList) UintList {
	if m.IsEmpty() {
		return NilUintList
	} else {
		acc := NilUintList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteList) FlatMapUint64List(f func(byte) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64List
	} else {
		acc := NilUint64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteList) FlatMapUintptrList(f func(byte) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptrList
	} else {
		acc := NilUintptrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteList) FlatMapFloat32List(f func(byte) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32List
	} else {
		acc := NilFloat32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteList) FlatMapFloat64List(f func(byte) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64List
	} else {
		acc := NilFloat64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteList) FlatMapRuneList(f func(byte) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRuneList
	} else {
		acc := NilRuneList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteList) FlatMapStringList(f func(byte) StringList) StringList {
	if m.IsEmpty() {
		return NilStringList
	} else {
		acc := NilStringList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteList) FlatMapBoolArrList(f func(byte) BoolArrList) BoolArrList {
	if m.IsEmpty() {
		return NilBoolArrList
	} else {
		acc := NilBoolArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteList) FlatMapAnyArrList(f func(byte) AnyArrList) AnyArrList {
	if m.IsEmpty() {
		return NilAnyArrList
	} else {
		acc := NilAnyArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteList) FlatMapByteArrList(f func(byte) ByteArrList) ByteArrList {
	if m.IsEmpty() {
		return NilByteArrList
	} else {
		acc := NilByteArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteList) FlatMapIntArrList(f func(byte) IntArrList) IntArrList {
	if m.IsEmpty() {
		return NilIntArrList
	} else {
		acc := NilIntArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteList) FlatMapInt32ArrList(f func(byte) Int32ArrList) Int32ArrList {
	if m.IsEmpty() {
		return NilInt32ArrList
	} else {
		acc := NilInt32ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteList) FlatMapInt64ArrList(f func(byte) Int64ArrList) Int64ArrList {
	if m.IsEmpty() {
		return NilInt64ArrList
	} else {
		acc := NilInt64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteList) FlatMapUintArrList(f func(byte) UintArrList) UintArrList {
	if m.IsEmpty() {
		return NilUintArrList
	} else {
		acc := NilUintArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteList) FlatMapUint64ArrList(f func(byte) Uint64ArrList) Uint64ArrList {
	if m.IsEmpty() {
		return NilUint64ArrList
	} else {
		acc := NilUint64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteList) FlatMapUintptrArrList(f func(byte) UintptrArrList) UintptrArrList {
	if m.IsEmpty() {
		return NilUintptrArrList
	} else {
		acc := NilUintptrArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteList) FlatMapFloat32ArrList(f func(byte) Float32ArrList) Float32ArrList {
	if m.IsEmpty() {
		return NilFloat32ArrList
	} else {
		acc := NilFloat32ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteList) FlatMapFloat64ArrList(f func(byte) Float64ArrList) Float64ArrList {
	if m.IsEmpty() {
		return NilFloat64ArrList
	} else {
		acc := NilFloat64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteList) FlatMapRuneArrList(f func(byte) RuneArrList) RuneArrList {
	if m.IsEmpty() {
		return NilRuneArrList
	} else {
		acc := NilRuneArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteList) FlatMapStringArrList(f func(byte) StringArrList) StringArrList {
	if m.IsEmpty() {
		return NilStringArrList
	} else {
		acc := NilStringArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteList) FlatMapBoolListList(f func(byte) BoolListList) BoolListList {
	if m.IsEmpty() {
		return NilBoolListList
	} else {
		acc := NilBoolListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteList) FlatMapAnyListList(f func(byte) AnyListList) AnyListList {
	if m.IsEmpty() {
		return NilAnyListList
	} else {
		acc := NilAnyListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteList) FlatMapByteListList(f func(byte) ByteListList) ByteListList {
	if m.IsEmpty() {
		return NilByteListList
	} else {
		acc := NilByteListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteList) FlatMapIntListList(f func(byte) IntListList) IntListList {
	if m.IsEmpty() {
		return NilIntListList
	} else {
		acc := NilIntListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteList) FlatMapInt32ListList(f func(byte) Int32ListList) Int32ListList {
	if m.IsEmpty() {
		return NilInt32ListList
	} else {
		acc := NilInt32ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteList) FlatMapInt64ListList(f func(byte) Int64ListList) Int64ListList {
	if m.IsEmpty() {
		return NilInt64ListList
	} else {
		acc := NilInt64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteList) FlatMapUintListList(f func(byte) UintListList) UintListList {
	if m.IsEmpty() {
		return NilUintListList
	} else {
		acc := NilUintListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteList) FlatMapUint64ListList(f func(byte) Uint64ListList) Uint64ListList {
	if m.IsEmpty() {
		return NilUint64ListList
	} else {
		acc := NilUint64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteList) FlatMapUintptrListList(f func(byte) UintptrListList) UintptrListList {
	if m.IsEmpty() {
		return NilUintptrListList
	} else {
		acc := NilUintptrListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteList) FlatMapFloat32ListList(f func(byte) Float32ListList) Float32ListList {
	if m.IsEmpty() {
		return NilFloat32ListList
	} else {
		acc := NilFloat32ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteList) FlatMapFloat64ListList(f func(byte) Float64ListList) Float64ListList {
	if m.IsEmpty() {
		return NilFloat64ListList
	} else {
		acc := NilFloat64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteList) FlatMapRuneListList(f func(byte) RuneListList) RuneListList {
	if m.IsEmpty() {
		return NilRuneListList
	} else {
		acc := NilRuneListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteList) FlatMapStringListList(f func(byte) StringListList) StringListList {
	if m.IsEmpty() {
		return NilStringListList
	} else {
		acc := NilStringListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteList) FlatMapBoolOptionList(f func(byte) BoolOptionList) BoolOptionList {
	if m.IsEmpty() {
		return NilBoolOptionList
	} else {
		acc := NilBoolOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteList) FlatMapAnyOptionList(f func(byte) AnyOptionList) AnyOptionList {
	if m.IsEmpty() {
		return NilAnyOptionList
	} else {
		acc := NilAnyOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteList) FlatMapByteOptionList(f func(byte) ByteOptionList) ByteOptionList {
	if m.IsEmpty() {
		return NilByteOptionList
	} else {
		acc := NilByteOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteList) FlatMapIntOptionList(f func(byte) IntOptionList) IntOptionList {
	if m.IsEmpty() {
		return NilIntOptionList
	} else {
		acc := NilIntOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteList) FlatMapInt32OptionList(f func(byte) Int32OptionList) Int32OptionList {
	if m.IsEmpty() {
		return NilInt32OptionList
	} else {
		acc := NilInt32OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteList) FlatMapInt64OptionList(f func(byte) Int64OptionList) Int64OptionList {
	if m.IsEmpty() {
		return NilInt64OptionList
	} else {
		acc := NilInt64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteList) FlatMapUintOptionList(f func(byte) UintOptionList) UintOptionList {
	if m.IsEmpty() {
		return NilUintOptionList
	} else {
		acc := NilUintOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteList) FlatMapUint64OptionList(f func(byte) Uint64OptionList) Uint64OptionList {
	if m.IsEmpty() {
		return NilUint64OptionList
	} else {
		acc := NilUint64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteList) FlatMapUintptrOptionList(f func(byte) UintptrOptionList) UintptrOptionList {
	if m.IsEmpty() {
		return NilUintptrOptionList
	} else {
		acc := NilUintptrOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteList) FlatMapFloat32OptionList(f func(byte) Float32OptionList) Float32OptionList {
	if m.IsEmpty() {
		return NilFloat32OptionList
	} else {
		acc := NilFloat32OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteList) FlatMapFloat64OptionList(f func(byte) Float64OptionList) Float64OptionList {
	if m.IsEmpty() {
		return NilFloat64OptionList
	} else {
		acc := NilFloat64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteList) FlatMapRuneOptionList(f func(byte) RuneOptionList) RuneOptionList {
	if m.IsEmpty() {
		return NilRuneOptionList
	} else {
		acc := NilRuneOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteList) FlatMapStringOptionList(f func(byte) StringOptionList) StringOptionList {
	if m.IsEmpty() {
		return NilStringOptionList
	} else {
		acc := NilStringOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntList) FlatMapBoolList(f func(int) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBoolList
	} else {
		acc := NilBoolList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntList) FlatMapAnyList(f func(int) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAnyList
	} else {
		acc := NilAnyList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntList) FlatMapByteList(f func(int) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByteList
	} else {
		acc := NilByteList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntList) FlatMapIntList(f func(int) IntList) IntList {
	if m.IsEmpty() {
		return NilIntList
	} else {
		acc := NilIntList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntList) FlatMapInt32List(f func(int) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32List
	} else {
		acc := NilInt32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntList) FlatMapInt64List(f func(int) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64List
	} else {
		acc := NilInt64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntList) FlatMapUintList(f func(int) UintList) UintList {
	if m.IsEmpty() {
		return NilUintList
	} else {
		acc := NilUintList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntList) FlatMapUint64List(f func(int) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64List
	} else {
		acc := NilUint64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntList) FlatMapUintptrList(f func(int) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptrList
	} else {
		acc := NilUintptrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntList) FlatMapFloat32List(f func(int) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32List
	} else {
		acc := NilFloat32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntList) FlatMapFloat64List(f func(int) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64List
	} else {
		acc := NilFloat64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntList) FlatMapRuneList(f func(int) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRuneList
	} else {
		acc := NilRuneList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntList) FlatMapStringList(f func(int) StringList) StringList {
	if m.IsEmpty() {
		return NilStringList
	} else {
		acc := NilStringList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntList) FlatMapBoolArrList(f func(int) BoolArrList) BoolArrList {
	if m.IsEmpty() {
		return NilBoolArrList
	} else {
		acc := NilBoolArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntList) FlatMapAnyArrList(f func(int) AnyArrList) AnyArrList {
	if m.IsEmpty() {
		return NilAnyArrList
	} else {
		acc := NilAnyArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntList) FlatMapByteArrList(f func(int) ByteArrList) ByteArrList {
	if m.IsEmpty() {
		return NilByteArrList
	} else {
		acc := NilByteArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntList) FlatMapIntArrList(f func(int) IntArrList) IntArrList {
	if m.IsEmpty() {
		return NilIntArrList
	} else {
		acc := NilIntArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntList) FlatMapInt32ArrList(f func(int) Int32ArrList) Int32ArrList {
	if m.IsEmpty() {
		return NilInt32ArrList
	} else {
		acc := NilInt32ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntList) FlatMapInt64ArrList(f func(int) Int64ArrList) Int64ArrList {
	if m.IsEmpty() {
		return NilInt64ArrList
	} else {
		acc := NilInt64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntList) FlatMapUintArrList(f func(int) UintArrList) UintArrList {
	if m.IsEmpty() {
		return NilUintArrList
	} else {
		acc := NilUintArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntList) FlatMapUint64ArrList(f func(int) Uint64ArrList) Uint64ArrList {
	if m.IsEmpty() {
		return NilUint64ArrList
	} else {
		acc := NilUint64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntList) FlatMapUintptrArrList(f func(int) UintptrArrList) UintptrArrList {
	if m.IsEmpty() {
		return NilUintptrArrList
	} else {
		acc := NilUintptrArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntList) FlatMapFloat32ArrList(f func(int) Float32ArrList) Float32ArrList {
	if m.IsEmpty() {
		return NilFloat32ArrList
	} else {
		acc := NilFloat32ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntList) FlatMapFloat64ArrList(f func(int) Float64ArrList) Float64ArrList {
	if m.IsEmpty() {
		return NilFloat64ArrList
	} else {
		acc := NilFloat64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntList) FlatMapRuneArrList(f func(int) RuneArrList) RuneArrList {
	if m.IsEmpty() {
		return NilRuneArrList
	} else {
		acc := NilRuneArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntList) FlatMapStringArrList(f func(int) StringArrList) StringArrList {
	if m.IsEmpty() {
		return NilStringArrList
	} else {
		acc := NilStringArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntList) FlatMapBoolListList(f func(int) BoolListList) BoolListList {
	if m.IsEmpty() {
		return NilBoolListList
	} else {
		acc := NilBoolListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntList) FlatMapAnyListList(f func(int) AnyListList) AnyListList {
	if m.IsEmpty() {
		return NilAnyListList
	} else {
		acc := NilAnyListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntList) FlatMapByteListList(f func(int) ByteListList) ByteListList {
	if m.IsEmpty() {
		return NilByteListList
	} else {
		acc := NilByteListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntList) FlatMapIntListList(f func(int) IntListList) IntListList {
	if m.IsEmpty() {
		return NilIntListList
	} else {
		acc := NilIntListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntList) FlatMapInt32ListList(f func(int) Int32ListList) Int32ListList {
	if m.IsEmpty() {
		return NilInt32ListList
	} else {
		acc := NilInt32ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntList) FlatMapInt64ListList(f func(int) Int64ListList) Int64ListList {
	if m.IsEmpty() {
		return NilInt64ListList
	} else {
		acc := NilInt64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntList) FlatMapUintListList(f func(int) UintListList) UintListList {
	if m.IsEmpty() {
		return NilUintListList
	} else {
		acc := NilUintListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntList) FlatMapUint64ListList(f func(int) Uint64ListList) Uint64ListList {
	if m.IsEmpty() {
		return NilUint64ListList
	} else {
		acc := NilUint64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntList) FlatMapUintptrListList(f func(int) UintptrListList) UintptrListList {
	if m.IsEmpty() {
		return NilUintptrListList
	} else {
		acc := NilUintptrListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntList) FlatMapFloat32ListList(f func(int) Float32ListList) Float32ListList {
	if m.IsEmpty() {
		return NilFloat32ListList
	} else {
		acc := NilFloat32ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntList) FlatMapFloat64ListList(f func(int) Float64ListList) Float64ListList {
	if m.IsEmpty() {
		return NilFloat64ListList
	} else {
		acc := NilFloat64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntList) FlatMapRuneListList(f func(int) RuneListList) RuneListList {
	if m.IsEmpty() {
		return NilRuneListList
	} else {
		acc := NilRuneListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntList) FlatMapStringListList(f func(int) StringListList) StringListList {
	if m.IsEmpty() {
		return NilStringListList
	} else {
		acc := NilStringListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntList) FlatMapBoolOptionList(f func(int) BoolOptionList) BoolOptionList {
	if m.IsEmpty() {
		return NilBoolOptionList
	} else {
		acc := NilBoolOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntList) FlatMapAnyOptionList(f func(int) AnyOptionList) AnyOptionList {
	if m.IsEmpty() {
		return NilAnyOptionList
	} else {
		acc := NilAnyOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntList) FlatMapByteOptionList(f func(int) ByteOptionList) ByteOptionList {
	if m.IsEmpty() {
		return NilByteOptionList
	} else {
		acc := NilByteOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntList) FlatMapIntOptionList(f func(int) IntOptionList) IntOptionList {
	if m.IsEmpty() {
		return NilIntOptionList
	} else {
		acc := NilIntOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntList) FlatMapInt32OptionList(f func(int) Int32OptionList) Int32OptionList {
	if m.IsEmpty() {
		return NilInt32OptionList
	} else {
		acc := NilInt32OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntList) FlatMapInt64OptionList(f func(int) Int64OptionList) Int64OptionList {
	if m.IsEmpty() {
		return NilInt64OptionList
	} else {
		acc := NilInt64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntList) FlatMapUintOptionList(f func(int) UintOptionList) UintOptionList {
	if m.IsEmpty() {
		return NilUintOptionList
	} else {
		acc := NilUintOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntList) FlatMapUint64OptionList(f func(int) Uint64OptionList) Uint64OptionList {
	if m.IsEmpty() {
		return NilUint64OptionList
	} else {
		acc := NilUint64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntList) FlatMapUintptrOptionList(f func(int) UintptrOptionList) UintptrOptionList {
	if m.IsEmpty() {
		return NilUintptrOptionList
	} else {
		acc := NilUintptrOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntList) FlatMapFloat32OptionList(f func(int) Float32OptionList) Float32OptionList {
	if m.IsEmpty() {
		return NilFloat32OptionList
	} else {
		acc := NilFloat32OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntList) FlatMapFloat64OptionList(f func(int) Float64OptionList) Float64OptionList {
	if m.IsEmpty() {
		return NilFloat64OptionList
	} else {
		acc := NilFloat64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntList) FlatMapRuneOptionList(f func(int) RuneOptionList) RuneOptionList {
	if m.IsEmpty() {
		return NilRuneOptionList
	} else {
		acc := NilRuneOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntList) FlatMapStringOptionList(f func(int) StringOptionList) StringOptionList {
	if m.IsEmpty() {
		return NilStringOptionList
	} else {
		acc := NilStringOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32List) FlatMapBoolList(f func(int32) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBoolList
	} else {
		acc := NilBoolList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32List) FlatMapAnyList(f func(int32) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAnyList
	} else {
		acc := NilAnyList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32List) FlatMapByteList(f func(int32) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByteList
	} else {
		acc := NilByteList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32List) FlatMapIntList(f func(int32) IntList) IntList {
	if m.IsEmpty() {
		return NilIntList
	} else {
		acc := NilIntList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32List) FlatMapInt32List(f func(int32) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32List
	} else {
		acc := NilInt32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32List) FlatMapInt64List(f func(int32) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64List
	} else {
		acc := NilInt64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32List) FlatMapUintList(f func(int32) UintList) UintList {
	if m.IsEmpty() {
		return NilUintList
	} else {
		acc := NilUintList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32List) FlatMapUint64List(f func(int32) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64List
	} else {
		acc := NilUint64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32List) FlatMapUintptrList(f func(int32) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptrList
	} else {
		acc := NilUintptrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32List) FlatMapFloat32List(f func(int32) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32List
	} else {
		acc := NilFloat32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32List) FlatMapFloat64List(f func(int32) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64List
	} else {
		acc := NilFloat64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32List) FlatMapRuneList(f func(int32) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRuneList
	} else {
		acc := NilRuneList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32List) FlatMapStringList(f func(int32) StringList) StringList {
	if m.IsEmpty() {
		return NilStringList
	} else {
		acc := NilStringList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32List) FlatMapBoolArrList(f func(int32) BoolArrList) BoolArrList {
	if m.IsEmpty() {
		return NilBoolArrList
	} else {
		acc := NilBoolArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32List) FlatMapAnyArrList(f func(int32) AnyArrList) AnyArrList {
	if m.IsEmpty() {
		return NilAnyArrList
	} else {
		acc := NilAnyArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32List) FlatMapByteArrList(f func(int32) ByteArrList) ByteArrList {
	if m.IsEmpty() {
		return NilByteArrList
	} else {
		acc := NilByteArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32List) FlatMapIntArrList(f func(int32) IntArrList) IntArrList {
	if m.IsEmpty() {
		return NilIntArrList
	} else {
		acc := NilIntArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32List) FlatMapInt32ArrList(f func(int32) Int32ArrList) Int32ArrList {
	if m.IsEmpty() {
		return NilInt32ArrList
	} else {
		acc := NilInt32ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32List) FlatMapInt64ArrList(f func(int32) Int64ArrList) Int64ArrList {
	if m.IsEmpty() {
		return NilInt64ArrList
	} else {
		acc := NilInt64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32List) FlatMapUintArrList(f func(int32) UintArrList) UintArrList {
	if m.IsEmpty() {
		return NilUintArrList
	} else {
		acc := NilUintArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32List) FlatMapUint64ArrList(f func(int32) Uint64ArrList) Uint64ArrList {
	if m.IsEmpty() {
		return NilUint64ArrList
	} else {
		acc := NilUint64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32List) FlatMapUintptrArrList(f func(int32) UintptrArrList) UintptrArrList {
	if m.IsEmpty() {
		return NilUintptrArrList
	} else {
		acc := NilUintptrArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32List) FlatMapFloat32ArrList(f func(int32) Float32ArrList) Float32ArrList {
	if m.IsEmpty() {
		return NilFloat32ArrList
	} else {
		acc := NilFloat32ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32List) FlatMapFloat64ArrList(f func(int32) Float64ArrList) Float64ArrList {
	if m.IsEmpty() {
		return NilFloat64ArrList
	} else {
		acc := NilFloat64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32List) FlatMapRuneArrList(f func(int32) RuneArrList) RuneArrList {
	if m.IsEmpty() {
		return NilRuneArrList
	} else {
		acc := NilRuneArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32List) FlatMapStringArrList(f func(int32) StringArrList) StringArrList {
	if m.IsEmpty() {
		return NilStringArrList
	} else {
		acc := NilStringArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32List) FlatMapBoolListList(f func(int32) BoolListList) BoolListList {
	if m.IsEmpty() {
		return NilBoolListList
	} else {
		acc := NilBoolListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32List) FlatMapAnyListList(f func(int32) AnyListList) AnyListList {
	if m.IsEmpty() {
		return NilAnyListList
	} else {
		acc := NilAnyListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32List) FlatMapByteListList(f func(int32) ByteListList) ByteListList {
	if m.IsEmpty() {
		return NilByteListList
	} else {
		acc := NilByteListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32List) FlatMapIntListList(f func(int32) IntListList) IntListList {
	if m.IsEmpty() {
		return NilIntListList
	} else {
		acc := NilIntListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32List) FlatMapInt32ListList(f func(int32) Int32ListList) Int32ListList {
	if m.IsEmpty() {
		return NilInt32ListList
	} else {
		acc := NilInt32ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32List) FlatMapInt64ListList(f func(int32) Int64ListList) Int64ListList {
	if m.IsEmpty() {
		return NilInt64ListList
	} else {
		acc := NilInt64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32List) FlatMapUintListList(f func(int32) UintListList) UintListList {
	if m.IsEmpty() {
		return NilUintListList
	} else {
		acc := NilUintListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32List) FlatMapUint64ListList(f func(int32) Uint64ListList) Uint64ListList {
	if m.IsEmpty() {
		return NilUint64ListList
	} else {
		acc := NilUint64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32List) FlatMapUintptrListList(f func(int32) UintptrListList) UintptrListList {
	if m.IsEmpty() {
		return NilUintptrListList
	} else {
		acc := NilUintptrListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32List) FlatMapFloat32ListList(f func(int32) Float32ListList) Float32ListList {
	if m.IsEmpty() {
		return NilFloat32ListList
	} else {
		acc := NilFloat32ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32List) FlatMapFloat64ListList(f func(int32) Float64ListList) Float64ListList {
	if m.IsEmpty() {
		return NilFloat64ListList
	} else {
		acc := NilFloat64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32List) FlatMapRuneListList(f func(int32) RuneListList) RuneListList {
	if m.IsEmpty() {
		return NilRuneListList
	} else {
		acc := NilRuneListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32List) FlatMapStringListList(f func(int32) StringListList) StringListList {
	if m.IsEmpty() {
		return NilStringListList
	} else {
		acc := NilStringListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32List) FlatMapBoolOptionList(f func(int32) BoolOptionList) BoolOptionList {
	if m.IsEmpty() {
		return NilBoolOptionList
	} else {
		acc := NilBoolOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32List) FlatMapAnyOptionList(f func(int32) AnyOptionList) AnyOptionList {
	if m.IsEmpty() {
		return NilAnyOptionList
	} else {
		acc := NilAnyOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32List) FlatMapByteOptionList(f func(int32) ByteOptionList) ByteOptionList {
	if m.IsEmpty() {
		return NilByteOptionList
	} else {
		acc := NilByteOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32List) FlatMapIntOptionList(f func(int32) IntOptionList) IntOptionList {
	if m.IsEmpty() {
		return NilIntOptionList
	} else {
		acc := NilIntOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32List) FlatMapInt32OptionList(f func(int32) Int32OptionList) Int32OptionList {
	if m.IsEmpty() {
		return NilInt32OptionList
	} else {
		acc := NilInt32OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32List) FlatMapInt64OptionList(f func(int32) Int64OptionList) Int64OptionList {
	if m.IsEmpty() {
		return NilInt64OptionList
	} else {
		acc := NilInt64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32List) FlatMapUintOptionList(f func(int32) UintOptionList) UintOptionList {
	if m.IsEmpty() {
		return NilUintOptionList
	} else {
		acc := NilUintOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32List) FlatMapUint64OptionList(f func(int32) Uint64OptionList) Uint64OptionList {
	if m.IsEmpty() {
		return NilUint64OptionList
	} else {
		acc := NilUint64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32List) FlatMapUintptrOptionList(f func(int32) UintptrOptionList) UintptrOptionList {
	if m.IsEmpty() {
		return NilUintptrOptionList
	} else {
		acc := NilUintptrOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32List) FlatMapFloat32OptionList(f func(int32) Float32OptionList) Float32OptionList {
	if m.IsEmpty() {
		return NilFloat32OptionList
	} else {
		acc := NilFloat32OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32List) FlatMapFloat64OptionList(f func(int32) Float64OptionList) Float64OptionList {
	if m.IsEmpty() {
		return NilFloat64OptionList
	} else {
		acc := NilFloat64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32List) FlatMapRuneOptionList(f func(int32) RuneOptionList) RuneOptionList {
	if m.IsEmpty() {
		return NilRuneOptionList
	} else {
		acc := NilRuneOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32List) FlatMapStringOptionList(f func(int32) StringOptionList) StringOptionList {
	if m.IsEmpty() {
		return NilStringOptionList
	} else {
		acc := NilStringOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64List) FlatMapBoolList(f func(int64) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBoolList
	} else {
		acc := NilBoolList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64List) FlatMapAnyList(f func(int64) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAnyList
	} else {
		acc := NilAnyList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64List) FlatMapByteList(f func(int64) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByteList
	} else {
		acc := NilByteList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64List) FlatMapIntList(f func(int64) IntList) IntList {
	if m.IsEmpty() {
		return NilIntList
	} else {
		acc := NilIntList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64List) FlatMapInt32List(f func(int64) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32List
	} else {
		acc := NilInt32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64List) FlatMapInt64List(f func(int64) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64List
	} else {
		acc := NilInt64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64List) FlatMapUintList(f func(int64) UintList) UintList {
	if m.IsEmpty() {
		return NilUintList
	} else {
		acc := NilUintList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64List) FlatMapUint64List(f func(int64) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64List
	} else {
		acc := NilUint64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64List) FlatMapUintptrList(f func(int64) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptrList
	} else {
		acc := NilUintptrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64List) FlatMapFloat32List(f func(int64) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32List
	} else {
		acc := NilFloat32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64List) FlatMapFloat64List(f func(int64) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64List
	} else {
		acc := NilFloat64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64List) FlatMapRuneList(f func(int64) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRuneList
	} else {
		acc := NilRuneList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64List) FlatMapStringList(f func(int64) StringList) StringList {
	if m.IsEmpty() {
		return NilStringList
	} else {
		acc := NilStringList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64List) FlatMapBoolArrList(f func(int64) BoolArrList) BoolArrList {
	if m.IsEmpty() {
		return NilBoolArrList
	} else {
		acc := NilBoolArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64List) FlatMapAnyArrList(f func(int64) AnyArrList) AnyArrList {
	if m.IsEmpty() {
		return NilAnyArrList
	} else {
		acc := NilAnyArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64List) FlatMapByteArrList(f func(int64) ByteArrList) ByteArrList {
	if m.IsEmpty() {
		return NilByteArrList
	} else {
		acc := NilByteArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64List) FlatMapIntArrList(f func(int64) IntArrList) IntArrList {
	if m.IsEmpty() {
		return NilIntArrList
	} else {
		acc := NilIntArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64List) FlatMapInt32ArrList(f func(int64) Int32ArrList) Int32ArrList {
	if m.IsEmpty() {
		return NilInt32ArrList
	} else {
		acc := NilInt32ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64List) FlatMapInt64ArrList(f func(int64) Int64ArrList) Int64ArrList {
	if m.IsEmpty() {
		return NilInt64ArrList
	} else {
		acc := NilInt64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64List) FlatMapUintArrList(f func(int64) UintArrList) UintArrList {
	if m.IsEmpty() {
		return NilUintArrList
	} else {
		acc := NilUintArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64List) FlatMapUint64ArrList(f func(int64) Uint64ArrList) Uint64ArrList {
	if m.IsEmpty() {
		return NilUint64ArrList
	} else {
		acc := NilUint64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64List) FlatMapUintptrArrList(f func(int64) UintptrArrList) UintptrArrList {
	if m.IsEmpty() {
		return NilUintptrArrList
	} else {
		acc := NilUintptrArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64List) FlatMapFloat32ArrList(f func(int64) Float32ArrList) Float32ArrList {
	if m.IsEmpty() {
		return NilFloat32ArrList
	} else {
		acc := NilFloat32ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64List) FlatMapFloat64ArrList(f func(int64) Float64ArrList) Float64ArrList {
	if m.IsEmpty() {
		return NilFloat64ArrList
	} else {
		acc := NilFloat64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64List) FlatMapRuneArrList(f func(int64) RuneArrList) RuneArrList {
	if m.IsEmpty() {
		return NilRuneArrList
	} else {
		acc := NilRuneArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64List) FlatMapStringArrList(f func(int64) StringArrList) StringArrList {
	if m.IsEmpty() {
		return NilStringArrList
	} else {
		acc := NilStringArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64List) FlatMapBoolListList(f func(int64) BoolListList) BoolListList {
	if m.IsEmpty() {
		return NilBoolListList
	} else {
		acc := NilBoolListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64List) FlatMapAnyListList(f func(int64) AnyListList) AnyListList {
	if m.IsEmpty() {
		return NilAnyListList
	} else {
		acc := NilAnyListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64List) FlatMapByteListList(f func(int64) ByteListList) ByteListList {
	if m.IsEmpty() {
		return NilByteListList
	} else {
		acc := NilByteListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64List) FlatMapIntListList(f func(int64) IntListList) IntListList {
	if m.IsEmpty() {
		return NilIntListList
	} else {
		acc := NilIntListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64List) FlatMapInt32ListList(f func(int64) Int32ListList) Int32ListList {
	if m.IsEmpty() {
		return NilInt32ListList
	} else {
		acc := NilInt32ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64List) FlatMapInt64ListList(f func(int64) Int64ListList) Int64ListList {
	if m.IsEmpty() {
		return NilInt64ListList
	} else {
		acc := NilInt64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64List) FlatMapUintListList(f func(int64) UintListList) UintListList {
	if m.IsEmpty() {
		return NilUintListList
	} else {
		acc := NilUintListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64List) FlatMapUint64ListList(f func(int64) Uint64ListList) Uint64ListList {
	if m.IsEmpty() {
		return NilUint64ListList
	} else {
		acc := NilUint64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64List) FlatMapUintptrListList(f func(int64) UintptrListList) UintptrListList {
	if m.IsEmpty() {
		return NilUintptrListList
	} else {
		acc := NilUintptrListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64List) FlatMapFloat32ListList(f func(int64) Float32ListList) Float32ListList {
	if m.IsEmpty() {
		return NilFloat32ListList
	} else {
		acc := NilFloat32ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64List) FlatMapFloat64ListList(f func(int64) Float64ListList) Float64ListList {
	if m.IsEmpty() {
		return NilFloat64ListList
	} else {
		acc := NilFloat64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64List) FlatMapRuneListList(f func(int64) RuneListList) RuneListList {
	if m.IsEmpty() {
		return NilRuneListList
	} else {
		acc := NilRuneListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64List) FlatMapStringListList(f func(int64) StringListList) StringListList {
	if m.IsEmpty() {
		return NilStringListList
	} else {
		acc := NilStringListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64List) FlatMapBoolOptionList(f func(int64) BoolOptionList) BoolOptionList {
	if m.IsEmpty() {
		return NilBoolOptionList
	} else {
		acc := NilBoolOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64List) FlatMapAnyOptionList(f func(int64) AnyOptionList) AnyOptionList {
	if m.IsEmpty() {
		return NilAnyOptionList
	} else {
		acc := NilAnyOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64List) FlatMapByteOptionList(f func(int64) ByteOptionList) ByteOptionList {
	if m.IsEmpty() {
		return NilByteOptionList
	} else {
		acc := NilByteOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64List) FlatMapIntOptionList(f func(int64) IntOptionList) IntOptionList {
	if m.IsEmpty() {
		return NilIntOptionList
	} else {
		acc := NilIntOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64List) FlatMapInt32OptionList(f func(int64) Int32OptionList) Int32OptionList {
	if m.IsEmpty() {
		return NilInt32OptionList
	} else {
		acc := NilInt32OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64List) FlatMapInt64OptionList(f func(int64) Int64OptionList) Int64OptionList {
	if m.IsEmpty() {
		return NilInt64OptionList
	} else {
		acc := NilInt64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64List) FlatMapUintOptionList(f func(int64) UintOptionList) UintOptionList {
	if m.IsEmpty() {
		return NilUintOptionList
	} else {
		acc := NilUintOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64List) FlatMapUint64OptionList(f func(int64) Uint64OptionList) Uint64OptionList {
	if m.IsEmpty() {
		return NilUint64OptionList
	} else {
		acc := NilUint64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64List) FlatMapUintptrOptionList(f func(int64) UintptrOptionList) UintptrOptionList {
	if m.IsEmpty() {
		return NilUintptrOptionList
	} else {
		acc := NilUintptrOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64List) FlatMapFloat32OptionList(f func(int64) Float32OptionList) Float32OptionList {
	if m.IsEmpty() {
		return NilFloat32OptionList
	} else {
		acc := NilFloat32OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64List) FlatMapFloat64OptionList(f func(int64) Float64OptionList) Float64OptionList {
	if m.IsEmpty() {
		return NilFloat64OptionList
	} else {
		acc := NilFloat64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64List) FlatMapRuneOptionList(f func(int64) RuneOptionList) RuneOptionList {
	if m.IsEmpty() {
		return NilRuneOptionList
	} else {
		acc := NilRuneOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64List) FlatMapStringOptionList(f func(int64) StringOptionList) StringOptionList {
	if m.IsEmpty() {
		return NilStringOptionList
	} else {
		acc := NilStringOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintList) FlatMapBoolList(f func(uint) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBoolList
	} else {
		acc := NilBoolList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintList) FlatMapAnyList(f func(uint) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAnyList
	} else {
		acc := NilAnyList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintList) FlatMapByteList(f func(uint) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByteList
	} else {
		acc := NilByteList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintList) FlatMapIntList(f func(uint) IntList) IntList {
	if m.IsEmpty() {
		return NilIntList
	} else {
		acc := NilIntList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintList) FlatMapInt32List(f func(uint) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32List
	} else {
		acc := NilInt32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintList) FlatMapInt64List(f func(uint) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64List
	} else {
		acc := NilInt64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintList) FlatMapUintList(f func(uint) UintList) UintList {
	if m.IsEmpty() {
		return NilUintList
	} else {
		acc := NilUintList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintList) FlatMapUint64List(f func(uint) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64List
	} else {
		acc := NilUint64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintList) FlatMapUintptrList(f func(uint) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptrList
	} else {
		acc := NilUintptrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintList) FlatMapFloat32List(f func(uint) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32List
	} else {
		acc := NilFloat32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintList) FlatMapFloat64List(f func(uint) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64List
	} else {
		acc := NilFloat64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintList) FlatMapRuneList(f func(uint) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRuneList
	} else {
		acc := NilRuneList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintList) FlatMapStringList(f func(uint) StringList) StringList {
	if m.IsEmpty() {
		return NilStringList
	} else {
		acc := NilStringList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintList) FlatMapBoolArrList(f func(uint) BoolArrList) BoolArrList {
	if m.IsEmpty() {
		return NilBoolArrList
	} else {
		acc := NilBoolArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintList) FlatMapAnyArrList(f func(uint) AnyArrList) AnyArrList {
	if m.IsEmpty() {
		return NilAnyArrList
	} else {
		acc := NilAnyArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintList) FlatMapByteArrList(f func(uint) ByteArrList) ByteArrList {
	if m.IsEmpty() {
		return NilByteArrList
	} else {
		acc := NilByteArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintList) FlatMapIntArrList(f func(uint) IntArrList) IntArrList {
	if m.IsEmpty() {
		return NilIntArrList
	} else {
		acc := NilIntArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintList) FlatMapInt32ArrList(f func(uint) Int32ArrList) Int32ArrList {
	if m.IsEmpty() {
		return NilInt32ArrList
	} else {
		acc := NilInt32ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintList) FlatMapInt64ArrList(f func(uint) Int64ArrList) Int64ArrList {
	if m.IsEmpty() {
		return NilInt64ArrList
	} else {
		acc := NilInt64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintList) FlatMapUintArrList(f func(uint) UintArrList) UintArrList {
	if m.IsEmpty() {
		return NilUintArrList
	} else {
		acc := NilUintArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintList) FlatMapUint64ArrList(f func(uint) Uint64ArrList) Uint64ArrList {
	if m.IsEmpty() {
		return NilUint64ArrList
	} else {
		acc := NilUint64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintList) FlatMapUintptrArrList(f func(uint) UintptrArrList) UintptrArrList {
	if m.IsEmpty() {
		return NilUintptrArrList
	} else {
		acc := NilUintptrArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintList) FlatMapFloat32ArrList(f func(uint) Float32ArrList) Float32ArrList {
	if m.IsEmpty() {
		return NilFloat32ArrList
	} else {
		acc := NilFloat32ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintList) FlatMapFloat64ArrList(f func(uint) Float64ArrList) Float64ArrList {
	if m.IsEmpty() {
		return NilFloat64ArrList
	} else {
		acc := NilFloat64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintList) FlatMapRuneArrList(f func(uint) RuneArrList) RuneArrList {
	if m.IsEmpty() {
		return NilRuneArrList
	} else {
		acc := NilRuneArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintList) FlatMapStringArrList(f func(uint) StringArrList) StringArrList {
	if m.IsEmpty() {
		return NilStringArrList
	} else {
		acc := NilStringArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintList) FlatMapBoolListList(f func(uint) BoolListList) BoolListList {
	if m.IsEmpty() {
		return NilBoolListList
	} else {
		acc := NilBoolListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintList) FlatMapAnyListList(f func(uint) AnyListList) AnyListList {
	if m.IsEmpty() {
		return NilAnyListList
	} else {
		acc := NilAnyListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintList) FlatMapByteListList(f func(uint) ByteListList) ByteListList {
	if m.IsEmpty() {
		return NilByteListList
	} else {
		acc := NilByteListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintList) FlatMapIntListList(f func(uint) IntListList) IntListList {
	if m.IsEmpty() {
		return NilIntListList
	} else {
		acc := NilIntListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintList) FlatMapInt32ListList(f func(uint) Int32ListList) Int32ListList {
	if m.IsEmpty() {
		return NilInt32ListList
	} else {
		acc := NilInt32ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintList) FlatMapInt64ListList(f func(uint) Int64ListList) Int64ListList {
	if m.IsEmpty() {
		return NilInt64ListList
	} else {
		acc := NilInt64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintList) FlatMapUintListList(f func(uint) UintListList) UintListList {
	if m.IsEmpty() {
		return NilUintListList
	} else {
		acc := NilUintListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintList) FlatMapUint64ListList(f func(uint) Uint64ListList) Uint64ListList {
	if m.IsEmpty() {
		return NilUint64ListList
	} else {
		acc := NilUint64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintList) FlatMapUintptrListList(f func(uint) UintptrListList) UintptrListList {
	if m.IsEmpty() {
		return NilUintptrListList
	} else {
		acc := NilUintptrListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintList) FlatMapFloat32ListList(f func(uint) Float32ListList) Float32ListList {
	if m.IsEmpty() {
		return NilFloat32ListList
	} else {
		acc := NilFloat32ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintList) FlatMapFloat64ListList(f func(uint) Float64ListList) Float64ListList {
	if m.IsEmpty() {
		return NilFloat64ListList
	} else {
		acc := NilFloat64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintList) FlatMapRuneListList(f func(uint) RuneListList) RuneListList {
	if m.IsEmpty() {
		return NilRuneListList
	} else {
		acc := NilRuneListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintList) FlatMapStringListList(f func(uint) StringListList) StringListList {
	if m.IsEmpty() {
		return NilStringListList
	} else {
		acc := NilStringListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintList) FlatMapBoolOptionList(f func(uint) BoolOptionList) BoolOptionList {
	if m.IsEmpty() {
		return NilBoolOptionList
	} else {
		acc := NilBoolOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintList) FlatMapAnyOptionList(f func(uint) AnyOptionList) AnyOptionList {
	if m.IsEmpty() {
		return NilAnyOptionList
	} else {
		acc := NilAnyOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintList) FlatMapByteOptionList(f func(uint) ByteOptionList) ByteOptionList {
	if m.IsEmpty() {
		return NilByteOptionList
	} else {
		acc := NilByteOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintList) FlatMapIntOptionList(f func(uint) IntOptionList) IntOptionList {
	if m.IsEmpty() {
		return NilIntOptionList
	} else {
		acc := NilIntOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintList) FlatMapInt32OptionList(f func(uint) Int32OptionList) Int32OptionList {
	if m.IsEmpty() {
		return NilInt32OptionList
	} else {
		acc := NilInt32OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintList) FlatMapInt64OptionList(f func(uint) Int64OptionList) Int64OptionList {
	if m.IsEmpty() {
		return NilInt64OptionList
	} else {
		acc := NilInt64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintList) FlatMapUintOptionList(f func(uint) UintOptionList) UintOptionList {
	if m.IsEmpty() {
		return NilUintOptionList
	} else {
		acc := NilUintOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintList) FlatMapUint64OptionList(f func(uint) Uint64OptionList) Uint64OptionList {
	if m.IsEmpty() {
		return NilUint64OptionList
	} else {
		acc := NilUint64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintList) FlatMapUintptrOptionList(f func(uint) UintptrOptionList) UintptrOptionList {
	if m.IsEmpty() {
		return NilUintptrOptionList
	} else {
		acc := NilUintptrOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintList) FlatMapFloat32OptionList(f func(uint) Float32OptionList) Float32OptionList {
	if m.IsEmpty() {
		return NilFloat32OptionList
	} else {
		acc := NilFloat32OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintList) FlatMapFloat64OptionList(f func(uint) Float64OptionList) Float64OptionList {
	if m.IsEmpty() {
		return NilFloat64OptionList
	} else {
		acc := NilFloat64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintList) FlatMapRuneOptionList(f func(uint) RuneOptionList) RuneOptionList {
	if m.IsEmpty() {
		return NilRuneOptionList
	} else {
		acc := NilRuneOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintList) FlatMapStringOptionList(f func(uint) StringOptionList) StringOptionList {
	if m.IsEmpty() {
		return NilStringOptionList
	} else {
		acc := NilStringOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64List) FlatMapBoolList(f func(uint64) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBoolList
	} else {
		acc := NilBoolList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64List) FlatMapAnyList(f func(uint64) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAnyList
	} else {
		acc := NilAnyList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64List) FlatMapByteList(f func(uint64) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByteList
	} else {
		acc := NilByteList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64List) FlatMapIntList(f func(uint64) IntList) IntList {
	if m.IsEmpty() {
		return NilIntList
	} else {
		acc := NilIntList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64List) FlatMapInt32List(f func(uint64) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32List
	} else {
		acc := NilInt32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64List) FlatMapInt64List(f func(uint64) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64List
	} else {
		acc := NilInt64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64List) FlatMapUintList(f func(uint64) UintList) UintList {
	if m.IsEmpty() {
		return NilUintList
	} else {
		acc := NilUintList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64List) FlatMapUint64List(f func(uint64) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64List
	} else {
		acc := NilUint64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64List) FlatMapUintptrList(f func(uint64) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptrList
	} else {
		acc := NilUintptrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64List) FlatMapFloat32List(f func(uint64) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32List
	} else {
		acc := NilFloat32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64List) FlatMapFloat64List(f func(uint64) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64List
	} else {
		acc := NilFloat64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64List) FlatMapRuneList(f func(uint64) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRuneList
	} else {
		acc := NilRuneList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64List) FlatMapStringList(f func(uint64) StringList) StringList {
	if m.IsEmpty() {
		return NilStringList
	} else {
		acc := NilStringList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64List) FlatMapBoolArrList(f func(uint64) BoolArrList) BoolArrList {
	if m.IsEmpty() {
		return NilBoolArrList
	} else {
		acc := NilBoolArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64List) FlatMapAnyArrList(f func(uint64) AnyArrList) AnyArrList {
	if m.IsEmpty() {
		return NilAnyArrList
	} else {
		acc := NilAnyArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64List) FlatMapByteArrList(f func(uint64) ByteArrList) ByteArrList {
	if m.IsEmpty() {
		return NilByteArrList
	} else {
		acc := NilByteArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64List) FlatMapIntArrList(f func(uint64) IntArrList) IntArrList {
	if m.IsEmpty() {
		return NilIntArrList
	} else {
		acc := NilIntArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64List) FlatMapInt32ArrList(f func(uint64) Int32ArrList) Int32ArrList {
	if m.IsEmpty() {
		return NilInt32ArrList
	} else {
		acc := NilInt32ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64List) FlatMapInt64ArrList(f func(uint64) Int64ArrList) Int64ArrList {
	if m.IsEmpty() {
		return NilInt64ArrList
	} else {
		acc := NilInt64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64List) FlatMapUintArrList(f func(uint64) UintArrList) UintArrList {
	if m.IsEmpty() {
		return NilUintArrList
	} else {
		acc := NilUintArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64List) FlatMapUint64ArrList(f func(uint64) Uint64ArrList) Uint64ArrList {
	if m.IsEmpty() {
		return NilUint64ArrList
	} else {
		acc := NilUint64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64List) FlatMapUintptrArrList(f func(uint64) UintptrArrList) UintptrArrList {
	if m.IsEmpty() {
		return NilUintptrArrList
	} else {
		acc := NilUintptrArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64List) FlatMapFloat32ArrList(f func(uint64) Float32ArrList) Float32ArrList {
	if m.IsEmpty() {
		return NilFloat32ArrList
	} else {
		acc := NilFloat32ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64List) FlatMapFloat64ArrList(f func(uint64) Float64ArrList) Float64ArrList {
	if m.IsEmpty() {
		return NilFloat64ArrList
	} else {
		acc := NilFloat64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64List) FlatMapRuneArrList(f func(uint64) RuneArrList) RuneArrList {
	if m.IsEmpty() {
		return NilRuneArrList
	} else {
		acc := NilRuneArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64List) FlatMapStringArrList(f func(uint64) StringArrList) StringArrList {
	if m.IsEmpty() {
		return NilStringArrList
	} else {
		acc := NilStringArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64List) FlatMapBoolListList(f func(uint64) BoolListList) BoolListList {
	if m.IsEmpty() {
		return NilBoolListList
	} else {
		acc := NilBoolListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64List) FlatMapAnyListList(f func(uint64) AnyListList) AnyListList {
	if m.IsEmpty() {
		return NilAnyListList
	} else {
		acc := NilAnyListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64List) FlatMapByteListList(f func(uint64) ByteListList) ByteListList {
	if m.IsEmpty() {
		return NilByteListList
	} else {
		acc := NilByteListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64List) FlatMapIntListList(f func(uint64) IntListList) IntListList {
	if m.IsEmpty() {
		return NilIntListList
	} else {
		acc := NilIntListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64List) FlatMapInt32ListList(f func(uint64) Int32ListList) Int32ListList {
	if m.IsEmpty() {
		return NilInt32ListList
	} else {
		acc := NilInt32ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64List) FlatMapInt64ListList(f func(uint64) Int64ListList) Int64ListList {
	if m.IsEmpty() {
		return NilInt64ListList
	} else {
		acc := NilInt64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64List) FlatMapUintListList(f func(uint64) UintListList) UintListList {
	if m.IsEmpty() {
		return NilUintListList
	} else {
		acc := NilUintListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64List) FlatMapUint64ListList(f func(uint64) Uint64ListList) Uint64ListList {
	if m.IsEmpty() {
		return NilUint64ListList
	} else {
		acc := NilUint64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64List) FlatMapUintptrListList(f func(uint64) UintptrListList) UintptrListList {
	if m.IsEmpty() {
		return NilUintptrListList
	} else {
		acc := NilUintptrListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64List) FlatMapFloat32ListList(f func(uint64) Float32ListList) Float32ListList {
	if m.IsEmpty() {
		return NilFloat32ListList
	} else {
		acc := NilFloat32ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64List) FlatMapFloat64ListList(f func(uint64) Float64ListList) Float64ListList {
	if m.IsEmpty() {
		return NilFloat64ListList
	} else {
		acc := NilFloat64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64List) FlatMapRuneListList(f func(uint64) RuneListList) RuneListList {
	if m.IsEmpty() {
		return NilRuneListList
	} else {
		acc := NilRuneListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64List) FlatMapStringListList(f func(uint64) StringListList) StringListList {
	if m.IsEmpty() {
		return NilStringListList
	} else {
		acc := NilStringListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64List) FlatMapBoolOptionList(f func(uint64) BoolOptionList) BoolOptionList {
	if m.IsEmpty() {
		return NilBoolOptionList
	} else {
		acc := NilBoolOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64List) FlatMapAnyOptionList(f func(uint64) AnyOptionList) AnyOptionList {
	if m.IsEmpty() {
		return NilAnyOptionList
	} else {
		acc := NilAnyOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64List) FlatMapByteOptionList(f func(uint64) ByteOptionList) ByteOptionList {
	if m.IsEmpty() {
		return NilByteOptionList
	} else {
		acc := NilByteOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64List) FlatMapIntOptionList(f func(uint64) IntOptionList) IntOptionList {
	if m.IsEmpty() {
		return NilIntOptionList
	} else {
		acc := NilIntOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64List) FlatMapInt32OptionList(f func(uint64) Int32OptionList) Int32OptionList {
	if m.IsEmpty() {
		return NilInt32OptionList
	} else {
		acc := NilInt32OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64List) FlatMapInt64OptionList(f func(uint64) Int64OptionList) Int64OptionList {
	if m.IsEmpty() {
		return NilInt64OptionList
	} else {
		acc := NilInt64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64List) FlatMapUintOptionList(f func(uint64) UintOptionList) UintOptionList {
	if m.IsEmpty() {
		return NilUintOptionList
	} else {
		acc := NilUintOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64List) FlatMapUint64OptionList(f func(uint64) Uint64OptionList) Uint64OptionList {
	if m.IsEmpty() {
		return NilUint64OptionList
	} else {
		acc := NilUint64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64List) FlatMapUintptrOptionList(f func(uint64) UintptrOptionList) UintptrOptionList {
	if m.IsEmpty() {
		return NilUintptrOptionList
	} else {
		acc := NilUintptrOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64List) FlatMapFloat32OptionList(f func(uint64) Float32OptionList) Float32OptionList {
	if m.IsEmpty() {
		return NilFloat32OptionList
	} else {
		acc := NilFloat32OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64List) FlatMapFloat64OptionList(f func(uint64) Float64OptionList) Float64OptionList {
	if m.IsEmpty() {
		return NilFloat64OptionList
	} else {
		acc := NilFloat64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64List) FlatMapRuneOptionList(f func(uint64) RuneOptionList) RuneOptionList {
	if m.IsEmpty() {
		return NilRuneOptionList
	} else {
		acc := NilRuneOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64List) FlatMapStringOptionList(f func(uint64) StringOptionList) StringOptionList {
	if m.IsEmpty() {
		return NilStringOptionList
	} else {
		acc := NilStringOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrList) FlatMapBoolList(f func(uintptr) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBoolList
	} else {
		acc := NilBoolList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrList) FlatMapAnyList(f func(uintptr) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAnyList
	} else {
		acc := NilAnyList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrList) FlatMapByteList(f func(uintptr) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByteList
	} else {
		acc := NilByteList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrList) FlatMapIntList(f func(uintptr) IntList) IntList {
	if m.IsEmpty() {
		return NilIntList
	} else {
		acc := NilIntList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrList) FlatMapInt32List(f func(uintptr) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32List
	} else {
		acc := NilInt32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrList) FlatMapInt64List(f func(uintptr) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64List
	} else {
		acc := NilInt64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrList) FlatMapUintList(f func(uintptr) UintList) UintList {
	if m.IsEmpty() {
		return NilUintList
	} else {
		acc := NilUintList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrList) FlatMapUint64List(f func(uintptr) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64List
	} else {
		acc := NilUint64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrList) FlatMapUintptrList(f func(uintptr) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptrList
	} else {
		acc := NilUintptrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrList) FlatMapFloat32List(f func(uintptr) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32List
	} else {
		acc := NilFloat32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrList) FlatMapFloat64List(f func(uintptr) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64List
	} else {
		acc := NilFloat64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrList) FlatMapRuneList(f func(uintptr) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRuneList
	} else {
		acc := NilRuneList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrList) FlatMapStringList(f func(uintptr) StringList) StringList {
	if m.IsEmpty() {
		return NilStringList
	} else {
		acc := NilStringList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrList) FlatMapBoolArrList(f func(uintptr) BoolArrList) BoolArrList {
	if m.IsEmpty() {
		return NilBoolArrList
	} else {
		acc := NilBoolArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrList) FlatMapAnyArrList(f func(uintptr) AnyArrList) AnyArrList {
	if m.IsEmpty() {
		return NilAnyArrList
	} else {
		acc := NilAnyArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrList) FlatMapByteArrList(f func(uintptr) ByteArrList) ByteArrList {
	if m.IsEmpty() {
		return NilByteArrList
	} else {
		acc := NilByteArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrList) FlatMapIntArrList(f func(uintptr) IntArrList) IntArrList {
	if m.IsEmpty() {
		return NilIntArrList
	} else {
		acc := NilIntArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrList) FlatMapInt32ArrList(f func(uintptr) Int32ArrList) Int32ArrList {
	if m.IsEmpty() {
		return NilInt32ArrList
	} else {
		acc := NilInt32ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrList) FlatMapInt64ArrList(f func(uintptr) Int64ArrList) Int64ArrList {
	if m.IsEmpty() {
		return NilInt64ArrList
	} else {
		acc := NilInt64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrList) FlatMapUintArrList(f func(uintptr) UintArrList) UintArrList {
	if m.IsEmpty() {
		return NilUintArrList
	} else {
		acc := NilUintArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrList) FlatMapUint64ArrList(f func(uintptr) Uint64ArrList) Uint64ArrList {
	if m.IsEmpty() {
		return NilUint64ArrList
	} else {
		acc := NilUint64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrList) FlatMapUintptrArrList(f func(uintptr) UintptrArrList) UintptrArrList {
	if m.IsEmpty() {
		return NilUintptrArrList
	} else {
		acc := NilUintptrArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrList) FlatMapFloat32ArrList(f func(uintptr) Float32ArrList) Float32ArrList {
	if m.IsEmpty() {
		return NilFloat32ArrList
	} else {
		acc := NilFloat32ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrList) FlatMapFloat64ArrList(f func(uintptr) Float64ArrList) Float64ArrList {
	if m.IsEmpty() {
		return NilFloat64ArrList
	} else {
		acc := NilFloat64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrList) FlatMapRuneArrList(f func(uintptr) RuneArrList) RuneArrList {
	if m.IsEmpty() {
		return NilRuneArrList
	} else {
		acc := NilRuneArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrList) FlatMapStringArrList(f func(uintptr) StringArrList) StringArrList {
	if m.IsEmpty() {
		return NilStringArrList
	} else {
		acc := NilStringArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrList) FlatMapBoolListList(f func(uintptr) BoolListList) BoolListList {
	if m.IsEmpty() {
		return NilBoolListList
	} else {
		acc := NilBoolListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrList) FlatMapAnyListList(f func(uintptr) AnyListList) AnyListList {
	if m.IsEmpty() {
		return NilAnyListList
	} else {
		acc := NilAnyListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrList) FlatMapByteListList(f func(uintptr) ByteListList) ByteListList {
	if m.IsEmpty() {
		return NilByteListList
	} else {
		acc := NilByteListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrList) FlatMapIntListList(f func(uintptr) IntListList) IntListList {
	if m.IsEmpty() {
		return NilIntListList
	} else {
		acc := NilIntListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrList) FlatMapInt32ListList(f func(uintptr) Int32ListList) Int32ListList {
	if m.IsEmpty() {
		return NilInt32ListList
	} else {
		acc := NilInt32ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrList) FlatMapInt64ListList(f func(uintptr) Int64ListList) Int64ListList {
	if m.IsEmpty() {
		return NilInt64ListList
	} else {
		acc := NilInt64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrList) FlatMapUintListList(f func(uintptr) UintListList) UintListList {
	if m.IsEmpty() {
		return NilUintListList
	} else {
		acc := NilUintListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrList) FlatMapUint64ListList(f func(uintptr) Uint64ListList) Uint64ListList {
	if m.IsEmpty() {
		return NilUint64ListList
	} else {
		acc := NilUint64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrList) FlatMapUintptrListList(f func(uintptr) UintptrListList) UintptrListList {
	if m.IsEmpty() {
		return NilUintptrListList
	} else {
		acc := NilUintptrListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrList) FlatMapFloat32ListList(f func(uintptr) Float32ListList) Float32ListList {
	if m.IsEmpty() {
		return NilFloat32ListList
	} else {
		acc := NilFloat32ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrList) FlatMapFloat64ListList(f func(uintptr) Float64ListList) Float64ListList {
	if m.IsEmpty() {
		return NilFloat64ListList
	} else {
		acc := NilFloat64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrList) FlatMapRuneListList(f func(uintptr) RuneListList) RuneListList {
	if m.IsEmpty() {
		return NilRuneListList
	} else {
		acc := NilRuneListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrList) FlatMapStringListList(f func(uintptr) StringListList) StringListList {
	if m.IsEmpty() {
		return NilStringListList
	} else {
		acc := NilStringListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrList) FlatMapBoolOptionList(f func(uintptr) BoolOptionList) BoolOptionList {
	if m.IsEmpty() {
		return NilBoolOptionList
	} else {
		acc := NilBoolOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrList) FlatMapAnyOptionList(f func(uintptr) AnyOptionList) AnyOptionList {
	if m.IsEmpty() {
		return NilAnyOptionList
	} else {
		acc := NilAnyOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrList) FlatMapByteOptionList(f func(uintptr) ByteOptionList) ByteOptionList {
	if m.IsEmpty() {
		return NilByteOptionList
	} else {
		acc := NilByteOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrList) FlatMapIntOptionList(f func(uintptr) IntOptionList) IntOptionList {
	if m.IsEmpty() {
		return NilIntOptionList
	} else {
		acc := NilIntOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrList) FlatMapInt32OptionList(f func(uintptr) Int32OptionList) Int32OptionList {
	if m.IsEmpty() {
		return NilInt32OptionList
	} else {
		acc := NilInt32OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrList) FlatMapInt64OptionList(f func(uintptr) Int64OptionList) Int64OptionList {
	if m.IsEmpty() {
		return NilInt64OptionList
	} else {
		acc := NilInt64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrList) FlatMapUintOptionList(f func(uintptr) UintOptionList) UintOptionList {
	if m.IsEmpty() {
		return NilUintOptionList
	} else {
		acc := NilUintOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrList) FlatMapUint64OptionList(f func(uintptr) Uint64OptionList) Uint64OptionList {
	if m.IsEmpty() {
		return NilUint64OptionList
	} else {
		acc := NilUint64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrList) FlatMapUintptrOptionList(f func(uintptr) UintptrOptionList) UintptrOptionList {
	if m.IsEmpty() {
		return NilUintptrOptionList
	} else {
		acc := NilUintptrOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrList) FlatMapFloat32OptionList(f func(uintptr) Float32OptionList) Float32OptionList {
	if m.IsEmpty() {
		return NilFloat32OptionList
	} else {
		acc := NilFloat32OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrList) FlatMapFloat64OptionList(f func(uintptr) Float64OptionList) Float64OptionList {
	if m.IsEmpty() {
		return NilFloat64OptionList
	} else {
		acc := NilFloat64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrList) FlatMapRuneOptionList(f func(uintptr) RuneOptionList) RuneOptionList {
	if m.IsEmpty() {
		return NilRuneOptionList
	} else {
		acc := NilRuneOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrList) FlatMapStringOptionList(f func(uintptr) StringOptionList) StringOptionList {
	if m.IsEmpty() {
		return NilStringOptionList
	} else {
		acc := NilStringOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32List) FlatMapBoolList(f func(float32) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBoolList
	} else {
		acc := NilBoolList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32List) FlatMapAnyList(f func(float32) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAnyList
	} else {
		acc := NilAnyList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32List) FlatMapByteList(f func(float32) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByteList
	} else {
		acc := NilByteList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32List) FlatMapIntList(f func(float32) IntList) IntList {
	if m.IsEmpty() {
		return NilIntList
	} else {
		acc := NilIntList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32List) FlatMapInt32List(f func(float32) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32List
	} else {
		acc := NilInt32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32List) FlatMapInt64List(f func(float32) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64List
	} else {
		acc := NilInt64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32List) FlatMapUintList(f func(float32) UintList) UintList {
	if m.IsEmpty() {
		return NilUintList
	} else {
		acc := NilUintList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32List) FlatMapUint64List(f func(float32) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64List
	} else {
		acc := NilUint64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32List) FlatMapUintptrList(f func(float32) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptrList
	} else {
		acc := NilUintptrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32List) FlatMapFloat32List(f func(float32) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32List
	} else {
		acc := NilFloat32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32List) FlatMapFloat64List(f func(float32) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64List
	} else {
		acc := NilFloat64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32List) FlatMapRuneList(f func(float32) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRuneList
	} else {
		acc := NilRuneList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32List) FlatMapStringList(f func(float32) StringList) StringList {
	if m.IsEmpty() {
		return NilStringList
	} else {
		acc := NilStringList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32List) FlatMapBoolArrList(f func(float32) BoolArrList) BoolArrList {
	if m.IsEmpty() {
		return NilBoolArrList
	} else {
		acc := NilBoolArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32List) FlatMapAnyArrList(f func(float32) AnyArrList) AnyArrList {
	if m.IsEmpty() {
		return NilAnyArrList
	} else {
		acc := NilAnyArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32List) FlatMapByteArrList(f func(float32) ByteArrList) ByteArrList {
	if m.IsEmpty() {
		return NilByteArrList
	} else {
		acc := NilByteArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32List) FlatMapIntArrList(f func(float32) IntArrList) IntArrList {
	if m.IsEmpty() {
		return NilIntArrList
	} else {
		acc := NilIntArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32List) FlatMapInt32ArrList(f func(float32) Int32ArrList) Int32ArrList {
	if m.IsEmpty() {
		return NilInt32ArrList
	} else {
		acc := NilInt32ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32List) FlatMapInt64ArrList(f func(float32) Int64ArrList) Int64ArrList {
	if m.IsEmpty() {
		return NilInt64ArrList
	} else {
		acc := NilInt64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32List) FlatMapUintArrList(f func(float32) UintArrList) UintArrList {
	if m.IsEmpty() {
		return NilUintArrList
	} else {
		acc := NilUintArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32List) FlatMapUint64ArrList(f func(float32) Uint64ArrList) Uint64ArrList {
	if m.IsEmpty() {
		return NilUint64ArrList
	} else {
		acc := NilUint64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32List) FlatMapUintptrArrList(f func(float32) UintptrArrList) UintptrArrList {
	if m.IsEmpty() {
		return NilUintptrArrList
	} else {
		acc := NilUintptrArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32List) FlatMapFloat32ArrList(f func(float32) Float32ArrList) Float32ArrList {
	if m.IsEmpty() {
		return NilFloat32ArrList
	} else {
		acc := NilFloat32ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32List) FlatMapFloat64ArrList(f func(float32) Float64ArrList) Float64ArrList {
	if m.IsEmpty() {
		return NilFloat64ArrList
	} else {
		acc := NilFloat64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32List) FlatMapRuneArrList(f func(float32) RuneArrList) RuneArrList {
	if m.IsEmpty() {
		return NilRuneArrList
	} else {
		acc := NilRuneArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32List) FlatMapStringArrList(f func(float32) StringArrList) StringArrList {
	if m.IsEmpty() {
		return NilStringArrList
	} else {
		acc := NilStringArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32List) FlatMapBoolListList(f func(float32) BoolListList) BoolListList {
	if m.IsEmpty() {
		return NilBoolListList
	} else {
		acc := NilBoolListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32List) FlatMapAnyListList(f func(float32) AnyListList) AnyListList {
	if m.IsEmpty() {
		return NilAnyListList
	} else {
		acc := NilAnyListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32List) FlatMapByteListList(f func(float32) ByteListList) ByteListList {
	if m.IsEmpty() {
		return NilByteListList
	} else {
		acc := NilByteListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32List) FlatMapIntListList(f func(float32) IntListList) IntListList {
	if m.IsEmpty() {
		return NilIntListList
	} else {
		acc := NilIntListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32List) FlatMapInt32ListList(f func(float32) Int32ListList) Int32ListList {
	if m.IsEmpty() {
		return NilInt32ListList
	} else {
		acc := NilInt32ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32List) FlatMapInt64ListList(f func(float32) Int64ListList) Int64ListList {
	if m.IsEmpty() {
		return NilInt64ListList
	} else {
		acc := NilInt64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32List) FlatMapUintListList(f func(float32) UintListList) UintListList {
	if m.IsEmpty() {
		return NilUintListList
	} else {
		acc := NilUintListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32List) FlatMapUint64ListList(f func(float32) Uint64ListList) Uint64ListList {
	if m.IsEmpty() {
		return NilUint64ListList
	} else {
		acc := NilUint64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32List) FlatMapUintptrListList(f func(float32) UintptrListList) UintptrListList {
	if m.IsEmpty() {
		return NilUintptrListList
	} else {
		acc := NilUintptrListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32List) FlatMapFloat32ListList(f func(float32) Float32ListList) Float32ListList {
	if m.IsEmpty() {
		return NilFloat32ListList
	} else {
		acc := NilFloat32ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32List) FlatMapFloat64ListList(f func(float32) Float64ListList) Float64ListList {
	if m.IsEmpty() {
		return NilFloat64ListList
	} else {
		acc := NilFloat64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32List) FlatMapRuneListList(f func(float32) RuneListList) RuneListList {
	if m.IsEmpty() {
		return NilRuneListList
	} else {
		acc := NilRuneListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32List) FlatMapStringListList(f func(float32) StringListList) StringListList {
	if m.IsEmpty() {
		return NilStringListList
	} else {
		acc := NilStringListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32List) FlatMapBoolOptionList(f func(float32) BoolOptionList) BoolOptionList {
	if m.IsEmpty() {
		return NilBoolOptionList
	} else {
		acc := NilBoolOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32List) FlatMapAnyOptionList(f func(float32) AnyOptionList) AnyOptionList {
	if m.IsEmpty() {
		return NilAnyOptionList
	} else {
		acc := NilAnyOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32List) FlatMapByteOptionList(f func(float32) ByteOptionList) ByteOptionList {
	if m.IsEmpty() {
		return NilByteOptionList
	} else {
		acc := NilByteOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32List) FlatMapIntOptionList(f func(float32) IntOptionList) IntOptionList {
	if m.IsEmpty() {
		return NilIntOptionList
	} else {
		acc := NilIntOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32List) FlatMapInt32OptionList(f func(float32) Int32OptionList) Int32OptionList {
	if m.IsEmpty() {
		return NilInt32OptionList
	} else {
		acc := NilInt32OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32List) FlatMapInt64OptionList(f func(float32) Int64OptionList) Int64OptionList {
	if m.IsEmpty() {
		return NilInt64OptionList
	} else {
		acc := NilInt64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32List) FlatMapUintOptionList(f func(float32) UintOptionList) UintOptionList {
	if m.IsEmpty() {
		return NilUintOptionList
	} else {
		acc := NilUintOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32List) FlatMapUint64OptionList(f func(float32) Uint64OptionList) Uint64OptionList {
	if m.IsEmpty() {
		return NilUint64OptionList
	} else {
		acc := NilUint64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32List) FlatMapUintptrOptionList(f func(float32) UintptrOptionList) UintptrOptionList {
	if m.IsEmpty() {
		return NilUintptrOptionList
	} else {
		acc := NilUintptrOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32List) FlatMapFloat32OptionList(f func(float32) Float32OptionList) Float32OptionList {
	if m.IsEmpty() {
		return NilFloat32OptionList
	} else {
		acc := NilFloat32OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32List) FlatMapFloat64OptionList(f func(float32) Float64OptionList) Float64OptionList {
	if m.IsEmpty() {
		return NilFloat64OptionList
	} else {
		acc := NilFloat64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32List) FlatMapRuneOptionList(f func(float32) RuneOptionList) RuneOptionList {
	if m.IsEmpty() {
		return NilRuneOptionList
	} else {
		acc := NilRuneOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32List) FlatMapStringOptionList(f func(float32) StringOptionList) StringOptionList {
	if m.IsEmpty() {
		return NilStringOptionList
	} else {
		acc := NilStringOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64List) FlatMapBoolList(f func(float64) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBoolList
	} else {
		acc := NilBoolList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64List) FlatMapAnyList(f func(float64) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAnyList
	} else {
		acc := NilAnyList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64List) FlatMapByteList(f func(float64) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByteList
	} else {
		acc := NilByteList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64List) FlatMapIntList(f func(float64) IntList) IntList {
	if m.IsEmpty() {
		return NilIntList
	} else {
		acc := NilIntList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64List) FlatMapInt32List(f func(float64) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32List
	} else {
		acc := NilInt32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64List) FlatMapInt64List(f func(float64) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64List
	} else {
		acc := NilInt64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64List) FlatMapUintList(f func(float64) UintList) UintList {
	if m.IsEmpty() {
		return NilUintList
	} else {
		acc := NilUintList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64List) FlatMapUint64List(f func(float64) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64List
	} else {
		acc := NilUint64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64List) FlatMapUintptrList(f func(float64) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptrList
	} else {
		acc := NilUintptrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64List) FlatMapFloat32List(f func(float64) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32List
	} else {
		acc := NilFloat32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64List) FlatMapFloat64List(f func(float64) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64List
	} else {
		acc := NilFloat64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64List) FlatMapRuneList(f func(float64) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRuneList
	} else {
		acc := NilRuneList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64List) FlatMapStringList(f func(float64) StringList) StringList {
	if m.IsEmpty() {
		return NilStringList
	} else {
		acc := NilStringList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64List) FlatMapBoolArrList(f func(float64) BoolArrList) BoolArrList {
	if m.IsEmpty() {
		return NilBoolArrList
	} else {
		acc := NilBoolArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64List) FlatMapAnyArrList(f func(float64) AnyArrList) AnyArrList {
	if m.IsEmpty() {
		return NilAnyArrList
	} else {
		acc := NilAnyArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64List) FlatMapByteArrList(f func(float64) ByteArrList) ByteArrList {
	if m.IsEmpty() {
		return NilByteArrList
	} else {
		acc := NilByteArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64List) FlatMapIntArrList(f func(float64) IntArrList) IntArrList {
	if m.IsEmpty() {
		return NilIntArrList
	} else {
		acc := NilIntArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64List) FlatMapInt32ArrList(f func(float64) Int32ArrList) Int32ArrList {
	if m.IsEmpty() {
		return NilInt32ArrList
	} else {
		acc := NilInt32ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64List) FlatMapInt64ArrList(f func(float64) Int64ArrList) Int64ArrList {
	if m.IsEmpty() {
		return NilInt64ArrList
	} else {
		acc := NilInt64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64List) FlatMapUintArrList(f func(float64) UintArrList) UintArrList {
	if m.IsEmpty() {
		return NilUintArrList
	} else {
		acc := NilUintArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64List) FlatMapUint64ArrList(f func(float64) Uint64ArrList) Uint64ArrList {
	if m.IsEmpty() {
		return NilUint64ArrList
	} else {
		acc := NilUint64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64List) FlatMapUintptrArrList(f func(float64) UintptrArrList) UintptrArrList {
	if m.IsEmpty() {
		return NilUintptrArrList
	} else {
		acc := NilUintptrArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64List) FlatMapFloat32ArrList(f func(float64) Float32ArrList) Float32ArrList {
	if m.IsEmpty() {
		return NilFloat32ArrList
	} else {
		acc := NilFloat32ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64List) FlatMapFloat64ArrList(f func(float64) Float64ArrList) Float64ArrList {
	if m.IsEmpty() {
		return NilFloat64ArrList
	} else {
		acc := NilFloat64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64List) FlatMapRuneArrList(f func(float64) RuneArrList) RuneArrList {
	if m.IsEmpty() {
		return NilRuneArrList
	} else {
		acc := NilRuneArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64List) FlatMapStringArrList(f func(float64) StringArrList) StringArrList {
	if m.IsEmpty() {
		return NilStringArrList
	} else {
		acc := NilStringArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64List) FlatMapBoolListList(f func(float64) BoolListList) BoolListList {
	if m.IsEmpty() {
		return NilBoolListList
	} else {
		acc := NilBoolListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64List) FlatMapAnyListList(f func(float64) AnyListList) AnyListList {
	if m.IsEmpty() {
		return NilAnyListList
	} else {
		acc := NilAnyListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64List) FlatMapByteListList(f func(float64) ByteListList) ByteListList {
	if m.IsEmpty() {
		return NilByteListList
	} else {
		acc := NilByteListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64List) FlatMapIntListList(f func(float64) IntListList) IntListList {
	if m.IsEmpty() {
		return NilIntListList
	} else {
		acc := NilIntListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64List) FlatMapInt32ListList(f func(float64) Int32ListList) Int32ListList {
	if m.IsEmpty() {
		return NilInt32ListList
	} else {
		acc := NilInt32ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64List) FlatMapInt64ListList(f func(float64) Int64ListList) Int64ListList {
	if m.IsEmpty() {
		return NilInt64ListList
	} else {
		acc := NilInt64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64List) FlatMapUintListList(f func(float64) UintListList) UintListList {
	if m.IsEmpty() {
		return NilUintListList
	} else {
		acc := NilUintListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64List) FlatMapUint64ListList(f func(float64) Uint64ListList) Uint64ListList {
	if m.IsEmpty() {
		return NilUint64ListList
	} else {
		acc := NilUint64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64List) FlatMapUintptrListList(f func(float64) UintptrListList) UintptrListList {
	if m.IsEmpty() {
		return NilUintptrListList
	} else {
		acc := NilUintptrListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64List) FlatMapFloat32ListList(f func(float64) Float32ListList) Float32ListList {
	if m.IsEmpty() {
		return NilFloat32ListList
	} else {
		acc := NilFloat32ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64List) FlatMapFloat64ListList(f func(float64) Float64ListList) Float64ListList {
	if m.IsEmpty() {
		return NilFloat64ListList
	} else {
		acc := NilFloat64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64List) FlatMapRuneListList(f func(float64) RuneListList) RuneListList {
	if m.IsEmpty() {
		return NilRuneListList
	} else {
		acc := NilRuneListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64List) FlatMapStringListList(f func(float64) StringListList) StringListList {
	if m.IsEmpty() {
		return NilStringListList
	} else {
		acc := NilStringListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64List) FlatMapBoolOptionList(f func(float64) BoolOptionList) BoolOptionList {
	if m.IsEmpty() {
		return NilBoolOptionList
	} else {
		acc := NilBoolOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64List) FlatMapAnyOptionList(f func(float64) AnyOptionList) AnyOptionList {
	if m.IsEmpty() {
		return NilAnyOptionList
	} else {
		acc := NilAnyOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64List) FlatMapByteOptionList(f func(float64) ByteOptionList) ByteOptionList {
	if m.IsEmpty() {
		return NilByteOptionList
	} else {
		acc := NilByteOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64List) FlatMapIntOptionList(f func(float64) IntOptionList) IntOptionList {
	if m.IsEmpty() {
		return NilIntOptionList
	} else {
		acc := NilIntOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64List) FlatMapInt32OptionList(f func(float64) Int32OptionList) Int32OptionList {
	if m.IsEmpty() {
		return NilInt32OptionList
	} else {
		acc := NilInt32OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64List) FlatMapInt64OptionList(f func(float64) Int64OptionList) Int64OptionList {
	if m.IsEmpty() {
		return NilInt64OptionList
	} else {
		acc := NilInt64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64List) FlatMapUintOptionList(f func(float64) UintOptionList) UintOptionList {
	if m.IsEmpty() {
		return NilUintOptionList
	} else {
		acc := NilUintOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64List) FlatMapUint64OptionList(f func(float64) Uint64OptionList) Uint64OptionList {
	if m.IsEmpty() {
		return NilUint64OptionList
	} else {
		acc := NilUint64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64List) FlatMapUintptrOptionList(f func(float64) UintptrOptionList) UintptrOptionList {
	if m.IsEmpty() {
		return NilUintptrOptionList
	} else {
		acc := NilUintptrOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64List) FlatMapFloat32OptionList(f func(float64) Float32OptionList) Float32OptionList {
	if m.IsEmpty() {
		return NilFloat32OptionList
	} else {
		acc := NilFloat32OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64List) FlatMapFloat64OptionList(f func(float64) Float64OptionList) Float64OptionList {
	if m.IsEmpty() {
		return NilFloat64OptionList
	} else {
		acc := NilFloat64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64List) FlatMapRuneOptionList(f func(float64) RuneOptionList) RuneOptionList {
	if m.IsEmpty() {
		return NilRuneOptionList
	} else {
		acc := NilRuneOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64List) FlatMapStringOptionList(f func(float64) StringOptionList) StringOptionList {
	if m.IsEmpty() {
		return NilStringOptionList
	} else {
		acc := NilStringOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneList) FlatMapBoolList(f func(rune) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBoolList
	} else {
		acc := NilBoolList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneList) FlatMapAnyList(f func(rune) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAnyList
	} else {
		acc := NilAnyList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneList) FlatMapByteList(f func(rune) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByteList
	} else {
		acc := NilByteList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneList) FlatMapIntList(f func(rune) IntList) IntList {
	if m.IsEmpty() {
		return NilIntList
	} else {
		acc := NilIntList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneList) FlatMapInt32List(f func(rune) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32List
	} else {
		acc := NilInt32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneList) FlatMapInt64List(f func(rune) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64List
	} else {
		acc := NilInt64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneList) FlatMapUintList(f func(rune) UintList) UintList {
	if m.IsEmpty() {
		return NilUintList
	} else {
		acc := NilUintList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneList) FlatMapUint64List(f func(rune) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64List
	} else {
		acc := NilUint64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneList) FlatMapUintptrList(f func(rune) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptrList
	} else {
		acc := NilUintptrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneList) FlatMapFloat32List(f func(rune) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32List
	} else {
		acc := NilFloat32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneList) FlatMapFloat64List(f func(rune) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64List
	} else {
		acc := NilFloat64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneList) FlatMapRuneList(f func(rune) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRuneList
	} else {
		acc := NilRuneList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneList) FlatMapStringList(f func(rune) StringList) StringList {
	if m.IsEmpty() {
		return NilStringList
	} else {
		acc := NilStringList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneList) FlatMapBoolArrList(f func(rune) BoolArrList) BoolArrList {
	if m.IsEmpty() {
		return NilBoolArrList
	} else {
		acc := NilBoolArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneList) FlatMapAnyArrList(f func(rune) AnyArrList) AnyArrList {
	if m.IsEmpty() {
		return NilAnyArrList
	} else {
		acc := NilAnyArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneList) FlatMapByteArrList(f func(rune) ByteArrList) ByteArrList {
	if m.IsEmpty() {
		return NilByteArrList
	} else {
		acc := NilByteArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneList) FlatMapIntArrList(f func(rune) IntArrList) IntArrList {
	if m.IsEmpty() {
		return NilIntArrList
	} else {
		acc := NilIntArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneList) FlatMapInt32ArrList(f func(rune) Int32ArrList) Int32ArrList {
	if m.IsEmpty() {
		return NilInt32ArrList
	} else {
		acc := NilInt32ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneList) FlatMapInt64ArrList(f func(rune) Int64ArrList) Int64ArrList {
	if m.IsEmpty() {
		return NilInt64ArrList
	} else {
		acc := NilInt64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneList) FlatMapUintArrList(f func(rune) UintArrList) UintArrList {
	if m.IsEmpty() {
		return NilUintArrList
	} else {
		acc := NilUintArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneList) FlatMapUint64ArrList(f func(rune) Uint64ArrList) Uint64ArrList {
	if m.IsEmpty() {
		return NilUint64ArrList
	} else {
		acc := NilUint64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneList) FlatMapUintptrArrList(f func(rune) UintptrArrList) UintptrArrList {
	if m.IsEmpty() {
		return NilUintptrArrList
	} else {
		acc := NilUintptrArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneList) FlatMapFloat32ArrList(f func(rune) Float32ArrList) Float32ArrList {
	if m.IsEmpty() {
		return NilFloat32ArrList
	} else {
		acc := NilFloat32ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneList) FlatMapFloat64ArrList(f func(rune) Float64ArrList) Float64ArrList {
	if m.IsEmpty() {
		return NilFloat64ArrList
	} else {
		acc := NilFloat64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneList) FlatMapRuneArrList(f func(rune) RuneArrList) RuneArrList {
	if m.IsEmpty() {
		return NilRuneArrList
	} else {
		acc := NilRuneArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneList) FlatMapStringArrList(f func(rune) StringArrList) StringArrList {
	if m.IsEmpty() {
		return NilStringArrList
	} else {
		acc := NilStringArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneList) FlatMapBoolListList(f func(rune) BoolListList) BoolListList {
	if m.IsEmpty() {
		return NilBoolListList
	} else {
		acc := NilBoolListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneList) FlatMapAnyListList(f func(rune) AnyListList) AnyListList {
	if m.IsEmpty() {
		return NilAnyListList
	} else {
		acc := NilAnyListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneList) FlatMapByteListList(f func(rune) ByteListList) ByteListList {
	if m.IsEmpty() {
		return NilByteListList
	} else {
		acc := NilByteListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneList) FlatMapIntListList(f func(rune) IntListList) IntListList {
	if m.IsEmpty() {
		return NilIntListList
	} else {
		acc := NilIntListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneList) FlatMapInt32ListList(f func(rune) Int32ListList) Int32ListList {
	if m.IsEmpty() {
		return NilInt32ListList
	} else {
		acc := NilInt32ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneList) FlatMapInt64ListList(f func(rune) Int64ListList) Int64ListList {
	if m.IsEmpty() {
		return NilInt64ListList
	} else {
		acc := NilInt64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneList) FlatMapUintListList(f func(rune) UintListList) UintListList {
	if m.IsEmpty() {
		return NilUintListList
	} else {
		acc := NilUintListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneList) FlatMapUint64ListList(f func(rune) Uint64ListList) Uint64ListList {
	if m.IsEmpty() {
		return NilUint64ListList
	} else {
		acc := NilUint64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneList) FlatMapUintptrListList(f func(rune) UintptrListList) UintptrListList {
	if m.IsEmpty() {
		return NilUintptrListList
	} else {
		acc := NilUintptrListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneList) FlatMapFloat32ListList(f func(rune) Float32ListList) Float32ListList {
	if m.IsEmpty() {
		return NilFloat32ListList
	} else {
		acc := NilFloat32ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneList) FlatMapFloat64ListList(f func(rune) Float64ListList) Float64ListList {
	if m.IsEmpty() {
		return NilFloat64ListList
	} else {
		acc := NilFloat64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneList) FlatMapRuneListList(f func(rune) RuneListList) RuneListList {
	if m.IsEmpty() {
		return NilRuneListList
	} else {
		acc := NilRuneListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneList) FlatMapStringListList(f func(rune) StringListList) StringListList {
	if m.IsEmpty() {
		return NilStringListList
	} else {
		acc := NilStringListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneList) FlatMapBoolOptionList(f func(rune) BoolOptionList) BoolOptionList {
	if m.IsEmpty() {
		return NilBoolOptionList
	} else {
		acc := NilBoolOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneList) FlatMapAnyOptionList(f func(rune) AnyOptionList) AnyOptionList {
	if m.IsEmpty() {
		return NilAnyOptionList
	} else {
		acc := NilAnyOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneList) FlatMapByteOptionList(f func(rune) ByteOptionList) ByteOptionList {
	if m.IsEmpty() {
		return NilByteOptionList
	} else {
		acc := NilByteOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneList) FlatMapIntOptionList(f func(rune) IntOptionList) IntOptionList {
	if m.IsEmpty() {
		return NilIntOptionList
	} else {
		acc := NilIntOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneList) FlatMapInt32OptionList(f func(rune) Int32OptionList) Int32OptionList {
	if m.IsEmpty() {
		return NilInt32OptionList
	} else {
		acc := NilInt32OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneList) FlatMapInt64OptionList(f func(rune) Int64OptionList) Int64OptionList {
	if m.IsEmpty() {
		return NilInt64OptionList
	} else {
		acc := NilInt64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneList) FlatMapUintOptionList(f func(rune) UintOptionList) UintOptionList {
	if m.IsEmpty() {
		return NilUintOptionList
	} else {
		acc := NilUintOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneList) FlatMapUint64OptionList(f func(rune) Uint64OptionList) Uint64OptionList {
	if m.IsEmpty() {
		return NilUint64OptionList
	} else {
		acc := NilUint64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneList) FlatMapUintptrOptionList(f func(rune) UintptrOptionList) UintptrOptionList {
	if m.IsEmpty() {
		return NilUintptrOptionList
	} else {
		acc := NilUintptrOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneList) FlatMapFloat32OptionList(f func(rune) Float32OptionList) Float32OptionList {
	if m.IsEmpty() {
		return NilFloat32OptionList
	} else {
		acc := NilFloat32OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneList) FlatMapFloat64OptionList(f func(rune) Float64OptionList) Float64OptionList {
	if m.IsEmpty() {
		return NilFloat64OptionList
	} else {
		acc := NilFloat64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneList) FlatMapRuneOptionList(f func(rune) RuneOptionList) RuneOptionList {
	if m.IsEmpty() {
		return NilRuneOptionList
	} else {
		acc := NilRuneOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneList) FlatMapStringOptionList(f func(rune) StringOptionList) StringOptionList {
	if m.IsEmpty() {
		return NilStringOptionList
	} else {
		acc := NilStringOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringList) FlatMapBoolList(f func(string) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBoolList
	} else {
		acc := NilBoolList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringList) FlatMapAnyList(f func(string) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAnyList
	} else {
		acc := NilAnyList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringList) FlatMapByteList(f func(string) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByteList
	} else {
		acc := NilByteList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringList) FlatMapIntList(f func(string) IntList) IntList {
	if m.IsEmpty() {
		return NilIntList
	} else {
		acc := NilIntList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringList) FlatMapInt32List(f func(string) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32List
	} else {
		acc := NilInt32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringList) FlatMapInt64List(f func(string) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64List
	} else {
		acc := NilInt64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringList) FlatMapUintList(f func(string) UintList) UintList {
	if m.IsEmpty() {
		return NilUintList
	} else {
		acc := NilUintList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringList) FlatMapUint64List(f func(string) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64List
	} else {
		acc := NilUint64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringList) FlatMapUintptrList(f func(string) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptrList
	} else {
		acc := NilUintptrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringList) FlatMapFloat32List(f func(string) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32List
	} else {
		acc := NilFloat32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringList) FlatMapFloat64List(f func(string) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64List
	} else {
		acc := NilFloat64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringList) FlatMapRuneList(f func(string) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRuneList
	} else {
		acc := NilRuneList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringList) FlatMapStringList(f func(string) StringList) StringList {
	if m.IsEmpty() {
		return NilStringList
	} else {
		acc := NilStringList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringList) FlatMapBoolArrList(f func(string) BoolArrList) BoolArrList {
	if m.IsEmpty() {
		return NilBoolArrList
	} else {
		acc := NilBoolArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringList) FlatMapAnyArrList(f func(string) AnyArrList) AnyArrList {
	if m.IsEmpty() {
		return NilAnyArrList
	} else {
		acc := NilAnyArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringList) FlatMapByteArrList(f func(string) ByteArrList) ByteArrList {
	if m.IsEmpty() {
		return NilByteArrList
	} else {
		acc := NilByteArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringList) FlatMapIntArrList(f func(string) IntArrList) IntArrList {
	if m.IsEmpty() {
		return NilIntArrList
	} else {
		acc := NilIntArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringList) FlatMapInt32ArrList(f func(string) Int32ArrList) Int32ArrList {
	if m.IsEmpty() {
		return NilInt32ArrList
	} else {
		acc := NilInt32ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringList) FlatMapInt64ArrList(f func(string) Int64ArrList) Int64ArrList {
	if m.IsEmpty() {
		return NilInt64ArrList
	} else {
		acc := NilInt64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringList) FlatMapUintArrList(f func(string) UintArrList) UintArrList {
	if m.IsEmpty() {
		return NilUintArrList
	} else {
		acc := NilUintArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringList) FlatMapUint64ArrList(f func(string) Uint64ArrList) Uint64ArrList {
	if m.IsEmpty() {
		return NilUint64ArrList
	} else {
		acc := NilUint64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringList) FlatMapUintptrArrList(f func(string) UintptrArrList) UintptrArrList {
	if m.IsEmpty() {
		return NilUintptrArrList
	} else {
		acc := NilUintptrArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringList) FlatMapFloat32ArrList(f func(string) Float32ArrList) Float32ArrList {
	if m.IsEmpty() {
		return NilFloat32ArrList
	} else {
		acc := NilFloat32ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringList) FlatMapFloat64ArrList(f func(string) Float64ArrList) Float64ArrList {
	if m.IsEmpty() {
		return NilFloat64ArrList
	} else {
		acc := NilFloat64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringList) FlatMapRuneArrList(f func(string) RuneArrList) RuneArrList {
	if m.IsEmpty() {
		return NilRuneArrList
	} else {
		acc := NilRuneArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringList) FlatMapStringArrList(f func(string) StringArrList) StringArrList {
	if m.IsEmpty() {
		return NilStringArrList
	} else {
		acc := NilStringArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringList) FlatMapBoolListList(f func(string) BoolListList) BoolListList {
	if m.IsEmpty() {
		return NilBoolListList
	} else {
		acc := NilBoolListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringList) FlatMapAnyListList(f func(string) AnyListList) AnyListList {
	if m.IsEmpty() {
		return NilAnyListList
	} else {
		acc := NilAnyListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringList) FlatMapByteListList(f func(string) ByteListList) ByteListList {
	if m.IsEmpty() {
		return NilByteListList
	} else {
		acc := NilByteListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringList) FlatMapIntListList(f func(string) IntListList) IntListList {
	if m.IsEmpty() {
		return NilIntListList
	} else {
		acc := NilIntListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringList) FlatMapInt32ListList(f func(string) Int32ListList) Int32ListList {
	if m.IsEmpty() {
		return NilInt32ListList
	} else {
		acc := NilInt32ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringList) FlatMapInt64ListList(f func(string) Int64ListList) Int64ListList {
	if m.IsEmpty() {
		return NilInt64ListList
	} else {
		acc := NilInt64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringList) FlatMapUintListList(f func(string) UintListList) UintListList {
	if m.IsEmpty() {
		return NilUintListList
	} else {
		acc := NilUintListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringList) FlatMapUint64ListList(f func(string) Uint64ListList) Uint64ListList {
	if m.IsEmpty() {
		return NilUint64ListList
	} else {
		acc := NilUint64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringList) FlatMapUintptrListList(f func(string) UintptrListList) UintptrListList {
	if m.IsEmpty() {
		return NilUintptrListList
	} else {
		acc := NilUintptrListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringList) FlatMapFloat32ListList(f func(string) Float32ListList) Float32ListList {
	if m.IsEmpty() {
		return NilFloat32ListList
	} else {
		acc := NilFloat32ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringList) FlatMapFloat64ListList(f func(string) Float64ListList) Float64ListList {
	if m.IsEmpty() {
		return NilFloat64ListList
	} else {
		acc := NilFloat64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringList) FlatMapRuneListList(f func(string) RuneListList) RuneListList {
	if m.IsEmpty() {
		return NilRuneListList
	} else {
		acc := NilRuneListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringList) FlatMapStringListList(f func(string) StringListList) StringListList {
	if m.IsEmpty() {
		return NilStringListList
	} else {
		acc := NilStringListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringList) FlatMapBoolOptionList(f func(string) BoolOptionList) BoolOptionList {
	if m.IsEmpty() {
		return NilBoolOptionList
	} else {
		acc := NilBoolOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringList) FlatMapAnyOptionList(f func(string) AnyOptionList) AnyOptionList {
	if m.IsEmpty() {
		return NilAnyOptionList
	} else {
		acc := NilAnyOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringList) FlatMapByteOptionList(f func(string) ByteOptionList) ByteOptionList {
	if m.IsEmpty() {
		return NilByteOptionList
	} else {
		acc := NilByteOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringList) FlatMapIntOptionList(f func(string) IntOptionList) IntOptionList {
	if m.IsEmpty() {
		return NilIntOptionList
	} else {
		acc := NilIntOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringList) FlatMapInt32OptionList(f func(string) Int32OptionList) Int32OptionList {
	if m.IsEmpty() {
		return NilInt32OptionList
	} else {
		acc := NilInt32OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringList) FlatMapInt64OptionList(f func(string) Int64OptionList) Int64OptionList {
	if m.IsEmpty() {
		return NilInt64OptionList
	} else {
		acc := NilInt64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringList) FlatMapUintOptionList(f func(string) UintOptionList) UintOptionList {
	if m.IsEmpty() {
		return NilUintOptionList
	} else {
		acc := NilUintOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringList) FlatMapUint64OptionList(f func(string) Uint64OptionList) Uint64OptionList {
	if m.IsEmpty() {
		return NilUint64OptionList
	} else {
		acc := NilUint64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringList) FlatMapUintptrOptionList(f func(string) UintptrOptionList) UintptrOptionList {
	if m.IsEmpty() {
		return NilUintptrOptionList
	} else {
		acc := NilUintptrOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringList) FlatMapFloat32OptionList(f func(string) Float32OptionList) Float32OptionList {
	if m.IsEmpty() {
		return NilFloat32OptionList
	} else {
		acc := NilFloat32OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringList) FlatMapFloat64OptionList(f func(string) Float64OptionList) Float64OptionList {
	if m.IsEmpty() {
		return NilFloat64OptionList
	} else {
		acc := NilFloat64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringList) FlatMapRuneOptionList(f func(string) RuneOptionList) RuneOptionList {
	if m.IsEmpty() {
		return NilRuneOptionList
	} else {
		acc := NilRuneOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringList) FlatMapStringOptionList(f func(string) StringOptionList) StringOptionList {
	if m.IsEmpty() {
		return NilStringOptionList
	} else {
		acc := NilStringOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrList) FlatMapBoolList(f func([]bool) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBoolList
	} else {
		acc := NilBoolList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrList) FlatMapAnyList(f func([]bool) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAnyList
	} else {
		acc := NilAnyList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrList) FlatMapByteList(f func([]bool) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByteList
	} else {
		acc := NilByteList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrList) FlatMapIntList(f func([]bool) IntList) IntList {
	if m.IsEmpty() {
		return NilIntList
	} else {
		acc := NilIntList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrList) FlatMapInt32List(f func([]bool) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32List
	} else {
		acc := NilInt32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrList) FlatMapInt64List(f func([]bool) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64List
	} else {
		acc := NilInt64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrList) FlatMapUintList(f func([]bool) UintList) UintList {
	if m.IsEmpty() {
		return NilUintList
	} else {
		acc := NilUintList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrList) FlatMapUint64List(f func([]bool) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64List
	} else {
		acc := NilUint64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrList) FlatMapUintptrList(f func([]bool) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptrList
	} else {
		acc := NilUintptrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrList) FlatMapFloat32List(f func([]bool) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32List
	} else {
		acc := NilFloat32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrList) FlatMapFloat64List(f func([]bool) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64List
	} else {
		acc := NilFloat64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrList) FlatMapRuneList(f func([]bool) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRuneList
	} else {
		acc := NilRuneList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrList) FlatMapStringList(f func([]bool) StringList) StringList {
	if m.IsEmpty() {
		return NilStringList
	} else {
		acc := NilStringList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrList) FlatMapBoolArrList(f func([]bool) BoolArrList) BoolArrList {
	if m.IsEmpty() {
		return NilBoolArrList
	} else {
		acc := NilBoolArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrList) FlatMapAnyArrList(f func([]bool) AnyArrList) AnyArrList {
	if m.IsEmpty() {
		return NilAnyArrList
	} else {
		acc := NilAnyArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrList) FlatMapByteArrList(f func([]bool) ByteArrList) ByteArrList {
	if m.IsEmpty() {
		return NilByteArrList
	} else {
		acc := NilByteArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrList) FlatMapIntArrList(f func([]bool) IntArrList) IntArrList {
	if m.IsEmpty() {
		return NilIntArrList
	} else {
		acc := NilIntArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrList) FlatMapInt32ArrList(f func([]bool) Int32ArrList) Int32ArrList {
	if m.IsEmpty() {
		return NilInt32ArrList
	} else {
		acc := NilInt32ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrList) FlatMapInt64ArrList(f func([]bool) Int64ArrList) Int64ArrList {
	if m.IsEmpty() {
		return NilInt64ArrList
	} else {
		acc := NilInt64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrList) FlatMapUintArrList(f func([]bool) UintArrList) UintArrList {
	if m.IsEmpty() {
		return NilUintArrList
	} else {
		acc := NilUintArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrList) FlatMapUint64ArrList(f func([]bool) Uint64ArrList) Uint64ArrList {
	if m.IsEmpty() {
		return NilUint64ArrList
	} else {
		acc := NilUint64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrList) FlatMapUintptrArrList(f func([]bool) UintptrArrList) UintptrArrList {
	if m.IsEmpty() {
		return NilUintptrArrList
	} else {
		acc := NilUintptrArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrList) FlatMapFloat32ArrList(f func([]bool) Float32ArrList) Float32ArrList {
	if m.IsEmpty() {
		return NilFloat32ArrList
	} else {
		acc := NilFloat32ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrList) FlatMapFloat64ArrList(f func([]bool) Float64ArrList) Float64ArrList {
	if m.IsEmpty() {
		return NilFloat64ArrList
	} else {
		acc := NilFloat64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrList) FlatMapRuneArrList(f func([]bool) RuneArrList) RuneArrList {
	if m.IsEmpty() {
		return NilRuneArrList
	} else {
		acc := NilRuneArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrList) FlatMapStringArrList(f func([]bool) StringArrList) StringArrList {
	if m.IsEmpty() {
		return NilStringArrList
	} else {
		acc := NilStringArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrList) FlatMapBoolListList(f func([]bool) BoolListList) BoolListList {
	if m.IsEmpty() {
		return NilBoolListList
	} else {
		acc := NilBoolListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrList) FlatMapAnyListList(f func([]bool) AnyListList) AnyListList {
	if m.IsEmpty() {
		return NilAnyListList
	} else {
		acc := NilAnyListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrList) FlatMapByteListList(f func([]bool) ByteListList) ByteListList {
	if m.IsEmpty() {
		return NilByteListList
	} else {
		acc := NilByteListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrList) FlatMapIntListList(f func([]bool) IntListList) IntListList {
	if m.IsEmpty() {
		return NilIntListList
	} else {
		acc := NilIntListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrList) FlatMapInt32ListList(f func([]bool) Int32ListList) Int32ListList {
	if m.IsEmpty() {
		return NilInt32ListList
	} else {
		acc := NilInt32ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrList) FlatMapInt64ListList(f func([]bool) Int64ListList) Int64ListList {
	if m.IsEmpty() {
		return NilInt64ListList
	} else {
		acc := NilInt64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrList) FlatMapUintListList(f func([]bool) UintListList) UintListList {
	if m.IsEmpty() {
		return NilUintListList
	} else {
		acc := NilUintListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrList) FlatMapUint64ListList(f func([]bool) Uint64ListList) Uint64ListList {
	if m.IsEmpty() {
		return NilUint64ListList
	} else {
		acc := NilUint64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrList) FlatMapUintptrListList(f func([]bool) UintptrListList) UintptrListList {
	if m.IsEmpty() {
		return NilUintptrListList
	} else {
		acc := NilUintptrListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrList) FlatMapFloat32ListList(f func([]bool) Float32ListList) Float32ListList {
	if m.IsEmpty() {
		return NilFloat32ListList
	} else {
		acc := NilFloat32ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrList) FlatMapFloat64ListList(f func([]bool) Float64ListList) Float64ListList {
	if m.IsEmpty() {
		return NilFloat64ListList
	} else {
		acc := NilFloat64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrList) FlatMapRuneListList(f func([]bool) RuneListList) RuneListList {
	if m.IsEmpty() {
		return NilRuneListList
	} else {
		acc := NilRuneListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrList) FlatMapStringListList(f func([]bool) StringListList) StringListList {
	if m.IsEmpty() {
		return NilStringListList
	} else {
		acc := NilStringListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrList) FlatMapBoolOptionList(f func([]bool) BoolOptionList) BoolOptionList {
	if m.IsEmpty() {
		return NilBoolOptionList
	} else {
		acc := NilBoolOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrList) FlatMapAnyOptionList(f func([]bool) AnyOptionList) AnyOptionList {
	if m.IsEmpty() {
		return NilAnyOptionList
	} else {
		acc := NilAnyOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrList) FlatMapByteOptionList(f func([]bool) ByteOptionList) ByteOptionList {
	if m.IsEmpty() {
		return NilByteOptionList
	} else {
		acc := NilByteOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrList) FlatMapIntOptionList(f func([]bool) IntOptionList) IntOptionList {
	if m.IsEmpty() {
		return NilIntOptionList
	} else {
		acc := NilIntOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrList) FlatMapInt32OptionList(f func([]bool) Int32OptionList) Int32OptionList {
	if m.IsEmpty() {
		return NilInt32OptionList
	} else {
		acc := NilInt32OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrList) FlatMapInt64OptionList(f func([]bool) Int64OptionList) Int64OptionList {
	if m.IsEmpty() {
		return NilInt64OptionList
	} else {
		acc := NilInt64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrList) FlatMapUintOptionList(f func([]bool) UintOptionList) UintOptionList {
	if m.IsEmpty() {
		return NilUintOptionList
	} else {
		acc := NilUintOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrList) FlatMapUint64OptionList(f func([]bool) Uint64OptionList) Uint64OptionList {
	if m.IsEmpty() {
		return NilUint64OptionList
	} else {
		acc := NilUint64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrList) FlatMapUintptrOptionList(f func([]bool) UintptrOptionList) UintptrOptionList {
	if m.IsEmpty() {
		return NilUintptrOptionList
	} else {
		acc := NilUintptrOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrList) FlatMapFloat32OptionList(f func([]bool) Float32OptionList) Float32OptionList {
	if m.IsEmpty() {
		return NilFloat32OptionList
	} else {
		acc := NilFloat32OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrList) FlatMapFloat64OptionList(f func([]bool) Float64OptionList) Float64OptionList {
	if m.IsEmpty() {
		return NilFloat64OptionList
	} else {
		acc := NilFloat64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrList) FlatMapRuneOptionList(f func([]bool) RuneOptionList) RuneOptionList {
	if m.IsEmpty() {
		return NilRuneOptionList
	} else {
		acc := NilRuneOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrList) FlatMapStringOptionList(f func([]bool) StringOptionList) StringOptionList {
	if m.IsEmpty() {
		return NilStringOptionList
	} else {
		acc := NilStringOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrList) FlatMapBoolList(f func([]Any) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBoolList
	} else {
		acc := NilBoolList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrList) FlatMapAnyList(f func([]Any) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAnyList
	} else {
		acc := NilAnyList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrList) FlatMapByteList(f func([]Any) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByteList
	} else {
		acc := NilByteList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrList) FlatMapIntList(f func([]Any) IntList) IntList {
	if m.IsEmpty() {
		return NilIntList
	} else {
		acc := NilIntList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrList) FlatMapInt32List(f func([]Any) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32List
	} else {
		acc := NilInt32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrList) FlatMapInt64List(f func([]Any) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64List
	} else {
		acc := NilInt64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrList) FlatMapUintList(f func([]Any) UintList) UintList {
	if m.IsEmpty() {
		return NilUintList
	} else {
		acc := NilUintList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrList) FlatMapUint64List(f func([]Any) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64List
	} else {
		acc := NilUint64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrList) FlatMapUintptrList(f func([]Any) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptrList
	} else {
		acc := NilUintptrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrList) FlatMapFloat32List(f func([]Any) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32List
	} else {
		acc := NilFloat32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrList) FlatMapFloat64List(f func([]Any) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64List
	} else {
		acc := NilFloat64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrList) FlatMapRuneList(f func([]Any) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRuneList
	} else {
		acc := NilRuneList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrList) FlatMapStringList(f func([]Any) StringList) StringList {
	if m.IsEmpty() {
		return NilStringList
	} else {
		acc := NilStringList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrList) FlatMapBoolArrList(f func([]Any) BoolArrList) BoolArrList {
	if m.IsEmpty() {
		return NilBoolArrList
	} else {
		acc := NilBoolArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrList) FlatMapAnyArrList(f func([]Any) AnyArrList) AnyArrList {
	if m.IsEmpty() {
		return NilAnyArrList
	} else {
		acc := NilAnyArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrList) FlatMapByteArrList(f func([]Any) ByteArrList) ByteArrList {
	if m.IsEmpty() {
		return NilByteArrList
	} else {
		acc := NilByteArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrList) FlatMapIntArrList(f func([]Any) IntArrList) IntArrList {
	if m.IsEmpty() {
		return NilIntArrList
	} else {
		acc := NilIntArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrList) FlatMapInt32ArrList(f func([]Any) Int32ArrList) Int32ArrList {
	if m.IsEmpty() {
		return NilInt32ArrList
	} else {
		acc := NilInt32ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrList) FlatMapInt64ArrList(f func([]Any) Int64ArrList) Int64ArrList {
	if m.IsEmpty() {
		return NilInt64ArrList
	} else {
		acc := NilInt64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrList) FlatMapUintArrList(f func([]Any) UintArrList) UintArrList {
	if m.IsEmpty() {
		return NilUintArrList
	} else {
		acc := NilUintArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrList) FlatMapUint64ArrList(f func([]Any) Uint64ArrList) Uint64ArrList {
	if m.IsEmpty() {
		return NilUint64ArrList
	} else {
		acc := NilUint64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrList) FlatMapUintptrArrList(f func([]Any) UintptrArrList) UintptrArrList {
	if m.IsEmpty() {
		return NilUintptrArrList
	} else {
		acc := NilUintptrArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrList) FlatMapFloat32ArrList(f func([]Any) Float32ArrList) Float32ArrList {
	if m.IsEmpty() {
		return NilFloat32ArrList
	} else {
		acc := NilFloat32ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrList) FlatMapFloat64ArrList(f func([]Any) Float64ArrList) Float64ArrList {
	if m.IsEmpty() {
		return NilFloat64ArrList
	} else {
		acc := NilFloat64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrList) FlatMapRuneArrList(f func([]Any) RuneArrList) RuneArrList {
	if m.IsEmpty() {
		return NilRuneArrList
	} else {
		acc := NilRuneArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrList) FlatMapStringArrList(f func([]Any) StringArrList) StringArrList {
	if m.IsEmpty() {
		return NilStringArrList
	} else {
		acc := NilStringArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrList) FlatMapBoolListList(f func([]Any) BoolListList) BoolListList {
	if m.IsEmpty() {
		return NilBoolListList
	} else {
		acc := NilBoolListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrList) FlatMapAnyListList(f func([]Any) AnyListList) AnyListList {
	if m.IsEmpty() {
		return NilAnyListList
	} else {
		acc := NilAnyListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrList) FlatMapByteListList(f func([]Any) ByteListList) ByteListList {
	if m.IsEmpty() {
		return NilByteListList
	} else {
		acc := NilByteListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrList) FlatMapIntListList(f func([]Any) IntListList) IntListList {
	if m.IsEmpty() {
		return NilIntListList
	} else {
		acc := NilIntListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrList) FlatMapInt32ListList(f func([]Any) Int32ListList) Int32ListList {
	if m.IsEmpty() {
		return NilInt32ListList
	} else {
		acc := NilInt32ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrList) FlatMapInt64ListList(f func([]Any) Int64ListList) Int64ListList {
	if m.IsEmpty() {
		return NilInt64ListList
	} else {
		acc := NilInt64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrList) FlatMapUintListList(f func([]Any) UintListList) UintListList {
	if m.IsEmpty() {
		return NilUintListList
	} else {
		acc := NilUintListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrList) FlatMapUint64ListList(f func([]Any) Uint64ListList) Uint64ListList {
	if m.IsEmpty() {
		return NilUint64ListList
	} else {
		acc := NilUint64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrList) FlatMapUintptrListList(f func([]Any) UintptrListList) UintptrListList {
	if m.IsEmpty() {
		return NilUintptrListList
	} else {
		acc := NilUintptrListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrList) FlatMapFloat32ListList(f func([]Any) Float32ListList) Float32ListList {
	if m.IsEmpty() {
		return NilFloat32ListList
	} else {
		acc := NilFloat32ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrList) FlatMapFloat64ListList(f func([]Any) Float64ListList) Float64ListList {
	if m.IsEmpty() {
		return NilFloat64ListList
	} else {
		acc := NilFloat64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrList) FlatMapRuneListList(f func([]Any) RuneListList) RuneListList {
	if m.IsEmpty() {
		return NilRuneListList
	} else {
		acc := NilRuneListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrList) FlatMapStringListList(f func([]Any) StringListList) StringListList {
	if m.IsEmpty() {
		return NilStringListList
	} else {
		acc := NilStringListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrList) FlatMapBoolOptionList(f func([]Any) BoolOptionList) BoolOptionList {
	if m.IsEmpty() {
		return NilBoolOptionList
	} else {
		acc := NilBoolOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrList) FlatMapAnyOptionList(f func([]Any) AnyOptionList) AnyOptionList {
	if m.IsEmpty() {
		return NilAnyOptionList
	} else {
		acc := NilAnyOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrList) FlatMapByteOptionList(f func([]Any) ByteOptionList) ByteOptionList {
	if m.IsEmpty() {
		return NilByteOptionList
	} else {
		acc := NilByteOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrList) FlatMapIntOptionList(f func([]Any) IntOptionList) IntOptionList {
	if m.IsEmpty() {
		return NilIntOptionList
	} else {
		acc := NilIntOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrList) FlatMapInt32OptionList(f func([]Any) Int32OptionList) Int32OptionList {
	if m.IsEmpty() {
		return NilInt32OptionList
	} else {
		acc := NilInt32OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrList) FlatMapInt64OptionList(f func([]Any) Int64OptionList) Int64OptionList {
	if m.IsEmpty() {
		return NilInt64OptionList
	} else {
		acc := NilInt64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrList) FlatMapUintOptionList(f func([]Any) UintOptionList) UintOptionList {
	if m.IsEmpty() {
		return NilUintOptionList
	} else {
		acc := NilUintOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrList) FlatMapUint64OptionList(f func([]Any) Uint64OptionList) Uint64OptionList {
	if m.IsEmpty() {
		return NilUint64OptionList
	} else {
		acc := NilUint64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrList) FlatMapUintptrOptionList(f func([]Any) UintptrOptionList) UintptrOptionList {
	if m.IsEmpty() {
		return NilUintptrOptionList
	} else {
		acc := NilUintptrOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrList) FlatMapFloat32OptionList(f func([]Any) Float32OptionList) Float32OptionList {
	if m.IsEmpty() {
		return NilFloat32OptionList
	} else {
		acc := NilFloat32OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrList) FlatMapFloat64OptionList(f func([]Any) Float64OptionList) Float64OptionList {
	if m.IsEmpty() {
		return NilFloat64OptionList
	} else {
		acc := NilFloat64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrList) FlatMapRuneOptionList(f func([]Any) RuneOptionList) RuneOptionList {
	if m.IsEmpty() {
		return NilRuneOptionList
	} else {
		acc := NilRuneOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrList) FlatMapStringOptionList(f func([]Any) StringOptionList) StringOptionList {
	if m.IsEmpty() {
		return NilStringOptionList
	} else {
		acc := NilStringOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrList) FlatMapBoolList(f func([]byte) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBoolList
	} else {
		acc := NilBoolList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrList) FlatMapAnyList(f func([]byte) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAnyList
	} else {
		acc := NilAnyList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrList) FlatMapByteList(f func([]byte) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByteList
	} else {
		acc := NilByteList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrList) FlatMapIntList(f func([]byte) IntList) IntList {
	if m.IsEmpty() {
		return NilIntList
	} else {
		acc := NilIntList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrList) FlatMapInt32List(f func([]byte) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32List
	} else {
		acc := NilInt32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrList) FlatMapInt64List(f func([]byte) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64List
	} else {
		acc := NilInt64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrList) FlatMapUintList(f func([]byte) UintList) UintList {
	if m.IsEmpty() {
		return NilUintList
	} else {
		acc := NilUintList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrList) FlatMapUint64List(f func([]byte) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64List
	} else {
		acc := NilUint64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrList) FlatMapUintptrList(f func([]byte) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptrList
	} else {
		acc := NilUintptrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrList) FlatMapFloat32List(f func([]byte) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32List
	} else {
		acc := NilFloat32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrList) FlatMapFloat64List(f func([]byte) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64List
	} else {
		acc := NilFloat64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrList) FlatMapRuneList(f func([]byte) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRuneList
	} else {
		acc := NilRuneList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrList) FlatMapStringList(f func([]byte) StringList) StringList {
	if m.IsEmpty() {
		return NilStringList
	} else {
		acc := NilStringList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrList) FlatMapBoolArrList(f func([]byte) BoolArrList) BoolArrList {
	if m.IsEmpty() {
		return NilBoolArrList
	} else {
		acc := NilBoolArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrList) FlatMapAnyArrList(f func([]byte) AnyArrList) AnyArrList {
	if m.IsEmpty() {
		return NilAnyArrList
	} else {
		acc := NilAnyArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrList) FlatMapByteArrList(f func([]byte) ByteArrList) ByteArrList {
	if m.IsEmpty() {
		return NilByteArrList
	} else {
		acc := NilByteArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrList) FlatMapIntArrList(f func([]byte) IntArrList) IntArrList {
	if m.IsEmpty() {
		return NilIntArrList
	} else {
		acc := NilIntArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrList) FlatMapInt32ArrList(f func([]byte) Int32ArrList) Int32ArrList {
	if m.IsEmpty() {
		return NilInt32ArrList
	} else {
		acc := NilInt32ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrList) FlatMapInt64ArrList(f func([]byte) Int64ArrList) Int64ArrList {
	if m.IsEmpty() {
		return NilInt64ArrList
	} else {
		acc := NilInt64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrList) FlatMapUintArrList(f func([]byte) UintArrList) UintArrList {
	if m.IsEmpty() {
		return NilUintArrList
	} else {
		acc := NilUintArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrList) FlatMapUint64ArrList(f func([]byte) Uint64ArrList) Uint64ArrList {
	if m.IsEmpty() {
		return NilUint64ArrList
	} else {
		acc := NilUint64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrList) FlatMapUintptrArrList(f func([]byte) UintptrArrList) UintptrArrList {
	if m.IsEmpty() {
		return NilUintptrArrList
	} else {
		acc := NilUintptrArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrList) FlatMapFloat32ArrList(f func([]byte) Float32ArrList) Float32ArrList {
	if m.IsEmpty() {
		return NilFloat32ArrList
	} else {
		acc := NilFloat32ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrList) FlatMapFloat64ArrList(f func([]byte) Float64ArrList) Float64ArrList {
	if m.IsEmpty() {
		return NilFloat64ArrList
	} else {
		acc := NilFloat64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrList) FlatMapRuneArrList(f func([]byte) RuneArrList) RuneArrList {
	if m.IsEmpty() {
		return NilRuneArrList
	} else {
		acc := NilRuneArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrList) FlatMapStringArrList(f func([]byte) StringArrList) StringArrList {
	if m.IsEmpty() {
		return NilStringArrList
	} else {
		acc := NilStringArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrList) FlatMapBoolListList(f func([]byte) BoolListList) BoolListList {
	if m.IsEmpty() {
		return NilBoolListList
	} else {
		acc := NilBoolListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrList) FlatMapAnyListList(f func([]byte) AnyListList) AnyListList {
	if m.IsEmpty() {
		return NilAnyListList
	} else {
		acc := NilAnyListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrList) FlatMapByteListList(f func([]byte) ByteListList) ByteListList {
	if m.IsEmpty() {
		return NilByteListList
	} else {
		acc := NilByteListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrList) FlatMapIntListList(f func([]byte) IntListList) IntListList {
	if m.IsEmpty() {
		return NilIntListList
	} else {
		acc := NilIntListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrList) FlatMapInt32ListList(f func([]byte) Int32ListList) Int32ListList {
	if m.IsEmpty() {
		return NilInt32ListList
	} else {
		acc := NilInt32ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrList) FlatMapInt64ListList(f func([]byte) Int64ListList) Int64ListList {
	if m.IsEmpty() {
		return NilInt64ListList
	} else {
		acc := NilInt64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrList) FlatMapUintListList(f func([]byte) UintListList) UintListList {
	if m.IsEmpty() {
		return NilUintListList
	} else {
		acc := NilUintListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrList) FlatMapUint64ListList(f func([]byte) Uint64ListList) Uint64ListList {
	if m.IsEmpty() {
		return NilUint64ListList
	} else {
		acc := NilUint64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrList) FlatMapUintptrListList(f func([]byte) UintptrListList) UintptrListList {
	if m.IsEmpty() {
		return NilUintptrListList
	} else {
		acc := NilUintptrListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrList) FlatMapFloat32ListList(f func([]byte) Float32ListList) Float32ListList {
	if m.IsEmpty() {
		return NilFloat32ListList
	} else {
		acc := NilFloat32ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrList) FlatMapFloat64ListList(f func([]byte) Float64ListList) Float64ListList {
	if m.IsEmpty() {
		return NilFloat64ListList
	} else {
		acc := NilFloat64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrList) FlatMapRuneListList(f func([]byte) RuneListList) RuneListList {
	if m.IsEmpty() {
		return NilRuneListList
	} else {
		acc := NilRuneListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrList) FlatMapStringListList(f func([]byte) StringListList) StringListList {
	if m.IsEmpty() {
		return NilStringListList
	} else {
		acc := NilStringListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrList) FlatMapBoolOptionList(f func([]byte) BoolOptionList) BoolOptionList {
	if m.IsEmpty() {
		return NilBoolOptionList
	} else {
		acc := NilBoolOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrList) FlatMapAnyOptionList(f func([]byte) AnyOptionList) AnyOptionList {
	if m.IsEmpty() {
		return NilAnyOptionList
	} else {
		acc := NilAnyOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrList) FlatMapByteOptionList(f func([]byte) ByteOptionList) ByteOptionList {
	if m.IsEmpty() {
		return NilByteOptionList
	} else {
		acc := NilByteOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrList) FlatMapIntOptionList(f func([]byte) IntOptionList) IntOptionList {
	if m.IsEmpty() {
		return NilIntOptionList
	} else {
		acc := NilIntOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrList) FlatMapInt32OptionList(f func([]byte) Int32OptionList) Int32OptionList {
	if m.IsEmpty() {
		return NilInt32OptionList
	} else {
		acc := NilInt32OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrList) FlatMapInt64OptionList(f func([]byte) Int64OptionList) Int64OptionList {
	if m.IsEmpty() {
		return NilInt64OptionList
	} else {
		acc := NilInt64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrList) FlatMapUintOptionList(f func([]byte) UintOptionList) UintOptionList {
	if m.IsEmpty() {
		return NilUintOptionList
	} else {
		acc := NilUintOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrList) FlatMapUint64OptionList(f func([]byte) Uint64OptionList) Uint64OptionList {
	if m.IsEmpty() {
		return NilUint64OptionList
	} else {
		acc := NilUint64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrList) FlatMapUintptrOptionList(f func([]byte) UintptrOptionList) UintptrOptionList {
	if m.IsEmpty() {
		return NilUintptrOptionList
	} else {
		acc := NilUintptrOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrList) FlatMapFloat32OptionList(f func([]byte) Float32OptionList) Float32OptionList {
	if m.IsEmpty() {
		return NilFloat32OptionList
	} else {
		acc := NilFloat32OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrList) FlatMapFloat64OptionList(f func([]byte) Float64OptionList) Float64OptionList {
	if m.IsEmpty() {
		return NilFloat64OptionList
	} else {
		acc := NilFloat64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrList) FlatMapRuneOptionList(f func([]byte) RuneOptionList) RuneOptionList {
	if m.IsEmpty() {
		return NilRuneOptionList
	} else {
		acc := NilRuneOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrList) FlatMapStringOptionList(f func([]byte) StringOptionList) StringOptionList {
	if m.IsEmpty() {
		return NilStringOptionList
	} else {
		acc := NilStringOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrList) FlatMapBoolList(f func([]int) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBoolList
	} else {
		acc := NilBoolList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrList) FlatMapAnyList(f func([]int) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAnyList
	} else {
		acc := NilAnyList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrList) FlatMapByteList(f func([]int) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByteList
	} else {
		acc := NilByteList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrList) FlatMapIntList(f func([]int) IntList) IntList {
	if m.IsEmpty() {
		return NilIntList
	} else {
		acc := NilIntList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrList) FlatMapInt32List(f func([]int) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32List
	} else {
		acc := NilInt32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrList) FlatMapInt64List(f func([]int) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64List
	} else {
		acc := NilInt64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrList) FlatMapUintList(f func([]int) UintList) UintList {
	if m.IsEmpty() {
		return NilUintList
	} else {
		acc := NilUintList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrList) FlatMapUint64List(f func([]int) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64List
	} else {
		acc := NilUint64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrList) FlatMapUintptrList(f func([]int) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptrList
	} else {
		acc := NilUintptrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrList) FlatMapFloat32List(f func([]int) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32List
	} else {
		acc := NilFloat32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrList) FlatMapFloat64List(f func([]int) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64List
	} else {
		acc := NilFloat64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrList) FlatMapRuneList(f func([]int) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRuneList
	} else {
		acc := NilRuneList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrList) FlatMapStringList(f func([]int) StringList) StringList {
	if m.IsEmpty() {
		return NilStringList
	} else {
		acc := NilStringList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrList) FlatMapBoolArrList(f func([]int) BoolArrList) BoolArrList {
	if m.IsEmpty() {
		return NilBoolArrList
	} else {
		acc := NilBoolArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrList) FlatMapAnyArrList(f func([]int) AnyArrList) AnyArrList {
	if m.IsEmpty() {
		return NilAnyArrList
	} else {
		acc := NilAnyArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrList) FlatMapByteArrList(f func([]int) ByteArrList) ByteArrList {
	if m.IsEmpty() {
		return NilByteArrList
	} else {
		acc := NilByteArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrList) FlatMapIntArrList(f func([]int) IntArrList) IntArrList {
	if m.IsEmpty() {
		return NilIntArrList
	} else {
		acc := NilIntArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrList) FlatMapInt32ArrList(f func([]int) Int32ArrList) Int32ArrList {
	if m.IsEmpty() {
		return NilInt32ArrList
	} else {
		acc := NilInt32ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrList) FlatMapInt64ArrList(f func([]int) Int64ArrList) Int64ArrList {
	if m.IsEmpty() {
		return NilInt64ArrList
	} else {
		acc := NilInt64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrList) FlatMapUintArrList(f func([]int) UintArrList) UintArrList {
	if m.IsEmpty() {
		return NilUintArrList
	} else {
		acc := NilUintArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrList) FlatMapUint64ArrList(f func([]int) Uint64ArrList) Uint64ArrList {
	if m.IsEmpty() {
		return NilUint64ArrList
	} else {
		acc := NilUint64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrList) FlatMapUintptrArrList(f func([]int) UintptrArrList) UintptrArrList {
	if m.IsEmpty() {
		return NilUintptrArrList
	} else {
		acc := NilUintptrArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrList) FlatMapFloat32ArrList(f func([]int) Float32ArrList) Float32ArrList {
	if m.IsEmpty() {
		return NilFloat32ArrList
	} else {
		acc := NilFloat32ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrList) FlatMapFloat64ArrList(f func([]int) Float64ArrList) Float64ArrList {
	if m.IsEmpty() {
		return NilFloat64ArrList
	} else {
		acc := NilFloat64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrList) FlatMapRuneArrList(f func([]int) RuneArrList) RuneArrList {
	if m.IsEmpty() {
		return NilRuneArrList
	} else {
		acc := NilRuneArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrList) FlatMapStringArrList(f func([]int) StringArrList) StringArrList {
	if m.IsEmpty() {
		return NilStringArrList
	} else {
		acc := NilStringArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrList) FlatMapBoolListList(f func([]int) BoolListList) BoolListList {
	if m.IsEmpty() {
		return NilBoolListList
	} else {
		acc := NilBoolListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrList) FlatMapAnyListList(f func([]int) AnyListList) AnyListList {
	if m.IsEmpty() {
		return NilAnyListList
	} else {
		acc := NilAnyListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrList) FlatMapByteListList(f func([]int) ByteListList) ByteListList {
	if m.IsEmpty() {
		return NilByteListList
	} else {
		acc := NilByteListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrList) FlatMapIntListList(f func([]int) IntListList) IntListList {
	if m.IsEmpty() {
		return NilIntListList
	} else {
		acc := NilIntListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrList) FlatMapInt32ListList(f func([]int) Int32ListList) Int32ListList {
	if m.IsEmpty() {
		return NilInt32ListList
	} else {
		acc := NilInt32ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrList) FlatMapInt64ListList(f func([]int) Int64ListList) Int64ListList {
	if m.IsEmpty() {
		return NilInt64ListList
	} else {
		acc := NilInt64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrList) FlatMapUintListList(f func([]int) UintListList) UintListList {
	if m.IsEmpty() {
		return NilUintListList
	} else {
		acc := NilUintListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrList) FlatMapUint64ListList(f func([]int) Uint64ListList) Uint64ListList {
	if m.IsEmpty() {
		return NilUint64ListList
	} else {
		acc := NilUint64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrList) FlatMapUintptrListList(f func([]int) UintptrListList) UintptrListList {
	if m.IsEmpty() {
		return NilUintptrListList
	} else {
		acc := NilUintptrListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrList) FlatMapFloat32ListList(f func([]int) Float32ListList) Float32ListList {
	if m.IsEmpty() {
		return NilFloat32ListList
	} else {
		acc := NilFloat32ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrList) FlatMapFloat64ListList(f func([]int) Float64ListList) Float64ListList {
	if m.IsEmpty() {
		return NilFloat64ListList
	} else {
		acc := NilFloat64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrList) FlatMapRuneListList(f func([]int) RuneListList) RuneListList {
	if m.IsEmpty() {
		return NilRuneListList
	} else {
		acc := NilRuneListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrList) FlatMapStringListList(f func([]int) StringListList) StringListList {
	if m.IsEmpty() {
		return NilStringListList
	} else {
		acc := NilStringListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrList) FlatMapBoolOptionList(f func([]int) BoolOptionList) BoolOptionList {
	if m.IsEmpty() {
		return NilBoolOptionList
	} else {
		acc := NilBoolOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrList) FlatMapAnyOptionList(f func([]int) AnyOptionList) AnyOptionList {
	if m.IsEmpty() {
		return NilAnyOptionList
	} else {
		acc := NilAnyOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrList) FlatMapByteOptionList(f func([]int) ByteOptionList) ByteOptionList {
	if m.IsEmpty() {
		return NilByteOptionList
	} else {
		acc := NilByteOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrList) FlatMapIntOptionList(f func([]int) IntOptionList) IntOptionList {
	if m.IsEmpty() {
		return NilIntOptionList
	} else {
		acc := NilIntOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrList) FlatMapInt32OptionList(f func([]int) Int32OptionList) Int32OptionList {
	if m.IsEmpty() {
		return NilInt32OptionList
	} else {
		acc := NilInt32OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrList) FlatMapInt64OptionList(f func([]int) Int64OptionList) Int64OptionList {
	if m.IsEmpty() {
		return NilInt64OptionList
	} else {
		acc := NilInt64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrList) FlatMapUintOptionList(f func([]int) UintOptionList) UintOptionList {
	if m.IsEmpty() {
		return NilUintOptionList
	} else {
		acc := NilUintOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrList) FlatMapUint64OptionList(f func([]int) Uint64OptionList) Uint64OptionList {
	if m.IsEmpty() {
		return NilUint64OptionList
	} else {
		acc := NilUint64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrList) FlatMapUintptrOptionList(f func([]int) UintptrOptionList) UintptrOptionList {
	if m.IsEmpty() {
		return NilUintptrOptionList
	} else {
		acc := NilUintptrOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrList) FlatMapFloat32OptionList(f func([]int) Float32OptionList) Float32OptionList {
	if m.IsEmpty() {
		return NilFloat32OptionList
	} else {
		acc := NilFloat32OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrList) FlatMapFloat64OptionList(f func([]int) Float64OptionList) Float64OptionList {
	if m.IsEmpty() {
		return NilFloat64OptionList
	} else {
		acc := NilFloat64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrList) FlatMapRuneOptionList(f func([]int) RuneOptionList) RuneOptionList {
	if m.IsEmpty() {
		return NilRuneOptionList
	} else {
		acc := NilRuneOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrList) FlatMapStringOptionList(f func([]int) StringOptionList) StringOptionList {
	if m.IsEmpty() {
		return NilStringOptionList
	} else {
		acc := NilStringOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrList) FlatMapBoolList(f func([]int32) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBoolList
	} else {
		acc := NilBoolList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrList) FlatMapAnyList(f func([]int32) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAnyList
	} else {
		acc := NilAnyList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrList) FlatMapByteList(f func([]int32) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByteList
	} else {
		acc := NilByteList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrList) FlatMapIntList(f func([]int32) IntList) IntList {
	if m.IsEmpty() {
		return NilIntList
	} else {
		acc := NilIntList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrList) FlatMapInt32List(f func([]int32) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32List
	} else {
		acc := NilInt32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrList) FlatMapInt64List(f func([]int32) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64List
	} else {
		acc := NilInt64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrList) FlatMapUintList(f func([]int32) UintList) UintList {
	if m.IsEmpty() {
		return NilUintList
	} else {
		acc := NilUintList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrList) FlatMapUint64List(f func([]int32) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64List
	} else {
		acc := NilUint64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrList) FlatMapUintptrList(f func([]int32) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptrList
	} else {
		acc := NilUintptrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrList) FlatMapFloat32List(f func([]int32) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32List
	} else {
		acc := NilFloat32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrList) FlatMapFloat64List(f func([]int32) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64List
	} else {
		acc := NilFloat64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrList) FlatMapRuneList(f func([]int32) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRuneList
	} else {
		acc := NilRuneList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrList) FlatMapStringList(f func([]int32) StringList) StringList {
	if m.IsEmpty() {
		return NilStringList
	} else {
		acc := NilStringList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrList) FlatMapBoolArrList(f func([]int32) BoolArrList) BoolArrList {
	if m.IsEmpty() {
		return NilBoolArrList
	} else {
		acc := NilBoolArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrList) FlatMapAnyArrList(f func([]int32) AnyArrList) AnyArrList {
	if m.IsEmpty() {
		return NilAnyArrList
	} else {
		acc := NilAnyArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrList) FlatMapByteArrList(f func([]int32) ByteArrList) ByteArrList {
	if m.IsEmpty() {
		return NilByteArrList
	} else {
		acc := NilByteArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrList) FlatMapIntArrList(f func([]int32) IntArrList) IntArrList {
	if m.IsEmpty() {
		return NilIntArrList
	} else {
		acc := NilIntArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrList) FlatMapInt32ArrList(f func([]int32) Int32ArrList) Int32ArrList {
	if m.IsEmpty() {
		return NilInt32ArrList
	} else {
		acc := NilInt32ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrList) FlatMapInt64ArrList(f func([]int32) Int64ArrList) Int64ArrList {
	if m.IsEmpty() {
		return NilInt64ArrList
	} else {
		acc := NilInt64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrList) FlatMapUintArrList(f func([]int32) UintArrList) UintArrList {
	if m.IsEmpty() {
		return NilUintArrList
	} else {
		acc := NilUintArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrList) FlatMapUint64ArrList(f func([]int32) Uint64ArrList) Uint64ArrList {
	if m.IsEmpty() {
		return NilUint64ArrList
	} else {
		acc := NilUint64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrList) FlatMapUintptrArrList(f func([]int32) UintptrArrList) UintptrArrList {
	if m.IsEmpty() {
		return NilUintptrArrList
	} else {
		acc := NilUintptrArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrList) FlatMapFloat32ArrList(f func([]int32) Float32ArrList) Float32ArrList {
	if m.IsEmpty() {
		return NilFloat32ArrList
	} else {
		acc := NilFloat32ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrList) FlatMapFloat64ArrList(f func([]int32) Float64ArrList) Float64ArrList {
	if m.IsEmpty() {
		return NilFloat64ArrList
	} else {
		acc := NilFloat64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrList) FlatMapRuneArrList(f func([]int32) RuneArrList) RuneArrList {
	if m.IsEmpty() {
		return NilRuneArrList
	} else {
		acc := NilRuneArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrList) FlatMapStringArrList(f func([]int32) StringArrList) StringArrList {
	if m.IsEmpty() {
		return NilStringArrList
	} else {
		acc := NilStringArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrList) FlatMapBoolListList(f func([]int32) BoolListList) BoolListList {
	if m.IsEmpty() {
		return NilBoolListList
	} else {
		acc := NilBoolListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrList) FlatMapAnyListList(f func([]int32) AnyListList) AnyListList {
	if m.IsEmpty() {
		return NilAnyListList
	} else {
		acc := NilAnyListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrList) FlatMapByteListList(f func([]int32) ByteListList) ByteListList {
	if m.IsEmpty() {
		return NilByteListList
	} else {
		acc := NilByteListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrList) FlatMapIntListList(f func([]int32) IntListList) IntListList {
	if m.IsEmpty() {
		return NilIntListList
	} else {
		acc := NilIntListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrList) FlatMapInt32ListList(f func([]int32) Int32ListList) Int32ListList {
	if m.IsEmpty() {
		return NilInt32ListList
	} else {
		acc := NilInt32ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrList) FlatMapInt64ListList(f func([]int32) Int64ListList) Int64ListList {
	if m.IsEmpty() {
		return NilInt64ListList
	} else {
		acc := NilInt64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrList) FlatMapUintListList(f func([]int32) UintListList) UintListList {
	if m.IsEmpty() {
		return NilUintListList
	} else {
		acc := NilUintListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrList) FlatMapUint64ListList(f func([]int32) Uint64ListList) Uint64ListList {
	if m.IsEmpty() {
		return NilUint64ListList
	} else {
		acc := NilUint64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrList) FlatMapUintptrListList(f func([]int32) UintptrListList) UintptrListList {
	if m.IsEmpty() {
		return NilUintptrListList
	} else {
		acc := NilUintptrListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrList) FlatMapFloat32ListList(f func([]int32) Float32ListList) Float32ListList {
	if m.IsEmpty() {
		return NilFloat32ListList
	} else {
		acc := NilFloat32ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrList) FlatMapFloat64ListList(f func([]int32) Float64ListList) Float64ListList {
	if m.IsEmpty() {
		return NilFloat64ListList
	} else {
		acc := NilFloat64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrList) FlatMapRuneListList(f func([]int32) RuneListList) RuneListList {
	if m.IsEmpty() {
		return NilRuneListList
	} else {
		acc := NilRuneListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrList) FlatMapStringListList(f func([]int32) StringListList) StringListList {
	if m.IsEmpty() {
		return NilStringListList
	} else {
		acc := NilStringListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrList) FlatMapBoolOptionList(f func([]int32) BoolOptionList) BoolOptionList {
	if m.IsEmpty() {
		return NilBoolOptionList
	} else {
		acc := NilBoolOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrList) FlatMapAnyOptionList(f func([]int32) AnyOptionList) AnyOptionList {
	if m.IsEmpty() {
		return NilAnyOptionList
	} else {
		acc := NilAnyOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrList) FlatMapByteOptionList(f func([]int32) ByteOptionList) ByteOptionList {
	if m.IsEmpty() {
		return NilByteOptionList
	} else {
		acc := NilByteOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrList) FlatMapIntOptionList(f func([]int32) IntOptionList) IntOptionList {
	if m.IsEmpty() {
		return NilIntOptionList
	} else {
		acc := NilIntOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrList) FlatMapInt32OptionList(f func([]int32) Int32OptionList) Int32OptionList {
	if m.IsEmpty() {
		return NilInt32OptionList
	} else {
		acc := NilInt32OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrList) FlatMapInt64OptionList(f func([]int32) Int64OptionList) Int64OptionList {
	if m.IsEmpty() {
		return NilInt64OptionList
	} else {
		acc := NilInt64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrList) FlatMapUintOptionList(f func([]int32) UintOptionList) UintOptionList {
	if m.IsEmpty() {
		return NilUintOptionList
	} else {
		acc := NilUintOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrList) FlatMapUint64OptionList(f func([]int32) Uint64OptionList) Uint64OptionList {
	if m.IsEmpty() {
		return NilUint64OptionList
	} else {
		acc := NilUint64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrList) FlatMapUintptrOptionList(f func([]int32) UintptrOptionList) UintptrOptionList {
	if m.IsEmpty() {
		return NilUintptrOptionList
	} else {
		acc := NilUintptrOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrList) FlatMapFloat32OptionList(f func([]int32) Float32OptionList) Float32OptionList {
	if m.IsEmpty() {
		return NilFloat32OptionList
	} else {
		acc := NilFloat32OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrList) FlatMapFloat64OptionList(f func([]int32) Float64OptionList) Float64OptionList {
	if m.IsEmpty() {
		return NilFloat64OptionList
	} else {
		acc := NilFloat64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrList) FlatMapRuneOptionList(f func([]int32) RuneOptionList) RuneOptionList {
	if m.IsEmpty() {
		return NilRuneOptionList
	} else {
		acc := NilRuneOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrList) FlatMapStringOptionList(f func([]int32) StringOptionList) StringOptionList {
	if m.IsEmpty() {
		return NilStringOptionList
	} else {
		acc := NilStringOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrList) FlatMapBoolList(f func([]int64) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBoolList
	} else {
		acc := NilBoolList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrList) FlatMapAnyList(f func([]int64) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAnyList
	} else {
		acc := NilAnyList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrList) FlatMapByteList(f func([]int64) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByteList
	} else {
		acc := NilByteList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrList) FlatMapIntList(f func([]int64) IntList) IntList {
	if m.IsEmpty() {
		return NilIntList
	} else {
		acc := NilIntList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrList) FlatMapInt32List(f func([]int64) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32List
	} else {
		acc := NilInt32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrList) FlatMapInt64List(f func([]int64) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64List
	} else {
		acc := NilInt64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrList) FlatMapUintList(f func([]int64) UintList) UintList {
	if m.IsEmpty() {
		return NilUintList
	} else {
		acc := NilUintList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrList) FlatMapUint64List(f func([]int64) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64List
	} else {
		acc := NilUint64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrList) FlatMapUintptrList(f func([]int64) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptrList
	} else {
		acc := NilUintptrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrList) FlatMapFloat32List(f func([]int64) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32List
	} else {
		acc := NilFloat32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrList) FlatMapFloat64List(f func([]int64) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64List
	} else {
		acc := NilFloat64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrList) FlatMapRuneList(f func([]int64) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRuneList
	} else {
		acc := NilRuneList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrList) FlatMapStringList(f func([]int64) StringList) StringList {
	if m.IsEmpty() {
		return NilStringList
	} else {
		acc := NilStringList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrList) FlatMapBoolArrList(f func([]int64) BoolArrList) BoolArrList {
	if m.IsEmpty() {
		return NilBoolArrList
	} else {
		acc := NilBoolArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrList) FlatMapAnyArrList(f func([]int64) AnyArrList) AnyArrList {
	if m.IsEmpty() {
		return NilAnyArrList
	} else {
		acc := NilAnyArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrList) FlatMapByteArrList(f func([]int64) ByteArrList) ByteArrList {
	if m.IsEmpty() {
		return NilByteArrList
	} else {
		acc := NilByteArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrList) FlatMapIntArrList(f func([]int64) IntArrList) IntArrList {
	if m.IsEmpty() {
		return NilIntArrList
	} else {
		acc := NilIntArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrList) FlatMapInt32ArrList(f func([]int64) Int32ArrList) Int32ArrList {
	if m.IsEmpty() {
		return NilInt32ArrList
	} else {
		acc := NilInt32ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrList) FlatMapInt64ArrList(f func([]int64) Int64ArrList) Int64ArrList {
	if m.IsEmpty() {
		return NilInt64ArrList
	} else {
		acc := NilInt64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrList) FlatMapUintArrList(f func([]int64) UintArrList) UintArrList {
	if m.IsEmpty() {
		return NilUintArrList
	} else {
		acc := NilUintArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrList) FlatMapUint64ArrList(f func([]int64) Uint64ArrList) Uint64ArrList {
	if m.IsEmpty() {
		return NilUint64ArrList
	} else {
		acc := NilUint64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrList) FlatMapUintptrArrList(f func([]int64) UintptrArrList) UintptrArrList {
	if m.IsEmpty() {
		return NilUintptrArrList
	} else {
		acc := NilUintptrArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrList) FlatMapFloat32ArrList(f func([]int64) Float32ArrList) Float32ArrList {
	if m.IsEmpty() {
		return NilFloat32ArrList
	} else {
		acc := NilFloat32ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrList) FlatMapFloat64ArrList(f func([]int64) Float64ArrList) Float64ArrList {
	if m.IsEmpty() {
		return NilFloat64ArrList
	} else {
		acc := NilFloat64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrList) FlatMapRuneArrList(f func([]int64) RuneArrList) RuneArrList {
	if m.IsEmpty() {
		return NilRuneArrList
	} else {
		acc := NilRuneArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrList) FlatMapStringArrList(f func([]int64) StringArrList) StringArrList {
	if m.IsEmpty() {
		return NilStringArrList
	} else {
		acc := NilStringArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrList) FlatMapBoolListList(f func([]int64) BoolListList) BoolListList {
	if m.IsEmpty() {
		return NilBoolListList
	} else {
		acc := NilBoolListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrList) FlatMapAnyListList(f func([]int64) AnyListList) AnyListList {
	if m.IsEmpty() {
		return NilAnyListList
	} else {
		acc := NilAnyListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrList) FlatMapByteListList(f func([]int64) ByteListList) ByteListList {
	if m.IsEmpty() {
		return NilByteListList
	} else {
		acc := NilByteListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrList) FlatMapIntListList(f func([]int64) IntListList) IntListList {
	if m.IsEmpty() {
		return NilIntListList
	} else {
		acc := NilIntListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrList) FlatMapInt32ListList(f func([]int64) Int32ListList) Int32ListList {
	if m.IsEmpty() {
		return NilInt32ListList
	} else {
		acc := NilInt32ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrList) FlatMapInt64ListList(f func([]int64) Int64ListList) Int64ListList {
	if m.IsEmpty() {
		return NilInt64ListList
	} else {
		acc := NilInt64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrList) FlatMapUintListList(f func([]int64) UintListList) UintListList {
	if m.IsEmpty() {
		return NilUintListList
	} else {
		acc := NilUintListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrList) FlatMapUint64ListList(f func([]int64) Uint64ListList) Uint64ListList {
	if m.IsEmpty() {
		return NilUint64ListList
	} else {
		acc := NilUint64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrList) FlatMapUintptrListList(f func([]int64) UintptrListList) UintptrListList {
	if m.IsEmpty() {
		return NilUintptrListList
	} else {
		acc := NilUintptrListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrList) FlatMapFloat32ListList(f func([]int64) Float32ListList) Float32ListList {
	if m.IsEmpty() {
		return NilFloat32ListList
	} else {
		acc := NilFloat32ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrList) FlatMapFloat64ListList(f func([]int64) Float64ListList) Float64ListList {
	if m.IsEmpty() {
		return NilFloat64ListList
	} else {
		acc := NilFloat64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrList) FlatMapRuneListList(f func([]int64) RuneListList) RuneListList {
	if m.IsEmpty() {
		return NilRuneListList
	} else {
		acc := NilRuneListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrList) FlatMapStringListList(f func([]int64) StringListList) StringListList {
	if m.IsEmpty() {
		return NilStringListList
	} else {
		acc := NilStringListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrList) FlatMapBoolOptionList(f func([]int64) BoolOptionList) BoolOptionList {
	if m.IsEmpty() {
		return NilBoolOptionList
	} else {
		acc := NilBoolOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrList) FlatMapAnyOptionList(f func([]int64) AnyOptionList) AnyOptionList {
	if m.IsEmpty() {
		return NilAnyOptionList
	} else {
		acc := NilAnyOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrList) FlatMapByteOptionList(f func([]int64) ByteOptionList) ByteOptionList {
	if m.IsEmpty() {
		return NilByteOptionList
	} else {
		acc := NilByteOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrList) FlatMapIntOptionList(f func([]int64) IntOptionList) IntOptionList {
	if m.IsEmpty() {
		return NilIntOptionList
	} else {
		acc := NilIntOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrList) FlatMapInt32OptionList(f func([]int64) Int32OptionList) Int32OptionList {
	if m.IsEmpty() {
		return NilInt32OptionList
	} else {
		acc := NilInt32OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrList) FlatMapInt64OptionList(f func([]int64) Int64OptionList) Int64OptionList {
	if m.IsEmpty() {
		return NilInt64OptionList
	} else {
		acc := NilInt64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrList) FlatMapUintOptionList(f func([]int64) UintOptionList) UintOptionList {
	if m.IsEmpty() {
		return NilUintOptionList
	} else {
		acc := NilUintOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrList) FlatMapUint64OptionList(f func([]int64) Uint64OptionList) Uint64OptionList {
	if m.IsEmpty() {
		return NilUint64OptionList
	} else {
		acc := NilUint64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrList) FlatMapUintptrOptionList(f func([]int64) UintptrOptionList) UintptrOptionList {
	if m.IsEmpty() {
		return NilUintptrOptionList
	} else {
		acc := NilUintptrOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrList) FlatMapFloat32OptionList(f func([]int64) Float32OptionList) Float32OptionList {
	if m.IsEmpty() {
		return NilFloat32OptionList
	} else {
		acc := NilFloat32OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrList) FlatMapFloat64OptionList(f func([]int64) Float64OptionList) Float64OptionList {
	if m.IsEmpty() {
		return NilFloat64OptionList
	} else {
		acc := NilFloat64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrList) FlatMapRuneOptionList(f func([]int64) RuneOptionList) RuneOptionList {
	if m.IsEmpty() {
		return NilRuneOptionList
	} else {
		acc := NilRuneOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrList) FlatMapStringOptionList(f func([]int64) StringOptionList) StringOptionList {
	if m.IsEmpty() {
		return NilStringOptionList
	} else {
		acc := NilStringOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrList) FlatMapBoolList(f func([]uint) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBoolList
	} else {
		acc := NilBoolList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrList) FlatMapAnyList(f func([]uint) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAnyList
	} else {
		acc := NilAnyList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrList) FlatMapByteList(f func([]uint) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByteList
	} else {
		acc := NilByteList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrList) FlatMapIntList(f func([]uint) IntList) IntList {
	if m.IsEmpty() {
		return NilIntList
	} else {
		acc := NilIntList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrList) FlatMapInt32List(f func([]uint) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32List
	} else {
		acc := NilInt32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrList) FlatMapInt64List(f func([]uint) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64List
	} else {
		acc := NilInt64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrList) FlatMapUintList(f func([]uint) UintList) UintList {
	if m.IsEmpty() {
		return NilUintList
	} else {
		acc := NilUintList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrList) FlatMapUint64List(f func([]uint) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64List
	} else {
		acc := NilUint64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrList) FlatMapUintptrList(f func([]uint) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptrList
	} else {
		acc := NilUintptrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrList) FlatMapFloat32List(f func([]uint) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32List
	} else {
		acc := NilFloat32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrList) FlatMapFloat64List(f func([]uint) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64List
	} else {
		acc := NilFloat64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrList) FlatMapRuneList(f func([]uint) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRuneList
	} else {
		acc := NilRuneList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrList) FlatMapStringList(f func([]uint) StringList) StringList {
	if m.IsEmpty() {
		return NilStringList
	} else {
		acc := NilStringList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrList) FlatMapBoolArrList(f func([]uint) BoolArrList) BoolArrList {
	if m.IsEmpty() {
		return NilBoolArrList
	} else {
		acc := NilBoolArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrList) FlatMapAnyArrList(f func([]uint) AnyArrList) AnyArrList {
	if m.IsEmpty() {
		return NilAnyArrList
	} else {
		acc := NilAnyArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrList) FlatMapByteArrList(f func([]uint) ByteArrList) ByteArrList {
	if m.IsEmpty() {
		return NilByteArrList
	} else {
		acc := NilByteArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrList) FlatMapIntArrList(f func([]uint) IntArrList) IntArrList {
	if m.IsEmpty() {
		return NilIntArrList
	} else {
		acc := NilIntArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrList) FlatMapInt32ArrList(f func([]uint) Int32ArrList) Int32ArrList {
	if m.IsEmpty() {
		return NilInt32ArrList
	} else {
		acc := NilInt32ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrList) FlatMapInt64ArrList(f func([]uint) Int64ArrList) Int64ArrList {
	if m.IsEmpty() {
		return NilInt64ArrList
	} else {
		acc := NilInt64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrList) FlatMapUintArrList(f func([]uint) UintArrList) UintArrList {
	if m.IsEmpty() {
		return NilUintArrList
	} else {
		acc := NilUintArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrList) FlatMapUint64ArrList(f func([]uint) Uint64ArrList) Uint64ArrList {
	if m.IsEmpty() {
		return NilUint64ArrList
	} else {
		acc := NilUint64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrList) FlatMapUintptrArrList(f func([]uint) UintptrArrList) UintptrArrList {
	if m.IsEmpty() {
		return NilUintptrArrList
	} else {
		acc := NilUintptrArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrList) FlatMapFloat32ArrList(f func([]uint) Float32ArrList) Float32ArrList {
	if m.IsEmpty() {
		return NilFloat32ArrList
	} else {
		acc := NilFloat32ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrList) FlatMapFloat64ArrList(f func([]uint) Float64ArrList) Float64ArrList {
	if m.IsEmpty() {
		return NilFloat64ArrList
	} else {
		acc := NilFloat64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrList) FlatMapRuneArrList(f func([]uint) RuneArrList) RuneArrList {
	if m.IsEmpty() {
		return NilRuneArrList
	} else {
		acc := NilRuneArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrList) FlatMapStringArrList(f func([]uint) StringArrList) StringArrList {
	if m.IsEmpty() {
		return NilStringArrList
	} else {
		acc := NilStringArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrList) FlatMapBoolListList(f func([]uint) BoolListList) BoolListList {
	if m.IsEmpty() {
		return NilBoolListList
	} else {
		acc := NilBoolListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrList) FlatMapAnyListList(f func([]uint) AnyListList) AnyListList {
	if m.IsEmpty() {
		return NilAnyListList
	} else {
		acc := NilAnyListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrList) FlatMapByteListList(f func([]uint) ByteListList) ByteListList {
	if m.IsEmpty() {
		return NilByteListList
	} else {
		acc := NilByteListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrList) FlatMapIntListList(f func([]uint) IntListList) IntListList {
	if m.IsEmpty() {
		return NilIntListList
	} else {
		acc := NilIntListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrList) FlatMapInt32ListList(f func([]uint) Int32ListList) Int32ListList {
	if m.IsEmpty() {
		return NilInt32ListList
	} else {
		acc := NilInt32ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrList) FlatMapInt64ListList(f func([]uint) Int64ListList) Int64ListList {
	if m.IsEmpty() {
		return NilInt64ListList
	} else {
		acc := NilInt64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrList) FlatMapUintListList(f func([]uint) UintListList) UintListList {
	if m.IsEmpty() {
		return NilUintListList
	} else {
		acc := NilUintListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrList) FlatMapUint64ListList(f func([]uint) Uint64ListList) Uint64ListList {
	if m.IsEmpty() {
		return NilUint64ListList
	} else {
		acc := NilUint64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrList) FlatMapUintptrListList(f func([]uint) UintptrListList) UintptrListList {
	if m.IsEmpty() {
		return NilUintptrListList
	} else {
		acc := NilUintptrListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrList) FlatMapFloat32ListList(f func([]uint) Float32ListList) Float32ListList {
	if m.IsEmpty() {
		return NilFloat32ListList
	} else {
		acc := NilFloat32ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrList) FlatMapFloat64ListList(f func([]uint) Float64ListList) Float64ListList {
	if m.IsEmpty() {
		return NilFloat64ListList
	} else {
		acc := NilFloat64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrList) FlatMapRuneListList(f func([]uint) RuneListList) RuneListList {
	if m.IsEmpty() {
		return NilRuneListList
	} else {
		acc := NilRuneListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrList) FlatMapStringListList(f func([]uint) StringListList) StringListList {
	if m.IsEmpty() {
		return NilStringListList
	} else {
		acc := NilStringListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrList) FlatMapBoolOptionList(f func([]uint) BoolOptionList) BoolOptionList {
	if m.IsEmpty() {
		return NilBoolOptionList
	} else {
		acc := NilBoolOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrList) FlatMapAnyOptionList(f func([]uint) AnyOptionList) AnyOptionList {
	if m.IsEmpty() {
		return NilAnyOptionList
	} else {
		acc := NilAnyOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrList) FlatMapByteOptionList(f func([]uint) ByteOptionList) ByteOptionList {
	if m.IsEmpty() {
		return NilByteOptionList
	} else {
		acc := NilByteOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrList) FlatMapIntOptionList(f func([]uint) IntOptionList) IntOptionList {
	if m.IsEmpty() {
		return NilIntOptionList
	} else {
		acc := NilIntOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrList) FlatMapInt32OptionList(f func([]uint) Int32OptionList) Int32OptionList {
	if m.IsEmpty() {
		return NilInt32OptionList
	} else {
		acc := NilInt32OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrList) FlatMapInt64OptionList(f func([]uint) Int64OptionList) Int64OptionList {
	if m.IsEmpty() {
		return NilInt64OptionList
	} else {
		acc := NilInt64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrList) FlatMapUintOptionList(f func([]uint) UintOptionList) UintOptionList {
	if m.IsEmpty() {
		return NilUintOptionList
	} else {
		acc := NilUintOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrList) FlatMapUint64OptionList(f func([]uint) Uint64OptionList) Uint64OptionList {
	if m.IsEmpty() {
		return NilUint64OptionList
	} else {
		acc := NilUint64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrList) FlatMapUintptrOptionList(f func([]uint) UintptrOptionList) UintptrOptionList {
	if m.IsEmpty() {
		return NilUintptrOptionList
	} else {
		acc := NilUintptrOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrList) FlatMapFloat32OptionList(f func([]uint) Float32OptionList) Float32OptionList {
	if m.IsEmpty() {
		return NilFloat32OptionList
	} else {
		acc := NilFloat32OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrList) FlatMapFloat64OptionList(f func([]uint) Float64OptionList) Float64OptionList {
	if m.IsEmpty() {
		return NilFloat64OptionList
	} else {
		acc := NilFloat64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrList) FlatMapRuneOptionList(f func([]uint) RuneOptionList) RuneOptionList {
	if m.IsEmpty() {
		return NilRuneOptionList
	} else {
		acc := NilRuneOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrList) FlatMapStringOptionList(f func([]uint) StringOptionList) StringOptionList {
	if m.IsEmpty() {
		return NilStringOptionList
	} else {
		acc := NilStringOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrList) FlatMapBoolList(f func([]uint64) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBoolList
	} else {
		acc := NilBoolList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrList) FlatMapAnyList(f func([]uint64) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAnyList
	} else {
		acc := NilAnyList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrList) FlatMapByteList(f func([]uint64) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByteList
	} else {
		acc := NilByteList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrList) FlatMapIntList(f func([]uint64) IntList) IntList {
	if m.IsEmpty() {
		return NilIntList
	} else {
		acc := NilIntList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrList) FlatMapInt32List(f func([]uint64) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32List
	} else {
		acc := NilInt32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrList) FlatMapInt64List(f func([]uint64) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64List
	} else {
		acc := NilInt64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrList) FlatMapUintList(f func([]uint64) UintList) UintList {
	if m.IsEmpty() {
		return NilUintList
	} else {
		acc := NilUintList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrList) FlatMapUint64List(f func([]uint64) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64List
	} else {
		acc := NilUint64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrList) FlatMapUintptrList(f func([]uint64) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptrList
	} else {
		acc := NilUintptrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrList) FlatMapFloat32List(f func([]uint64) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32List
	} else {
		acc := NilFloat32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrList) FlatMapFloat64List(f func([]uint64) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64List
	} else {
		acc := NilFloat64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrList) FlatMapRuneList(f func([]uint64) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRuneList
	} else {
		acc := NilRuneList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrList) FlatMapStringList(f func([]uint64) StringList) StringList {
	if m.IsEmpty() {
		return NilStringList
	} else {
		acc := NilStringList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrList) FlatMapBoolArrList(f func([]uint64) BoolArrList) BoolArrList {
	if m.IsEmpty() {
		return NilBoolArrList
	} else {
		acc := NilBoolArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrList) FlatMapAnyArrList(f func([]uint64) AnyArrList) AnyArrList {
	if m.IsEmpty() {
		return NilAnyArrList
	} else {
		acc := NilAnyArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrList) FlatMapByteArrList(f func([]uint64) ByteArrList) ByteArrList {
	if m.IsEmpty() {
		return NilByteArrList
	} else {
		acc := NilByteArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrList) FlatMapIntArrList(f func([]uint64) IntArrList) IntArrList {
	if m.IsEmpty() {
		return NilIntArrList
	} else {
		acc := NilIntArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrList) FlatMapInt32ArrList(f func([]uint64) Int32ArrList) Int32ArrList {
	if m.IsEmpty() {
		return NilInt32ArrList
	} else {
		acc := NilInt32ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrList) FlatMapInt64ArrList(f func([]uint64) Int64ArrList) Int64ArrList {
	if m.IsEmpty() {
		return NilInt64ArrList
	} else {
		acc := NilInt64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrList) FlatMapUintArrList(f func([]uint64) UintArrList) UintArrList {
	if m.IsEmpty() {
		return NilUintArrList
	} else {
		acc := NilUintArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrList) FlatMapUint64ArrList(f func([]uint64) Uint64ArrList) Uint64ArrList {
	if m.IsEmpty() {
		return NilUint64ArrList
	} else {
		acc := NilUint64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrList) FlatMapUintptrArrList(f func([]uint64) UintptrArrList) UintptrArrList {
	if m.IsEmpty() {
		return NilUintptrArrList
	} else {
		acc := NilUintptrArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrList) FlatMapFloat32ArrList(f func([]uint64) Float32ArrList) Float32ArrList {
	if m.IsEmpty() {
		return NilFloat32ArrList
	} else {
		acc := NilFloat32ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrList) FlatMapFloat64ArrList(f func([]uint64) Float64ArrList) Float64ArrList {
	if m.IsEmpty() {
		return NilFloat64ArrList
	} else {
		acc := NilFloat64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrList) FlatMapRuneArrList(f func([]uint64) RuneArrList) RuneArrList {
	if m.IsEmpty() {
		return NilRuneArrList
	} else {
		acc := NilRuneArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrList) FlatMapStringArrList(f func([]uint64) StringArrList) StringArrList {
	if m.IsEmpty() {
		return NilStringArrList
	} else {
		acc := NilStringArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrList) FlatMapBoolListList(f func([]uint64) BoolListList) BoolListList {
	if m.IsEmpty() {
		return NilBoolListList
	} else {
		acc := NilBoolListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrList) FlatMapAnyListList(f func([]uint64) AnyListList) AnyListList {
	if m.IsEmpty() {
		return NilAnyListList
	} else {
		acc := NilAnyListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrList) FlatMapByteListList(f func([]uint64) ByteListList) ByteListList {
	if m.IsEmpty() {
		return NilByteListList
	} else {
		acc := NilByteListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrList) FlatMapIntListList(f func([]uint64) IntListList) IntListList {
	if m.IsEmpty() {
		return NilIntListList
	} else {
		acc := NilIntListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrList) FlatMapInt32ListList(f func([]uint64) Int32ListList) Int32ListList {
	if m.IsEmpty() {
		return NilInt32ListList
	} else {
		acc := NilInt32ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrList) FlatMapInt64ListList(f func([]uint64) Int64ListList) Int64ListList {
	if m.IsEmpty() {
		return NilInt64ListList
	} else {
		acc := NilInt64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrList) FlatMapUintListList(f func([]uint64) UintListList) UintListList {
	if m.IsEmpty() {
		return NilUintListList
	} else {
		acc := NilUintListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrList) FlatMapUint64ListList(f func([]uint64) Uint64ListList) Uint64ListList {
	if m.IsEmpty() {
		return NilUint64ListList
	} else {
		acc := NilUint64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrList) FlatMapUintptrListList(f func([]uint64) UintptrListList) UintptrListList {
	if m.IsEmpty() {
		return NilUintptrListList
	} else {
		acc := NilUintptrListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrList) FlatMapFloat32ListList(f func([]uint64) Float32ListList) Float32ListList {
	if m.IsEmpty() {
		return NilFloat32ListList
	} else {
		acc := NilFloat32ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrList) FlatMapFloat64ListList(f func([]uint64) Float64ListList) Float64ListList {
	if m.IsEmpty() {
		return NilFloat64ListList
	} else {
		acc := NilFloat64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrList) FlatMapRuneListList(f func([]uint64) RuneListList) RuneListList {
	if m.IsEmpty() {
		return NilRuneListList
	} else {
		acc := NilRuneListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrList) FlatMapStringListList(f func([]uint64) StringListList) StringListList {
	if m.IsEmpty() {
		return NilStringListList
	} else {
		acc := NilStringListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrList) FlatMapBoolOptionList(f func([]uint64) BoolOptionList) BoolOptionList {
	if m.IsEmpty() {
		return NilBoolOptionList
	} else {
		acc := NilBoolOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrList) FlatMapAnyOptionList(f func([]uint64) AnyOptionList) AnyOptionList {
	if m.IsEmpty() {
		return NilAnyOptionList
	} else {
		acc := NilAnyOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrList) FlatMapByteOptionList(f func([]uint64) ByteOptionList) ByteOptionList {
	if m.IsEmpty() {
		return NilByteOptionList
	} else {
		acc := NilByteOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrList) FlatMapIntOptionList(f func([]uint64) IntOptionList) IntOptionList {
	if m.IsEmpty() {
		return NilIntOptionList
	} else {
		acc := NilIntOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrList) FlatMapInt32OptionList(f func([]uint64) Int32OptionList) Int32OptionList {
	if m.IsEmpty() {
		return NilInt32OptionList
	} else {
		acc := NilInt32OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrList) FlatMapInt64OptionList(f func([]uint64) Int64OptionList) Int64OptionList {
	if m.IsEmpty() {
		return NilInt64OptionList
	} else {
		acc := NilInt64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrList) FlatMapUintOptionList(f func([]uint64) UintOptionList) UintOptionList {
	if m.IsEmpty() {
		return NilUintOptionList
	} else {
		acc := NilUintOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrList) FlatMapUint64OptionList(f func([]uint64) Uint64OptionList) Uint64OptionList {
	if m.IsEmpty() {
		return NilUint64OptionList
	} else {
		acc := NilUint64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrList) FlatMapUintptrOptionList(f func([]uint64) UintptrOptionList) UintptrOptionList {
	if m.IsEmpty() {
		return NilUintptrOptionList
	} else {
		acc := NilUintptrOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrList) FlatMapFloat32OptionList(f func([]uint64) Float32OptionList) Float32OptionList {
	if m.IsEmpty() {
		return NilFloat32OptionList
	} else {
		acc := NilFloat32OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrList) FlatMapFloat64OptionList(f func([]uint64) Float64OptionList) Float64OptionList {
	if m.IsEmpty() {
		return NilFloat64OptionList
	} else {
		acc := NilFloat64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrList) FlatMapRuneOptionList(f func([]uint64) RuneOptionList) RuneOptionList {
	if m.IsEmpty() {
		return NilRuneOptionList
	} else {
		acc := NilRuneOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrList) FlatMapStringOptionList(f func([]uint64) StringOptionList) StringOptionList {
	if m.IsEmpty() {
		return NilStringOptionList
	} else {
		acc := NilStringOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrList) FlatMapBoolList(f func([]uintptr) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBoolList
	} else {
		acc := NilBoolList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrList) FlatMapAnyList(f func([]uintptr) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAnyList
	} else {
		acc := NilAnyList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrList) FlatMapByteList(f func([]uintptr) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByteList
	} else {
		acc := NilByteList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrList) FlatMapIntList(f func([]uintptr) IntList) IntList {
	if m.IsEmpty() {
		return NilIntList
	} else {
		acc := NilIntList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrList) FlatMapInt32List(f func([]uintptr) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32List
	} else {
		acc := NilInt32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrList) FlatMapInt64List(f func([]uintptr) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64List
	} else {
		acc := NilInt64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrList) FlatMapUintList(f func([]uintptr) UintList) UintList {
	if m.IsEmpty() {
		return NilUintList
	} else {
		acc := NilUintList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrList) FlatMapUint64List(f func([]uintptr) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64List
	} else {
		acc := NilUint64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrList) FlatMapUintptrList(f func([]uintptr) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptrList
	} else {
		acc := NilUintptrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrList) FlatMapFloat32List(f func([]uintptr) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32List
	} else {
		acc := NilFloat32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrList) FlatMapFloat64List(f func([]uintptr) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64List
	} else {
		acc := NilFloat64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrList) FlatMapRuneList(f func([]uintptr) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRuneList
	} else {
		acc := NilRuneList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrList) FlatMapStringList(f func([]uintptr) StringList) StringList {
	if m.IsEmpty() {
		return NilStringList
	} else {
		acc := NilStringList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrList) FlatMapBoolArrList(f func([]uintptr) BoolArrList) BoolArrList {
	if m.IsEmpty() {
		return NilBoolArrList
	} else {
		acc := NilBoolArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrList) FlatMapAnyArrList(f func([]uintptr) AnyArrList) AnyArrList {
	if m.IsEmpty() {
		return NilAnyArrList
	} else {
		acc := NilAnyArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrList) FlatMapByteArrList(f func([]uintptr) ByteArrList) ByteArrList {
	if m.IsEmpty() {
		return NilByteArrList
	} else {
		acc := NilByteArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrList) FlatMapIntArrList(f func([]uintptr) IntArrList) IntArrList {
	if m.IsEmpty() {
		return NilIntArrList
	} else {
		acc := NilIntArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrList) FlatMapInt32ArrList(f func([]uintptr) Int32ArrList) Int32ArrList {
	if m.IsEmpty() {
		return NilInt32ArrList
	} else {
		acc := NilInt32ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrList) FlatMapInt64ArrList(f func([]uintptr) Int64ArrList) Int64ArrList {
	if m.IsEmpty() {
		return NilInt64ArrList
	} else {
		acc := NilInt64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrList) FlatMapUintArrList(f func([]uintptr) UintArrList) UintArrList {
	if m.IsEmpty() {
		return NilUintArrList
	} else {
		acc := NilUintArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrList) FlatMapUint64ArrList(f func([]uintptr) Uint64ArrList) Uint64ArrList {
	if m.IsEmpty() {
		return NilUint64ArrList
	} else {
		acc := NilUint64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrList) FlatMapUintptrArrList(f func([]uintptr) UintptrArrList) UintptrArrList {
	if m.IsEmpty() {
		return NilUintptrArrList
	} else {
		acc := NilUintptrArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrList) FlatMapFloat32ArrList(f func([]uintptr) Float32ArrList) Float32ArrList {
	if m.IsEmpty() {
		return NilFloat32ArrList
	} else {
		acc := NilFloat32ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrList) FlatMapFloat64ArrList(f func([]uintptr) Float64ArrList) Float64ArrList {
	if m.IsEmpty() {
		return NilFloat64ArrList
	} else {
		acc := NilFloat64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrList) FlatMapRuneArrList(f func([]uintptr) RuneArrList) RuneArrList {
	if m.IsEmpty() {
		return NilRuneArrList
	} else {
		acc := NilRuneArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrList) FlatMapStringArrList(f func([]uintptr) StringArrList) StringArrList {
	if m.IsEmpty() {
		return NilStringArrList
	} else {
		acc := NilStringArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrList) FlatMapBoolListList(f func([]uintptr) BoolListList) BoolListList {
	if m.IsEmpty() {
		return NilBoolListList
	} else {
		acc := NilBoolListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrList) FlatMapAnyListList(f func([]uintptr) AnyListList) AnyListList {
	if m.IsEmpty() {
		return NilAnyListList
	} else {
		acc := NilAnyListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrList) FlatMapByteListList(f func([]uintptr) ByteListList) ByteListList {
	if m.IsEmpty() {
		return NilByteListList
	} else {
		acc := NilByteListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrList) FlatMapIntListList(f func([]uintptr) IntListList) IntListList {
	if m.IsEmpty() {
		return NilIntListList
	} else {
		acc := NilIntListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrList) FlatMapInt32ListList(f func([]uintptr) Int32ListList) Int32ListList {
	if m.IsEmpty() {
		return NilInt32ListList
	} else {
		acc := NilInt32ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrList) FlatMapInt64ListList(f func([]uintptr) Int64ListList) Int64ListList {
	if m.IsEmpty() {
		return NilInt64ListList
	} else {
		acc := NilInt64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrList) FlatMapUintListList(f func([]uintptr) UintListList) UintListList {
	if m.IsEmpty() {
		return NilUintListList
	} else {
		acc := NilUintListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrList) FlatMapUint64ListList(f func([]uintptr) Uint64ListList) Uint64ListList {
	if m.IsEmpty() {
		return NilUint64ListList
	} else {
		acc := NilUint64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrList) FlatMapUintptrListList(f func([]uintptr) UintptrListList) UintptrListList {
	if m.IsEmpty() {
		return NilUintptrListList
	} else {
		acc := NilUintptrListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrList) FlatMapFloat32ListList(f func([]uintptr) Float32ListList) Float32ListList {
	if m.IsEmpty() {
		return NilFloat32ListList
	} else {
		acc := NilFloat32ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrList) FlatMapFloat64ListList(f func([]uintptr) Float64ListList) Float64ListList {
	if m.IsEmpty() {
		return NilFloat64ListList
	} else {
		acc := NilFloat64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrList) FlatMapRuneListList(f func([]uintptr) RuneListList) RuneListList {
	if m.IsEmpty() {
		return NilRuneListList
	} else {
		acc := NilRuneListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrList) FlatMapStringListList(f func([]uintptr) StringListList) StringListList {
	if m.IsEmpty() {
		return NilStringListList
	} else {
		acc := NilStringListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrList) FlatMapBoolOptionList(f func([]uintptr) BoolOptionList) BoolOptionList {
	if m.IsEmpty() {
		return NilBoolOptionList
	} else {
		acc := NilBoolOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrList) FlatMapAnyOptionList(f func([]uintptr) AnyOptionList) AnyOptionList {
	if m.IsEmpty() {
		return NilAnyOptionList
	} else {
		acc := NilAnyOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrList) FlatMapByteOptionList(f func([]uintptr) ByteOptionList) ByteOptionList {
	if m.IsEmpty() {
		return NilByteOptionList
	} else {
		acc := NilByteOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrList) FlatMapIntOptionList(f func([]uintptr) IntOptionList) IntOptionList {
	if m.IsEmpty() {
		return NilIntOptionList
	} else {
		acc := NilIntOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrList) FlatMapInt32OptionList(f func([]uintptr) Int32OptionList) Int32OptionList {
	if m.IsEmpty() {
		return NilInt32OptionList
	} else {
		acc := NilInt32OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrList) FlatMapInt64OptionList(f func([]uintptr) Int64OptionList) Int64OptionList {
	if m.IsEmpty() {
		return NilInt64OptionList
	} else {
		acc := NilInt64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrList) FlatMapUintOptionList(f func([]uintptr) UintOptionList) UintOptionList {
	if m.IsEmpty() {
		return NilUintOptionList
	} else {
		acc := NilUintOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrList) FlatMapUint64OptionList(f func([]uintptr) Uint64OptionList) Uint64OptionList {
	if m.IsEmpty() {
		return NilUint64OptionList
	} else {
		acc := NilUint64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrList) FlatMapUintptrOptionList(f func([]uintptr) UintptrOptionList) UintptrOptionList {
	if m.IsEmpty() {
		return NilUintptrOptionList
	} else {
		acc := NilUintptrOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrList) FlatMapFloat32OptionList(f func([]uintptr) Float32OptionList) Float32OptionList {
	if m.IsEmpty() {
		return NilFloat32OptionList
	} else {
		acc := NilFloat32OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrList) FlatMapFloat64OptionList(f func([]uintptr) Float64OptionList) Float64OptionList {
	if m.IsEmpty() {
		return NilFloat64OptionList
	} else {
		acc := NilFloat64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrList) FlatMapRuneOptionList(f func([]uintptr) RuneOptionList) RuneOptionList {
	if m.IsEmpty() {
		return NilRuneOptionList
	} else {
		acc := NilRuneOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrList) FlatMapStringOptionList(f func([]uintptr) StringOptionList) StringOptionList {
	if m.IsEmpty() {
		return NilStringOptionList
	} else {
		acc := NilStringOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrList) FlatMapBoolList(f func([]float32) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBoolList
	} else {
		acc := NilBoolList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrList) FlatMapAnyList(f func([]float32) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAnyList
	} else {
		acc := NilAnyList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrList) FlatMapByteList(f func([]float32) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByteList
	} else {
		acc := NilByteList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrList) FlatMapIntList(f func([]float32) IntList) IntList {
	if m.IsEmpty() {
		return NilIntList
	} else {
		acc := NilIntList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrList) FlatMapInt32List(f func([]float32) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32List
	} else {
		acc := NilInt32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrList) FlatMapInt64List(f func([]float32) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64List
	} else {
		acc := NilInt64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrList) FlatMapUintList(f func([]float32) UintList) UintList {
	if m.IsEmpty() {
		return NilUintList
	} else {
		acc := NilUintList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrList) FlatMapUint64List(f func([]float32) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64List
	} else {
		acc := NilUint64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrList) FlatMapUintptrList(f func([]float32) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptrList
	} else {
		acc := NilUintptrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrList) FlatMapFloat32List(f func([]float32) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32List
	} else {
		acc := NilFloat32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrList) FlatMapFloat64List(f func([]float32) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64List
	} else {
		acc := NilFloat64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrList) FlatMapRuneList(f func([]float32) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRuneList
	} else {
		acc := NilRuneList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrList) FlatMapStringList(f func([]float32) StringList) StringList {
	if m.IsEmpty() {
		return NilStringList
	} else {
		acc := NilStringList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrList) FlatMapBoolArrList(f func([]float32) BoolArrList) BoolArrList {
	if m.IsEmpty() {
		return NilBoolArrList
	} else {
		acc := NilBoolArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrList) FlatMapAnyArrList(f func([]float32) AnyArrList) AnyArrList {
	if m.IsEmpty() {
		return NilAnyArrList
	} else {
		acc := NilAnyArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrList) FlatMapByteArrList(f func([]float32) ByteArrList) ByteArrList {
	if m.IsEmpty() {
		return NilByteArrList
	} else {
		acc := NilByteArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrList) FlatMapIntArrList(f func([]float32) IntArrList) IntArrList {
	if m.IsEmpty() {
		return NilIntArrList
	} else {
		acc := NilIntArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrList) FlatMapInt32ArrList(f func([]float32) Int32ArrList) Int32ArrList {
	if m.IsEmpty() {
		return NilInt32ArrList
	} else {
		acc := NilInt32ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrList) FlatMapInt64ArrList(f func([]float32) Int64ArrList) Int64ArrList {
	if m.IsEmpty() {
		return NilInt64ArrList
	} else {
		acc := NilInt64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrList) FlatMapUintArrList(f func([]float32) UintArrList) UintArrList {
	if m.IsEmpty() {
		return NilUintArrList
	} else {
		acc := NilUintArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrList) FlatMapUint64ArrList(f func([]float32) Uint64ArrList) Uint64ArrList {
	if m.IsEmpty() {
		return NilUint64ArrList
	} else {
		acc := NilUint64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrList) FlatMapUintptrArrList(f func([]float32) UintptrArrList) UintptrArrList {
	if m.IsEmpty() {
		return NilUintptrArrList
	} else {
		acc := NilUintptrArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrList) FlatMapFloat32ArrList(f func([]float32) Float32ArrList) Float32ArrList {
	if m.IsEmpty() {
		return NilFloat32ArrList
	} else {
		acc := NilFloat32ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrList) FlatMapFloat64ArrList(f func([]float32) Float64ArrList) Float64ArrList {
	if m.IsEmpty() {
		return NilFloat64ArrList
	} else {
		acc := NilFloat64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrList) FlatMapRuneArrList(f func([]float32) RuneArrList) RuneArrList {
	if m.IsEmpty() {
		return NilRuneArrList
	} else {
		acc := NilRuneArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrList) FlatMapStringArrList(f func([]float32) StringArrList) StringArrList {
	if m.IsEmpty() {
		return NilStringArrList
	} else {
		acc := NilStringArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrList) FlatMapBoolListList(f func([]float32) BoolListList) BoolListList {
	if m.IsEmpty() {
		return NilBoolListList
	} else {
		acc := NilBoolListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrList) FlatMapAnyListList(f func([]float32) AnyListList) AnyListList {
	if m.IsEmpty() {
		return NilAnyListList
	} else {
		acc := NilAnyListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrList) FlatMapByteListList(f func([]float32) ByteListList) ByteListList {
	if m.IsEmpty() {
		return NilByteListList
	} else {
		acc := NilByteListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrList) FlatMapIntListList(f func([]float32) IntListList) IntListList {
	if m.IsEmpty() {
		return NilIntListList
	} else {
		acc := NilIntListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrList) FlatMapInt32ListList(f func([]float32) Int32ListList) Int32ListList {
	if m.IsEmpty() {
		return NilInt32ListList
	} else {
		acc := NilInt32ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrList) FlatMapInt64ListList(f func([]float32) Int64ListList) Int64ListList {
	if m.IsEmpty() {
		return NilInt64ListList
	} else {
		acc := NilInt64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrList) FlatMapUintListList(f func([]float32) UintListList) UintListList {
	if m.IsEmpty() {
		return NilUintListList
	} else {
		acc := NilUintListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrList) FlatMapUint64ListList(f func([]float32) Uint64ListList) Uint64ListList {
	if m.IsEmpty() {
		return NilUint64ListList
	} else {
		acc := NilUint64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrList) FlatMapUintptrListList(f func([]float32) UintptrListList) UintptrListList {
	if m.IsEmpty() {
		return NilUintptrListList
	} else {
		acc := NilUintptrListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrList) FlatMapFloat32ListList(f func([]float32) Float32ListList) Float32ListList {
	if m.IsEmpty() {
		return NilFloat32ListList
	} else {
		acc := NilFloat32ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrList) FlatMapFloat64ListList(f func([]float32) Float64ListList) Float64ListList {
	if m.IsEmpty() {
		return NilFloat64ListList
	} else {
		acc := NilFloat64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrList) FlatMapRuneListList(f func([]float32) RuneListList) RuneListList {
	if m.IsEmpty() {
		return NilRuneListList
	} else {
		acc := NilRuneListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrList) FlatMapStringListList(f func([]float32) StringListList) StringListList {
	if m.IsEmpty() {
		return NilStringListList
	} else {
		acc := NilStringListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrList) FlatMapBoolOptionList(f func([]float32) BoolOptionList) BoolOptionList {
	if m.IsEmpty() {
		return NilBoolOptionList
	} else {
		acc := NilBoolOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrList) FlatMapAnyOptionList(f func([]float32) AnyOptionList) AnyOptionList {
	if m.IsEmpty() {
		return NilAnyOptionList
	} else {
		acc := NilAnyOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrList) FlatMapByteOptionList(f func([]float32) ByteOptionList) ByteOptionList {
	if m.IsEmpty() {
		return NilByteOptionList
	} else {
		acc := NilByteOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrList) FlatMapIntOptionList(f func([]float32) IntOptionList) IntOptionList {
	if m.IsEmpty() {
		return NilIntOptionList
	} else {
		acc := NilIntOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrList) FlatMapInt32OptionList(f func([]float32) Int32OptionList) Int32OptionList {
	if m.IsEmpty() {
		return NilInt32OptionList
	} else {
		acc := NilInt32OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrList) FlatMapInt64OptionList(f func([]float32) Int64OptionList) Int64OptionList {
	if m.IsEmpty() {
		return NilInt64OptionList
	} else {
		acc := NilInt64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrList) FlatMapUintOptionList(f func([]float32) UintOptionList) UintOptionList {
	if m.IsEmpty() {
		return NilUintOptionList
	} else {
		acc := NilUintOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrList) FlatMapUint64OptionList(f func([]float32) Uint64OptionList) Uint64OptionList {
	if m.IsEmpty() {
		return NilUint64OptionList
	} else {
		acc := NilUint64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrList) FlatMapUintptrOptionList(f func([]float32) UintptrOptionList) UintptrOptionList {
	if m.IsEmpty() {
		return NilUintptrOptionList
	} else {
		acc := NilUintptrOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrList) FlatMapFloat32OptionList(f func([]float32) Float32OptionList) Float32OptionList {
	if m.IsEmpty() {
		return NilFloat32OptionList
	} else {
		acc := NilFloat32OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrList) FlatMapFloat64OptionList(f func([]float32) Float64OptionList) Float64OptionList {
	if m.IsEmpty() {
		return NilFloat64OptionList
	} else {
		acc := NilFloat64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrList) FlatMapRuneOptionList(f func([]float32) RuneOptionList) RuneOptionList {
	if m.IsEmpty() {
		return NilRuneOptionList
	} else {
		acc := NilRuneOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrList) FlatMapStringOptionList(f func([]float32) StringOptionList) StringOptionList {
	if m.IsEmpty() {
		return NilStringOptionList
	} else {
		acc := NilStringOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrList) FlatMapBoolList(f func([]float64) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBoolList
	} else {
		acc := NilBoolList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrList) FlatMapAnyList(f func([]float64) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAnyList
	} else {
		acc := NilAnyList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrList) FlatMapByteList(f func([]float64) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByteList
	} else {
		acc := NilByteList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrList) FlatMapIntList(f func([]float64) IntList) IntList {
	if m.IsEmpty() {
		return NilIntList
	} else {
		acc := NilIntList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrList) FlatMapInt32List(f func([]float64) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32List
	} else {
		acc := NilInt32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrList) FlatMapInt64List(f func([]float64) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64List
	} else {
		acc := NilInt64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrList) FlatMapUintList(f func([]float64) UintList) UintList {
	if m.IsEmpty() {
		return NilUintList
	} else {
		acc := NilUintList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrList) FlatMapUint64List(f func([]float64) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64List
	} else {
		acc := NilUint64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrList) FlatMapUintptrList(f func([]float64) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptrList
	} else {
		acc := NilUintptrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrList) FlatMapFloat32List(f func([]float64) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32List
	} else {
		acc := NilFloat32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrList) FlatMapFloat64List(f func([]float64) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64List
	} else {
		acc := NilFloat64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrList) FlatMapRuneList(f func([]float64) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRuneList
	} else {
		acc := NilRuneList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrList) FlatMapStringList(f func([]float64) StringList) StringList {
	if m.IsEmpty() {
		return NilStringList
	} else {
		acc := NilStringList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrList) FlatMapBoolArrList(f func([]float64) BoolArrList) BoolArrList {
	if m.IsEmpty() {
		return NilBoolArrList
	} else {
		acc := NilBoolArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrList) FlatMapAnyArrList(f func([]float64) AnyArrList) AnyArrList {
	if m.IsEmpty() {
		return NilAnyArrList
	} else {
		acc := NilAnyArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrList) FlatMapByteArrList(f func([]float64) ByteArrList) ByteArrList {
	if m.IsEmpty() {
		return NilByteArrList
	} else {
		acc := NilByteArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrList) FlatMapIntArrList(f func([]float64) IntArrList) IntArrList {
	if m.IsEmpty() {
		return NilIntArrList
	} else {
		acc := NilIntArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrList) FlatMapInt32ArrList(f func([]float64) Int32ArrList) Int32ArrList {
	if m.IsEmpty() {
		return NilInt32ArrList
	} else {
		acc := NilInt32ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrList) FlatMapInt64ArrList(f func([]float64) Int64ArrList) Int64ArrList {
	if m.IsEmpty() {
		return NilInt64ArrList
	} else {
		acc := NilInt64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrList) FlatMapUintArrList(f func([]float64) UintArrList) UintArrList {
	if m.IsEmpty() {
		return NilUintArrList
	} else {
		acc := NilUintArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrList) FlatMapUint64ArrList(f func([]float64) Uint64ArrList) Uint64ArrList {
	if m.IsEmpty() {
		return NilUint64ArrList
	} else {
		acc := NilUint64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrList) FlatMapUintptrArrList(f func([]float64) UintptrArrList) UintptrArrList {
	if m.IsEmpty() {
		return NilUintptrArrList
	} else {
		acc := NilUintptrArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrList) FlatMapFloat32ArrList(f func([]float64) Float32ArrList) Float32ArrList {
	if m.IsEmpty() {
		return NilFloat32ArrList
	} else {
		acc := NilFloat32ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrList) FlatMapFloat64ArrList(f func([]float64) Float64ArrList) Float64ArrList {
	if m.IsEmpty() {
		return NilFloat64ArrList
	} else {
		acc := NilFloat64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrList) FlatMapRuneArrList(f func([]float64) RuneArrList) RuneArrList {
	if m.IsEmpty() {
		return NilRuneArrList
	} else {
		acc := NilRuneArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrList) FlatMapStringArrList(f func([]float64) StringArrList) StringArrList {
	if m.IsEmpty() {
		return NilStringArrList
	} else {
		acc := NilStringArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrList) FlatMapBoolListList(f func([]float64) BoolListList) BoolListList {
	if m.IsEmpty() {
		return NilBoolListList
	} else {
		acc := NilBoolListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrList) FlatMapAnyListList(f func([]float64) AnyListList) AnyListList {
	if m.IsEmpty() {
		return NilAnyListList
	} else {
		acc := NilAnyListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrList) FlatMapByteListList(f func([]float64) ByteListList) ByteListList {
	if m.IsEmpty() {
		return NilByteListList
	} else {
		acc := NilByteListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrList) FlatMapIntListList(f func([]float64) IntListList) IntListList {
	if m.IsEmpty() {
		return NilIntListList
	} else {
		acc := NilIntListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrList) FlatMapInt32ListList(f func([]float64) Int32ListList) Int32ListList {
	if m.IsEmpty() {
		return NilInt32ListList
	} else {
		acc := NilInt32ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrList) FlatMapInt64ListList(f func([]float64) Int64ListList) Int64ListList {
	if m.IsEmpty() {
		return NilInt64ListList
	} else {
		acc := NilInt64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrList) FlatMapUintListList(f func([]float64) UintListList) UintListList {
	if m.IsEmpty() {
		return NilUintListList
	} else {
		acc := NilUintListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrList) FlatMapUint64ListList(f func([]float64) Uint64ListList) Uint64ListList {
	if m.IsEmpty() {
		return NilUint64ListList
	} else {
		acc := NilUint64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrList) FlatMapUintptrListList(f func([]float64) UintptrListList) UintptrListList {
	if m.IsEmpty() {
		return NilUintptrListList
	} else {
		acc := NilUintptrListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrList) FlatMapFloat32ListList(f func([]float64) Float32ListList) Float32ListList {
	if m.IsEmpty() {
		return NilFloat32ListList
	} else {
		acc := NilFloat32ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrList) FlatMapFloat64ListList(f func([]float64) Float64ListList) Float64ListList {
	if m.IsEmpty() {
		return NilFloat64ListList
	} else {
		acc := NilFloat64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrList) FlatMapRuneListList(f func([]float64) RuneListList) RuneListList {
	if m.IsEmpty() {
		return NilRuneListList
	} else {
		acc := NilRuneListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrList) FlatMapStringListList(f func([]float64) StringListList) StringListList {
	if m.IsEmpty() {
		return NilStringListList
	} else {
		acc := NilStringListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrList) FlatMapBoolOptionList(f func([]float64) BoolOptionList) BoolOptionList {
	if m.IsEmpty() {
		return NilBoolOptionList
	} else {
		acc := NilBoolOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrList) FlatMapAnyOptionList(f func([]float64) AnyOptionList) AnyOptionList {
	if m.IsEmpty() {
		return NilAnyOptionList
	} else {
		acc := NilAnyOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrList) FlatMapByteOptionList(f func([]float64) ByteOptionList) ByteOptionList {
	if m.IsEmpty() {
		return NilByteOptionList
	} else {
		acc := NilByteOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrList) FlatMapIntOptionList(f func([]float64) IntOptionList) IntOptionList {
	if m.IsEmpty() {
		return NilIntOptionList
	} else {
		acc := NilIntOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrList) FlatMapInt32OptionList(f func([]float64) Int32OptionList) Int32OptionList {
	if m.IsEmpty() {
		return NilInt32OptionList
	} else {
		acc := NilInt32OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrList) FlatMapInt64OptionList(f func([]float64) Int64OptionList) Int64OptionList {
	if m.IsEmpty() {
		return NilInt64OptionList
	} else {
		acc := NilInt64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrList) FlatMapUintOptionList(f func([]float64) UintOptionList) UintOptionList {
	if m.IsEmpty() {
		return NilUintOptionList
	} else {
		acc := NilUintOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrList) FlatMapUint64OptionList(f func([]float64) Uint64OptionList) Uint64OptionList {
	if m.IsEmpty() {
		return NilUint64OptionList
	} else {
		acc := NilUint64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrList) FlatMapUintptrOptionList(f func([]float64) UintptrOptionList) UintptrOptionList {
	if m.IsEmpty() {
		return NilUintptrOptionList
	} else {
		acc := NilUintptrOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrList) FlatMapFloat32OptionList(f func([]float64) Float32OptionList) Float32OptionList {
	if m.IsEmpty() {
		return NilFloat32OptionList
	} else {
		acc := NilFloat32OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrList) FlatMapFloat64OptionList(f func([]float64) Float64OptionList) Float64OptionList {
	if m.IsEmpty() {
		return NilFloat64OptionList
	} else {
		acc := NilFloat64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrList) FlatMapRuneOptionList(f func([]float64) RuneOptionList) RuneOptionList {
	if m.IsEmpty() {
		return NilRuneOptionList
	} else {
		acc := NilRuneOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrList) FlatMapStringOptionList(f func([]float64) StringOptionList) StringOptionList {
	if m.IsEmpty() {
		return NilStringOptionList
	} else {
		acc := NilStringOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrList) FlatMapBoolList(f func([]rune) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBoolList
	} else {
		acc := NilBoolList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrList) FlatMapAnyList(f func([]rune) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAnyList
	} else {
		acc := NilAnyList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrList) FlatMapByteList(f func([]rune) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByteList
	} else {
		acc := NilByteList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrList) FlatMapIntList(f func([]rune) IntList) IntList {
	if m.IsEmpty() {
		return NilIntList
	} else {
		acc := NilIntList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrList) FlatMapInt32List(f func([]rune) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32List
	} else {
		acc := NilInt32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrList) FlatMapInt64List(f func([]rune) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64List
	} else {
		acc := NilInt64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrList) FlatMapUintList(f func([]rune) UintList) UintList {
	if m.IsEmpty() {
		return NilUintList
	} else {
		acc := NilUintList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrList) FlatMapUint64List(f func([]rune) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64List
	} else {
		acc := NilUint64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrList) FlatMapUintptrList(f func([]rune) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptrList
	} else {
		acc := NilUintptrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrList) FlatMapFloat32List(f func([]rune) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32List
	} else {
		acc := NilFloat32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrList) FlatMapFloat64List(f func([]rune) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64List
	} else {
		acc := NilFloat64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrList) FlatMapRuneList(f func([]rune) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRuneList
	} else {
		acc := NilRuneList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrList) FlatMapStringList(f func([]rune) StringList) StringList {
	if m.IsEmpty() {
		return NilStringList
	} else {
		acc := NilStringList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrList) FlatMapBoolArrList(f func([]rune) BoolArrList) BoolArrList {
	if m.IsEmpty() {
		return NilBoolArrList
	} else {
		acc := NilBoolArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrList) FlatMapAnyArrList(f func([]rune) AnyArrList) AnyArrList {
	if m.IsEmpty() {
		return NilAnyArrList
	} else {
		acc := NilAnyArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrList) FlatMapByteArrList(f func([]rune) ByteArrList) ByteArrList {
	if m.IsEmpty() {
		return NilByteArrList
	} else {
		acc := NilByteArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrList) FlatMapIntArrList(f func([]rune) IntArrList) IntArrList {
	if m.IsEmpty() {
		return NilIntArrList
	} else {
		acc := NilIntArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrList) FlatMapInt32ArrList(f func([]rune) Int32ArrList) Int32ArrList {
	if m.IsEmpty() {
		return NilInt32ArrList
	} else {
		acc := NilInt32ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrList) FlatMapInt64ArrList(f func([]rune) Int64ArrList) Int64ArrList {
	if m.IsEmpty() {
		return NilInt64ArrList
	} else {
		acc := NilInt64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrList) FlatMapUintArrList(f func([]rune) UintArrList) UintArrList {
	if m.IsEmpty() {
		return NilUintArrList
	} else {
		acc := NilUintArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrList) FlatMapUint64ArrList(f func([]rune) Uint64ArrList) Uint64ArrList {
	if m.IsEmpty() {
		return NilUint64ArrList
	} else {
		acc := NilUint64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrList) FlatMapUintptrArrList(f func([]rune) UintptrArrList) UintptrArrList {
	if m.IsEmpty() {
		return NilUintptrArrList
	} else {
		acc := NilUintptrArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrList) FlatMapFloat32ArrList(f func([]rune) Float32ArrList) Float32ArrList {
	if m.IsEmpty() {
		return NilFloat32ArrList
	} else {
		acc := NilFloat32ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrList) FlatMapFloat64ArrList(f func([]rune) Float64ArrList) Float64ArrList {
	if m.IsEmpty() {
		return NilFloat64ArrList
	} else {
		acc := NilFloat64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrList) FlatMapRuneArrList(f func([]rune) RuneArrList) RuneArrList {
	if m.IsEmpty() {
		return NilRuneArrList
	} else {
		acc := NilRuneArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrList) FlatMapStringArrList(f func([]rune) StringArrList) StringArrList {
	if m.IsEmpty() {
		return NilStringArrList
	} else {
		acc := NilStringArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrList) FlatMapBoolListList(f func([]rune) BoolListList) BoolListList {
	if m.IsEmpty() {
		return NilBoolListList
	} else {
		acc := NilBoolListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrList) FlatMapAnyListList(f func([]rune) AnyListList) AnyListList {
	if m.IsEmpty() {
		return NilAnyListList
	} else {
		acc := NilAnyListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrList) FlatMapByteListList(f func([]rune) ByteListList) ByteListList {
	if m.IsEmpty() {
		return NilByteListList
	} else {
		acc := NilByteListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrList) FlatMapIntListList(f func([]rune) IntListList) IntListList {
	if m.IsEmpty() {
		return NilIntListList
	} else {
		acc := NilIntListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrList) FlatMapInt32ListList(f func([]rune) Int32ListList) Int32ListList {
	if m.IsEmpty() {
		return NilInt32ListList
	} else {
		acc := NilInt32ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrList) FlatMapInt64ListList(f func([]rune) Int64ListList) Int64ListList {
	if m.IsEmpty() {
		return NilInt64ListList
	} else {
		acc := NilInt64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrList) FlatMapUintListList(f func([]rune) UintListList) UintListList {
	if m.IsEmpty() {
		return NilUintListList
	} else {
		acc := NilUintListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrList) FlatMapUint64ListList(f func([]rune) Uint64ListList) Uint64ListList {
	if m.IsEmpty() {
		return NilUint64ListList
	} else {
		acc := NilUint64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrList) FlatMapUintptrListList(f func([]rune) UintptrListList) UintptrListList {
	if m.IsEmpty() {
		return NilUintptrListList
	} else {
		acc := NilUintptrListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrList) FlatMapFloat32ListList(f func([]rune) Float32ListList) Float32ListList {
	if m.IsEmpty() {
		return NilFloat32ListList
	} else {
		acc := NilFloat32ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrList) FlatMapFloat64ListList(f func([]rune) Float64ListList) Float64ListList {
	if m.IsEmpty() {
		return NilFloat64ListList
	} else {
		acc := NilFloat64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrList) FlatMapRuneListList(f func([]rune) RuneListList) RuneListList {
	if m.IsEmpty() {
		return NilRuneListList
	} else {
		acc := NilRuneListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrList) FlatMapStringListList(f func([]rune) StringListList) StringListList {
	if m.IsEmpty() {
		return NilStringListList
	} else {
		acc := NilStringListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrList) FlatMapBoolOptionList(f func([]rune) BoolOptionList) BoolOptionList {
	if m.IsEmpty() {
		return NilBoolOptionList
	} else {
		acc := NilBoolOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrList) FlatMapAnyOptionList(f func([]rune) AnyOptionList) AnyOptionList {
	if m.IsEmpty() {
		return NilAnyOptionList
	} else {
		acc := NilAnyOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrList) FlatMapByteOptionList(f func([]rune) ByteOptionList) ByteOptionList {
	if m.IsEmpty() {
		return NilByteOptionList
	} else {
		acc := NilByteOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrList) FlatMapIntOptionList(f func([]rune) IntOptionList) IntOptionList {
	if m.IsEmpty() {
		return NilIntOptionList
	} else {
		acc := NilIntOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrList) FlatMapInt32OptionList(f func([]rune) Int32OptionList) Int32OptionList {
	if m.IsEmpty() {
		return NilInt32OptionList
	} else {
		acc := NilInt32OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrList) FlatMapInt64OptionList(f func([]rune) Int64OptionList) Int64OptionList {
	if m.IsEmpty() {
		return NilInt64OptionList
	} else {
		acc := NilInt64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrList) FlatMapUintOptionList(f func([]rune) UintOptionList) UintOptionList {
	if m.IsEmpty() {
		return NilUintOptionList
	} else {
		acc := NilUintOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrList) FlatMapUint64OptionList(f func([]rune) Uint64OptionList) Uint64OptionList {
	if m.IsEmpty() {
		return NilUint64OptionList
	} else {
		acc := NilUint64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrList) FlatMapUintptrOptionList(f func([]rune) UintptrOptionList) UintptrOptionList {
	if m.IsEmpty() {
		return NilUintptrOptionList
	} else {
		acc := NilUintptrOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrList) FlatMapFloat32OptionList(f func([]rune) Float32OptionList) Float32OptionList {
	if m.IsEmpty() {
		return NilFloat32OptionList
	} else {
		acc := NilFloat32OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrList) FlatMapFloat64OptionList(f func([]rune) Float64OptionList) Float64OptionList {
	if m.IsEmpty() {
		return NilFloat64OptionList
	} else {
		acc := NilFloat64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrList) FlatMapRuneOptionList(f func([]rune) RuneOptionList) RuneOptionList {
	if m.IsEmpty() {
		return NilRuneOptionList
	} else {
		acc := NilRuneOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrList) FlatMapStringOptionList(f func([]rune) StringOptionList) StringOptionList {
	if m.IsEmpty() {
		return NilStringOptionList
	} else {
		acc := NilStringOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrList) FlatMapBoolList(f func([]string) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBoolList
	} else {
		acc := NilBoolList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrList) FlatMapAnyList(f func([]string) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAnyList
	} else {
		acc := NilAnyList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrList) FlatMapByteList(f func([]string) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByteList
	} else {
		acc := NilByteList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrList) FlatMapIntList(f func([]string) IntList) IntList {
	if m.IsEmpty() {
		return NilIntList
	} else {
		acc := NilIntList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrList) FlatMapInt32List(f func([]string) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32List
	} else {
		acc := NilInt32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrList) FlatMapInt64List(f func([]string) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64List
	} else {
		acc := NilInt64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrList) FlatMapUintList(f func([]string) UintList) UintList {
	if m.IsEmpty() {
		return NilUintList
	} else {
		acc := NilUintList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrList) FlatMapUint64List(f func([]string) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64List
	} else {
		acc := NilUint64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrList) FlatMapUintptrList(f func([]string) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptrList
	} else {
		acc := NilUintptrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrList) FlatMapFloat32List(f func([]string) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32List
	} else {
		acc := NilFloat32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrList) FlatMapFloat64List(f func([]string) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64List
	} else {
		acc := NilFloat64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrList) FlatMapRuneList(f func([]string) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRuneList
	} else {
		acc := NilRuneList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrList) FlatMapStringList(f func([]string) StringList) StringList {
	if m.IsEmpty() {
		return NilStringList
	} else {
		acc := NilStringList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrList) FlatMapBoolArrList(f func([]string) BoolArrList) BoolArrList {
	if m.IsEmpty() {
		return NilBoolArrList
	} else {
		acc := NilBoolArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrList) FlatMapAnyArrList(f func([]string) AnyArrList) AnyArrList {
	if m.IsEmpty() {
		return NilAnyArrList
	} else {
		acc := NilAnyArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrList) FlatMapByteArrList(f func([]string) ByteArrList) ByteArrList {
	if m.IsEmpty() {
		return NilByteArrList
	} else {
		acc := NilByteArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrList) FlatMapIntArrList(f func([]string) IntArrList) IntArrList {
	if m.IsEmpty() {
		return NilIntArrList
	} else {
		acc := NilIntArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrList) FlatMapInt32ArrList(f func([]string) Int32ArrList) Int32ArrList {
	if m.IsEmpty() {
		return NilInt32ArrList
	} else {
		acc := NilInt32ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrList) FlatMapInt64ArrList(f func([]string) Int64ArrList) Int64ArrList {
	if m.IsEmpty() {
		return NilInt64ArrList
	} else {
		acc := NilInt64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrList) FlatMapUintArrList(f func([]string) UintArrList) UintArrList {
	if m.IsEmpty() {
		return NilUintArrList
	} else {
		acc := NilUintArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrList) FlatMapUint64ArrList(f func([]string) Uint64ArrList) Uint64ArrList {
	if m.IsEmpty() {
		return NilUint64ArrList
	} else {
		acc := NilUint64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrList) FlatMapUintptrArrList(f func([]string) UintptrArrList) UintptrArrList {
	if m.IsEmpty() {
		return NilUintptrArrList
	} else {
		acc := NilUintptrArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrList) FlatMapFloat32ArrList(f func([]string) Float32ArrList) Float32ArrList {
	if m.IsEmpty() {
		return NilFloat32ArrList
	} else {
		acc := NilFloat32ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrList) FlatMapFloat64ArrList(f func([]string) Float64ArrList) Float64ArrList {
	if m.IsEmpty() {
		return NilFloat64ArrList
	} else {
		acc := NilFloat64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrList) FlatMapRuneArrList(f func([]string) RuneArrList) RuneArrList {
	if m.IsEmpty() {
		return NilRuneArrList
	} else {
		acc := NilRuneArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrList) FlatMapStringArrList(f func([]string) StringArrList) StringArrList {
	if m.IsEmpty() {
		return NilStringArrList
	} else {
		acc := NilStringArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrList) FlatMapBoolListList(f func([]string) BoolListList) BoolListList {
	if m.IsEmpty() {
		return NilBoolListList
	} else {
		acc := NilBoolListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrList) FlatMapAnyListList(f func([]string) AnyListList) AnyListList {
	if m.IsEmpty() {
		return NilAnyListList
	} else {
		acc := NilAnyListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrList) FlatMapByteListList(f func([]string) ByteListList) ByteListList {
	if m.IsEmpty() {
		return NilByteListList
	} else {
		acc := NilByteListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrList) FlatMapIntListList(f func([]string) IntListList) IntListList {
	if m.IsEmpty() {
		return NilIntListList
	} else {
		acc := NilIntListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrList) FlatMapInt32ListList(f func([]string) Int32ListList) Int32ListList {
	if m.IsEmpty() {
		return NilInt32ListList
	} else {
		acc := NilInt32ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrList) FlatMapInt64ListList(f func([]string) Int64ListList) Int64ListList {
	if m.IsEmpty() {
		return NilInt64ListList
	} else {
		acc := NilInt64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrList) FlatMapUintListList(f func([]string) UintListList) UintListList {
	if m.IsEmpty() {
		return NilUintListList
	} else {
		acc := NilUintListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrList) FlatMapUint64ListList(f func([]string) Uint64ListList) Uint64ListList {
	if m.IsEmpty() {
		return NilUint64ListList
	} else {
		acc := NilUint64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrList) FlatMapUintptrListList(f func([]string) UintptrListList) UintptrListList {
	if m.IsEmpty() {
		return NilUintptrListList
	} else {
		acc := NilUintptrListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrList) FlatMapFloat32ListList(f func([]string) Float32ListList) Float32ListList {
	if m.IsEmpty() {
		return NilFloat32ListList
	} else {
		acc := NilFloat32ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrList) FlatMapFloat64ListList(f func([]string) Float64ListList) Float64ListList {
	if m.IsEmpty() {
		return NilFloat64ListList
	} else {
		acc := NilFloat64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrList) FlatMapRuneListList(f func([]string) RuneListList) RuneListList {
	if m.IsEmpty() {
		return NilRuneListList
	} else {
		acc := NilRuneListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrList) FlatMapStringListList(f func([]string) StringListList) StringListList {
	if m.IsEmpty() {
		return NilStringListList
	} else {
		acc := NilStringListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrList) FlatMapBoolOptionList(f func([]string) BoolOptionList) BoolOptionList {
	if m.IsEmpty() {
		return NilBoolOptionList
	} else {
		acc := NilBoolOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrList) FlatMapAnyOptionList(f func([]string) AnyOptionList) AnyOptionList {
	if m.IsEmpty() {
		return NilAnyOptionList
	} else {
		acc := NilAnyOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrList) FlatMapByteOptionList(f func([]string) ByteOptionList) ByteOptionList {
	if m.IsEmpty() {
		return NilByteOptionList
	} else {
		acc := NilByteOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrList) FlatMapIntOptionList(f func([]string) IntOptionList) IntOptionList {
	if m.IsEmpty() {
		return NilIntOptionList
	} else {
		acc := NilIntOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrList) FlatMapInt32OptionList(f func([]string) Int32OptionList) Int32OptionList {
	if m.IsEmpty() {
		return NilInt32OptionList
	} else {
		acc := NilInt32OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrList) FlatMapInt64OptionList(f func([]string) Int64OptionList) Int64OptionList {
	if m.IsEmpty() {
		return NilInt64OptionList
	} else {
		acc := NilInt64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrList) FlatMapUintOptionList(f func([]string) UintOptionList) UintOptionList {
	if m.IsEmpty() {
		return NilUintOptionList
	} else {
		acc := NilUintOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrList) FlatMapUint64OptionList(f func([]string) Uint64OptionList) Uint64OptionList {
	if m.IsEmpty() {
		return NilUint64OptionList
	} else {
		acc := NilUint64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrList) FlatMapUintptrOptionList(f func([]string) UintptrOptionList) UintptrOptionList {
	if m.IsEmpty() {
		return NilUintptrOptionList
	} else {
		acc := NilUintptrOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrList) FlatMapFloat32OptionList(f func([]string) Float32OptionList) Float32OptionList {
	if m.IsEmpty() {
		return NilFloat32OptionList
	} else {
		acc := NilFloat32OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrList) FlatMapFloat64OptionList(f func([]string) Float64OptionList) Float64OptionList {
	if m.IsEmpty() {
		return NilFloat64OptionList
	} else {
		acc := NilFloat64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrList) FlatMapRuneOptionList(f func([]string) RuneOptionList) RuneOptionList {
	if m.IsEmpty() {
		return NilRuneOptionList
	} else {
		acc := NilRuneOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrList) FlatMapStringOptionList(f func([]string) StringOptionList) StringOptionList {
	if m.IsEmpty() {
		return NilStringOptionList
	} else {
		acc := NilStringOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListList) FlatMapBoolList(f func(BoolList) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBoolList
	} else {
		acc := NilBoolList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListList) FlatMapAnyList(f func(BoolList) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAnyList
	} else {
		acc := NilAnyList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListList) FlatMapByteList(f func(BoolList) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByteList
	} else {
		acc := NilByteList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListList) FlatMapIntList(f func(BoolList) IntList) IntList {
	if m.IsEmpty() {
		return NilIntList
	} else {
		acc := NilIntList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListList) FlatMapInt32List(f func(BoolList) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32List
	} else {
		acc := NilInt32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListList) FlatMapInt64List(f func(BoolList) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64List
	} else {
		acc := NilInt64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListList) FlatMapUintList(f func(BoolList) UintList) UintList {
	if m.IsEmpty() {
		return NilUintList
	} else {
		acc := NilUintList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListList) FlatMapUint64List(f func(BoolList) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64List
	} else {
		acc := NilUint64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListList) FlatMapUintptrList(f func(BoolList) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptrList
	} else {
		acc := NilUintptrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListList) FlatMapFloat32List(f func(BoolList) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32List
	} else {
		acc := NilFloat32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListList) FlatMapFloat64List(f func(BoolList) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64List
	} else {
		acc := NilFloat64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListList) FlatMapRuneList(f func(BoolList) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRuneList
	} else {
		acc := NilRuneList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListList) FlatMapStringList(f func(BoolList) StringList) StringList {
	if m.IsEmpty() {
		return NilStringList
	} else {
		acc := NilStringList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListList) FlatMapBoolArrList(f func(BoolList) BoolArrList) BoolArrList {
	if m.IsEmpty() {
		return NilBoolArrList
	} else {
		acc := NilBoolArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListList) FlatMapAnyArrList(f func(BoolList) AnyArrList) AnyArrList {
	if m.IsEmpty() {
		return NilAnyArrList
	} else {
		acc := NilAnyArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListList) FlatMapByteArrList(f func(BoolList) ByteArrList) ByteArrList {
	if m.IsEmpty() {
		return NilByteArrList
	} else {
		acc := NilByteArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListList) FlatMapIntArrList(f func(BoolList) IntArrList) IntArrList {
	if m.IsEmpty() {
		return NilIntArrList
	} else {
		acc := NilIntArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListList) FlatMapInt32ArrList(f func(BoolList) Int32ArrList) Int32ArrList {
	if m.IsEmpty() {
		return NilInt32ArrList
	} else {
		acc := NilInt32ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListList) FlatMapInt64ArrList(f func(BoolList) Int64ArrList) Int64ArrList {
	if m.IsEmpty() {
		return NilInt64ArrList
	} else {
		acc := NilInt64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListList) FlatMapUintArrList(f func(BoolList) UintArrList) UintArrList {
	if m.IsEmpty() {
		return NilUintArrList
	} else {
		acc := NilUintArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListList) FlatMapUint64ArrList(f func(BoolList) Uint64ArrList) Uint64ArrList {
	if m.IsEmpty() {
		return NilUint64ArrList
	} else {
		acc := NilUint64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListList) FlatMapUintptrArrList(f func(BoolList) UintptrArrList) UintptrArrList {
	if m.IsEmpty() {
		return NilUintptrArrList
	} else {
		acc := NilUintptrArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListList) FlatMapFloat32ArrList(f func(BoolList) Float32ArrList) Float32ArrList {
	if m.IsEmpty() {
		return NilFloat32ArrList
	} else {
		acc := NilFloat32ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListList) FlatMapFloat64ArrList(f func(BoolList) Float64ArrList) Float64ArrList {
	if m.IsEmpty() {
		return NilFloat64ArrList
	} else {
		acc := NilFloat64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListList) FlatMapRuneArrList(f func(BoolList) RuneArrList) RuneArrList {
	if m.IsEmpty() {
		return NilRuneArrList
	} else {
		acc := NilRuneArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListList) FlatMapStringArrList(f func(BoolList) StringArrList) StringArrList {
	if m.IsEmpty() {
		return NilStringArrList
	} else {
		acc := NilStringArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListList) FlatMapBoolListList(f func(BoolList) BoolListList) BoolListList {
	if m.IsEmpty() {
		return NilBoolListList
	} else {
		acc := NilBoolListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListList) FlatMapAnyListList(f func(BoolList) AnyListList) AnyListList {
	if m.IsEmpty() {
		return NilAnyListList
	} else {
		acc := NilAnyListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListList) FlatMapByteListList(f func(BoolList) ByteListList) ByteListList {
	if m.IsEmpty() {
		return NilByteListList
	} else {
		acc := NilByteListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListList) FlatMapIntListList(f func(BoolList) IntListList) IntListList {
	if m.IsEmpty() {
		return NilIntListList
	} else {
		acc := NilIntListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListList) FlatMapInt32ListList(f func(BoolList) Int32ListList) Int32ListList {
	if m.IsEmpty() {
		return NilInt32ListList
	} else {
		acc := NilInt32ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListList) FlatMapInt64ListList(f func(BoolList) Int64ListList) Int64ListList {
	if m.IsEmpty() {
		return NilInt64ListList
	} else {
		acc := NilInt64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListList) FlatMapUintListList(f func(BoolList) UintListList) UintListList {
	if m.IsEmpty() {
		return NilUintListList
	} else {
		acc := NilUintListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListList) FlatMapUint64ListList(f func(BoolList) Uint64ListList) Uint64ListList {
	if m.IsEmpty() {
		return NilUint64ListList
	} else {
		acc := NilUint64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListList) FlatMapUintptrListList(f func(BoolList) UintptrListList) UintptrListList {
	if m.IsEmpty() {
		return NilUintptrListList
	} else {
		acc := NilUintptrListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListList) FlatMapFloat32ListList(f func(BoolList) Float32ListList) Float32ListList {
	if m.IsEmpty() {
		return NilFloat32ListList
	} else {
		acc := NilFloat32ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListList) FlatMapFloat64ListList(f func(BoolList) Float64ListList) Float64ListList {
	if m.IsEmpty() {
		return NilFloat64ListList
	} else {
		acc := NilFloat64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListList) FlatMapRuneListList(f func(BoolList) RuneListList) RuneListList {
	if m.IsEmpty() {
		return NilRuneListList
	} else {
		acc := NilRuneListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListList) FlatMapStringListList(f func(BoolList) StringListList) StringListList {
	if m.IsEmpty() {
		return NilStringListList
	} else {
		acc := NilStringListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListList) FlatMapBoolOptionList(f func(BoolList) BoolOptionList) BoolOptionList {
	if m.IsEmpty() {
		return NilBoolOptionList
	} else {
		acc := NilBoolOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListList) FlatMapAnyOptionList(f func(BoolList) AnyOptionList) AnyOptionList {
	if m.IsEmpty() {
		return NilAnyOptionList
	} else {
		acc := NilAnyOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListList) FlatMapByteOptionList(f func(BoolList) ByteOptionList) ByteOptionList {
	if m.IsEmpty() {
		return NilByteOptionList
	} else {
		acc := NilByteOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListList) FlatMapIntOptionList(f func(BoolList) IntOptionList) IntOptionList {
	if m.IsEmpty() {
		return NilIntOptionList
	} else {
		acc := NilIntOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListList) FlatMapInt32OptionList(f func(BoolList) Int32OptionList) Int32OptionList {
	if m.IsEmpty() {
		return NilInt32OptionList
	} else {
		acc := NilInt32OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListList) FlatMapInt64OptionList(f func(BoolList) Int64OptionList) Int64OptionList {
	if m.IsEmpty() {
		return NilInt64OptionList
	} else {
		acc := NilInt64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListList) FlatMapUintOptionList(f func(BoolList) UintOptionList) UintOptionList {
	if m.IsEmpty() {
		return NilUintOptionList
	} else {
		acc := NilUintOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListList) FlatMapUint64OptionList(f func(BoolList) Uint64OptionList) Uint64OptionList {
	if m.IsEmpty() {
		return NilUint64OptionList
	} else {
		acc := NilUint64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListList) FlatMapUintptrOptionList(f func(BoolList) UintptrOptionList) UintptrOptionList {
	if m.IsEmpty() {
		return NilUintptrOptionList
	} else {
		acc := NilUintptrOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListList) FlatMapFloat32OptionList(f func(BoolList) Float32OptionList) Float32OptionList {
	if m.IsEmpty() {
		return NilFloat32OptionList
	} else {
		acc := NilFloat32OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListList) FlatMapFloat64OptionList(f func(BoolList) Float64OptionList) Float64OptionList {
	if m.IsEmpty() {
		return NilFloat64OptionList
	} else {
		acc := NilFloat64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListList) FlatMapRuneOptionList(f func(BoolList) RuneOptionList) RuneOptionList {
	if m.IsEmpty() {
		return NilRuneOptionList
	} else {
		acc := NilRuneOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListList) FlatMapStringOptionList(f func(BoolList) StringOptionList) StringOptionList {
	if m.IsEmpty() {
		return NilStringOptionList
	} else {
		acc := NilStringOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListList) FlatMapBoolList(f func(AnyList) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBoolList
	} else {
		acc := NilBoolList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListList) FlatMapAnyList(f func(AnyList) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAnyList
	} else {
		acc := NilAnyList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListList) FlatMapByteList(f func(AnyList) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByteList
	} else {
		acc := NilByteList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListList) FlatMapIntList(f func(AnyList) IntList) IntList {
	if m.IsEmpty() {
		return NilIntList
	} else {
		acc := NilIntList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListList) FlatMapInt32List(f func(AnyList) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32List
	} else {
		acc := NilInt32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListList) FlatMapInt64List(f func(AnyList) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64List
	} else {
		acc := NilInt64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListList) FlatMapUintList(f func(AnyList) UintList) UintList {
	if m.IsEmpty() {
		return NilUintList
	} else {
		acc := NilUintList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListList) FlatMapUint64List(f func(AnyList) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64List
	} else {
		acc := NilUint64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListList) FlatMapUintptrList(f func(AnyList) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptrList
	} else {
		acc := NilUintptrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListList) FlatMapFloat32List(f func(AnyList) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32List
	} else {
		acc := NilFloat32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListList) FlatMapFloat64List(f func(AnyList) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64List
	} else {
		acc := NilFloat64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListList) FlatMapRuneList(f func(AnyList) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRuneList
	} else {
		acc := NilRuneList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListList) FlatMapStringList(f func(AnyList) StringList) StringList {
	if m.IsEmpty() {
		return NilStringList
	} else {
		acc := NilStringList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListList) FlatMapBoolArrList(f func(AnyList) BoolArrList) BoolArrList {
	if m.IsEmpty() {
		return NilBoolArrList
	} else {
		acc := NilBoolArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListList) FlatMapAnyArrList(f func(AnyList) AnyArrList) AnyArrList {
	if m.IsEmpty() {
		return NilAnyArrList
	} else {
		acc := NilAnyArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListList) FlatMapByteArrList(f func(AnyList) ByteArrList) ByteArrList {
	if m.IsEmpty() {
		return NilByteArrList
	} else {
		acc := NilByteArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListList) FlatMapIntArrList(f func(AnyList) IntArrList) IntArrList {
	if m.IsEmpty() {
		return NilIntArrList
	} else {
		acc := NilIntArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListList) FlatMapInt32ArrList(f func(AnyList) Int32ArrList) Int32ArrList {
	if m.IsEmpty() {
		return NilInt32ArrList
	} else {
		acc := NilInt32ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListList) FlatMapInt64ArrList(f func(AnyList) Int64ArrList) Int64ArrList {
	if m.IsEmpty() {
		return NilInt64ArrList
	} else {
		acc := NilInt64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListList) FlatMapUintArrList(f func(AnyList) UintArrList) UintArrList {
	if m.IsEmpty() {
		return NilUintArrList
	} else {
		acc := NilUintArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListList) FlatMapUint64ArrList(f func(AnyList) Uint64ArrList) Uint64ArrList {
	if m.IsEmpty() {
		return NilUint64ArrList
	} else {
		acc := NilUint64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListList) FlatMapUintptrArrList(f func(AnyList) UintptrArrList) UintptrArrList {
	if m.IsEmpty() {
		return NilUintptrArrList
	} else {
		acc := NilUintptrArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListList) FlatMapFloat32ArrList(f func(AnyList) Float32ArrList) Float32ArrList {
	if m.IsEmpty() {
		return NilFloat32ArrList
	} else {
		acc := NilFloat32ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListList) FlatMapFloat64ArrList(f func(AnyList) Float64ArrList) Float64ArrList {
	if m.IsEmpty() {
		return NilFloat64ArrList
	} else {
		acc := NilFloat64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListList) FlatMapRuneArrList(f func(AnyList) RuneArrList) RuneArrList {
	if m.IsEmpty() {
		return NilRuneArrList
	} else {
		acc := NilRuneArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListList) FlatMapStringArrList(f func(AnyList) StringArrList) StringArrList {
	if m.IsEmpty() {
		return NilStringArrList
	} else {
		acc := NilStringArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListList) FlatMapBoolListList(f func(AnyList) BoolListList) BoolListList {
	if m.IsEmpty() {
		return NilBoolListList
	} else {
		acc := NilBoolListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListList) FlatMapAnyListList(f func(AnyList) AnyListList) AnyListList {
	if m.IsEmpty() {
		return NilAnyListList
	} else {
		acc := NilAnyListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListList) FlatMapByteListList(f func(AnyList) ByteListList) ByteListList {
	if m.IsEmpty() {
		return NilByteListList
	} else {
		acc := NilByteListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListList) FlatMapIntListList(f func(AnyList) IntListList) IntListList {
	if m.IsEmpty() {
		return NilIntListList
	} else {
		acc := NilIntListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListList) FlatMapInt32ListList(f func(AnyList) Int32ListList) Int32ListList {
	if m.IsEmpty() {
		return NilInt32ListList
	} else {
		acc := NilInt32ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListList) FlatMapInt64ListList(f func(AnyList) Int64ListList) Int64ListList {
	if m.IsEmpty() {
		return NilInt64ListList
	} else {
		acc := NilInt64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListList) FlatMapUintListList(f func(AnyList) UintListList) UintListList {
	if m.IsEmpty() {
		return NilUintListList
	} else {
		acc := NilUintListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListList) FlatMapUint64ListList(f func(AnyList) Uint64ListList) Uint64ListList {
	if m.IsEmpty() {
		return NilUint64ListList
	} else {
		acc := NilUint64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListList) FlatMapUintptrListList(f func(AnyList) UintptrListList) UintptrListList {
	if m.IsEmpty() {
		return NilUintptrListList
	} else {
		acc := NilUintptrListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListList) FlatMapFloat32ListList(f func(AnyList) Float32ListList) Float32ListList {
	if m.IsEmpty() {
		return NilFloat32ListList
	} else {
		acc := NilFloat32ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListList) FlatMapFloat64ListList(f func(AnyList) Float64ListList) Float64ListList {
	if m.IsEmpty() {
		return NilFloat64ListList
	} else {
		acc := NilFloat64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListList) FlatMapRuneListList(f func(AnyList) RuneListList) RuneListList {
	if m.IsEmpty() {
		return NilRuneListList
	} else {
		acc := NilRuneListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListList) FlatMapStringListList(f func(AnyList) StringListList) StringListList {
	if m.IsEmpty() {
		return NilStringListList
	} else {
		acc := NilStringListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListList) FlatMapBoolOptionList(f func(AnyList) BoolOptionList) BoolOptionList {
	if m.IsEmpty() {
		return NilBoolOptionList
	} else {
		acc := NilBoolOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListList) FlatMapAnyOptionList(f func(AnyList) AnyOptionList) AnyOptionList {
	if m.IsEmpty() {
		return NilAnyOptionList
	} else {
		acc := NilAnyOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListList) FlatMapByteOptionList(f func(AnyList) ByteOptionList) ByteOptionList {
	if m.IsEmpty() {
		return NilByteOptionList
	} else {
		acc := NilByteOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListList) FlatMapIntOptionList(f func(AnyList) IntOptionList) IntOptionList {
	if m.IsEmpty() {
		return NilIntOptionList
	} else {
		acc := NilIntOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListList) FlatMapInt32OptionList(f func(AnyList) Int32OptionList) Int32OptionList {
	if m.IsEmpty() {
		return NilInt32OptionList
	} else {
		acc := NilInt32OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListList) FlatMapInt64OptionList(f func(AnyList) Int64OptionList) Int64OptionList {
	if m.IsEmpty() {
		return NilInt64OptionList
	} else {
		acc := NilInt64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListList) FlatMapUintOptionList(f func(AnyList) UintOptionList) UintOptionList {
	if m.IsEmpty() {
		return NilUintOptionList
	} else {
		acc := NilUintOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListList) FlatMapUint64OptionList(f func(AnyList) Uint64OptionList) Uint64OptionList {
	if m.IsEmpty() {
		return NilUint64OptionList
	} else {
		acc := NilUint64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListList) FlatMapUintptrOptionList(f func(AnyList) UintptrOptionList) UintptrOptionList {
	if m.IsEmpty() {
		return NilUintptrOptionList
	} else {
		acc := NilUintptrOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListList) FlatMapFloat32OptionList(f func(AnyList) Float32OptionList) Float32OptionList {
	if m.IsEmpty() {
		return NilFloat32OptionList
	} else {
		acc := NilFloat32OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListList) FlatMapFloat64OptionList(f func(AnyList) Float64OptionList) Float64OptionList {
	if m.IsEmpty() {
		return NilFloat64OptionList
	} else {
		acc := NilFloat64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListList) FlatMapRuneOptionList(f func(AnyList) RuneOptionList) RuneOptionList {
	if m.IsEmpty() {
		return NilRuneOptionList
	} else {
		acc := NilRuneOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListList) FlatMapStringOptionList(f func(AnyList) StringOptionList) StringOptionList {
	if m.IsEmpty() {
		return NilStringOptionList
	} else {
		acc := NilStringOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListList) FlatMapBoolList(f func(ByteList) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBoolList
	} else {
		acc := NilBoolList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListList) FlatMapAnyList(f func(ByteList) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAnyList
	} else {
		acc := NilAnyList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListList) FlatMapByteList(f func(ByteList) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByteList
	} else {
		acc := NilByteList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListList) FlatMapIntList(f func(ByteList) IntList) IntList {
	if m.IsEmpty() {
		return NilIntList
	} else {
		acc := NilIntList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListList) FlatMapInt32List(f func(ByteList) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32List
	} else {
		acc := NilInt32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListList) FlatMapInt64List(f func(ByteList) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64List
	} else {
		acc := NilInt64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListList) FlatMapUintList(f func(ByteList) UintList) UintList {
	if m.IsEmpty() {
		return NilUintList
	} else {
		acc := NilUintList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListList) FlatMapUint64List(f func(ByteList) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64List
	} else {
		acc := NilUint64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListList) FlatMapUintptrList(f func(ByteList) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptrList
	} else {
		acc := NilUintptrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListList) FlatMapFloat32List(f func(ByteList) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32List
	} else {
		acc := NilFloat32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListList) FlatMapFloat64List(f func(ByteList) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64List
	} else {
		acc := NilFloat64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListList) FlatMapRuneList(f func(ByteList) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRuneList
	} else {
		acc := NilRuneList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListList) FlatMapStringList(f func(ByteList) StringList) StringList {
	if m.IsEmpty() {
		return NilStringList
	} else {
		acc := NilStringList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListList) FlatMapBoolArrList(f func(ByteList) BoolArrList) BoolArrList {
	if m.IsEmpty() {
		return NilBoolArrList
	} else {
		acc := NilBoolArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListList) FlatMapAnyArrList(f func(ByteList) AnyArrList) AnyArrList {
	if m.IsEmpty() {
		return NilAnyArrList
	} else {
		acc := NilAnyArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListList) FlatMapByteArrList(f func(ByteList) ByteArrList) ByteArrList {
	if m.IsEmpty() {
		return NilByteArrList
	} else {
		acc := NilByteArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListList) FlatMapIntArrList(f func(ByteList) IntArrList) IntArrList {
	if m.IsEmpty() {
		return NilIntArrList
	} else {
		acc := NilIntArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListList) FlatMapInt32ArrList(f func(ByteList) Int32ArrList) Int32ArrList {
	if m.IsEmpty() {
		return NilInt32ArrList
	} else {
		acc := NilInt32ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListList) FlatMapInt64ArrList(f func(ByteList) Int64ArrList) Int64ArrList {
	if m.IsEmpty() {
		return NilInt64ArrList
	} else {
		acc := NilInt64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListList) FlatMapUintArrList(f func(ByteList) UintArrList) UintArrList {
	if m.IsEmpty() {
		return NilUintArrList
	} else {
		acc := NilUintArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListList) FlatMapUint64ArrList(f func(ByteList) Uint64ArrList) Uint64ArrList {
	if m.IsEmpty() {
		return NilUint64ArrList
	} else {
		acc := NilUint64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListList) FlatMapUintptrArrList(f func(ByteList) UintptrArrList) UintptrArrList {
	if m.IsEmpty() {
		return NilUintptrArrList
	} else {
		acc := NilUintptrArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListList) FlatMapFloat32ArrList(f func(ByteList) Float32ArrList) Float32ArrList {
	if m.IsEmpty() {
		return NilFloat32ArrList
	} else {
		acc := NilFloat32ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListList) FlatMapFloat64ArrList(f func(ByteList) Float64ArrList) Float64ArrList {
	if m.IsEmpty() {
		return NilFloat64ArrList
	} else {
		acc := NilFloat64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListList) FlatMapRuneArrList(f func(ByteList) RuneArrList) RuneArrList {
	if m.IsEmpty() {
		return NilRuneArrList
	} else {
		acc := NilRuneArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListList) FlatMapStringArrList(f func(ByteList) StringArrList) StringArrList {
	if m.IsEmpty() {
		return NilStringArrList
	} else {
		acc := NilStringArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListList) FlatMapBoolListList(f func(ByteList) BoolListList) BoolListList {
	if m.IsEmpty() {
		return NilBoolListList
	} else {
		acc := NilBoolListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListList) FlatMapAnyListList(f func(ByteList) AnyListList) AnyListList {
	if m.IsEmpty() {
		return NilAnyListList
	} else {
		acc := NilAnyListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListList) FlatMapByteListList(f func(ByteList) ByteListList) ByteListList {
	if m.IsEmpty() {
		return NilByteListList
	} else {
		acc := NilByteListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListList) FlatMapIntListList(f func(ByteList) IntListList) IntListList {
	if m.IsEmpty() {
		return NilIntListList
	} else {
		acc := NilIntListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListList) FlatMapInt32ListList(f func(ByteList) Int32ListList) Int32ListList {
	if m.IsEmpty() {
		return NilInt32ListList
	} else {
		acc := NilInt32ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListList) FlatMapInt64ListList(f func(ByteList) Int64ListList) Int64ListList {
	if m.IsEmpty() {
		return NilInt64ListList
	} else {
		acc := NilInt64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListList) FlatMapUintListList(f func(ByteList) UintListList) UintListList {
	if m.IsEmpty() {
		return NilUintListList
	} else {
		acc := NilUintListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListList) FlatMapUint64ListList(f func(ByteList) Uint64ListList) Uint64ListList {
	if m.IsEmpty() {
		return NilUint64ListList
	} else {
		acc := NilUint64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListList) FlatMapUintptrListList(f func(ByteList) UintptrListList) UintptrListList {
	if m.IsEmpty() {
		return NilUintptrListList
	} else {
		acc := NilUintptrListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListList) FlatMapFloat32ListList(f func(ByteList) Float32ListList) Float32ListList {
	if m.IsEmpty() {
		return NilFloat32ListList
	} else {
		acc := NilFloat32ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListList) FlatMapFloat64ListList(f func(ByteList) Float64ListList) Float64ListList {
	if m.IsEmpty() {
		return NilFloat64ListList
	} else {
		acc := NilFloat64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListList) FlatMapRuneListList(f func(ByteList) RuneListList) RuneListList {
	if m.IsEmpty() {
		return NilRuneListList
	} else {
		acc := NilRuneListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListList) FlatMapStringListList(f func(ByteList) StringListList) StringListList {
	if m.IsEmpty() {
		return NilStringListList
	} else {
		acc := NilStringListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListList) FlatMapBoolOptionList(f func(ByteList) BoolOptionList) BoolOptionList {
	if m.IsEmpty() {
		return NilBoolOptionList
	} else {
		acc := NilBoolOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListList) FlatMapAnyOptionList(f func(ByteList) AnyOptionList) AnyOptionList {
	if m.IsEmpty() {
		return NilAnyOptionList
	} else {
		acc := NilAnyOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListList) FlatMapByteOptionList(f func(ByteList) ByteOptionList) ByteOptionList {
	if m.IsEmpty() {
		return NilByteOptionList
	} else {
		acc := NilByteOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListList) FlatMapIntOptionList(f func(ByteList) IntOptionList) IntOptionList {
	if m.IsEmpty() {
		return NilIntOptionList
	} else {
		acc := NilIntOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListList) FlatMapInt32OptionList(f func(ByteList) Int32OptionList) Int32OptionList {
	if m.IsEmpty() {
		return NilInt32OptionList
	} else {
		acc := NilInt32OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListList) FlatMapInt64OptionList(f func(ByteList) Int64OptionList) Int64OptionList {
	if m.IsEmpty() {
		return NilInt64OptionList
	} else {
		acc := NilInt64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListList) FlatMapUintOptionList(f func(ByteList) UintOptionList) UintOptionList {
	if m.IsEmpty() {
		return NilUintOptionList
	} else {
		acc := NilUintOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListList) FlatMapUint64OptionList(f func(ByteList) Uint64OptionList) Uint64OptionList {
	if m.IsEmpty() {
		return NilUint64OptionList
	} else {
		acc := NilUint64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListList) FlatMapUintptrOptionList(f func(ByteList) UintptrOptionList) UintptrOptionList {
	if m.IsEmpty() {
		return NilUintptrOptionList
	} else {
		acc := NilUintptrOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListList) FlatMapFloat32OptionList(f func(ByteList) Float32OptionList) Float32OptionList {
	if m.IsEmpty() {
		return NilFloat32OptionList
	} else {
		acc := NilFloat32OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListList) FlatMapFloat64OptionList(f func(ByteList) Float64OptionList) Float64OptionList {
	if m.IsEmpty() {
		return NilFloat64OptionList
	} else {
		acc := NilFloat64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListList) FlatMapRuneOptionList(f func(ByteList) RuneOptionList) RuneOptionList {
	if m.IsEmpty() {
		return NilRuneOptionList
	} else {
		acc := NilRuneOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListList) FlatMapStringOptionList(f func(ByteList) StringOptionList) StringOptionList {
	if m.IsEmpty() {
		return NilStringOptionList
	} else {
		acc := NilStringOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListList) FlatMapBoolList(f func(IntList) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBoolList
	} else {
		acc := NilBoolList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListList) FlatMapAnyList(f func(IntList) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAnyList
	} else {
		acc := NilAnyList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListList) FlatMapByteList(f func(IntList) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByteList
	} else {
		acc := NilByteList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListList) FlatMapIntList(f func(IntList) IntList) IntList {
	if m.IsEmpty() {
		return NilIntList
	} else {
		acc := NilIntList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListList) FlatMapInt32List(f func(IntList) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32List
	} else {
		acc := NilInt32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListList) FlatMapInt64List(f func(IntList) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64List
	} else {
		acc := NilInt64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListList) FlatMapUintList(f func(IntList) UintList) UintList {
	if m.IsEmpty() {
		return NilUintList
	} else {
		acc := NilUintList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListList) FlatMapUint64List(f func(IntList) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64List
	} else {
		acc := NilUint64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListList) FlatMapUintptrList(f func(IntList) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptrList
	} else {
		acc := NilUintptrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListList) FlatMapFloat32List(f func(IntList) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32List
	} else {
		acc := NilFloat32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListList) FlatMapFloat64List(f func(IntList) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64List
	} else {
		acc := NilFloat64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListList) FlatMapRuneList(f func(IntList) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRuneList
	} else {
		acc := NilRuneList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListList) FlatMapStringList(f func(IntList) StringList) StringList {
	if m.IsEmpty() {
		return NilStringList
	} else {
		acc := NilStringList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListList) FlatMapBoolArrList(f func(IntList) BoolArrList) BoolArrList {
	if m.IsEmpty() {
		return NilBoolArrList
	} else {
		acc := NilBoolArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListList) FlatMapAnyArrList(f func(IntList) AnyArrList) AnyArrList {
	if m.IsEmpty() {
		return NilAnyArrList
	} else {
		acc := NilAnyArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListList) FlatMapByteArrList(f func(IntList) ByteArrList) ByteArrList {
	if m.IsEmpty() {
		return NilByteArrList
	} else {
		acc := NilByteArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListList) FlatMapIntArrList(f func(IntList) IntArrList) IntArrList {
	if m.IsEmpty() {
		return NilIntArrList
	} else {
		acc := NilIntArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListList) FlatMapInt32ArrList(f func(IntList) Int32ArrList) Int32ArrList {
	if m.IsEmpty() {
		return NilInt32ArrList
	} else {
		acc := NilInt32ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListList) FlatMapInt64ArrList(f func(IntList) Int64ArrList) Int64ArrList {
	if m.IsEmpty() {
		return NilInt64ArrList
	} else {
		acc := NilInt64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListList) FlatMapUintArrList(f func(IntList) UintArrList) UintArrList {
	if m.IsEmpty() {
		return NilUintArrList
	} else {
		acc := NilUintArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListList) FlatMapUint64ArrList(f func(IntList) Uint64ArrList) Uint64ArrList {
	if m.IsEmpty() {
		return NilUint64ArrList
	} else {
		acc := NilUint64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListList) FlatMapUintptrArrList(f func(IntList) UintptrArrList) UintptrArrList {
	if m.IsEmpty() {
		return NilUintptrArrList
	} else {
		acc := NilUintptrArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListList) FlatMapFloat32ArrList(f func(IntList) Float32ArrList) Float32ArrList {
	if m.IsEmpty() {
		return NilFloat32ArrList
	} else {
		acc := NilFloat32ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListList) FlatMapFloat64ArrList(f func(IntList) Float64ArrList) Float64ArrList {
	if m.IsEmpty() {
		return NilFloat64ArrList
	} else {
		acc := NilFloat64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListList) FlatMapRuneArrList(f func(IntList) RuneArrList) RuneArrList {
	if m.IsEmpty() {
		return NilRuneArrList
	} else {
		acc := NilRuneArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListList) FlatMapStringArrList(f func(IntList) StringArrList) StringArrList {
	if m.IsEmpty() {
		return NilStringArrList
	} else {
		acc := NilStringArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListList) FlatMapBoolListList(f func(IntList) BoolListList) BoolListList {
	if m.IsEmpty() {
		return NilBoolListList
	} else {
		acc := NilBoolListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListList) FlatMapAnyListList(f func(IntList) AnyListList) AnyListList {
	if m.IsEmpty() {
		return NilAnyListList
	} else {
		acc := NilAnyListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListList) FlatMapByteListList(f func(IntList) ByteListList) ByteListList {
	if m.IsEmpty() {
		return NilByteListList
	} else {
		acc := NilByteListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListList) FlatMapIntListList(f func(IntList) IntListList) IntListList {
	if m.IsEmpty() {
		return NilIntListList
	} else {
		acc := NilIntListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListList) FlatMapInt32ListList(f func(IntList) Int32ListList) Int32ListList {
	if m.IsEmpty() {
		return NilInt32ListList
	} else {
		acc := NilInt32ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListList) FlatMapInt64ListList(f func(IntList) Int64ListList) Int64ListList {
	if m.IsEmpty() {
		return NilInt64ListList
	} else {
		acc := NilInt64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListList) FlatMapUintListList(f func(IntList) UintListList) UintListList {
	if m.IsEmpty() {
		return NilUintListList
	} else {
		acc := NilUintListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListList) FlatMapUint64ListList(f func(IntList) Uint64ListList) Uint64ListList {
	if m.IsEmpty() {
		return NilUint64ListList
	} else {
		acc := NilUint64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListList) FlatMapUintptrListList(f func(IntList) UintptrListList) UintptrListList {
	if m.IsEmpty() {
		return NilUintptrListList
	} else {
		acc := NilUintptrListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListList) FlatMapFloat32ListList(f func(IntList) Float32ListList) Float32ListList {
	if m.IsEmpty() {
		return NilFloat32ListList
	} else {
		acc := NilFloat32ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListList) FlatMapFloat64ListList(f func(IntList) Float64ListList) Float64ListList {
	if m.IsEmpty() {
		return NilFloat64ListList
	} else {
		acc := NilFloat64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListList) FlatMapRuneListList(f func(IntList) RuneListList) RuneListList {
	if m.IsEmpty() {
		return NilRuneListList
	} else {
		acc := NilRuneListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListList) FlatMapStringListList(f func(IntList) StringListList) StringListList {
	if m.IsEmpty() {
		return NilStringListList
	} else {
		acc := NilStringListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListList) FlatMapBoolOptionList(f func(IntList) BoolOptionList) BoolOptionList {
	if m.IsEmpty() {
		return NilBoolOptionList
	} else {
		acc := NilBoolOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListList) FlatMapAnyOptionList(f func(IntList) AnyOptionList) AnyOptionList {
	if m.IsEmpty() {
		return NilAnyOptionList
	} else {
		acc := NilAnyOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListList) FlatMapByteOptionList(f func(IntList) ByteOptionList) ByteOptionList {
	if m.IsEmpty() {
		return NilByteOptionList
	} else {
		acc := NilByteOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListList) FlatMapIntOptionList(f func(IntList) IntOptionList) IntOptionList {
	if m.IsEmpty() {
		return NilIntOptionList
	} else {
		acc := NilIntOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListList) FlatMapInt32OptionList(f func(IntList) Int32OptionList) Int32OptionList {
	if m.IsEmpty() {
		return NilInt32OptionList
	} else {
		acc := NilInt32OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListList) FlatMapInt64OptionList(f func(IntList) Int64OptionList) Int64OptionList {
	if m.IsEmpty() {
		return NilInt64OptionList
	} else {
		acc := NilInt64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListList) FlatMapUintOptionList(f func(IntList) UintOptionList) UintOptionList {
	if m.IsEmpty() {
		return NilUintOptionList
	} else {
		acc := NilUintOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListList) FlatMapUint64OptionList(f func(IntList) Uint64OptionList) Uint64OptionList {
	if m.IsEmpty() {
		return NilUint64OptionList
	} else {
		acc := NilUint64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListList) FlatMapUintptrOptionList(f func(IntList) UintptrOptionList) UintptrOptionList {
	if m.IsEmpty() {
		return NilUintptrOptionList
	} else {
		acc := NilUintptrOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListList) FlatMapFloat32OptionList(f func(IntList) Float32OptionList) Float32OptionList {
	if m.IsEmpty() {
		return NilFloat32OptionList
	} else {
		acc := NilFloat32OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListList) FlatMapFloat64OptionList(f func(IntList) Float64OptionList) Float64OptionList {
	if m.IsEmpty() {
		return NilFloat64OptionList
	} else {
		acc := NilFloat64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListList) FlatMapRuneOptionList(f func(IntList) RuneOptionList) RuneOptionList {
	if m.IsEmpty() {
		return NilRuneOptionList
	} else {
		acc := NilRuneOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListList) FlatMapStringOptionList(f func(IntList) StringOptionList) StringOptionList {
	if m.IsEmpty() {
		return NilStringOptionList
	} else {
		acc := NilStringOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListList) FlatMapBoolList(f func(Int32List) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBoolList
	} else {
		acc := NilBoolList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListList) FlatMapAnyList(f func(Int32List) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAnyList
	} else {
		acc := NilAnyList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListList) FlatMapByteList(f func(Int32List) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByteList
	} else {
		acc := NilByteList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListList) FlatMapIntList(f func(Int32List) IntList) IntList {
	if m.IsEmpty() {
		return NilIntList
	} else {
		acc := NilIntList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListList) FlatMapInt32List(f func(Int32List) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32List
	} else {
		acc := NilInt32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListList) FlatMapInt64List(f func(Int32List) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64List
	} else {
		acc := NilInt64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListList) FlatMapUintList(f func(Int32List) UintList) UintList {
	if m.IsEmpty() {
		return NilUintList
	} else {
		acc := NilUintList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListList) FlatMapUint64List(f func(Int32List) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64List
	} else {
		acc := NilUint64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListList) FlatMapUintptrList(f func(Int32List) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptrList
	} else {
		acc := NilUintptrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListList) FlatMapFloat32List(f func(Int32List) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32List
	} else {
		acc := NilFloat32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListList) FlatMapFloat64List(f func(Int32List) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64List
	} else {
		acc := NilFloat64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListList) FlatMapRuneList(f func(Int32List) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRuneList
	} else {
		acc := NilRuneList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListList) FlatMapStringList(f func(Int32List) StringList) StringList {
	if m.IsEmpty() {
		return NilStringList
	} else {
		acc := NilStringList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListList) FlatMapBoolArrList(f func(Int32List) BoolArrList) BoolArrList {
	if m.IsEmpty() {
		return NilBoolArrList
	} else {
		acc := NilBoolArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListList) FlatMapAnyArrList(f func(Int32List) AnyArrList) AnyArrList {
	if m.IsEmpty() {
		return NilAnyArrList
	} else {
		acc := NilAnyArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListList) FlatMapByteArrList(f func(Int32List) ByteArrList) ByteArrList {
	if m.IsEmpty() {
		return NilByteArrList
	} else {
		acc := NilByteArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListList) FlatMapIntArrList(f func(Int32List) IntArrList) IntArrList {
	if m.IsEmpty() {
		return NilIntArrList
	} else {
		acc := NilIntArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListList) FlatMapInt32ArrList(f func(Int32List) Int32ArrList) Int32ArrList {
	if m.IsEmpty() {
		return NilInt32ArrList
	} else {
		acc := NilInt32ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListList) FlatMapInt64ArrList(f func(Int32List) Int64ArrList) Int64ArrList {
	if m.IsEmpty() {
		return NilInt64ArrList
	} else {
		acc := NilInt64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListList) FlatMapUintArrList(f func(Int32List) UintArrList) UintArrList {
	if m.IsEmpty() {
		return NilUintArrList
	} else {
		acc := NilUintArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListList) FlatMapUint64ArrList(f func(Int32List) Uint64ArrList) Uint64ArrList {
	if m.IsEmpty() {
		return NilUint64ArrList
	} else {
		acc := NilUint64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListList) FlatMapUintptrArrList(f func(Int32List) UintptrArrList) UintptrArrList {
	if m.IsEmpty() {
		return NilUintptrArrList
	} else {
		acc := NilUintptrArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListList) FlatMapFloat32ArrList(f func(Int32List) Float32ArrList) Float32ArrList {
	if m.IsEmpty() {
		return NilFloat32ArrList
	} else {
		acc := NilFloat32ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListList) FlatMapFloat64ArrList(f func(Int32List) Float64ArrList) Float64ArrList {
	if m.IsEmpty() {
		return NilFloat64ArrList
	} else {
		acc := NilFloat64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListList) FlatMapRuneArrList(f func(Int32List) RuneArrList) RuneArrList {
	if m.IsEmpty() {
		return NilRuneArrList
	} else {
		acc := NilRuneArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListList) FlatMapStringArrList(f func(Int32List) StringArrList) StringArrList {
	if m.IsEmpty() {
		return NilStringArrList
	} else {
		acc := NilStringArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListList) FlatMapBoolListList(f func(Int32List) BoolListList) BoolListList {
	if m.IsEmpty() {
		return NilBoolListList
	} else {
		acc := NilBoolListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListList) FlatMapAnyListList(f func(Int32List) AnyListList) AnyListList {
	if m.IsEmpty() {
		return NilAnyListList
	} else {
		acc := NilAnyListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListList) FlatMapByteListList(f func(Int32List) ByteListList) ByteListList {
	if m.IsEmpty() {
		return NilByteListList
	} else {
		acc := NilByteListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListList) FlatMapIntListList(f func(Int32List) IntListList) IntListList {
	if m.IsEmpty() {
		return NilIntListList
	} else {
		acc := NilIntListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListList) FlatMapInt32ListList(f func(Int32List) Int32ListList) Int32ListList {
	if m.IsEmpty() {
		return NilInt32ListList
	} else {
		acc := NilInt32ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListList) FlatMapInt64ListList(f func(Int32List) Int64ListList) Int64ListList {
	if m.IsEmpty() {
		return NilInt64ListList
	} else {
		acc := NilInt64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListList) FlatMapUintListList(f func(Int32List) UintListList) UintListList {
	if m.IsEmpty() {
		return NilUintListList
	} else {
		acc := NilUintListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListList) FlatMapUint64ListList(f func(Int32List) Uint64ListList) Uint64ListList {
	if m.IsEmpty() {
		return NilUint64ListList
	} else {
		acc := NilUint64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListList) FlatMapUintptrListList(f func(Int32List) UintptrListList) UintptrListList {
	if m.IsEmpty() {
		return NilUintptrListList
	} else {
		acc := NilUintptrListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListList) FlatMapFloat32ListList(f func(Int32List) Float32ListList) Float32ListList {
	if m.IsEmpty() {
		return NilFloat32ListList
	} else {
		acc := NilFloat32ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListList) FlatMapFloat64ListList(f func(Int32List) Float64ListList) Float64ListList {
	if m.IsEmpty() {
		return NilFloat64ListList
	} else {
		acc := NilFloat64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListList) FlatMapRuneListList(f func(Int32List) RuneListList) RuneListList {
	if m.IsEmpty() {
		return NilRuneListList
	} else {
		acc := NilRuneListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListList) FlatMapStringListList(f func(Int32List) StringListList) StringListList {
	if m.IsEmpty() {
		return NilStringListList
	} else {
		acc := NilStringListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListList) FlatMapBoolOptionList(f func(Int32List) BoolOptionList) BoolOptionList {
	if m.IsEmpty() {
		return NilBoolOptionList
	} else {
		acc := NilBoolOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListList) FlatMapAnyOptionList(f func(Int32List) AnyOptionList) AnyOptionList {
	if m.IsEmpty() {
		return NilAnyOptionList
	} else {
		acc := NilAnyOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListList) FlatMapByteOptionList(f func(Int32List) ByteOptionList) ByteOptionList {
	if m.IsEmpty() {
		return NilByteOptionList
	} else {
		acc := NilByteOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListList) FlatMapIntOptionList(f func(Int32List) IntOptionList) IntOptionList {
	if m.IsEmpty() {
		return NilIntOptionList
	} else {
		acc := NilIntOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListList) FlatMapInt32OptionList(f func(Int32List) Int32OptionList) Int32OptionList {
	if m.IsEmpty() {
		return NilInt32OptionList
	} else {
		acc := NilInt32OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListList) FlatMapInt64OptionList(f func(Int32List) Int64OptionList) Int64OptionList {
	if m.IsEmpty() {
		return NilInt64OptionList
	} else {
		acc := NilInt64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListList) FlatMapUintOptionList(f func(Int32List) UintOptionList) UintOptionList {
	if m.IsEmpty() {
		return NilUintOptionList
	} else {
		acc := NilUintOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListList) FlatMapUint64OptionList(f func(Int32List) Uint64OptionList) Uint64OptionList {
	if m.IsEmpty() {
		return NilUint64OptionList
	} else {
		acc := NilUint64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListList) FlatMapUintptrOptionList(f func(Int32List) UintptrOptionList) UintptrOptionList {
	if m.IsEmpty() {
		return NilUintptrOptionList
	} else {
		acc := NilUintptrOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListList) FlatMapFloat32OptionList(f func(Int32List) Float32OptionList) Float32OptionList {
	if m.IsEmpty() {
		return NilFloat32OptionList
	} else {
		acc := NilFloat32OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListList) FlatMapFloat64OptionList(f func(Int32List) Float64OptionList) Float64OptionList {
	if m.IsEmpty() {
		return NilFloat64OptionList
	} else {
		acc := NilFloat64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListList) FlatMapRuneOptionList(f func(Int32List) RuneOptionList) RuneOptionList {
	if m.IsEmpty() {
		return NilRuneOptionList
	} else {
		acc := NilRuneOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListList) FlatMapStringOptionList(f func(Int32List) StringOptionList) StringOptionList {
	if m.IsEmpty() {
		return NilStringOptionList
	} else {
		acc := NilStringOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListList) FlatMapBoolList(f func(Int64List) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBoolList
	} else {
		acc := NilBoolList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListList) FlatMapAnyList(f func(Int64List) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAnyList
	} else {
		acc := NilAnyList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListList) FlatMapByteList(f func(Int64List) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByteList
	} else {
		acc := NilByteList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListList) FlatMapIntList(f func(Int64List) IntList) IntList {
	if m.IsEmpty() {
		return NilIntList
	} else {
		acc := NilIntList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListList) FlatMapInt32List(f func(Int64List) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32List
	} else {
		acc := NilInt32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListList) FlatMapInt64List(f func(Int64List) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64List
	} else {
		acc := NilInt64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListList) FlatMapUintList(f func(Int64List) UintList) UintList {
	if m.IsEmpty() {
		return NilUintList
	} else {
		acc := NilUintList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListList) FlatMapUint64List(f func(Int64List) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64List
	} else {
		acc := NilUint64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListList) FlatMapUintptrList(f func(Int64List) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptrList
	} else {
		acc := NilUintptrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListList) FlatMapFloat32List(f func(Int64List) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32List
	} else {
		acc := NilFloat32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListList) FlatMapFloat64List(f func(Int64List) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64List
	} else {
		acc := NilFloat64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListList) FlatMapRuneList(f func(Int64List) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRuneList
	} else {
		acc := NilRuneList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListList) FlatMapStringList(f func(Int64List) StringList) StringList {
	if m.IsEmpty() {
		return NilStringList
	} else {
		acc := NilStringList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListList) FlatMapBoolArrList(f func(Int64List) BoolArrList) BoolArrList {
	if m.IsEmpty() {
		return NilBoolArrList
	} else {
		acc := NilBoolArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListList) FlatMapAnyArrList(f func(Int64List) AnyArrList) AnyArrList {
	if m.IsEmpty() {
		return NilAnyArrList
	} else {
		acc := NilAnyArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListList) FlatMapByteArrList(f func(Int64List) ByteArrList) ByteArrList {
	if m.IsEmpty() {
		return NilByteArrList
	} else {
		acc := NilByteArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListList) FlatMapIntArrList(f func(Int64List) IntArrList) IntArrList {
	if m.IsEmpty() {
		return NilIntArrList
	} else {
		acc := NilIntArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListList) FlatMapInt32ArrList(f func(Int64List) Int32ArrList) Int32ArrList {
	if m.IsEmpty() {
		return NilInt32ArrList
	} else {
		acc := NilInt32ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListList) FlatMapInt64ArrList(f func(Int64List) Int64ArrList) Int64ArrList {
	if m.IsEmpty() {
		return NilInt64ArrList
	} else {
		acc := NilInt64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListList) FlatMapUintArrList(f func(Int64List) UintArrList) UintArrList {
	if m.IsEmpty() {
		return NilUintArrList
	} else {
		acc := NilUintArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListList) FlatMapUint64ArrList(f func(Int64List) Uint64ArrList) Uint64ArrList {
	if m.IsEmpty() {
		return NilUint64ArrList
	} else {
		acc := NilUint64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListList) FlatMapUintptrArrList(f func(Int64List) UintptrArrList) UintptrArrList {
	if m.IsEmpty() {
		return NilUintptrArrList
	} else {
		acc := NilUintptrArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListList) FlatMapFloat32ArrList(f func(Int64List) Float32ArrList) Float32ArrList {
	if m.IsEmpty() {
		return NilFloat32ArrList
	} else {
		acc := NilFloat32ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListList) FlatMapFloat64ArrList(f func(Int64List) Float64ArrList) Float64ArrList {
	if m.IsEmpty() {
		return NilFloat64ArrList
	} else {
		acc := NilFloat64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListList) FlatMapRuneArrList(f func(Int64List) RuneArrList) RuneArrList {
	if m.IsEmpty() {
		return NilRuneArrList
	} else {
		acc := NilRuneArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListList) FlatMapStringArrList(f func(Int64List) StringArrList) StringArrList {
	if m.IsEmpty() {
		return NilStringArrList
	} else {
		acc := NilStringArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListList) FlatMapBoolListList(f func(Int64List) BoolListList) BoolListList {
	if m.IsEmpty() {
		return NilBoolListList
	} else {
		acc := NilBoolListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListList) FlatMapAnyListList(f func(Int64List) AnyListList) AnyListList {
	if m.IsEmpty() {
		return NilAnyListList
	} else {
		acc := NilAnyListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListList) FlatMapByteListList(f func(Int64List) ByteListList) ByteListList {
	if m.IsEmpty() {
		return NilByteListList
	} else {
		acc := NilByteListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListList) FlatMapIntListList(f func(Int64List) IntListList) IntListList {
	if m.IsEmpty() {
		return NilIntListList
	} else {
		acc := NilIntListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListList) FlatMapInt32ListList(f func(Int64List) Int32ListList) Int32ListList {
	if m.IsEmpty() {
		return NilInt32ListList
	} else {
		acc := NilInt32ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListList) FlatMapInt64ListList(f func(Int64List) Int64ListList) Int64ListList {
	if m.IsEmpty() {
		return NilInt64ListList
	} else {
		acc := NilInt64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListList) FlatMapUintListList(f func(Int64List) UintListList) UintListList {
	if m.IsEmpty() {
		return NilUintListList
	} else {
		acc := NilUintListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListList) FlatMapUint64ListList(f func(Int64List) Uint64ListList) Uint64ListList {
	if m.IsEmpty() {
		return NilUint64ListList
	} else {
		acc := NilUint64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListList) FlatMapUintptrListList(f func(Int64List) UintptrListList) UintptrListList {
	if m.IsEmpty() {
		return NilUintptrListList
	} else {
		acc := NilUintptrListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListList) FlatMapFloat32ListList(f func(Int64List) Float32ListList) Float32ListList {
	if m.IsEmpty() {
		return NilFloat32ListList
	} else {
		acc := NilFloat32ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListList) FlatMapFloat64ListList(f func(Int64List) Float64ListList) Float64ListList {
	if m.IsEmpty() {
		return NilFloat64ListList
	} else {
		acc := NilFloat64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListList) FlatMapRuneListList(f func(Int64List) RuneListList) RuneListList {
	if m.IsEmpty() {
		return NilRuneListList
	} else {
		acc := NilRuneListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListList) FlatMapStringListList(f func(Int64List) StringListList) StringListList {
	if m.IsEmpty() {
		return NilStringListList
	} else {
		acc := NilStringListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListList) FlatMapBoolOptionList(f func(Int64List) BoolOptionList) BoolOptionList {
	if m.IsEmpty() {
		return NilBoolOptionList
	} else {
		acc := NilBoolOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListList) FlatMapAnyOptionList(f func(Int64List) AnyOptionList) AnyOptionList {
	if m.IsEmpty() {
		return NilAnyOptionList
	} else {
		acc := NilAnyOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListList) FlatMapByteOptionList(f func(Int64List) ByteOptionList) ByteOptionList {
	if m.IsEmpty() {
		return NilByteOptionList
	} else {
		acc := NilByteOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListList) FlatMapIntOptionList(f func(Int64List) IntOptionList) IntOptionList {
	if m.IsEmpty() {
		return NilIntOptionList
	} else {
		acc := NilIntOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListList) FlatMapInt32OptionList(f func(Int64List) Int32OptionList) Int32OptionList {
	if m.IsEmpty() {
		return NilInt32OptionList
	} else {
		acc := NilInt32OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListList) FlatMapInt64OptionList(f func(Int64List) Int64OptionList) Int64OptionList {
	if m.IsEmpty() {
		return NilInt64OptionList
	} else {
		acc := NilInt64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListList) FlatMapUintOptionList(f func(Int64List) UintOptionList) UintOptionList {
	if m.IsEmpty() {
		return NilUintOptionList
	} else {
		acc := NilUintOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListList) FlatMapUint64OptionList(f func(Int64List) Uint64OptionList) Uint64OptionList {
	if m.IsEmpty() {
		return NilUint64OptionList
	} else {
		acc := NilUint64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListList) FlatMapUintptrOptionList(f func(Int64List) UintptrOptionList) UintptrOptionList {
	if m.IsEmpty() {
		return NilUintptrOptionList
	} else {
		acc := NilUintptrOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListList) FlatMapFloat32OptionList(f func(Int64List) Float32OptionList) Float32OptionList {
	if m.IsEmpty() {
		return NilFloat32OptionList
	} else {
		acc := NilFloat32OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListList) FlatMapFloat64OptionList(f func(Int64List) Float64OptionList) Float64OptionList {
	if m.IsEmpty() {
		return NilFloat64OptionList
	} else {
		acc := NilFloat64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListList) FlatMapRuneOptionList(f func(Int64List) RuneOptionList) RuneOptionList {
	if m.IsEmpty() {
		return NilRuneOptionList
	} else {
		acc := NilRuneOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListList) FlatMapStringOptionList(f func(Int64List) StringOptionList) StringOptionList {
	if m.IsEmpty() {
		return NilStringOptionList
	} else {
		acc := NilStringOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListList) FlatMapBoolList(f func(UintList) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBoolList
	} else {
		acc := NilBoolList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListList) FlatMapAnyList(f func(UintList) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAnyList
	} else {
		acc := NilAnyList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListList) FlatMapByteList(f func(UintList) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByteList
	} else {
		acc := NilByteList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListList) FlatMapIntList(f func(UintList) IntList) IntList {
	if m.IsEmpty() {
		return NilIntList
	} else {
		acc := NilIntList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListList) FlatMapInt32List(f func(UintList) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32List
	} else {
		acc := NilInt32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListList) FlatMapInt64List(f func(UintList) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64List
	} else {
		acc := NilInt64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListList) FlatMapUintList(f func(UintList) UintList) UintList {
	if m.IsEmpty() {
		return NilUintList
	} else {
		acc := NilUintList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListList) FlatMapUint64List(f func(UintList) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64List
	} else {
		acc := NilUint64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListList) FlatMapUintptrList(f func(UintList) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptrList
	} else {
		acc := NilUintptrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListList) FlatMapFloat32List(f func(UintList) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32List
	} else {
		acc := NilFloat32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListList) FlatMapFloat64List(f func(UintList) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64List
	} else {
		acc := NilFloat64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListList) FlatMapRuneList(f func(UintList) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRuneList
	} else {
		acc := NilRuneList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListList) FlatMapStringList(f func(UintList) StringList) StringList {
	if m.IsEmpty() {
		return NilStringList
	} else {
		acc := NilStringList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListList) FlatMapBoolArrList(f func(UintList) BoolArrList) BoolArrList {
	if m.IsEmpty() {
		return NilBoolArrList
	} else {
		acc := NilBoolArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListList) FlatMapAnyArrList(f func(UintList) AnyArrList) AnyArrList {
	if m.IsEmpty() {
		return NilAnyArrList
	} else {
		acc := NilAnyArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListList) FlatMapByteArrList(f func(UintList) ByteArrList) ByteArrList {
	if m.IsEmpty() {
		return NilByteArrList
	} else {
		acc := NilByteArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListList) FlatMapIntArrList(f func(UintList) IntArrList) IntArrList {
	if m.IsEmpty() {
		return NilIntArrList
	} else {
		acc := NilIntArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListList) FlatMapInt32ArrList(f func(UintList) Int32ArrList) Int32ArrList {
	if m.IsEmpty() {
		return NilInt32ArrList
	} else {
		acc := NilInt32ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListList) FlatMapInt64ArrList(f func(UintList) Int64ArrList) Int64ArrList {
	if m.IsEmpty() {
		return NilInt64ArrList
	} else {
		acc := NilInt64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListList) FlatMapUintArrList(f func(UintList) UintArrList) UintArrList {
	if m.IsEmpty() {
		return NilUintArrList
	} else {
		acc := NilUintArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListList) FlatMapUint64ArrList(f func(UintList) Uint64ArrList) Uint64ArrList {
	if m.IsEmpty() {
		return NilUint64ArrList
	} else {
		acc := NilUint64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListList) FlatMapUintptrArrList(f func(UintList) UintptrArrList) UintptrArrList {
	if m.IsEmpty() {
		return NilUintptrArrList
	} else {
		acc := NilUintptrArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListList) FlatMapFloat32ArrList(f func(UintList) Float32ArrList) Float32ArrList {
	if m.IsEmpty() {
		return NilFloat32ArrList
	} else {
		acc := NilFloat32ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListList) FlatMapFloat64ArrList(f func(UintList) Float64ArrList) Float64ArrList {
	if m.IsEmpty() {
		return NilFloat64ArrList
	} else {
		acc := NilFloat64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListList) FlatMapRuneArrList(f func(UintList) RuneArrList) RuneArrList {
	if m.IsEmpty() {
		return NilRuneArrList
	} else {
		acc := NilRuneArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListList) FlatMapStringArrList(f func(UintList) StringArrList) StringArrList {
	if m.IsEmpty() {
		return NilStringArrList
	} else {
		acc := NilStringArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListList) FlatMapBoolListList(f func(UintList) BoolListList) BoolListList {
	if m.IsEmpty() {
		return NilBoolListList
	} else {
		acc := NilBoolListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListList) FlatMapAnyListList(f func(UintList) AnyListList) AnyListList {
	if m.IsEmpty() {
		return NilAnyListList
	} else {
		acc := NilAnyListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListList) FlatMapByteListList(f func(UintList) ByteListList) ByteListList {
	if m.IsEmpty() {
		return NilByteListList
	} else {
		acc := NilByteListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListList) FlatMapIntListList(f func(UintList) IntListList) IntListList {
	if m.IsEmpty() {
		return NilIntListList
	} else {
		acc := NilIntListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListList) FlatMapInt32ListList(f func(UintList) Int32ListList) Int32ListList {
	if m.IsEmpty() {
		return NilInt32ListList
	} else {
		acc := NilInt32ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListList) FlatMapInt64ListList(f func(UintList) Int64ListList) Int64ListList {
	if m.IsEmpty() {
		return NilInt64ListList
	} else {
		acc := NilInt64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListList) FlatMapUintListList(f func(UintList) UintListList) UintListList {
	if m.IsEmpty() {
		return NilUintListList
	} else {
		acc := NilUintListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListList) FlatMapUint64ListList(f func(UintList) Uint64ListList) Uint64ListList {
	if m.IsEmpty() {
		return NilUint64ListList
	} else {
		acc := NilUint64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListList) FlatMapUintptrListList(f func(UintList) UintptrListList) UintptrListList {
	if m.IsEmpty() {
		return NilUintptrListList
	} else {
		acc := NilUintptrListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListList) FlatMapFloat32ListList(f func(UintList) Float32ListList) Float32ListList {
	if m.IsEmpty() {
		return NilFloat32ListList
	} else {
		acc := NilFloat32ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListList) FlatMapFloat64ListList(f func(UintList) Float64ListList) Float64ListList {
	if m.IsEmpty() {
		return NilFloat64ListList
	} else {
		acc := NilFloat64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListList) FlatMapRuneListList(f func(UintList) RuneListList) RuneListList {
	if m.IsEmpty() {
		return NilRuneListList
	} else {
		acc := NilRuneListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListList) FlatMapStringListList(f func(UintList) StringListList) StringListList {
	if m.IsEmpty() {
		return NilStringListList
	} else {
		acc := NilStringListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListList) FlatMapBoolOptionList(f func(UintList) BoolOptionList) BoolOptionList {
	if m.IsEmpty() {
		return NilBoolOptionList
	} else {
		acc := NilBoolOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListList) FlatMapAnyOptionList(f func(UintList) AnyOptionList) AnyOptionList {
	if m.IsEmpty() {
		return NilAnyOptionList
	} else {
		acc := NilAnyOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListList) FlatMapByteOptionList(f func(UintList) ByteOptionList) ByteOptionList {
	if m.IsEmpty() {
		return NilByteOptionList
	} else {
		acc := NilByteOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListList) FlatMapIntOptionList(f func(UintList) IntOptionList) IntOptionList {
	if m.IsEmpty() {
		return NilIntOptionList
	} else {
		acc := NilIntOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListList) FlatMapInt32OptionList(f func(UintList) Int32OptionList) Int32OptionList {
	if m.IsEmpty() {
		return NilInt32OptionList
	} else {
		acc := NilInt32OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListList) FlatMapInt64OptionList(f func(UintList) Int64OptionList) Int64OptionList {
	if m.IsEmpty() {
		return NilInt64OptionList
	} else {
		acc := NilInt64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListList) FlatMapUintOptionList(f func(UintList) UintOptionList) UintOptionList {
	if m.IsEmpty() {
		return NilUintOptionList
	} else {
		acc := NilUintOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListList) FlatMapUint64OptionList(f func(UintList) Uint64OptionList) Uint64OptionList {
	if m.IsEmpty() {
		return NilUint64OptionList
	} else {
		acc := NilUint64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListList) FlatMapUintptrOptionList(f func(UintList) UintptrOptionList) UintptrOptionList {
	if m.IsEmpty() {
		return NilUintptrOptionList
	} else {
		acc := NilUintptrOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListList) FlatMapFloat32OptionList(f func(UintList) Float32OptionList) Float32OptionList {
	if m.IsEmpty() {
		return NilFloat32OptionList
	} else {
		acc := NilFloat32OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListList) FlatMapFloat64OptionList(f func(UintList) Float64OptionList) Float64OptionList {
	if m.IsEmpty() {
		return NilFloat64OptionList
	} else {
		acc := NilFloat64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListList) FlatMapRuneOptionList(f func(UintList) RuneOptionList) RuneOptionList {
	if m.IsEmpty() {
		return NilRuneOptionList
	} else {
		acc := NilRuneOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListList) FlatMapStringOptionList(f func(UintList) StringOptionList) StringOptionList {
	if m.IsEmpty() {
		return NilStringOptionList
	} else {
		acc := NilStringOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListList) FlatMapBoolList(f func(Uint64List) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBoolList
	} else {
		acc := NilBoolList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListList) FlatMapAnyList(f func(Uint64List) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAnyList
	} else {
		acc := NilAnyList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListList) FlatMapByteList(f func(Uint64List) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByteList
	} else {
		acc := NilByteList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListList) FlatMapIntList(f func(Uint64List) IntList) IntList {
	if m.IsEmpty() {
		return NilIntList
	} else {
		acc := NilIntList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListList) FlatMapInt32List(f func(Uint64List) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32List
	} else {
		acc := NilInt32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListList) FlatMapInt64List(f func(Uint64List) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64List
	} else {
		acc := NilInt64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListList) FlatMapUintList(f func(Uint64List) UintList) UintList {
	if m.IsEmpty() {
		return NilUintList
	} else {
		acc := NilUintList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListList) FlatMapUint64List(f func(Uint64List) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64List
	} else {
		acc := NilUint64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListList) FlatMapUintptrList(f func(Uint64List) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptrList
	} else {
		acc := NilUintptrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListList) FlatMapFloat32List(f func(Uint64List) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32List
	} else {
		acc := NilFloat32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListList) FlatMapFloat64List(f func(Uint64List) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64List
	} else {
		acc := NilFloat64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListList) FlatMapRuneList(f func(Uint64List) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRuneList
	} else {
		acc := NilRuneList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListList) FlatMapStringList(f func(Uint64List) StringList) StringList {
	if m.IsEmpty() {
		return NilStringList
	} else {
		acc := NilStringList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListList) FlatMapBoolArrList(f func(Uint64List) BoolArrList) BoolArrList {
	if m.IsEmpty() {
		return NilBoolArrList
	} else {
		acc := NilBoolArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListList) FlatMapAnyArrList(f func(Uint64List) AnyArrList) AnyArrList {
	if m.IsEmpty() {
		return NilAnyArrList
	} else {
		acc := NilAnyArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListList) FlatMapByteArrList(f func(Uint64List) ByteArrList) ByteArrList {
	if m.IsEmpty() {
		return NilByteArrList
	} else {
		acc := NilByteArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListList) FlatMapIntArrList(f func(Uint64List) IntArrList) IntArrList {
	if m.IsEmpty() {
		return NilIntArrList
	} else {
		acc := NilIntArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListList) FlatMapInt32ArrList(f func(Uint64List) Int32ArrList) Int32ArrList {
	if m.IsEmpty() {
		return NilInt32ArrList
	} else {
		acc := NilInt32ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListList) FlatMapInt64ArrList(f func(Uint64List) Int64ArrList) Int64ArrList {
	if m.IsEmpty() {
		return NilInt64ArrList
	} else {
		acc := NilInt64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListList) FlatMapUintArrList(f func(Uint64List) UintArrList) UintArrList {
	if m.IsEmpty() {
		return NilUintArrList
	} else {
		acc := NilUintArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListList) FlatMapUint64ArrList(f func(Uint64List) Uint64ArrList) Uint64ArrList {
	if m.IsEmpty() {
		return NilUint64ArrList
	} else {
		acc := NilUint64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListList) FlatMapUintptrArrList(f func(Uint64List) UintptrArrList) UintptrArrList {
	if m.IsEmpty() {
		return NilUintptrArrList
	} else {
		acc := NilUintptrArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListList) FlatMapFloat32ArrList(f func(Uint64List) Float32ArrList) Float32ArrList {
	if m.IsEmpty() {
		return NilFloat32ArrList
	} else {
		acc := NilFloat32ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListList) FlatMapFloat64ArrList(f func(Uint64List) Float64ArrList) Float64ArrList {
	if m.IsEmpty() {
		return NilFloat64ArrList
	} else {
		acc := NilFloat64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListList) FlatMapRuneArrList(f func(Uint64List) RuneArrList) RuneArrList {
	if m.IsEmpty() {
		return NilRuneArrList
	} else {
		acc := NilRuneArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListList) FlatMapStringArrList(f func(Uint64List) StringArrList) StringArrList {
	if m.IsEmpty() {
		return NilStringArrList
	} else {
		acc := NilStringArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListList) FlatMapBoolListList(f func(Uint64List) BoolListList) BoolListList {
	if m.IsEmpty() {
		return NilBoolListList
	} else {
		acc := NilBoolListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListList) FlatMapAnyListList(f func(Uint64List) AnyListList) AnyListList {
	if m.IsEmpty() {
		return NilAnyListList
	} else {
		acc := NilAnyListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListList) FlatMapByteListList(f func(Uint64List) ByteListList) ByteListList {
	if m.IsEmpty() {
		return NilByteListList
	} else {
		acc := NilByteListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListList) FlatMapIntListList(f func(Uint64List) IntListList) IntListList {
	if m.IsEmpty() {
		return NilIntListList
	} else {
		acc := NilIntListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListList) FlatMapInt32ListList(f func(Uint64List) Int32ListList) Int32ListList {
	if m.IsEmpty() {
		return NilInt32ListList
	} else {
		acc := NilInt32ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListList) FlatMapInt64ListList(f func(Uint64List) Int64ListList) Int64ListList {
	if m.IsEmpty() {
		return NilInt64ListList
	} else {
		acc := NilInt64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListList) FlatMapUintListList(f func(Uint64List) UintListList) UintListList {
	if m.IsEmpty() {
		return NilUintListList
	} else {
		acc := NilUintListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListList) FlatMapUint64ListList(f func(Uint64List) Uint64ListList) Uint64ListList {
	if m.IsEmpty() {
		return NilUint64ListList
	} else {
		acc := NilUint64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListList) FlatMapUintptrListList(f func(Uint64List) UintptrListList) UintptrListList {
	if m.IsEmpty() {
		return NilUintptrListList
	} else {
		acc := NilUintptrListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListList) FlatMapFloat32ListList(f func(Uint64List) Float32ListList) Float32ListList {
	if m.IsEmpty() {
		return NilFloat32ListList
	} else {
		acc := NilFloat32ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListList) FlatMapFloat64ListList(f func(Uint64List) Float64ListList) Float64ListList {
	if m.IsEmpty() {
		return NilFloat64ListList
	} else {
		acc := NilFloat64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListList) FlatMapRuneListList(f func(Uint64List) RuneListList) RuneListList {
	if m.IsEmpty() {
		return NilRuneListList
	} else {
		acc := NilRuneListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListList) FlatMapStringListList(f func(Uint64List) StringListList) StringListList {
	if m.IsEmpty() {
		return NilStringListList
	} else {
		acc := NilStringListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListList) FlatMapBoolOptionList(f func(Uint64List) BoolOptionList) BoolOptionList {
	if m.IsEmpty() {
		return NilBoolOptionList
	} else {
		acc := NilBoolOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListList) FlatMapAnyOptionList(f func(Uint64List) AnyOptionList) AnyOptionList {
	if m.IsEmpty() {
		return NilAnyOptionList
	} else {
		acc := NilAnyOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListList) FlatMapByteOptionList(f func(Uint64List) ByteOptionList) ByteOptionList {
	if m.IsEmpty() {
		return NilByteOptionList
	} else {
		acc := NilByteOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListList) FlatMapIntOptionList(f func(Uint64List) IntOptionList) IntOptionList {
	if m.IsEmpty() {
		return NilIntOptionList
	} else {
		acc := NilIntOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListList) FlatMapInt32OptionList(f func(Uint64List) Int32OptionList) Int32OptionList {
	if m.IsEmpty() {
		return NilInt32OptionList
	} else {
		acc := NilInt32OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListList) FlatMapInt64OptionList(f func(Uint64List) Int64OptionList) Int64OptionList {
	if m.IsEmpty() {
		return NilInt64OptionList
	} else {
		acc := NilInt64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListList) FlatMapUintOptionList(f func(Uint64List) UintOptionList) UintOptionList {
	if m.IsEmpty() {
		return NilUintOptionList
	} else {
		acc := NilUintOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListList) FlatMapUint64OptionList(f func(Uint64List) Uint64OptionList) Uint64OptionList {
	if m.IsEmpty() {
		return NilUint64OptionList
	} else {
		acc := NilUint64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListList) FlatMapUintptrOptionList(f func(Uint64List) UintptrOptionList) UintptrOptionList {
	if m.IsEmpty() {
		return NilUintptrOptionList
	} else {
		acc := NilUintptrOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListList) FlatMapFloat32OptionList(f func(Uint64List) Float32OptionList) Float32OptionList {
	if m.IsEmpty() {
		return NilFloat32OptionList
	} else {
		acc := NilFloat32OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListList) FlatMapFloat64OptionList(f func(Uint64List) Float64OptionList) Float64OptionList {
	if m.IsEmpty() {
		return NilFloat64OptionList
	} else {
		acc := NilFloat64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListList) FlatMapRuneOptionList(f func(Uint64List) RuneOptionList) RuneOptionList {
	if m.IsEmpty() {
		return NilRuneOptionList
	} else {
		acc := NilRuneOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListList) FlatMapStringOptionList(f func(Uint64List) StringOptionList) StringOptionList {
	if m.IsEmpty() {
		return NilStringOptionList
	} else {
		acc := NilStringOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListList) FlatMapBoolList(f func(UintptrList) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBoolList
	} else {
		acc := NilBoolList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListList) FlatMapAnyList(f func(UintptrList) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAnyList
	} else {
		acc := NilAnyList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListList) FlatMapByteList(f func(UintptrList) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByteList
	} else {
		acc := NilByteList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListList) FlatMapIntList(f func(UintptrList) IntList) IntList {
	if m.IsEmpty() {
		return NilIntList
	} else {
		acc := NilIntList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListList) FlatMapInt32List(f func(UintptrList) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32List
	} else {
		acc := NilInt32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListList) FlatMapInt64List(f func(UintptrList) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64List
	} else {
		acc := NilInt64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListList) FlatMapUintList(f func(UintptrList) UintList) UintList {
	if m.IsEmpty() {
		return NilUintList
	} else {
		acc := NilUintList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListList) FlatMapUint64List(f func(UintptrList) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64List
	} else {
		acc := NilUint64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListList) FlatMapUintptrList(f func(UintptrList) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptrList
	} else {
		acc := NilUintptrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListList) FlatMapFloat32List(f func(UintptrList) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32List
	} else {
		acc := NilFloat32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListList) FlatMapFloat64List(f func(UintptrList) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64List
	} else {
		acc := NilFloat64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListList) FlatMapRuneList(f func(UintptrList) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRuneList
	} else {
		acc := NilRuneList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListList) FlatMapStringList(f func(UintptrList) StringList) StringList {
	if m.IsEmpty() {
		return NilStringList
	} else {
		acc := NilStringList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListList) FlatMapBoolArrList(f func(UintptrList) BoolArrList) BoolArrList {
	if m.IsEmpty() {
		return NilBoolArrList
	} else {
		acc := NilBoolArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListList) FlatMapAnyArrList(f func(UintptrList) AnyArrList) AnyArrList {
	if m.IsEmpty() {
		return NilAnyArrList
	} else {
		acc := NilAnyArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListList) FlatMapByteArrList(f func(UintptrList) ByteArrList) ByteArrList {
	if m.IsEmpty() {
		return NilByteArrList
	} else {
		acc := NilByteArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListList) FlatMapIntArrList(f func(UintptrList) IntArrList) IntArrList {
	if m.IsEmpty() {
		return NilIntArrList
	} else {
		acc := NilIntArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListList) FlatMapInt32ArrList(f func(UintptrList) Int32ArrList) Int32ArrList {
	if m.IsEmpty() {
		return NilInt32ArrList
	} else {
		acc := NilInt32ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListList) FlatMapInt64ArrList(f func(UintptrList) Int64ArrList) Int64ArrList {
	if m.IsEmpty() {
		return NilInt64ArrList
	} else {
		acc := NilInt64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListList) FlatMapUintArrList(f func(UintptrList) UintArrList) UintArrList {
	if m.IsEmpty() {
		return NilUintArrList
	} else {
		acc := NilUintArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListList) FlatMapUint64ArrList(f func(UintptrList) Uint64ArrList) Uint64ArrList {
	if m.IsEmpty() {
		return NilUint64ArrList
	} else {
		acc := NilUint64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListList) FlatMapUintptrArrList(f func(UintptrList) UintptrArrList) UintptrArrList {
	if m.IsEmpty() {
		return NilUintptrArrList
	} else {
		acc := NilUintptrArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListList) FlatMapFloat32ArrList(f func(UintptrList) Float32ArrList) Float32ArrList {
	if m.IsEmpty() {
		return NilFloat32ArrList
	} else {
		acc := NilFloat32ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListList) FlatMapFloat64ArrList(f func(UintptrList) Float64ArrList) Float64ArrList {
	if m.IsEmpty() {
		return NilFloat64ArrList
	} else {
		acc := NilFloat64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListList) FlatMapRuneArrList(f func(UintptrList) RuneArrList) RuneArrList {
	if m.IsEmpty() {
		return NilRuneArrList
	} else {
		acc := NilRuneArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListList) FlatMapStringArrList(f func(UintptrList) StringArrList) StringArrList {
	if m.IsEmpty() {
		return NilStringArrList
	} else {
		acc := NilStringArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListList) FlatMapBoolListList(f func(UintptrList) BoolListList) BoolListList {
	if m.IsEmpty() {
		return NilBoolListList
	} else {
		acc := NilBoolListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListList) FlatMapAnyListList(f func(UintptrList) AnyListList) AnyListList {
	if m.IsEmpty() {
		return NilAnyListList
	} else {
		acc := NilAnyListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListList) FlatMapByteListList(f func(UintptrList) ByteListList) ByteListList {
	if m.IsEmpty() {
		return NilByteListList
	} else {
		acc := NilByteListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListList) FlatMapIntListList(f func(UintptrList) IntListList) IntListList {
	if m.IsEmpty() {
		return NilIntListList
	} else {
		acc := NilIntListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListList) FlatMapInt32ListList(f func(UintptrList) Int32ListList) Int32ListList {
	if m.IsEmpty() {
		return NilInt32ListList
	} else {
		acc := NilInt32ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListList) FlatMapInt64ListList(f func(UintptrList) Int64ListList) Int64ListList {
	if m.IsEmpty() {
		return NilInt64ListList
	} else {
		acc := NilInt64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListList) FlatMapUintListList(f func(UintptrList) UintListList) UintListList {
	if m.IsEmpty() {
		return NilUintListList
	} else {
		acc := NilUintListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListList) FlatMapUint64ListList(f func(UintptrList) Uint64ListList) Uint64ListList {
	if m.IsEmpty() {
		return NilUint64ListList
	} else {
		acc := NilUint64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListList) FlatMapUintptrListList(f func(UintptrList) UintptrListList) UintptrListList {
	if m.IsEmpty() {
		return NilUintptrListList
	} else {
		acc := NilUintptrListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListList) FlatMapFloat32ListList(f func(UintptrList) Float32ListList) Float32ListList {
	if m.IsEmpty() {
		return NilFloat32ListList
	} else {
		acc := NilFloat32ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListList) FlatMapFloat64ListList(f func(UintptrList) Float64ListList) Float64ListList {
	if m.IsEmpty() {
		return NilFloat64ListList
	} else {
		acc := NilFloat64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListList) FlatMapRuneListList(f func(UintptrList) RuneListList) RuneListList {
	if m.IsEmpty() {
		return NilRuneListList
	} else {
		acc := NilRuneListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListList) FlatMapStringListList(f func(UintptrList) StringListList) StringListList {
	if m.IsEmpty() {
		return NilStringListList
	} else {
		acc := NilStringListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListList) FlatMapBoolOptionList(f func(UintptrList) BoolOptionList) BoolOptionList {
	if m.IsEmpty() {
		return NilBoolOptionList
	} else {
		acc := NilBoolOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListList) FlatMapAnyOptionList(f func(UintptrList) AnyOptionList) AnyOptionList {
	if m.IsEmpty() {
		return NilAnyOptionList
	} else {
		acc := NilAnyOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListList) FlatMapByteOptionList(f func(UintptrList) ByteOptionList) ByteOptionList {
	if m.IsEmpty() {
		return NilByteOptionList
	} else {
		acc := NilByteOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListList) FlatMapIntOptionList(f func(UintptrList) IntOptionList) IntOptionList {
	if m.IsEmpty() {
		return NilIntOptionList
	} else {
		acc := NilIntOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListList) FlatMapInt32OptionList(f func(UintptrList) Int32OptionList) Int32OptionList {
	if m.IsEmpty() {
		return NilInt32OptionList
	} else {
		acc := NilInt32OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListList) FlatMapInt64OptionList(f func(UintptrList) Int64OptionList) Int64OptionList {
	if m.IsEmpty() {
		return NilInt64OptionList
	} else {
		acc := NilInt64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListList) FlatMapUintOptionList(f func(UintptrList) UintOptionList) UintOptionList {
	if m.IsEmpty() {
		return NilUintOptionList
	} else {
		acc := NilUintOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListList) FlatMapUint64OptionList(f func(UintptrList) Uint64OptionList) Uint64OptionList {
	if m.IsEmpty() {
		return NilUint64OptionList
	} else {
		acc := NilUint64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListList) FlatMapUintptrOptionList(f func(UintptrList) UintptrOptionList) UintptrOptionList {
	if m.IsEmpty() {
		return NilUintptrOptionList
	} else {
		acc := NilUintptrOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListList) FlatMapFloat32OptionList(f func(UintptrList) Float32OptionList) Float32OptionList {
	if m.IsEmpty() {
		return NilFloat32OptionList
	} else {
		acc := NilFloat32OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListList) FlatMapFloat64OptionList(f func(UintptrList) Float64OptionList) Float64OptionList {
	if m.IsEmpty() {
		return NilFloat64OptionList
	} else {
		acc := NilFloat64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListList) FlatMapRuneOptionList(f func(UintptrList) RuneOptionList) RuneOptionList {
	if m.IsEmpty() {
		return NilRuneOptionList
	} else {
		acc := NilRuneOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListList) FlatMapStringOptionList(f func(UintptrList) StringOptionList) StringOptionList {
	if m.IsEmpty() {
		return NilStringOptionList
	} else {
		acc := NilStringOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListList) FlatMapBoolList(f func(Float32List) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBoolList
	} else {
		acc := NilBoolList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListList) FlatMapAnyList(f func(Float32List) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAnyList
	} else {
		acc := NilAnyList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListList) FlatMapByteList(f func(Float32List) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByteList
	} else {
		acc := NilByteList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListList) FlatMapIntList(f func(Float32List) IntList) IntList {
	if m.IsEmpty() {
		return NilIntList
	} else {
		acc := NilIntList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListList) FlatMapInt32List(f func(Float32List) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32List
	} else {
		acc := NilInt32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListList) FlatMapInt64List(f func(Float32List) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64List
	} else {
		acc := NilInt64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListList) FlatMapUintList(f func(Float32List) UintList) UintList {
	if m.IsEmpty() {
		return NilUintList
	} else {
		acc := NilUintList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListList) FlatMapUint64List(f func(Float32List) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64List
	} else {
		acc := NilUint64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListList) FlatMapUintptrList(f func(Float32List) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptrList
	} else {
		acc := NilUintptrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListList) FlatMapFloat32List(f func(Float32List) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32List
	} else {
		acc := NilFloat32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListList) FlatMapFloat64List(f func(Float32List) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64List
	} else {
		acc := NilFloat64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListList) FlatMapRuneList(f func(Float32List) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRuneList
	} else {
		acc := NilRuneList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListList) FlatMapStringList(f func(Float32List) StringList) StringList {
	if m.IsEmpty() {
		return NilStringList
	} else {
		acc := NilStringList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListList) FlatMapBoolArrList(f func(Float32List) BoolArrList) BoolArrList {
	if m.IsEmpty() {
		return NilBoolArrList
	} else {
		acc := NilBoolArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListList) FlatMapAnyArrList(f func(Float32List) AnyArrList) AnyArrList {
	if m.IsEmpty() {
		return NilAnyArrList
	} else {
		acc := NilAnyArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListList) FlatMapByteArrList(f func(Float32List) ByteArrList) ByteArrList {
	if m.IsEmpty() {
		return NilByteArrList
	} else {
		acc := NilByteArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListList) FlatMapIntArrList(f func(Float32List) IntArrList) IntArrList {
	if m.IsEmpty() {
		return NilIntArrList
	} else {
		acc := NilIntArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListList) FlatMapInt32ArrList(f func(Float32List) Int32ArrList) Int32ArrList {
	if m.IsEmpty() {
		return NilInt32ArrList
	} else {
		acc := NilInt32ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListList) FlatMapInt64ArrList(f func(Float32List) Int64ArrList) Int64ArrList {
	if m.IsEmpty() {
		return NilInt64ArrList
	} else {
		acc := NilInt64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListList) FlatMapUintArrList(f func(Float32List) UintArrList) UintArrList {
	if m.IsEmpty() {
		return NilUintArrList
	} else {
		acc := NilUintArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListList) FlatMapUint64ArrList(f func(Float32List) Uint64ArrList) Uint64ArrList {
	if m.IsEmpty() {
		return NilUint64ArrList
	} else {
		acc := NilUint64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListList) FlatMapUintptrArrList(f func(Float32List) UintptrArrList) UintptrArrList {
	if m.IsEmpty() {
		return NilUintptrArrList
	} else {
		acc := NilUintptrArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListList) FlatMapFloat32ArrList(f func(Float32List) Float32ArrList) Float32ArrList {
	if m.IsEmpty() {
		return NilFloat32ArrList
	} else {
		acc := NilFloat32ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListList) FlatMapFloat64ArrList(f func(Float32List) Float64ArrList) Float64ArrList {
	if m.IsEmpty() {
		return NilFloat64ArrList
	} else {
		acc := NilFloat64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListList) FlatMapRuneArrList(f func(Float32List) RuneArrList) RuneArrList {
	if m.IsEmpty() {
		return NilRuneArrList
	} else {
		acc := NilRuneArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListList) FlatMapStringArrList(f func(Float32List) StringArrList) StringArrList {
	if m.IsEmpty() {
		return NilStringArrList
	} else {
		acc := NilStringArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListList) FlatMapBoolListList(f func(Float32List) BoolListList) BoolListList {
	if m.IsEmpty() {
		return NilBoolListList
	} else {
		acc := NilBoolListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListList) FlatMapAnyListList(f func(Float32List) AnyListList) AnyListList {
	if m.IsEmpty() {
		return NilAnyListList
	} else {
		acc := NilAnyListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListList) FlatMapByteListList(f func(Float32List) ByteListList) ByteListList {
	if m.IsEmpty() {
		return NilByteListList
	} else {
		acc := NilByteListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListList) FlatMapIntListList(f func(Float32List) IntListList) IntListList {
	if m.IsEmpty() {
		return NilIntListList
	} else {
		acc := NilIntListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListList) FlatMapInt32ListList(f func(Float32List) Int32ListList) Int32ListList {
	if m.IsEmpty() {
		return NilInt32ListList
	} else {
		acc := NilInt32ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListList) FlatMapInt64ListList(f func(Float32List) Int64ListList) Int64ListList {
	if m.IsEmpty() {
		return NilInt64ListList
	} else {
		acc := NilInt64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListList) FlatMapUintListList(f func(Float32List) UintListList) UintListList {
	if m.IsEmpty() {
		return NilUintListList
	} else {
		acc := NilUintListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListList) FlatMapUint64ListList(f func(Float32List) Uint64ListList) Uint64ListList {
	if m.IsEmpty() {
		return NilUint64ListList
	} else {
		acc := NilUint64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListList) FlatMapUintptrListList(f func(Float32List) UintptrListList) UintptrListList {
	if m.IsEmpty() {
		return NilUintptrListList
	} else {
		acc := NilUintptrListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListList) FlatMapFloat32ListList(f func(Float32List) Float32ListList) Float32ListList {
	if m.IsEmpty() {
		return NilFloat32ListList
	} else {
		acc := NilFloat32ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListList) FlatMapFloat64ListList(f func(Float32List) Float64ListList) Float64ListList {
	if m.IsEmpty() {
		return NilFloat64ListList
	} else {
		acc := NilFloat64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListList) FlatMapRuneListList(f func(Float32List) RuneListList) RuneListList {
	if m.IsEmpty() {
		return NilRuneListList
	} else {
		acc := NilRuneListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListList) FlatMapStringListList(f func(Float32List) StringListList) StringListList {
	if m.IsEmpty() {
		return NilStringListList
	} else {
		acc := NilStringListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListList) FlatMapBoolOptionList(f func(Float32List) BoolOptionList) BoolOptionList {
	if m.IsEmpty() {
		return NilBoolOptionList
	} else {
		acc := NilBoolOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListList) FlatMapAnyOptionList(f func(Float32List) AnyOptionList) AnyOptionList {
	if m.IsEmpty() {
		return NilAnyOptionList
	} else {
		acc := NilAnyOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListList) FlatMapByteOptionList(f func(Float32List) ByteOptionList) ByteOptionList {
	if m.IsEmpty() {
		return NilByteOptionList
	} else {
		acc := NilByteOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListList) FlatMapIntOptionList(f func(Float32List) IntOptionList) IntOptionList {
	if m.IsEmpty() {
		return NilIntOptionList
	} else {
		acc := NilIntOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListList) FlatMapInt32OptionList(f func(Float32List) Int32OptionList) Int32OptionList {
	if m.IsEmpty() {
		return NilInt32OptionList
	} else {
		acc := NilInt32OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListList) FlatMapInt64OptionList(f func(Float32List) Int64OptionList) Int64OptionList {
	if m.IsEmpty() {
		return NilInt64OptionList
	} else {
		acc := NilInt64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListList) FlatMapUintOptionList(f func(Float32List) UintOptionList) UintOptionList {
	if m.IsEmpty() {
		return NilUintOptionList
	} else {
		acc := NilUintOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListList) FlatMapUint64OptionList(f func(Float32List) Uint64OptionList) Uint64OptionList {
	if m.IsEmpty() {
		return NilUint64OptionList
	} else {
		acc := NilUint64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListList) FlatMapUintptrOptionList(f func(Float32List) UintptrOptionList) UintptrOptionList {
	if m.IsEmpty() {
		return NilUintptrOptionList
	} else {
		acc := NilUintptrOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListList) FlatMapFloat32OptionList(f func(Float32List) Float32OptionList) Float32OptionList {
	if m.IsEmpty() {
		return NilFloat32OptionList
	} else {
		acc := NilFloat32OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListList) FlatMapFloat64OptionList(f func(Float32List) Float64OptionList) Float64OptionList {
	if m.IsEmpty() {
		return NilFloat64OptionList
	} else {
		acc := NilFloat64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListList) FlatMapRuneOptionList(f func(Float32List) RuneOptionList) RuneOptionList {
	if m.IsEmpty() {
		return NilRuneOptionList
	} else {
		acc := NilRuneOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListList) FlatMapStringOptionList(f func(Float32List) StringOptionList) StringOptionList {
	if m.IsEmpty() {
		return NilStringOptionList
	} else {
		acc := NilStringOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListList) FlatMapBoolList(f func(Float64List) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBoolList
	} else {
		acc := NilBoolList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListList) FlatMapAnyList(f func(Float64List) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAnyList
	} else {
		acc := NilAnyList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListList) FlatMapByteList(f func(Float64List) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByteList
	} else {
		acc := NilByteList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListList) FlatMapIntList(f func(Float64List) IntList) IntList {
	if m.IsEmpty() {
		return NilIntList
	} else {
		acc := NilIntList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListList) FlatMapInt32List(f func(Float64List) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32List
	} else {
		acc := NilInt32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListList) FlatMapInt64List(f func(Float64List) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64List
	} else {
		acc := NilInt64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListList) FlatMapUintList(f func(Float64List) UintList) UintList {
	if m.IsEmpty() {
		return NilUintList
	} else {
		acc := NilUintList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListList) FlatMapUint64List(f func(Float64List) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64List
	} else {
		acc := NilUint64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListList) FlatMapUintptrList(f func(Float64List) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptrList
	} else {
		acc := NilUintptrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListList) FlatMapFloat32List(f func(Float64List) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32List
	} else {
		acc := NilFloat32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListList) FlatMapFloat64List(f func(Float64List) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64List
	} else {
		acc := NilFloat64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListList) FlatMapRuneList(f func(Float64List) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRuneList
	} else {
		acc := NilRuneList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListList) FlatMapStringList(f func(Float64List) StringList) StringList {
	if m.IsEmpty() {
		return NilStringList
	} else {
		acc := NilStringList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListList) FlatMapBoolArrList(f func(Float64List) BoolArrList) BoolArrList {
	if m.IsEmpty() {
		return NilBoolArrList
	} else {
		acc := NilBoolArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListList) FlatMapAnyArrList(f func(Float64List) AnyArrList) AnyArrList {
	if m.IsEmpty() {
		return NilAnyArrList
	} else {
		acc := NilAnyArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListList) FlatMapByteArrList(f func(Float64List) ByteArrList) ByteArrList {
	if m.IsEmpty() {
		return NilByteArrList
	} else {
		acc := NilByteArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListList) FlatMapIntArrList(f func(Float64List) IntArrList) IntArrList {
	if m.IsEmpty() {
		return NilIntArrList
	} else {
		acc := NilIntArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListList) FlatMapInt32ArrList(f func(Float64List) Int32ArrList) Int32ArrList {
	if m.IsEmpty() {
		return NilInt32ArrList
	} else {
		acc := NilInt32ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListList) FlatMapInt64ArrList(f func(Float64List) Int64ArrList) Int64ArrList {
	if m.IsEmpty() {
		return NilInt64ArrList
	} else {
		acc := NilInt64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListList) FlatMapUintArrList(f func(Float64List) UintArrList) UintArrList {
	if m.IsEmpty() {
		return NilUintArrList
	} else {
		acc := NilUintArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListList) FlatMapUint64ArrList(f func(Float64List) Uint64ArrList) Uint64ArrList {
	if m.IsEmpty() {
		return NilUint64ArrList
	} else {
		acc := NilUint64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListList) FlatMapUintptrArrList(f func(Float64List) UintptrArrList) UintptrArrList {
	if m.IsEmpty() {
		return NilUintptrArrList
	} else {
		acc := NilUintptrArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListList) FlatMapFloat32ArrList(f func(Float64List) Float32ArrList) Float32ArrList {
	if m.IsEmpty() {
		return NilFloat32ArrList
	} else {
		acc := NilFloat32ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListList) FlatMapFloat64ArrList(f func(Float64List) Float64ArrList) Float64ArrList {
	if m.IsEmpty() {
		return NilFloat64ArrList
	} else {
		acc := NilFloat64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListList) FlatMapRuneArrList(f func(Float64List) RuneArrList) RuneArrList {
	if m.IsEmpty() {
		return NilRuneArrList
	} else {
		acc := NilRuneArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListList) FlatMapStringArrList(f func(Float64List) StringArrList) StringArrList {
	if m.IsEmpty() {
		return NilStringArrList
	} else {
		acc := NilStringArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListList) FlatMapBoolListList(f func(Float64List) BoolListList) BoolListList {
	if m.IsEmpty() {
		return NilBoolListList
	} else {
		acc := NilBoolListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListList) FlatMapAnyListList(f func(Float64List) AnyListList) AnyListList {
	if m.IsEmpty() {
		return NilAnyListList
	} else {
		acc := NilAnyListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListList) FlatMapByteListList(f func(Float64List) ByteListList) ByteListList {
	if m.IsEmpty() {
		return NilByteListList
	} else {
		acc := NilByteListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListList) FlatMapIntListList(f func(Float64List) IntListList) IntListList {
	if m.IsEmpty() {
		return NilIntListList
	} else {
		acc := NilIntListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListList) FlatMapInt32ListList(f func(Float64List) Int32ListList) Int32ListList {
	if m.IsEmpty() {
		return NilInt32ListList
	} else {
		acc := NilInt32ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListList) FlatMapInt64ListList(f func(Float64List) Int64ListList) Int64ListList {
	if m.IsEmpty() {
		return NilInt64ListList
	} else {
		acc := NilInt64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListList) FlatMapUintListList(f func(Float64List) UintListList) UintListList {
	if m.IsEmpty() {
		return NilUintListList
	} else {
		acc := NilUintListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListList) FlatMapUint64ListList(f func(Float64List) Uint64ListList) Uint64ListList {
	if m.IsEmpty() {
		return NilUint64ListList
	} else {
		acc := NilUint64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListList) FlatMapUintptrListList(f func(Float64List) UintptrListList) UintptrListList {
	if m.IsEmpty() {
		return NilUintptrListList
	} else {
		acc := NilUintptrListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListList) FlatMapFloat32ListList(f func(Float64List) Float32ListList) Float32ListList {
	if m.IsEmpty() {
		return NilFloat32ListList
	} else {
		acc := NilFloat32ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListList) FlatMapFloat64ListList(f func(Float64List) Float64ListList) Float64ListList {
	if m.IsEmpty() {
		return NilFloat64ListList
	} else {
		acc := NilFloat64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListList) FlatMapRuneListList(f func(Float64List) RuneListList) RuneListList {
	if m.IsEmpty() {
		return NilRuneListList
	} else {
		acc := NilRuneListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListList) FlatMapStringListList(f func(Float64List) StringListList) StringListList {
	if m.IsEmpty() {
		return NilStringListList
	} else {
		acc := NilStringListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListList) FlatMapBoolOptionList(f func(Float64List) BoolOptionList) BoolOptionList {
	if m.IsEmpty() {
		return NilBoolOptionList
	} else {
		acc := NilBoolOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListList) FlatMapAnyOptionList(f func(Float64List) AnyOptionList) AnyOptionList {
	if m.IsEmpty() {
		return NilAnyOptionList
	} else {
		acc := NilAnyOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListList) FlatMapByteOptionList(f func(Float64List) ByteOptionList) ByteOptionList {
	if m.IsEmpty() {
		return NilByteOptionList
	} else {
		acc := NilByteOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListList) FlatMapIntOptionList(f func(Float64List) IntOptionList) IntOptionList {
	if m.IsEmpty() {
		return NilIntOptionList
	} else {
		acc := NilIntOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListList) FlatMapInt32OptionList(f func(Float64List) Int32OptionList) Int32OptionList {
	if m.IsEmpty() {
		return NilInt32OptionList
	} else {
		acc := NilInt32OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListList) FlatMapInt64OptionList(f func(Float64List) Int64OptionList) Int64OptionList {
	if m.IsEmpty() {
		return NilInt64OptionList
	} else {
		acc := NilInt64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListList) FlatMapUintOptionList(f func(Float64List) UintOptionList) UintOptionList {
	if m.IsEmpty() {
		return NilUintOptionList
	} else {
		acc := NilUintOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListList) FlatMapUint64OptionList(f func(Float64List) Uint64OptionList) Uint64OptionList {
	if m.IsEmpty() {
		return NilUint64OptionList
	} else {
		acc := NilUint64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListList) FlatMapUintptrOptionList(f func(Float64List) UintptrOptionList) UintptrOptionList {
	if m.IsEmpty() {
		return NilUintptrOptionList
	} else {
		acc := NilUintptrOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListList) FlatMapFloat32OptionList(f func(Float64List) Float32OptionList) Float32OptionList {
	if m.IsEmpty() {
		return NilFloat32OptionList
	} else {
		acc := NilFloat32OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListList) FlatMapFloat64OptionList(f func(Float64List) Float64OptionList) Float64OptionList {
	if m.IsEmpty() {
		return NilFloat64OptionList
	} else {
		acc := NilFloat64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListList) FlatMapRuneOptionList(f func(Float64List) RuneOptionList) RuneOptionList {
	if m.IsEmpty() {
		return NilRuneOptionList
	} else {
		acc := NilRuneOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListList) FlatMapStringOptionList(f func(Float64List) StringOptionList) StringOptionList {
	if m.IsEmpty() {
		return NilStringOptionList
	} else {
		acc := NilStringOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListList) FlatMapBoolList(f func(RuneList) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBoolList
	} else {
		acc := NilBoolList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListList) FlatMapAnyList(f func(RuneList) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAnyList
	} else {
		acc := NilAnyList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListList) FlatMapByteList(f func(RuneList) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByteList
	} else {
		acc := NilByteList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListList) FlatMapIntList(f func(RuneList) IntList) IntList {
	if m.IsEmpty() {
		return NilIntList
	} else {
		acc := NilIntList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListList) FlatMapInt32List(f func(RuneList) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32List
	} else {
		acc := NilInt32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListList) FlatMapInt64List(f func(RuneList) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64List
	} else {
		acc := NilInt64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListList) FlatMapUintList(f func(RuneList) UintList) UintList {
	if m.IsEmpty() {
		return NilUintList
	} else {
		acc := NilUintList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListList) FlatMapUint64List(f func(RuneList) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64List
	} else {
		acc := NilUint64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListList) FlatMapUintptrList(f func(RuneList) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptrList
	} else {
		acc := NilUintptrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListList) FlatMapFloat32List(f func(RuneList) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32List
	} else {
		acc := NilFloat32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListList) FlatMapFloat64List(f func(RuneList) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64List
	} else {
		acc := NilFloat64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListList) FlatMapRuneList(f func(RuneList) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRuneList
	} else {
		acc := NilRuneList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListList) FlatMapStringList(f func(RuneList) StringList) StringList {
	if m.IsEmpty() {
		return NilStringList
	} else {
		acc := NilStringList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListList) FlatMapBoolArrList(f func(RuneList) BoolArrList) BoolArrList {
	if m.IsEmpty() {
		return NilBoolArrList
	} else {
		acc := NilBoolArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListList) FlatMapAnyArrList(f func(RuneList) AnyArrList) AnyArrList {
	if m.IsEmpty() {
		return NilAnyArrList
	} else {
		acc := NilAnyArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListList) FlatMapByteArrList(f func(RuneList) ByteArrList) ByteArrList {
	if m.IsEmpty() {
		return NilByteArrList
	} else {
		acc := NilByteArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListList) FlatMapIntArrList(f func(RuneList) IntArrList) IntArrList {
	if m.IsEmpty() {
		return NilIntArrList
	} else {
		acc := NilIntArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListList) FlatMapInt32ArrList(f func(RuneList) Int32ArrList) Int32ArrList {
	if m.IsEmpty() {
		return NilInt32ArrList
	} else {
		acc := NilInt32ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListList) FlatMapInt64ArrList(f func(RuneList) Int64ArrList) Int64ArrList {
	if m.IsEmpty() {
		return NilInt64ArrList
	} else {
		acc := NilInt64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListList) FlatMapUintArrList(f func(RuneList) UintArrList) UintArrList {
	if m.IsEmpty() {
		return NilUintArrList
	} else {
		acc := NilUintArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListList) FlatMapUint64ArrList(f func(RuneList) Uint64ArrList) Uint64ArrList {
	if m.IsEmpty() {
		return NilUint64ArrList
	} else {
		acc := NilUint64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListList) FlatMapUintptrArrList(f func(RuneList) UintptrArrList) UintptrArrList {
	if m.IsEmpty() {
		return NilUintptrArrList
	} else {
		acc := NilUintptrArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListList) FlatMapFloat32ArrList(f func(RuneList) Float32ArrList) Float32ArrList {
	if m.IsEmpty() {
		return NilFloat32ArrList
	} else {
		acc := NilFloat32ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListList) FlatMapFloat64ArrList(f func(RuneList) Float64ArrList) Float64ArrList {
	if m.IsEmpty() {
		return NilFloat64ArrList
	} else {
		acc := NilFloat64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListList) FlatMapRuneArrList(f func(RuneList) RuneArrList) RuneArrList {
	if m.IsEmpty() {
		return NilRuneArrList
	} else {
		acc := NilRuneArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListList) FlatMapStringArrList(f func(RuneList) StringArrList) StringArrList {
	if m.IsEmpty() {
		return NilStringArrList
	} else {
		acc := NilStringArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListList) FlatMapBoolListList(f func(RuneList) BoolListList) BoolListList {
	if m.IsEmpty() {
		return NilBoolListList
	} else {
		acc := NilBoolListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListList) FlatMapAnyListList(f func(RuneList) AnyListList) AnyListList {
	if m.IsEmpty() {
		return NilAnyListList
	} else {
		acc := NilAnyListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListList) FlatMapByteListList(f func(RuneList) ByteListList) ByteListList {
	if m.IsEmpty() {
		return NilByteListList
	} else {
		acc := NilByteListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListList) FlatMapIntListList(f func(RuneList) IntListList) IntListList {
	if m.IsEmpty() {
		return NilIntListList
	} else {
		acc := NilIntListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListList) FlatMapInt32ListList(f func(RuneList) Int32ListList) Int32ListList {
	if m.IsEmpty() {
		return NilInt32ListList
	} else {
		acc := NilInt32ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListList) FlatMapInt64ListList(f func(RuneList) Int64ListList) Int64ListList {
	if m.IsEmpty() {
		return NilInt64ListList
	} else {
		acc := NilInt64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListList) FlatMapUintListList(f func(RuneList) UintListList) UintListList {
	if m.IsEmpty() {
		return NilUintListList
	} else {
		acc := NilUintListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListList) FlatMapUint64ListList(f func(RuneList) Uint64ListList) Uint64ListList {
	if m.IsEmpty() {
		return NilUint64ListList
	} else {
		acc := NilUint64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListList) FlatMapUintptrListList(f func(RuneList) UintptrListList) UintptrListList {
	if m.IsEmpty() {
		return NilUintptrListList
	} else {
		acc := NilUintptrListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListList) FlatMapFloat32ListList(f func(RuneList) Float32ListList) Float32ListList {
	if m.IsEmpty() {
		return NilFloat32ListList
	} else {
		acc := NilFloat32ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListList) FlatMapFloat64ListList(f func(RuneList) Float64ListList) Float64ListList {
	if m.IsEmpty() {
		return NilFloat64ListList
	} else {
		acc := NilFloat64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListList) FlatMapRuneListList(f func(RuneList) RuneListList) RuneListList {
	if m.IsEmpty() {
		return NilRuneListList
	} else {
		acc := NilRuneListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListList) FlatMapStringListList(f func(RuneList) StringListList) StringListList {
	if m.IsEmpty() {
		return NilStringListList
	} else {
		acc := NilStringListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListList) FlatMapBoolOptionList(f func(RuneList) BoolOptionList) BoolOptionList {
	if m.IsEmpty() {
		return NilBoolOptionList
	} else {
		acc := NilBoolOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListList) FlatMapAnyOptionList(f func(RuneList) AnyOptionList) AnyOptionList {
	if m.IsEmpty() {
		return NilAnyOptionList
	} else {
		acc := NilAnyOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListList) FlatMapByteOptionList(f func(RuneList) ByteOptionList) ByteOptionList {
	if m.IsEmpty() {
		return NilByteOptionList
	} else {
		acc := NilByteOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListList) FlatMapIntOptionList(f func(RuneList) IntOptionList) IntOptionList {
	if m.IsEmpty() {
		return NilIntOptionList
	} else {
		acc := NilIntOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListList) FlatMapInt32OptionList(f func(RuneList) Int32OptionList) Int32OptionList {
	if m.IsEmpty() {
		return NilInt32OptionList
	} else {
		acc := NilInt32OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListList) FlatMapInt64OptionList(f func(RuneList) Int64OptionList) Int64OptionList {
	if m.IsEmpty() {
		return NilInt64OptionList
	} else {
		acc := NilInt64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListList) FlatMapUintOptionList(f func(RuneList) UintOptionList) UintOptionList {
	if m.IsEmpty() {
		return NilUintOptionList
	} else {
		acc := NilUintOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListList) FlatMapUint64OptionList(f func(RuneList) Uint64OptionList) Uint64OptionList {
	if m.IsEmpty() {
		return NilUint64OptionList
	} else {
		acc := NilUint64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListList) FlatMapUintptrOptionList(f func(RuneList) UintptrOptionList) UintptrOptionList {
	if m.IsEmpty() {
		return NilUintptrOptionList
	} else {
		acc := NilUintptrOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListList) FlatMapFloat32OptionList(f func(RuneList) Float32OptionList) Float32OptionList {
	if m.IsEmpty() {
		return NilFloat32OptionList
	} else {
		acc := NilFloat32OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListList) FlatMapFloat64OptionList(f func(RuneList) Float64OptionList) Float64OptionList {
	if m.IsEmpty() {
		return NilFloat64OptionList
	} else {
		acc := NilFloat64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListList) FlatMapRuneOptionList(f func(RuneList) RuneOptionList) RuneOptionList {
	if m.IsEmpty() {
		return NilRuneOptionList
	} else {
		acc := NilRuneOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListList) FlatMapStringOptionList(f func(RuneList) StringOptionList) StringOptionList {
	if m.IsEmpty() {
		return NilStringOptionList
	} else {
		acc := NilStringOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListList) FlatMapBoolList(f func(StringList) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBoolList
	} else {
		acc := NilBoolList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListList) FlatMapAnyList(f func(StringList) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAnyList
	} else {
		acc := NilAnyList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListList) FlatMapByteList(f func(StringList) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByteList
	} else {
		acc := NilByteList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListList) FlatMapIntList(f func(StringList) IntList) IntList {
	if m.IsEmpty() {
		return NilIntList
	} else {
		acc := NilIntList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListList) FlatMapInt32List(f func(StringList) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32List
	} else {
		acc := NilInt32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListList) FlatMapInt64List(f func(StringList) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64List
	} else {
		acc := NilInt64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListList) FlatMapUintList(f func(StringList) UintList) UintList {
	if m.IsEmpty() {
		return NilUintList
	} else {
		acc := NilUintList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListList) FlatMapUint64List(f func(StringList) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64List
	} else {
		acc := NilUint64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListList) FlatMapUintptrList(f func(StringList) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptrList
	} else {
		acc := NilUintptrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListList) FlatMapFloat32List(f func(StringList) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32List
	} else {
		acc := NilFloat32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListList) FlatMapFloat64List(f func(StringList) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64List
	} else {
		acc := NilFloat64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListList) FlatMapRuneList(f func(StringList) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRuneList
	} else {
		acc := NilRuneList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListList) FlatMapStringList(f func(StringList) StringList) StringList {
	if m.IsEmpty() {
		return NilStringList
	} else {
		acc := NilStringList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListList) FlatMapBoolArrList(f func(StringList) BoolArrList) BoolArrList {
	if m.IsEmpty() {
		return NilBoolArrList
	} else {
		acc := NilBoolArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListList) FlatMapAnyArrList(f func(StringList) AnyArrList) AnyArrList {
	if m.IsEmpty() {
		return NilAnyArrList
	} else {
		acc := NilAnyArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListList) FlatMapByteArrList(f func(StringList) ByteArrList) ByteArrList {
	if m.IsEmpty() {
		return NilByteArrList
	} else {
		acc := NilByteArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListList) FlatMapIntArrList(f func(StringList) IntArrList) IntArrList {
	if m.IsEmpty() {
		return NilIntArrList
	} else {
		acc := NilIntArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListList) FlatMapInt32ArrList(f func(StringList) Int32ArrList) Int32ArrList {
	if m.IsEmpty() {
		return NilInt32ArrList
	} else {
		acc := NilInt32ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListList) FlatMapInt64ArrList(f func(StringList) Int64ArrList) Int64ArrList {
	if m.IsEmpty() {
		return NilInt64ArrList
	} else {
		acc := NilInt64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListList) FlatMapUintArrList(f func(StringList) UintArrList) UintArrList {
	if m.IsEmpty() {
		return NilUintArrList
	} else {
		acc := NilUintArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListList) FlatMapUint64ArrList(f func(StringList) Uint64ArrList) Uint64ArrList {
	if m.IsEmpty() {
		return NilUint64ArrList
	} else {
		acc := NilUint64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListList) FlatMapUintptrArrList(f func(StringList) UintptrArrList) UintptrArrList {
	if m.IsEmpty() {
		return NilUintptrArrList
	} else {
		acc := NilUintptrArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListList) FlatMapFloat32ArrList(f func(StringList) Float32ArrList) Float32ArrList {
	if m.IsEmpty() {
		return NilFloat32ArrList
	} else {
		acc := NilFloat32ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListList) FlatMapFloat64ArrList(f func(StringList) Float64ArrList) Float64ArrList {
	if m.IsEmpty() {
		return NilFloat64ArrList
	} else {
		acc := NilFloat64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListList) FlatMapRuneArrList(f func(StringList) RuneArrList) RuneArrList {
	if m.IsEmpty() {
		return NilRuneArrList
	} else {
		acc := NilRuneArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListList) FlatMapStringArrList(f func(StringList) StringArrList) StringArrList {
	if m.IsEmpty() {
		return NilStringArrList
	} else {
		acc := NilStringArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListList) FlatMapBoolListList(f func(StringList) BoolListList) BoolListList {
	if m.IsEmpty() {
		return NilBoolListList
	} else {
		acc := NilBoolListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListList) FlatMapAnyListList(f func(StringList) AnyListList) AnyListList {
	if m.IsEmpty() {
		return NilAnyListList
	} else {
		acc := NilAnyListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListList) FlatMapByteListList(f func(StringList) ByteListList) ByteListList {
	if m.IsEmpty() {
		return NilByteListList
	} else {
		acc := NilByteListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListList) FlatMapIntListList(f func(StringList) IntListList) IntListList {
	if m.IsEmpty() {
		return NilIntListList
	} else {
		acc := NilIntListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListList) FlatMapInt32ListList(f func(StringList) Int32ListList) Int32ListList {
	if m.IsEmpty() {
		return NilInt32ListList
	} else {
		acc := NilInt32ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListList) FlatMapInt64ListList(f func(StringList) Int64ListList) Int64ListList {
	if m.IsEmpty() {
		return NilInt64ListList
	} else {
		acc := NilInt64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListList) FlatMapUintListList(f func(StringList) UintListList) UintListList {
	if m.IsEmpty() {
		return NilUintListList
	} else {
		acc := NilUintListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListList) FlatMapUint64ListList(f func(StringList) Uint64ListList) Uint64ListList {
	if m.IsEmpty() {
		return NilUint64ListList
	} else {
		acc := NilUint64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListList) FlatMapUintptrListList(f func(StringList) UintptrListList) UintptrListList {
	if m.IsEmpty() {
		return NilUintptrListList
	} else {
		acc := NilUintptrListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListList) FlatMapFloat32ListList(f func(StringList) Float32ListList) Float32ListList {
	if m.IsEmpty() {
		return NilFloat32ListList
	} else {
		acc := NilFloat32ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListList) FlatMapFloat64ListList(f func(StringList) Float64ListList) Float64ListList {
	if m.IsEmpty() {
		return NilFloat64ListList
	} else {
		acc := NilFloat64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListList) FlatMapRuneListList(f func(StringList) RuneListList) RuneListList {
	if m.IsEmpty() {
		return NilRuneListList
	} else {
		acc := NilRuneListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListList) FlatMapStringListList(f func(StringList) StringListList) StringListList {
	if m.IsEmpty() {
		return NilStringListList
	} else {
		acc := NilStringListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListList) FlatMapBoolOptionList(f func(StringList) BoolOptionList) BoolOptionList {
	if m.IsEmpty() {
		return NilBoolOptionList
	} else {
		acc := NilBoolOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListList) FlatMapAnyOptionList(f func(StringList) AnyOptionList) AnyOptionList {
	if m.IsEmpty() {
		return NilAnyOptionList
	} else {
		acc := NilAnyOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListList) FlatMapByteOptionList(f func(StringList) ByteOptionList) ByteOptionList {
	if m.IsEmpty() {
		return NilByteOptionList
	} else {
		acc := NilByteOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListList) FlatMapIntOptionList(f func(StringList) IntOptionList) IntOptionList {
	if m.IsEmpty() {
		return NilIntOptionList
	} else {
		acc := NilIntOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListList) FlatMapInt32OptionList(f func(StringList) Int32OptionList) Int32OptionList {
	if m.IsEmpty() {
		return NilInt32OptionList
	} else {
		acc := NilInt32OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListList) FlatMapInt64OptionList(f func(StringList) Int64OptionList) Int64OptionList {
	if m.IsEmpty() {
		return NilInt64OptionList
	} else {
		acc := NilInt64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListList) FlatMapUintOptionList(f func(StringList) UintOptionList) UintOptionList {
	if m.IsEmpty() {
		return NilUintOptionList
	} else {
		acc := NilUintOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListList) FlatMapUint64OptionList(f func(StringList) Uint64OptionList) Uint64OptionList {
	if m.IsEmpty() {
		return NilUint64OptionList
	} else {
		acc := NilUint64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListList) FlatMapUintptrOptionList(f func(StringList) UintptrOptionList) UintptrOptionList {
	if m.IsEmpty() {
		return NilUintptrOptionList
	} else {
		acc := NilUintptrOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListList) FlatMapFloat32OptionList(f func(StringList) Float32OptionList) Float32OptionList {
	if m.IsEmpty() {
		return NilFloat32OptionList
	} else {
		acc := NilFloat32OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListList) FlatMapFloat64OptionList(f func(StringList) Float64OptionList) Float64OptionList {
	if m.IsEmpty() {
		return NilFloat64OptionList
	} else {
		acc := NilFloat64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListList) FlatMapRuneOptionList(f func(StringList) RuneOptionList) RuneOptionList {
	if m.IsEmpty() {
		return NilRuneOptionList
	} else {
		acc := NilRuneOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListList) FlatMapStringOptionList(f func(StringList) StringOptionList) StringOptionList {
	if m.IsEmpty() {
		return NilStringOptionList
	} else {
		acc := NilStringOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionList) FlatMapBoolList(f func(BoolOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBoolList
	} else {
		acc := NilBoolList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionList) FlatMapAnyList(f func(BoolOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAnyList
	} else {
		acc := NilAnyList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionList) FlatMapByteList(f func(BoolOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByteList
	} else {
		acc := NilByteList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionList) FlatMapIntList(f func(BoolOption) IntList) IntList {
	if m.IsEmpty() {
		return NilIntList
	} else {
		acc := NilIntList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionList) FlatMapInt32List(f func(BoolOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32List
	} else {
		acc := NilInt32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionList) FlatMapInt64List(f func(BoolOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64List
	} else {
		acc := NilInt64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionList) FlatMapUintList(f func(BoolOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUintList
	} else {
		acc := NilUintList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionList) FlatMapUint64List(f func(BoolOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64List
	} else {
		acc := NilUint64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionList) FlatMapUintptrList(f func(BoolOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptrList
	} else {
		acc := NilUintptrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionList) FlatMapFloat32List(f func(BoolOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32List
	} else {
		acc := NilFloat32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionList) FlatMapFloat64List(f func(BoolOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64List
	} else {
		acc := NilFloat64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionList) FlatMapRuneList(f func(BoolOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRuneList
	} else {
		acc := NilRuneList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionList) FlatMapStringList(f func(BoolOption) StringList) StringList {
	if m.IsEmpty() {
		return NilStringList
	} else {
		acc := NilStringList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionList) FlatMapBoolArrList(f func(BoolOption) BoolArrList) BoolArrList {
	if m.IsEmpty() {
		return NilBoolArrList
	} else {
		acc := NilBoolArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionList) FlatMapAnyArrList(f func(BoolOption) AnyArrList) AnyArrList {
	if m.IsEmpty() {
		return NilAnyArrList
	} else {
		acc := NilAnyArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionList) FlatMapByteArrList(f func(BoolOption) ByteArrList) ByteArrList {
	if m.IsEmpty() {
		return NilByteArrList
	} else {
		acc := NilByteArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionList) FlatMapIntArrList(f func(BoolOption) IntArrList) IntArrList {
	if m.IsEmpty() {
		return NilIntArrList
	} else {
		acc := NilIntArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionList) FlatMapInt32ArrList(f func(BoolOption) Int32ArrList) Int32ArrList {
	if m.IsEmpty() {
		return NilInt32ArrList
	} else {
		acc := NilInt32ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionList) FlatMapInt64ArrList(f func(BoolOption) Int64ArrList) Int64ArrList {
	if m.IsEmpty() {
		return NilInt64ArrList
	} else {
		acc := NilInt64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionList) FlatMapUintArrList(f func(BoolOption) UintArrList) UintArrList {
	if m.IsEmpty() {
		return NilUintArrList
	} else {
		acc := NilUintArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionList) FlatMapUint64ArrList(f func(BoolOption) Uint64ArrList) Uint64ArrList {
	if m.IsEmpty() {
		return NilUint64ArrList
	} else {
		acc := NilUint64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionList) FlatMapUintptrArrList(f func(BoolOption) UintptrArrList) UintptrArrList {
	if m.IsEmpty() {
		return NilUintptrArrList
	} else {
		acc := NilUintptrArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionList) FlatMapFloat32ArrList(f func(BoolOption) Float32ArrList) Float32ArrList {
	if m.IsEmpty() {
		return NilFloat32ArrList
	} else {
		acc := NilFloat32ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionList) FlatMapFloat64ArrList(f func(BoolOption) Float64ArrList) Float64ArrList {
	if m.IsEmpty() {
		return NilFloat64ArrList
	} else {
		acc := NilFloat64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionList) FlatMapRuneArrList(f func(BoolOption) RuneArrList) RuneArrList {
	if m.IsEmpty() {
		return NilRuneArrList
	} else {
		acc := NilRuneArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionList) FlatMapStringArrList(f func(BoolOption) StringArrList) StringArrList {
	if m.IsEmpty() {
		return NilStringArrList
	} else {
		acc := NilStringArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionList) FlatMapBoolListList(f func(BoolOption) BoolListList) BoolListList {
	if m.IsEmpty() {
		return NilBoolListList
	} else {
		acc := NilBoolListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionList) FlatMapAnyListList(f func(BoolOption) AnyListList) AnyListList {
	if m.IsEmpty() {
		return NilAnyListList
	} else {
		acc := NilAnyListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionList) FlatMapByteListList(f func(BoolOption) ByteListList) ByteListList {
	if m.IsEmpty() {
		return NilByteListList
	} else {
		acc := NilByteListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionList) FlatMapIntListList(f func(BoolOption) IntListList) IntListList {
	if m.IsEmpty() {
		return NilIntListList
	} else {
		acc := NilIntListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionList) FlatMapInt32ListList(f func(BoolOption) Int32ListList) Int32ListList {
	if m.IsEmpty() {
		return NilInt32ListList
	} else {
		acc := NilInt32ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionList) FlatMapInt64ListList(f func(BoolOption) Int64ListList) Int64ListList {
	if m.IsEmpty() {
		return NilInt64ListList
	} else {
		acc := NilInt64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionList) FlatMapUintListList(f func(BoolOption) UintListList) UintListList {
	if m.IsEmpty() {
		return NilUintListList
	} else {
		acc := NilUintListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionList) FlatMapUint64ListList(f func(BoolOption) Uint64ListList) Uint64ListList {
	if m.IsEmpty() {
		return NilUint64ListList
	} else {
		acc := NilUint64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionList) FlatMapUintptrListList(f func(BoolOption) UintptrListList) UintptrListList {
	if m.IsEmpty() {
		return NilUintptrListList
	} else {
		acc := NilUintptrListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionList) FlatMapFloat32ListList(f func(BoolOption) Float32ListList) Float32ListList {
	if m.IsEmpty() {
		return NilFloat32ListList
	} else {
		acc := NilFloat32ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionList) FlatMapFloat64ListList(f func(BoolOption) Float64ListList) Float64ListList {
	if m.IsEmpty() {
		return NilFloat64ListList
	} else {
		acc := NilFloat64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionList) FlatMapRuneListList(f func(BoolOption) RuneListList) RuneListList {
	if m.IsEmpty() {
		return NilRuneListList
	} else {
		acc := NilRuneListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionList) FlatMapStringListList(f func(BoolOption) StringListList) StringListList {
	if m.IsEmpty() {
		return NilStringListList
	} else {
		acc := NilStringListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionList) FlatMapBoolOptionList(f func(BoolOption) BoolOptionList) BoolOptionList {
	if m.IsEmpty() {
		return NilBoolOptionList
	} else {
		acc := NilBoolOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionList) FlatMapAnyOptionList(f func(BoolOption) AnyOptionList) AnyOptionList {
	if m.IsEmpty() {
		return NilAnyOptionList
	} else {
		acc := NilAnyOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionList) FlatMapByteOptionList(f func(BoolOption) ByteOptionList) ByteOptionList {
	if m.IsEmpty() {
		return NilByteOptionList
	} else {
		acc := NilByteOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionList) FlatMapIntOptionList(f func(BoolOption) IntOptionList) IntOptionList {
	if m.IsEmpty() {
		return NilIntOptionList
	} else {
		acc := NilIntOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionList) FlatMapInt32OptionList(f func(BoolOption) Int32OptionList) Int32OptionList {
	if m.IsEmpty() {
		return NilInt32OptionList
	} else {
		acc := NilInt32OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionList) FlatMapInt64OptionList(f func(BoolOption) Int64OptionList) Int64OptionList {
	if m.IsEmpty() {
		return NilInt64OptionList
	} else {
		acc := NilInt64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionList) FlatMapUintOptionList(f func(BoolOption) UintOptionList) UintOptionList {
	if m.IsEmpty() {
		return NilUintOptionList
	} else {
		acc := NilUintOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionList) FlatMapUint64OptionList(f func(BoolOption) Uint64OptionList) Uint64OptionList {
	if m.IsEmpty() {
		return NilUint64OptionList
	} else {
		acc := NilUint64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionList) FlatMapUintptrOptionList(f func(BoolOption) UintptrOptionList) UintptrOptionList {
	if m.IsEmpty() {
		return NilUintptrOptionList
	} else {
		acc := NilUintptrOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionList) FlatMapFloat32OptionList(f func(BoolOption) Float32OptionList) Float32OptionList {
	if m.IsEmpty() {
		return NilFloat32OptionList
	} else {
		acc := NilFloat32OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionList) FlatMapFloat64OptionList(f func(BoolOption) Float64OptionList) Float64OptionList {
	if m.IsEmpty() {
		return NilFloat64OptionList
	} else {
		acc := NilFloat64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionList) FlatMapRuneOptionList(f func(BoolOption) RuneOptionList) RuneOptionList {
	if m.IsEmpty() {
		return NilRuneOptionList
	} else {
		acc := NilRuneOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionList) FlatMapStringOptionList(f func(BoolOption) StringOptionList) StringOptionList {
	if m.IsEmpty() {
		return NilStringOptionList
	} else {
		acc := NilStringOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionList) FlatMapBoolList(f func(AnyOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBoolList
	} else {
		acc := NilBoolList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionList) FlatMapAnyList(f func(AnyOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAnyList
	} else {
		acc := NilAnyList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionList) FlatMapByteList(f func(AnyOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByteList
	} else {
		acc := NilByteList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionList) FlatMapIntList(f func(AnyOption) IntList) IntList {
	if m.IsEmpty() {
		return NilIntList
	} else {
		acc := NilIntList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionList) FlatMapInt32List(f func(AnyOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32List
	} else {
		acc := NilInt32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionList) FlatMapInt64List(f func(AnyOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64List
	} else {
		acc := NilInt64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionList) FlatMapUintList(f func(AnyOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUintList
	} else {
		acc := NilUintList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionList) FlatMapUint64List(f func(AnyOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64List
	} else {
		acc := NilUint64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionList) FlatMapUintptrList(f func(AnyOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptrList
	} else {
		acc := NilUintptrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionList) FlatMapFloat32List(f func(AnyOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32List
	} else {
		acc := NilFloat32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionList) FlatMapFloat64List(f func(AnyOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64List
	} else {
		acc := NilFloat64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionList) FlatMapRuneList(f func(AnyOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRuneList
	} else {
		acc := NilRuneList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionList) FlatMapStringList(f func(AnyOption) StringList) StringList {
	if m.IsEmpty() {
		return NilStringList
	} else {
		acc := NilStringList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionList) FlatMapBoolArrList(f func(AnyOption) BoolArrList) BoolArrList {
	if m.IsEmpty() {
		return NilBoolArrList
	} else {
		acc := NilBoolArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionList) FlatMapAnyArrList(f func(AnyOption) AnyArrList) AnyArrList {
	if m.IsEmpty() {
		return NilAnyArrList
	} else {
		acc := NilAnyArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionList) FlatMapByteArrList(f func(AnyOption) ByteArrList) ByteArrList {
	if m.IsEmpty() {
		return NilByteArrList
	} else {
		acc := NilByteArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionList) FlatMapIntArrList(f func(AnyOption) IntArrList) IntArrList {
	if m.IsEmpty() {
		return NilIntArrList
	} else {
		acc := NilIntArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionList) FlatMapInt32ArrList(f func(AnyOption) Int32ArrList) Int32ArrList {
	if m.IsEmpty() {
		return NilInt32ArrList
	} else {
		acc := NilInt32ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionList) FlatMapInt64ArrList(f func(AnyOption) Int64ArrList) Int64ArrList {
	if m.IsEmpty() {
		return NilInt64ArrList
	} else {
		acc := NilInt64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionList) FlatMapUintArrList(f func(AnyOption) UintArrList) UintArrList {
	if m.IsEmpty() {
		return NilUintArrList
	} else {
		acc := NilUintArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionList) FlatMapUint64ArrList(f func(AnyOption) Uint64ArrList) Uint64ArrList {
	if m.IsEmpty() {
		return NilUint64ArrList
	} else {
		acc := NilUint64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionList) FlatMapUintptrArrList(f func(AnyOption) UintptrArrList) UintptrArrList {
	if m.IsEmpty() {
		return NilUintptrArrList
	} else {
		acc := NilUintptrArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionList) FlatMapFloat32ArrList(f func(AnyOption) Float32ArrList) Float32ArrList {
	if m.IsEmpty() {
		return NilFloat32ArrList
	} else {
		acc := NilFloat32ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionList) FlatMapFloat64ArrList(f func(AnyOption) Float64ArrList) Float64ArrList {
	if m.IsEmpty() {
		return NilFloat64ArrList
	} else {
		acc := NilFloat64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionList) FlatMapRuneArrList(f func(AnyOption) RuneArrList) RuneArrList {
	if m.IsEmpty() {
		return NilRuneArrList
	} else {
		acc := NilRuneArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionList) FlatMapStringArrList(f func(AnyOption) StringArrList) StringArrList {
	if m.IsEmpty() {
		return NilStringArrList
	} else {
		acc := NilStringArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionList) FlatMapBoolListList(f func(AnyOption) BoolListList) BoolListList {
	if m.IsEmpty() {
		return NilBoolListList
	} else {
		acc := NilBoolListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionList) FlatMapAnyListList(f func(AnyOption) AnyListList) AnyListList {
	if m.IsEmpty() {
		return NilAnyListList
	} else {
		acc := NilAnyListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionList) FlatMapByteListList(f func(AnyOption) ByteListList) ByteListList {
	if m.IsEmpty() {
		return NilByteListList
	} else {
		acc := NilByteListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionList) FlatMapIntListList(f func(AnyOption) IntListList) IntListList {
	if m.IsEmpty() {
		return NilIntListList
	} else {
		acc := NilIntListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionList) FlatMapInt32ListList(f func(AnyOption) Int32ListList) Int32ListList {
	if m.IsEmpty() {
		return NilInt32ListList
	} else {
		acc := NilInt32ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionList) FlatMapInt64ListList(f func(AnyOption) Int64ListList) Int64ListList {
	if m.IsEmpty() {
		return NilInt64ListList
	} else {
		acc := NilInt64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionList) FlatMapUintListList(f func(AnyOption) UintListList) UintListList {
	if m.IsEmpty() {
		return NilUintListList
	} else {
		acc := NilUintListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionList) FlatMapUint64ListList(f func(AnyOption) Uint64ListList) Uint64ListList {
	if m.IsEmpty() {
		return NilUint64ListList
	} else {
		acc := NilUint64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionList) FlatMapUintptrListList(f func(AnyOption) UintptrListList) UintptrListList {
	if m.IsEmpty() {
		return NilUintptrListList
	} else {
		acc := NilUintptrListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionList) FlatMapFloat32ListList(f func(AnyOption) Float32ListList) Float32ListList {
	if m.IsEmpty() {
		return NilFloat32ListList
	} else {
		acc := NilFloat32ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionList) FlatMapFloat64ListList(f func(AnyOption) Float64ListList) Float64ListList {
	if m.IsEmpty() {
		return NilFloat64ListList
	} else {
		acc := NilFloat64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionList) FlatMapRuneListList(f func(AnyOption) RuneListList) RuneListList {
	if m.IsEmpty() {
		return NilRuneListList
	} else {
		acc := NilRuneListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionList) FlatMapStringListList(f func(AnyOption) StringListList) StringListList {
	if m.IsEmpty() {
		return NilStringListList
	} else {
		acc := NilStringListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionList) FlatMapBoolOptionList(f func(AnyOption) BoolOptionList) BoolOptionList {
	if m.IsEmpty() {
		return NilBoolOptionList
	} else {
		acc := NilBoolOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionList) FlatMapAnyOptionList(f func(AnyOption) AnyOptionList) AnyOptionList {
	if m.IsEmpty() {
		return NilAnyOptionList
	} else {
		acc := NilAnyOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionList) FlatMapByteOptionList(f func(AnyOption) ByteOptionList) ByteOptionList {
	if m.IsEmpty() {
		return NilByteOptionList
	} else {
		acc := NilByteOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionList) FlatMapIntOptionList(f func(AnyOption) IntOptionList) IntOptionList {
	if m.IsEmpty() {
		return NilIntOptionList
	} else {
		acc := NilIntOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionList) FlatMapInt32OptionList(f func(AnyOption) Int32OptionList) Int32OptionList {
	if m.IsEmpty() {
		return NilInt32OptionList
	} else {
		acc := NilInt32OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionList) FlatMapInt64OptionList(f func(AnyOption) Int64OptionList) Int64OptionList {
	if m.IsEmpty() {
		return NilInt64OptionList
	} else {
		acc := NilInt64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionList) FlatMapUintOptionList(f func(AnyOption) UintOptionList) UintOptionList {
	if m.IsEmpty() {
		return NilUintOptionList
	} else {
		acc := NilUintOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionList) FlatMapUint64OptionList(f func(AnyOption) Uint64OptionList) Uint64OptionList {
	if m.IsEmpty() {
		return NilUint64OptionList
	} else {
		acc := NilUint64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionList) FlatMapUintptrOptionList(f func(AnyOption) UintptrOptionList) UintptrOptionList {
	if m.IsEmpty() {
		return NilUintptrOptionList
	} else {
		acc := NilUintptrOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionList) FlatMapFloat32OptionList(f func(AnyOption) Float32OptionList) Float32OptionList {
	if m.IsEmpty() {
		return NilFloat32OptionList
	} else {
		acc := NilFloat32OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionList) FlatMapFloat64OptionList(f func(AnyOption) Float64OptionList) Float64OptionList {
	if m.IsEmpty() {
		return NilFloat64OptionList
	} else {
		acc := NilFloat64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionList) FlatMapRuneOptionList(f func(AnyOption) RuneOptionList) RuneOptionList {
	if m.IsEmpty() {
		return NilRuneOptionList
	} else {
		acc := NilRuneOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionList) FlatMapStringOptionList(f func(AnyOption) StringOptionList) StringOptionList {
	if m.IsEmpty() {
		return NilStringOptionList
	} else {
		acc := NilStringOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionList) FlatMapBoolList(f func(ByteOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBoolList
	} else {
		acc := NilBoolList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionList) FlatMapAnyList(f func(ByteOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAnyList
	} else {
		acc := NilAnyList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionList) FlatMapByteList(f func(ByteOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByteList
	} else {
		acc := NilByteList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionList) FlatMapIntList(f func(ByteOption) IntList) IntList {
	if m.IsEmpty() {
		return NilIntList
	} else {
		acc := NilIntList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionList) FlatMapInt32List(f func(ByteOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32List
	} else {
		acc := NilInt32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionList) FlatMapInt64List(f func(ByteOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64List
	} else {
		acc := NilInt64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionList) FlatMapUintList(f func(ByteOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUintList
	} else {
		acc := NilUintList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionList) FlatMapUint64List(f func(ByteOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64List
	} else {
		acc := NilUint64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionList) FlatMapUintptrList(f func(ByteOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptrList
	} else {
		acc := NilUintptrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionList) FlatMapFloat32List(f func(ByteOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32List
	} else {
		acc := NilFloat32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionList) FlatMapFloat64List(f func(ByteOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64List
	} else {
		acc := NilFloat64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionList) FlatMapRuneList(f func(ByteOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRuneList
	} else {
		acc := NilRuneList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionList) FlatMapStringList(f func(ByteOption) StringList) StringList {
	if m.IsEmpty() {
		return NilStringList
	} else {
		acc := NilStringList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionList) FlatMapBoolArrList(f func(ByteOption) BoolArrList) BoolArrList {
	if m.IsEmpty() {
		return NilBoolArrList
	} else {
		acc := NilBoolArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionList) FlatMapAnyArrList(f func(ByteOption) AnyArrList) AnyArrList {
	if m.IsEmpty() {
		return NilAnyArrList
	} else {
		acc := NilAnyArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionList) FlatMapByteArrList(f func(ByteOption) ByteArrList) ByteArrList {
	if m.IsEmpty() {
		return NilByteArrList
	} else {
		acc := NilByteArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionList) FlatMapIntArrList(f func(ByteOption) IntArrList) IntArrList {
	if m.IsEmpty() {
		return NilIntArrList
	} else {
		acc := NilIntArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionList) FlatMapInt32ArrList(f func(ByteOption) Int32ArrList) Int32ArrList {
	if m.IsEmpty() {
		return NilInt32ArrList
	} else {
		acc := NilInt32ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionList) FlatMapInt64ArrList(f func(ByteOption) Int64ArrList) Int64ArrList {
	if m.IsEmpty() {
		return NilInt64ArrList
	} else {
		acc := NilInt64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionList) FlatMapUintArrList(f func(ByteOption) UintArrList) UintArrList {
	if m.IsEmpty() {
		return NilUintArrList
	} else {
		acc := NilUintArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionList) FlatMapUint64ArrList(f func(ByteOption) Uint64ArrList) Uint64ArrList {
	if m.IsEmpty() {
		return NilUint64ArrList
	} else {
		acc := NilUint64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionList) FlatMapUintptrArrList(f func(ByteOption) UintptrArrList) UintptrArrList {
	if m.IsEmpty() {
		return NilUintptrArrList
	} else {
		acc := NilUintptrArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionList) FlatMapFloat32ArrList(f func(ByteOption) Float32ArrList) Float32ArrList {
	if m.IsEmpty() {
		return NilFloat32ArrList
	} else {
		acc := NilFloat32ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionList) FlatMapFloat64ArrList(f func(ByteOption) Float64ArrList) Float64ArrList {
	if m.IsEmpty() {
		return NilFloat64ArrList
	} else {
		acc := NilFloat64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionList) FlatMapRuneArrList(f func(ByteOption) RuneArrList) RuneArrList {
	if m.IsEmpty() {
		return NilRuneArrList
	} else {
		acc := NilRuneArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionList) FlatMapStringArrList(f func(ByteOption) StringArrList) StringArrList {
	if m.IsEmpty() {
		return NilStringArrList
	} else {
		acc := NilStringArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionList) FlatMapBoolListList(f func(ByteOption) BoolListList) BoolListList {
	if m.IsEmpty() {
		return NilBoolListList
	} else {
		acc := NilBoolListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionList) FlatMapAnyListList(f func(ByteOption) AnyListList) AnyListList {
	if m.IsEmpty() {
		return NilAnyListList
	} else {
		acc := NilAnyListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionList) FlatMapByteListList(f func(ByteOption) ByteListList) ByteListList {
	if m.IsEmpty() {
		return NilByteListList
	} else {
		acc := NilByteListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionList) FlatMapIntListList(f func(ByteOption) IntListList) IntListList {
	if m.IsEmpty() {
		return NilIntListList
	} else {
		acc := NilIntListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionList) FlatMapInt32ListList(f func(ByteOption) Int32ListList) Int32ListList {
	if m.IsEmpty() {
		return NilInt32ListList
	} else {
		acc := NilInt32ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionList) FlatMapInt64ListList(f func(ByteOption) Int64ListList) Int64ListList {
	if m.IsEmpty() {
		return NilInt64ListList
	} else {
		acc := NilInt64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionList) FlatMapUintListList(f func(ByteOption) UintListList) UintListList {
	if m.IsEmpty() {
		return NilUintListList
	} else {
		acc := NilUintListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionList) FlatMapUint64ListList(f func(ByteOption) Uint64ListList) Uint64ListList {
	if m.IsEmpty() {
		return NilUint64ListList
	} else {
		acc := NilUint64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionList) FlatMapUintptrListList(f func(ByteOption) UintptrListList) UintptrListList {
	if m.IsEmpty() {
		return NilUintptrListList
	} else {
		acc := NilUintptrListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionList) FlatMapFloat32ListList(f func(ByteOption) Float32ListList) Float32ListList {
	if m.IsEmpty() {
		return NilFloat32ListList
	} else {
		acc := NilFloat32ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionList) FlatMapFloat64ListList(f func(ByteOption) Float64ListList) Float64ListList {
	if m.IsEmpty() {
		return NilFloat64ListList
	} else {
		acc := NilFloat64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionList) FlatMapRuneListList(f func(ByteOption) RuneListList) RuneListList {
	if m.IsEmpty() {
		return NilRuneListList
	} else {
		acc := NilRuneListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionList) FlatMapStringListList(f func(ByteOption) StringListList) StringListList {
	if m.IsEmpty() {
		return NilStringListList
	} else {
		acc := NilStringListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionList) FlatMapBoolOptionList(f func(ByteOption) BoolOptionList) BoolOptionList {
	if m.IsEmpty() {
		return NilBoolOptionList
	} else {
		acc := NilBoolOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionList) FlatMapAnyOptionList(f func(ByteOption) AnyOptionList) AnyOptionList {
	if m.IsEmpty() {
		return NilAnyOptionList
	} else {
		acc := NilAnyOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionList) FlatMapByteOptionList(f func(ByteOption) ByteOptionList) ByteOptionList {
	if m.IsEmpty() {
		return NilByteOptionList
	} else {
		acc := NilByteOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionList) FlatMapIntOptionList(f func(ByteOption) IntOptionList) IntOptionList {
	if m.IsEmpty() {
		return NilIntOptionList
	} else {
		acc := NilIntOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionList) FlatMapInt32OptionList(f func(ByteOption) Int32OptionList) Int32OptionList {
	if m.IsEmpty() {
		return NilInt32OptionList
	} else {
		acc := NilInt32OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionList) FlatMapInt64OptionList(f func(ByteOption) Int64OptionList) Int64OptionList {
	if m.IsEmpty() {
		return NilInt64OptionList
	} else {
		acc := NilInt64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionList) FlatMapUintOptionList(f func(ByteOption) UintOptionList) UintOptionList {
	if m.IsEmpty() {
		return NilUintOptionList
	} else {
		acc := NilUintOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionList) FlatMapUint64OptionList(f func(ByteOption) Uint64OptionList) Uint64OptionList {
	if m.IsEmpty() {
		return NilUint64OptionList
	} else {
		acc := NilUint64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionList) FlatMapUintptrOptionList(f func(ByteOption) UintptrOptionList) UintptrOptionList {
	if m.IsEmpty() {
		return NilUintptrOptionList
	} else {
		acc := NilUintptrOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionList) FlatMapFloat32OptionList(f func(ByteOption) Float32OptionList) Float32OptionList {
	if m.IsEmpty() {
		return NilFloat32OptionList
	} else {
		acc := NilFloat32OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionList) FlatMapFloat64OptionList(f func(ByteOption) Float64OptionList) Float64OptionList {
	if m.IsEmpty() {
		return NilFloat64OptionList
	} else {
		acc := NilFloat64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionList) FlatMapRuneOptionList(f func(ByteOption) RuneOptionList) RuneOptionList {
	if m.IsEmpty() {
		return NilRuneOptionList
	} else {
		acc := NilRuneOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionList) FlatMapStringOptionList(f func(ByteOption) StringOptionList) StringOptionList {
	if m.IsEmpty() {
		return NilStringOptionList
	} else {
		acc := NilStringOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionList) FlatMapBoolList(f func(IntOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBoolList
	} else {
		acc := NilBoolList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionList) FlatMapAnyList(f func(IntOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAnyList
	} else {
		acc := NilAnyList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionList) FlatMapByteList(f func(IntOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByteList
	} else {
		acc := NilByteList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionList) FlatMapIntList(f func(IntOption) IntList) IntList {
	if m.IsEmpty() {
		return NilIntList
	} else {
		acc := NilIntList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionList) FlatMapInt32List(f func(IntOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32List
	} else {
		acc := NilInt32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionList) FlatMapInt64List(f func(IntOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64List
	} else {
		acc := NilInt64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionList) FlatMapUintList(f func(IntOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUintList
	} else {
		acc := NilUintList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionList) FlatMapUint64List(f func(IntOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64List
	} else {
		acc := NilUint64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionList) FlatMapUintptrList(f func(IntOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptrList
	} else {
		acc := NilUintptrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionList) FlatMapFloat32List(f func(IntOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32List
	} else {
		acc := NilFloat32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionList) FlatMapFloat64List(f func(IntOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64List
	} else {
		acc := NilFloat64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionList) FlatMapRuneList(f func(IntOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRuneList
	} else {
		acc := NilRuneList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionList) FlatMapStringList(f func(IntOption) StringList) StringList {
	if m.IsEmpty() {
		return NilStringList
	} else {
		acc := NilStringList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionList) FlatMapBoolArrList(f func(IntOption) BoolArrList) BoolArrList {
	if m.IsEmpty() {
		return NilBoolArrList
	} else {
		acc := NilBoolArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionList) FlatMapAnyArrList(f func(IntOption) AnyArrList) AnyArrList {
	if m.IsEmpty() {
		return NilAnyArrList
	} else {
		acc := NilAnyArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionList) FlatMapByteArrList(f func(IntOption) ByteArrList) ByteArrList {
	if m.IsEmpty() {
		return NilByteArrList
	} else {
		acc := NilByteArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionList) FlatMapIntArrList(f func(IntOption) IntArrList) IntArrList {
	if m.IsEmpty() {
		return NilIntArrList
	} else {
		acc := NilIntArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionList) FlatMapInt32ArrList(f func(IntOption) Int32ArrList) Int32ArrList {
	if m.IsEmpty() {
		return NilInt32ArrList
	} else {
		acc := NilInt32ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionList) FlatMapInt64ArrList(f func(IntOption) Int64ArrList) Int64ArrList {
	if m.IsEmpty() {
		return NilInt64ArrList
	} else {
		acc := NilInt64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionList) FlatMapUintArrList(f func(IntOption) UintArrList) UintArrList {
	if m.IsEmpty() {
		return NilUintArrList
	} else {
		acc := NilUintArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionList) FlatMapUint64ArrList(f func(IntOption) Uint64ArrList) Uint64ArrList {
	if m.IsEmpty() {
		return NilUint64ArrList
	} else {
		acc := NilUint64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionList) FlatMapUintptrArrList(f func(IntOption) UintptrArrList) UintptrArrList {
	if m.IsEmpty() {
		return NilUintptrArrList
	} else {
		acc := NilUintptrArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionList) FlatMapFloat32ArrList(f func(IntOption) Float32ArrList) Float32ArrList {
	if m.IsEmpty() {
		return NilFloat32ArrList
	} else {
		acc := NilFloat32ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionList) FlatMapFloat64ArrList(f func(IntOption) Float64ArrList) Float64ArrList {
	if m.IsEmpty() {
		return NilFloat64ArrList
	} else {
		acc := NilFloat64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionList) FlatMapRuneArrList(f func(IntOption) RuneArrList) RuneArrList {
	if m.IsEmpty() {
		return NilRuneArrList
	} else {
		acc := NilRuneArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionList) FlatMapStringArrList(f func(IntOption) StringArrList) StringArrList {
	if m.IsEmpty() {
		return NilStringArrList
	} else {
		acc := NilStringArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionList) FlatMapBoolListList(f func(IntOption) BoolListList) BoolListList {
	if m.IsEmpty() {
		return NilBoolListList
	} else {
		acc := NilBoolListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionList) FlatMapAnyListList(f func(IntOption) AnyListList) AnyListList {
	if m.IsEmpty() {
		return NilAnyListList
	} else {
		acc := NilAnyListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionList) FlatMapByteListList(f func(IntOption) ByteListList) ByteListList {
	if m.IsEmpty() {
		return NilByteListList
	} else {
		acc := NilByteListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionList) FlatMapIntListList(f func(IntOption) IntListList) IntListList {
	if m.IsEmpty() {
		return NilIntListList
	} else {
		acc := NilIntListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionList) FlatMapInt32ListList(f func(IntOption) Int32ListList) Int32ListList {
	if m.IsEmpty() {
		return NilInt32ListList
	} else {
		acc := NilInt32ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionList) FlatMapInt64ListList(f func(IntOption) Int64ListList) Int64ListList {
	if m.IsEmpty() {
		return NilInt64ListList
	} else {
		acc := NilInt64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionList) FlatMapUintListList(f func(IntOption) UintListList) UintListList {
	if m.IsEmpty() {
		return NilUintListList
	} else {
		acc := NilUintListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionList) FlatMapUint64ListList(f func(IntOption) Uint64ListList) Uint64ListList {
	if m.IsEmpty() {
		return NilUint64ListList
	} else {
		acc := NilUint64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionList) FlatMapUintptrListList(f func(IntOption) UintptrListList) UintptrListList {
	if m.IsEmpty() {
		return NilUintptrListList
	} else {
		acc := NilUintptrListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionList) FlatMapFloat32ListList(f func(IntOption) Float32ListList) Float32ListList {
	if m.IsEmpty() {
		return NilFloat32ListList
	} else {
		acc := NilFloat32ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionList) FlatMapFloat64ListList(f func(IntOption) Float64ListList) Float64ListList {
	if m.IsEmpty() {
		return NilFloat64ListList
	} else {
		acc := NilFloat64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionList) FlatMapRuneListList(f func(IntOption) RuneListList) RuneListList {
	if m.IsEmpty() {
		return NilRuneListList
	} else {
		acc := NilRuneListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionList) FlatMapStringListList(f func(IntOption) StringListList) StringListList {
	if m.IsEmpty() {
		return NilStringListList
	} else {
		acc := NilStringListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionList) FlatMapBoolOptionList(f func(IntOption) BoolOptionList) BoolOptionList {
	if m.IsEmpty() {
		return NilBoolOptionList
	} else {
		acc := NilBoolOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionList) FlatMapAnyOptionList(f func(IntOption) AnyOptionList) AnyOptionList {
	if m.IsEmpty() {
		return NilAnyOptionList
	} else {
		acc := NilAnyOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionList) FlatMapByteOptionList(f func(IntOption) ByteOptionList) ByteOptionList {
	if m.IsEmpty() {
		return NilByteOptionList
	} else {
		acc := NilByteOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionList) FlatMapIntOptionList(f func(IntOption) IntOptionList) IntOptionList {
	if m.IsEmpty() {
		return NilIntOptionList
	} else {
		acc := NilIntOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionList) FlatMapInt32OptionList(f func(IntOption) Int32OptionList) Int32OptionList {
	if m.IsEmpty() {
		return NilInt32OptionList
	} else {
		acc := NilInt32OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionList) FlatMapInt64OptionList(f func(IntOption) Int64OptionList) Int64OptionList {
	if m.IsEmpty() {
		return NilInt64OptionList
	} else {
		acc := NilInt64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionList) FlatMapUintOptionList(f func(IntOption) UintOptionList) UintOptionList {
	if m.IsEmpty() {
		return NilUintOptionList
	} else {
		acc := NilUintOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionList) FlatMapUint64OptionList(f func(IntOption) Uint64OptionList) Uint64OptionList {
	if m.IsEmpty() {
		return NilUint64OptionList
	} else {
		acc := NilUint64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionList) FlatMapUintptrOptionList(f func(IntOption) UintptrOptionList) UintptrOptionList {
	if m.IsEmpty() {
		return NilUintptrOptionList
	} else {
		acc := NilUintptrOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionList) FlatMapFloat32OptionList(f func(IntOption) Float32OptionList) Float32OptionList {
	if m.IsEmpty() {
		return NilFloat32OptionList
	} else {
		acc := NilFloat32OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionList) FlatMapFloat64OptionList(f func(IntOption) Float64OptionList) Float64OptionList {
	if m.IsEmpty() {
		return NilFloat64OptionList
	} else {
		acc := NilFloat64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionList) FlatMapRuneOptionList(f func(IntOption) RuneOptionList) RuneOptionList {
	if m.IsEmpty() {
		return NilRuneOptionList
	} else {
		acc := NilRuneOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionList) FlatMapStringOptionList(f func(IntOption) StringOptionList) StringOptionList {
	if m.IsEmpty() {
		return NilStringOptionList
	} else {
		acc := NilStringOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionList) FlatMapBoolList(f func(Int32Option) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBoolList
	} else {
		acc := NilBoolList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionList) FlatMapAnyList(f func(Int32Option) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAnyList
	} else {
		acc := NilAnyList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionList) FlatMapByteList(f func(Int32Option) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByteList
	} else {
		acc := NilByteList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionList) FlatMapIntList(f func(Int32Option) IntList) IntList {
	if m.IsEmpty() {
		return NilIntList
	} else {
		acc := NilIntList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionList) FlatMapInt32List(f func(Int32Option) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32List
	} else {
		acc := NilInt32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionList) FlatMapInt64List(f func(Int32Option) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64List
	} else {
		acc := NilInt64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionList) FlatMapUintList(f func(Int32Option) UintList) UintList {
	if m.IsEmpty() {
		return NilUintList
	} else {
		acc := NilUintList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionList) FlatMapUint64List(f func(Int32Option) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64List
	} else {
		acc := NilUint64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionList) FlatMapUintptrList(f func(Int32Option) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptrList
	} else {
		acc := NilUintptrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionList) FlatMapFloat32List(f func(Int32Option) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32List
	} else {
		acc := NilFloat32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionList) FlatMapFloat64List(f func(Int32Option) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64List
	} else {
		acc := NilFloat64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionList) FlatMapRuneList(f func(Int32Option) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRuneList
	} else {
		acc := NilRuneList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionList) FlatMapStringList(f func(Int32Option) StringList) StringList {
	if m.IsEmpty() {
		return NilStringList
	} else {
		acc := NilStringList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionList) FlatMapBoolArrList(f func(Int32Option) BoolArrList) BoolArrList {
	if m.IsEmpty() {
		return NilBoolArrList
	} else {
		acc := NilBoolArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionList) FlatMapAnyArrList(f func(Int32Option) AnyArrList) AnyArrList {
	if m.IsEmpty() {
		return NilAnyArrList
	} else {
		acc := NilAnyArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionList) FlatMapByteArrList(f func(Int32Option) ByteArrList) ByteArrList {
	if m.IsEmpty() {
		return NilByteArrList
	} else {
		acc := NilByteArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionList) FlatMapIntArrList(f func(Int32Option) IntArrList) IntArrList {
	if m.IsEmpty() {
		return NilIntArrList
	} else {
		acc := NilIntArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionList) FlatMapInt32ArrList(f func(Int32Option) Int32ArrList) Int32ArrList {
	if m.IsEmpty() {
		return NilInt32ArrList
	} else {
		acc := NilInt32ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionList) FlatMapInt64ArrList(f func(Int32Option) Int64ArrList) Int64ArrList {
	if m.IsEmpty() {
		return NilInt64ArrList
	} else {
		acc := NilInt64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionList) FlatMapUintArrList(f func(Int32Option) UintArrList) UintArrList {
	if m.IsEmpty() {
		return NilUintArrList
	} else {
		acc := NilUintArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionList) FlatMapUint64ArrList(f func(Int32Option) Uint64ArrList) Uint64ArrList {
	if m.IsEmpty() {
		return NilUint64ArrList
	} else {
		acc := NilUint64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionList) FlatMapUintptrArrList(f func(Int32Option) UintptrArrList) UintptrArrList {
	if m.IsEmpty() {
		return NilUintptrArrList
	} else {
		acc := NilUintptrArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionList) FlatMapFloat32ArrList(f func(Int32Option) Float32ArrList) Float32ArrList {
	if m.IsEmpty() {
		return NilFloat32ArrList
	} else {
		acc := NilFloat32ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionList) FlatMapFloat64ArrList(f func(Int32Option) Float64ArrList) Float64ArrList {
	if m.IsEmpty() {
		return NilFloat64ArrList
	} else {
		acc := NilFloat64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionList) FlatMapRuneArrList(f func(Int32Option) RuneArrList) RuneArrList {
	if m.IsEmpty() {
		return NilRuneArrList
	} else {
		acc := NilRuneArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionList) FlatMapStringArrList(f func(Int32Option) StringArrList) StringArrList {
	if m.IsEmpty() {
		return NilStringArrList
	} else {
		acc := NilStringArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionList) FlatMapBoolListList(f func(Int32Option) BoolListList) BoolListList {
	if m.IsEmpty() {
		return NilBoolListList
	} else {
		acc := NilBoolListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionList) FlatMapAnyListList(f func(Int32Option) AnyListList) AnyListList {
	if m.IsEmpty() {
		return NilAnyListList
	} else {
		acc := NilAnyListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionList) FlatMapByteListList(f func(Int32Option) ByteListList) ByteListList {
	if m.IsEmpty() {
		return NilByteListList
	} else {
		acc := NilByteListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionList) FlatMapIntListList(f func(Int32Option) IntListList) IntListList {
	if m.IsEmpty() {
		return NilIntListList
	} else {
		acc := NilIntListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionList) FlatMapInt32ListList(f func(Int32Option) Int32ListList) Int32ListList {
	if m.IsEmpty() {
		return NilInt32ListList
	} else {
		acc := NilInt32ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionList) FlatMapInt64ListList(f func(Int32Option) Int64ListList) Int64ListList {
	if m.IsEmpty() {
		return NilInt64ListList
	} else {
		acc := NilInt64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionList) FlatMapUintListList(f func(Int32Option) UintListList) UintListList {
	if m.IsEmpty() {
		return NilUintListList
	} else {
		acc := NilUintListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionList) FlatMapUint64ListList(f func(Int32Option) Uint64ListList) Uint64ListList {
	if m.IsEmpty() {
		return NilUint64ListList
	} else {
		acc := NilUint64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionList) FlatMapUintptrListList(f func(Int32Option) UintptrListList) UintptrListList {
	if m.IsEmpty() {
		return NilUintptrListList
	} else {
		acc := NilUintptrListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionList) FlatMapFloat32ListList(f func(Int32Option) Float32ListList) Float32ListList {
	if m.IsEmpty() {
		return NilFloat32ListList
	} else {
		acc := NilFloat32ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionList) FlatMapFloat64ListList(f func(Int32Option) Float64ListList) Float64ListList {
	if m.IsEmpty() {
		return NilFloat64ListList
	} else {
		acc := NilFloat64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionList) FlatMapRuneListList(f func(Int32Option) RuneListList) RuneListList {
	if m.IsEmpty() {
		return NilRuneListList
	} else {
		acc := NilRuneListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionList) FlatMapStringListList(f func(Int32Option) StringListList) StringListList {
	if m.IsEmpty() {
		return NilStringListList
	} else {
		acc := NilStringListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionList) FlatMapBoolOptionList(f func(Int32Option) BoolOptionList) BoolOptionList {
	if m.IsEmpty() {
		return NilBoolOptionList
	} else {
		acc := NilBoolOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionList) FlatMapAnyOptionList(f func(Int32Option) AnyOptionList) AnyOptionList {
	if m.IsEmpty() {
		return NilAnyOptionList
	} else {
		acc := NilAnyOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionList) FlatMapByteOptionList(f func(Int32Option) ByteOptionList) ByteOptionList {
	if m.IsEmpty() {
		return NilByteOptionList
	} else {
		acc := NilByteOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionList) FlatMapIntOptionList(f func(Int32Option) IntOptionList) IntOptionList {
	if m.IsEmpty() {
		return NilIntOptionList
	} else {
		acc := NilIntOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionList) FlatMapInt32OptionList(f func(Int32Option) Int32OptionList) Int32OptionList {
	if m.IsEmpty() {
		return NilInt32OptionList
	} else {
		acc := NilInt32OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionList) FlatMapInt64OptionList(f func(Int32Option) Int64OptionList) Int64OptionList {
	if m.IsEmpty() {
		return NilInt64OptionList
	} else {
		acc := NilInt64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionList) FlatMapUintOptionList(f func(Int32Option) UintOptionList) UintOptionList {
	if m.IsEmpty() {
		return NilUintOptionList
	} else {
		acc := NilUintOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionList) FlatMapUint64OptionList(f func(Int32Option) Uint64OptionList) Uint64OptionList {
	if m.IsEmpty() {
		return NilUint64OptionList
	} else {
		acc := NilUint64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionList) FlatMapUintptrOptionList(f func(Int32Option) UintptrOptionList) UintptrOptionList {
	if m.IsEmpty() {
		return NilUintptrOptionList
	} else {
		acc := NilUintptrOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionList) FlatMapFloat32OptionList(f func(Int32Option) Float32OptionList) Float32OptionList {
	if m.IsEmpty() {
		return NilFloat32OptionList
	} else {
		acc := NilFloat32OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionList) FlatMapFloat64OptionList(f func(Int32Option) Float64OptionList) Float64OptionList {
	if m.IsEmpty() {
		return NilFloat64OptionList
	} else {
		acc := NilFloat64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionList) FlatMapRuneOptionList(f func(Int32Option) RuneOptionList) RuneOptionList {
	if m.IsEmpty() {
		return NilRuneOptionList
	} else {
		acc := NilRuneOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionList) FlatMapStringOptionList(f func(Int32Option) StringOptionList) StringOptionList {
	if m.IsEmpty() {
		return NilStringOptionList
	} else {
		acc := NilStringOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionList) FlatMapBoolList(f func(Int64Option) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBoolList
	} else {
		acc := NilBoolList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionList) FlatMapAnyList(f func(Int64Option) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAnyList
	} else {
		acc := NilAnyList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionList) FlatMapByteList(f func(Int64Option) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByteList
	} else {
		acc := NilByteList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionList) FlatMapIntList(f func(Int64Option) IntList) IntList {
	if m.IsEmpty() {
		return NilIntList
	} else {
		acc := NilIntList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionList) FlatMapInt32List(f func(Int64Option) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32List
	} else {
		acc := NilInt32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionList) FlatMapInt64List(f func(Int64Option) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64List
	} else {
		acc := NilInt64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionList) FlatMapUintList(f func(Int64Option) UintList) UintList {
	if m.IsEmpty() {
		return NilUintList
	} else {
		acc := NilUintList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionList) FlatMapUint64List(f func(Int64Option) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64List
	} else {
		acc := NilUint64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionList) FlatMapUintptrList(f func(Int64Option) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptrList
	} else {
		acc := NilUintptrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionList) FlatMapFloat32List(f func(Int64Option) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32List
	} else {
		acc := NilFloat32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionList) FlatMapFloat64List(f func(Int64Option) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64List
	} else {
		acc := NilFloat64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionList) FlatMapRuneList(f func(Int64Option) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRuneList
	} else {
		acc := NilRuneList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionList) FlatMapStringList(f func(Int64Option) StringList) StringList {
	if m.IsEmpty() {
		return NilStringList
	} else {
		acc := NilStringList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionList) FlatMapBoolArrList(f func(Int64Option) BoolArrList) BoolArrList {
	if m.IsEmpty() {
		return NilBoolArrList
	} else {
		acc := NilBoolArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionList) FlatMapAnyArrList(f func(Int64Option) AnyArrList) AnyArrList {
	if m.IsEmpty() {
		return NilAnyArrList
	} else {
		acc := NilAnyArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionList) FlatMapByteArrList(f func(Int64Option) ByteArrList) ByteArrList {
	if m.IsEmpty() {
		return NilByteArrList
	} else {
		acc := NilByteArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionList) FlatMapIntArrList(f func(Int64Option) IntArrList) IntArrList {
	if m.IsEmpty() {
		return NilIntArrList
	} else {
		acc := NilIntArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionList) FlatMapInt32ArrList(f func(Int64Option) Int32ArrList) Int32ArrList {
	if m.IsEmpty() {
		return NilInt32ArrList
	} else {
		acc := NilInt32ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionList) FlatMapInt64ArrList(f func(Int64Option) Int64ArrList) Int64ArrList {
	if m.IsEmpty() {
		return NilInt64ArrList
	} else {
		acc := NilInt64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionList) FlatMapUintArrList(f func(Int64Option) UintArrList) UintArrList {
	if m.IsEmpty() {
		return NilUintArrList
	} else {
		acc := NilUintArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionList) FlatMapUint64ArrList(f func(Int64Option) Uint64ArrList) Uint64ArrList {
	if m.IsEmpty() {
		return NilUint64ArrList
	} else {
		acc := NilUint64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionList) FlatMapUintptrArrList(f func(Int64Option) UintptrArrList) UintptrArrList {
	if m.IsEmpty() {
		return NilUintptrArrList
	} else {
		acc := NilUintptrArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionList) FlatMapFloat32ArrList(f func(Int64Option) Float32ArrList) Float32ArrList {
	if m.IsEmpty() {
		return NilFloat32ArrList
	} else {
		acc := NilFloat32ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionList) FlatMapFloat64ArrList(f func(Int64Option) Float64ArrList) Float64ArrList {
	if m.IsEmpty() {
		return NilFloat64ArrList
	} else {
		acc := NilFloat64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionList) FlatMapRuneArrList(f func(Int64Option) RuneArrList) RuneArrList {
	if m.IsEmpty() {
		return NilRuneArrList
	} else {
		acc := NilRuneArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionList) FlatMapStringArrList(f func(Int64Option) StringArrList) StringArrList {
	if m.IsEmpty() {
		return NilStringArrList
	} else {
		acc := NilStringArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionList) FlatMapBoolListList(f func(Int64Option) BoolListList) BoolListList {
	if m.IsEmpty() {
		return NilBoolListList
	} else {
		acc := NilBoolListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionList) FlatMapAnyListList(f func(Int64Option) AnyListList) AnyListList {
	if m.IsEmpty() {
		return NilAnyListList
	} else {
		acc := NilAnyListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionList) FlatMapByteListList(f func(Int64Option) ByteListList) ByteListList {
	if m.IsEmpty() {
		return NilByteListList
	} else {
		acc := NilByteListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionList) FlatMapIntListList(f func(Int64Option) IntListList) IntListList {
	if m.IsEmpty() {
		return NilIntListList
	} else {
		acc := NilIntListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionList) FlatMapInt32ListList(f func(Int64Option) Int32ListList) Int32ListList {
	if m.IsEmpty() {
		return NilInt32ListList
	} else {
		acc := NilInt32ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionList) FlatMapInt64ListList(f func(Int64Option) Int64ListList) Int64ListList {
	if m.IsEmpty() {
		return NilInt64ListList
	} else {
		acc := NilInt64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionList) FlatMapUintListList(f func(Int64Option) UintListList) UintListList {
	if m.IsEmpty() {
		return NilUintListList
	} else {
		acc := NilUintListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionList) FlatMapUint64ListList(f func(Int64Option) Uint64ListList) Uint64ListList {
	if m.IsEmpty() {
		return NilUint64ListList
	} else {
		acc := NilUint64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionList) FlatMapUintptrListList(f func(Int64Option) UintptrListList) UintptrListList {
	if m.IsEmpty() {
		return NilUintptrListList
	} else {
		acc := NilUintptrListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionList) FlatMapFloat32ListList(f func(Int64Option) Float32ListList) Float32ListList {
	if m.IsEmpty() {
		return NilFloat32ListList
	} else {
		acc := NilFloat32ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionList) FlatMapFloat64ListList(f func(Int64Option) Float64ListList) Float64ListList {
	if m.IsEmpty() {
		return NilFloat64ListList
	} else {
		acc := NilFloat64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionList) FlatMapRuneListList(f func(Int64Option) RuneListList) RuneListList {
	if m.IsEmpty() {
		return NilRuneListList
	} else {
		acc := NilRuneListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionList) FlatMapStringListList(f func(Int64Option) StringListList) StringListList {
	if m.IsEmpty() {
		return NilStringListList
	} else {
		acc := NilStringListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionList) FlatMapBoolOptionList(f func(Int64Option) BoolOptionList) BoolOptionList {
	if m.IsEmpty() {
		return NilBoolOptionList
	} else {
		acc := NilBoolOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionList) FlatMapAnyOptionList(f func(Int64Option) AnyOptionList) AnyOptionList {
	if m.IsEmpty() {
		return NilAnyOptionList
	} else {
		acc := NilAnyOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionList) FlatMapByteOptionList(f func(Int64Option) ByteOptionList) ByteOptionList {
	if m.IsEmpty() {
		return NilByteOptionList
	} else {
		acc := NilByteOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionList) FlatMapIntOptionList(f func(Int64Option) IntOptionList) IntOptionList {
	if m.IsEmpty() {
		return NilIntOptionList
	} else {
		acc := NilIntOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionList) FlatMapInt32OptionList(f func(Int64Option) Int32OptionList) Int32OptionList {
	if m.IsEmpty() {
		return NilInt32OptionList
	} else {
		acc := NilInt32OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionList) FlatMapInt64OptionList(f func(Int64Option) Int64OptionList) Int64OptionList {
	if m.IsEmpty() {
		return NilInt64OptionList
	} else {
		acc := NilInt64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionList) FlatMapUintOptionList(f func(Int64Option) UintOptionList) UintOptionList {
	if m.IsEmpty() {
		return NilUintOptionList
	} else {
		acc := NilUintOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionList) FlatMapUint64OptionList(f func(Int64Option) Uint64OptionList) Uint64OptionList {
	if m.IsEmpty() {
		return NilUint64OptionList
	} else {
		acc := NilUint64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionList) FlatMapUintptrOptionList(f func(Int64Option) UintptrOptionList) UintptrOptionList {
	if m.IsEmpty() {
		return NilUintptrOptionList
	} else {
		acc := NilUintptrOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionList) FlatMapFloat32OptionList(f func(Int64Option) Float32OptionList) Float32OptionList {
	if m.IsEmpty() {
		return NilFloat32OptionList
	} else {
		acc := NilFloat32OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionList) FlatMapFloat64OptionList(f func(Int64Option) Float64OptionList) Float64OptionList {
	if m.IsEmpty() {
		return NilFloat64OptionList
	} else {
		acc := NilFloat64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionList) FlatMapRuneOptionList(f func(Int64Option) RuneOptionList) RuneOptionList {
	if m.IsEmpty() {
		return NilRuneOptionList
	} else {
		acc := NilRuneOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionList) FlatMapStringOptionList(f func(Int64Option) StringOptionList) StringOptionList {
	if m.IsEmpty() {
		return NilStringOptionList
	} else {
		acc := NilStringOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionList) FlatMapBoolList(f func(UintOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBoolList
	} else {
		acc := NilBoolList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionList) FlatMapAnyList(f func(UintOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAnyList
	} else {
		acc := NilAnyList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionList) FlatMapByteList(f func(UintOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByteList
	} else {
		acc := NilByteList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionList) FlatMapIntList(f func(UintOption) IntList) IntList {
	if m.IsEmpty() {
		return NilIntList
	} else {
		acc := NilIntList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionList) FlatMapInt32List(f func(UintOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32List
	} else {
		acc := NilInt32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionList) FlatMapInt64List(f func(UintOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64List
	} else {
		acc := NilInt64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionList) FlatMapUintList(f func(UintOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUintList
	} else {
		acc := NilUintList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionList) FlatMapUint64List(f func(UintOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64List
	} else {
		acc := NilUint64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionList) FlatMapUintptrList(f func(UintOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptrList
	} else {
		acc := NilUintptrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionList) FlatMapFloat32List(f func(UintOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32List
	} else {
		acc := NilFloat32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionList) FlatMapFloat64List(f func(UintOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64List
	} else {
		acc := NilFloat64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionList) FlatMapRuneList(f func(UintOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRuneList
	} else {
		acc := NilRuneList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionList) FlatMapStringList(f func(UintOption) StringList) StringList {
	if m.IsEmpty() {
		return NilStringList
	} else {
		acc := NilStringList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionList) FlatMapBoolArrList(f func(UintOption) BoolArrList) BoolArrList {
	if m.IsEmpty() {
		return NilBoolArrList
	} else {
		acc := NilBoolArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionList) FlatMapAnyArrList(f func(UintOption) AnyArrList) AnyArrList {
	if m.IsEmpty() {
		return NilAnyArrList
	} else {
		acc := NilAnyArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionList) FlatMapByteArrList(f func(UintOption) ByteArrList) ByteArrList {
	if m.IsEmpty() {
		return NilByteArrList
	} else {
		acc := NilByteArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionList) FlatMapIntArrList(f func(UintOption) IntArrList) IntArrList {
	if m.IsEmpty() {
		return NilIntArrList
	} else {
		acc := NilIntArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionList) FlatMapInt32ArrList(f func(UintOption) Int32ArrList) Int32ArrList {
	if m.IsEmpty() {
		return NilInt32ArrList
	} else {
		acc := NilInt32ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionList) FlatMapInt64ArrList(f func(UintOption) Int64ArrList) Int64ArrList {
	if m.IsEmpty() {
		return NilInt64ArrList
	} else {
		acc := NilInt64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionList) FlatMapUintArrList(f func(UintOption) UintArrList) UintArrList {
	if m.IsEmpty() {
		return NilUintArrList
	} else {
		acc := NilUintArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionList) FlatMapUint64ArrList(f func(UintOption) Uint64ArrList) Uint64ArrList {
	if m.IsEmpty() {
		return NilUint64ArrList
	} else {
		acc := NilUint64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionList) FlatMapUintptrArrList(f func(UintOption) UintptrArrList) UintptrArrList {
	if m.IsEmpty() {
		return NilUintptrArrList
	} else {
		acc := NilUintptrArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionList) FlatMapFloat32ArrList(f func(UintOption) Float32ArrList) Float32ArrList {
	if m.IsEmpty() {
		return NilFloat32ArrList
	} else {
		acc := NilFloat32ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionList) FlatMapFloat64ArrList(f func(UintOption) Float64ArrList) Float64ArrList {
	if m.IsEmpty() {
		return NilFloat64ArrList
	} else {
		acc := NilFloat64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionList) FlatMapRuneArrList(f func(UintOption) RuneArrList) RuneArrList {
	if m.IsEmpty() {
		return NilRuneArrList
	} else {
		acc := NilRuneArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionList) FlatMapStringArrList(f func(UintOption) StringArrList) StringArrList {
	if m.IsEmpty() {
		return NilStringArrList
	} else {
		acc := NilStringArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionList) FlatMapBoolListList(f func(UintOption) BoolListList) BoolListList {
	if m.IsEmpty() {
		return NilBoolListList
	} else {
		acc := NilBoolListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionList) FlatMapAnyListList(f func(UintOption) AnyListList) AnyListList {
	if m.IsEmpty() {
		return NilAnyListList
	} else {
		acc := NilAnyListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionList) FlatMapByteListList(f func(UintOption) ByteListList) ByteListList {
	if m.IsEmpty() {
		return NilByteListList
	} else {
		acc := NilByteListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionList) FlatMapIntListList(f func(UintOption) IntListList) IntListList {
	if m.IsEmpty() {
		return NilIntListList
	} else {
		acc := NilIntListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionList) FlatMapInt32ListList(f func(UintOption) Int32ListList) Int32ListList {
	if m.IsEmpty() {
		return NilInt32ListList
	} else {
		acc := NilInt32ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionList) FlatMapInt64ListList(f func(UintOption) Int64ListList) Int64ListList {
	if m.IsEmpty() {
		return NilInt64ListList
	} else {
		acc := NilInt64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionList) FlatMapUintListList(f func(UintOption) UintListList) UintListList {
	if m.IsEmpty() {
		return NilUintListList
	} else {
		acc := NilUintListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionList) FlatMapUint64ListList(f func(UintOption) Uint64ListList) Uint64ListList {
	if m.IsEmpty() {
		return NilUint64ListList
	} else {
		acc := NilUint64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionList) FlatMapUintptrListList(f func(UintOption) UintptrListList) UintptrListList {
	if m.IsEmpty() {
		return NilUintptrListList
	} else {
		acc := NilUintptrListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionList) FlatMapFloat32ListList(f func(UintOption) Float32ListList) Float32ListList {
	if m.IsEmpty() {
		return NilFloat32ListList
	} else {
		acc := NilFloat32ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionList) FlatMapFloat64ListList(f func(UintOption) Float64ListList) Float64ListList {
	if m.IsEmpty() {
		return NilFloat64ListList
	} else {
		acc := NilFloat64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionList) FlatMapRuneListList(f func(UintOption) RuneListList) RuneListList {
	if m.IsEmpty() {
		return NilRuneListList
	} else {
		acc := NilRuneListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionList) FlatMapStringListList(f func(UintOption) StringListList) StringListList {
	if m.IsEmpty() {
		return NilStringListList
	} else {
		acc := NilStringListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionList) FlatMapBoolOptionList(f func(UintOption) BoolOptionList) BoolOptionList {
	if m.IsEmpty() {
		return NilBoolOptionList
	} else {
		acc := NilBoolOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionList) FlatMapAnyOptionList(f func(UintOption) AnyOptionList) AnyOptionList {
	if m.IsEmpty() {
		return NilAnyOptionList
	} else {
		acc := NilAnyOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionList) FlatMapByteOptionList(f func(UintOption) ByteOptionList) ByteOptionList {
	if m.IsEmpty() {
		return NilByteOptionList
	} else {
		acc := NilByteOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionList) FlatMapIntOptionList(f func(UintOption) IntOptionList) IntOptionList {
	if m.IsEmpty() {
		return NilIntOptionList
	} else {
		acc := NilIntOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionList) FlatMapInt32OptionList(f func(UintOption) Int32OptionList) Int32OptionList {
	if m.IsEmpty() {
		return NilInt32OptionList
	} else {
		acc := NilInt32OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionList) FlatMapInt64OptionList(f func(UintOption) Int64OptionList) Int64OptionList {
	if m.IsEmpty() {
		return NilInt64OptionList
	} else {
		acc := NilInt64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionList) FlatMapUintOptionList(f func(UintOption) UintOptionList) UintOptionList {
	if m.IsEmpty() {
		return NilUintOptionList
	} else {
		acc := NilUintOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionList) FlatMapUint64OptionList(f func(UintOption) Uint64OptionList) Uint64OptionList {
	if m.IsEmpty() {
		return NilUint64OptionList
	} else {
		acc := NilUint64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionList) FlatMapUintptrOptionList(f func(UintOption) UintptrOptionList) UintptrOptionList {
	if m.IsEmpty() {
		return NilUintptrOptionList
	} else {
		acc := NilUintptrOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionList) FlatMapFloat32OptionList(f func(UintOption) Float32OptionList) Float32OptionList {
	if m.IsEmpty() {
		return NilFloat32OptionList
	} else {
		acc := NilFloat32OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionList) FlatMapFloat64OptionList(f func(UintOption) Float64OptionList) Float64OptionList {
	if m.IsEmpty() {
		return NilFloat64OptionList
	} else {
		acc := NilFloat64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionList) FlatMapRuneOptionList(f func(UintOption) RuneOptionList) RuneOptionList {
	if m.IsEmpty() {
		return NilRuneOptionList
	} else {
		acc := NilRuneOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionList) FlatMapStringOptionList(f func(UintOption) StringOptionList) StringOptionList {
	if m.IsEmpty() {
		return NilStringOptionList
	} else {
		acc := NilStringOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionList) FlatMapBoolList(f func(Uint64Option) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBoolList
	} else {
		acc := NilBoolList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionList) FlatMapAnyList(f func(Uint64Option) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAnyList
	} else {
		acc := NilAnyList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionList) FlatMapByteList(f func(Uint64Option) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByteList
	} else {
		acc := NilByteList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionList) FlatMapIntList(f func(Uint64Option) IntList) IntList {
	if m.IsEmpty() {
		return NilIntList
	} else {
		acc := NilIntList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionList) FlatMapInt32List(f func(Uint64Option) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32List
	} else {
		acc := NilInt32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionList) FlatMapInt64List(f func(Uint64Option) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64List
	} else {
		acc := NilInt64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionList) FlatMapUintList(f func(Uint64Option) UintList) UintList {
	if m.IsEmpty() {
		return NilUintList
	} else {
		acc := NilUintList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionList) FlatMapUint64List(f func(Uint64Option) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64List
	} else {
		acc := NilUint64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionList) FlatMapUintptrList(f func(Uint64Option) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptrList
	} else {
		acc := NilUintptrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionList) FlatMapFloat32List(f func(Uint64Option) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32List
	} else {
		acc := NilFloat32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionList) FlatMapFloat64List(f func(Uint64Option) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64List
	} else {
		acc := NilFloat64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionList) FlatMapRuneList(f func(Uint64Option) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRuneList
	} else {
		acc := NilRuneList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionList) FlatMapStringList(f func(Uint64Option) StringList) StringList {
	if m.IsEmpty() {
		return NilStringList
	} else {
		acc := NilStringList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionList) FlatMapBoolArrList(f func(Uint64Option) BoolArrList) BoolArrList {
	if m.IsEmpty() {
		return NilBoolArrList
	} else {
		acc := NilBoolArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionList) FlatMapAnyArrList(f func(Uint64Option) AnyArrList) AnyArrList {
	if m.IsEmpty() {
		return NilAnyArrList
	} else {
		acc := NilAnyArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionList) FlatMapByteArrList(f func(Uint64Option) ByteArrList) ByteArrList {
	if m.IsEmpty() {
		return NilByteArrList
	} else {
		acc := NilByteArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionList) FlatMapIntArrList(f func(Uint64Option) IntArrList) IntArrList {
	if m.IsEmpty() {
		return NilIntArrList
	} else {
		acc := NilIntArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionList) FlatMapInt32ArrList(f func(Uint64Option) Int32ArrList) Int32ArrList {
	if m.IsEmpty() {
		return NilInt32ArrList
	} else {
		acc := NilInt32ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionList) FlatMapInt64ArrList(f func(Uint64Option) Int64ArrList) Int64ArrList {
	if m.IsEmpty() {
		return NilInt64ArrList
	} else {
		acc := NilInt64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionList) FlatMapUintArrList(f func(Uint64Option) UintArrList) UintArrList {
	if m.IsEmpty() {
		return NilUintArrList
	} else {
		acc := NilUintArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionList) FlatMapUint64ArrList(f func(Uint64Option) Uint64ArrList) Uint64ArrList {
	if m.IsEmpty() {
		return NilUint64ArrList
	} else {
		acc := NilUint64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionList) FlatMapUintptrArrList(f func(Uint64Option) UintptrArrList) UintptrArrList {
	if m.IsEmpty() {
		return NilUintptrArrList
	} else {
		acc := NilUintptrArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionList) FlatMapFloat32ArrList(f func(Uint64Option) Float32ArrList) Float32ArrList {
	if m.IsEmpty() {
		return NilFloat32ArrList
	} else {
		acc := NilFloat32ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionList) FlatMapFloat64ArrList(f func(Uint64Option) Float64ArrList) Float64ArrList {
	if m.IsEmpty() {
		return NilFloat64ArrList
	} else {
		acc := NilFloat64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionList) FlatMapRuneArrList(f func(Uint64Option) RuneArrList) RuneArrList {
	if m.IsEmpty() {
		return NilRuneArrList
	} else {
		acc := NilRuneArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionList) FlatMapStringArrList(f func(Uint64Option) StringArrList) StringArrList {
	if m.IsEmpty() {
		return NilStringArrList
	} else {
		acc := NilStringArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionList) FlatMapBoolListList(f func(Uint64Option) BoolListList) BoolListList {
	if m.IsEmpty() {
		return NilBoolListList
	} else {
		acc := NilBoolListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionList) FlatMapAnyListList(f func(Uint64Option) AnyListList) AnyListList {
	if m.IsEmpty() {
		return NilAnyListList
	} else {
		acc := NilAnyListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionList) FlatMapByteListList(f func(Uint64Option) ByteListList) ByteListList {
	if m.IsEmpty() {
		return NilByteListList
	} else {
		acc := NilByteListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionList) FlatMapIntListList(f func(Uint64Option) IntListList) IntListList {
	if m.IsEmpty() {
		return NilIntListList
	} else {
		acc := NilIntListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionList) FlatMapInt32ListList(f func(Uint64Option) Int32ListList) Int32ListList {
	if m.IsEmpty() {
		return NilInt32ListList
	} else {
		acc := NilInt32ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionList) FlatMapInt64ListList(f func(Uint64Option) Int64ListList) Int64ListList {
	if m.IsEmpty() {
		return NilInt64ListList
	} else {
		acc := NilInt64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionList) FlatMapUintListList(f func(Uint64Option) UintListList) UintListList {
	if m.IsEmpty() {
		return NilUintListList
	} else {
		acc := NilUintListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionList) FlatMapUint64ListList(f func(Uint64Option) Uint64ListList) Uint64ListList {
	if m.IsEmpty() {
		return NilUint64ListList
	} else {
		acc := NilUint64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionList) FlatMapUintptrListList(f func(Uint64Option) UintptrListList) UintptrListList {
	if m.IsEmpty() {
		return NilUintptrListList
	} else {
		acc := NilUintptrListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionList) FlatMapFloat32ListList(f func(Uint64Option) Float32ListList) Float32ListList {
	if m.IsEmpty() {
		return NilFloat32ListList
	} else {
		acc := NilFloat32ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionList) FlatMapFloat64ListList(f func(Uint64Option) Float64ListList) Float64ListList {
	if m.IsEmpty() {
		return NilFloat64ListList
	} else {
		acc := NilFloat64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionList) FlatMapRuneListList(f func(Uint64Option) RuneListList) RuneListList {
	if m.IsEmpty() {
		return NilRuneListList
	} else {
		acc := NilRuneListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionList) FlatMapStringListList(f func(Uint64Option) StringListList) StringListList {
	if m.IsEmpty() {
		return NilStringListList
	} else {
		acc := NilStringListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionList) FlatMapBoolOptionList(f func(Uint64Option) BoolOptionList) BoolOptionList {
	if m.IsEmpty() {
		return NilBoolOptionList
	} else {
		acc := NilBoolOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionList) FlatMapAnyOptionList(f func(Uint64Option) AnyOptionList) AnyOptionList {
	if m.IsEmpty() {
		return NilAnyOptionList
	} else {
		acc := NilAnyOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionList) FlatMapByteOptionList(f func(Uint64Option) ByteOptionList) ByteOptionList {
	if m.IsEmpty() {
		return NilByteOptionList
	} else {
		acc := NilByteOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionList) FlatMapIntOptionList(f func(Uint64Option) IntOptionList) IntOptionList {
	if m.IsEmpty() {
		return NilIntOptionList
	} else {
		acc := NilIntOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionList) FlatMapInt32OptionList(f func(Uint64Option) Int32OptionList) Int32OptionList {
	if m.IsEmpty() {
		return NilInt32OptionList
	} else {
		acc := NilInt32OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionList) FlatMapInt64OptionList(f func(Uint64Option) Int64OptionList) Int64OptionList {
	if m.IsEmpty() {
		return NilInt64OptionList
	} else {
		acc := NilInt64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionList) FlatMapUintOptionList(f func(Uint64Option) UintOptionList) UintOptionList {
	if m.IsEmpty() {
		return NilUintOptionList
	} else {
		acc := NilUintOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionList) FlatMapUint64OptionList(f func(Uint64Option) Uint64OptionList) Uint64OptionList {
	if m.IsEmpty() {
		return NilUint64OptionList
	} else {
		acc := NilUint64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionList) FlatMapUintptrOptionList(f func(Uint64Option) UintptrOptionList) UintptrOptionList {
	if m.IsEmpty() {
		return NilUintptrOptionList
	} else {
		acc := NilUintptrOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionList) FlatMapFloat32OptionList(f func(Uint64Option) Float32OptionList) Float32OptionList {
	if m.IsEmpty() {
		return NilFloat32OptionList
	} else {
		acc := NilFloat32OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionList) FlatMapFloat64OptionList(f func(Uint64Option) Float64OptionList) Float64OptionList {
	if m.IsEmpty() {
		return NilFloat64OptionList
	} else {
		acc := NilFloat64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionList) FlatMapRuneOptionList(f func(Uint64Option) RuneOptionList) RuneOptionList {
	if m.IsEmpty() {
		return NilRuneOptionList
	} else {
		acc := NilRuneOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionList) FlatMapStringOptionList(f func(Uint64Option) StringOptionList) StringOptionList {
	if m.IsEmpty() {
		return NilStringOptionList
	} else {
		acc := NilStringOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionList) FlatMapBoolList(f func(UintptrOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBoolList
	} else {
		acc := NilBoolList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionList) FlatMapAnyList(f func(UintptrOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAnyList
	} else {
		acc := NilAnyList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionList) FlatMapByteList(f func(UintptrOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByteList
	} else {
		acc := NilByteList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionList) FlatMapIntList(f func(UintptrOption) IntList) IntList {
	if m.IsEmpty() {
		return NilIntList
	} else {
		acc := NilIntList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionList) FlatMapInt32List(f func(UintptrOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32List
	} else {
		acc := NilInt32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionList) FlatMapInt64List(f func(UintptrOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64List
	} else {
		acc := NilInt64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionList) FlatMapUintList(f func(UintptrOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUintList
	} else {
		acc := NilUintList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionList) FlatMapUint64List(f func(UintptrOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64List
	} else {
		acc := NilUint64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionList) FlatMapUintptrList(f func(UintptrOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptrList
	} else {
		acc := NilUintptrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionList) FlatMapFloat32List(f func(UintptrOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32List
	} else {
		acc := NilFloat32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionList) FlatMapFloat64List(f func(UintptrOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64List
	} else {
		acc := NilFloat64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionList) FlatMapRuneList(f func(UintptrOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRuneList
	} else {
		acc := NilRuneList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionList) FlatMapStringList(f func(UintptrOption) StringList) StringList {
	if m.IsEmpty() {
		return NilStringList
	} else {
		acc := NilStringList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionList) FlatMapBoolArrList(f func(UintptrOption) BoolArrList) BoolArrList {
	if m.IsEmpty() {
		return NilBoolArrList
	} else {
		acc := NilBoolArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionList) FlatMapAnyArrList(f func(UintptrOption) AnyArrList) AnyArrList {
	if m.IsEmpty() {
		return NilAnyArrList
	} else {
		acc := NilAnyArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionList) FlatMapByteArrList(f func(UintptrOption) ByteArrList) ByteArrList {
	if m.IsEmpty() {
		return NilByteArrList
	} else {
		acc := NilByteArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionList) FlatMapIntArrList(f func(UintptrOption) IntArrList) IntArrList {
	if m.IsEmpty() {
		return NilIntArrList
	} else {
		acc := NilIntArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionList) FlatMapInt32ArrList(f func(UintptrOption) Int32ArrList) Int32ArrList {
	if m.IsEmpty() {
		return NilInt32ArrList
	} else {
		acc := NilInt32ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionList) FlatMapInt64ArrList(f func(UintptrOption) Int64ArrList) Int64ArrList {
	if m.IsEmpty() {
		return NilInt64ArrList
	} else {
		acc := NilInt64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionList) FlatMapUintArrList(f func(UintptrOption) UintArrList) UintArrList {
	if m.IsEmpty() {
		return NilUintArrList
	} else {
		acc := NilUintArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionList) FlatMapUint64ArrList(f func(UintptrOption) Uint64ArrList) Uint64ArrList {
	if m.IsEmpty() {
		return NilUint64ArrList
	} else {
		acc := NilUint64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionList) FlatMapUintptrArrList(f func(UintptrOption) UintptrArrList) UintptrArrList {
	if m.IsEmpty() {
		return NilUintptrArrList
	} else {
		acc := NilUintptrArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionList) FlatMapFloat32ArrList(f func(UintptrOption) Float32ArrList) Float32ArrList {
	if m.IsEmpty() {
		return NilFloat32ArrList
	} else {
		acc := NilFloat32ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionList) FlatMapFloat64ArrList(f func(UintptrOption) Float64ArrList) Float64ArrList {
	if m.IsEmpty() {
		return NilFloat64ArrList
	} else {
		acc := NilFloat64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionList) FlatMapRuneArrList(f func(UintptrOption) RuneArrList) RuneArrList {
	if m.IsEmpty() {
		return NilRuneArrList
	} else {
		acc := NilRuneArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionList) FlatMapStringArrList(f func(UintptrOption) StringArrList) StringArrList {
	if m.IsEmpty() {
		return NilStringArrList
	} else {
		acc := NilStringArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionList) FlatMapBoolListList(f func(UintptrOption) BoolListList) BoolListList {
	if m.IsEmpty() {
		return NilBoolListList
	} else {
		acc := NilBoolListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionList) FlatMapAnyListList(f func(UintptrOption) AnyListList) AnyListList {
	if m.IsEmpty() {
		return NilAnyListList
	} else {
		acc := NilAnyListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionList) FlatMapByteListList(f func(UintptrOption) ByteListList) ByteListList {
	if m.IsEmpty() {
		return NilByteListList
	} else {
		acc := NilByteListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionList) FlatMapIntListList(f func(UintptrOption) IntListList) IntListList {
	if m.IsEmpty() {
		return NilIntListList
	} else {
		acc := NilIntListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionList) FlatMapInt32ListList(f func(UintptrOption) Int32ListList) Int32ListList {
	if m.IsEmpty() {
		return NilInt32ListList
	} else {
		acc := NilInt32ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionList) FlatMapInt64ListList(f func(UintptrOption) Int64ListList) Int64ListList {
	if m.IsEmpty() {
		return NilInt64ListList
	} else {
		acc := NilInt64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionList) FlatMapUintListList(f func(UintptrOption) UintListList) UintListList {
	if m.IsEmpty() {
		return NilUintListList
	} else {
		acc := NilUintListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionList) FlatMapUint64ListList(f func(UintptrOption) Uint64ListList) Uint64ListList {
	if m.IsEmpty() {
		return NilUint64ListList
	} else {
		acc := NilUint64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionList) FlatMapUintptrListList(f func(UintptrOption) UintptrListList) UintptrListList {
	if m.IsEmpty() {
		return NilUintptrListList
	} else {
		acc := NilUintptrListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionList) FlatMapFloat32ListList(f func(UintptrOption) Float32ListList) Float32ListList {
	if m.IsEmpty() {
		return NilFloat32ListList
	} else {
		acc := NilFloat32ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionList) FlatMapFloat64ListList(f func(UintptrOption) Float64ListList) Float64ListList {
	if m.IsEmpty() {
		return NilFloat64ListList
	} else {
		acc := NilFloat64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionList) FlatMapRuneListList(f func(UintptrOption) RuneListList) RuneListList {
	if m.IsEmpty() {
		return NilRuneListList
	} else {
		acc := NilRuneListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionList) FlatMapStringListList(f func(UintptrOption) StringListList) StringListList {
	if m.IsEmpty() {
		return NilStringListList
	} else {
		acc := NilStringListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionList) FlatMapBoolOptionList(f func(UintptrOption) BoolOptionList) BoolOptionList {
	if m.IsEmpty() {
		return NilBoolOptionList
	} else {
		acc := NilBoolOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionList) FlatMapAnyOptionList(f func(UintptrOption) AnyOptionList) AnyOptionList {
	if m.IsEmpty() {
		return NilAnyOptionList
	} else {
		acc := NilAnyOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionList) FlatMapByteOptionList(f func(UintptrOption) ByteOptionList) ByteOptionList {
	if m.IsEmpty() {
		return NilByteOptionList
	} else {
		acc := NilByteOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionList) FlatMapIntOptionList(f func(UintptrOption) IntOptionList) IntOptionList {
	if m.IsEmpty() {
		return NilIntOptionList
	} else {
		acc := NilIntOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionList) FlatMapInt32OptionList(f func(UintptrOption) Int32OptionList) Int32OptionList {
	if m.IsEmpty() {
		return NilInt32OptionList
	} else {
		acc := NilInt32OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionList) FlatMapInt64OptionList(f func(UintptrOption) Int64OptionList) Int64OptionList {
	if m.IsEmpty() {
		return NilInt64OptionList
	} else {
		acc := NilInt64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionList) FlatMapUintOptionList(f func(UintptrOption) UintOptionList) UintOptionList {
	if m.IsEmpty() {
		return NilUintOptionList
	} else {
		acc := NilUintOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionList) FlatMapUint64OptionList(f func(UintptrOption) Uint64OptionList) Uint64OptionList {
	if m.IsEmpty() {
		return NilUint64OptionList
	} else {
		acc := NilUint64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionList) FlatMapUintptrOptionList(f func(UintptrOption) UintptrOptionList) UintptrOptionList {
	if m.IsEmpty() {
		return NilUintptrOptionList
	} else {
		acc := NilUintptrOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionList) FlatMapFloat32OptionList(f func(UintptrOption) Float32OptionList) Float32OptionList {
	if m.IsEmpty() {
		return NilFloat32OptionList
	} else {
		acc := NilFloat32OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionList) FlatMapFloat64OptionList(f func(UintptrOption) Float64OptionList) Float64OptionList {
	if m.IsEmpty() {
		return NilFloat64OptionList
	} else {
		acc := NilFloat64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionList) FlatMapRuneOptionList(f func(UintptrOption) RuneOptionList) RuneOptionList {
	if m.IsEmpty() {
		return NilRuneOptionList
	} else {
		acc := NilRuneOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionList) FlatMapStringOptionList(f func(UintptrOption) StringOptionList) StringOptionList {
	if m.IsEmpty() {
		return NilStringOptionList
	} else {
		acc := NilStringOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionList) FlatMapBoolList(f func(Float32Option) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBoolList
	} else {
		acc := NilBoolList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionList) FlatMapAnyList(f func(Float32Option) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAnyList
	} else {
		acc := NilAnyList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionList) FlatMapByteList(f func(Float32Option) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByteList
	} else {
		acc := NilByteList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionList) FlatMapIntList(f func(Float32Option) IntList) IntList {
	if m.IsEmpty() {
		return NilIntList
	} else {
		acc := NilIntList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionList) FlatMapInt32List(f func(Float32Option) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32List
	} else {
		acc := NilInt32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionList) FlatMapInt64List(f func(Float32Option) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64List
	} else {
		acc := NilInt64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionList) FlatMapUintList(f func(Float32Option) UintList) UintList {
	if m.IsEmpty() {
		return NilUintList
	} else {
		acc := NilUintList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionList) FlatMapUint64List(f func(Float32Option) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64List
	} else {
		acc := NilUint64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionList) FlatMapUintptrList(f func(Float32Option) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptrList
	} else {
		acc := NilUintptrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionList) FlatMapFloat32List(f func(Float32Option) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32List
	} else {
		acc := NilFloat32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionList) FlatMapFloat64List(f func(Float32Option) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64List
	} else {
		acc := NilFloat64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionList) FlatMapRuneList(f func(Float32Option) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRuneList
	} else {
		acc := NilRuneList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionList) FlatMapStringList(f func(Float32Option) StringList) StringList {
	if m.IsEmpty() {
		return NilStringList
	} else {
		acc := NilStringList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionList) FlatMapBoolArrList(f func(Float32Option) BoolArrList) BoolArrList {
	if m.IsEmpty() {
		return NilBoolArrList
	} else {
		acc := NilBoolArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionList) FlatMapAnyArrList(f func(Float32Option) AnyArrList) AnyArrList {
	if m.IsEmpty() {
		return NilAnyArrList
	} else {
		acc := NilAnyArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionList) FlatMapByteArrList(f func(Float32Option) ByteArrList) ByteArrList {
	if m.IsEmpty() {
		return NilByteArrList
	} else {
		acc := NilByteArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionList) FlatMapIntArrList(f func(Float32Option) IntArrList) IntArrList {
	if m.IsEmpty() {
		return NilIntArrList
	} else {
		acc := NilIntArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionList) FlatMapInt32ArrList(f func(Float32Option) Int32ArrList) Int32ArrList {
	if m.IsEmpty() {
		return NilInt32ArrList
	} else {
		acc := NilInt32ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionList) FlatMapInt64ArrList(f func(Float32Option) Int64ArrList) Int64ArrList {
	if m.IsEmpty() {
		return NilInt64ArrList
	} else {
		acc := NilInt64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionList) FlatMapUintArrList(f func(Float32Option) UintArrList) UintArrList {
	if m.IsEmpty() {
		return NilUintArrList
	} else {
		acc := NilUintArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionList) FlatMapUint64ArrList(f func(Float32Option) Uint64ArrList) Uint64ArrList {
	if m.IsEmpty() {
		return NilUint64ArrList
	} else {
		acc := NilUint64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionList) FlatMapUintptrArrList(f func(Float32Option) UintptrArrList) UintptrArrList {
	if m.IsEmpty() {
		return NilUintptrArrList
	} else {
		acc := NilUintptrArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionList) FlatMapFloat32ArrList(f func(Float32Option) Float32ArrList) Float32ArrList {
	if m.IsEmpty() {
		return NilFloat32ArrList
	} else {
		acc := NilFloat32ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionList) FlatMapFloat64ArrList(f func(Float32Option) Float64ArrList) Float64ArrList {
	if m.IsEmpty() {
		return NilFloat64ArrList
	} else {
		acc := NilFloat64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionList) FlatMapRuneArrList(f func(Float32Option) RuneArrList) RuneArrList {
	if m.IsEmpty() {
		return NilRuneArrList
	} else {
		acc := NilRuneArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionList) FlatMapStringArrList(f func(Float32Option) StringArrList) StringArrList {
	if m.IsEmpty() {
		return NilStringArrList
	} else {
		acc := NilStringArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionList) FlatMapBoolListList(f func(Float32Option) BoolListList) BoolListList {
	if m.IsEmpty() {
		return NilBoolListList
	} else {
		acc := NilBoolListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionList) FlatMapAnyListList(f func(Float32Option) AnyListList) AnyListList {
	if m.IsEmpty() {
		return NilAnyListList
	} else {
		acc := NilAnyListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionList) FlatMapByteListList(f func(Float32Option) ByteListList) ByteListList {
	if m.IsEmpty() {
		return NilByteListList
	} else {
		acc := NilByteListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionList) FlatMapIntListList(f func(Float32Option) IntListList) IntListList {
	if m.IsEmpty() {
		return NilIntListList
	} else {
		acc := NilIntListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionList) FlatMapInt32ListList(f func(Float32Option) Int32ListList) Int32ListList {
	if m.IsEmpty() {
		return NilInt32ListList
	} else {
		acc := NilInt32ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionList) FlatMapInt64ListList(f func(Float32Option) Int64ListList) Int64ListList {
	if m.IsEmpty() {
		return NilInt64ListList
	} else {
		acc := NilInt64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionList) FlatMapUintListList(f func(Float32Option) UintListList) UintListList {
	if m.IsEmpty() {
		return NilUintListList
	} else {
		acc := NilUintListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionList) FlatMapUint64ListList(f func(Float32Option) Uint64ListList) Uint64ListList {
	if m.IsEmpty() {
		return NilUint64ListList
	} else {
		acc := NilUint64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionList) FlatMapUintptrListList(f func(Float32Option) UintptrListList) UintptrListList {
	if m.IsEmpty() {
		return NilUintptrListList
	} else {
		acc := NilUintptrListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionList) FlatMapFloat32ListList(f func(Float32Option) Float32ListList) Float32ListList {
	if m.IsEmpty() {
		return NilFloat32ListList
	} else {
		acc := NilFloat32ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionList) FlatMapFloat64ListList(f func(Float32Option) Float64ListList) Float64ListList {
	if m.IsEmpty() {
		return NilFloat64ListList
	} else {
		acc := NilFloat64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionList) FlatMapRuneListList(f func(Float32Option) RuneListList) RuneListList {
	if m.IsEmpty() {
		return NilRuneListList
	} else {
		acc := NilRuneListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionList) FlatMapStringListList(f func(Float32Option) StringListList) StringListList {
	if m.IsEmpty() {
		return NilStringListList
	} else {
		acc := NilStringListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionList) FlatMapBoolOptionList(f func(Float32Option) BoolOptionList) BoolOptionList {
	if m.IsEmpty() {
		return NilBoolOptionList
	} else {
		acc := NilBoolOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionList) FlatMapAnyOptionList(f func(Float32Option) AnyOptionList) AnyOptionList {
	if m.IsEmpty() {
		return NilAnyOptionList
	} else {
		acc := NilAnyOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionList) FlatMapByteOptionList(f func(Float32Option) ByteOptionList) ByteOptionList {
	if m.IsEmpty() {
		return NilByteOptionList
	} else {
		acc := NilByteOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionList) FlatMapIntOptionList(f func(Float32Option) IntOptionList) IntOptionList {
	if m.IsEmpty() {
		return NilIntOptionList
	} else {
		acc := NilIntOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionList) FlatMapInt32OptionList(f func(Float32Option) Int32OptionList) Int32OptionList {
	if m.IsEmpty() {
		return NilInt32OptionList
	} else {
		acc := NilInt32OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionList) FlatMapInt64OptionList(f func(Float32Option) Int64OptionList) Int64OptionList {
	if m.IsEmpty() {
		return NilInt64OptionList
	} else {
		acc := NilInt64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionList) FlatMapUintOptionList(f func(Float32Option) UintOptionList) UintOptionList {
	if m.IsEmpty() {
		return NilUintOptionList
	} else {
		acc := NilUintOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionList) FlatMapUint64OptionList(f func(Float32Option) Uint64OptionList) Uint64OptionList {
	if m.IsEmpty() {
		return NilUint64OptionList
	} else {
		acc := NilUint64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionList) FlatMapUintptrOptionList(f func(Float32Option) UintptrOptionList) UintptrOptionList {
	if m.IsEmpty() {
		return NilUintptrOptionList
	} else {
		acc := NilUintptrOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionList) FlatMapFloat32OptionList(f func(Float32Option) Float32OptionList) Float32OptionList {
	if m.IsEmpty() {
		return NilFloat32OptionList
	} else {
		acc := NilFloat32OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionList) FlatMapFloat64OptionList(f func(Float32Option) Float64OptionList) Float64OptionList {
	if m.IsEmpty() {
		return NilFloat64OptionList
	} else {
		acc := NilFloat64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionList) FlatMapRuneOptionList(f func(Float32Option) RuneOptionList) RuneOptionList {
	if m.IsEmpty() {
		return NilRuneOptionList
	} else {
		acc := NilRuneOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionList) FlatMapStringOptionList(f func(Float32Option) StringOptionList) StringOptionList {
	if m.IsEmpty() {
		return NilStringOptionList
	} else {
		acc := NilStringOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionList) FlatMapBoolList(f func(Float64Option) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBoolList
	} else {
		acc := NilBoolList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionList) FlatMapAnyList(f func(Float64Option) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAnyList
	} else {
		acc := NilAnyList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionList) FlatMapByteList(f func(Float64Option) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByteList
	} else {
		acc := NilByteList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionList) FlatMapIntList(f func(Float64Option) IntList) IntList {
	if m.IsEmpty() {
		return NilIntList
	} else {
		acc := NilIntList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionList) FlatMapInt32List(f func(Float64Option) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32List
	} else {
		acc := NilInt32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionList) FlatMapInt64List(f func(Float64Option) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64List
	} else {
		acc := NilInt64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionList) FlatMapUintList(f func(Float64Option) UintList) UintList {
	if m.IsEmpty() {
		return NilUintList
	} else {
		acc := NilUintList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionList) FlatMapUint64List(f func(Float64Option) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64List
	} else {
		acc := NilUint64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionList) FlatMapUintptrList(f func(Float64Option) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptrList
	} else {
		acc := NilUintptrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionList) FlatMapFloat32List(f func(Float64Option) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32List
	} else {
		acc := NilFloat32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionList) FlatMapFloat64List(f func(Float64Option) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64List
	} else {
		acc := NilFloat64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionList) FlatMapRuneList(f func(Float64Option) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRuneList
	} else {
		acc := NilRuneList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionList) FlatMapStringList(f func(Float64Option) StringList) StringList {
	if m.IsEmpty() {
		return NilStringList
	} else {
		acc := NilStringList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionList) FlatMapBoolArrList(f func(Float64Option) BoolArrList) BoolArrList {
	if m.IsEmpty() {
		return NilBoolArrList
	} else {
		acc := NilBoolArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionList) FlatMapAnyArrList(f func(Float64Option) AnyArrList) AnyArrList {
	if m.IsEmpty() {
		return NilAnyArrList
	} else {
		acc := NilAnyArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionList) FlatMapByteArrList(f func(Float64Option) ByteArrList) ByteArrList {
	if m.IsEmpty() {
		return NilByteArrList
	} else {
		acc := NilByteArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionList) FlatMapIntArrList(f func(Float64Option) IntArrList) IntArrList {
	if m.IsEmpty() {
		return NilIntArrList
	} else {
		acc := NilIntArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionList) FlatMapInt32ArrList(f func(Float64Option) Int32ArrList) Int32ArrList {
	if m.IsEmpty() {
		return NilInt32ArrList
	} else {
		acc := NilInt32ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionList) FlatMapInt64ArrList(f func(Float64Option) Int64ArrList) Int64ArrList {
	if m.IsEmpty() {
		return NilInt64ArrList
	} else {
		acc := NilInt64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionList) FlatMapUintArrList(f func(Float64Option) UintArrList) UintArrList {
	if m.IsEmpty() {
		return NilUintArrList
	} else {
		acc := NilUintArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionList) FlatMapUint64ArrList(f func(Float64Option) Uint64ArrList) Uint64ArrList {
	if m.IsEmpty() {
		return NilUint64ArrList
	} else {
		acc := NilUint64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionList) FlatMapUintptrArrList(f func(Float64Option) UintptrArrList) UintptrArrList {
	if m.IsEmpty() {
		return NilUintptrArrList
	} else {
		acc := NilUintptrArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionList) FlatMapFloat32ArrList(f func(Float64Option) Float32ArrList) Float32ArrList {
	if m.IsEmpty() {
		return NilFloat32ArrList
	} else {
		acc := NilFloat32ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionList) FlatMapFloat64ArrList(f func(Float64Option) Float64ArrList) Float64ArrList {
	if m.IsEmpty() {
		return NilFloat64ArrList
	} else {
		acc := NilFloat64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionList) FlatMapRuneArrList(f func(Float64Option) RuneArrList) RuneArrList {
	if m.IsEmpty() {
		return NilRuneArrList
	} else {
		acc := NilRuneArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionList) FlatMapStringArrList(f func(Float64Option) StringArrList) StringArrList {
	if m.IsEmpty() {
		return NilStringArrList
	} else {
		acc := NilStringArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionList) FlatMapBoolListList(f func(Float64Option) BoolListList) BoolListList {
	if m.IsEmpty() {
		return NilBoolListList
	} else {
		acc := NilBoolListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionList) FlatMapAnyListList(f func(Float64Option) AnyListList) AnyListList {
	if m.IsEmpty() {
		return NilAnyListList
	} else {
		acc := NilAnyListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionList) FlatMapByteListList(f func(Float64Option) ByteListList) ByteListList {
	if m.IsEmpty() {
		return NilByteListList
	} else {
		acc := NilByteListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionList) FlatMapIntListList(f func(Float64Option) IntListList) IntListList {
	if m.IsEmpty() {
		return NilIntListList
	} else {
		acc := NilIntListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionList) FlatMapInt32ListList(f func(Float64Option) Int32ListList) Int32ListList {
	if m.IsEmpty() {
		return NilInt32ListList
	} else {
		acc := NilInt32ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionList) FlatMapInt64ListList(f func(Float64Option) Int64ListList) Int64ListList {
	if m.IsEmpty() {
		return NilInt64ListList
	} else {
		acc := NilInt64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionList) FlatMapUintListList(f func(Float64Option) UintListList) UintListList {
	if m.IsEmpty() {
		return NilUintListList
	} else {
		acc := NilUintListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionList) FlatMapUint64ListList(f func(Float64Option) Uint64ListList) Uint64ListList {
	if m.IsEmpty() {
		return NilUint64ListList
	} else {
		acc := NilUint64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionList) FlatMapUintptrListList(f func(Float64Option) UintptrListList) UintptrListList {
	if m.IsEmpty() {
		return NilUintptrListList
	} else {
		acc := NilUintptrListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionList) FlatMapFloat32ListList(f func(Float64Option) Float32ListList) Float32ListList {
	if m.IsEmpty() {
		return NilFloat32ListList
	} else {
		acc := NilFloat32ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionList) FlatMapFloat64ListList(f func(Float64Option) Float64ListList) Float64ListList {
	if m.IsEmpty() {
		return NilFloat64ListList
	} else {
		acc := NilFloat64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionList) FlatMapRuneListList(f func(Float64Option) RuneListList) RuneListList {
	if m.IsEmpty() {
		return NilRuneListList
	} else {
		acc := NilRuneListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionList) FlatMapStringListList(f func(Float64Option) StringListList) StringListList {
	if m.IsEmpty() {
		return NilStringListList
	} else {
		acc := NilStringListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionList) FlatMapBoolOptionList(f func(Float64Option) BoolOptionList) BoolOptionList {
	if m.IsEmpty() {
		return NilBoolOptionList
	} else {
		acc := NilBoolOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionList) FlatMapAnyOptionList(f func(Float64Option) AnyOptionList) AnyOptionList {
	if m.IsEmpty() {
		return NilAnyOptionList
	} else {
		acc := NilAnyOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionList) FlatMapByteOptionList(f func(Float64Option) ByteOptionList) ByteOptionList {
	if m.IsEmpty() {
		return NilByteOptionList
	} else {
		acc := NilByteOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionList) FlatMapIntOptionList(f func(Float64Option) IntOptionList) IntOptionList {
	if m.IsEmpty() {
		return NilIntOptionList
	} else {
		acc := NilIntOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionList) FlatMapInt32OptionList(f func(Float64Option) Int32OptionList) Int32OptionList {
	if m.IsEmpty() {
		return NilInt32OptionList
	} else {
		acc := NilInt32OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionList) FlatMapInt64OptionList(f func(Float64Option) Int64OptionList) Int64OptionList {
	if m.IsEmpty() {
		return NilInt64OptionList
	} else {
		acc := NilInt64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionList) FlatMapUintOptionList(f func(Float64Option) UintOptionList) UintOptionList {
	if m.IsEmpty() {
		return NilUintOptionList
	} else {
		acc := NilUintOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionList) FlatMapUint64OptionList(f func(Float64Option) Uint64OptionList) Uint64OptionList {
	if m.IsEmpty() {
		return NilUint64OptionList
	} else {
		acc := NilUint64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionList) FlatMapUintptrOptionList(f func(Float64Option) UintptrOptionList) UintptrOptionList {
	if m.IsEmpty() {
		return NilUintptrOptionList
	} else {
		acc := NilUintptrOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionList) FlatMapFloat32OptionList(f func(Float64Option) Float32OptionList) Float32OptionList {
	if m.IsEmpty() {
		return NilFloat32OptionList
	} else {
		acc := NilFloat32OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionList) FlatMapFloat64OptionList(f func(Float64Option) Float64OptionList) Float64OptionList {
	if m.IsEmpty() {
		return NilFloat64OptionList
	} else {
		acc := NilFloat64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionList) FlatMapRuneOptionList(f func(Float64Option) RuneOptionList) RuneOptionList {
	if m.IsEmpty() {
		return NilRuneOptionList
	} else {
		acc := NilRuneOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionList) FlatMapStringOptionList(f func(Float64Option) StringOptionList) StringOptionList {
	if m.IsEmpty() {
		return NilStringOptionList
	} else {
		acc := NilStringOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionList) FlatMapBoolList(f func(RuneOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBoolList
	} else {
		acc := NilBoolList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionList) FlatMapAnyList(f func(RuneOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAnyList
	} else {
		acc := NilAnyList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionList) FlatMapByteList(f func(RuneOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByteList
	} else {
		acc := NilByteList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionList) FlatMapIntList(f func(RuneOption) IntList) IntList {
	if m.IsEmpty() {
		return NilIntList
	} else {
		acc := NilIntList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionList) FlatMapInt32List(f func(RuneOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32List
	} else {
		acc := NilInt32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionList) FlatMapInt64List(f func(RuneOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64List
	} else {
		acc := NilInt64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionList) FlatMapUintList(f func(RuneOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUintList
	} else {
		acc := NilUintList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionList) FlatMapUint64List(f func(RuneOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64List
	} else {
		acc := NilUint64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionList) FlatMapUintptrList(f func(RuneOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptrList
	} else {
		acc := NilUintptrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionList) FlatMapFloat32List(f func(RuneOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32List
	} else {
		acc := NilFloat32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionList) FlatMapFloat64List(f func(RuneOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64List
	} else {
		acc := NilFloat64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionList) FlatMapRuneList(f func(RuneOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRuneList
	} else {
		acc := NilRuneList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionList) FlatMapStringList(f func(RuneOption) StringList) StringList {
	if m.IsEmpty() {
		return NilStringList
	} else {
		acc := NilStringList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionList) FlatMapBoolArrList(f func(RuneOption) BoolArrList) BoolArrList {
	if m.IsEmpty() {
		return NilBoolArrList
	} else {
		acc := NilBoolArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionList) FlatMapAnyArrList(f func(RuneOption) AnyArrList) AnyArrList {
	if m.IsEmpty() {
		return NilAnyArrList
	} else {
		acc := NilAnyArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionList) FlatMapByteArrList(f func(RuneOption) ByteArrList) ByteArrList {
	if m.IsEmpty() {
		return NilByteArrList
	} else {
		acc := NilByteArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionList) FlatMapIntArrList(f func(RuneOption) IntArrList) IntArrList {
	if m.IsEmpty() {
		return NilIntArrList
	} else {
		acc := NilIntArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionList) FlatMapInt32ArrList(f func(RuneOption) Int32ArrList) Int32ArrList {
	if m.IsEmpty() {
		return NilInt32ArrList
	} else {
		acc := NilInt32ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionList) FlatMapInt64ArrList(f func(RuneOption) Int64ArrList) Int64ArrList {
	if m.IsEmpty() {
		return NilInt64ArrList
	} else {
		acc := NilInt64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionList) FlatMapUintArrList(f func(RuneOption) UintArrList) UintArrList {
	if m.IsEmpty() {
		return NilUintArrList
	} else {
		acc := NilUintArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionList) FlatMapUint64ArrList(f func(RuneOption) Uint64ArrList) Uint64ArrList {
	if m.IsEmpty() {
		return NilUint64ArrList
	} else {
		acc := NilUint64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionList) FlatMapUintptrArrList(f func(RuneOption) UintptrArrList) UintptrArrList {
	if m.IsEmpty() {
		return NilUintptrArrList
	} else {
		acc := NilUintptrArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionList) FlatMapFloat32ArrList(f func(RuneOption) Float32ArrList) Float32ArrList {
	if m.IsEmpty() {
		return NilFloat32ArrList
	} else {
		acc := NilFloat32ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionList) FlatMapFloat64ArrList(f func(RuneOption) Float64ArrList) Float64ArrList {
	if m.IsEmpty() {
		return NilFloat64ArrList
	} else {
		acc := NilFloat64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionList) FlatMapRuneArrList(f func(RuneOption) RuneArrList) RuneArrList {
	if m.IsEmpty() {
		return NilRuneArrList
	} else {
		acc := NilRuneArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionList) FlatMapStringArrList(f func(RuneOption) StringArrList) StringArrList {
	if m.IsEmpty() {
		return NilStringArrList
	} else {
		acc := NilStringArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionList) FlatMapBoolListList(f func(RuneOption) BoolListList) BoolListList {
	if m.IsEmpty() {
		return NilBoolListList
	} else {
		acc := NilBoolListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionList) FlatMapAnyListList(f func(RuneOption) AnyListList) AnyListList {
	if m.IsEmpty() {
		return NilAnyListList
	} else {
		acc := NilAnyListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionList) FlatMapByteListList(f func(RuneOption) ByteListList) ByteListList {
	if m.IsEmpty() {
		return NilByteListList
	} else {
		acc := NilByteListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionList) FlatMapIntListList(f func(RuneOption) IntListList) IntListList {
	if m.IsEmpty() {
		return NilIntListList
	} else {
		acc := NilIntListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionList) FlatMapInt32ListList(f func(RuneOption) Int32ListList) Int32ListList {
	if m.IsEmpty() {
		return NilInt32ListList
	} else {
		acc := NilInt32ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionList) FlatMapInt64ListList(f func(RuneOption) Int64ListList) Int64ListList {
	if m.IsEmpty() {
		return NilInt64ListList
	} else {
		acc := NilInt64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionList) FlatMapUintListList(f func(RuneOption) UintListList) UintListList {
	if m.IsEmpty() {
		return NilUintListList
	} else {
		acc := NilUintListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionList) FlatMapUint64ListList(f func(RuneOption) Uint64ListList) Uint64ListList {
	if m.IsEmpty() {
		return NilUint64ListList
	} else {
		acc := NilUint64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionList) FlatMapUintptrListList(f func(RuneOption) UintptrListList) UintptrListList {
	if m.IsEmpty() {
		return NilUintptrListList
	} else {
		acc := NilUintptrListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionList) FlatMapFloat32ListList(f func(RuneOption) Float32ListList) Float32ListList {
	if m.IsEmpty() {
		return NilFloat32ListList
	} else {
		acc := NilFloat32ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionList) FlatMapFloat64ListList(f func(RuneOption) Float64ListList) Float64ListList {
	if m.IsEmpty() {
		return NilFloat64ListList
	} else {
		acc := NilFloat64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionList) FlatMapRuneListList(f func(RuneOption) RuneListList) RuneListList {
	if m.IsEmpty() {
		return NilRuneListList
	} else {
		acc := NilRuneListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionList) FlatMapStringListList(f func(RuneOption) StringListList) StringListList {
	if m.IsEmpty() {
		return NilStringListList
	} else {
		acc := NilStringListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionList) FlatMapBoolOptionList(f func(RuneOption) BoolOptionList) BoolOptionList {
	if m.IsEmpty() {
		return NilBoolOptionList
	} else {
		acc := NilBoolOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionList) FlatMapAnyOptionList(f func(RuneOption) AnyOptionList) AnyOptionList {
	if m.IsEmpty() {
		return NilAnyOptionList
	} else {
		acc := NilAnyOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionList) FlatMapByteOptionList(f func(RuneOption) ByteOptionList) ByteOptionList {
	if m.IsEmpty() {
		return NilByteOptionList
	} else {
		acc := NilByteOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionList) FlatMapIntOptionList(f func(RuneOption) IntOptionList) IntOptionList {
	if m.IsEmpty() {
		return NilIntOptionList
	} else {
		acc := NilIntOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionList) FlatMapInt32OptionList(f func(RuneOption) Int32OptionList) Int32OptionList {
	if m.IsEmpty() {
		return NilInt32OptionList
	} else {
		acc := NilInt32OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionList) FlatMapInt64OptionList(f func(RuneOption) Int64OptionList) Int64OptionList {
	if m.IsEmpty() {
		return NilInt64OptionList
	} else {
		acc := NilInt64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionList) FlatMapUintOptionList(f func(RuneOption) UintOptionList) UintOptionList {
	if m.IsEmpty() {
		return NilUintOptionList
	} else {
		acc := NilUintOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionList) FlatMapUint64OptionList(f func(RuneOption) Uint64OptionList) Uint64OptionList {
	if m.IsEmpty() {
		return NilUint64OptionList
	} else {
		acc := NilUint64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionList) FlatMapUintptrOptionList(f func(RuneOption) UintptrOptionList) UintptrOptionList {
	if m.IsEmpty() {
		return NilUintptrOptionList
	} else {
		acc := NilUintptrOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionList) FlatMapFloat32OptionList(f func(RuneOption) Float32OptionList) Float32OptionList {
	if m.IsEmpty() {
		return NilFloat32OptionList
	} else {
		acc := NilFloat32OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionList) FlatMapFloat64OptionList(f func(RuneOption) Float64OptionList) Float64OptionList {
	if m.IsEmpty() {
		return NilFloat64OptionList
	} else {
		acc := NilFloat64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionList) FlatMapRuneOptionList(f func(RuneOption) RuneOptionList) RuneOptionList {
	if m.IsEmpty() {
		return NilRuneOptionList
	} else {
		acc := NilRuneOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionList) FlatMapStringOptionList(f func(RuneOption) StringOptionList) StringOptionList {
	if m.IsEmpty() {
		return NilStringOptionList
	} else {
		acc := NilStringOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionList) FlatMapBoolList(f func(StringOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBoolList
	} else {
		acc := NilBoolList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionList) FlatMapAnyList(f func(StringOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAnyList
	} else {
		acc := NilAnyList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionList) FlatMapByteList(f func(StringOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByteList
	} else {
		acc := NilByteList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionList) FlatMapIntList(f func(StringOption) IntList) IntList {
	if m.IsEmpty() {
		return NilIntList
	} else {
		acc := NilIntList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionList) FlatMapInt32List(f func(StringOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32List
	} else {
		acc := NilInt32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionList) FlatMapInt64List(f func(StringOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64List
	} else {
		acc := NilInt64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionList) FlatMapUintList(f func(StringOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUintList
	} else {
		acc := NilUintList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionList) FlatMapUint64List(f func(StringOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64List
	} else {
		acc := NilUint64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionList) FlatMapUintptrList(f func(StringOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptrList
	} else {
		acc := NilUintptrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionList) FlatMapFloat32List(f func(StringOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32List
	} else {
		acc := NilFloat32List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionList) FlatMapFloat64List(f func(StringOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64List
	} else {
		acc := NilFloat64List
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionList) FlatMapRuneList(f func(StringOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRuneList
	} else {
		acc := NilRuneList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionList) FlatMapStringList(f func(StringOption) StringList) StringList {
	if m.IsEmpty() {
		return NilStringList
	} else {
		acc := NilStringList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionList) FlatMapBoolArrList(f func(StringOption) BoolArrList) BoolArrList {
	if m.IsEmpty() {
		return NilBoolArrList
	} else {
		acc := NilBoolArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionList) FlatMapAnyArrList(f func(StringOption) AnyArrList) AnyArrList {
	if m.IsEmpty() {
		return NilAnyArrList
	} else {
		acc := NilAnyArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionList) FlatMapByteArrList(f func(StringOption) ByteArrList) ByteArrList {
	if m.IsEmpty() {
		return NilByteArrList
	} else {
		acc := NilByteArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionList) FlatMapIntArrList(f func(StringOption) IntArrList) IntArrList {
	if m.IsEmpty() {
		return NilIntArrList
	} else {
		acc := NilIntArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionList) FlatMapInt32ArrList(f func(StringOption) Int32ArrList) Int32ArrList {
	if m.IsEmpty() {
		return NilInt32ArrList
	} else {
		acc := NilInt32ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionList) FlatMapInt64ArrList(f func(StringOption) Int64ArrList) Int64ArrList {
	if m.IsEmpty() {
		return NilInt64ArrList
	} else {
		acc := NilInt64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionList) FlatMapUintArrList(f func(StringOption) UintArrList) UintArrList {
	if m.IsEmpty() {
		return NilUintArrList
	} else {
		acc := NilUintArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionList) FlatMapUint64ArrList(f func(StringOption) Uint64ArrList) Uint64ArrList {
	if m.IsEmpty() {
		return NilUint64ArrList
	} else {
		acc := NilUint64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionList) FlatMapUintptrArrList(f func(StringOption) UintptrArrList) UintptrArrList {
	if m.IsEmpty() {
		return NilUintptrArrList
	} else {
		acc := NilUintptrArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionList) FlatMapFloat32ArrList(f func(StringOption) Float32ArrList) Float32ArrList {
	if m.IsEmpty() {
		return NilFloat32ArrList
	} else {
		acc := NilFloat32ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionList) FlatMapFloat64ArrList(f func(StringOption) Float64ArrList) Float64ArrList {
	if m.IsEmpty() {
		return NilFloat64ArrList
	} else {
		acc := NilFloat64ArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionList) FlatMapRuneArrList(f func(StringOption) RuneArrList) RuneArrList {
	if m.IsEmpty() {
		return NilRuneArrList
	} else {
		acc := NilRuneArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionList) FlatMapStringArrList(f func(StringOption) StringArrList) StringArrList {
	if m.IsEmpty() {
		return NilStringArrList
	} else {
		acc := NilStringArrList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionList) FlatMapBoolListList(f func(StringOption) BoolListList) BoolListList {
	if m.IsEmpty() {
		return NilBoolListList
	} else {
		acc := NilBoolListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionList) FlatMapAnyListList(f func(StringOption) AnyListList) AnyListList {
	if m.IsEmpty() {
		return NilAnyListList
	} else {
		acc := NilAnyListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionList) FlatMapByteListList(f func(StringOption) ByteListList) ByteListList {
	if m.IsEmpty() {
		return NilByteListList
	} else {
		acc := NilByteListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionList) FlatMapIntListList(f func(StringOption) IntListList) IntListList {
	if m.IsEmpty() {
		return NilIntListList
	} else {
		acc := NilIntListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionList) FlatMapInt32ListList(f func(StringOption) Int32ListList) Int32ListList {
	if m.IsEmpty() {
		return NilInt32ListList
	} else {
		acc := NilInt32ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionList) FlatMapInt64ListList(f func(StringOption) Int64ListList) Int64ListList {
	if m.IsEmpty() {
		return NilInt64ListList
	} else {
		acc := NilInt64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionList) FlatMapUintListList(f func(StringOption) UintListList) UintListList {
	if m.IsEmpty() {
		return NilUintListList
	} else {
		acc := NilUintListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionList) FlatMapUint64ListList(f func(StringOption) Uint64ListList) Uint64ListList {
	if m.IsEmpty() {
		return NilUint64ListList
	} else {
		acc := NilUint64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionList) FlatMapUintptrListList(f func(StringOption) UintptrListList) UintptrListList {
	if m.IsEmpty() {
		return NilUintptrListList
	} else {
		acc := NilUintptrListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionList) FlatMapFloat32ListList(f func(StringOption) Float32ListList) Float32ListList {
	if m.IsEmpty() {
		return NilFloat32ListList
	} else {
		acc := NilFloat32ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionList) FlatMapFloat64ListList(f func(StringOption) Float64ListList) Float64ListList {
	if m.IsEmpty() {
		return NilFloat64ListList
	} else {
		acc := NilFloat64ListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionList) FlatMapRuneListList(f func(StringOption) RuneListList) RuneListList {
	if m.IsEmpty() {
		return NilRuneListList
	} else {
		acc := NilRuneListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionList) FlatMapStringListList(f func(StringOption) StringListList) StringListList {
	if m.IsEmpty() {
		return NilStringListList
	} else {
		acc := NilStringListList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionList) FlatMapBoolOptionList(f func(StringOption) BoolOptionList) BoolOptionList {
	if m.IsEmpty() {
		return NilBoolOptionList
	} else {
		acc := NilBoolOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionList) FlatMapAnyOptionList(f func(StringOption) AnyOptionList) AnyOptionList {
	if m.IsEmpty() {
		return NilAnyOptionList
	} else {
		acc := NilAnyOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionList) FlatMapByteOptionList(f func(StringOption) ByteOptionList) ByteOptionList {
	if m.IsEmpty() {
		return NilByteOptionList
	} else {
		acc := NilByteOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionList) FlatMapIntOptionList(f func(StringOption) IntOptionList) IntOptionList {
	if m.IsEmpty() {
		return NilIntOptionList
	} else {
		acc := NilIntOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionList) FlatMapInt32OptionList(f func(StringOption) Int32OptionList) Int32OptionList {
	if m.IsEmpty() {
		return NilInt32OptionList
	} else {
		acc := NilInt32OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionList) FlatMapInt64OptionList(f func(StringOption) Int64OptionList) Int64OptionList {
	if m.IsEmpty() {
		return NilInt64OptionList
	} else {
		acc := NilInt64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionList) FlatMapUintOptionList(f func(StringOption) UintOptionList) UintOptionList {
	if m.IsEmpty() {
		return NilUintOptionList
	} else {
		acc := NilUintOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionList) FlatMapUint64OptionList(f func(StringOption) Uint64OptionList) Uint64OptionList {
	if m.IsEmpty() {
		return NilUint64OptionList
	} else {
		acc := NilUint64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionList) FlatMapUintptrOptionList(f func(StringOption) UintptrOptionList) UintptrOptionList {
	if m.IsEmpty() {
		return NilUintptrOptionList
	} else {
		acc := NilUintptrOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionList) FlatMapFloat32OptionList(f func(StringOption) Float32OptionList) Float32OptionList {
	if m.IsEmpty() {
		return NilFloat32OptionList
	} else {
		acc := NilFloat32OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionList) FlatMapFloat64OptionList(f func(StringOption) Float64OptionList) Float64OptionList {
	if m.IsEmpty() {
		return NilFloat64OptionList
	} else {
		acc := NilFloat64OptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionList) FlatMapRuneOptionList(f func(StringOption) RuneOptionList) RuneOptionList {
	if m.IsEmpty() {
		return NilRuneOptionList
	} else {
		acc := NilRuneOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionList) FlatMapStringOptionList(f func(StringOption) StringOptionList) StringOptionList {
	if m.IsEmpty() {
		return NilStringOptionList
	} else {
		acc := NilStringOptionList
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
