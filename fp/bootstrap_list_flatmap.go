// bootstrap_list_flatmap.go
// DO NOT EDIT THIS FILE WAS GENERATED AUTOMATICALLY BY https://github.com/zx80live/gofp-bootstrap

package fp

func (m BoolList) FlatMapBool(f func(bool) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolList) FlatMapString(f func(bool) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolList) FlatMapInt(f func(bool) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolList) FlatMapInt8(f func(bool) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolList) FlatMapInt16(f func(bool) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolList) FlatMapInt32(f func(bool) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolList) FlatMapInt64(f func(bool) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolList) FlatMapUint(f func(bool) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolList) FlatMapUint8(f func(bool) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolList) FlatMapUint16(f func(bool) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolList) FlatMapUint32(f func(bool) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolList) FlatMapUint64(f func(bool) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolList) FlatMapUintptr(f func(bool) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolList) FlatMapByte(f func(bool) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolList) FlatMapRune(f func(bool) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolList) FlatMapFloat32(f func(bool) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolList) FlatMapFloat64(f func(bool) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolList) FlatMapComplex64(f func(bool) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolList) FlatMapComplex128(f func(bool) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolList) FlatMapAny(f func(bool) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringList) FlatMapBool(f func(string) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringList) FlatMapString(f func(string) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringList) FlatMapInt(f func(string) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringList) FlatMapInt8(f func(string) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringList) FlatMapInt16(f func(string) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringList) FlatMapInt32(f func(string) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringList) FlatMapInt64(f func(string) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringList) FlatMapUint(f func(string) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringList) FlatMapUint8(f func(string) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringList) FlatMapUint16(f func(string) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringList) FlatMapUint32(f func(string) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringList) FlatMapUint64(f func(string) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringList) FlatMapUintptr(f func(string) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringList) FlatMapByte(f func(string) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringList) FlatMapRune(f func(string) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringList) FlatMapFloat32(f func(string) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringList) FlatMapFloat64(f func(string) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringList) FlatMapComplex64(f func(string) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringList) FlatMapComplex128(f func(string) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringList) FlatMapAny(f func(string) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntList) FlatMapBool(f func(int) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntList) FlatMapString(f func(int) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntList) FlatMapInt(f func(int) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntList) FlatMapInt8(f func(int) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntList) FlatMapInt16(f func(int) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntList) FlatMapInt32(f func(int) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntList) FlatMapInt64(f func(int) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntList) FlatMapUint(f func(int) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntList) FlatMapUint8(f func(int) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntList) FlatMapUint16(f func(int) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntList) FlatMapUint32(f func(int) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntList) FlatMapUint64(f func(int) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntList) FlatMapUintptr(f func(int) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntList) FlatMapByte(f func(int) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntList) FlatMapRune(f func(int) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntList) FlatMapFloat32(f func(int) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntList) FlatMapFloat64(f func(int) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntList) FlatMapComplex64(f func(int) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntList) FlatMapComplex128(f func(int) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntList) FlatMapAny(f func(int) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8List) FlatMapBool(f func(int8) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8List) FlatMapString(f func(int8) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8List) FlatMapInt(f func(int8) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8List) FlatMapInt8(f func(int8) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8List) FlatMapInt16(f func(int8) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8List) FlatMapInt32(f func(int8) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8List) FlatMapInt64(f func(int8) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8List) FlatMapUint(f func(int8) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8List) FlatMapUint8(f func(int8) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8List) FlatMapUint16(f func(int8) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8List) FlatMapUint32(f func(int8) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8List) FlatMapUint64(f func(int8) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8List) FlatMapUintptr(f func(int8) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8List) FlatMapByte(f func(int8) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8List) FlatMapRune(f func(int8) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8List) FlatMapFloat32(f func(int8) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8List) FlatMapFloat64(f func(int8) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8List) FlatMapComplex64(f func(int8) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8List) FlatMapComplex128(f func(int8) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8List) FlatMapAny(f func(int8) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16List) FlatMapBool(f func(int16) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16List) FlatMapString(f func(int16) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16List) FlatMapInt(f func(int16) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16List) FlatMapInt8(f func(int16) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16List) FlatMapInt16(f func(int16) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16List) FlatMapInt32(f func(int16) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16List) FlatMapInt64(f func(int16) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16List) FlatMapUint(f func(int16) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16List) FlatMapUint8(f func(int16) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16List) FlatMapUint16(f func(int16) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16List) FlatMapUint32(f func(int16) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16List) FlatMapUint64(f func(int16) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16List) FlatMapUintptr(f func(int16) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16List) FlatMapByte(f func(int16) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16List) FlatMapRune(f func(int16) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16List) FlatMapFloat32(f func(int16) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16List) FlatMapFloat64(f func(int16) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16List) FlatMapComplex64(f func(int16) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16List) FlatMapComplex128(f func(int16) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16List) FlatMapAny(f func(int16) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32List) FlatMapBool(f func(int32) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32List) FlatMapString(f func(int32) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32List) FlatMapInt(f func(int32) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32List) FlatMapInt8(f func(int32) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32List) FlatMapInt16(f func(int32) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32List) FlatMapInt32(f func(int32) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32List) FlatMapInt64(f func(int32) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32List) FlatMapUint(f func(int32) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32List) FlatMapUint8(f func(int32) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32List) FlatMapUint16(f func(int32) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32List) FlatMapUint32(f func(int32) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32List) FlatMapUint64(f func(int32) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32List) FlatMapUintptr(f func(int32) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32List) FlatMapByte(f func(int32) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32List) FlatMapRune(f func(int32) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32List) FlatMapFloat32(f func(int32) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32List) FlatMapFloat64(f func(int32) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32List) FlatMapComplex64(f func(int32) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32List) FlatMapComplex128(f func(int32) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32List) FlatMapAny(f func(int32) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64List) FlatMapBool(f func(int64) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64List) FlatMapString(f func(int64) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64List) FlatMapInt(f func(int64) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64List) FlatMapInt8(f func(int64) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64List) FlatMapInt16(f func(int64) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64List) FlatMapInt32(f func(int64) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64List) FlatMapInt64(f func(int64) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64List) FlatMapUint(f func(int64) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64List) FlatMapUint8(f func(int64) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64List) FlatMapUint16(f func(int64) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64List) FlatMapUint32(f func(int64) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64List) FlatMapUint64(f func(int64) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64List) FlatMapUintptr(f func(int64) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64List) FlatMapByte(f func(int64) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64List) FlatMapRune(f func(int64) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64List) FlatMapFloat32(f func(int64) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64List) FlatMapFloat64(f func(int64) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64List) FlatMapComplex64(f func(int64) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64List) FlatMapComplex128(f func(int64) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64List) FlatMapAny(f func(int64) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintList) FlatMapBool(f func(uint) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintList) FlatMapString(f func(uint) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintList) FlatMapInt(f func(uint) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintList) FlatMapInt8(f func(uint) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintList) FlatMapInt16(f func(uint) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintList) FlatMapInt32(f func(uint) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintList) FlatMapInt64(f func(uint) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintList) FlatMapUint(f func(uint) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintList) FlatMapUint8(f func(uint) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintList) FlatMapUint16(f func(uint) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintList) FlatMapUint32(f func(uint) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintList) FlatMapUint64(f func(uint) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintList) FlatMapUintptr(f func(uint) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintList) FlatMapByte(f func(uint) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintList) FlatMapRune(f func(uint) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintList) FlatMapFloat32(f func(uint) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintList) FlatMapFloat64(f func(uint) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintList) FlatMapComplex64(f func(uint) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintList) FlatMapComplex128(f func(uint) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintList) FlatMapAny(f func(uint) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8List) FlatMapBool(f func(uint8) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8List) FlatMapString(f func(uint8) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8List) FlatMapInt(f func(uint8) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8List) FlatMapInt8(f func(uint8) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8List) FlatMapInt16(f func(uint8) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8List) FlatMapInt32(f func(uint8) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8List) FlatMapInt64(f func(uint8) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8List) FlatMapUint(f func(uint8) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8List) FlatMapUint8(f func(uint8) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8List) FlatMapUint16(f func(uint8) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8List) FlatMapUint32(f func(uint8) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8List) FlatMapUint64(f func(uint8) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8List) FlatMapUintptr(f func(uint8) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8List) FlatMapByte(f func(uint8) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8List) FlatMapRune(f func(uint8) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8List) FlatMapFloat32(f func(uint8) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8List) FlatMapFloat64(f func(uint8) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8List) FlatMapComplex64(f func(uint8) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8List) FlatMapComplex128(f func(uint8) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8List) FlatMapAny(f func(uint8) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16List) FlatMapBool(f func(uint16) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16List) FlatMapString(f func(uint16) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16List) FlatMapInt(f func(uint16) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16List) FlatMapInt8(f func(uint16) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16List) FlatMapInt16(f func(uint16) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16List) FlatMapInt32(f func(uint16) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16List) FlatMapInt64(f func(uint16) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16List) FlatMapUint(f func(uint16) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16List) FlatMapUint8(f func(uint16) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16List) FlatMapUint16(f func(uint16) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16List) FlatMapUint32(f func(uint16) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16List) FlatMapUint64(f func(uint16) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16List) FlatMapUintptr(f func(uint16) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16List) FlatMapByte(f func(uint16) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16List) FlatMapRune(f func(uint16) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16List) FlatMapFloat32(f func(uint16) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16List) FlatMapFloat64(f func(uint16) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16List) FlatMapComplex64(f func(uint16) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16List) FlatMapComplex128(f func(uint16) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16List) FlatMapAny(f func(uint16) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32List) FlatMapBool(f func(uint32) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32List) FlatMapString(f func(uint32) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32List) FlatMapInt(f func(uint32) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32List) FlatMapInt8(f func(uint32) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32List) FlatMapInt16(f func(uint32) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32List) FlatMapInt32(f func(uint32) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32List) FlatMapInt64(f func(uint32) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32List) FlatMapUint(f func(uint32) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32List) FlatMapUint8(f func(uint32) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32List) FlatMapUint16(f func(uint32) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32List) FlatMapUint32(f func(uint32) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32List) FlatMapUint64(f func(uint32) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32List) FlatMapUintptr(f func(uint32) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32List) FlatMapByte(f func(uint32) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32List) FlatMapRune(f func(uint32) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32List) FlatMapFloat32(f func(uint32) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32List) FlatMapFloat64(f func(uint32) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32List) FlatMapComplex64(f func(uint32) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32List) FlatMapComplex128(f func(uint32) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32List) FlatMapAny(f func(uint32) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64List) FlatMapBool(f func(uint64) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64List) FlatMapString(f func(uint64) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64List) FlatMapInt(f func(uint64) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64List) FlatMapInt8(f func(uint64) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64List) FlatMapInt16(f func(uint64) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64List) FlatMapInt32(f func(uint64) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64List) FlatMapInt64(f func(uint64) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64List) FlatMapUint(f func(uint64) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64List) FlatMapUint8(f func(uint64) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64List) FlatMapUint16(f func(uint64) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64List) FlatMapUint32(f func(uint64) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64List) FlatMapUint64(f func(uint64) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64List) FlatMapUintptr(f func(uint64) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64List) FlatMapByte(f func(uint64) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64List) FlatMapRune(f func(uint64) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64List) FlatMapFloat32(f func(uint64) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64List) FlatMapFloat64(f func(uint64) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64List) FlatMapComplex64(f func(uint64) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64List) FlatMapComplex128(f func(uint64) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64List) FlatMapAny(f func(uint64) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrList) FlatMapBool(f func(uintptr) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrList) FlatMapString(f func(uintptr) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrList) FlatMapInt(f func(uintptr) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrList) FlatMapInt8(f func(uintptr) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrList) FlatMapInt16(f func(uintptr) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrList) FlatMapInt32(f func(uintptr) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrList) FlatMapInt64(f func(uintptr) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrList) FlatMapUint(f func(uintptr) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrList) FlatMapUint8(f func(uintptr) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrList) FlatMapUint16(f func(uintptr) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrList) FlatMapUint32(f func(uintptr) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrList) FlatMapUint64(f func(uintptr) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrList) FlatMapUintptr(f func(uintptr) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrList) FlatMapByte(f func(uintptr) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrList) FlatMapRune(f func(uintptr) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrList) FlatMapFloat32(f func(uintptr) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrList) FlatMapFloat64(f func(uintptr) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrList) FlatMapComplex64(f func(uintptr) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrList) FlatMapComplex128(f func(uintptr) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrList) FlatMapAny(f func(uintptr) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteList) FlatMapBool(f func(byte) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteList) FlatMapString(f func(byte) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteList) FlatMapInt(f func(byte) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteList) FlatMapInt8(f func(byte) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteList) FlatMapInt16(f func(byte) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteList) FlatMapInt32(f func(byte) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteList) FlatMapInt64(f func(byte) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteList) FlatMapUint(f func(byte) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteList) FlatMapUint8(f func(byte) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteList) FlatMapUint16(f func(byte) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteList) FlatMapUint32(f func(byte) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteList) FlatMapUint64(f func(byte) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteList) FlatMapUintptr(f func(byte) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteList) FlatMapByte(f func(byte) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteList) FlatMapRune(f func(byte) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteList) FlatMapFloat32(f func(byte) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteList) FlatMapFloat64(f func(byte) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteList) FlatMapComplex64(f func(byte) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteList) FlatMapComplex128(f func(byte) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteList) FlatMapAny(f func(byte) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneList) FlatMapBool(f func(rune) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneList) FlatMapString(f func(rune) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneList) FlatMapInt(f func(rune) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneList) FlatMapInt8(f func(rune) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneList) FlatMapInt16(f func(rune) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneList) FlatMapInt32(f func(rune) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneList) FlatMapInt64(f func(rune) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneList) FlatMapUint(f func(rune) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneList) FlatMapUint8(f func(rune) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneList) FlatMapUint16(f func(rune) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneList) FlatMapUint32(f func(rune) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneList) FlatMapUint64(f func(rune) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneList) FlatMapUintptr(f func(rune) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneList) FlatMapByte(f func(rune) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneList) FlatMapRune(f func(rune) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneList) FlatMapFloat32(f func(rune) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneList) FlatMapFloat64(f func(rune) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneList) FlatMapComplex64(f func(rune) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneList) FlatMapComplex128(f func(rune) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneList) FlatMapAny(f func(rune) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32List) FlatMapBool(f func(float32) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32List) FlatMapString(f func(float32) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32List) FlatMapInt(f func(float32) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32List) FlatMapInt8(f func(float32) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32List) FlatMapInt16(f func(float32) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32List) FlatMapInt32(f func(float32) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32List) FlatMapInt64(f func(float32) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32List) FlatMapUint(f func(float32) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32List) FlatMapUint8(f func(float32) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32List) FlatMapUint16(f func(float32) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32List) FlatMapUint32(f func(float32) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32List) FlatMapUint64(f func(float32) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32List) FlatMapUintptr(f func(float32) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32List) FlatMapByte(f func(float32) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32List) FlatMapRune(f func(float32) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32List) FlatMapFloat32(f func(float32) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32List) FlatMapFloat64(f func(float32) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32List) FlatMapComplex64(f func(float32) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32List) FlatMapComplex128(f func(float32) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32List) FlatMapAny(f func(float32) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64List) FlatMapBool(f func(float64) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64List) FlatMapString(f func(float64) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64List) FlatMapInt(f func(float64) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64List) FlatMapInt8(f func(float64) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64List) FlatMapInt16(f func(float64) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64List) FlatMapInt32(f func(float64) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64List) FlatMapInt64(f func(float64) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64List) FlatMapUint(f func(float64) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64List) FlatMapUint8(f func(float64) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64List) FlatMapUint16(f func(float64) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64List) FlatMapUint32(f func(float64) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64List) FlatMapUint64(f func(float64) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64List) FlatMapUintptr(f func(float64) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64List) FlatMapByte(f func(float64) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64List) FlatMapRune(f func(float64) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64List) FlatMapFloat32(f func(float64) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64List) FlatMapFloat64(f func(float64) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64List) FlatMapComplex64(f func(float64) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64List) FlatMapComplex128(f func(float64) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64List) FlatMapAny(f func(float64) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64List) FlatMapBool(f func(complex64) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64List) FlatMapString(f func(complex64) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64List) FlatMapInt(f func(complex64) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64List) FlatMapInt8(f func(complex64) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64List) FlatMapInt16(f func(complex64) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64List) FlatMapInt32(f func(complex64) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64List) FlatMapInt64(f func(complex64) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64List) FlatMapUint(f func(complex64) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64List) FlatMapUint8(f func(complex64) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64List) FlatMapUint16(f func(complex64) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64List) FlatMapUint32(f func(complex64) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64List) FlatMapUint64(f func(complex64) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64List) FlatMapUintptr(f func(complex64) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64List) FlatMapByte(f func(complex64) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64List) FlatMapRune(f func(complex64) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64List) FlatMapFloat32(f func(complex64) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64List) FlatMapFloat64(f func(complex64) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64List) FlatMapComplex64(f func(complex64) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64List) FlatMapComplex128(f func(complex64) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64List) FlatMapAny(f func(complex64) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128List) FlatMapBool(f func(complex128) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128List) FlatMapString(f func(complex128) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128List) FlatMapInt(f func(complex128) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128List) FlatMapInt8(f func(complex128) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128List) FlatMapInt16(f func(complex128) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128List) FlatMapInt32(f func(complex128) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128List) FlatMapInt64(f func(complex128) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128List) FlatMapUint(f func(complex128) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128List) FlatMapUint8(f func(complex128) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128List) FlatMapUint16(f func(complex128) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128List) FlatMapUint32(f func(complex128) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128List) FlatMapUint64(f func(complex128) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128List) FlatMapUintptr(f func(complex128) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128List) FlatMapByte(f func(complex128) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128List) FlatMapRune(f func(complex128) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128List) FlatMapFloat32(f func(complex128) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128List) FlatMapFloat64(f func(complex128) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128List) FlatMapComplex64(f func(complex128) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128List) FlatMapComplex128(f func(complex128) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128List) FlatMapAny(f func(complex128) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyList) FlatMapBool(f func(Any) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyList) FlatMapString(f func(Any) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyList) FlatMapInt(f func(Any) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyList) FlatMapInt8(f func(Any) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyList) FlatMapInt16(f func(Any) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyList) FlatMapInt32(f func(Any) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyList) FlatMapInt64(f func(Any) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyList) FlatMapUint(f func(Any) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyList) FlatMapUint8(f func(Any) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyList) FlatMapUint16(f func(Any) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyList) FlatMapUint32(f func(Any) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyList) FlatMapUint64(f func(Any) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyList) FlatMapUintptr(f func(Any) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyList) FlatMapByte(f func(Any) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyList) FlatMapRune(f func(Any) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyList) FlatMapFloat32(f func(Any) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyList) FlatMapFloat64(f func(Any) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyList) FlatMapComplex64(f func(Any) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyList) FlatMapComplex128(f func(Any) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyList) FlatMapAny(f func(Any) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionList) FlatMapBool(f func(BoolOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionList) FlatMapString(f func(BoolOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionList) FlatMapInt(f func(BoolOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionList) FlatMapInt8(f func(BoolOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionList) FlatMapInt16(f func(BoolOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionList) FlatMapInt32(f func(BoolOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionList) FlatMapInt64(f func(BoolOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionList) FlatMapUint(f func(BoolOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionList) FlatMapUint8(f func(BoolOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionList) FlatMapUint16(f func(BoolOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionList) FlatMapUint32(f func(BoolOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionList) FlatMapUint64(f func(BoolOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionList) FlatMapUintptr(f func(BoolOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionList) FlatMapByte(f func(BoolOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionList) FlatMapRune(f func(BoolOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionList) FlatMapFloat32(f func(BoolOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionList) FlatMapFloat64(f func(BoolOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionList) FlatMapComplex64(f func(BoolOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionList) FlatMapComplex128(f func(BoolOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionList) FlatMapAny(f func(BoolOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionList) FlatMapBool(f func(StringOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionList) FlatMapString(f func(StringOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionList) FlatMapInt(f func(StringOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionList) FlatMapInt8(f func(StringOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionList) FlatMapInt16(f func(StringOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionList) FlatMapInt32(f func(StringOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionList) FlatMapInt64(f func(StringOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionList) FlatMapUint(f func(StringOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionList) FlatMapUint8(f func(StringOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionList) FlatMapUint16(f func(StringOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionList) FlatMapUint32(f func(StringOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionList) FlatMapUint64(f func(StringOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionList) FlatMapUintptr(f func(StringOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionList) FlatMapByte(f func(StringOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionList) FlatMapRune(f func(StringOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionList) FlatMapFloat32(f func(StringOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionList) FlatMapFloat64(f func(StringOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionList) FlatMapComplex64(f func(StringOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionList) FlatMapComplex128(f func(StringOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionList) FlatMapAny(f func(StringOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionList) FlatMapBool(f func(IntOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionList) FlatMapString(f func(IntOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionList) FlatMapInt(f func(IntOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionList) FlatMapInt8(f func(IntOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionList) FlatMapInt16(f func(IntOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionList) FlatMapInt32(f func(IntOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionList) FlatMapInt64(f func(IntOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionList) FlatMapUint(f func(IntOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionList) FlatMapUint8(f func(IntOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionList) FlatMapUint16(f func(IntOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionList) FlatMapUint32(f func(IntOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionList) FlatMapUint64(f func(IntOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionList) FlatMapUintptr(f func(IntOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionList) FlatMapByte(f func(IntOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionList) FlatMapRune(f func(IntOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionList) FlatMapFloat32(f func(IntOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionList) FlatMapFloat64(f func(IntOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionList) FlatMapComplex64(f func(IntOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionList) FlatMapComplex128(f func(IntOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionList) FlatMapAny(f func(IntOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionList) FlatMapBool(f func(Int8Option) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionList) FlatMapString(f func(Int8Option) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionList) FlatMapInt(f func(Int8Option) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionList) FlatMapInt8(f func(Int8Option) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionList) FlatMapInt16(f func(Int8Option) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionList) FlatMapInt32(f func(Int8Option) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionList) FlatMapInt64(f func(Int8Option) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionList) FlatMapUint(f func(Int8Option) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionList) FlatMapUint8(f func(Int8Option) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionList) FlatMapUint16(f func(Int8Option) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionList) FlatMapUint32(f func(Int8Option) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionList) FlatMapUint64(f func(Int8Option) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionList) FlatMapUintptr(f func(Int8Option) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionList) FlatMapByte(f func(Int8Option) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionList) FlatMapRune(f func(Int8Option) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionList) FlatMapFloat32(f func(Int8Option) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionList) FlatMapFloat64(f func(Int8Option) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionList) FlatMapComplex64(f func(Int8Option) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionList) FlatMapComplex128(f func(Int8Option) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionList) FlatMapAny(f func(Int8Option) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionList) FlatMapBool(f func(Int16Option) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionList) FlatMapString(f func(Int16Option) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionList) FlatMapInt(f func(Int16Option) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionList) FlatMapInt8(f func(Int16Option) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionList) FlatMapInt16(f func(Int16Option) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionList) FlatMapInt32(f func(Int16Option) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionList) FlatMapInt64(f func(Int16Option) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionList) FlatMapUint(f func(Int16Option) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionList) FlatMapUint8(f func(Int16Option) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionList) FlatMapUint16(f func(Int16Option) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionList) FlatMapUint32(f func(Int16Option) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionList) FlatMapUint64(f func(Int16Option) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionList) FlatMapUintptr(f func(Int16Option) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionList) FlatMapByte(f func(Int16Option) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionList) FlatMapRune(f func(Int16Option) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionList) FlatMapFloat32(f func(Int16Option) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionList) FlatMapFloat64(f func(Int16Option) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionList) FlatMapComplex64(f func(Int16Option) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionList) FlatMapComplex128(f func(Int16Option) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionList) FlatMapAny(f func(Int16Option) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionList) FlatMapBool(f func(Int32Option) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionList) FlatMapString(f func(Int32Option) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionList) FlatMapInt(f func(Int32Option) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionList) FlatMapInt8(f func(Int32Option) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionList) FlatMapInt16(f func(Int32Option) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionList) FlatMapInt32(f func(Int32Option) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionList) FlatMapInt64(f func(Int32Option) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionList) FlatMapUint(f func(Int32Option) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionList) FlatMapUint8(f func(Int32Option) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionList) FlatMapUint16(f func(Int32Option) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionList) FlatMapUint32(f func(Int32Option) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionList) FlatMapUint64(f func(Int32Option) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionList) FlatMapUintptr(f func(Int32Option) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionList) FlatMapByte(f func(Int32Option) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionList) FlatMapRune(f func(Int32Option) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionList) FlatMapFloat32(f func(Int32Option) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionList) FlatMapFloat64(f func(Int32Option) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionList) FlatMapComplex64(f func(Int32Option) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionList) FlatMapComplex128(f func(Int32Option) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionList) FlatMapAny(f func(Int32Option) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionList) FlatMapBool(f func(Int64Option) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionList) FlatMapString(f func(Int64Option) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionList) FlatMapInt(f func(Int64Option) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionList) FlatMapInt8(f func(Int64Option) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionList) FlatMapInt16(f func(Int64Option) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionList) FlatMapInt32(f func(Int64Option) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionList) FlatMapInt64(f func(Int64Option) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionList) FlatMapUint(f func(Int64Option) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionList) FlatMapUint8(f func(Int64Option) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionList) FlatMapUint16(f func(Int64Option) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionList) FlatMapUint32(f func(Int64Option) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionList) FlatMapUint64(f func(Int64Option) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionList) FlatMapUintptr(f func(Int64Option) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionList) FlatMapByte(f func(Int64Option) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionList) FlatMapRune(f func(Int64Option) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionList) FlatMapFloat32(f func(Int64Option) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionList) FlatMapFloat64(f func(Int64Option) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionList) FlatMapComplex64(f func(Int64Option) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionList) FlatMapComplex128(f func(Int64Option) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionList) FlatMapAny(f func(Int64Option) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionList) FlatMapBool(f func(UintOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionList) FlatMapString(f func(UintOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionList) FlatMapInt(f func(UintOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionList) FlatMapInt8(f func(UintOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionList) FlatMapInt16(f func(UintOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionList) FlatMapInt32(f func(UintOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionList) FlatMapInt64(f func(UintOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionList) FlatMapUint(f func(UintOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionList) FlatMapUint8(f func(UintOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionList) FlatMapUint16(f func(UintOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionList) FlatMapUint32(f func(UintOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionList) FlatMapUint64(f func(UintOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionList) FlatMapUintptr(f func(UintOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionList) FlatMapByte(f func(UintOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionList) FlatMapRune(f func(UintOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionList) FlatMapFloat32(f func(UintOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionList) FlatMapFloat64(f func(UintOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionList) FlatMapComplex64(f func(UintOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionList) FlatMapComplex128(f func(UintOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionList) FlatMapAny(f func(UintOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionList) FlatMapBool(f func(Uint8Option) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionList) FlatMapString(f func(Uint8Option) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionList) FlatMapInt(f func(Uint8Option) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionList) FlatMapInt8(f func(Uint8Option) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionList) FlatMapInt16(f func(Uint8Option) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionList) FlatMapInt32(f func(Uint8Option) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionList) FlatMapInt64(f func(Uint8Option) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionList) FlatMapUint(f func(Uint8Option) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionList) FlatMapUint8(f func(Uint8Option) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionList) FlatMapUint16(f func(Uint8Option) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionList) FlatMapUint32(f func(Uint8Option) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionList) FlatMapUint64(f func(Uint8Option) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionList) FlatMapUintptr(f func(Uint8Option) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionList) FlatMapByte(f func(Uint8Option) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionList) FlatMapRune(f func(Uint8Option) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionList) FlatMapFloat32(f func(Uint8Option) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionList) FlatMapFloat64(f func(Uint8Option) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionList) FlatMapComplex64(f func(Uint8Option) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionList) FlatMapComplex128(f func(Uint8Option) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionList) FlatMapAny(f func(Uint8Option) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionList) FlatMapBool(f func(Uint16Option) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionList) FlatMapString(f func(Uint16Option) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionList) FlatMapInt(f func(Uint16Option) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionList) FlatMapInt8(f func(Uint16Option) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionList) FlatMapInt16(f func(Uint16Option) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionList) FlatMapInt32(f func(Uint16Option) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionList) FlatMapInt64(f func(Uint16Option) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionList) FlatMapUint(f func(Uint16Option) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionList) FlatMapUint8(f func(Uint16Option) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionList) FlatMapUint16(f func(Uint16Option) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionList) FlatMapUint32(f func(Uint16Option) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionList) FlatMapUint64(f func(Uint16Option) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionList) FlatMapUintptr(f func(Uint16Option) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionList) FlatMapByte(f func(Uint16Option) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionList) FlatMapRune(f func(Uint16Option) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionList) FlatMapFloat32(f func(Uint16Option) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionList) FlatMapFloat64(f func(Uint16Option) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionList) FlatMapComplex64(f func(Uint16Option) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionList) FlatMapComplex128(f func(Uint16Option) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionList) FlatMapAny(f func(Uint16Option) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionList) FlatMapBool(f func(Uint32Option) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionList) FlatMapString(f func(Uint32Option) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionList) FlatMapInt(f func(Uint32Option) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionList) FlatMapInt8(f func(Uint32Option) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionList) FlatMapInt16(f func(Uint32Option) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionList) FlatMapInt32(f func(Uint32Option) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionList) FlatMapInt64(f func(Uint32Option) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionList) FlatMapUint(f func(Uint32Option) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionList) FlatMapUint8(f func(Uint32Option) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionList) FlatMapUint16(f func(Uint32Option) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionList) FlatMapUint32(f func(Uint32Option) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionList) FlatMapUint64(f func(Uint32Option) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionList) FlatMapUintptr(f func(Uint32Option) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionList) FlatMapByte(f func(Uint32Option) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionList) FlatMapRune(f func(Uint32Option) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionList) FlatMapFloat32(f func(Uint32Option) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionList) FlatMapFloat64(f func(Uint32Option) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionList) FlatMapComplex64(f func(Uint32Option) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionList) FlatMapComplex128(f func(Uint32Option) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionList) FlatMapAny(f func(Uint32Option) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionList) FlatMapBool(f func(Uint64Option) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionList) FlatMapString(f func(Uint64Option) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionList) FlatMapInt(f func(Uint64Option) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionList) FlatMapInt8(f func(Uint64Option) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionList) FlatMapInt16(f func(Uint64Option) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionList) FlatMapInt32(f func(Uint64Option) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionList) FlatMapInt64(f func(Uint64Option) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionList) FlatMapUint(f func(Uint64Option) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionList) FlatMapUint8(f func(Uint64Option) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionList) FlatMapUint16(f func(Uint64Option) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionList) FlatMapUint32(f func(Uint64Option) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionList) FlatMapUint64(f func(Uint64Option) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionList) FlatMapUintptr(f func(Uint64Option) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionList) FlatMapByte(f func(Uint64Option) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionList) FlatMapRune(f func(Uint64Option) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionList) FlatMapFloat32(f func(Uint64Option) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionList) FlatMapFloat64(f func(Uint64Option) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionList) FlatMapComplex64(f func(Uint64Option) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionList) FlatMapComplex128(f func(Uint64Option) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionList) FlatMapAny(f func(Uint64Option) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionList) FlatMapBool(f func(UintptrOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionList) FlatMapString(f func(UintptrOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionList) FlatMapInt(f func(UintptrOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionList) FlatMapInt8(f func(UintptrOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionList) FlatMapInt16(f func(UintptrOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionList) FlatMapInt32(f func(UintptrOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionList) FlatMapInt64(f func(UintptrOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionList) FlatMapUint(f func(UintptrOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionList) FlatMapUint8(f func(UintptrOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionList) FlatMapUint16(f func(UintptrOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionList) FlatMapUint32(f func(UintptrOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionList) FlatMapUint64(f func(UintptrOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionList) FlatMapUintptr(f func(UintptrOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionList) FlatMapByte(f func(UintptrOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionList) FlatMapRune(f func(UintptrOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionList) FlatMapFloat32(f func(UintptrOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionList) FlatMapFloat64(f func(UintptrOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionList) FlatMapComplex64(f func(UintptrOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionList) FlatMapComplex128(f func(UintptrOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionList) FlatMapAny(f func(UintptrOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionList) FlatMapBool(f func(ByteOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionList) FlatMapString(f func(ByteOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionList) FlatMapInt(f func(ByteOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionList) FlatMapInt8(f func(ByteOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionList) FlatMapInt16(f func(ByteOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionList) FlatMapInt32(f func(ByteOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionList) FlatMapInt64(f func(ByteOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionList) FlatMapUint(f func(ByteOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionList) FlatMapUint8(f func(ByteOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionList) FlatMapUint16(f func(ByteOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionList) FlatMapUint32(f func(ByteOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionList) FlatMapUint64(f func(ByteOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionList) FlatMapUintptr(f func(ByteOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionList) FlatMapByte(f func(ByteOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionList) FlatMapRune(f func(ByteOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionList) FlatMapFloat32(f func(ByteOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionList) FlatMapFloat64(f func(ByteOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionList) FlatMapComplex64(f func(ByteOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionList) FlatMapComplex128(f func(ByteOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionList) FlatMapAny(f func(ByteOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionList) FlatMapBool(f func(RuneOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionList) FlatMapString(f func(RuneOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionList) FlatMapInt(f func(RuneOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionList) FlatMapInt8(f func(RuneOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionList) FlatMapInt16(f func(RuneOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionList) FlatMapInt32(f func(RuneOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionList) FlatMapInt64(f func(RuneOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionList) FlatMapUint(f func(RuneOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionList) FlatMapUint8(f func(RuneOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionList) FlatMapUint16(f func(RuneOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionList) FlatMapUint32(f func(RuneOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionList) FlatMapUint64(f func(RuneOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionList) FlatMapUintptr(f func(RuneOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionList) FlatMapByte(f func(RuneOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionList) FlatMapRune(f func(RuneOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionList) FlatMapFloat32(f func(RuneOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionList) FlatMapFloat64(f func(RuneOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionList) FlatMapComplex64(f func(RuneOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionList) FlatMapComplex128(f func(RuneOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionList) FlatMapAny(f func(RuneOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionList) FlatMapBool(f func(Float32Option) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionList) FlatMapString(f func(Float32Option) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionList) FlatMapInt(f func(Float32Option) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionList) FlatMapInt8(f func(Float32Option) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionList) FlatMapInt16(f func(Float32Option) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionList) FlatMapInt32(f func(Float32Option) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionList) FlatMapInt64(f func(Float32Option) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionList) FlatMapUint(f func(Float32Option) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionList) FlatMapUint8(f func(Float32Option) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionList) FlatMapUint16(f func(Float32Option) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionList) FlatMapUint32(f func(Float32Option) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionList) FlatMapUint64(f func(Float32Option) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionList) FlatMapUintptr(f func(Float32Option) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionList) FlatMapByte(f func(Float32Option) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionList) FlatMapRune(f func(Float32Option) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionList) FlatMapFloat32(f func(Float32Option) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionList) FlatMapFloat64(f func(Float32Option) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionList) FlatMapComplex64(f func(Float32Option) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionList) FlatMapComplex128(f func(Float32Option) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionList) FlatMapAny(f func(Float32Option) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionList) FlatMapBool(f func(Float64Option) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionList) FlatMapString(f func(Float64Option) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionList) FlatMapInt(f func(Float64Option) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionList) FlatMapInt8(f func(Float64Option) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionList) FlatMapInt16(f func(Float64Option) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionList) FlatMapInt32(f func(Float64Option) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionList) FlatMapInt64(f func(Float64Option) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionList) FlatMapUint(f func(Float64Option) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionList) FlatMapUint8(f func(Float64Option) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionList) FlatMapUint16(f func(Float64Option) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionList) FlatMapUint32(f func(Float64Option) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionList) FlatMapUint64(f func(Float64Option) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionList) FlatMapUintptr(f func(Float64Option) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionList) FlatMapByte(f func(Float64Option) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionList) FlatMapRune(f func(Float64Option) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionList) FlatMapFloat32(f func(Float64Option) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionList) FlatMapFloat64(f func(Float64Option) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionList) FlatMapComplex64(f func(Float64Option) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionList) FlatMapComplex128(f func(Float64Option) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionList) FlatMapAny(f func(Float64Option) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionList) FlatMapBool(f func(Complex64Option) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionList) FlatMapString(f func(Complex64Option) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionList) FlatMapInt(f func(Complex64Option) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionList) FlatMapInt8(f func(Complex64Option) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionList) FlatMapInt16(f func(Complex64Option) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionList) FlatMapInt32(f func(Complex64Option) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionList) FlatMapInt64(f func(Complex64Option) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionList) FlatMapUint(f func(Complex64Option) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionList) FlatMapUint8(f func(Complex64Option) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionList) FlatMapUint16(f func(Complex64Option) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionList) FlatMapUint32(f func(Complex64Option) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionList) FlatMapUint64(f func(Complex64Option) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionList) FlatMapUintptr(f func(Complex64Option) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionList) FlatMapByte(f func(Complex64Option) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionList) FlatMapRune(f func(Complex64Option) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionList) FlatMapFloat32(f func(Complex64Option) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionList) FlatMapFloat64(f func(Complex64Option) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionList) FlatMapComplex64(f func(Complex64Option) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionList) FlatMapComplex128(f func(Complex64Option) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionList) FlatMapAny(f func(Complex64Option) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionList) FlatMapBool(f func(Complex128Option) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionList) FlatMapString(f func(Complex128Option) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionList) FlatMapInt(f func(Complex128Option) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionList) FlatMapInt8(f func(Complex128Option) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionList) FlatMapInt16(f func(Complex128Option) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionList) FlatMapInt32(f func(Complex128Option) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionList) FlatMapInt64(f func(Complex128Option) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionList) FlatMapUint(f func(Complex128Option) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionList) FlatMapUint8(f func(Complex128Option) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionList) FlatMapUint16(f func(Complex128Option) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionList) FlatMapUint32(f func(Complex128Option) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionList) FlatMapUint64(f func(Complex128Option) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionList) FlatMapUintptr(f func(Complex128Option) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionList) FlatMapByte(f func(Complex128Option) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionList) FlatMapRune(f func(Complex128Option) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionList) FlatMapFloat32(f func(Complex128Option) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionList) FlatMapFloat64(f func(Complex128Option) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionList) FlatMapComplex64(f func(Complex128Option) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionList) FlatMapComplex128(f func(Complex128Option) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionList) FlatMapAny(f func(Complex128Option) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionList) FlatMapBool(f func(AnyOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionList) FlatMapString(f func(AnyOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionList) FlatMapInt(f func(AnyOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionList) FlatMapInt8(f func(AnyOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionList) FlatMapInt16(f func(AnyOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionList) FlatMapInt32(f func(AnyOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionList) FlatMapInt64(f func(AnyOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionList) FlatMapUint(f func(AnyOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionList) FlatMapUint8(f func(AnyOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionList) FlatMapUint16(f func(AnyOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionList) FlatMapUint32(f func(AnyOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionList) FlatMapUint64(f func(AnyOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionList) FlatMapUintptr(f func(AnyOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionList) FlatMapByte(f func(AnyOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionList) FlatMapRune(f func(AnyOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionList) FlatMapFloat32(f func(AnyOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionList) FlatMapFloat64(f func(AnyOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionList) FlatMapComplex64(f func(AnyOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionList) FlatMapComplex128(f func(AnyOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionList) FlatMapAny(f func(AnyOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayOptionList) FlatMapBool(f func(BoolArrayOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayOptionList) FlatMapString(f func(BoolArrayOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayOptionList) FlatMapInt(f func(BoolArrayOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayOptionList) FlatMapInt8(f func(BoolArrayOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayOptionList) FlatMapInt16(f func(BoolArrayOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayOptionList) FlatMapInt32(f func(BoolArrayOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayOptionList) FlatMapInt64(f func(BoolArrayOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayOptionList) FlatMapUint(f func(BoolArrayOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayOptionList) FlatMapUint8(f func(BoolArrayOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayOptionList) FlatMapUint16(f func(BoolArrayOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayOptionList) FlatMapUint32(f func(BoolArrayOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayOptionList) FlatMapUint64(f func(BoolArrayOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayOptionList) FlatMapUintptr(f func(BoolArrayOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayOptionList) FlatMapByte(f func(BoolArrayOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayOptionList) FlatMapRune(f func(BoolArrayOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayOptionList) FlatMapFloat32(f func(BoolArrayOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayOptionList) FlatMapFloat64(f func(BoolArrayOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayOptionList) FlatMapComplex64(f func(BoolArrayOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayOptionList) FlatMapComplex128(f func(BoolArrayOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayOptionList) FlatMapAny(f func(BoolArrayOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayOptionList) FlatMapBool(f func(StringArrayOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayOptionList) FlatMapString(f func(StringArrayOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayOptionList) FlatMapInt(f func(StringArrayOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayOptionList) FlatMapInt8(f func(StringArrayOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayOptionList) FlatMapInt16(f func(StringArrayOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayOptionList) FlatMapInt32(f func(StringArrayOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayOptionList) FlatMapInt64(f func(StringArrayOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayOptionList) FlatMapUint(f func(StringArrayOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayOptionList) FlatMapUint8(f func(StringArrayOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayOptionList) FlatMapUint16(f func(StringArrayOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayOptionList) FlatMapUint32(f func(StringArrayOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayOptionList) FlatMapUint64(f func(StringArrayOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayOptionList) FlatMapUintptr(f func(StringArrayOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayOptionList) FlatMapByte(f func(StringArrayOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayOptionList) FlatMapRune(f func(StringArrayOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayOptionList) FlatMapFloat32(f func(StringArrayOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayOptionList) FlatMapFloat64(f func(StringArrayOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayOptionList) FlatMapComplex64(f func(StringArrayOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayOptionList) FlatMapComplex128(f func(StringArrayOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayOptionList) FlatMapAny(f func(StringArrayOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayOptionList) FlatMapBool(f func(IntArrayOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayOptionList) FlatMapString(f func(IntArrayOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayOptionList) FlatMapInt(f func(IntArrayOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayOptionList) FlatMapInt8(f func(IntArrayOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayOptionList) FlatMapInt16(f func(IntArrayOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayOptionList) FlatMapInt32(f func(IntArrayOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayOptionList) FlatMapInt64(f func(IntArrayOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayOptionList) FlatMapUint(f func(IntArrayOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayOptionList) FlatMapUint8(f func(IntArrayOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayOptionList) FlatMapUint16(f func(IntArrayOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayOptionList) FlatMapUint32(f func(IntArrayOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayOptionList) FlatMapUint64(f func(IntArrayOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayOptionList) FlatMapUintptr(f func(IntArrayOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayOptionList) FlatMapByte(f func(IntArrayOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayOptionList) FlatMapRune(f func(IntArrayOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayOptionList) FlatMapFloat32(f func(IntArrayOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayOptionList) FlatMapFloat64(f func(IntArrayOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayOptionList) FlatMapComplex64(f func(IntArrayOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayOptionList) FlatMapComplex128(f func(IntArrayOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayOptionList) FlatMapAny(f func(IntArrayOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayOptionList) FlatMapBool(f func(Int8ArrayOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayOptionList) FlatMapString(f func(Int8ArrayOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayOptionList) FlatMapInt(f func(Int8ArrayOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayOptionList) FlatMapInt8(f func(Int8ArrayOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayOptionList) FlatMapInt16(f func(Int8ArrayOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayOptionList) FlatMapInt32(f func(Int8ArrayOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayOptionList) FlatMapInt64(f func(Int8ArrayOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayOptionList) FlatMapUint(f func(Int8ArrayOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayOptionList) FlatMapUint8(f func(Int8ArrayOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayOptionList) FlatMapUint16(f func(Int8ArrayOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayOptionList) FlatMapUint32(f func(Int8ArrayOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayOptionList) FlatMapUint64(f func(Int8ArrayOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayOptionList) FlatMapUintptr(f func(Int8ArrayOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayOptionList) FlatMapByte(f func(Int8ArrayOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayOptionList) FlatMapRune(f func(Int8ArrayOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayOptionList) FlatMapFloat32(f func(Int8ArrayOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayOptionList) FlatMapFloat64(f func(Int8ArrayOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayOptionList) FlatMapComplex64(f func(Int8ArrayOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayOptionList) FlatMapComplex128(f func(Int8ArrayOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayOptionList) FlatMapAny(f func(Int8ArrayOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayOptionList) FlatMapBool(f func(Int16ArrayOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayOptionList) FlatMapString(f func(Int16ArrayOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayOptionList) FlatMapInt(f func(Int16ArrayOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayOptionList) FlatMapInt8(f func(Int16ArrayOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayOptionList) FlatMapInt16(f func(Int16ArrayOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayOptionList) FlatMapInt32(f func(Int16ArrayOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayOptionList) FlatMapInt64(f func(Int16ArrayOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayOptionList) FlatMapUint(f func(Int16ArrayOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayOptionList) FlatMapUint8(f func(Int16ArrayOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayOptionList) FlatMapUint16(f func(Int16ArrayOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayOptionList) FlatMapUint32(f func(Int16ArrayOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayOptionList) FlatMapUint64(f func(Int16ArrayOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayOptionList) FlatMapUintptr(f func(Int16ArrayOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayOptionList) FlatMapByte(f func(Int16ArrayOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayOptionList) FlatMapRune(f func(Int16ArrayOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayOptionList) FlatMapFloat32(f func(Int16ArrayOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayOptionList) FlatMapFloat64(f func(Int16ArrayOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayOptionList) FlatMapComplex64(f func(Int16ArrayOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayOptionList) FlatMapComplex128(f func(Int16ArrayOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayOptionList) FlatMapAny(f func(Int16ArrayOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayOptionList) FlatMapBool(f func(Int32ArrayOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayOptionList) FlatMapString(f func(Int32ArrayOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayOptionList) FlatMapInt(f func(Int32ArrayOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayOptionList) FlatMapInt8(f func(Int32ArrayOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayOptionList) FlatMapInt16(f func(Int32ArrayOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayOptionList) FlatMapInt32(f func(Int32ArrayOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayOptionList) FlatMapInt64(f func(Int32ArrayOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayOptionList) FlatMapUint(f func(Int32ArrayOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayOptionList) FlatMapUint8(f func(Int32ArrayOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayOptionList) FlatMapUint16(f func(Int32ArrayOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayOptionList) FlatMapUint32(f func(Int32ArrayOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayOptionList) FlatMapUint64(f func(Int32ArrayOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayOptionList) FlatMapUintptr(f func(Int32ArrayOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayOptionList) FlatMapByte(f func(Int32ArrayOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayOptionList) FlatMapRune(f func(Int32ArrayOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayOptionList) FlatMapFloat32(f func(Int32ArrayOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayOptionList) FlatMapFloat64(f func(Int32ArrayOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayOptionList) FlatMapComplex64(f func(Int32ArrayOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayOptionList) FlatMapComplex128(f func(Int32ArrayOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayOptionList) FlatMapAny(f func(Int32ArrayOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayOptionList) FlatMapBool(f func(Int64ArrayOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayOptionList) FlatMapString(f func(Int64ArrayOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayOptionList) FlatMapInt(f func(Int64ArrayOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayOptionList) FlatMapInt8(f func(Int64ArrayOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayOptionList) FlatMapInt16(f func(Int64ArrayOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayOptionList) FlatMapInt32(f func(Int64ArrayOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayOptionList) FlatMapInt64(f func(Int64ArrayOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayOptionList) FlatMapUint(f func(Int64ArrayOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayOptionList) FlatMapUint8(f func(Int64ArrayOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayOptionList) FlatMapUint16(f func(Int64ArrayOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayOptionList) FlatMapUint32(f func(Int64ArrayOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayOptionList) FlatMapUint64(f func(Int64ArrayOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayOptionList) FlatMapUintptr(f func(Int64ArrayOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayOptionList) FlatMapByte(f func(Int64ArrayOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayOptionList) FlatMapRune(f func(Int64ArrayOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayOptionList) FlatMapFloat32(f func(Int64ArrayOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayOptionList) FlatMapFloat64(f func(Int64ArrayOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayOptionList) FlatMapComplex64(f func(Int64ArrayOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayOptionList) FlatMapComplex128(f func(Int64ArrayOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayOptionList) FlatMapAny(f func(Int64ArrayOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayOptionList) FlatMapBool(f func(UintArrayOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayOptionList) FlatMapString(f func(UintArrayOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayOptionList) FlatMapInt(f func(UintArrayOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayOptionList) FlatMapInt8(f func(UintArrayOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayOptionList) FlatMapInt16(f func(UintArrayOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayOptionList) FlatMapInt32(f func(UintArrayOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayOptionList) FlatMapInt64(f func(UintArrayOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayOptionList) FlatMapUint(f func(UintArrayOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayOptionList) FlatMapUint8(f func(UintArrayOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayOptionList) FlatMapUint16(f func(UintArrayOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayOptionList) FlatMapUint32(f func(UintArrayOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayOptionList) FlatMapUint64(f func(UintArrayOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayOptionList) FlatMapUintptr(f func(UintArrayOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayOptionList) FlatMapByte(f func(UintArrayOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayOptionList) FlatMapRune(f func(UintArrayOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayOptionList) FlatMapFloat32(f func(UintArrayOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayOptionList) FlatMapFloat64(f func(UintArrayOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayOptionList) FlatMapComplex64(f func(UintArrayOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayOptionList) FlatMapComplex128(f func(UintArrayOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayOptionList) FlatMapAny(f func(UintArrayOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayOptionList) FlatMapBool(f func(Uint8ArrayOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayOptionList) FlatMapString(f func(Uint8ArrayOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayOptionList) FlatMapInt(f func(Uint8ArrayOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayOptionList) FlatMapInt8(f func(Uint8ArrayOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayOptionList) FlatMapInt16(f func(Uint8ArrayOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayOptionList) FlatMapInt32(f func(Uint8ArrayOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayOptionList) FlatMapInt64(f func(Uint8ArrayOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayOptionList) FlatMapUint(f func(Uint8ArrayOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayOptionList) FlatMapUint8(f func(Uint8ArrayOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayOptionList) FlatMapUint16(f func(Uint8ArrayOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayOptionList) FlatMapUint32(f func(Uint8ArrayOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayOptionList) FlatMapUint64(f func(Uint8ArrayOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayOptionList) FlatMapUintptr(f func(Uint8ArrayOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayOptionList) FlatMapByte(f func(Uint8ArrayOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayOptionList) FlatMapRune(f func(Uint8ArrayOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayOptionList) FlatMapFloat32(f func(Uint8ArrayOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayOptionList) FlatMapFloat64(f func(Uint8ArrayOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayOptionList) FlatMapComplex64(f func(Uint8ArrayOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayOptionList) FlatMapComplex128(f func(Uint8ArrayOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayOptionList) FlatMapAny(f func(Uint8ArrayOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayOptionList) FlatMapBool(f func(Uint16ArrayOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayOptionList) FlatMapString(f func(Uint16ArrayOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayOptionList) FlatMapInt(f func(Uint16ArrayOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayOptionList) FlatMapInt8(f func(Uint16ArrayOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayOptionList) FlatMapInt16(f func(Uint16ArrayOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayOptionList) FlatMapInt32(f func(Uint16ArrayOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayOptionList) FlatMapInt64(f func(Uint16ArrayOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayOptionList) FlatMapUint(f func(Uint16ArrayOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayOptionList) FlatMapUint8(f func(Uint16ArrayOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayOptionList) FlatMapUint16(f func(Uint16ArrayOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayOptionList) FlatMapUint32(f func(Uint16ArrayOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayOptionList) FlatMapUint64(f func(Uint16ArrayOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayOptionList) FlatMapUintptr(f func(Uint16ArrayOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayOptionList) FlatMapByte(f func(Uint16ArrayOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayOptionList) FlatMapRune(f func(Uint16ArrayOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayOptionList) FlatMapFloat32(f func(Uint16ArrayOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayOptionList) FlatMapFloat64(f func(Uint16ArrayOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayOptionList) FlatMapComplex64(f func(Uint16ArrayOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayOptionList) FlatMapComplex128(f func(Uint16ArrayOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayOptionList) FlatMapAny(f func(Uint16ArrayOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayOptionList) FlatMapBool(f func(Uint32ArrayOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayOptionList) FlatMapString(f func(Uint32ArrayOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayOptionList) FlatMapInt(f func(Uint32ArrayOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayOptionList) FlatMapInt8(f func(Uint32ArrayOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayOptionList) FlatMapInt16(f func(Uint32ArrayOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayOptionList) FlatMapInt32(f func(Uint32ArrayOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayOptionList) FlatMapInt64(f func(Uint32ArrayOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayOptionList) FlatMapUint(f func(Uint32ArrayOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayOptionList) FlatMapUint8(f func(Uint32ArrayOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayOptionList) FlatMapUint16(f func(Uint32ArrayOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayOptionList) FlatMapUint32(f func(Uint32ArrayOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayOptionList) FlatMapUint64(f func(Uint32ArrayOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayOptionList) FlatMapUintptr(f func(Uint32ArrayOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayOptionList) FlatMapByte(f func(Uint32ArrayOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayOptionList) FlatMapRune(f func(Uint32ArrayOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayOptionList) FlatMapFloat32(f func(Uint32ArrayOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayOptionList) FlatMapFloat64(f func(Uint32ArrayOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayOptionList) FlatMapComplex64(f func(Uint32ArrayOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayOptionList) FlatMapComplex128(f func(Uint32ArrayOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayOptionList) FlatMapAny(f func(Uint32ArrayOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayOptionList) FlatMapBool(f func(Uint64ArrayOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayOptionList) FlatMapString(f func(Uint64ArrayOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayOptionList) FlatMapInt(f func(Uint64ArrayOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayOptionList) FlatMapInt8(f func(Uint64ArrayOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayOptionList) FlatMapInt16(f func(Uint64ArrayOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayOptionList) FlatMapInt32(f func(Uint64ArrayOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayOptionList) FlatMapInt64(f func(Uint64ArrayOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayOptionList) FlatMapUint(f func(Uint64ArrayOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayOptionList) FlatMapUint8(f func(Uint64ArrayOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayOptionList) FlatMapUint16(f func(Uint64ArrayOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayOptionList) FlatMapUint32(f func(Uint64ArrayOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayOptionList) FlatMapUint64(f func(Uint64ArrayOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayOptionList) FlatMapUintptr(f func(Uint64ArrayOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayOptionList) FlatMapByte(f func(Uint64ArrayOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayOptionList) FlatMapRune(f func(Uint64ArrayOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayOptionList) FlatMapFloat32(f func(Uint64ArrayOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayOptionList) FlatMapFloat64(f func(Uint64ArrayOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayOptionList) FlatMapComplex64(f func(Uint64ArrayOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayOptionList) FlatMapComplex128(f func(Uint64ArrayOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayOptionList) FlatMapAny(f func(Uint64ArrayOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayOptionList) FlatMapBool(f func(UintptrArrayOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayOptionList) FlatMapString(f func(UintptrArrayOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayOptionList) FlatMapInt(f func(UintptrArrayOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayOptionList) FlatMapInt8(f func(UintptrArrayOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayOptionList) FlatMapInt16(f func(UintptrArrayOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayOptionList) FlatMapInt32(f func(UintptrArrayOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayOptionList) FlatMapInt64(f func(UintptrArrayOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayOptionList) FlatMapUint(f func(UintptrArrayOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayOptionList) FlatMapUint8(f func(UintptrArrayOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayOptionList) FlatMapUint16(f func(UintptrArrayOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayOptionList) FlatMapUint32(f func(UintptrArrayOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayOptionList) FlatMapUint64(f func(UintptrArrayOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayOptionList) FlatMapUintptr(f func(UintptrArrayOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayOptionList) FlatMapByte(f func(UintptrArrayOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayOptionList) FlatMapRune(f func(UintptrArrayOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayOptionList) FlatMapFloat32(f func(UintptrArrayOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayOptionList) FlatMapFloat64(f func(UintptrArrayOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayOptionList) FlatMapComplex64(f func(UintptrArrayOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayOptionList) FlatMapComplex128(f func(UintptrArrayOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayOptionList) FlatMapAny(f func(UintptrArrayOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayOptionList) FlatMapBool(f func(ByteArrayOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayOptionList) FlatMapString(f func(ByteArrayOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayOptionList) FlatMapInt(f func(ByteArrayOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayOptionList) FlatMapInt8(f func(ByteArrayOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayOptionList) FlatMapInt16(f func(ByteArrayOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayOptionList) FlatMapInt32(f func(ByteArrayOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayOptionList) FlatMapInt64(f func(ByteArrayOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayOptionList) FlatMapUint(f func(ByteArrayOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayOptionList) FlatMapUint8(f func(ByteArrayOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayOptionList) FlatMapUint16(f func(ByteArrayOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayOptionList) FlatMapUint32(f func(ByteArrayOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayOptionList) FlatMapUint64(f func(ByteArrayOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayOptionList) FlatMapUintptr(f func(ByteArrayOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayOptionList) FlatMapByte(f func(ByteArrayOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayOptionList) FlatMapRune(f func(ByteArrayOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayOptionList) FlatMapFloat32(f func(ByteArrayOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayOptionList) FlatMapFloat64(f func(ByteArrayOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayOptionList) FlatMapComplex64(f func(ByteArrayOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayOptionList) FlatMapComplex128(f func(ByteArrayOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayOptionList) FlatMapAny(f func(ByteArrayOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayOptionList) FlatMapBool(f func(RuneArrayOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayOptionList) FlatMapString(f func(RuneArrayOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayOptionList) FlatMapInt(f func(RuneArrayOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayOptionList) FlatMapInt8(f func(RuneArrayOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayOptionList) FlatMapInt16(f func(RuneArrayOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayOptionList) FlatMapInt32(f func(RuneArrayOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayOptionList) FlatMapInt64(f func(RuneArrayOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayOptionList) FlatMapUint(f func(RuneArrayOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayOptionList) FlatMapUint8(f func(RuneArrayOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayOptionList) FlatMapUint16(f func(RuneArrayOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayOptionList) FlatMapUint32(f func(RuneArrayOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayOptionList) FlatMapUint64(f func(RuneArrayOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayOptionList) FlatMapUintptr(f func(RuneArrayOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayOptionList) FlatMapByte(f func(RuneArrayOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayOptionList) FlatMapRune(f func(RuneArrayOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayOptionList) FlatMapFloat32(f func(RuneArrayOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayOptionList) FlatMapFloat64(f func(RuneArrayOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayOptionList) FlatMapComplex64(f func(RuneArrayOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayOptionList) FlatMapComplex128(f func(RuneArrayOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayOptionList) FlatMapAny(f func(RuneArrayOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayOptionList) FlatMapBool(f func(Float32ArrayOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayOptionList) FlatMapString(f func(Float32ArrayOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayOptionList) FlatMapInt(f func(Float32ArrayOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayOptionList) FlatMapInt8(f func(Float32ArrayOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayOptionList) FlatMapInt16(f func(Float32ArrayOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayOptionList) FlatMapInt32(f func(Float32ArrayOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayOptionList) FlatMapInt64(f func(Float32ArrayOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayOptionList) FlatMapUint(f func(Float32ArrayOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayOptionList) FlatMapUint8(f func(Float32ArrayOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayOptionList) FlatMapUint16(f func(Float32ArrayOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayOptionList) FlatMapUint32(f func(Float32ArrayOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayOptionList) FlatMapUint64(f func(Float32ArrayOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayOptionList) FlatMapUintptr(f func(Float32ArrayOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayOptionList) FlatMapByte(f func(Float32ArrayOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayOptionList) FlatMapRune(f func(Float32ArrayOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayOptionList) FlatMapFloat32(f func(Float32ArrayOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayOptionList) FlatMapFloat64(f func(Float32ArrayOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayOptionList) FlatMapComplex64(f func(Float32ArrayOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayOptionList) FlatMapComplex128(f func(Float32ArrayOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayOptionList) FlatMapAny(f func(Float32ArrayOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayOptionList) FlatMapBool(f func(Float64ArrayOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayOptionList) FlatMapString(f func(Float64ArrayOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayOptionList) FlatMapInt(f func(Float64ArrayOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayOptionList) FlatMapInt8(f func(Float64ArrayOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayOptionList) FlatMapInt16(f func(Float64ArrayOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayOptionList) FlatMapInt32(f func(Float64ArrayOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayOptionList) FlatMapInt64(f func(Float64ArrayOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayOptionList) FlatMapUint(f func(Float64ArrayOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayOptionList) FlatMapUint8(f func(Float64ArrayOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayOptionList) FlatMapUint16(f func(Float64ArrayOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayOptionList) FlatMapUint32(f func(Float64ArrayOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayOptionList) FlatMapUint64(f func(Float64ArrayOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayOptionList) FlatMapUintptr(f func(Float64ArrayOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayOptionList) FlatMapByte(f func(Float64ArrayOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayOptionList) FlatMapRune(f func(Float64ArrayOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayOptionList) FlatMapFloat32(f func(Float64ArrayOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayOptionList) FlatMapFloat64(f func(Float64ArrayOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayOptionList) FlatMapComplex64(f func(Float64ArrayOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayOptionList) FlatMapComplex128(f func(Float64ArrayOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayOptionList) FlatMapAny(f func(Float64ArrayOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayOptionList) FlatMapBool(f func(Complex64ArrayOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayOptionList) FlatMapString(f func(Complex64ArrayOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayOptionList) FlatMapInt(f func(Complex64ArrayOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayOptionList) FlatMapInt8(f func(Complex64ArrayOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayOptionList) FlatMapInt16(f func(Complex64ArrayOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayOptionList) FlatMapInt32(f func(Complex64ArrayOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayOptionList) FlatMapInt64(f func(Complex64ArrayOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayOptionList) FlatMapUint(f func(Complex64ArrayOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayOptionList) FlatMapUint8(f func(Complex64ArrayOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayOptionList) FlatMapUint16(f func(Complex64ArrayOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayOptionList) FlatMapUint32(f func(Complex64ArrayOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayOptionList) FlatMapUint64(f func(Complex64ArrayOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayOptionList) FlatMapUintptr(f func(Complex64ArrayOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayOptionList) FlatMapByte(f func(Complex64ArrayOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayOptionList) FlatMapRune(f func(Complex64ArrayOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayOptionList) FlatMapFloat32(f func(Complex64ArrayOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayOptionList) FlatMapFloat64(f func(Complex64ArrayOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayOptionList) FlatMapComplex64(f func(Complex64ArrayOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayOptionList) FlatMapComplex128(f func(Complex64ArrayOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayOptionList) FlatMapAny(f func(Complex64ArrayOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayOptionList) FlatMapBool(f func(Complex128ArrayOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayOptionList) FlatMapString(f func(Complex128ArrayOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayOptionList) FlatMapInt(f func(Complex128ArrayOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayOptionList) FlatMapInt8(f func(Complex128ArrayOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayOptionList) FlatMapInt16(f func(Complex128ArrayOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayOptionList) FlatMapInt32(f func(Complex128ArrayOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayOptionList) FlatMapInt64(f func(Complex128ArrayOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayOptionList) FlatMapUint(f func(Complex128ArrayOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayOptionList) FlatMapUint8(f func(Complex128ArrayOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayOptionList) FlatMapUint16(f func(Complex128ArrayOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayOptionList) FlatMapUint32(f func(Complex128ArrayOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayOptionList) FlatMapUint64(f func(Complex128ArrayOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayOptionList) FlatMapUintptr(f func(Complex128ArrayOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayOptionList) FlatMapByte(f func(Complex128ArrayOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayOptionList) FlatMapRune(f func(Complex128ArrayOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayOptionList) FlatMapFloat32(f func(Complex128ArrayOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayOptionList) FlatMapFloat64(f func(Complex128ArrayOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayOptionList) FlatMapComplex64(f func(Complex128ArrayOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayOptionList) FlatMapComplex128(f func(Complex128ArrayOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayOptionList) FlatMapAny(f func(Complex128ArrayOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayOptionList) FlatMapBool(f func(AnyArrayOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayOptionList) FlatMapString(f func(AnyArrayOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayOptionList) FlatMapInt(f func(AnyArrayOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayOptionList) FlatMapInt8(f func(AnyArrayOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayOptionList) FlatMapInt16(f func(AnyArrayOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayOptionList) FlatMapInt32(f func(AnyArrayOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayOptionList) FlatMapInt64(f func(AnyArrayOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayOptionList) FlatMapUint(f func(AnyArrayOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayOptionList) FlatMapUint8(f func(AnyArrayOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayOptionList) FlatMapUint16(f func(AnyArrayOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayOptionList) FlatMapUint32(f func(AnyArrayOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayOptionList) FlatMapUint64(f func(AnyArrayOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayOptionList) FlatMapUintptr(f func(AnyArrayOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayOptionList) FlatMapByte(f func(AnyArrayOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayOptionList) FlatMapRune(f func(AnyArrayOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayOptionList) FlatMapFloat32(f func(AnyArrayOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayOptionList) FlatMapFloat64(f func(AnyArrayOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayOptionList) FlatMapComplex64(f func(AnyArrayOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayOptionList) FlatMapComplex128(f func(AnyArrayOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayOptionList) FlatMapAny(f func(AnyArrayOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayArrayOptionList) FlatMapBool(f func(BoolArrayArrayOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayArrayOptionList) FlatMapString(f func(BoolArrayArrayOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayArrayOptionList) FlatMapInt(f func(BoolArrayArrayOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayArrayOptionList) FlatMapInt8(f func(BoolArrayArrayOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayArrayOptionList) FlatMapInt16(f func(BoolArrayArrayOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayArrayOptionList) FlatMapInt32(f func(BoolArrayArrayOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayArrayOptionList) FlatMapInt64(f func(BoolArrayArrayOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayArrayOptionList) FlatMapUint(f func(BoolArrayArrayOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayArrayOptionList) FlatMapUint8(f func(BoolArrayArrayOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayArrayOptionList) FlatMapUint16(f func(BoolArrayArrayOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayArrayOptionList) FlatMapUint32(f func(BoolArrayArrayOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayArrayOptionList) FlatMapUint64(f func(BoolArrayArrayOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayArrayOptionList) FlatMapUintptr(f func(BoolArrayArrayOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayArrayOptionList) FlatMapByte(f func(BoolArrayArrayOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayArrayOptionList) FlatMapRune(f func(BoolArrayArrayOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayArrayOptionList) FlatMapFloat32(f func(BoolArrayArrayOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayArrayOptionList) FlatMapFloat64(f func(BoolArrayArrayOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayArrayOptionList) FlatMapComplex64(f func(BoolArrayArrayOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayArrayOptionList) FlatMapComplex128(f func(BoolArrayArrayOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayArrayOptionList) FlatMapAny(f func(BoolArrayArrayOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayArrayOptionList) FlatMapBool(f func(StringArrayArrayOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayArrayOptionList) FlatMapString(f func(StringArrayArrayOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayArrayOptionList) FlatMapInt(f func(StringArrayArrayOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayArrayOptionList) FlatMapInt8(f func(StringArrayArrayOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayArrayOptionList) FlatMapInt16(f func(StringArrayArrayOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayArrayOptionList) FlatMapInt32(f func(StringArrayArrayOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayArrayOptionList) FlatMapInt64(f func(StringArrayArrayOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayArrayOptionList) FlatMapUint(f func(StringArrayArrayOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayArrayOptionList) FlatMapUint8(f func(StringArrayArrayOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayArrayOptionList) FlatMapUint16(f func(StringArrayArrayOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayArrayOptionList) FlatMapUint32(f func(StringArrayArrayOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayArrayOptionList) FlatMapUint64(f func(StringArrayArrayOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayArrayOptionList) FlatMapUintptr(f func(StringArrayArrayOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayArrayOptionList) FlatMapByte(f func(StringArrayArrayOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayArrayOptionList) FlatMapRune(f func(StringArrayArrayOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayArrayOptionList) FlatMapFloat32(f func(StringArrayArrayOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayArrayOptionList) FlatMapFloat64(f func(StringArrayArrayOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayArrayOptionList) FlatMapComplex64(f func(StringArrayArrayOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayArrayOptionList) FlatMapComplex128(f func(StringArrayArrayOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayArrayOptionList) FlatMapAny(f func(StringArrayArrayOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayArrayOptionList) FlatMapBool(f func(IntArrayArrayOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayArrayOptionList) FlatMapString(f func(IntArrayArrayOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayArrayOptionList) FlatMapInt(f func(IntArrayArrayOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayArrayOptionList) FlatMapInt8(f func(IntArrayArrayOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayArrayOptionList) FlatMapInt16(f func(IntArrayArrayOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayArrayOptionList) FlatMapInt32(f func(IntArrayArrayOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayArrayOptionList) FlatMapInt64(f func(IntArrayArrayOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayArrayOptionList) FlatMapUint(f func(IntArrayArrayOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayArrayOptionList) FlatMapUint8(f func(IntArrayArrayOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayArrayOptionList) FlatMapUint16(f func(IntArrayArrayOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayArrayOptionList) FlatMapUint32(f func(IntArrayArrayOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayArrayOptionList) FlatMapUint64(f func(IntArrayArrayOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayArrayOptionList) FlatMapUintptr(f func(IntArrayArrayOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayArrayOptionList) FlatMapByte(f func(IntArrayArrayOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayArrayOptionList) FlatMapRune(f func(IntArrayArrayOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayArrayOptionList) FlatMapFloat32(f func(IntArrayArrayOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayArrayOptionList) FlatMapFloat64(f func(IntArrayArrayOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayArrayOptionList) FlatMapComplex64(f func(IntArrayArrayOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayArrayOptionList) FlatMapComplex128(f func(IntArrayArrayOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayArrayOptionList) FlatMapAny(f func(IntArrayArrayOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayArrayOptionList) FlatMapBool(f func(Int8ArrayArrayOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayArrayOptionList) FlatMapString(f func(Int8ArrayArrayOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayArrayOptionList) FlatMapInt(f func(Int8ArrayArrayOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayArrayOptionList) FlatMapInt8(f func(Int8ArrayArrayOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayArrayOptionList) FlatMapInt16(f func(Int8ArrayArrayOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayArrayOptionList) FlatMapInt32(f func(Int8ArrayArrayOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayArrayOptionList) FlatMapInt64(f func(Int8ArrayArrayOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayArrayOptionList) FlatMapUint(f func(Int8ArrayArrayOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayArrayOptionList) FlatMapUint8(f func(Int8ArrayArrayOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayArrayOptionList) FlatMapUint16(f func(Int8ArrayArrayOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayArrayOptionList) FlatMapUint32(f func(Int8ArrayArrayOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayArrayOptionList) FlatMapUint64(f func(Int8ArrayArrayOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayArrayOptionList) FlatMapUintptr(f func(Int8ArrayArrayOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayArrayOptionList) FlatMapByte(f func(Int8ArrayArrayOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayArrayOptionList) FlatMapRune(f func(Int8ArrayArrayOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayArrayOptionList) FlatMapFloat32(f func(Int8ArrayArrayOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayArrayOptionList) FlatMapFloat64(f func(Int8ArrayArrayOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayArrayOptionList) FlatMapComplex64(f func(Int8ArrayArrayOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayArrayOptionList) FlatMapComplex128(f func(Int8ArrayArrayOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayArrayOptionList) FlatMapAny(f func(Int8ArrayArrayOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayArrayOptionList) FlatMapBool(f func(Int16ArrayArrayOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayArrayOptionList) FlatMapString(f func(Int16ArrayArrayOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayArrayOptionList) FlatMapInt(f func(Int16ArrayArrayOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayArrayOptionList) FlatMapInt8(f func(Int16ArrayArrayOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayArrayOptionList) FlatMapInt16(f func(Int16ArrayArrayOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayArrayOptionList) FlatMapInt32(f func(Int16ArrayArrayOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayArrayOptionList) FlatMapInt64(f func(Int16ArrayArrayOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayArrayOptionList) FlatMapUint(f func(Int16ArrayArrayOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayArrayOptionList) FlatMapUint8(f func(Int16ArrayArrayOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayArrayOptionList) FlatMapUint16(f func(Int16ArrayArrayOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayArrayOptionList) FlatMapUint32(f func(Int16ArrayArrayOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayArrayOptionList) FlatMapUint64(f func(Int16ArrayArrayOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayArrayOptionList) FlatMapUintptr(f func(Int16ArrayArrayOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayArrayOptionList) FlatMapByte(f func(Int16ArrayArrayOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayArrayOptionList) FlatMapRune(f func(Int16ArrayArrayOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayArrayOptionList) FlatMapFloat32(f func(Int16ArrayArrayOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayArrayOptionList) FlatMapFloat64(f func(Int16ArrayArrayOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayArrayOptionList) FlatMapComplex64(f func(Int16ArrayArrayOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayArrayOptionList) FlatMapComplex128(f func(Int16ArrayArrayOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayArrayOptionList) FlatMapAny(f func(Int16ArrayArrayOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayArrayOptionList) FlatMapBool(f func(Int32ArrayArrayOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayArrayOptionList) FlatMapString(f func(Int32ArrayArrayOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayArrayOptionList) FlatMapInt(f func(Int32ArrayArrayOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayArrayOptionList) FlatMapInt8(f func(Int32ArrayArrayOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayArrayOptionList) FlatMapInt16(f func(Int32ArrayArrayOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayArrayOptionList) FlatMapInt32(f func(Int32ArrayArrayOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayArrayOptionList) FlatMapInt64(f func(Int32ArrayArrayOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayArrayOptionList) FlatMapUint(f func(Int32ArrayArrayOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayArrayOptionList) FlatMapUint8(f func(Int32ArrayArrayOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayArrayOptionList) FlatMapUint16(f func(Int32ArrayArrayOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayArrayOptionList) FlatMapUint32(f func(Int32ArrayArrayOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayArrayOptionList) FlatMapUint64(f func(Int32ArrayArrayOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayArrayOptionList) FlatMapUintptr(f func(Int32ArrayArrayOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayArrayOptionList) FlatMapByte(f func(Int32ArrayArrayOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayArrayOptionList) FlatMapRune(f func(Int32ArrayArrayOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayArrayOptionList) FlatMapFloat32(f func(Int32ArrayArrayOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayArrayOptionList) FlatMapFloat64(f func(Int32ArrayArrayOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayArrayOptionList) FlatMapComplex64(f func(Int32ArrayArrayOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayArrayOptionList) FlatMapComplex128(f func(Int32ArrayArrayOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayArrayOptionList) FlatMapAny(f func(Int32ArrayArrayOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayArrayOptionList) FlatMapBool(f func(Int64ArrayArrayOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayArrayOptionList) FlatMapString(f func(Int64ArrayArrayOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayArrayOptionList) FlatMapInt(f func(Int64ArrayArrayOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayArrayOptionList) FlatMapInt8(f func(Int64ArrayArrayOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayArrayOptionList) FlatMapInt16(f func(Int64ArrayArrayOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayArrayOptionList) FlatMapInt32(f func(Int64ArrayArrayOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayArrayOptionList) FlatMapInt64(f func(Int64ArrayArrayOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayArrayOptionList) FlatMapUint(f func(Int64ArrayArrayOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayArrayOptionList) FlatMapUint8(f func(Int64ArrayArrayOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayArrayOptionList) FlatMapUint16(f func(Int64ArrayArrayOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayArrayOptionList) FlatMapUint32(f func(Int64ArrayArrayOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayArrayOptionList) FlatMapUint64(f func(Int64ArrayArrayOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayArrayOptionList) FlatMapUintptr(f func(Int64ArrayArrayOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayArrayOptionList) FlatMapByte(f func(Int64ArrayArrayOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayArrayOptionList) FlatMapRune(f func(Int64ArrayArrayOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayArrayOptionList) FlatMapFloat32(f func(Int64ArrayArrayOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayArrayOptionList) FlatMapFloat64(f func(Int64ArrayArrayOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayArrayOptionList) FlatMapComplex64(f func(Int64ArrayArrayOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayArrayOptionList) FlatMapComplex128(f func(Int64ArrayArrayOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayArrayOptionList) FlatMapAny(f func(Int64ArrayArrayOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayArrayOptionList) FlatMapBool(f func(UintArrayArrayOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayArrayOptionList) FlatMapString(f func(UintArrayArrayOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayArrayOptionList) FlatMapInt(f func(UintArrayArrayOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayArrayOptionList) FlatMapInt8(f func(UintArrayArrayOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayArrayOptionList) FlatMapInt16(f func(UintArrayArrayOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayArrayOptionList) FlatMapInt32(f func(UintArrayArrayOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayArrayOptionList) FlatMapInt64(f func(UintArrayArrayOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayArrayOptionList) FlatMapUint(f func(UintArrayArrayOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayArrayOptionList) FlatMapUint8(f func(UintArrayArrayOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayArrayOptionList) FlatMapUint16(f func(UintArrayArrayOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayArrayOptionList) FlatMapUint32(f func(UintArrayArrayOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayArrayOptionList) FlatMapUint64(f func(UintArrayArrayOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayArrayOptionList) FlatMapUintptr(f func(UintArrayArrayOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayArrayOptionList) FlatMapByte(f func(UintArrayArrayOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayArrayOptionList) FlatMapRune(f func(UintArrayArrayOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayArrayOptionList) FlatMapFloat32(f func(UintArrayArrayOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayArrayOptionList) FlatMapFloat64(f func(UintArrayArrayOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayArrayOptionList) FlatMapComplex64(f func(UintArrayArrayOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayArrayOptionList) FlatMapComplex128(f func(UintArrayArrayOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayArrayOptionList) FlatMapAny(f func(UintArrayArrayOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayArrayOptionList) FlatMapBool(f func(Uint8ArrayArrayOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayArrayOptionList) FlatMapString(f func(Uint8ArrayArrayOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayArrayOptionList) FlatMapInt(f func(Uint8ArrayArrayOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayArrayOptionList) FlatMapInt8(f func(Uint8ArrayArrayOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayArrayOptionList) FlatMapInt16(f func(Uint8ArrayArrayOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayArrayOptionList) FlatMapInt32(f func(Uint8ArrayArrayOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayArrayOptionList) FlatMapInt64(f func(Uint8ArrayArrayOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayArrayOptionList) FlatMapUint(f func(Uint8ArrayArrayOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayArrayOptionList) FlatMapUint8(f func(Uint8ArrayArrayOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayArrayOptionList) FlatMapUint16(f func(Uint8ArrayArrayOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayArrayOptionList) FlatMapUint32(f func(Uint8ArrayArrayOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayArrayOptionList) FlatMapUint64(f func(Uint8ArrayArrayOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayArrayOptionList) FlatMapUintptr(f func(Uint8ArrayArrayOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayArrayOptionList) FlatMapByte(f func(Uint8ArrayArrayOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayArrayOptionList) FlatMapRune(f func(Uint8ArrayArrayOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayArrayOptionList) FlatMapFloat32(f func(Uint8ArrayArrayOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayArrayOptionList) FlatMapFloat64(f func(Uint8ArrayArrayOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayArrayOptionList) FlatMapComplex64(f func(Uint8ArrayArrayOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayArrayOptionList) FlatMapComplex128(f func(Uint8ArrayArrayOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayArrayOptionList) FlatMapAny(f func(Uint8ArrayArrayOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayArrayOptionList) FlatMapBool(f func(Uint16ArrayArrayOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayArrayOptionList) FlatMapString(f func(Uint16ArrayArrayOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayArrayOptionList) FlatMapInt(f func(Uint16ArrayArrayOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayArrayOptionList) FlatMapInt8(f func(Uint16ArrayArrayOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayArrayOptionList) FlatMapInt16(f func(Uint16ArrayArrayOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayArrayOptionList) FlatMapInt32(f func(Uint16ArrayArrayOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayArrayOptionList) FlatMapInt64(f func(Uint16ArrayArrayOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayArrayOptionList) FlatMapUint(f func(Uint16ArrayArrayOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayArrayOptionList) FlatMapUint8(f func(Uint16ArrayArrayOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayArrayOptionList) FlatMapUint16(f func(Uint16ArrayArrayOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayArrayOptionList) FlatMapUint32(f func(Uint16ArrayArrayOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayArrayOptionList) FlatMapUint64(f func(Uint16ArrayArrayOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayArrayOptionList) FlatMapUintptr(f func(Uint16ArrayArrayOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayArrayOptionList) FlatMapByte(f func(Uint16ArrayArrayOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayArrayOptionList) FlatMapRune(f func(Uint16ArrayArrayOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayArrayOptionList) FlatMapFloat32(f func(Uint16ArrayArrayOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayArrayOptionList) FlatMapFloat64(f func(Uint16ArrayArrayOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayArrayOptionList) FlatMapComplex64(f func(Uint16ArrayArrayOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayArrayOptionList) FlatMapComplex128(f func(Uint16ArrayArrayOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayArrayOptionList) FlatMapAny(f func(Uint16ArrayArrayOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayArrayOptionList) FlatMapBool(f func(Uint32ArrayArrayOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayArrayOptionList) FlatMapString(f func(Uint32ArrayArrayOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayArrayOptionList) FlatMapInt(f func(Uint32ArrayArrayOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayArrayOptionList) FlatMapInt8(f func(Uint32ArrayArrayOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayArrayOptionList) FlatMapInt16(f func(Uint32ArrayArrayOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayArrayOptionList) FlatMapInt32(f func(Uint32ArrayArrayOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayArrayOptionList) FlatMapInt64(f func(Uint32ArrayArrayOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayArrayOptionList) FlatMapUint(f func(Uint32ArrayArrayOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayArrayOptionList) FlatMapUint8(f func(Uint32ArrayArrayOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayArrayOptionList) FlatMapUint16(f func(Uint32ArrayArrayOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayArrayOptionList) FlatMapUint32(f func(Uint32ArrayArrayOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayArrayOptionList) FlatMapUint64(f func(Uint32ArrayArrayOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayArrayOptionList) FlatMapUintptr(f func(Uint32ArrayArrayOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayArrayOptionList) FlatMapByte(f func(Uint32ArrayArrayOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayArrayOptionList) FlatMapRune(f func(Uint32ArrayArrayOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayArrayOptionList) FlatMapFloat32(f func(Uint32ArrayArrayOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayArrayOptionList) FlatMapFloat64(f func(Uint32ArrayArrayOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayArrayOptionList) FlatMapComplex64(f func(Uint32ArrayArrayOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayArrayOptionList) FlatMapComplex128(f func(Uint32ArrayArrayOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayArrayOptionList) FlatMapAny(f func(Uint32ArrayArrayOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayArrayOptionList) FlatMapBool(f func(Uint64ArrayArrayOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayArrayOptionList) FlatMapString(f func(Uint64ArrayArrayOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayArrayOptionList) FlatMapInt(f func(Uint64ArrayArrayOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayArrayOptionList) FlatMapInt8(f func(Uint64ArrayArrayOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayArrayOptionList) FlatMapInt16(f func(Uint64ArrayArrayOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayArrayOptionList) FlatMapInt32(f func(Uint64ArrayArrayOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayArrayOptionList) FlatMapInt64(f func(Uint64ArrayArrayOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayArrayOptionList) FlatMapUint(f func(Uint64ArrayArrayOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayArrayOptionList) FlatMapUint8(f func(Uint64ArrayArrayOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayArrayOptionList) FlatMapUint16(f func(Uint64ArrayArrayOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayArrayOptionList) FlatMapUint32(f func(Uint64ArrayArrayOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayArrayOptionList) FlatMapUint64(f func(Uint64ArrayArrayOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayArrayOptionList) FlatMapUintptr(f func(Uint64ArrayArrayOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayArrayOptionList) FlatMapByte(f func(Uint64ArrayArrayOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayArrayOptionList) FlatMapRune(f func(Uint64ArrayArrayOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayArrayOptionList) FlatMapFloat32(f func(Uint64ArrayArrayOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayArrayOptionList) FlatMapFloat64(f func(Uint64ArrayArrayOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayArrayOptionList) FlatMapComplex64(f func(Uint64ArrayArrayOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayArrayOptionList) FlatMapComplex128(f func(Uint64ArrayArrayOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayArrayOptionList) FlatMapAny(f func(Uint64ArrayArrayOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayArrayOptionList) FlatMapBool(f func(UintptrArrayArrayOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayArrayOptionList) FlatMapString(f func(UintptrArrayArrayOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayArrayOptionList) FlatMapInt(f func(UintptrArrayArrayOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayArrayOptionList) FlatMapInt8(f func(UintptrArrayArrayOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayArrayOptionList) FlatMapInt16(f func(UintptrArrayArrayOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayArrayOptionList) FlatMapInt32(f func(UintptrArrayArrayOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayArrayOptionList) FlatMapInt64(f func(UintptrArrayArrayOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayArrayOptionList) FlatMapUint(f func(UintptrArrayArrayOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayArrayOptionList) FlatMapUint8(f func(UintptrArrayArrayOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayArrayOptionList) FlatMapUint16(f func(UintptrArrayArrayOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayArrayOptionList) FlatMapUint32(f func(UintptrArrayArrayOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayArrayOptionList) FlatMapUint64(f func(UintptrArrayArrayOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayArrayOptionList) FlatMapUintptr(f func(UintptrArrayArrayOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayArrayOptionList) FlatMapByte(f func(UintptrArrayArrayOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayArrayOptionList) FlatMapRune(f func(UintptrArrayArrayOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayArrayOptionList) FlatMapFloat32(f func(UintptrArrayArrayOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayArrayOptionList) FlatMapFloat64(f func(UintptrArrayArrayOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayArrayOptionList) FlatMapComplex64(f func(UintptrArrayArrayOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayArrayOptionList) FlatMapComplex128(f func(UintptrArrayArrayOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayArrayOptionList) FlatMapAny(f func(UintptrArrayArrayOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayArrayOptionList) FlatMapBool(f func(ByteArrayArrayOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayArrayOptionList) FlatMapString(f func(ByteArrayArrayOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayArrayOptionList) FlatMapInt(f func(ByteArrayArrayOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayArrayOptionList) FlatMapInt8(f func(ByteArrayArrayOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayArrayOptionList) FlatMapInt16(f func(ByteArrayArrayOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayArrayOptionList) FlatMapInt32(f func(ByteArrayArrayOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayArrayOptionList) FlatMapInt64(f func(ByteArrayArrayOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayArrayOptionList) FlatMapUint(f func(ByteArrayArrayOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayArrayOptionList) FlatMapUint8(f func(ByteArrayArrayOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayArrayOptionList) FlatMapUint16(f func(ByteArrayArrayOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayArrayOptionList) FlatMapUint32(f func(ByteArrayArrayOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayArrayOptionList) FlatMapUint64(f func(ByteArrayArrayOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayArrayOptionList) FlatMapUintptr(f func(ByteArrayArrayOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayArrayOptionList) FlatMapByte(f func(ByteArrayArrayOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayArrayOptionList) FlatMapRune(f func(ByteArrayArrayOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayArrayOptionList) FlatMapFloat32(f func(ByteArrayArrayOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayArrayOptionList) FlatMapFloat64(f func(ByteArrayArrayOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayArrayOptionList) FlatMapComplex64(f func(ByteArrayArrayOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayArrayOptionList) FlatMapComplex128(f func(ByteArrayArrayOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayArrayOptionList) FlatMapAny(f func(ByteArrayArrayOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayArrayOptionList) FlatMapBool(f func(RuneArrayArrayOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayArrayOptionList) FlatMapString(f func(RuneArrayArrayOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayArrayOptionList) FlatMapInt(f func(RuneArrayArrayOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayArrayOptionList) FlatMapInt8(f func(RuneArrayArrayOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayArrayOptionList) FlatMapInt16(f func(RuneArrayArrayOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayArrayOptionList) FlatMapInt32(f func(RuneArrayArrayOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayArrayOptionList) FlatMapInt64(f func(RuneArrayArrayOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayArrayOptionList) FlatMapUint(f func(RuneArrayArrayOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayArrayOptionList) FlatMapUint8(f func(RuneArrayArrayOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayArrayOptionList) FlatMapUint16(f func(RuneArrayArrayOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayArrayOptionList) FlatMapUint32(f func(RuneArrayArrayOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayArrayOptionList) FlatMapUint64(f func(RuneArrayArrayOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayArrayOptionList) FlatMapUintptr(f func(RuneArrayArrayOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayArrayOptionList) FlatMapByte(f func(RuneArrayArrayOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayArrayOptionList) FlatMapRune(f func(RuneArrayArrayOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayArrayOptionList) FlatMapFloat32(f func(RuneArrayArrayOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayArrayOptionList) FlatMapFloat64(f func(RuneArrayArrayOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayArrayOptionList) FlatMapComplex64(f func(RuneArrayArrayOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayArrayOptionList) FlatMapComplex128(f func(RuneArrayArrayOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayArrayOptionList) FlatMapAny(f func(RuneArrayArrayOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayArrayOptionList) FlatMapBool(f func(Float32ArrayArrayOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayArrayOptionList) FlatMapString(f func(Float32ArrayArrayOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayArrayOptionList) FlatMapInt(f func(Float32ArrayArrayOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayArrayOptionList) FlatMapInt8(f func(Float32ArrayArrayOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayArrayOptionList) FlatMapInt16(f func(Float32ArrayArrayOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayArrayOptionList) FlatMapInt32(f func(Float32ArrayArrayOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayArrayOptionList) FlatMapInt64(f func(Float32ArrayArrayOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayArrayOptionList) FlatMapUint(f func(Float32ArrayArrayOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayArrayOptionList) FlatMapUint8(f func(Float32ArrayArrayOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayArrayOptionList) FlatMapUint16(f func(Float32ArrayArrayOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayArrayOptionList) FlatMapUint32(f func(Float32ArrayArrayOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayArrayOptionList) FlatMapUint64(f func(Float32ArrayArrayOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayArrayOptionList) FlatMapUintptr(f func(Float32ArrayArrayOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayArrayOptionList) FlatMapByte(f func(Float32ArrayArrayOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayArrayOptionList) FlatMapRune(f func(Float32ArrayArrayOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayArrayOptionList) FlatMapFloat32(f func(Float32ArrayArrayOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayArrayOptionList) FlatMapFloat64(f func(Float32ArrayArrayOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayArrayOptionList) FlatMapComplex64(f func(Float32ArrayArrayOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayArrayOptionList) FlatMapComplex128(f func(Float32ArrayArrayOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayArrayOptionList) FlatMapAny(f func(Float32ArrayArrayOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayArrayOptionList) FlatMapBool(f func(Float64ArrayArrayOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayArrayOptionList) FlatMapString(f func(Float64ArrayArrayOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayArrayOptionList) FlatMapInt(f func(Float64ArrayArrayOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayArrayOptionList) FlatMapInt8(f func(Float64ArrayArrayOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayArrayOptionList) FlatMapInt16(f func(Float64ArrayArrayOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayArrayOptionList) FlatMapInt32(f func(Float64ArrayArrayOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayArrayOptionList) FlatMapInt64(f func(Float64ArrayArrayOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayArrayOptionList) FlatMapUint(f func(Float64ArrayArrayOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayArrayOptionList) FlatMapUint8(f func(Float64ArrayArrayOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayArrayOptionList) FlatMapUint16(f func(Float64ArrayArrayOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayArrayOptionList) FlatMapUint32(f func(Float64ArrayArrayOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayArrayOptionList) FlatMapUint64(f func(Float64ArrayArrayOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayArrayOptionList) FlatMapUintptr(f func(Float64ArrayArrayOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayArrayOptionList) FlatMapByte(f func(Float64ArrayArrayOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayArrayOptionList) FlatMapRune(f func(Float64ArrayArrayOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayArrayOptionList) FlatMapFloat32(f func(Float64ArrayArrayOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayArrayOptionList) FlatMapFloat64(f func(Float64ArrayArrayOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayArrayOptionList) FlatMapComplex64(f func(Float64ArrayArrayOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayArrayOptionList) FlatMapComplex128(f func(Float64ArrayArrayOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayArrayOptionList) FlatMapAny(f func(Float64ArrayArrayOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayArrayOptionList) FlatMapBool(f func(Complex64ArrayArrayOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayArrayOptionList) FlatMapString(f func(Complex64ArrayArrayOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayArrayOptionList) FlatMapInt(f func(Complex64ArrayArrayOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayArrayOptionList) FlatMapInt8(f func(Complex64ArrayArrayOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayArrayOptionList) FlatMapInt16(f func(Complex64ArrayArrayOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayArrayOptionList) FlatMapInt32(f func(Complex64ArrayArrayOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayArrayOptionList) FlatMapInt64(f func(Complex64ArrayArrayOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayArrayOptionList) FlatMapUint(f func(Complex64ArrayArrayOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayArrayOptionList) FlatMapUint8(f func(Complex64ArrayArrayOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayArrayOptionList) FlatMapUint16(f func(Complex64ArrayArrayOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayArrayOptionList) FlatMapUint32(f func(Complex64ArrayArrayOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayArrayOptionList) FlatMapUint64(f func(Complex64ArrayArrayOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayArrayOptionList) FlatMapUintptr(f func(Complex64ArrayArrayOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayArrayOptionList) FlatMapByte(f func(Complex64ArrayArrayOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayArrayOptionList) FlatMapRune(f func(Complex64ArrayArrayOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayArrayOptionList) FlatMapFloat32(f func(Complex64ArrayArrayOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayArrayOptionList) FlatMapFloat64(f func(Complex64ArrayArrayOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayArrayOptionList) FlatMapComplex64(f func(Complex64ArrayArrayOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayArrayOptionList) FlatMapComplex128(f func(Complex64ArrayArrayOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayArrayOptionList) FlatMapAny(f func(Complex64ArrayArrayOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayArrayOptionList) FlatMapBool(f func(Complex128ArrayArrayOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayArrayOptionList) FlatMapString(f func(Complex128ArrayArrayOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayArrayOptionList) FlatMapInt(f func(Complex128ArrayArrayOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayArrayOptionList) FlatMapInt8(f func(Complex128ArrayArrayOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayArrayOptionList) FlatMapInt16(f func(Complex128ArrayArrayOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayArrayOptionList) FlatMapInt32(f func(Complex128ArrayArrayOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayArrayOptionList) FlatMapInt64(f func(Complex128ArrayArrayOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayArrayOptionList) FlatMapUint(f func(Complex128ArrayArrayOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayArrayOptionList) FlatMapUint8(f func(Complex128ArrayArrayOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayArrayOptionList) FlatMapUint16(f func(Complex128ArrayArrayOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayArrayOptionList) FlatMapUint32(f func(Complex128ArrayArrayOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayArrayOptionList) FlatMapUint64(f func(Complex128ArrayArrayOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayArrayOptionList) FlatMapUintptr(f func(Complex128ArrayArrayOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayArrayOptionList) FlatMapByte(f func(Complex128ArrayArrayOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayArrayOptionList) FlatMapRune(f func(Complex128ArrayArrayOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayArrayOptionList) FlatMapFloat32(f func(Complex128ArrayArrayOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayArrayOptionList) FlatMapFloat64(f func(Complex128ArrayArrayOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayArrayOptionList) FlatMapComplex64(f func(Complex128ArrayArrayOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayArrayOptionList) FlatMapComplex128(f func(Complex128ArrayArrayOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayArrayOptionList) FlatMapAny(f func(Complex128ArrayArrayOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayArrayOptionList) FlatMapBool(f func(AnyArrayArrayOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayArrayOptionList) FlatMapString(f func(AnyArrayArrayOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayArrayOptionList) FlatMapInt(f func(AnyArrayArrayOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayArrayOptionList) FlatMapInt8(f func(AnyArrayArrayOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayArrayOptionList) FlatMapInt16(f func(AnyArrayArrayOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayArrayOptionList) FlatMapInt32(f func(AnyArrayArrayOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayArrayOptionList) FlatMapInt64(f func(AnyArrayArrayOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayArrayOptionList) FlatMapUint(f func(AnyArrayArrayOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayArrayOptionList) FlatMapUint8(f func(AnyArrayArrayOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayArrayOptionList) FlatMapUint16(f func(AnyArrayArrayOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayArrayOptionList) FlatMapUint32(f func(AnyArrayArrayOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayArrayOptionList) FlatMapUint64(f func(AnyArrayArrayOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayArrayOptionList) FlatMapUintptr(f func(AnyArrayArrayOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayArrayOptionList) FlatMapByte(f func(AnyArrayArrayOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayArrayOptionList) FlatMapRune(f func(AnyArrayArrayOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayArrayOptionList) FlatMapFloat32(f func(AnyArrayArrayOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayArrayOptionList) FlatMapFloat64(f func(AnyArrayArrayOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayArrayOptionList) FlatMapComplex64(f func(AnyArrayArrayOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayArrayOptionList) FlatMapComplex128(f func(AnyArrayArrayOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayArrayOptionList) FlatMapAny(f func(AnyArrayArrayOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionArrayOptionList) FlatMapBool(f func(BoolOptionArrayOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionArrayOptionList) FlatMapString(f func(BoolOptionArrayOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionArrayOptionList) FlatMapInt(f func(BoolOptionArrayOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionArrayOptionList) FlatMapInt8(f func(BoolOptionArrayOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionArrayOptionList) FlatMapInt16(f func(BoolOptionArrayOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionArrayOptionList) FlatMapInt32(f func(BoolOptionArrayOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionArrayOptionList) FlatMapInt64(f func(BoolOptionArrayOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionArrayOptionList) FlatMapUint(f func(BoolOptionArrayOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionArrayOptionList) FlatMapUint8(f func(BoolOptionArrayOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionArrayOptionList) FlatMapUint16(f func(BoolOptionArrayOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionArrayOptionList) FlatMapUint32(f func(BoolOptionArrayOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionArrayOptionList) FlatMapUint64(f func(BoolOptionArrayOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionArrayOptionList) FlatMapUintptr(f func(BoolOptionArrayOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionArrayOptionList) FlatMapByte(f func(BoolOptionArrayOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionArrayOptionList) FlatMapRune(f func(BoolOptionArrayOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionArrayOptionList) FlatMapFloat32(f func(BoolOptionArrayOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionArrayOptionList) FlatMapFloat64(f func(BoolOptionArrayOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionArrayOptionList) FlatMapComplex64(f func(BoolOptionArrayOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionArrayOptionList) FlatMapComplex128(f func(BoolOptionArrayOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionArrayOptionList) FlatMapAny(f func(BoolOptionArrayOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionArrayOptionList) FlatMapBool(f func(StringOptionArrayOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionArrayOptionList) FlatMapString(f func(StringOptionArrayOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionArrayOptionList) FlatMapInt(f func(StringOptionArrayOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionArrayOptionList) FlatMapInt8(f func(StringOptionArrayOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionArrayOptionList) FlatMapInt16(f func(StringOptionArrayOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionArrayOptionList) FlatMapInt32(f func(StringOptionArrayOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionArrayOptionList) FlatMapInt64(f func(StringOptionArrayOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionArrayOptionList) FlatMapUint(f func(StringOptionArrayOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionArrayOptionList) FlatMapUint8(f func(StringOptionArrayOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionArrayOptionList) FlatMapUint16(f func(StringOptionArrayOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionArrayOptionList) FlatMapUint32(f func(StringOptionArrayOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionArrayOptionList) FlatMapUint64(f func(StringOptionArrayOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionArrayOptionList) FlatMapUintptr(f func(StringOptionArrayOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionArrayOptionList) FlatMapByte(f func(StringOptionArrayOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionArrayOptionList) FlatMapRune(f func(StringOptionArrayOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionArrayOptionList) FlatMapFloat32(f func(StringOptionArrayOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionArrayOptionList) FlatMapFloat64(f func(StringOptionArrayOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionArrayOptionList) FlatMapComplex64(f func(StringOptionArrayOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionArrayOptionList) FlatMapComplex128(f func(StringOptionArrayOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionArrayOptionList) FlatMapAny(f func(StringOptionArrayOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionArrayOptionList) FlatMapBool(f func(IntOptionArrayOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionArrayOptionList) FlatMapString(f func(IntOptionArrayOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionArrayOptionList) FlatMapInt(f func(IntOptionArrayOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionArrayOptionList) FlatMapInt8(f func(IntOptionArrayOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionArrayOptionList) FlatMapInt16(f func(IntOptionArrayOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionArrayOptionList) FlatMapInt32(f func(IntOptionArrayOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionArrayOptionList) FlatMapInt64(f func(IntOptionArrayOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionArrayOptionList) FlatMapUint(f func(IntOptionArrayOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionArrayOptionList) FlatMapUint8(f func(IntOptionArrayOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionArrayOptionList) FlatMapUint16(f func(IntOptionArrayOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionArrayOptionList) FlatMapUint32(f func(IntOptionArrayOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionArrayOptionList) FlatMapUint64(f func(IntOptionArrayOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionArrayOptionList) FlatMapUintptr(f func(IntOptionArrayOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionArrayOptionList) FlatMapByte(f func(IntOptionArrayOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionArrayOptionList) FlatMapRune(f func(IntOptionArrayOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionArrayOptionList) FlatMapFloat32(f func(IntOptionArrayOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionArrayOptionList) FlatMapFloat64(f func(IntOptionArrayOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionArrayOptionList) FlatMapComplex64(f func(IntOptionArrayOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionArrayOptionList) FlatMapComplex128(f func(IntOptionArrayOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionArrayOptionList) FlatMapAny(f func(IntOptionArrayOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionArrayOptionList) FlatMapBool(f func(Int8OptionArrayOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionArrayOptionList) FlatMapString(f func(Int8OptionArrayOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionArrayOptionList) FlatMapInt(f func(Int8OptionArrayOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionArrayOptionList) FlatMapInt8(f func(Int8OptionArrayOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionArrayOptionList) FlatMapInt16(f func(Int8OptionArrayOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionArrayOptionList) FlatMapInt32(f func(Int8OptionArrayOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionArrayOptionList) FlatMapInt64(f func(Int8OptionArrayOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionArrayOptionList) FlatMapUint(f func(Int8OptionArrayOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionArrayOptionList) FlatMapUint8(f func(Int8OptionArrayOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionArrayOptionList) FlatMapUint16(f func(Int8OptionArrayOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionArrayOptionList) FlatMapUint32(f func(Int8OptionArrayOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionArrayOptionList) FlatMapUint64(f func(Int8OptionArrayOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionArrayOptionList) FlatMapUintptr(f func(Int8OptionArrayOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionArrayOptionList) FlatMapByte(f func(Int8OptionArrayOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionArrayOptionList) FlatMapRune(f func(Int8OptionArrayOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionArrayOptionList) FlatMapFloat32(f func(Int8OptionArrayOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionArrayOptionList) FlatMapFloat64(f func(Int8OptionArrayOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionArrayOptionList) FlatMapComplex64(f func(Int8OptionArrayOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionArrayOptionList) FlatMapComplex128(f func(Int8OptionArrayOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionArrayOptionList) FlatMapAny(f func(Int8OptionArrayOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionArrayOptionList) FlatMapBool(f func(Int16OptionArrayOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionArrayOptionList) FlatMapString(f func(Int16OptionArrayOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionArrayOptionList) FlatMapInt(f func(Int16OptionArrayOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionArrayOptionList) FlatMapInt8(f func(Int16OptionArrayOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionArrayOptionList) FlatMapInt16(f func(Int16OptionArrayOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionArrayOptionList) FlatMapInt32(f func(Int16OptionArrayOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionArrayOptionList) FlatMapInt64(f func(Int16OptionArrayOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionArrayOptionList) FlatMapUint(f func(Int16OptionArrayOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionArrayOptionList) FlatMapUint8(f func(Int16OptionArrayOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionArrayOptionList) FlatMapUint16(f func(Int16OptionArrayOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionArrayOptionList) FlatMapUint32(f func(Int16OptionArrayOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionArrayOptionList) FlatMapUint64(f func(Int16OptionArrayOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionArrayOptionList) FlatMapUintptr(f func(Int16OptionArrayOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionArrayOptionList) FlatMapByte(f func(Int16OptionArrayOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionArrayOptionList) FlatMapRune(f func(Int16OptionArrayOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionArrayOptionList) FlatMapFloat32(f func(Int16OptionArrayOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionArrayOptionList) FlatMapFloat64(f func(Int16OptionArrayOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionArrayOptionList) FlatMapComplex64(f func(Int16OptionArrayOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionArrayOptionList) FlatMapComplex128(f func(Int16OptionArrayOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionArrayOptionList) FlatMapAny(f func(Int16OptionArrayOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionArrayOptionList) FlatMapBool(f func(Int32OptionArrayOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionArrayOptionList) FlatMapString(f func(Int32OptionArrayOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionArrayOptionList) FlatMapInt(f func(Int32OptionArrayOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionArrayOptionList) FlatMapInt8(f func(Int32OptionArrayOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionArrayOptionList) FlatMapInt16(f func(Int32OptionArrayOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionArrayOptionList) FlatMapInt32(f func(Int32OptionArrayOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionArrayOptionList) FlatMapInt64(f func(Int32OptionArrayOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionArrayOptionList) FlatMapUint(f func(Int32OptionArrayOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionArrayOptionList) FlatMapUint8(f func(Int32OptionArrayOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionArrayOptionList) FlatMapUint16(f func(Int32OptionArrayOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionArrayOptionList) FlatMapUint32(f func(Int32OptionArrayOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionArrayOptionList) FlatMapUint64(f func(Int32OptionArrayOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionArrayOptionList) FlatMapUintptr(f func(Int32OptionArrayOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionArrayOptionList) FlatMapByte(f func(Int32OptionArrayOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionArrayOptionList) FlatMapRune(f func(Int32OptionArrayOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionArrayOptionList) FlatMapFloat32(f func(Int32OptionArrayOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionArrayOptionList) FlatMapFloat64(f func(Int32OptionArrayOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionArrayOptionList) FlatMapComplex64(f func(Int32OptionArrayOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionArrayOptionList) FlatMapComplex128(f func(Int32OptionArrayOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionArrayOptionList) FlatMapAny(f func(Int32OptionArrayOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionArrayOptionList) FlatMapBool(f func(Int64OptionArrayOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionArrayOptionList) FlatMapString(f func(Int64OptionArrayOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionArrayOptionList) FlatMapInt(f func(Int64OptionArrayOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionArrayOptionList) FlatMapInt8(f func(Int64OptionArrayOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionArrayOptionList) FlatMapInt16(f func(Int64OptionArrayOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionArrayOptionList) FlatMapInt32(f func(Int64OptionArrayOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionArrayOptionList) FlatMapInt64(f func(Int64OptionArrayOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionArrayOptionList) FlatMapUint(f func(Int64OptionArrayOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionArrayOptionList) FlatMapUint8(f func(Int64OptionArrayOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionArrayOptionList) FlatMapUint16(f func(Int64OptionArrayOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionArrayOptionList) FlatMapUint32(f func(Int64OptionArrayOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionArrayOptionList) FlatMapUint64(f func(Int64OptionArrayOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionArrayOptionList) FlatMapUintptr(f func(Int64OptionArrayOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionArrayOptionList) FlatMapByte(f func(Int64OptionArrayOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionArrayOptionList) FlatMapRune(f func(Int64OptionArrayOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionArrayOptionList) FlatMapFloat32(f func(Int64OptionArrayOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionArrayOptionList) FlatMapFloat64(f func(Int64OptionArrayOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionArrayOptionList) FlatMapComplex64(f func(Int64OptionArrayOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionArrayOptionList) FlatMapComplex128(f func(Int64OptionArrayOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionArrayOptionList) FlatMapAny(f func(Int64OptionArrayOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionArrayOptionList) FlatMapBool(f func(UintOptionArrayOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionArrayOptionList) FlatMapString(f func(UintOptionArrayOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionArrayOptionList) FlatMapInt(f func(UintOptionArrayOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionArrayOptionList) FlatMapInt8(f func(UintOptionArrayOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionArrayOptionList) FlatMapInt16(f func(UintOptionArrayOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionArrayOptionList) FlatMapInt32(f func(UintOptionArrayOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionArrayOptionList) FlatMapInt64(f func(UintOptionArrayOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionArrayOptionList) FlatMapUint(f func(UintOptionArrayOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionArrayOptionList) FlatMapUint8(f func(UintOptionArrayOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionArrayOptionList) FlatMapUint16(f func(UintOptionArrayOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionArrayOptionList) FlatMapUint32(f func(UintOptionArrayOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionArrayOptionList) FlatMapUint64(f func(UintOptionArrayOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionArrayOptionList) FlatMapUintptr(f func(UintOptionArrayOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionArrayOptionList) FlatMapByte(f func(UintOptionArrayOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionArrayOptionList) FlatMapRune(f func(UintOptionArrayOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionArrayOptionList) FlatMapFloat32(f func(UintOptionArrayOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionArrayOptionList) FlatMapFloat64(f func(UintOptionArrayOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionArrayOptionList) FlatMapComplex64(f func(UintOptionArrayOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionArrayOptionList) FlatMapComplex128(f func(UintOptionArrayOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionArrayOptionList) FlatMapAny(f func(UintOptionArrayOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionArrayOptionList) FlatMapBool(f func(Uint8OptionArrayOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionArrayOptionList) FlatMapString(f func(Uint8OptionArrayOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionArrayOptionList) FlatMapInt(f func(Uint8OptionArrayOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionArrayOptionList) FlatMapInt8(f func(Uint8OptionArrayOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionArrayOptionList) FlatMapInt16(f func(Uint8OptionArrayOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionArrayOptionList) FlatMapInt32(f func(Uint8OptionArrayOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionArrayOptionList) FlatMapInt64(f func(Uint8OptionArrayOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionArrayOptionList) FlatMapUint(f func(Uint8OptionArrayOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionArrayOptionList) FlatMapUint8(f func(Uint8OptionArrayOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionArrayOptionList) FlatMapUint16(f func(Uint8OptionArrayOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionArrayOptionList) FlatMapUint32(f func(Uint8OptionArrayOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionArrayOptionList) FlatMapUint64(f func(Uint8OptionArrayOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionArrayOptionList) FlatMapUintptr(f func(Uint8OptionArrayOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionArrayOptionList) FlatMapByte(f func(Uint8OptionArrayOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionArrayOptionList) FlatMapRune(f func(Uint8OptionArrayOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionArrayOptionList) FlatMapFloat32(f func(Uint8OptionArrayOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionArrayOptionList) FlatMapFloat64(f func(Uint8OptionArrayOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionArrayOptionList) FlatMapComplex64(f func(Uint8OptionArrayOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionArrayOptionList) FlatMapComplex128(f func(Uint8OptionArrayOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionArrayOptionList) FlatMapAny(f func(Uint8OptionArrayOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionArrayOptionList) FlatMapBool(f func(Uint16OptionArrayOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionArrayOptionList) FlatMapString(f func(Uint16OptionArrayOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionArrayOptionList) FlatMapInt(f func(Uint16OptionArrayOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionArrayOptionList) FlatMapInt8(f func(Uint16OptionArrayOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionArrayOptionList) FlatMapInt16(f func(Uint16OptionArrayOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionArrayOptionList) FlatMapInt32(f func(Uint16OptionArrayOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionArrayOptionList) FlatMapInt64(f func(Uint16OptionArrayOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionArrayOptionList) FlatMapUint(f func(Uint16OptionArrayOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionArrayOptionList) FlatMapUint8(f func(Uint16OptionArrayOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionArrayOptionList) FlatMapUint16(f func(Uint16OptionArrayOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionArrayOptionList) FlatMapUint32(f func(Uint16OptionArrayOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionArrayOptionList) FlatMapUint64(f func(Uint16OptionArrayOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionArrayOptionList) FlatMapUintptr(f func(Uint16OptionArrayOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionArrayOptionList) FlatMapByte(f func(Uint16OptionArrayOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionArrayOptionList) FlatMapRune(f func(Uint16OptionArrayOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionArrayOptionList) FlatMapFloat32(f func(Uint16OptionArrayOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionArrayOptionList) FlatMapFloat64(f func(Uint16OptionArrayOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionArrayOptionList) FlatMapComplex64(f func(Uint16OptionArrayOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionArrayOptionList) FlatMapComplex128(f func(Uint16OptionArrayOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionArrayOptionList) FlatMapAny(f func(Uint16OptionArrayOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionArrayOptionList) FlatMapBool(f func(Uint32OptionArrayOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionArrayOptionList) FlatMapString(f func(Uint32OptionArrayOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionArrayOptionList) FlatMapInt(f func(Uint32OptionArrayOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionArrayOptionList) FlatMapInt8(f func(Uint32OptionArrayOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionArrayOptionList) FlatMapInt16(f func(Uint32OptionArrayOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionArrayOptionList) FlatMapInt32(f func(Uint32OptionArrayOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionArrayOptionList) FlatMapInt64(f func(Uint32OptionArrayOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionArrayOptionList) FlatMapUint(f func(Uint32OptionArrayOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionArrayOptionList) FlatMapUint8(f func(Uint32OptionArrayOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionArrayOptionList) FlatMapUint16(f func(Uint32OptionArrayOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionArrayOptionList) FlatMapUint32(f func(Uint32OptionArrayOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionArrayOptionList) FlatMapUint64(f func(Uint32OptionArrayOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionArrayOptionList) FlatMapUintptr(f func(Uint32OptionArrayOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionArrayOptionList) FlatMapByte(f func(Uint32OptionArrayOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionArrayOptionList) FlatMapRune(f func(Uint32OptionArrayOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionArrayOptionList) FlatMapFloat32(f func(Uint32OptionArrayOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionArrayOptionList) FlatMapFloat64(f func(Uint32OptionArrayOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionArrayOptionList) FlatMapComplex64(f func(Uint32OptionArrayOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionArrayOptionList) FlatMapComplex128(f func(Uint32OptionArrayOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionArrayOptionList) FlatMapAny(f func(Uint32OptionArrayOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionArrayOptionList) FlatMapBool(f func(Uint64OptionArrayOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionArrayOptionList) FlatMapString(f func(Uint64OptionArrayOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionArrayOptionList) FlatMapInt(f func(Uint64OptionArrayOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionArrayOptionList) FlatMapInt8(f func(Uint64OptionArrayOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionArrayOptionList) FlatMapInt16(f func(Uint64OptionArrayOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionArrayOptionList) FlatMapInt32(f func(Uint64OptionArrayOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionArrayOptionList) FlatMapInt64(f func(Uint64OptionArrayOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionArrayOptionList) FlatMapUint(f func(Uint64OptionArrayOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionArrayOptionList) FlatMapUint8(f func(Uint64OptionArrayOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionArrayOptionList) FlatMapUint16(f func(Uint64OptionArrayOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionArrayOptionList) FlatMapUint32(f func(Uint64OptionArrayOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionArrayOptionList) FlatMapUint64(f func(Uint64OptionArrayOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionArrayOptionList) FlatMapUintptr(f func(Uint64OptionArrayOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionArrayOptionList) FlatMapByte(f func(Uint64OptionArrayOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionArrayOptionList) FlatMapRune(f func(Uint64OptionArrayOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionArrayOptionList) FlatMapFloat32(f func(Uint64OptionArrayOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionArrayOptionList) FlatMapFloat64(f func(Uint64OptionArrayOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionArrayOptionList) FlatMapComplex64(f func(Uint64OptionArrayOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionArrayOptionList) FlatMapComplex128(f func(Uint64OptionArrayOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionArrayOptionList) FlatMapAny(f func(Uint64OptionArrayOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionArrayOptionList) FlatMapBool(f func(UintptrOptionArrayOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionArrayOptionList) FlatMapString(f func(UintptrOptionArrayOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionArrayOptionList) FlatMapInt(f func(UintptrOptionArrayOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionArrayOptionList) FlatMapInt8(f func(UintptrOptionArrayOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionArrayOptionList) FlatMapInt16(f func(UintptrOptionArrayOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionArrayOptionList) FlatMapInt32(f func(UintptrOptionArrayOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionArrayOptionList) FlatMapInt64(f func(UintptrOptionArrayOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionArrayOptionList) FlatMapUint(f func(UintptrOptionArrayOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionArrayOptionList) FlatMapUint8(f func(UintptrOptionArrayOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionArrayOptionList) FlatMapUint16(f func(UintptrOptionArrayOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionArrayOptionList) FlatMapUint32(f func(UintptrOptionArrayOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionArrayOptionList) FlatMapUint64(f func(UintptrOptionArrayOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionArrayOptionList) FlatMapUintptr(f func(UintptrOptionArrayOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionArrayOptionList) FlatMapByte(f func(UintptrOptionArrayOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionArrayOptionList) FlatMapRune(f func(UintptrOptionArrayOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionArrayOptionList) FlatMapFloat32(f func(UintptrOptionArrayOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionArrayOptionList) FlatMapFloat64(f func(UintptrOptionArrayOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionArrayOptionList) FlatMapComplex64(f func(UintptrOptionArrayOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionArrayOptionList) FlatMapComplex128(f func(UintptrOptionArrayOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionArrayOptionList) FlatMapAny(f func(UintptrOptionArrayOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionArrayOptionList) FlatMapBool(f func(ByteOptionArrayOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionArrayOptionList) FlatMapString(f func(ByteOptionArrayOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionArrayOptionList) FlatMapInt(f func(ByteOptionArrayOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionArrayOptionList) FlatMapInt8(f func(ByteOptionArrayOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionArrayOptionList) FlatMapInt16(f func(ByteOptionArrayOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionArrayOptionList) FlatMapInt32(f func(ByteOptionArrayOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionArrayOptionList) FlatMapInt64(f func(ByteOptionArrayOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionArrayOptionList) FlatMapUint(f func(ByteOptionArrayOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionArrayOptionList) FlatMapUint8(f func(ByteOptionArrayOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionArrayOptionList) FlatMapUint16(f func(ByteOptionArrayOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionArrayOptionList) FlatMapUint32(f func(ByteOptionArrayOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionArrayOptionList) FlatMapUint64(f func(ByteOptionArrayOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionArrayOptionList) FlatMapUintptr(f func(ByteOptionArrayOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionArrayOptionList) FlatMapByte(f func(ByteOptionArrayOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionArrayOptionList) FlatMapRune(f func(ByteOptionArrayOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionArrayOptionList) FlatMapFloat32(f func(ByteOptionArrayOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionArrayOptionList) FlatMapFloat64(f func(ByteOptionArrayOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionArrayOptionList) FlatMapComplex64(f func(ByteOptionArrayOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionArrayOptionList) FlatMapComplex128(f func(ByteOptionArrayOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionArrayOptionList) FlatMapAny(f func(ByteOptionArrayOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionArrayOptionList) FlatMapBool(f func(RuneOptionArrayOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionArrayOptionList) FlatMapString(f func(RuneOptionArrayOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionArrayOptionList) FlatMapInt(f func(RuneOptionArrayOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionArrayOptionList) FlatMapInt8(f func(RuneOptionArrayOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionArrayOptionList) FlatMapInt16(f func(RuneOptionArrayOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionArrayOptionList) FlatMapInt32(f func(RuneOptionArrayOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionArrayOptionList) FlatMapInt64(f func(RuneOptionArrayOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionArrayOptionList) FlatMapUint(f func(RuneOptionArrayOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionArrayOptionList) FlatMapUint8(f func(RuneOptionArrayOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionArrayOptionList) FlatMapUint16(f func(RuneOptionArrayOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionArrayOptionList) FlatMapUint32(f func(RuneOptionArrayOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionArrayOptionList) FlatMapUint64(f func(RuneOptionArrayOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionArrayOptionList) FlatMapUintptr(f func(RuneOptionArrayOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionArrayOptionList) FlatMapByte(f func(RuneOptionArrayOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionArrayOptionList) FlatMapRune(f func(RuneOptionArrayOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionArrayOptionList) FlatMapFloat32(f func(RuneOptionArrayOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionArrayOptionList) FlatMapFloat64(f func(RuneOptionArrayOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionArrayOptionList) FlatMapComplex64(f func(RuneOptionArrayOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionArrayOptionList) FlatMapComplex128(f func(RuneOptionArrayOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionArrayOptionList) FlatMapAny(f func(RuneOptionArrayOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionArrayOptionList) FlatMapBool(f func(Float32OptionArrayOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionArrayOptionList) FlatMapString(f func(Float32OptionArrayOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionArrayOptionList) FlatMapInt(f func(Float32OptionArrayOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionArrayOptionList) FlatMapInt8(f func(Float32OptionArrayOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionArrayOptionList) FlatMapInt16(f func(Float32OptionArrayOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionArrayOptionList) FlatMapInt32(f func(Float32OptionArrayOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionArrayOptionList) FlatMapInt64(f func(Float32OptionArrayOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionArrayOptionList) FlatMapUint(f func(Float32OptionArrayOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionArrayOptionList) FlatMapUint8(f func(Float32OptionArrayOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionArrayOptionList) FlatMapUint16(f func(Float32OptionArrayOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionArrayOptionList) FlatMapUint32(f func(Float32OptionArrayOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionArrayOptionList) FlatMapUint64(f func(Float32OptionArrayOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionArrayOptionList) FlatMapUintptr(f func(Float32OptionArrayOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionArrayOptionList) FlatMapByte(f func(Float32OptionArrayOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionArrayOptionList) FlatMapRune(f func(Float32OptionArrayOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionArrayOptionList) FlatMapFloat32(f func(Float32OptionArrayOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionArrayOptionList) FlatMapFloat64(f func(Float32OptionArrayOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionArrayOptionList) FlatMapComplex64(f func(Float32OptionArrayOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionArrayOptionList) FlatMapComplex128(f func(Float32OptionArrayOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionArrayOptionList) FlatMapAny(f func(Float32OptionArrayOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionArrayOptionList) FlatMapBool(f func(Float64OptionArrayOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionArrayOptionList) FlatMapString(f func(Float64OptionArrayOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionArrayOptionList) FlatMapInt(f func(Float64OptionArrayOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionArrayOptionList) FlatMapInt8(f func(Float64OptionArrayOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionArrayOptionList) FlatMapInt16(f func(Float64OptionArrayOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionArrayOptionList) FlatMapInt32(f func(Float64OptionArrayOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionArrayOptionList) FlatMapInt64(f func(Float64OptionArrayOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionArrayOptionList) FlatMapUint(f func(Float64OptionArrayOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionArrayOptionList) FlatMapUint8(f func(Float64OptionArrayOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionArrayOptionList) FlatMapUint16(f func(Float64OptionArrayOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionArrayOptionList) FlatMapUint32(f func(Float64OptionArrayOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionArrayOptionList) FlatMapUint64(f func(Float64OptionArrayOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionArrayOptionList) FlatMapUintptr(f func(Float64OptionArrayOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionArrayOptionList) FlatMapByte(f func(Float64OptionArrayOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionArrayOptionList) FlatMapRune(f func(Float64OptionArrayOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionArrayOptionList) FlatMapFloat32(f func(Float64OptionArrayOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionArrayOptionList) FlatMapFloat64(f func(Float64OptionArrayOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionArrayOptionList) FlatMapComplex64(f func(Float64OptionArrayOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionArrayOptionList) FlatMapComplex128(f func(Float64OptionArrayOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionArrayOptionList) FlatMapAny(f func(Float64OptionArrayOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionArrayOptionList) FlatMapBool(f func(Complex64OptionArrayOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionArrayOptionList) FlatMapString(f func(Complex64OptionArrayOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionArrayOptionList) FlatMapInt(f func(Complex64OptionArrayOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionArrayOptionList) FlatMapInt8(f func(Complex64OptionArrayOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionArrayOptionList) FlatMapInt16(f func(Complex64OptionArrayOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionArrayOptionList) FlatMapInt32(f func(Complex64OptionArrayOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionArrayOptionList) FlatMapInt64(f func(Complex64OptionArrayOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionArrayOptionList) FlatMapUint(f func(Complex64OptionArrayOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionArrayOptionList) FlatMapUint8(f func(Complex64OptionArrayOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionArrayOptionList) FlatMapUint16(f func(Complex64OptionArrayOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionArrayOptionList) FlatMapUint32(f func(Complex64OptionArrayOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionArrayOptionList) FlatMapUint64(f func(Complex64OptionArrayOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionArrayOptionList) FlatMapUintptr(f func(Complex64OptionArrayOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionArrayOptionList) FlatMapByte(f func(Complex64OptionArrayOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionArrayOptionList) FlatMapRune(f func(Complex64OptionArrayOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionArrayOptionList) FlatMapFloat32(f func(Complex64OptionArrayOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionArrayOptionList) FlatMapFloat64(f func(Complex64OptionArrayOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionArrayOptionList) FlatMapComplex64(f func(Complex64OptionArrayOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionArrayOptionList) FlatMapComplex128(f func(Complex64OptionArrayOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionArrayOptionList) FlatMapAny(f func(Complex64OptionArrayOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionArrayOptionList) FlatMapBool(f func(Complex128OptionArrayOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionArrayOptionList) FlatMapString(f func(Complex128OptionArrayOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionArrayOptionList) FlatMapInt(f func(Complex128OptionArrayOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionArrayOptionList) FlatMapInt8(f func(Complex128OptionArrayOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionArrayOptionList) FlatMapInt16(f func(Complex128OptionArrayOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionArrayOptionList) FlatMapInt32(f func(Complex128OptionArrayOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionArrayOptionList) FlatMapInt64(f func(Complex128OptionArrayOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionArrayOptionList) FlatMapUint(f func(Complex128OptionArrayOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionArrayOptionList) FlatMapUint8(f func(Complex128OptionArrayOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionArrayOptionList) FlatMapUint16(f func(Complex128OptionArrayOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionArrayOptionList) FlatMapUint32(f func(Complex128OptionArrayOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionArrayOptionList) FlatMapUint64(f func(Complex128OptionArrayOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionArrayOptionList) FlatMapUintptr(f func(Complex128OptionArrayOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionArrayOptionList) FlatMapByte(f func(Complex128OptionArrayOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionArrayOptionList) FlatMapRune(f func(Complex128OptionArrayOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionArrayOptionList) FlatMapFloat32(f func(Complex128OptionArrayOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionArrayOptionList) FlatMapFloat64(f func(Complex128OptionArrayOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionArrayOptionList) FlatMapComplex64(f func(Complex128OptionArrayOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionArrayOptionList) FlatMapComplex128(f func(Complex128OptionArrayOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionArrayOptionList) FlatMapAny(f func(Complex128OptionArrayOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionArrayOptionList) FlatMapBool(f func(AnyOptionArrayOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionArrayOptionList) FlatMapString(f func(AnyOptionArrayOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionArrayOptionList) FlatMapInt(f func(AnyOptionArrayOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionArrayOptionList) FlatMapInt8(f func(AnyOptionArrayOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionArrayOptionList) FlatMapInt16(f func(AnyOptionArrayOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionArrayOptionList) FlatMapInt32(f func(AnyOptionArrayOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionArrayOptionList) FlatMapInt64(f func(AnyOptionArrayOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionArrayOptionList) FlatMapUint(f func(AnyOptionArrayOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionArrayOptionList) FlatMapUint8(f func(AnyOptionArrayOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionArrayOptionList) FlatMapUint16(f func(AnyOptionArrayOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionArrayOptionList) FlatMapUint32(f func(AnyOptionArrayOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionArrayOptionList) FlatMapUint64(f func(AnyOptionArrayOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionArrayOptionList) FlatMapUintptr(f func(AnyOptionArrayOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionArrayOptionList) FlatMapByte(f func(AnyOptionArrayOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionArrayOptionList) FlatMapRune(f func(AnyOptionArrayOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionArrayOptionList) FlatMapFloat32(f func(AnyOptionArrayOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionArrayOptionList) FlatMapFloat64(f func(AnyOptionArrayOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionArrayOptionList) FlatMapComplex64(f func(AnyOptionArrayOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionArrayOptionList) FlatMapComplex128(f func(AnyOptionArrayOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionArrayOptionList) FlatMapAny(f func(AnyOptionArrayOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListOptionList) FlatMapBool(f func(BoolListOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListOptionList) FlatMapString(f func(BoolListOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListOptionList) FlatMapInt(f func(BoolListOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListOptionList) FlatMapInt8(f func(BoolListOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListOptionList) FlatMapInt16(f func(BoolListOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListOptionList) FlatMapInt32(f func(BoolListOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListOptionList) FlatMapInt64(f func(BoolListOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListOptionList) FlatMapUint(f func(BoolListOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListOptionList) FlatMapUint8(f func(BoolListOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListOptionList) FlatMapUint16(f func(BoolListOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListOptionList) FlatMapUint32(f func(BoolListOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListOptionList) FlatMapUint64(f func(BoolListOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListOptionList) FlatMapUintptr(f func(BoolListOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListOptionList) FlatMapByte(f func(BoolListOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListOptionList) FlatMapRune(f func(BoolListOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListOptionList) FlatMapFloat32(f func(BoolListOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListOptionList) FlatMapFloat64(f func(BoolListOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListOptionList) FlatMapComplex64(f func(BoolListOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListOptionList) FlatMapComplex128(f func(BoolListOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListOptionList) FlatMapAny(f func(BoolListOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListOptionList) FlatMapBool(f func(StringListOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListOptionList) FlatMapString(f func(StringListOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListOptionList) FlatMapInt(f func(StringListOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListOptionList) FlatMapInt8(f func(StringListOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListOptionList) FlatMapInt16(f func(StringListOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListOptionList) FlatMapInt32(f func(StringListOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListOptionList) FlatMapInt64(f func(StringListOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListOptionList) FlatMapUint(f func(StringListOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListOptionList) FlatMapUint8(f func(StringListOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListOptionList) FlatMapUint16(f func(StringListOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListOptionList) FlatMapUint32(f func(StringListOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListOptionList) FlatMapUint64(f func(StringListOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListOptionList) FlatMapUintptr(f func(StringListOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListOptionList) FlatMapByte(f func(StringListOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListOptionList) FlatMapRune(f func(StringListOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListOptionList) FlatMapFloat32(f func(StringListOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListOptionList) FlatMapFloat64(f func(StringListOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListOptionList) FlatMapComplex64(f func(StringListOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListOptionList) FlatMapComplex128(f func(StringListOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListOptionList) FlatMapAny(f func(StringListOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListOptionList) FlatMapBool(f func(IntListOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListOptionList) FlatMapString(f func(IntListOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListOptionList) FlatMapInt(f func(IntListOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListOptionList) FlatMapInt8(f func(IntListOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListOptionList) FlatMapInt16(f func(IntListOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListOptionList) FlatMapInt32(f func(IntListOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListOptionList) FlatMapInt64(f func(IntListOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListOptionList) FlatMapUint(f func(IntListOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListOptionList) FlatMapUint8(f func(IntListOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListOptionList) FlatMapUint16(f func(IntListOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListOptionList) FlatMapUint32(f func(IntListOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListOptionList) FlatMapUint64(f func(IntListOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListOptionList) FlatMapUintptr(f func(IntListOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListOptionList) FlatMapByte(f func(IntListOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListOptionList) FlatMapRune(f func(IntListOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListOptionList) FlatMapFloat32(f func(IntListOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListOptionList) FlatMapFloat64(f func(IntListOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListOptionList) FlatMapComplex64(f func(IntListOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListOptionList) FlatMapComplex128(f func(IntListOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListOptionList) FlatMapAny(f func(IntListOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ListOptionList) FlatMapBool(f func(Int8ListOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ListOptionList) FlatMapString(f func(Int8ListOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ListOptionList) FlatMapInt(f func(Int8ListOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ListOptionList) FlatMapInt8(f func(Int8ListOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ListOptionList) FlatMapInt16(f func(Int8ListOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ListOptionList) FlatMapInt32(f func(Int8ListOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ListOptionList) FlatMapInt64(f func(Int8ListOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ListOptionList) FlatMapUint(f func(Int8ListOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ListOptionList) FlatMapUint8(f func(Int8ListOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ListOptionList) FlatMapUint16(f func(Int8ListOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ListOptionList) FlatMapUint32(f func(Int8ListOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ListOptionList) FlatMapUint64(f func(Int8ListOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ListOptionList) FlatMapUintptr(f func(Int8ListOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ListOptionList) FlatMapByte(f func(Int8ListOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ListOptionList) FlatMapRune(f func(Int8ListOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ListOptionList) FlatMapFloat32(f func(Int8ListOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ListOptionList) FlatMapFloat64(f func(Int8ListOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ListOptionList) FlatMapComplex64(f func(Int8ListOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ListOptionList) FlatMapComplex128(f func(Int8ListOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ListOptionList) FlatMapAny(f func(Int8ListOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ListOptionList) FlatMapBool(f func(Int16ListOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ListOptionList) FlatMapString(f func(Int16ListOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ListOptionList) FlatMapInt(f func(Int16ListOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ListOptionList) FlatMapInt8(f func(Int16ListOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ListOptionList) FlatMapInt16(f func(Int16ListOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ListOptionList) FlatMapInt32(f func(Int16ListOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ListOptionList) FlatMapInt64(f func(Int16ListOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ListOptionList) FlatMapUint(f func(Int16ListOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ListOptionList) FlatMapUint8(f func(Int16ListOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ListOptionList) FlatMapUint16(f func(Int16ListOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ListOptionList) FlatMapUint32(f func(Int16ListOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ListOptionList) FlatMapUint64(f func(Int16ListOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ListOptionList) FlatMapUintptr(f func(Int16ListOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ListOptionList) FlatMapByte(f func(Int16ListOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ListOptionList) FlatMapRune(f func(Int16ListOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ListOptionList) FlatMapFloat32(f func(Int16ListOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ListOptionList) FlatMapFloat64(f func(Int16ListOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ListOptionList) FlatMapComplex64(f func(Int16ListOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ListOptionList) FlatMapComplex128(f func(Int16ListOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ListOptionList) FlatMapAny(f func(Int16ListOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListOptionList) FlatMapBool(f func(Int32ListOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListOptionList) FlatMapString(f func(Int32ListOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListOptionList) FlatMapInt(f func(Int32ListOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListOptionList) FlatMapInt8(f func(Int32ListOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListOptionList) FlatMapInt16(f func(Int32ListOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListOptionList) FlatMapInt32(f func(Int32ListOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListOptionList) FlatMapInt64(f func(Int32ListOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListOptionList) FlatMapUint(f func(Int32ListOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListOptionList) FlatMapUint8(f func(Int32ListOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListOptionList) FlatMapUint16(f func(Int32ListOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListOptionList) FlatMapUint32(f func(Int32ListOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListOptionList) FlatMapUint64(f func(Int32ListOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListOptionList) FlatMapUintptr(f func(Int32ListOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListOptionList) FlatMapByte(f func(Int32ListOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListOptionList) FlatMapRune(f func(Int32ListOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListOptionList) FlatMapFloat32(f func(Int32ListOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListOptionList) FlatMapFloat64(f func(Int32ListOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListOptionList) FlatMapComplex64(f func(Int32ListOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListOptionList) FlatMapComplex128(f func(Int32ListOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListOptionList) FlatMapAny(f func(Int32ListOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListOptionList) FlatMapBool(f func(Int64ListOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListOptionList) FlatMapString(f func(Int64ListOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListOptionList) FlatMapInt(f func(Int64ListOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListOptionList) FlatMapInt8(f func(Int64ListOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListOptionList) FlatMapInt16(f func(Int64ListOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListOptionList) FlatMapInt32(f func(Int64ListOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListOptionList) FlatMapInt64(f func(Int64ListOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListOptionList) FlatMapUint(f func(Int64ListOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListOptionList) FlatMapUint8(f func(Int64ListOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListOptionList) FlatMapUint16(f func(Int64ListOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListOptionList) FlatMapUint32(f func(Int64ListOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListOptionList) FlatMapUint64(f func(Int64ListOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListOptionList) FlatMapUintptr(f func(Int64ListOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListOptionList) FlatMapByte(f func(Int64ListOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListOptionList) FlatMapRune(f func(Int64ListOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListOptionList) FlatMapFloat32(f func(Int64ListOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListOptionList) FlatMapFloat64(f func(Int64ListOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListOptionList) FlatMapComplex64(f func(Int64ListOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListOptionList) FlatMapComplex128(f func(Int64ListOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListOptionList) FlatMapAny(f func(Int64ListOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListOptionList) FlatMapBool(f func(UintListOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListOptionList) FlatMapString(f func(UintListOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListOptionList) FlatMapInt(f func(UintListOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListOptionList) FlatMapInt8(f func(UintListOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListOptionList) FlatMapInt16(f func(UintListOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListOptionList) FlatMapInt32(f func(UintListOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListOptionList) FlatMapInt64(f func(UintListOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListOptionList) FlatMapUint(f func(UintListOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListOptionList) FlatMapUint8(f func(UintListOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListOptionList) FlatMapUint16(f func(UintListOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListOptionList) FlatMapUint32(f func(UintListOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListOptionList) FlatMapUint64(f func(UintListOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListOptionList) FlatMapUintptr(f func(UintListOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListOptionList) FlatMapByte(f func(UintListOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListOptionList) FlatMapRune(f func(UintListOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListOptionList) FlatMapFloat32(f func(UintListOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListOptionList) FlatMapFloat64(f func(UintListOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListOptionList) FlatMapComplex64(f func(UintListOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListOptionList) FlatMapComplex128(f func(UintListOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListOptionList) FlatMapAny(f func(UintListOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ListOptionList) FlatMapBool(f func(Uint8ListOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ListOptionList) FlatMapString(f func(Uint8ListOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ListOptionList) FlatMapInt(f func(Uint8ListOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ListOptionList) FlatMapInt8(f func(Uint8ListOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ListOptionList) FlatMapInt16(f func(Uint8ListOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ListOptionList) FlatMapInt32(f func(Uint8ListOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ListOptionList) FlatMapInt64(f func(Uint8ListOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ListOptionList) FlatMapUint(f func(Uint8ListOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ListOptionList) FlatMapUint8(f func(Uint8ListOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ListOptionList) FlatMapUint16(f func(Uint8ListOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ListOptionList) FlatMapUint32(f func(Uint8ListOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ListOptionList) FlatMapUint64(f func(Uint8ListOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ListOptionList) FlatMapUintptr(f func(Uint8ListOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ListOptionList) FlatMapByte(f func(Uint8ListOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ListOptionList) FlatMapRune(f func(Uint8ListOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ListOptionList) FlatMapFloat32(f func(Uint8ListOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ListOptionList) FlatMapFloat64(f func(Uint8ListOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ListOptionList) FlatMapComplex64(f func(Uint8ListOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ListOptionList) FlatMapComplex128(f func(Uint8ListOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ListOptionList) FlatMapAny(f func(Uint8ListOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ListOptionList) FlatMapBool(f func(Uint16ListOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ListOptionList) FlatMapString(f func(Uint16ListOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ListOptionList) FlatMapInt(f func(Uint16ListOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ListOptionList) FlatMapInt8(f func(Uint16ListOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ListOptionList) FlatMapInt16(f func(Uint16ListOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ListOptionList) FlatMapInt32(f func(Uint16ListOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ListOptionList) FlatMapInt64(f func(Uint16ListOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ListOptionList) FlatMapUint(f func(Uint16ListOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ListOptionList) FlatMapUint8(f func(Uint16ListOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ListOptionList) FlatMapUint16(f func(Uint16ListOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ListOptionList) FlatMapUint32(f func(Uint16ListOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ListOptionList) FlatMapUint64(f func(Uint16ListOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ListOptionList) FlatMapUintptr(f func(Uint16ListOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ListOptionList) FlatMapByte(f func(Uint16ListOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ListOptionList) FlatMapRune(f func(Uint16ListOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ListOptionList) FlatMapFloat32(f func(Uint16ListOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ListOptionList) FlatMapFloat64(f func(Uint16ListOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ListOptionList) FlatMapComplex64(f func(Uint16ListOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ListOptionList) FlatMapComplex128(f func(Uint16ListOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ListOptionList) FlatMapAny(f func(Uint16ListOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ListOptionList) FlatMapBool(f func(Uint32ListOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ListOptionList) FlatMapString(f func(Uint32ListOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ListOptionList) FlatMapInt(f func(Uint32ListOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ListOptionList) FlatMapInt8(f func(Uint32ListOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ListOptionList) FlatMapInt16(f func(Uint32ListOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ListOptionList) FlatMapInt32(f func(Uint32ListOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ListOptionList) FlatMapInt64(f func(Uint32ListOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ListOptionList) FlatMapUint(f func(Uint32ListOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ListOptionList) FlatMapUint8(f func(Uint32ListOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ListOptionList) FlatMapUint16(f func(Uint32ListOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ListOptionList) FlatMapUint32(f func(Uint32ListOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ListOptionList) FlatMapUint64(f func(Uint32ListOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ListOptionList) FlatMapUintptr(f func(Uint32ListOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ListOptionList) FlatMapByte(f func(Uint32ListOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ListOptionList) FlatMapRune(f func(Uint32ListOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ListOptionList) FlatMapFloat32(f func(Uint32ListOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ListOptionList) FlatMapFloat64(f func(Uint32ListOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ListOptionList) FlatMapComplex64(f func(Uint32ListOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ListOptionList) FlatMapComplex128(f func(Uint32ListOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ListOptionList) FlatMapAny(f func(Uint32ListOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListOptionList) FlatMapBool(f func(Uint64ListOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListOptionList) FlatMapString(f func(Uint64ListOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListOptionList) FlatMapInt(f func(Uint64ListOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListOptionList) FlatMapInt8(f func(Uint64ListOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListOptionList) FlatMapInt16(f func(Uint64ListOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListOptionList) FlatMapInt32(f func(Uint64ListOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListOptionList) FlatMapInt64(f func(Uint64ListOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListOptionList) FlatMapUint(f func(Uint64ListOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListOptionList) FlatMapUint8(f func(Uint64ListOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListOptionList) FlatMapUint16(f func(Uint64ListOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListOptionList) FlatMapUint32(f func(Uint64ListOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListOptionList) FlatMapUint64(f func(Uint64ListOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListOptionList) FlatMapUintptr(f func(Uint64ListOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListOptionList) FlatMapByte(f func(Uint64ListOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListOptionList) FlatMapRune(f func(Uint64ListOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListOptionList) FlatMapFloat32(f func(Uint64ListOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListOptionList) FlatMapFloat64(f func(Uint64ListOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListOptionList) FlatMapComplex64(f func(Uint64ListOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListOptionList) FlatMapComplex128(f func(Uint64ListOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListOptionList) FlatMapAny(f func(Uint64ListOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListOptionList) FlatMapBool(f func(UintptrListOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListOptionList) FlatMapString(f func(UintptrListOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListOptionList) FlatMapInt(f func(UintptrListOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListOptionList) FlatMapInt8(f func(UintptrListOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListOptionList) FlatMapInt16(f func(UintptrListOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListOptionList) FlatMapInt32(f func(UintptrListOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListOptionList) FlatMapInt64(f func(UintptrListOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListOptionList) FlatMapUint(f func(UintptrListOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListOptionList) FlatMapUint8(f func(UintptrListOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListOptionList) FlatMapUint16(f func(UintptrListOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListOptionList) FlatMapUint32(f func(UintptrListOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListOptionList) FlatMapUint64(f func(UintptrListOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListOptionList) FlatMapUintptr(f func(UintptrListOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListOptionList) FlatMapByte(f func(UintptrListOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListOptionList) FlatMapRune(f func(UintptrListOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListOptionList) FlatMapFloat32(f func(UintptrListOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListOptionList) FlatMapFloat64(f func(UintptrListOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListOptionList) FlatMapComplex64(f func(UintptrListOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListOptionList) FlatMapComplex128(f func(UintptrListOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListOptionList) FlatMapAny(f func(UintptrListOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListOptionList) FlatMapBool(f func(ByteListOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListOptionList) FlatMapString(f func(ByteListOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListOptionList) FlatMapInt(f func(ByteListOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListOptionList) FlatMapInt8(f func(ByteListOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListOptionList) FlatMapInt16(f func(ByteListOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListOptionList) FlatMapInt32(f func(ByteListOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListOptionList) FlatMapInt64(f func(ByteListOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListOptionList) FlatMapUint(f func(ByteListOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListOptionList) FlatMapUint8(f func(ByteListOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListOptionList) FlatMapUint16(f func(ByteListOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListOptionList) FlatMapUint32(f func(ByteListOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListOptionList) FlatMapUint64(f func(ByteListOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListOptionList) FlatMapUintptr(f func(ByteListOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListOptionList) FlatMapByte(f func(ByteListOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListOptionList) FlatMapRune(f func(ByteListOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListOptionList) FlatMapFloat32(f func(ByteListOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListOptionList) FlatMapFloat64(f func(ByteListOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListOptionList) FlatMapComplex64(f func(ByteListOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListOptionList) FlatMapComplex128(f func(ByteListOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListOptionList) FlatMapAny(f func(ByteListOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListOptionList) FlatMapBool(f func(RuneListOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListOptionList) FlatMapString(f func(RuneListOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListOptionList) FlatMapInt(f func(RuneListOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListOptionList) FlatMapInt8(f func(RuneListOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListOptionList) FlatMapInt16(f func(RuneListOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListOptionList) FlatMapInt32(f func(RuneListOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListOptionList) FlatMapInt64(f func(RuneListOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListOptionList) FlatMapUint(f func(RuneListOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListOptionList) FlatMapUint8(f func(RuneListOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListOptionList) FlatMapUint16(f func(RuneListOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListOptionList) FlatMapUint32(f func(RuneListOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListOptionList) FlatMapUint64(f func(RuneListOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListOptionList) FlatMapUintptr(f func(RuneListOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListOptionList) FlatMapByte(f func(RuneListOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListOptionList) FlatMapRune(f func(RuneListOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListOptionList) FlatMapFloat32(f func(RuneListOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListOptionList) FlatMapFloat64(f func(RuneListOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListOptionList) FlatMapComplex64(f func(RuneListOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListOptionList) FlatMapComplex128(f func(RuneListOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListOptionList) FlatMapAny(f func(RuneListOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListOptionList) FlatMapBool(f func(Float32ListOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListOptionList) FlatMapString(f func(Float32ListOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListOptionList) FlatMapInt(f func(Float32ListOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListOptionList) FlatMapInt8(f func(Float32ListOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListOptionList) FlatMapInt16(f func(Float32ListOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListOptionList) FlatMapInt32(f func(Float32ListOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListOptionList) FlatMapInt64(f func(Float32ListOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListOptionList) FlatMapUint(f func(Float32ListOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListOptionList) FlatMapUint8(f func(Float32ListOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListOptionList) FlatMapUint16(f func(Float32ListOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListOptionList) FlatMapUint32(f func(Float32ListOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListOptionList) FlatMapUint64(f func(Float32ListOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListOptionList) FlatMapUintptr(f func(Float32ListOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListOptionList) FlatMapByte(f func(Float32ListOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListOptionList) FlatMapRune(f func(Float32ListOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListOptionList) FlatMapFloat32(f func(Float32ListOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListOptionList) FlatMapFloat64(f func(Float32ListOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListOptionList) FlatMapComplex64(f func(Float32ListOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListOptionList) FlatMapComplex128(f func(Float32ListOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListOptionList) FlatMapAny(f func(Float32ListOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListOptionList) FlatMapBool(f func(Float64ListOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListOptionList) FlatMapString(f func(Float64ListOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListOptionList) FlatMapInt(f func(Float64ListOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListOptionList) FlatMapInt8(f func(Float64ListOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListOptionList) FlatMapInt16(f func(Float64ListOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListOptionList) FlatMapInt32(f func(Float64ListOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListOptionList) FlatMapInt64(f func(Float64ListOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListOptionList) FlatMapUint(f func(Float64ListOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListOptionList) FlatMapUint8(f func(Float64ListOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListOptionList) FlatMapUint16(f func(Float64ListOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListOptionList) FlatMapUint32(f func(Float64ListOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListOptionList) FlatMapUint64(f func(Float64ListOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListOptionList) FlatMapUintptr(f func(Float64ListOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListOptionList) FlatMapByte(f func(Float64ListOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListOptionList) FlatMapRune(f func(Float64ListOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListOptionList) FlatMapFloat32(f func(Float64ListOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListOptionList) FlatMapFloat64(f func(Float64ListOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListOptionList) FlatMapComplex64(f func(Float64ListOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListOptionList) FlatMapComplex128(f func(Float64ListOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListOptionList) FlatMapAny(f func(Float64ListOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ListOptionList) FlatMapBool(f func(Complex64ListOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ListOptionList) FlatMapString(f func(Complex64ListOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ListOptionList) FlatMapInt(f func(Complex64ListOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ListOptionList) FlatMapInt8(f func(Complex64ListOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ListOptionList) FlatMapInt16(f func(Complex64ListOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ListOptionList) FlatMapInt32(f func(Complex64ListOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ListOptionList) FlatMapInt64(f func(Complex64ListOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ListOptionList) FlatMapUint(f func(Complex64ListOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ListOptionList) FlatMapUint8(f func(Complex64ListOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ListOptionList) FlatMapUint16(f func(Complex64ListOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ListOptionList) FlatMapUint32(f func(Complex64ListOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ListOptionList) FlatMapUint64(f func(Complex64ListOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ListOptionList) FlatMapUintptr(f func(Complex64ListOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ListOptionList) FlatMapByte(f func(Complex64ListOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ListOptionList) FlatMapRune(f func(Complex64ListOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ListOptionList) FlatMapFloat32(f func(Complex64ListOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ListOptionList) FlatMapFloat64(f func(Complex64ListOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ListOptionList) FlatMapComplex64(f func(Complex64ListOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ListOptionList) FlatMapComplex128(f func(Complex64ListOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ListOptionList) FlatMapAny(f func(Complex64ListOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ListOptionList) FlatMapBool(f func(Complex128ListOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ListOptionList) FlatMapString(f func(Complex128ListOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ListOptionList) FlatMapInt(f func(Complex128ListOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ListOptionList) FlatMapInt8(f func(Complex128ListOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ListOptionList) FlatMapInt16(f func(Complex128ListOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ListOptionList) FlatMapInt32(f func(Complex128ListOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ListOptionList) FlatMapInt64(f func(Complex128ListOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ListOptionList) FlatMapUint(f func(Complex128ListOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ListOptionList) FlatMapUint8(f func(Complex128ListOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ListOptionList) FlatMapUint16(f func(Complex128ListOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ListOptionList) FlatMapUint32(f func(Complex128ListOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ListOptionList) FlatMapUint64(f func(Complex128ListOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ListOptionList) FlatMapUintptr(f func(Complex128ListOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ListOptionList) FlatMapByte(f func(Complex128ListOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ListOptionList) FlatMapRune(f func(Complex128ListOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ListOptionList) FlatMapFloat32(f func(Complex128ListOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ListOptionList) FlatMapFloat64(f func(Complex128ListOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ListOptionList) FlatMapComplex64(f func(Complex128ListOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ListOptionList) FlatMapComplex128(f func(Complex128ListOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ListOptionList) FlatMapAny(f func(Complex128ListOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListOptionList) FlatMapBool(f func(AnyListOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListOptionList) FlatMapString(f func(AnyListOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListOptionList) FlatMapInt(f func(AnyListOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListOptionList) FlatMapInt8(f func(AnyListOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListOptionList) FlatMapInt16(f func(AnyListOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListOptionList) FlatMapInt32(f func(AnyListOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListOptionList) FlatMapInt64(f func(AnyListOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListOptionList) FlatMapUint(f func(AnyListOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListOptionList) FlatMapUint8(f func(AnyListOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListOptionList) FlatMapUint16(f func(AnyListOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListOptionList) FlatMapUint32(f func(AnyListOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListOptionList) FlatMapUint64(f func(AnyListOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListOptionList) FlatMapUintptr(f func(AnyListOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListOptionList) FlatMapByte(f func(AnyListOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListOptionList) FlatMapRune(f func(AnyListOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListOptionList) FlatMapFloat32(f func(AnyListOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListOptionList) FlatMapFloat64(f func(AnyListOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListOptionList) FlatMapComplex64(f func(AnyListOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListOptionList) FlatMapComplex128(f func(AnyListOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListOptionList) FlatMapAny(f func(AnyListOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionOptionList) FlatMapBool(f func(BoolOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionOptionList) FlatMapString(f func(BoolOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionOptionList) FlatMapInt(f func(BoolOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionOptionList) FlatMapInt8(f func(BoolOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionOptionList) FlatMapInt16(f func(BoolOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionOptionList) FlatMapInt32(f func(BoolOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionOptionList) FlatMapInt64(f func(BoolOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionOptionList) FlatMapUint(f func(BoolOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionOptionList) FlatMapUint8(f func(BoolOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionOptionList) FlatMapUint16(f func(BoolOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionOptionList) FlatMapUint32(f func(BoolOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionOptionList) FlatMapUint64(f func(BoolOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionOptionList) FlatMapUintptr(f func(BoolOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionOptionList) FlatMapByte(f func(BoolOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionOptionList) FlatMapRune(f func(BoolOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionOptionList) FlatMapFloat32(f func(BoolOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionOptionList) FlatMapFloat64(f func(BoolOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionOptionList) FlatMapComplex64(f func(BoolOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionOptionList) FlatMapComplex128(f func(BoolOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionOptionList) FlatMapAny(f func(BoolOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionOptionList) FlatMapBool(f func(StringOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionOptionList) FlatMapString(f func(StringOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionOptionList) FlatMapInt(f func(StringOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionOptionList) FlatMapInt8(f func(StringOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionOptionList) FlatMapInt16(f func(StringOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionOptionList) FlatMapInt32(f func(StringOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionOptionList) FlatMapInt64(f func(StringOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionOptionList) FlatMapUint(f func(StringOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionOptionList) FlatMapUint8(f func(StringOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionOptionList) FlatMapUint16(f func(StringOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionOptionList) FlatMapUint32(f func(StringOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionOptionList) FlatMapUint64(f func(StringOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionOptionList) FlatMapUintptr(f func(StringOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionOptionList) FlatMapByte(f func(StringOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionOptionList) FlatMapRune(f func(StringOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionOptionList) FlatMapFloat32(f func(StringOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionOptionList) FlatMapFloat64(f func(StringOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionOptionList) FlatMapComplex64(f func(StringOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionOptionList) FlatMapComplex128(f func(StringOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionOptionList) FlatMapAny(f func(StringOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionOptionList) FlatMapBool(f func(IntOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionOptionList) FlatMapString(f func(IntOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionOptionList) FlatMapInt(f func(IntOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionOptionList) FlatMapInt8(f func(IntOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionOptionList) FlatMapInt16(f func(IntOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionOptionList) FlatMapInt32(f func(IntOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionOptionList) FlatMapInt64(f func(IntOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionOptionList) FlatMapUint(f func(IntOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionOptionList) FlatMapUint8(f func(IntOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionOptionList) FlatMapUint16(f func(IntOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionOptionList) FlatMapUint32(f func(IntOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionOptionList) FlatMapUint64(f func(IntOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionOptionList) FlatMapUintptr(f func(IntOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionOptionList) FlatMapByte(f func(IntOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionOptionList) FlatMapRune(f func(IntOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionOptionList) FlatMapFloat32(f func(IntOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionOptionList) FlatMapFloat64(f func(IntOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionOptionList) FlatMapComplex64(f func(IntOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionOptionList) FlatMapComplex128(f func(IntOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionOptionList) FlatMapAny(f func(IntOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionOptionList) FlatMapBool(f func(Int8OptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionOptionList) FlatMapString(f func(Int8OptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionOptionList) FlatMapInt(f func(Int8OptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionOptionList) FlatMapInt8(f func(Int8OptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionOptionList) FlatMapInt16(f func(Int8OptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionOptionList) FlatMapInt32(f func(Int8OptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionOptionList) FlatMapInt64(f func(Int8OptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionOptionList) FlatMapUint(f func(Int8OptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionOptionList) FlatMapUint8(f func(Int8OptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionOptionList) FlatMapUint16(f func(Int8OptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionOptionList) FlatMapUint32(f func(Int8OptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionOptionList) FlatMapUint64(f func(Int8OptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionOptionList) FlatMapUintptr(f func(Int8OptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionOptionList) FlatMapByte(f func(Int8OptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionOptionList) FlatMapRune(f func(Int8OptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionOptionList) FlatMapFloat32(f func(Int8OptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionOptionList) FlatMapFloat64(f func(Int8OptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionOptionList) FlatMapComplex64(f func(Int8OptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionOptionList) FlatMapComplex128(f func(Int8OptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionOptionList) FlatMapAny(f func(Int8OptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionOptionList) FlatMapBool(f func(Int16OptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionOptionList) FlatMapString(f func(Int16OptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionOptionList) FlatMapInt(f func(Int16OptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionOptionList) FlatMapInt8(f func(Int16OptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionOptionList) FlatMapInt16(f func(Int16OptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionOptionList) FlatMapInt32(f func(Int16OptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionOptionList) FlatMapInt64(f func(Int16OptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionOptionList) FlatMapUint(f func(Int16OptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionOptionList) FlatMapUint8(f func(Int16OptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionOptionList) FlatMapUint16(f func(Int16OptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionOptionList) FlatMapUint32(f func(Int16OptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionOptionList) FlatMapUint64(f func(Int16OptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionOptionList) FlatMapUintptr(f func(Int16OptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionOptionList) FlatMapByte(f func(Int16OptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionOptionList) FlatMapRune(f func(Int16OptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionOptionList) FlatMapFloat32(f func(Int16OptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionOptionList) FlatMapFloat64(f func(Int16OptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionOptionList) FlatMapComplex64(f func(Int16OptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionOptionList) FlatMapComplex128(f func(Int16OptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionOptionList) FlatMapAny(f func(Int16OptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionOptionList) FlatMapBool(f func(Int32OptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionOptionList) FlatMapString(f func(Int32OptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionOptionList) FlatMapInt(f func(Int32OptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionOptionList) FlatMapInt8(f func(Int32OptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionOptionList) FlatMapInt16(f func(Int32OptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionOptionList) FlatMapInt32(f func(Int32OptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionOptionList) FlatMapInt64(f func(Int32OptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionOptionList) FlatMapUint(f func(Int32OptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionOptionList) FlatMapUint8(f func(Int32OptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionOptionList) FlatMapUint16(f func(Int32OptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionOptionList) FlatMapUint32(f func(Int32OptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionOptionList) FlatMapUint64(f func(Int32OptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionOptionList) FlatMapUintptr(f func(Int32OptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionOptionList) FlatMapByte(f func(Int32OptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionOptionList) FlatMapRune(f func(Int32OptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionOptionList) FlatMapFloat32(f func(Int32OptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionOptionList) FlatMapFloat64(f func(Int32OptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionOptionList) FlatMapComplex64(f func(Int32OptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionOptionList) FlatMapComplex128(f func(Int32OptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionOptionList) FlatMapAny(f func(Int32OptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionOptionList) FlatMapBool(f func(Int64OptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionOptionList) FlatMapString(f func(Int64OptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionOptionList) FlatMapInt(f func(Int64OptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionOptionList) FlatMapInt8(f func(Int64OptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionOptionList) FlatMapInt16(f func(Int64OptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionOptionList) FlatMapInt32(f func(Int64OptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionOptionList) FlatMapInt64(f func(Int64OptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionOptionList) FlatMapUint(f func(Int64OptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionOptionList) FlatMapUint8(f func(Int64OptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionOptionList) FlatMapUint16(f func(Int64OptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionOptionList) FlatMapUint32(f func(Int64OptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionOptionList) FlatMapUint64(f func(Int64OptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionOptionList) FlatMapUintptr(f func(Int64OptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionOptionList) FlatMapByte(f func(Int64OptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionOptionList) FlatMapRune(f func(Int64OptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionOptionList) FlatMapFloat32(f func(Int64OptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionOptionList) FlatMapFloat64(f func(Int64OptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionOptionList) FlatMapComplex64(f func(Int64OptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionOptionList) FlatMapComplex128(f func(Int64OptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionOptionList) FlatMapAny(f func(Int64OptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionOptionList) FlatMapBool(f func(UintOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionOptionList) FlatMapString(f func(UintOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionOptionList) FlatMapInt(f func(UintOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionOptionList) FlatMapInt8(f func(UintOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionOptionList) FlatMapInt16(f func(UintOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionOptionList) FlatMapInt32(f func(UintOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionOptionList) FlatMapInt64(f func(UintOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionOptionList) FlatMapUint(f func(UintOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionOptionList) FlatMapUint8(f func(UintOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionOptionList) FlatMapUint16(f func(UintOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionOptionList) FlatMapUint32(f func(UintOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionOptionList) FlatMapUint64(f func(UintOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionOptionList) FlatMapUintptr(f func(UintOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionOptionList) FlatMapByte(f func(UintOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionOptionList) FlatMapRune(f func(UintOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionOptionList) FlatMapFloat32(f func(UintOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionOptionList) FlatMapFloat64(f func(UintOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionOptionList) FlatMapComplex64(f func(UintOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionOptionList) FlatMapComplex128(f func(UintOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionOptionList) FlatMapAny(f func(UintOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionOptionList) FlatMapBool(f func(Uint8OptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionOptionList) FlatMapString(f func(Uint8OptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionOptionList) FlatMapInt(f func(Uint8OptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionOptionList) FlatMapInt8(f func(Uint8OptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionOptionList) FlatMapInt16(f func(Uint8OptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionOptionList) FlatMapInt32(f func(Uint8OptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionOptionList) FlatMapInt64(f func(Uint8OptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionOptionList) FlatMapUint(f func(Uint8OptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionOptionList) FlatMapUint8(f func(Uint8OptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionOptionList) FlatMapUint16(f func(Uint8OptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionOptionList) FlatMapUint32(f func(Uint8OptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionOptionList) FlatMapUint64(f func(Uint8OptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionOptionList) FlatMapUintptr(f func(Uint8OptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionOptionList) FlatMapByte(f func(Uint8OptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionOptionList) FlatMapRune(f func(Uint8OptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionOptionList) FlatMapFloat32(f func(Uint8OptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionOptionList) FlatMapFloat64(f func(Uint8OptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionOptionList) FlatMapComplex64(f func(Uint8OptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionOptionList) FlatMapComplex128(f func(Uint8OptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionOptionList) FlatMapAny(f func(Uint8OptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionOptionList) FlatMapBool(f func(Uint16OptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionOptionList) FlatMapString(f func(Uint16OptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionOptionList) FlatMapInt(f func(Uint16OptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionOptionList) FlatMapInt8(f func(Uint16OptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionOptionList) FlatMapInt16(f func(Uint16OptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionOptionList) FlatMapInt32(f func(Uint16OptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionOptionList) FlatMapInt64(f func(Uint16OptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionOptionList) FlatMapUint(f func(Uint16OptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionOptionList) FlatMapUint8(f func(Uint16OptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionOptionList) FlatMapUint16(f func(Uint16OptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionOptionList) FlatMapUint32(f func(Uint16OptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionOptionList) FlatMapUint64(f func(Uint16OptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionOptionList) FlatMapUintptr(f func(Uint16OptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionOptionList) FlatMapByte(f func(Uint16OptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionOptionList) FlatMapRune(f func(Uint16OptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionOptionList) FlatMapFloat32(f func(Uint16OptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionOptionList) FlatMapFloat64(f func(Uint16OptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionOptionList) FlatMapComplex64(f func(Uint16OptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionOptionList) FlatMapComplex128(f func(Uint16OptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionOptionList) FlatMapAny(f func(Uint16OptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionOptionList) FlatMapBool(f func(Uint32OptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionOptionList) FlatMapString(f func(Uint32OptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionOptionList) FlatMapInt(f func(Uint32OptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionOptionList) FlatMapInt8(f func(Uint32OptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionOptionList) FlatMapInt16(f func(Uint32OptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionOptionList) FlatMapInt32(f func(Uint32OptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionOptionList) FlatMapInt64(f func(Uint32OptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionOptionList) FlatMapUint(f func(Uint32OptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionOptionList) FlatMapUint8(f func(Uint32OptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionOptionList) FlatMapUint16(f func(Uint32OptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionOptionList) FlatMapUint32(f func(Uint32OptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionOptionList) FlatMapUint64(f func(Uint32OptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionOptionList) FlatMapUintptr(f func(Uint32OptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionOptionList) FlatMapByte(f func(Uint32OptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionOptionList) FlatMapRune(f func(Uint32OptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionOptionList) FlatMapFloat32(f func(Uint32OptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionOptionList) FlatMapFloat64(f func(Uint32OptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionOptionList) FlatMapComplex64(f func(Uint32OptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionOptionList) FlatMapComplex128(f func(Uint32OptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionOptionList) FlatMapAny(f func(Uint32OptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionOptionList) FlatMapBool(f func(Uint64OptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionOptionList) FlatMapString(f func(Uint64OptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionOptionList) FlatMapInt(f func(Uint64OptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionOptionList) FlatMapInt8(f func(Uint64OptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionOptionList) FlatMapInt16(f func(Uint64OptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionOptionList) FlatMapInt32(f func(Uint64OptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionOptionList) FlatMapInt64(f func(Uint64OptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionOptionList) FlatMapUint(f func(Uint64OptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionOptionList) FlatMapUint8(f func(Uint64OptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionOptionList) FlatMapUint16(f func(Uint64OptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionOptionList) FlatMapUint32(f func(Uint64OptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionOptionList) FlatMapUint64(f func(Uint64OptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionOptionList) FlatMapUintptr(f func(Uint64OptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionOptionList) FlatMapByte(f func(Uint64OptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionOptionList) FlatMapRune(f func(Uint64OptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionOptionList) FlatMapFloat32(f func(Uint64OptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionOptionList) FlatMapFloat64(f func(Uint64OptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionOptionList) FlatMapComplex64(f func(Uint64OptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionOptionList) FlatMapComplex128(f func(Uint64OptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionOptionList) FlatMapAny(f func(Uint64OptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionOptionList) FlatMapBool(f func(UintptrOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionOptionList) FlatMapString(f func(UintptrOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionOptionList) FlatMapInt(f func(UintptrOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionOptionList) FlatMapInt8(f func(UintptrOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionOptionList) FlatMapInt16(f func(UintptrOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionOptionList) FlatMapInt32(f func(UintptrOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionOptionList) FlatMapInt64(f func(UintptrOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionOptionList) FlatMapUint(f func(UintptrOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionOptionList) FlatMapUint8(f func(UintptrOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionOptionList) FlatMapUint16(f func(UintptrOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionOptionList) FlatMapUint32(f func(UintptrOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionOptionList) FlatMapUint64(f func(UintptrOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionOptionList) FlatMapUintptr(f func(UintptrOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionOptionList) FlatMapByte(f func(UintptrOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionOptionList) FlatMapRune(f func(UintptrOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionOptionList) FlatMapFloat32(f func(UintptrOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionOptionList) FlatMapFloat64(f func(UintptrOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionOptionList) FlatMapComplex64(f func(UintptrOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionOptionList) FlatMapComplex128(f func(UintptrOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionOptionList) FlatMapAny(f func(UintptrOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionOptionList) FlatMapBool(f func(ByteOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionOptionList) FlatMapString(f func(ByteOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionOptionList) FlatMapInt(f func(ByteOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionOptionList) FlatMapInt8(f func(ByteOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionOptionList) FlatMapInt16(f func(ByteOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionOptionList) FlatMapInt32(f func(ByteOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionOptionList) FlatMapInt64(f func(ByteOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionOptionList) FlatMapUint(f func(ByteOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionOptionList) FlatMapUint8(f func(ByteOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionOptionList) FlatMapUint16(f func(ByteOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionOptionList) FlatMapUint32(f func(ByteOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionOptionList) FlatMapUint64(f func(ByteOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionOptionList) FlatMapUintptr(f func(ByteOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionOptionList) FlatMapByte(f func(ByteOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionOptionList) FlatMapRune(f func(ByteOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionOptionList) FlatMapFloat32(f func(ByteOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionOptionList) FlatMapFloat64(f func(ByteOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionOptionList) FlatMapComplex64(f func(ByteOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionOptionList) FlatMapComplex128(f func(ByteOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionOptionList) FlatMapAny(f func(ByteOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionOptionList) FlatMapBool(f func(RuneOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionOptionList) FlatMapString(f func(RuneOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionOptionList) FlatMapInt(f func(RuneOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionOptionList) FlatMapInt8(f func(RuneOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionOptionList) FlatMapInt16(f func(RuneOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionOptionList) FlatMapInt32(f func(RuneOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionOptionList) FlatMapInt64(f func(RuneOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionOptionList) FlatMapUint(f func(RuneOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionOptionList) FlatMapUint8(f func(RuneOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionOptionList) FlatMapUint16(f func(RuneOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionOptionList) FlatMapUint32(f func(RuneOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionOptionList) FlatMapUint64(f func(RuneOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionOptionList) FlatMapUintptr(f func(RuneOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionOptionList) FlatMapByte(f func(RuneOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionOptionList) FlatMapRune(f func(RuneOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionOptionList) FlatMapFloat32(f func(RuneOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionOptionList) FlatMapFloat64(f func(RuneOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionOptionList) FlatMapComplex64(f func(RuneOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionOptionList) FlatMapComplex128(f func(RuneOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionOptionList) FlatMapAny(f func(RuneOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionOptionList) FlatMapBool(f func(Float32OptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionOptionList) FlatMapString(f func(Float32OptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionOptionList) FlatMapInt(f func(Float32OptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionOptionList) FlatMapInt8(f func(Float32OptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionOptionList) FlatMapInt16(f func(Float32OptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionOptionList) FlatMapInt32(f func(Float32OptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionOptionList) FlatMapInt64(f func(Float32OptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionOptionList) FlatMapUint(f func(Float32OptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionOptionList) FlatMapUint8(f func(Float32OptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionOptionList) FlatMapUint16(f func(Float32OptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionOptionList) FlatMapUint32(f func(Float32OptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionOptionList) FlatMapUint64(f func(Float32OptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionOptionList) FlatMapUintptr(f func(Float32OptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionOptionList) FlatMapByte(f func(Float32OptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionOptionList) FlatMapRune(f func(Float32OptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionOptionList) FlatMapFloat32(f func(Float32OptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionOptionList) FlatMapFloat64(f func(Float32OptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionOptionList) FlatMapComplex64(f func(Float32OptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionOptionList) FlatMapComplex128(f func(Float32OptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionOptionList) FlatMapAny(f func(Float32OptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionOptionList) FlatMapBool(f func(Float64OptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionOptionList) FlatMapString(f func(Float64OptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionOptionList) FlatMapInt(f func(Float64OptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionOptionList) FlatMapInt8(f func(Float64OptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionOptionList) FlatMapInt16(f func(Float64OptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionOptionList) FlatMapInt32(f func(Float64OptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionOptionList) FlatMapInt64(f func(Float64OptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionOptionList) FlatMapUint(f func(Float64OptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionOptionList) FlatMapUint8(f func(Float64OptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionOptionList) FlatMapUint16(f func(Float64OptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionOptionList) FlatMapUint32(f func(Float64OptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionOptionList) FlatMapUint64(f func(Float64OptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionOptionList) FlatMapUintptr(f func(Float64OptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionOptionList) FlatMapByte(f func(Float64OptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionOptionList) FlatMapRune(f func(Float64OptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionOptionList) FlatMapFloat32(f func(Float64OptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionOptionList) FlatMapFloat64(f func(Float64OptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionOptionList) FlatMapComplex64(f func(Float64OptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionOptionList) FlatMapComplex128(f func(Float64OptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionOptionList) FlatMapAny(f func(Float64OptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionOptionList) FlatMapBool(f func(Complex64OptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionOptionList) FlatMapString(f func(Complex64OptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionOptionList) FlatMapInt(f func(Complex64OptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionOptionList) FlatMapInt8(f func(Complex64OptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionOptionList) FlatMapInt16(f func(Complex64OptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionOptionList) FlatMapInt32(f func(Complex64OptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionOptionList) FlatMapInt64(f func(Complex64OptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionOptionList) FlatMapUint(f func(Complex64OptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionOptionList) FlatMapUint8(f func(Complex64OptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionOptionList) FlatMapUint16(f func(Complex64OptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionOptionList) FlatMapUint32(f func(Complex64OptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionOptionList) FlatMapUint64(f func(Complex64OptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionOptionList) FlatMapUintptr(f func(Complex64OptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionOptionList) FlatMapByte(f func(Complex64OptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionOptionList) FlatMapRune(f func(Complex64OptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionOptionList) FlatMapFloat32(f func(Complex64OptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionOptionList) FlatMapFloat64(f func(Complex64OptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionOptionList) FlatMapComplex64(f func(Complex64OptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionOptionList) FlatMapComplex128(f func(Complex64OptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionOptionList) FlatMapAny(f func(Complex64OptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionOptionList) FlatMapBool(f func(Complex128OptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionOptionList) FlatMapString(f func(Complex128OptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionOptionList) FlatMapInt(f func(Complex128OptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionOptionList) FlatMapInt8(f func(Complex128OptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionOptionList) FlatMapInt16(f func(Complex128OptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionOptionList) FlatMapInt32(f func(Complex128OptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionOptionList) FlatMapInt64(f func(Complex128OptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionOptionList) FlatMapUint(f func(Complex128OptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionOptionList) FlatMapUint8(f func(Complex128OptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionOptionList) FlatMapUint16(f func(Complex128OptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionOptionList) FlatMapUint32(f func(Complex128OptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionOptionList) FlatMapUint64(f func(Complex128OptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionOptionList) FlatMapUintptr(f func(Complex128OptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionOptionList) FlatMapByte(f func(Complex128OptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionOptionList) FlatMapRune(f func(Complex128OptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionOptionList) FlatMapFloat32(f func(Complex128OptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionOptionList) FlatMapFloat64(f func(Complex128OptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionOptionList) FlatMapComplex64(f func(Complex128OptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionOptionList) FlatMapComplex128(f func(Complex128OptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionOptionList) FlatMapAny(f func(Complex128OptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionOptionList) FlatMapBool(f func(AnyOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionOptionList) FlatMapString(f func(AnyOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionOptionList) FlatMapInt(f func(AnyOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionOptionList) FlatMapInt8(f func(AnyOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionOptionList) FlatMapInt16(f func(AnyOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionOptionList) FlatMapInt32(f func(AnyOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionOptionList) FlatMapInt64(f func(AnyOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionOptionList) FlatMapUint(f func(AnyOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionOptionList) FlatMapUint8(f func(AnyOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionOptionList) FlatMapUint16(f func(AnyOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionOptionList) FlatMapUint32(f func(AnyOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionOptionList) FlatMapUint64(f func(AnyOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionOptionList) FlatMapUintptr(f func(AnyOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionOptionList) FlatMapByte(f func(AnyOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionOptionList) FlatMapRune(f func(AnyOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionOptionList) FlatMapFloat32(f func(AnyOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionOptionList) FlatMapFloat64(f func(AnyOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionOptionList) FlatMapComplex64(f func(AnyOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionOptionList) FlatMapComplex128(f func(AnyOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionOptionList) FlatMapAny(f func(AnyOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayOptionOptionList) FlatMapBool(f func(BoolArrayOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayOptionOptionList) FlatMapString(f func(BoolArrayOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayOptionOptionList) FlatMapInt(f func(BoolArrayOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayOptionOptionList) FlatMapInt8(f func(BoolArrayOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayOptionOptionList) FlatMapInt16(f func(BoolArrayOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayOptionOptionList) FlatMapInt32(f func(BoolArrayOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayOptionOptionList) FlatMapInt64(f func(BoolArrayOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayOptionOptionList) FlatMapUint(f func(BoolArrayOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayOptionOptionList) FlatMapUint8(f func(BoolArrayOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayOptionOptionList) FlatMapUint16(f func(BoolArrayOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayOptionOptionList) FlatMapUint32(f func(BoolArrayOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayOptionOptionList) FlatMapUint64(f func(BoolArrayOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayOptionOptionList) FlatMapUintptr(f func(BoolArrayOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayOptionOptionList) FlatMapByte(f func(BoolArrayOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayOptionOptionList) FlatMapRune(f func(BoolArrayOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayOptionOptionList) FlatMapFloat32(f func(BoolArrayOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayOptionOptionList) FlatMapFloat64(f func(BoolArrayOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayOptionOptionList) FlatMapComplex64(f func(BoolArrayOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayOptionOptionList) FlatMapComplex128(f func(BoolArrayOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayOptionOptionList) FlatMapAny(f func(BoolArrayOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayOptionOptionList) FlatMapBool(f func(StringArrayOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayOptionOptionList) FlatMapString(f func(StringArrayOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayOptionOptionList) FlatMapInt(f func(StringArrayOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayOptionOptionList) FlatMapInt8(f func(StringArrayOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayOptionOptionList) FlatMapInt16(f func(StringArrayOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayOptionOptionList) FlatMapInt32(f func(StringArrayOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayOptionOptionList) FlatMapInt64(f func(StringArrayOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayOptionOptionList) FlatMapUint(f func(StringArrayOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayOptionOptionList) FlatMapUint8(f func(StringArrayOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayOptionOptionList) FlatMapUint16(f func(StringArrayOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayOptionOptionList) FlatMapUint32(f func(StringArrayOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayOptionOptionList) FlatMapUint64(f func(StringArrayOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayOptionOptionList) FlatMapUintptr(f func(StringArrayOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayOptionOptionList) FlatMapByte(f func(StringArrayOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayOptionOptionList) FlatMapRune(f func(StringArrayOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayOptionOptionList) FlatMapFloat32(f func(StringArrayOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayOptionOptionList) FlatMapFloat64(f func(StringArrayOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayOptionOptionList) FlatMapComplex64(f func(StringArrayOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayOptionOptionList) FlatMapComplex128(f func(StringArrayOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayOptionOptionList) FlatMapAny(f func(StringArrayOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayOptionOptionList) FlatMapBool(f func(IntArrayOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayOptionOptionList) FlatMapString(f func(IntArrayOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayOptionOptionList) FlatMapInt(f func(IntArrayOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayOptionOptionList) FlatMapInt8(f func(IntArrayOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayOptionOptionList) FlatMapInt16(f func(IntArrayOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayOptionOptionList) FlatMapInt32(f func(IntArrayOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayOptionOptionList) FlatMapInt64(f func(IntArrayOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayOptionOptionList) FlatMapUint(f func(IntArrayOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayOptionOptionList) FlatMapUint8(f func(IntArrayOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayOptionOptionList) FlatMapUint16(f func(IntArrayOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayOptionOptionList) FlatMapUint32(f func(IntArrayOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayOptionOptionList) FlatMapUint64(f func(IntArrayOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayOptionOptionList) FlatMapUintptr(f func(IntArrayOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayOptionOptionList) FlatMapByte(f func(IntArrayOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayOptionOptionList) FlatMapRune(f func(IntArrayOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayOptionOptionList) FlatMapFloat32(f func(IntArrayOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayOptionOptionList) FlatMapFloat64(f func(IntArrayOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayOptionOptionList) FlatMapComplex64(f func(IntArrayOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayOptionOptionList) FlatMapComplex128(f func(IntArrayOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayOptionOptionList) FlatMapAny(f func(IntArrayOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayOptionOptionList) FlatMapBool(f func(Int8ArrayOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayOptionOptionList) FlatMapString(f func(Int8ArrayOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayOptionOptionList) FlatMapInt(f func(Int8ArrayOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayOptionOptionList) FlatMapInt8(f func(Int8ArrayOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayOptionOptionList) FlatMapInt16(f func(Int8ArrayOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayOptionOptionList) FlatMapInt32(f func(Int8ArrayOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayOptionOptionList) FlatMapInt64(f func(Int8ArrayOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayOptionOptionList) FlatMapUint(f func(Int8ArrayOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayOptionOptionList) FlatMapUint8(f func(Int8ArrayOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayOptionOptionList) FlatMapUint16(f func(Int8ArrayOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayOptionOptionList) FlatMapUint32(f func(Int8ArrayOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayOptionOptionList) FlatMapUint64(f func(Int8ArrayOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayOptionOptionList) FlatMapUintptr(f func(Int8ArrayOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayOptionOptionList) FlatMapByte(f func(Int8ArrayOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayOptionOptionList) FlatMapRune(f func(Int8ArrayOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayOptionOptionList) FlatMapFloat32(f func(Int8ArrayOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayOptionOptionList) FlatMapFloat64(f func(Int8ArrayOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayOptionOptionList) FlatMapComplex64(f func(Int8ArrayOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayOptionOptionList) FlatMapComplex128(f func(Int8ArrayOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayOptionOptionList) FlatMapAny(f func(Int8ArrayOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayOptionOptionList) FlatMapBool(f func(Int16ArrayOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayOptionOptionList) FlatMapString(f func(Int16ArrayOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayOptionOptionList) FlatMapInt(f func(Int16ArrayOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayOptionOptionList) FlatMapInt8(f func(Int16ArrayOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayOptionOptionList) FlatMapInt16(f func(Int16ArrayOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayOptionOptionList) FlatMapInt32(f func(Int16ArrayOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayOptionOptionList) FlatMapInt64(f func(Int16ArrayOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayOptionOptionList) FlatMapUint(f func(Int16ArrayOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayOptionOptionList) FlatMapUint8(f func(Int16ArrayOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayOptionOptionList) FlatMapUint16(f func(Int16ArrayOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayOptionOptionList) FlatMapUint32(f func(Int16ArrayOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayOptionOptionList) FlatMapUint64(f func(Int16ArrayOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayOptionOptionList) FlatMapUintptr(f func(Int16ArrayOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayOptionOptionList) FlatMapByte(f func(Int16ArrayOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayOptionOptionList) FlatMapRune(f func(Int16ArrayOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayOptionOptionList) FlatMapFloat32(f func(Int16ArrayOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayOptionOptionList) FlatMapFloat64(f func(Int16ArrayOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayOptionOptionList) FlatMapComplex64(f func(Int16ArrayOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayOptionOptionList) FlatMapComplex128(f func(Int16ArrayOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayOptionOptionList) FlatMapAny(f func(Int16ArrayOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayOptionOptionList) FlatMapBool(f func(Int32ArrayOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayOptionOptionList) FlatMapString(f func(Int32ArrayOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayOptionOptionList) FlatMapInt(f func(Int32ArrayOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayOptionOptionList) FlatMapInt8(f func(Int32ArrayOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayOptionOptionList) FlatMapInt16(f func(Int32ArrayOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayOptionOptionList) FlatMapInt32(f func(Int32ArrayOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayOptionOptionList) FlatMapInt64(f func(Int32ArrayOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayOptionOptionList) FlatMapUint(f func(Int32ArrayOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayOptionOptionList) FlatMapUint8(f func(Int32ArrayOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayOptionOptionList) FlatMapUint16(f func(Int32ArrayOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayOptionOptionList) FlatMapUint32(f func(Int32ArrayOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayOptionOptionList) FlatMapUint64(f func(Int32ArrayOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayOptionOptionList) FlatMapUintptr(f func(Int32ArrayOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayOptionOptionList) FlatMapByte(f func(Int32ArrayOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayOptionOptionList) FlatMapRune(f func(Int32ArrayOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayOptionOptionList) FlatMapFloat32(f func(Int32ArrayOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayOptionOptionList) FlatMapFloat64(f func(Int32ArrayOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayOptionOptionList) FlatMapComplex64(f func(Int32ArrayOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayOptionOptionList) FlatMapComplex128(f func(Int32ArrayOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayOptionOptionList) FlatMapAny(f func(Int32ArrayOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayOptionOptionList) FlatMapBool(f func(Int64ArrayOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayOptionOptionList) FlatMapString(f func(Int64ArrayOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayOptionOptionList) FlatMapInt(f func(Int64ArrayOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayOptionOptionList) FlatMapInt8(f func(Int64ArrayOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayOptionOptionList) FlatMapInt16(f func(Int64ArrayOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayOptionOptionList) FlatMapInt32(f func(Int64ArrayOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayOptionOptionList) FlatMapInt64(f func(Int64ArrayOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayOptionOptionList) FlatMapUint(f func(Int64ArrayOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayOptionOptionList) FlatMapUint8(f func(Int64ArrayOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayOptionOptionList) FlatMapUint16(f func(Int64ArrayOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayOptionOptionList) FlatMapUint32(f func(Int64ArrayOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayOptionOptionList) FlatMapUint64(f func(Int64ArrayOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayOptionOptionList) FlatMapUintptr(f func(Int64ArrayOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayOptionOptionList) FlatMapByte(f func(Int64ArrayOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayOptionOptionList) FlatMapRune(f func(Int64ArrayOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayOptionOptionList) FlatMapFloat32(f func(Int64ArrayOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayOptionOptionList) FlatMapFloat64(f func(Int64ArrayOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayOptionOptionList) FlatMapComplex64(f func(Int64ArrayOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayOptionOptionList) FlatMapComplex128(f func(Int64ArrayOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayOptionOptionList) FlatMapAny(f func(Int64ArrayOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayOptionOptionList) FlatMapBool(f func(UintArrayOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayOptionOptionList) FlatMapString(f func(UintArrayOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayOptionOptionList) FlatMapInt(f func(UintArrayOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayOptionOptionList) FlatMapInt8(f func(UintArrayOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayOptionOptionList) FlatMapInt16(f func(UintArrayOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayOptionOptionList) FlatMapInt32(f func(UintArrayOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayOptionOptionList) FlatMapInt64(f func(UintArrayOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayOptionOptionList) FlatMapUint(f func(UintArrayOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayOptionOptionList) FlatMapUint8(f func(UintArrayOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayOptionOptionList) FlatMapUint16(f func(UintArrayOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayOptionOptionList) FlatMapUint32(f func(UintArrayOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayOptionOptionList) FlatMapUint64(f func(UintArrayOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayOptionOptionList) FlatMapUintptr(f func(UintArrayOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayOptionOptionList) FlatMapByte(f func(UintArrayOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayOptionOptionList) FlatMapRune(f func(UintArrayOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayOptionOptionList) FlatMapFloat32(f func(UintArrayOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayOptionOptionList) FlatMapFloat64(f func(UintArrayOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayOptionOptionList) FlatMapComplex64(f func(UintArrayOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayOptionOptionList) FlatMapComplex128(f func(UintArrayOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayOptionOptionList) FlatMapAny(f func(UintArrayOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayOptionOptionList) FlatMapBool(f func(Uint8ArrayOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayOptionOptionList) FlatMapString(f func(Uint8ArrayOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayOptionOptionList) FlatMapInt(f func(Uint8ArrayOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayOptionOptionList) FlatMapInt8(f func(Uint8ArrayOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayOptionOptionList) FlatMapInt16(f func(Uint8ArrayOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayOptionOptionList) FlatMapInt32(f func(Uint8ArrayOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayOptionOptionList) FlatMapInt64(f func(Uint8ArrayOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayOptionOptionList) FlatMapUint(f func(Uint8ArrayOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayOptionOptionList) FlatMapUint8(f func(Uint8ArrayOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayOptionOptionList) FlatMapUint16(f func(Uint8ArrayOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayOptionOptionList) FlatMapUint32(f func(Uint8ArrayOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayOptionOptionList) FlatMapUint64(f func(Uint8ArrayOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayOptionOptionList) FlatMapUintptr(f func(Uint8ArrayOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayOptionOptionList) FlatMapByte(f func(Uint8ArrayOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayOptionOptionList) FlatMapRune(f func(Uint8ArrayOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayOptionOptionList) FlatMapFloat32(f func(Uint8ArrayOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayOptionOptionList) FlatMapFloat64(f func(Uint8ArrayOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayOptionOptionList) FlatMapComplex64(f func(Uint8ArrayOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayOptionOptionList) FlatMapComplex128(f func(Uint8ArrayOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayOptionOptionList) FlatMapAny(f func(Uint8ArrayOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayOptionOptionList) FlatMapBool(f func(Uint16ArrayOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayOptionOptionList) FlatMapString(f func(Uint16ArrayOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayOptionOptionList) FlatMapInt(f func(Uint16ArrayOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayOptionOptionList) FlatMapInt8(f func(Uint16ArrayOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayOptionOptionList) FlatMapInt16(f func(Uint16ArrayOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayOptionOptionList) FlatMapInt32(f func(Uint16ArrayOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayOptionOptionList) FlatMapInt64(f func(Uint16ArrayOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayOptionOptionList) FlatMapUint(f func(Uint16ArrayOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayOptionOptionList) FlatMapUint8(f func(Uint16ArrayOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayOptionOptionList) FlatMapUint16(f func(Uint16ArrayOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayOptionOptionList) FlatMapUint32(f func(Uint16ArrayOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayOptionOptionList) FlatMapUint64(f func(Uint16ArrayOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayOptionOptionList) FlatMapUintptr(f func(Uint16ArrayOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayOptionOptionList) FlatMapByte(f func(Uint16ArrayOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayOptionOptionList) FlatMapRune(f func(Uint16ArrayOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayOptionOptionList) FlatMapFloat32(f func(Uint16ArrayOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayOptionOptionList) FlatMapFloat64(f func(Uint16ArrayOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayOptionOptionList) FlatMapComplex64(f func(Uint16ArrayOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayOptionOptionList) FlatMapComplex128(f func(Uint16ArrayOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayOptionOptionList) FlatMapAny(f func(Uint16ArrayOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayOptionOptionList) FlatMapBool(f func(Uint32ArrayOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayOptionOptionList) FlatMapString(f func(Uint32ArrayOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayOptionOptionList) FlatMapInt(f func(Uint32ArrayOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayOptionOptionList) FlatMapInt8(f func(Uint32ArrayOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayOptionOptionList) FlatMapInt16(f func(Uint32ArrayOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayOptionOptionList) FlatMapInt32(f func(Uint32ArrayOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayOptionOptionList) FlatMapInt64(f func(Uint32ArrayOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayOptionOptionList) FlatMapUint(f func(Uint32ArrayOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayOptionOptionList) FlatMapUint8(f func(Uint32ArrayOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayOptionOptionList) FlatMapUint16(f func(Uint32ArrayOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayOptionOptionList) FlatMapUint32(f func(Uint32ArrayOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayOptionOptionList) FlatMapUint64(f func(Uint32ArrayOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayOptionOptionList) FlatMapUintptr(f func(Uint32ArrayOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayOptionOptionList) FlatMapByte(f func(Uint32ArrayOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayOptionOptionList) FlatMapRune(f func(Uint32ArrayOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayOptionOptionList) FlatMapFloat32(f func(Uint32ArrayOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayOptionOptionList) FlatMapFloat64(f func(Uint32ArrayOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayOptionOptionList) FlatMapComplex64(f func(Uint32ArrayOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayOptionOptionList) FlatMapComplex128(f func(Uint32ArrayOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayOptionOptionList) FlatMapAny(f func(Uint32ArrayOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayOptionOptionList) FlatMapBool(f func(Uint64ArrayOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayOptionOptionList) FlatMapString(f func(Uint64ArrayOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayOptionOptionList) FlatMapInt(f func(Uint64ArrayOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayOptionOptionList) FlatMapInt8(f func(Uint64ArrayOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayOptionOptionList) FlatMapInt16(f func(Uint64ArrayOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayOptionOptionList) FlatMapInt32(f func(Uint64ArrayOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayOptionOptionList) FlatMapInt64(f func(Uint64ArrayOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayOptionOptionList) FlatMapUint(f func(Uint64ArrayOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayOptionOptionList) FlatMapUint8(f func(Uint64ArrayOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayOptionOptionList) FlatMapUint16(f func(Uint64ArrayOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayOptionOptionList) FlatMapUint32(f func(Uint64ArrayOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayOptionOptionList) FlatMapUint64(f func(Uint64ArrayOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayOptionOptionList) FlatMapUintptr(f func(Uint64ArrayOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayOptionOptionList) FlatMapByte(f func(Uint64ArrayOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayOptionOptionList) FlatMapRune(f func(Uint64ArrayOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayOptionOptionList) FlatMapFloat32(f func(Uint64ArrayOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayOptionOptionList) FlatMapFloat64(f func(Uint64ArrayOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayOptionOptionList) FlatMapComplex64(f func(Uint64ArrayOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayOptionOptionList) FlatMapComplex128(f func(Uint64ArrayOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayOptionOptionList) FlatMapAny(f func(Uint64ArrayOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayOptionOptionList) FlatMapBool(f func(UintptrArrayOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayOptionOptionList) FlatMapString(f func(UintptrArrayOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayOptionOptionList) FlatMapInt(f func(UintptrArrayOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayOptionOptionList) FlatMapInt8(f func(UintptrArrayOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayOptionOptionList) FlatMapInt16(f func(UintptrArrayOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayOptionOptionList) FlatMapInt32(f func(UintptrArrayOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayOptionOptionList) FlatMapInt64(f func(UintptrArrayOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayOptionOptionList) FlatMapUint(f func(UintptrArrayOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayOptionOptionList) FlatMapUint8(f func(UintptrArrayOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayOptionOptionList) FlatMapUint16(f func(UintptrArrayOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayOptionOptionList) FlatMapUint32(f func(UintptrArrayOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayOptionOptionList) FlatMapUint64(f func(UintptrArrayOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayOptionOptionList) FlatMapUintptr(f func(UintptrArrayOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayOptionOptionList) FlatMapByte(f func(UintptrArrayOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayOptionOptionList) FlatMapRune(f func(UintptrArrayOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayOptionOptionList) FlatMapFloat32(f func(UintptrArrayOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayOptionOptionList) FlatMapFloat64(f func(UintptrArrayOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayOptionOptionList) FlatMapComplex64(f func(UintptrArrayOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayOptionOptionList) FlatMapComplex128(f func(UintptrArrayOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayOptionOptionList) FlatMapAny(f func(UintptrArrayOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayOptionOptionList) FlatMapBool(f func(ByteArrayOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayOptionOptionList) FlatMapString(f func(ByteArrayOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayOptionOptionList) FlatMapInt(f func(ByteArrayOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayOptionOptionList) FlatMapInt8(f func(ByteArrayOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayOptionOptionList) FlatMapInt16(f func(ByteArrayOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayOptionOptionList) FlatMapInt32(f func(ByteArrayOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayOptionOptionList) FlatMapInt64(f func(ByteArrayOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayOptionOptionList) FlatMapUint(f func(ByteArrayOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayOptionOptionList) FlatMapUint8(f func(ByteArrayOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayOptionOptionList) FlatMapUint16(f func(ByteArrayOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayOptionOptionList) FlatMapUint32(f func(ByteArrayOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayOptionOptionList) FlatMapUint64(f func(ByteArrayOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayOptionOptionList) FlatMapUintptr(f func(ByteArrayOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayOptionOptionList) FlatMapByte(f func(ByteArrayOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayOptionOptionList) FlatMapRune(f func(ByteArrayOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayOptionOptionList) FlatMapFloat32(f func(ByteArrayOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayOptionOptionList) FlatMapFloat64(f func(ByteArrayOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayOptionOptionList) FlatMapComplex64(f func(ByteArrayOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayOptionOptionList) FlatMapComplex128(f func(ByteArrayOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayOptionOptionList) FlatMapAny(f func(ByteArrayOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayOptionOptionList) FlatMapBool(f func(RuneArrayOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayOptionOptionList) FlatMapString(f func(RuneArrayOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayOptionOptionList) FlatMapInt(f func(RuneArrayOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayOptionOptionList) FlatMapInt8(f func(RuneArrayOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayOptionOptionList) FlatMapInt16(f func(RuneArrayOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayOptionOptionList) FlatMapInt32(f func(RuneArrayOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayOptionOptionList) FlatMapInt64(f func(RuneArrayOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayOptionOptionList) FlatMapUint(f func(RuneArrayOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayOptionOptionList) FlatMapUint8(f func(RuneArrayOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayOptionOptionList) FlatMapUint16(f func(RuneArrayOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayOptionOptionList) FlatMapUint32(f func(RuneArrayOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayOptionOptionList) FlatMapUint64(f func(RuneArrayOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayOptionOptionList) FlatMapUintptr(f func(RuneArrayOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayOptionOptionList) FlatMapByte(f func(RuneArrayOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayOptionOptionList) FlatMapRune(f func(RuneArrayOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayOptionOptionList) FlatMapFloat32(f func(RuneArrayOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayOptionOptionList) FlatMapFloat64(f func(RuneArrayOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayOptionOptionList) FlatMapComplex64(f func(RuneArrayOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayOptionOptionList) FlatMapComplex128(f func(RuneArrayOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayOptionOptionList) FlatMapAny(f func(RuneArrayOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayOptionOptionList) FlatMapBool(f func(Float32ArrayOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayOptionOptionList) FlatMapString(f func(Float32ArrayOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayOptionOptionList) FlatMapInt(f func(Float32ArrayOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayOptionOptionList) FlatMapInt8(f func(Float32ArrayOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayOptionOptionList) FlatMapInt16(f func(Float32ArrayOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayOptionOptionList) FlatMapInt32(f func(Float32ArrayOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayOptionOptionList) FlatMapInt64(f func(Float32ArrayOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayOptionOptionList) FlatMapUint(f func(Float32ArrayOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayOptionOptionList) FlatMapUint8(f func(Float32ArrayOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayOptionOptionList) FlatMapUint16(f func(Float32ArrayOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayOptionOptionList) FlatMapUint32(f func(Float32ArrayOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayOptionOptionList) FlatMapUint64(f func(Float32ArrayOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayOptionOptionList) FlatMapUintptr(f func(Float32ArrayOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayOptionOptionList) FlatMapByte(f func(Float32ArrayOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayOptionOptionList) FlatMapRune(f func(Float32ArrayOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayOptionOptionList) FlatMapFloat32(f func(Float32ArrayOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayOptionOptionList) FlatMapFloat64(f func(Float32ArrayOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayOptionOptionList) FlatMapComplex64(f func(Float32ArrayOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayOptionOptionList) FlatMapComplex128(f func(Float32ArrayOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayOptionOptionList) FlatMapAny(f func(Float32ArrayOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayOptionOptionList) FlatMapBool(f func(Float64ArrayOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayOptionOptionList) FlatMapString(f func(Float64ArrayOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayOptionOptionList) FlatMapInt(f func(Float64ArrayOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayOptionOptionList) FlatMapInt8(f func(Float64ArrayOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayOptionOptionList) FlatMapInt16(f func(Float64ArrayOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayOptionOptionList) FlatMapInt32(f func(Float64ArrayOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayOptionOptionList) FlatMapInt64(f func(Float64ArrayOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayOptionOptionList) FlatMapUint(f func(Float64ArrayOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayOptionOptionList) FlatMapUint8(f func(Float64ArrayOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayOptionOptionList) FlatMapUint16(f func(Float64ArrayOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayOptionOptionList) FlatMapUint32(f func(Float64ArrayOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayOptionOptionList) FlatMapUint64(f func(Float64ArrayOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayOptionOptionList) FlatMapUintptr(f func(Float64ArrayOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayOptionOptionList) FlatMapByte(f func(Float64ArrayOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayOptionOptionList) FlatMapRune(f func(Float64ArrayOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayOptionOptionList) FlatMapFloat32(f func(Float64ArrayOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayOptionOptionList) FlatMapFloat64(f func(Float64ArrayOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayOptionOptionList) FlatMapComplex64(f func(Float64ArrayOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayOptionOptionList) FlatMapComplex128(f func(Float64ArrayOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayOptionOptionList) FlatMapAny(f func(Float64ArrayOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayOptionOptionList) FlatMapBool(f func(Complex64ArrayOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayOptionOptionList) FlatMapString(f func(Complex64ArrayOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayOptionOptionList) FlatMapInt(f func(Complex64ArrayOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayOptionOptionList) FlatMapInt8(f func(Complex64ArrayOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayOptionOptionList) FlatMapInt16(f func(Complex64ArrayOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayOptionOptionList) FlatMapInt32(f func(Complex64ArrayOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayOptionOptionList) FlatMapInt64(f func(Complex64ArrayOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayOptionOptionList) FlatMapUint(f func(Complex64ArrayOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayOptionOptionList) FlatMapUint8(f func(Complex64ArrayOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayOptionOptionList) FlatMapUint16(f func(Complex64ArrayOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayOptionOptionList) FlatMapUint32(f func(Complex64ArrayOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayOptionOptionList) FlatMapUint64(f func(Complex64ArrayOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayOptionOptionList) FlatMapUintptr(f func(Complex64ArrayOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayOptionOptionList) FlatMapByte(f func(Complex64ArrayOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayOptionOptionList) FlatMapRune(f func(Complex64ArrayOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayOptionOptionList) FlatMapFloat32(f func(Complex64ArrayOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayOptionOptionList) FlatMapFloat64(f func(Complex64ArrayOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayOptionOptionList) FlatMapComplex64(f func(Complex64ArrayOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayOptionOptionList) FlatMapComplex128(f func(Complex64ArrayOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayOptionOptionList) FlatMapAny(f func(Complex64ArrayOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayOptionOptionList) FlatMapBool(f func(Complex128ArrayOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayOptionOptionList) FlatMapString(f func(Complex128ArrayOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayOptionOptionList) FlatMapInt(f func(Complex128ArrayOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayOptionOptionList) FlatMapInt8(f func(Complex128ArrayOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayOptionOptionList) FlatMapInt16(f func(Complex128ArrayOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayOptionOptionList) FlatMapInt32(f func(Complex128ArrayOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayOptionOptionList) FlatMapInt64(f func(Complex128ArrayOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayOptionOptionList) FlatMapUint(f func(Complex128ArrayOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayOptionOptionList) FlatMapUint8(f func(Complex128ArrayOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayOptionOptionList) FlatMapUint16(f func(Complex128ArrayOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayOptionOptionList) FlatMapUint32(f func(Complex128ArrayOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayOptionOptionList) FlatMapUint64(f func(Complex128ArrayOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayOptionOptionList) FlatMapUintptr(f func(Complex128ArrayOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayOptionOptionList) FlatMapByte(f func(Complex128ArrayOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayOptionOptionList) FlatMapRune(f func(Complex128ArrayOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayOptionOptionList) FlatMapFloat32(f func(Complex128ArrayOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayOptionOptionList) FlatMapFloat64(f func(Complex128ArrayOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayOptionOptionList) FlatMapComplex64(f func(Complex128ArrayOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayOptionOptionList) FlatMapComplex128(f func(Complex128ArrayOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayOptionOptionList) FlatMapAny(f func(Complex128ArrayOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayOptionOptionList) FlatMapBool(f func(AnyArrayOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayOptionOptionList) FlatMapString(f func(AnyArrayOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayOptionOptionList) FlatMapInt(f func(AnyArrayOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayOptionOptionList) FlatMapInt8(f func(AnyArrayOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayOptionOptionList) FlatMapInt16(f func(AnyArrayOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayOptionOptionList) FlatMapInt32(f func(AnyArrayOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayOptionOptionList) FlatMapInt64(f func(AnyArrayOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayOptionOptionList) FlatMapUint(f func(AnyArrayOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayOptionOptionList) FlatMapUint8(f func(AnyArrayOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayOptionOptionList) FlatMapUint16(f func(AnyArrayOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayOptionOptionList) FlatMapUint32(f func(AnyArrayOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayOptionOptionList) FlatMapUint64(f func(AnyArrayOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayOptionOptionList) FlatMapUintptr(f func(AnyArrayOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayOptionOptionList) FlatMapByte(f func(AnyArrayOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayOptionOptionList) FlatMapRune(f func(AnyArrayOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayOptionOptionList) FlatMapFloat32(f func(AnyArrayOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayOptionOptionList) FlatMapFloat64(f func(AnyArrayOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayOptionOptionList) FlatMapComplex64(f func(AnyArrayOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayOptionOptionList) FlatMapComplex128(f func(AnyArrayOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayOptionOptionList) FlatMapAny(f func(AnyArrayOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayArrayOptionOptionList) FlatMapBool(f func(BoolArrayArrayOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayArrayOptionOptionList) FlatMapString(f func(BoolArrayArrayOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayArrayOptionOptionList) FlatMapInt(f func(BoolArrayArrayOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayArrayOptionOptionList) FlatMapInt8(f func(BoolArrayArrayOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayArrayOptionOptionList) FlatMapInt16(f func(BoolArrayArrayOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayArrayOptionOptionList) FlatMapInt32(f func(BoolArrayArrayOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayArrayOptionOptionList) FlatMapInt64(f func(BoolArrayArrayOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayArrayOptionOptionList) FlatMapUint(f func(BoolArrayArrayOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayArrayOptionOptionList) FlatMapUint8(f func(BoolArrayArrayOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayArrayOptionOptionList) FlatMapUint16(f func(BoolArrayArrayOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayArrayOptionOptionList) FlatMapUint32(f func(BoolArrayArrayOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayArrayOptionOptionList) FlatMapUint64(f func(BoolArrayArrayOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayArrayOptionOptionList) FlatMapUintptr(f func(BoolArrayArrayOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayArrayOptionOptionList) FlatMapByte(f func(BoolArrayArrayOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayArrayOptionOptionList) FlatMapRune(f func(BoolArrayArrayOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayArrayOptionOptionList) FlatMapFloat32(f func(BoolArrayArrayOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayArrayOptionOptionList) FlatMapFloat64(f func(BoolArrayArrayOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayArrayOptionOptionList) FlatMapComplex64(f func(BoolArrayArrayOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayArrayOptionOptionList) FlatMapComplex128(f func(BoolArrayArrayOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayArrayOptionOptionList) FlatMapAny(f func(BoolArrayArrayOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayArrayOptionOptionList) FlatMapBool(f func(StringArrayArrayOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayArrayOptionOptionList) FlatMapString(f func(StringArrayArrayOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayArrayOptionOptionList) FlatMapInt(f func(StringArrayArrayOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayArrayOptionOptionList) FlatMapInt8(f func(StringArrayArrayOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayArrayOptionOptionList) FlatMapInt16(f func(StringArrayArrayOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayArrayOptionOptionList) FlatMapInt32(f func(StringArrayArrayOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayArrayOptionOptionList) FlatMapInt64(f func(StringArrayArrayOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayArrayOptionOptionList) FlatMapUint(f func(StringArrayArrayOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayArrayOptionOptionList) FlatMapUint8(f func(StringArrayArrayOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayArrayOptionOptionList) FlatMapUint16(f func(StringArrayArrayOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayArrayOptionOptionList) FlatMapUint32(f func(StringArrayArrayOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayArrayOptionOptionList) FlatMapUint64(f func(StringArrayArrayOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayArrayOptionOptionList) FlatMapUintptr(f func(StringArrayArrayOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayArrayOptionOptionList) FlatMapByte(f func(StringArrayArrayOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayArrayOptionOptionList) FlatMapRune(f func(StringArrayArrayOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayArrayOptionOptionList) FlatMapFloat32(f func(StringArrayArrayOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayArrayOptionOptionList) FlatMapFloat64(f func(StringArrayArrayOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayArrayOptionOptionList) FlatMapComplex64(f func(StringArrayArrayOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayArrayOptionOptionList) FlatMapComplex128(f func(StringArrayArrayOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayArrayOptionOptionList) FlatMapAny(f func(StringArrayArrayOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayArrayOptionOptionList) FlatMapBool(f func(IntArrayArrayOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayArrayOptionOptionList) FlatMapString(f func(IntArrayArrayOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayArrayOptionOptionList) FlatMapInt(f func(IntArrayArrayOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayArrayOptionOptionList) FlatMapInt8(f func(IntArrayArrayOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayArrayOptionOptionList) FlatMapInt16(f func(IntArrayArrayOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayArrayOptionOptionList) FlatMapInt32(f func(IntArrayArrayOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayArrayOptionOptionList) FlatMapInt64(f func(IntArrayArrayOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayArrayOptionOptionList) FlatMapUint(f func(IntArrayArrayOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayArrayOptionOptionList) FlatMapUint8(f func(IntArrayArrayOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayArrayOptionOptionList) FlatMapUint16(f func(IntArrayArrayOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayArrayOptionOptionList) FlatMapUint32(f func(IntArrayArrayOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayArrayOptionOptionList) FlatMapUint64(f func(IntArrayArrayOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayArrayOptionOptionList) FlatMapUintptr(f func(IntArrayArrayOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayArrayOptionOptionList) FlatMapByte(f func(IntArrayArrayOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayArrayOptionOptionList) FlatMapRune(f func(IntArrayArrayOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayArrayOptionOptionList) FlatMapFloat32(f func(IntArrayArrayOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayArrayOptionOptionList) FlatMapFloat64(f func(IntArrayArrayOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayArrayOptionOptionList) FlatMapComplex64(f func(IntArrayArrayOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayArrayOptionOptionList) FlatMapComplex128(f func(IntArrayArrayOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayArrayOptionOptionList) FlatMapAny(f func(IntArrayArrayOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayArrayOptionOptionList) FlatMapBool(f func(Int8ArrayArrayOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayArrayOptionOptionList) FlatMapString(f func(Int8ArrayArrayOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayArrayOptionOptionList) FlatMapInt(f func(Int8ArrayArrayOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayArrayOptionOptionList) FlatMapInt8(f func(Int8ArrayArrayOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayArrayOptionOptionList) FlatMapInt16(f func(Int8ArrayArrayOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayArrayOptionOptionList) FlatMapInt32(f func(Int8ArrayArrayOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayArrayOptionOptionList) FlatMapInt64(f func(Int8ArrayArrayOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayArrayOptionOptionList) FlatMapUint(f func(Int8ArrayArrayOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayArrayOptionOptionList) FlatMapUint8(f func(Int8ArrayArrayOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayArrayOptionOptionList) FlatMapUint16(f func(Int8ArrayArrayOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayArrayOptionOptionList) FlatMapUint32(f func(Int8ArrayArrayOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayArrayOptionOptionList) FlatMapUint64(f func(Int8ArrayArrayOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayArrayOptionOptionList) FlatMapUintptr(f func(Int8ArrayArrayOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayArrayOptionOptionList) FlatMapByte(f func(Int8ArrayArrayOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayArrayOptionOptionList) FlatMapRune(f func(Int8ArrayArrayOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayArrayOptionOptionList) FlatMapFloat32(f func(Int8ArrayArrayOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayArrayOptionOptionList) FlatMapFloat64(f func(Int8ArrayArrayOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayArrayOptionOptionList) FlatMapComplex64(f func(Int8ArrayArrayOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayArrayOptionOptionList) FlatMapComplex128(f func(Int8ArrayArrayOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayArrayOptionOptionList) FlatMapAny(f func(Int8ArrayArrayOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayArrayOptionOptionList) FlatMapBool(f func(Int16ArrayArrayOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayArrayOptionOptionList) FlatMapString(f func(Int16ArrayArrayOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayArrayOptionOptionList) FlatMapInt(f func(Int16ArrayArrayOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayArrayOptionOptionList) FlatMapInt8(f func(Int16ArrayArrayOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayArrayOptionOptionList) FlatMapInt16(f func(Int16ArrayArrayOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayArrayOptionOptionList) FlatMapInt32(f func(Int16ArrayArrayOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayArrayOptionOptionList) FlatMapInt64(f func(Int16ArrayArrayOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayArrayOptionOptionList) FlatMapUint(f func(Int16ArrayArrayOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayArrayOptionOptionList) FlatMapUint8(f func(Int16ArrayArrayOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayArrayOptionOptionList) FlatMapUint16(f func(Int16ArrayArrayOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayArrayOptionOptionList) FlatMapUint32(f func(Int16ArrayArrayOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayArrayOptionOptionList) FlatMapUint64(f func(Int16ArrayArrayOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayArrayOptionOptionList) FlatMapUintptr(f func(Int16ArrayArrayOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayArrayOptionOptionList) FlatMapByte(f func(Int16ArrayArrayOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayArrayOptionOptionList) FlatMapRune(f func(Int16ArrayArrayOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayArrayOptionOptionList) FlatMapFloat32(f func(Int16ArrayArrayOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayArrayOptionOptionList) FlatMapFloat64(f func(Int16ArrayArrayOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayArrayOptionOptionList) FlatMapComplex64(f func(Int16ArrayArrayOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayArrayOptionOptionList) FlatMapComplex128(f func(Int16ArrayArrayOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayArrayOptionOptionList) FlatMapAny(f func(Int16ArrayArrayOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayArrayOptionOptionList) FlatMapBool(f func(Int32ArrayArrayOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayArrayOptionOptionList) FlatMapString(f func(Int32ArrayArrayOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayArrayOptionOptionList) FlatMapInt(f func(Int32ArrayArrayOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayArrayOptionOptionList) FlatMapInt8(f func(Int32ArrayArrayOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayArrayOptionOptionList) FlatMapInt16(f func(Int32ArrayArrayOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayArrayOptionOptionList) FlatMapInt32(f func(Int32ArrayArrayOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayArrayOptionOptionList) FlatMapInt64(f func(Int32ArrayArrayOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayArrayOptionOptionList) FlatMapUint(f func(Int32ArrayArrayOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayArrayOptionOptionList) FlatMapUint8(f func(Int32ArrayArrayOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayArrayOptionOptionList) FlatMapUint16(f func(Int32ArrayArrayOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayArrayOptionOptionList) FlatMapUint32(f func(Int32ArrayArrayOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayArrayOptionOptionList) FlatMapUint64(f func(Int32ArrayArrayOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayArrayOptionOptionList) FlatMapUintptr(f func(Int32ArrayArrayOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayArrayOptionOptionList) FlatMapByte(f func(Int32ArrayArrayOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayArrayOptionOptionList) FlatMapRune(f func(Int32ArrayArrayOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayArrayOptionOptionList) FlatMapFloat32(f func(Int32ArrayArrayOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayArrayOptionOptionList) FlatMapFloat64(f func(Int32ArrayArrayOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayArrayOptionOptionList) FlatMapComplex64(f func(Int32ArrayArrayOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayArrayOptionOptionList) FlatMapComplex128(f func(Int32ArrayArrayOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayArrayOptionOptionList) FlatMapAny(f func(Int32ArrayArrayOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayArrayOptionOptionList) FlatMapBool(f func(Int64ArrayArrayOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayArrayOptionOptionList) FlatMapString(f func(Int64ArrayArrayOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayArrayOptionOptionList) FlatMapInt(f func(Int64ArrayArrayOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayArrayOptionOptionList) FlatMapInt8(f func(Int64ArrayArrayOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayArrayOptionOptionList) FlatMapInt16(f func(Int64ArrayArrayOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayArrayOptionOptionList) FlatMapInt32(f func(Int64ArrayArrayOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayArrayOptionOptionList) FlatMapInt64(f func(Int64ArrayArrayOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayArrayOptionOptionList) FlatMapUint(f func(Int64ArrayArrayOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayArrayOptionOptionList) FlatMapUint8(f func(Int64ArrayArrayOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayArrayOptionOptionList) FlatMapUint16(f func(Int64ArrayArrayOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayArrayOptionOptionList) FlatMapUint32(f func(Int64ArrayArrayOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayArrayOptionOptionList) FlatMapUint64(f func(Int64ArrayArrayOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayArrayOptionOptionList) FlatMapUintptr(f func(Int64ArrayArrayOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayArrayOptionOptionList) FlatMapByte(f func(Int64ArrayArrayOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayArrayOptionOptionList) FlatMapRune(f func(Int64ArrayArrayOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayArrayOptionOptionList) FlatMapFloat32(f func(Int64ArrayArrayOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayArrayOptionOptionList) FlatMapFloat64(f func(Int64ArrayArrayOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayArrayOptionOptionList) FlatMapComplex64(f func(Int64ArrayArrayOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayArrayOptionOptionList) FlatMapComplex128(f func(Int64ArrayArrayOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayArrayOptionOptionList) FlatMapAny(f func(Int64ArrayArrayOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayArrayOptionOptionList) FlatMapBool(f func(UintArrayArrayOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayArrayOptionOptionList) FlatMapString(f func(UintArrayArrayOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayArrayOptionOptionList) FlatMapInt(f func(UintArrayArrayOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayArrayOptionOptionList) FlatMapInt8(f func(UintArrayArrayOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayArrayOptionOptionList) FlatMapInt16(f func(UintArrayArrayOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayArrayOptionOptionList) FlatMapInt32(f func(UintArrayArrayOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayArrayOptionOptionList) FlatMapInt64(f func(UintArrayArrayOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayArrayOptionOptionList) FlatMapUint(f func(UintArrayArrayOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayArrayOptionOptionList) FlatMapUint8(f func(UintArrayArrayOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayArrayOptionOptionList) FlatMapUint16(f func(UintArrayArrayOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayArrayOptionOptionList) FlatMapUint32(f func(UintArrayArrayOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayArrayOptionOptionList) FlatMapUint64(f func(UintArrayArrayOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayArrayOptionOptionList) FlatMapUintptr(f func(UintArrayArrayOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayArrayOptionOptionList) FlatMapByte(f func(UintArrayArrayOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayArrayOptionOptionList) FlatMapRune(f func(UintArrayArrayOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayArrayOptionOptionList) FlatMapFloat32(f func(UintArrayArrayOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayArrayOptionOptionList) FlatMapFloat64(f func(UintArrayArrayOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayArrayOptionOptionList) FlatMapComplex64(f func(UintArrayArrayOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayArrayOptionOptionList) FlatMapComplex128(f func(UintArrayArrayOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayArrayOptionOptionList) FlatMapAny(f func(UintArrayArrayOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayArrayOptionOptionList) FlatMapBool(f func(Uint8ArrayArrayOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayArrayOptionOptionList) FlatMapString(f func(Uint8ArrayArrayOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayArrayOptionOptionList) FlatMapInt(f func(Uint8ArrayArrayOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayArrayOptionOptionList) FlatMapInt8(f func(Uint8ArrayArrayOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayArrayOptionOptionList) FlatMapInt16(f func(Uint8ArrayArrayOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayArrayOptionOptionList) FlatMapInt32(f func(Uint8ArrayArrayOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayArrayOptionOptionList) FlatMapInt64(f func(Uint8ArrayArrayOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayArrayOptionOptionList) FlatMapUint(f func(Uint8ArrayArrayOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayArrayOptionOptionList) FlatMapUint8(f func(Uint8ArrayArrayOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayArrayOptionOptionList) FlatMapUint16(f func(Uint8ArrayArrayOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayArrayOptionOptionList) FlatMapUint32(f func(Uint8ArrayArrayOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayArrayOptionOptionList) FlatMapUint64(f func(Uint8ArrayArrayOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayArrayOptionOptionList) FlatMapUintptr(f func(Uint8ArrayArrayOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayArrayOptionOptionList) FlatMapByte(f func(Uint8ArrayArrayOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayArrayOptionOptionList) FlatMapRune(f func(Uint8ArrayArrayOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayArrayOptionOptionList) FlatMapFloat32(f func(Uint8ArrayArrayOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayArrayOptionOptionList) FlatMapFloat64(f func(Uint8ArrayArrayOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayArrayOptionOptionList) FlatMapComplex64(f func(Uint8ArrayArrayOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayArrayOptionOptionList) FlatMapComplex128(f func(Uint8ArrayArrayOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayArrayOptionOptionList) FlatMapAny(f func(Uint8ArrayArrayOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayArrayOptionOptionList) FlatMapBool(f func(Uint16ArrayArrayOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayArrayOptionOptionList) FlatMapString(f func(Uint16ArrayArrayOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayArrayOptionOptionList) FlatMapInt(f func(Uint16ArrayArrayOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayArrayOptionOptionList) FlatMapInt8(f func(Uint16ArrayArrayOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayArrayOptionOptionList) FlatMapInt16(f func(Uint16ArrayArrayOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayArrayOptionOptionList) FlatMapInt32(f func(Uint16ArrayArrayOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayArrayOptionOptionList) FlatMapInt64(f func(Uint16ArrayArrayOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayArrayOptionOptionList) FlatMapUint(f func(Uint16ArrayArrayOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayArrayOptionOptionList) FlatMapUint8(f func(Uint16ArrayArrayOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayArrayOptionOptionList) FlatMapUint16(f func(Uint16ArrayArrayOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayArrayOptionOptionList) FlatMapUint32(f func(Uint16ArrayArrayOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayArrayOptionOptionList) FlatMapUint64(f func(Uint16ArrayArrayOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayArrayOptionOptionList) FlatMapUintptr(f func(Uint16ArrayArrayOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayArrayOptionOptionList) FlatMapByte(f func(Uint16ArrayArrayOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayArrayOptionOptionList) FlatMapRune(f func(Uint16ArrayArrayOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayArrayOptionOptionList) FlatMapFloat32(f func(Uint16ArrayArrayOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayArrayOptionOptionList) FlatMapFloat64(f func(Uint16ArrayArrayOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayArrayOptionOptionList) FlatMapComplex64(f func(Uint16ArrayArrayOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayArrayOptionOptionList) FlatMapComplex128(f func(Uint16ArrayArrayOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayArrayOptionOptionList) FlatMapAny(f func(Uint16ArrayArrayOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayArrayOptionOptionList) FlatMapBool(f func(Uint32ArrayArrayOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayArrayOptionOptionList) FlatMapString(f func(Uint32ArrayArrayOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayArrayOptionOptionList) FlatMapInt(f func(Uint32ArrayArrayOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayArrayOptionOptionList) FlatMapInt8(f func(Uint32ArrayArrayOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayArrayOptionOptionList) FlatMapInt16(f func(Uint32ArrayArrayOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayArrayOptionOptionList) FlatMapInt32(f func(Uint32ArrayArrayOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayArrayOptionOptionList) FlatMapInt64(f func(Uint32ArrayArrayOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayArrayOptionOptionList) FlatMapUint(f func(Uint32ArrayArrayOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayArrayOptionOptionList) FlatMapUint8(f func(Uint32ArrayArrayOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayArrayOptionOptionList) FlatMapUint16(f func(Uint32ArrayArrayOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayArrayOptionOptionList) FlatMapUint32(f func(Uint32ArrayArrayOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayArrayOptionOptionList) FlatMapUint64(f func(Uint32ArrayArrayOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayArrayOptionOptionList) FlatMapUintptr(f func(Uint32ArrayArrayOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayArrayOptionOptionList) FlatMapByte(f func(Uint32ArrayArrayOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayArrayOptionOptionList) FlatMapRune(f func(Uint32ArrayArrayOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayArrayOptionOptionList) FlatMapFloat32(f func(Uint32ArrayArrayOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayArrayOptionOptionList) FlatMapFloat64(f func(Uint32ArrayArrayOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayArrayOptionOptionList) FlatMapComplex64(f func(Uint32ArrayArrayOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayArrayOptionOptionList) FlatMapComplex128(f func(Uint32ArrayArrayOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayArrayOptionOptionList) FlatMapAny(f func(Uint32ArrayArrayOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayArrayOptionOptionList) FlatMapBool(f func(Uint64ArrayArrayOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayArrayOptionOptionList) FlatMapString(f func(Uint64ArrayArrayOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayArrayOptionOptionList) FlatMapInt(f func(Uint64ArrayArrayOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayArrayOptionOptionList) FlatMapInt8(f func(Uint64ArrayArrayOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayArrayOptionOptionList) FlatMapInt16(f func(Uint64ArrayArrayOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayArrayOptionOptionList) FlatMapInt32(f func(Uint64ArrayArrayOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayArrayOptionOptionList) FlatMapInt64(f func(Uint64ArrayArrayOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayArrayOptionOptionList) FlatMapUint(f func(Uint64ArrayArrayOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayArrayOptionOptionList) FlatMapUint8(f func(Uint64ArrayArrayOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayArrayOptionOptionList) FlatMapUint16(f func(Uint64ArrayArrayOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayArrayOptionOptionList) FlatMapUint32(f func(Uint64ArrayArrayOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayArrayOptionOptionList) FlatMapUint64(f func(Uint64ArrayArrayOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayArrayOptionOptionList) FlatMapUintptr(f func(Uint64ArrayArrayOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayArrayOptionOptionList) FlatMapByte(f func(Uint64ArrayArrayOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayArrayOptionOptionList) FlatMapRune(f func(Uint64ArrayArrayOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayArrayOptionOptionList) FlatMapFloat32(f func(Uint64ArrayArrayOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayArrayOptionOptionList) FlatMapFloat64(f func(Uint64ArrayArrayOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayArrayOptionOptionList) FlatMapComplex64(f func(Uint64ArrayArrayOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayArrayOptionOptionList) FlatMapComplex128(f func(Uint64ArrayArrayOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayArrayOptionOptionList) FlatMapAny(f func(Uint64ArrayArrayOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayArrayOptionOptionList) FlatMapBool(f func(UintptrArrayArrayOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayArrayOptionOptionList) FlatMapString(f func(UintptrArrayArrayOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayArrayOptionOptionList) FlatMapInt(f func(UintptrArrayArrayOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayArrayOptionOptionList) FlatMapInt8(f func(UintptrArrayArrayOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayArrayOptionOptionList) FlatMapInt16(f func(UintptrArrayArrayOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayArrayOptionOptionList) FlatMapInt32(f func(UintptrArrayArrayOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayArrayOptionOptionList) FlatMapInt64(f func(UintptrArrayArrayOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayArrayOptionOptionList) FlatMapUint(f func(UintptrArrayArrayOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayArrayOptionOptionList) FlatMapUint8(f func(UintptrArrayArrayOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayArrayOptionOptionList) FlatMapUint16(f func(UintptrArrayArrayOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayArrayOptionOptionList) FlatMapUint32(f func(UintptrArrayArrayOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayArrayOptionOptionList) FlatMapUint64(f func(UintptrArrayArrayOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayArrayOptionOptionList) FlatMapUintptr(f func(UintptrArrayArrayOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayArrayOptionOptionList) FlatMapByte(f func(UintptrArrayArrayOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayArrayOptionOptionList) FlatMapRune(f func(UintptrArrayArrayOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayArrayOptionOptionList) FlatMapFloat32(f func(UintptrArrayArrayOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayArrayOptionOptionList) FlatMapFloat64(f func(UintptrArrayArrayOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayArrayOptionOptionList) FlatMapComplex64(f func(UintptrArrayArrayOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayArrayOptionOptionList) FlatMapComplex128(f func(UintptrArrayArrayOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayArrayOptionOptionList) FlatMapAny(f func(UintptrArrayArrayOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayArrayOptionOptionList) FlatMapBool(f func(ByteArrayArrayOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayArrayOptionOptionList) FlatMapString(f func(ByteArrayArrayOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayArrayOptionOptionList) FlatMapInt(f func(ByteArrayArrayOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayArrayOptionOptionList) FlatMapInt8(f func(ByteArrayArrayOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayArrayOptionOptionList) FlatMapInt16(f func(ByteArrayArrayOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayArrayOptionOptionList) FlatMapInt32(f func(ByteArrayArrayOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayArrayOptionOptionList) FlatMapInt64(f func(ByteArrayArrayOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayArrayOptionOptionList) FlatMapUint(f func(ByteArrayArrayOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayArrayOptionOptionList) FlatMapUint8(f func(ByteArrayArrayOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayArrayOptionOptionList) FlatMapUint16(f func(ByteArrayArrayOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayArrayOptionOptionList) FlatMapUint32(f func(ByteArrayArrayOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayArrayOptionOptionList) FlatMapUint64(f func(ByteArrayArrayOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayArrayOptionOptionList) FlatMapUintptr(f func(ByteArrayArrayOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayArrayOptionOptionList) FlatMapByte(f func(ByteArrayArrayOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayArrayOptionOptionList) FlatMapRune(f func(ByteArrayArrayOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayArrayOptionOptionList) FlatMapFloat32(f func(ByteArrayArrayOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayArrayOptionOptionList) FlatMapFloat64(f func(ByteArrayArrayOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayArrayOptionOptionList) FlatMapComplex64(f func(ByteArrayArrayOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayArrayOptionOptionList) FlatMapComplex128(f func(ByteArrayArrayOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayArrayOptionOptionList) FlatMapAny(f func(ByteArrayArrayOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayArrayOptionOptionList) FlatMapBool(f func(RuneArrayArrayOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayArrayOptionOptionList) FlatMapString(f func(RuneArrayArrayOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayArrayOptionOptionList) FlatMapInt(f func(RuneArrayArrayOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayArrayOptionOptionList) FlatMapInt8(f func(RuneArrayArrayOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayArrayOptionOptionList) FlatMapInt16(f func(RuneArrayArrayOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayArrayOptionOptionList) FlatMapInt32(f func(RuneArrayArrayOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayArrayOptionOptionList) FlatMapInt64(f func(RuneArrayArrayOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayArrayOptionOptionList) FlatMapUint(f func(RuneArrayArrayOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayArrayOptionOptionList) FlatMapUint8(f func(RuneArrayArrayOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayArrayOptionOptionList) FlatMapUint16(f func(RuneArrayArrayOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayArrayOptionOptionList) FlatMapUint32(f func(RuneArrayArrayOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayArrayOptionOptionList) FlatMapUint64(f func(RuneArrayArrayOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayArrayOptionOptionList) FlatMapUintptr(f func(RuneArrayArrayOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayArrayOptionOptionList) FlatMapByte(f func(RuneArrayArrayOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayArrayOptionOptionList) FlatMapRune(f func(RuneArrayArrayOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayArrayOptionOptionList) FlatMapFloat32(f func(RuneArrayArrayOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayArrayOptionOptionList) FlatMapFloat64(f func(RuneArrayArrayOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayArrayOptionOptionList) FlatMapComplex64(f func(RuneArrayArrayOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayArrayOptionOptionList) FlatMapComplex128(f func(RuneArrayArrayOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayArrayOptionOptionList) FlatMapAny(f func(RuneArrayArrayOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayArrayOptionOptionList) FlatMapBool(f func(Float32ArrayArrayOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayArrayOptionOptionList) FlatMapString(f func(Float32ArrayArrayOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayArrayOptionOptionList) FlatMapInt(f func(Float32ArrayArrayOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayArrayOptionOptionList) FlatMapInt8(f func(Float32ArrayArrayOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayArrayOptionOptionList) FlatMapInt16(f func(Float32ArrayArrayOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayArrayOptionOptionList) FlatMapInt32(f func(Float32ArrayArrayOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayArrayOptionOptionList) FlatMapInt64(f func(Float32ArrayArrayOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayArrayOptionOptionList) FlatMapUint(f func(Float32ArrayArrayOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayArrayOptionOptionList) FlatMapUint8(f func(Float32ArrayArrayOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayArrayOptionOptionList) FlatMapUint16(f func(Float32ArrayArrayOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayArrayOptionOptionList) FlatMapUint32(f func(Float32ArrayArrayOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayArrayOptionOptionList) FlatMapUint64(f func(Float32ArrayArrayOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayArrayOptionOptionList) FlatMapUintptr(f func(Float32ArrayArrayOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayArrayOptionOptionList) FlatMapByte(f func(Float32ArrayArrayOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayArrayOptionOptionList) FlatMapRune(f func(Float32ArrayArrayOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayArrayOptionOptionList) FlatMapFloat32(f func(Float32ArrayArrayOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayArrayOptionOptionList) FlatMapFloat64(f func(Float32ArrayArrayOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayArrayOptionOptionList) FlatMapComplex64(f func(Float32ArrayArrayOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayArrayOptionOptionList) FlatMapComplex128(f func(Float32ArrayArrayOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayArrayOptionOptionList) FlatMapAny(f func(Float32ArrayArrayOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayArrayOptionOptionList) FlatMapBool(f func(Float64ArrayArrayOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayArrayOptionOptionList) FlatMapString(f func(Float64ArrayArrayOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayArrayOptionOptionList) FlatMapInt(f func(Float64ArrayArrayOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayArrayOptionOptionList) FlatMapInt8(f func(Float64ArrayArrayOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayArrayOptionOptionList) FlatMapInt16(f func(Float64ArrayArrayOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayArrayOptionOptionList) FlatMapInt32(f func(Float64ArrayArrayOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayArrayOptionOptionList) FlatMapInt64(f func(Float64ArrayArrayOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayArrayOptionOptionList) FlatMapUint(f func(Float64ArrayArrayOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayArrayOptionOptionList) FlatMapUint8(f func(Float64ArrayArrayOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayArrayOptionOptionList) FlatMapUint16(f func(Float64ArrayArrayOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayArrayOptionOptionList) FlatMapUint32(f func(Float64ArrayArrayOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayArrayOptionOptionList) FlatMapUint64(f func(Float64ArrayArrayOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayArrayOptionOptionList) FlatMapUintptr(f func(Float64ArrayArrayOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayArrayOptionOptionList) FlatMapByte(f func(Float64ArrayArrayOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayArrayOptionOptionList) FlatMapRune(f func(Float64ArrayArrayOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayArrayOptionOptionList) FlatMapFloat32(f func(Float64ArrayArrayOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayArrayOptionOptionList) FlatMapFloat64(f func(Float64ArrayArrayOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayArrayOptionOptionList) FlatMapComplex64(f func(Float64ArrayArrayOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayArrayOptionOptionList) FlatMapComplex128(f func(Float64ArrayArrayOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayArrayOptionOptionList) FlatMapAny(f func(Float64ArrayArrayOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayArrayOptionOptionList) FlatMapBool(f func(Complex64ArrayArrayOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayArrayOptionOptionList) FlatMapString(f func(Complex64ArrayArrayOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayArrayOptionOptionList) FlatMapInt(f func(Complex64ArrayArrayOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayArrayOptionOptionList) FlatMapInt8(f func(Complex64ArrayArrayOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayArrayOptionOptionList) FlatMapInt16(f func(Complex64ArrayArrayOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayArrayOptionOptionList) FlatMapInt32(f func(Complex64ArrayArrayOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayArrayOptionOptionList) FlatMapInt64(f func(Complex64ArrayArrayOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayArrayOptionOptionList) FlatMapUint(f func(Complex64ArrayArrayOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayArrayOptionOptionList) FlatMapUint8(f func(Complex64ArrayArrayOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayArrayOptionOptionList) FlatMapUint16(f func(Complex64ArrayArrayOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayArrayOptionOptionList) FlatMapUint32(f func(Complex64ArrayArrayOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayArrayOptionOptionList) FlatMapUint64(f func(Complex64ArrayArrayOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayArrayOptionOptionList) FlatMapUintptr(f func(Complex64ArrayArrayOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayArrayOptionOptionList) FlatMapByte(f func(Complex64ArrayArrayOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayArrayOptionOptionList) FlatMapRune(f func(Complex64ArrayArrayOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayArrayOptionOptionList) FlatMapFloat32(f func(Complex64ArrayArrayOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayArrayOptionOptionList) FlatMapFloat64(f func(Complex64ArrayArrayOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayArrayOptionOptionList) FlatMapComplex64(f func(Complex64ArrayArrayOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayArrayOptionOptionList) FlatMapComplex128(f func(Complex64ArrayArrayOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayArrayOptionOptionList) FlatMapAny(f func(Complex64ArrayArrayOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayArrayOptionOptionList) FlatMapBool(f func(Complex128ArrayArrayOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayArrayOptionOptionList) FlatMapString(f func(Complex128ArrayArrayOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayArrayOptionOptionList) FlatMapInt(f func(Complex128ArrayArrayOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayArrayOptionOptionList) FlatMapInt8(f func(Complex128ArrayArrayOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayArrayOptionOptionList) FlatMapInt16(f func(Complex128ArrayArrayOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayArrayOptionOptionList) FlatMapInt32(f func(Complex128ArrayArrayOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayArrayOptionOptionList) FlatMapInt64(f func(Complex128ArrayArrayOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayArrayOptionOptionList) FlatMapUint(f func(Complex128ArrayArrayOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayArrayOptionOptionList) FlatMapUint8(f func(Complex128ArrayArrayOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayArrayOptionOptionList) FlatMapUint16(f func(Complex128ArrayArrayOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayArrayOptionOptionList) FlatMapUint32(f func(Complex128ArrayArrayOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayArrayOptionOptionList) FlatMapUint64(f func(Complex128ArrayArrayOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayArrayOptionOptionList) FlatMapUintptr(f func(Complex128ArrayArrayOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayArrayOptionOptionList) FlatMapByte(f func(Complex128ArrayArrayOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayArrayOptionOptionList) FlatMapRune(f func(Complex128ArrayArrayOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayArrayOptionOptionList) FlatMapFloat32(f func(Complex128ArrayArrayOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayArrayOptionOptionList) FlatMapFloat64(f func(Complex128ArrayArrayOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayArrayOptionOptionList) FlatMapComplex64(f func(Complex128ArrayArrayOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayArrayOptionOptionList) FlatMapComplex128(f func(Complex128ArrayArrayOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayArrayOptionOptionList) FlatMapAny(f func(Complex128ArrayArrayOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayArrayOptionOptionList) FlatMapBool(f func(AnyArrayArrayOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayArrayOptionOptionList) FlatMapString(f func(AnyArrayArrayOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayArrayOptionOptionList) FlatMapInt(f func(AnyArrayArrayOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayArrayOptionOptionList) FlatMapInt8(f func(AnyArrayArrayOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayArrayOptionOptionList) FlatMapInt16(f func(AnyArrayArrayOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayArrayOptionOptionList) FlatMapInt32(f func(AnyArrayArrayOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayArrayOptionOptionList) FlatMapInt64(f func(AnyArrayArrayOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayArrayOptionOptionList) FlatMapUint(f func(AnyArrayArrayOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayArrayOptionOptionList) FlatMapUint8(f func(AnyArrayArrayOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayArrayOptionOptionList) FlatMapUint16(f func(AnyArrayArrayOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayArrayOptionOptionList) FlatMapUint32(f func(AnyArrayArrayOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayArrayOptionOptionList) FlatMapUint64(f func(AnyArrayArrayOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayArrayOptionOptionList) FlatMapUintptr(f func(AnyArrayArrayOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayArrayOptionOptionList) FlatMapByte(f func(AnyArrayArrayOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayArrayOptionOptionList) FlatMapRune(f func(AnyArrayArrayOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayArrayOptionOptionList) FlatMapFloat32(f func(AnyArrayArrayOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayArrayOptionOptionList) FlatMapFloat64(f func(AnyArrayArrayOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayArrayOptionOptionList) FlatMapComplex64(f func(AnyArrayArrayOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayArrayOptionOptionList) FlatMapComplex128(f func(AnyArrayArrayOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayArrayOptionOptionList) FlatMapAny(f func(AnyArrayArrayOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionArrayOptionOptionList) FlatMapBool(f func(BoolOptionArrayOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionArrayOptionOptionList) FlatMapString(f func(BoolOptionArrayOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionArrayOptionOptionList) FlatMapInt(f func(BoolOptionArrayOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionArrayOptionOptionList) FlatMapInt8(f func(BoolOptionArrayOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionArrayOptionOptionList) FlatMapInt16(f func(BoolOptionArrayOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionArrayOptionOptionList) FlatMapInt32(f func(BoolOptionArrayOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionArrayOptionOptionList) FlatMapInt64(f func(BoolOptionArrayOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionArrayOptionOptionList) FlatMapUint(f func(BoolOptionArrayOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionArrayOptionOptionList) FlatMapUint8(f func(BoolOptionArrayOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionArrayOptionOptionList) FlatMapUint16(f func(BoolOptionArrayOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionArrayOptionOptionList) FlatMapUint32(f func(BoolOptionArrayOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionArrayOptionOptionList) FlatMapUint64(f func(BoolOptionArrayOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionArrayOptionOptionList) FlatMapUintptr(f func(BoolOptionArrayOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionArrayOptionOptionList) FlatMapByte(f func(BoolOptionArrayOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionArrayOptionOptionList) FlatMapRune(f func(BoolOptionArrayOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionArrayOptionOptionList) FlatMapFloat32(f func(BoolOptionArrayOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionArrayOptionOptionList) FlatMapFloat64(f func(BoolOptionArrayOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionArrayOptionOptionList) FlatMapComplex64(f func(BoolOptionArrayOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionArrayOptionOptionList) FlatMapComplex128(f func(BoolOptionArrayOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionArrayOptionOptionList) FlatMapAny(f func(BoolOptionArrayOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionArrayOptionOptionList) FlatMapBool(f func(StringOptionArrayOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionArrayOptionOptionList) FlatMapString(f func(StringOptionArrayOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionArrayOptionOptionList) FlatMapInt(f func(StringOptionArrayOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionArrayOptionOptionList) FlatMapInt8(f func(StringOptionArrayOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionArrayOptionOptionList) FlatMapInt16(f func(StringOptionArrayOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionArrayOptionOptionList) FlatMapInt32(f func(StringOptionArrayOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionArrayOptionOptionList) FlatMapInt64(f func(StringOptionArrayOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionArrayOptionOptionList) FlatMapUint(f func(StringOptionArrayOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionArrayOptionOptionList) FlatMapUint8(f func(StringOptionArrayOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionArrayOptionOptionList) FlatMapUint16(f func(StringOptionArrayOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionArrayOptionOptionList) FlatMapUint32(f func(StringOptionArrayOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionArrayOptionOptionList) FlatMapUint64(f func(StringOptionArrayOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionArrayOptionOptionList) FlatMapUintptr(f func(StringOptionArrayOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionArrayOptionOptionList) FlatMapByte(f func(StringOptionArrayOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionArrayOptionOptionList) FlatMapRune(f func(StringOptionArrayOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionArrayOptionOptionList) FlatMapFloat32(f func(StringOptionArrayOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionArrayOptionOptionList) FlatMapFloat64(f func(StringOptionArrayOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionArrayOptionOptionList) FlatMapComplex64(f func(StringOptionArrayOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionArrayOptionOptionList) FlatMapComplex128(f func(StringOptionArrayOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionArrayOptionOptionList) FlatMapAny(f func(StringOptionArrayOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionArrayOptionOptionList) FlatMapBool(f func(IntOptionArrayOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionArrayOptionOptionList) FlatMapString(f func(IntOptionArrayOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionArrayOptionOptionList) FlatMapInt(f func(IntOptionArrayOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionArrayOptionOptionList) FlatMapInt8(f func(IntOptionArrayOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionArrayOptionOptionList) FlatMapInt16(f func(IntOptionArrayOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionArrayOptionOptionList) FlatMapInt32(f func(IntOptionArrayOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionArrayOptionOptionList) FlatMapInt64(f func(IntOptionArrayOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionArrayOptionOptionList) FlatMapUint(f func(IntOptionArrayOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionArrayOptionOptionList) FlatMapUint8(f func(IntOptionArrayOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionArrayOptionOptionList) FlatMapUint16(f func(IntOptionArrayOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionArrayOptionOptionList) FlatMapUint32(f func(IntOptionArrayOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionArrayOptionOptionList) FlatMapUint64(f func(IntOptionArrayOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionArrayOptionOptionList) FlatMapUintptr(f func(IntOptionArrayOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionArrayOptionOptionList) FlatMapByte(f func(IntOptionArrayOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionArrayOptionOptionList) FlatMapRune(f func(IntOptionArrayOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionArrayOptionOptionList) FlatMapFloat32(f func(IntOptionArrayOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionArrayOptionOptionList) FlatMapFloat64(f func(IntOptionArrayOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionArrayOptionOptionList) FlatMapComplex64(f func(IntOptionArrayOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionArrayOptionOptionList) FlatMapComplex128(f func(IntOptionArrayOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionArrayOptionOptionList) FlatMapAny(f func(IntOptionArrayOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionArrayOptionOptionList) FlatMapBool(f func(Int8OptionArrayOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionArrayOptionOptionList) FlatMapString(f func(Int8OptionArrayOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionArrayOptionOptionList) FlatMapInt(f func(Int8OptionArrayOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionArrayOptionOptionList) FlatMapInt8(f func(Int8OptionArrayOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionArrayOptionOptionList) FlatMapInt16(f func(Int8OptionArrayOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionArrayOptionOptionList) FlatMapInt32(f func(Int8OptionArrayOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionArrayOptionOptionList) FlatMapInt64(f func(Int8OptionArrayOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionArrayOptionOptionList) FlatMapUint(f func(Int8OptionArrayOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionArrayOptionOptionList) FlatMapUint8(f func(Int8OptionArrayOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionArrayOptionOptionList) FlatMapUint16(f func(Int8OptionArrayOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionArrayOptionOptionList) FlatMapUint32(f func(Int8OptionArrayOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionArrayOptionOptionList) FlatMapUint64(f func(Int8OptionArrayOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionArrayOptionOptionList) FlatMapUintptr(f func(Int8OptionArrayOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionArrayOptionOptionList) FlatMapByte(f func(Int8OptionArrayOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionArrayOptionOptionList) FlatMapRune(f func(Int8OptionArrayOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionArrayOptionOptionList) FlatMapFloat32(f func(Int8OptionArrayOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionArrayOptionOptionList) FlatMapFloat64(f func(Int8OptionArrayOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionArrayOptionOptionList) FlatMapComplex64(f func(Int8OptionArrayOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionArrayOptionOptionList) FlatMapComplex128(f func(Int8OptionArrayOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionArrayOptionOptionList) FlatMapAny(f func(Int8OptionArrayOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionArrayOptionOptionList) FlatMapBool(f func(Int16OptionArrayOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionArrayOptionOptionList) FlatMapString(f func(Int16OptionArrayOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionArrayOptionOptionList) FlatMapInt(f func(Int16OptionArrayOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionArrayOptionOptionList) FlatMapInt8(f func(Int16OptionArrayOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionArrayOptionOptionList) FlatMapInt16(f func(Int16OptionArrayOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionArrayOptionOptionList) FlatMapInt32(f func(Int16OptionArrayOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionArrayOptionOptionList) FlatMapInt64(f func(Int16OptionArrayOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionArrayOptionOptionList) FlatMapUint(f func(Int16OptionArrayOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionArrayOptionOptionList) FlatMapUint8(f func(Int16OptionArrayOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionArrayOptionOptionList) FlatMapUint16(f func(Int16OptionArrayOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionArrayOptionOptionList) FlatMapUint32(f func(Int16OptionArrayOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionArrayOptionOptionList) FlatMapUint64(f func(Int16OptionArrayOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionArrayOptionOptionList) FlatMapUintptr(f func(Int16OptionArrayOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionArrayOptionOptionList) FlatMapByte(f func(Int16OptionArrayOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionArrayOptionOptionList) FlatMapRune(f func(Int16OptionArrayOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionArrayOptionOptionList) FlatMapFloat32(f func(Int16OptionArrayOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionArrayOptionOptionList) FlatMapFloat64(f func(Int16OptionArrayOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionArrayOptionOptionList) FlatMapComplex64(f func(Int16OptionArrayOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionArrayOptionOptionList) FlatMapComplex128(f func(Int16OptionArrayOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionArrayOptionOptionList) FlatMapAny(f func(Int16OptionArrayOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionArrayOptionOptionList) FlatMapBool(f func(Int32OptionArrayOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionArrayOptionOptionList) FlatMapString(f func(Int32OptionArrayOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionArrayOptionOptionList) FlatMapInt(f func(Int32OptionArrayOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionArrayOptionOptionList) FlatMapInt8(f func(Int32OptionArrayOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionArrayOptionOptionList) FlatMapInt16(f func(Int32OptionArrayOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionArrayOptionOptionList) FlatMapInt32(f func(Int32OptionArrayOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionArrayOptionOptionList) FlatMapInt64(f func(Int32OptionArrayOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionArrayOptionOptionList) FlatMapUint(f func(Int32OptionArrayOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionArrayOptionOptionList) FlatMapUint8(f func(Int32OptionArrayOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionArrayOptionOptionList) FlatMapUint16(f func(Int32OptionArrayOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionArrayOptionOptionList) FlatMapUint32(f func(Int32OptionArrayOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionArrayOptionOptionList) FlatMapUint64(f func(Int32OptionArrayOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionArrayOptionOptionList) FlatMapUintptr(f func(Int32OptionArrayOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionArrayOptionOptionList) FlatMapByte(f func(Int32OptionArrayOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionArrayOptionOptionList) FlatMapRune(f func(Int32OptionArrayOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionArrayOptionOptionList) FlatMapFloat32(f func(Int32OptionArrayOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionArrayOptionOptionList) FlatMapFloat64(f func(Int32OptionArrayOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionArrayOptionOptionList) FlatMapComplex64(f func(Int32OptionArrayOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionArrayOptionOptionList) FlatMapComplex128(f func(Int32OptionArrayOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionArrayOptionOptionList) FlatMapAny(f func(Int32OptionArrayOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionArrayOptionOptionList) FlatMapBool(f func(Int64OptionArrayOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionArrayOptionOptionList) FlatMapString(f func(Int64OptionArrayOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionArrayOptionOptionList) FlatMapInt(f func(Int64OptionArrayOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionArrayOptionOptionList) FlatMapInt8(f func(Int64OptionArrayOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionArrayOptionOptionList) FlatMapInt16(f func(Int64OptionArrayOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionArrayOptionOptionList) FlatMapInt32(f func(Int64OptionArrayOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionArrayOptionOptionList) FlatMapInt64(f func(Int64OptionArrayOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionArrayOptionOptionList) FlatMapUint(f func(Int64OptionArrayOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionArrayOptionOptionList) FlatMapUint8(f func(Int64OptionArrayOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionArrayOptionOptionList) FlatMapUint16(f func(Int64OptionArrayOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionArrayOptionOptionList) FlatMapUint32(f func(Int64OptionArrayOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionArrayOptionOptionList) FlatMapUint64(f func(Int64OptionArrayOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionArrayOptionOptionList) FlatMapUintptr(f func(Int64OptionArrayOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionArrayOptionOptionList) FlatMapByte(f func(Int64OptionArrayOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionArrayOptionOptionList) FlatMapRune(f func(Int64OptionArrayOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionArrayOptionOptionList) FlatMapFloat32(f func(Int64OptionArrayOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionArrayOptionOptionList) FlatMapFloat64(f func(Int64OptionArrayOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionArrayOptionOptionList) FlatMapComplex64(f func(Int64OptionArrayOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionArrayOptionOptionList) FlatMapComplex128(f func(Int64OptionArrayOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionArrayOptionOptionList) FlatMapAny(f func(Int64OptionArrayOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionArrayOptionOptionList) FlatMapBool(f func(UintOptionArrayOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionArrayOptionOptionList) FlatMapString(f func(UintOptionArrayOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionArrayOptionOptionList) FlatMapInt(f func(UintOptionArrayOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionArrayOptionOptionList) FlatMapInt8(f func(UintOptionArrayOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionArrayOptionOptionList) FlatMapInt16(f func(UintOptionArrayOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionArrayOptionOptionList) FlatMapInt32(f func(UintOptionArrayOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionArrayOptionOptionList) FlatMapInt64(f func(UintOptionArrayOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionArrayOptionOptionList) FlatMapUint(f func(UintOptionArrayOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionArrayOptionOptionList) FlatMapUint8(f func(UintOptionArrayOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionArrayOptionOptionList) FlatMapUint16(f func(UintOptionArrayOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionArrayOptionOptionList) FlatMapUint32(f func(UintOptionArrayOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionArrayOptionOptionList) FlatMapUint64(f func(UintOptionArrayOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionArrayOptionOptionList) FlatMapUintptr(f func(UintOptionArrayOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionArrayOptionOptionList) FlatMapByte(f func(UintOptionArrayOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionArrayOptionOptionList) FlatMapRune(f func(UintOptionArrayOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionArrayOptionOptionList) FlatMapFloat32(f func(UintOptionArrayOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionArrayOptionOptionList) FlatMapFloat64(f func(UintOptionArrayOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionArrayOptionOptionList) FlatMapComplex64(f func(UintOptionArrayOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionArrayOptionOptionList) FlatMapComplex128(f func(UintOptionArrayOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionArrayOptionOptionList) FlatMapAny(f func(UintOptionArrayOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionArrayOptionOptionList) FlatMapBool(f func(Uint8OptionArrayOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionArrayOptionOptionList) FlatMapString(f func(Uint8OptionArrayOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionArrayOptionOptionList) FlatMapInt(f func(Uint8OptionArrayOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionArrayOptionOptionList) FlatMapInt8(f func(Uint8OptionArrayOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionArrayOptionOptionList) FlatMapInt16(f func(Uint8OptionArrayOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionArrayOptionOptionList) FlatMapInt32(f func(Uint8OptionArrayOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionArrayOptionOptionList) FlatMapInt64(f func(Uint8OptionArrayOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionArrayOptionOptionList) FlatMapUint(f func(Uint8OptionArrayOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionArrayOptionOptionList) FlatMapUint8(f func(Uint8OptionArrayOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionArrayOptionOptionList) FlatMapUint16(f func(Uint8OptionArrayOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionArrayOptionOptionList) FlatMapUint32(f func(Uint8OptionArrayOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionArrayOptionOptionList) FlatMapUint64(f func(Uint8OptionArrayOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionArrayOptionOptionList) FlatMapUintptr(f func(Uint8OptionArrayOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionArrayOptionOptionList) FlatMapByte(f func(Uint8OptionArrayOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionArrayOptionOptionList) FlatMapRune(f func(Uint8OptionArrayOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionArrayOptionOptionList) FlatMapFloat32(f func(Uint8OptionArrayOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionArrayOptionOptionList) FlatMapFloat64(f func(Uint8OptionArrayOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionArrayOptionOptionList) FlatMapComplex64(f func(Uint8OptionArrayOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionArrayOptionOptionList) FlatMapComplex128(f func(Uint8OptionArrayOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionArrayOptionOptionList) FlatMapAny(f func(Uint8OptionArrayOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionArrayOptionOptionList) FlatMapBool(f func(Uint16OptionArrayOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionArrayOptionOptionList) FlatMapString(f func(Uint16OptionArrayOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionArrayOptionOptionList) FlatMapInt(f func(Uint16OptionArrayOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionArrayOptionOptionList) FlatMapInt8(f func(Uint16OptionArrayOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionArrayOptionOptionList) FlatMapInt16(f func(Uint16OptionArrayOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionArrayOptionOptionList) FlatMapInt32(f func(Uint16OptionArrayOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionArrayOptionOptionList) FlatMapInt64(f func(Uint16OptionArrayOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionArrayOptionOptionList) FlatMapUint(f func(Uint16OptionArrayOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionArrayOptionOptionList) FlatMapUint8(f func(Uint16OptionArrayOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionArrayOptionOptionList) FlatMapUint16(f func(Uint16OptionArrayOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionArrayOptionOptionList) FlatMapUint32(f func(Uint16OptionArrayOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionArrayOptionOptionList) FlatMapUint64(f func(Uint16OptionArrayOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionArrayOptionOptionList) FlatMapUintptr(f func(Uint16OptionArrayOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionArrayOptionOptionList) FlatMapByte(f func(Uint16OptionArrayOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionArrayOptionOptionList) FlatMapRune(f func(Uint16OptionArrayOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionArrayOptionOptionList) FlatMapFloat32(f func(Uint16OptionArrayOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionArrayOptionOptionList) FlatMapFloat64(f func(Uint16OptionArrayOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionArrayOptionOptionList) FlatMapComplex64(f func(Uint16OptionArrayOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionArrayOptionOptionList) FlatMapComplex128(f func(Uint16OptionArrayOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionArrayOptionOptionList) FlatMapAny(f func(Uint16OptionArrayOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionArrayOptionOptionList) FlatMapBool(f func(Uint32OptionArrayOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionArrayOptionOptionList) FlatMapString(f func(Uint32OptionArrayOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionArrayOptionOptionList) FlatMapInt(f func(Uint32OptionArrayOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionArrayOptionOptionList) FlatMapInt8(f func(Uint32OptionArrayOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionArrayOptionOptionList) FlatMapInt16(f func(Uint32OptionArrayOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionArrayOptionOptionList) FlatMapInt32(f func(Uint32OptionArrayOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionArrayOptionOptionList) FlatMapInt64(f func(Uint32OptionArrayOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionArrayOptionOptionList) FlatMapUint(f func(Uint32OptionArrayOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionArrayOptionOptionList) FlatMapUint8(f func(Uint32OptionArrayOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionArrayOptionOptionList) FlatMapUint16(f func(Uint32OptionArrayOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionArrayOptionOptionList) FlatMapUint32(f func(Uint32OptionArrayOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionArrayOptionOptionList) FlatMapUint64(f func(Uint32OptionArrayOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionArrayOptionOptionList) FlatMapUintptr(f func(Uint32OptionArrayOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionArrayOptionOptionList) FlatMapByte(f func(Uint32OptionArrayOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionArrayOptionOptionList) FlatMapRune(f func(Uint32OptionArrayOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionArrayOptionOptionList) FlatMapFloat32(f func(Uint32OptionArrayOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionArrayOptionOptionList) FlatMapFloat64(f func(Uint32OptionArrayOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionArrayOptionOptionList) FlatMapComplex64(f func(Uint32OptionArrayOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionArrayOptionOptionList) FlatMapComplex128(f func(Uint32OptionArrayOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionArrayOptionOptionList) FlatMapAny(f func(Uint32OptionArrayOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionArrayOptionOptionList) FlatMapBool(f func(Uint64OptionArrayOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionArrayOptionOptionList) FlatMapString(f func(Uint64OptionArrayOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionArrayOptionOptionList) FlatMapInt(f func(Uint64OptionArrayOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionArrayOptionOptionList) FlatMapInt8(f func(Uint64OptionArrayOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionArrayOptionOptionList) FlatMapInt16(f func(Uint64OptionArrayOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionArrayOptionOptionList) FlatMapInt32(f func(Uint64OptionArrayOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionArrayOptionOptionList) FlatMapInt64(f func(Uint64OptionArrayOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionArrayOptionOptionList) FlatMapUint(f func(Uint64OptionArrayOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionArrayOptionOptionList) FlatMapUint8(f func(Uint64OptionArrayOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionArrayOptionOptionList) FlatMapUint16(f func(Uint64OptionArrayOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionArrayOptionOptionList) FlatMapUint32(f func(Uint64OptionArrayOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionArrayOptionOptionList) FlatMapUint64(f func(Uint64OptionArrayOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionArrayOptionOptionList) FlatMapUintptr(f func(Uint64OptionArrayOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionArrayOptionOptionList) FlatMapByte(f func(Uint64OptionArrayOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionArrayOptionOptionList) FlatMapRune(f func(Uint64OptionArrayOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionArrayOptionOptionList) FlatMapFloat32(f func(Uint64OptionArrayOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionArrayOptionOptionList) FlatMapFloat64(f func(Uint64OptionArrayOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionArrayOptionOptionList) FlatMapComplex64(f func(Uint64OptionArrayOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionArrayOptionOptionList) FlatMapComplex128(f func(Uint64OptionArrayOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionArrayOptionOptionList) FlatMapAny(f func(Uint64OptionArrayOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionArrayOptionOptionList) FlatMapBool(f func(UintptrOptionArrayOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionArrayOptionOptionList) FlatMapString(f func(UintptrOptionArrayOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionArrayOptionOptionList) FlatMapInt(f func(UintptrOptionArrayOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionArrayOptionOptionList) FlatMapInt8(f func(UintptrOptionArrayOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionArrayOptionOptionList) FlatMapInt16(f func(UintptrOptionArrayOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionArrayOptionOptionList) FlatMapInt32(f func(UintptrOptionArrayOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionArrayOptionOptionList) FlatMapInt64(f func(UintptrOptionArrayOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionArrayOptionOptionList) FlatMapUint(f func(UintptrOptionArrayOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionArrayOptionOptionList) FlatMapUint8(f func(UintptrOptionArrayOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionArrayOptionOptionList) FlatMapUint16(f func(UintptrOptionArrayOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionArrayOptionOptionList) FlatMapUint32(f func(UintptrOptionArrayOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionArrayOptionOptionList) FlatMapUint64(f func(UintptrOptionArrayOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionArrayOptionOptionList) FlatMapUintptr(f func(UintptrOptionArrayOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionArrayOptionOptionList) FlatMapByte(f func(UintptrOptionArrayOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionArrayOptionOptionList) FlatMapRune(f func(UintptrOptionArrayOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionArrayOptionOptionList) FlatMapFloat32(f func(UintptrOptionArrayOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionArrayOptionOptionList) FlatMapFloat64(f func(UintptrOptionArrayOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionArrayOptionOptionList) FlatMapComplex64(f func(UintptrOptionArrayOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionArrayOptionOptionList) FlatMapComplex128(f func(UintptrOptionArrayOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionArrayOptionOptionList) FlatMapAny(f func(UintptrOptionArrayOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionArrayOptionOptionList) FlatMapBool(f func(ByteOptionArrayOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionArrayOptionOptionList) FlatMapString(f func(ByteOptionArrayOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionArrayOptionOptionList) FlatMapInt(f func(ByteOptionArrayOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionArrayOptionOptionList) FlatMapInt8(f func(ByteOptionArrayOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionArrayOptionOptionList) FlatMapInt16(f func(ByteOptionArrayOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionArrayOptionOptionList) FlatMapInt32(f func(ByteOptionArrayOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionArrayOptionOptionList) FlatMapInt64(f func(ByteOptionArrayOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionArrayOptionOptionList) FlatMapUint(f func(ByteOptionArrayOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionArrayOptionOptionList) FlatMapUint8(f func(ByteOptionArrayOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionArrayOptionOptionList) FlatMapUint16(f func(ByteOptionArrayOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionArrayOptionOptionList) FlatMapUint32(f func(ByteOptionArrayOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionArrayOptionOptionList) FlatMapUint64(f func(ByteOptionArrayOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionArrayOptionOptionList) FlatMapUintptr(f func(ByteOptionArrayOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionArrayOptionOptionList) FlatMapByte(f func(ByteOptionArrayOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionArrayOptionOptionList) FlatMapRune(f func(ByteOptionArrayOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionArrayOptionOptionList) FlatMapFloat32(f func(ByteOptionArrayOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionArrayOptionOptionList) FlatMapFloat64(f func(ByteOptionArrayOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionArrayOptionOptionList) FlatMapComplex64(f func(ByteOptionArrayOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionArrayOptionOptionList) FlatMapComplex128(f func(ByteOptionArrayOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionArrayOptionOptionList) FlatMapAny(f func(ByteOptionArrayOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionArrayOptionOptionList) FlatMapBool(f func(RuneOptionArrayOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionArrayOptionOptionList) FlatMapString(f func(RuneOptionArrayOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionArrayOptionOptionList) FlatMapInt(f func(RuneOptionArrayOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionArrayOptionOptionList) FlatMapInt8(f func(RuneOptionArrayOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionArrayOptionOptionList) FlatMapInt16(f func(RuneOptionArrayOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionArrayOptionOptionList) FlatMapInt32(f func(RuneOptionArrayOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionArrayOptionOptionList) FlatMapInt64(f func(RuneOptionArrayOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionArrayOptionOptionList) FlatMapUint(f func(RuneOptionArrayOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionArrayOptionOptionList) FlatMapUint8(f func(RuneOptionArrayOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionArrayOptionOptionList) FlatMapUint16(f func(RuneOptionArrayOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionArrayOptionOptionList) FlatMapUint32(f func(RuneOptionArrayOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionArrayOptionOptionList) FlatMapUint64(f func(RuneOptionArrayOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionArrayOptionOptionList) FlatMapUintptr(f func(RuneOptionArrayOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionArrayOptionOptionList) FlatMapByte(f func(RuneOptionArrayOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionArrayOptionOptionList) FlatMapRune(f func(RuneOptionArrayOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionArrayOptionOptionList) FlatMapFloat32(f func(RuneOptionArrayOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionArrayOptionOptionList) FlatMapFloat64(f func(RuneOptionArrayOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionArrayOptionOptionList) FlatMapComplex64(f func(RuneOptionArrayOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionArrayOptionOptionList) FlatMapComplex128(f func(RuneOptionArrayOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionArrayOptionOptionList) FlatMapAny(f func(RuneOptionArrayOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionArrayOptionOptionList) FlatMapBool(f func(Float32OptionArrayOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionArrayOptionOptionList) FlatMapString(f func(Float32OptionArrayOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionArrayOptionOptionList) FlatMapInt(f func(Float32OptionArrayOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionArrayOptionOptionList) FlatMapInt8(f func(Float32OptionArrayOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionArrayOptionOptionList) FlatMapInt16(f func(Float32OptionArrayOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionArrayOptionOptionList) FlatMapInt32(f func(Float32OptionArrayOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionArrayOptionOptionList) FlatMapInt64(f func(Float32OptionArrayOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionArrayOptionOptionList) FlatMapUint(f func(Float32OptionArrayOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionArrayOptionOptionList) FlatMapUint8(f func(Float32OptionArrayOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionArrayOptionOptionList) FlatMapUint16(f func(Float32OptionArrayOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionArrayOptionOptionList) FlatMapUint32(f func(Float32OptionArrayOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionArrayOptionOptionList) FlatMapUint64(f func(Float32OptionArrayOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionArrayOptionOptionList) FlatMapUintptr(f func(Float32OptionArrayOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionArrayOptionOptionList) FlatMapByte(f func(Float32OptionArrayOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionArrayOptionOptionList) FlatMapRune(f func(Float32OptionArrayOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionArrayOptionOptionList) FlatMapFloat32(f func(Float32OptionArrayOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionArrayOptionOptionList) FlatMapFloat64(f func(Float32OptionArrayOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionArrayOptionOptionList) FlatMapComplex64(f func(Float32OptionArrayOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionArrayOptionOptionList) FlatMapComplex128(f func(Float32OptionArrayOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionArrayOptionOptionList) FlatMapAny(f func(Float32OptionArrayOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionArrayOptionOptionList) FlatMapBool(f func(Float64OptionArrayOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionArrayOptionOptionList) FlatMapString(f func(Float64OptionArrayOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionArrayOptionOptionList) FlatMapInt(f func(Float64OptionArrayOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionArrayOptionOptionList) FlatMapInt8(f func(Float64OptionArrayOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionArrayOptionOptionList) FlatMapInt16(f func(Float64OptionArrayOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionArrayOptionOptionList) FlatMapInt32(f func(Float64OptionArrayOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionArrayOptionOptionList) FlatMapInt64(f func(Float64OptionArrayOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionArrayOptionOptionList) FlatMapUint(f func(Float64OptionArrayOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionArrayOptionOptionList) FlatMapUint8(f func(Float64OptionArrayOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionArrayOptionOptionList) FlatMapUint16(f func(Float64OptionArrayOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionArrayOptionOptionList) FlatMapUint32(f func(Float64OptionArrayOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionArrayOptionOptionList) FlatMapUint64(f func(Float64OptionArrayOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionArrayOptionOptionList) FlatMapUintptr(f func(Float64OptionArrayOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionArrayOptionOptionList) FlatMapByte(f func(Float64OptionArrayOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionArrayOptionOptionList) FlatMapRune(f func(Float64OptionArrayOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionArrayOptionOptionList) FlatMapFloat32(f func(Float64OptionArrayOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionArrayOptionOptionList) FlatMapFloat64(f func(Float64OptionArrayOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionArrayOptionOptionList) FlatMapComplex64(f func(Float64OptionArrayOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionArrayOptionOptionList) FlatMapComplex128(f func(Float64OptionArrayOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionArrayOptionOptionList) FlatMapAny(f func(Float64OptionArrayOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionArrayOptionOptionList) FlatMapBool(f func(Complex64OptionArrayOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionArrayOptionOptionList) FlatMapString(f func(Complex64OptionArrayOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionArrayOptionOptionList) FlatMapInt(f func(Complex64OptionArrayOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionArrayOptionOptionList) FlatMapInt8(f func(Complex64OptionArrayOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionArrayOptionOptionList) FlatMapInt16(f func(Complex64OptionArrayOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionArrayOptionOptionList) FlatMapInt32(f func(Complex64OptionArrayOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionArrayOptionOptionList) FlatMapInt64(f func(Complex64OptionArrayOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionArrayOptionOptionList) FlatMapUint(f func(Complex64OptionArrayOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionArrayOptionOptionList) FlatMapUint8(f func(Complex64OptionArrayOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionArrayOptionOptionList) FlatMapUint16(f func(Complex64OptionArrayOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionArrayOptionOptionList) FlatMapUint32(f func(Complex64OptionArrayOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionArrayOptionOptionList) FlatMapUint64(f func(Complex64OptionArrayOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionArrayOptionOptionList) FlatMapUintptr(f func(Complex64OptionArrayOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionArrayOptionOptionList) FlatMapByte(f func(Complex64OptionArrayOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionArrayOptionOptionList) FlatMapRune(f func(Complex64OptionArrayOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionArrayOptionOptionList) FlatMapFloat32(f func(Complex64OptionArrayOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionArrayOptionOptionList) FlatMapFloat64(f func(Complex64OptionArrayOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionArrayOptionOptionList) FlatMapComplex64(f func(Complex64OptionArrayOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionArrayOptionOptionList) FlatMapComplex128(f func(Complex64OptionArrayOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionArrayOptionOptionList) FlatMapAny(f func(Complex64OptionArrayOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionArrayOptionOptionList) FlatMapBool(f func(Complex128OptionArrayOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionArrayOptionOptionList) FlatMapString(f func(Complex128OptionArrayOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionArrayOptionOptionList) FlatMapInt(f func(Complex128OptionArrayOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionArrayOptionOptionList) FlatMapInt8(f func(Complex128OptionArrayOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionArrayOptionOptionList) FlatMapInt16(f func(Complex128OptionArrayOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionArrayOptionOptionList) FlatMapInt32(f func(Complex128OptionArrayOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionArrayOptionOptionList) FlatMapInt64(f func(Complex128OptionArrayOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionArrayOptionOptionList) FlatMapUint(f func(Complex128OptionArrayOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionArrayOptionOptionList) FlatMapUint8(f func(Complex128OptionArrayOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionArrayOptionOptionList) FlatMapUint16(f func(Complex128OptionArrayOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionArrayOptionOptionList) FlatMapUint32(f func(Complex128OptionArrayOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionArrayOptionOptionList) FlatMapUint64(f func(Complex128OptionArrayOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionArrayOptionOptionList) FlatMapUintptr(f func(Complex128OptionArrayOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionArrayOptionOptionList) FlatMapByte(f func(Complex128OptionArrayOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionArrayOptionOptionList) FlatMapRune(f func(Complex128OptionArrayOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionArrayOptionOptionList) FlatMapFloat32(f func(Complex128OptionArrayOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionArrayOptionOptionList) FlatMapFloat64(f func(Complex128OptionArrayOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionArrayOptionOptionList) FlatMapComplex64(f func(Complex128OptionArrayOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionArrayOptionOptionList) FlatMapComplex128(f func(Complex128OptionArrayOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionArrayOptionOptionList) FlatMapAny(f func(Complex128OptionArrayOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionArrayOptionOptionList) FlatMapBool(f func(AnyOptionArrayOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionArrayOptionOptionList) FlatMapString(f func(AnyOptionArrayOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionArrayOptionOptionList) FlatMapInt(f func(AnyOptionArrayOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionArrayOptionOptionList) FlatMapInt8(f func(AnyOptionArrayOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionArrayOptionOptionList) FlatMapInt16(f func(AnyOptionArrayOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionArrayOptionOptionList) FlatMapInt32(f func(AnyOptionArrayOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionArrayOptionOptionList) FlatMapInt64(f func(AnyOptionArrayOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionArrayOptionOptionList) FlatMapUint(f func(AnyOptionArrayOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionArrayOptionOptionList) FlatMapUint8(f func(AnyOptionArrayOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionArrayOptionOptionList) FlatMapUint16(f func(AnyOptionArrayOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionArrayOptionOptionList) FlatMapUint32(f func(AnyOptionArrayOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionArrayOptionOptionList) FlatMapUint64(f func(AnyOptionArrayOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionArrayOptionOptionList) FlatMapUintptr(f func(AnyOptionArrayOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionArrayOptionOptionList) FlatMapByte(f func(AnyOptionArrayOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionArrayOptionOptionList) FlatMapRune(f func(AnyOptionArrayOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionArrayOptionOptionList) FlatMapFloat32(f func(AnyOptionArrayOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionArrayOptionOptionList) FlatMapFloat64(f func(AnyOptionArrayOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionArrayOptionOptionList) FlatMapComplex64(f func(AnyOptionArrayOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionArrayOptionOptionList) FlatMapComplex128(f func(AnyOptionArrayOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionArrayOptionOptionList) FlatMapAny(f func(AnyOptionArrayOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListOptionOptionList) FlatMapBool(f func(BoolListOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListOptionOptionList) FlatMapString(f func(BoolListOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListOptionOptionList) FlatMapInt(f func(BoolListOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListOptionOptionList) FlatMapInt8(f func(BoolListOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListOptionOptionList) FlatMapInt16(f func(BoolListOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListOptionOptionList) FlatMapInt32(f func(BoolListOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListOptionOptionList) FlatMapInt64(f func(BoolListOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListOptionOptionList) FlatMapUint(f func(BoolListOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListOptionOptionList) FlatMapUint8(f func(BoolListOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListOptionOptionList) FlatMapUint16(f func(BoolListOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListOptionOptionList) FlatMapUint32(f func(BoolListOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListOptionOptionList) FlatMapUint64(f func(BoolListOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListOptionOptionList) FlatMapUintptr(f func(BoolListOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListOptionOptionList) FlatMapByte(f func(BoolListOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListOptionOptionList) FlatMapRune(f func(BoolListOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListOptionOptionList) FlatMapFloat32(f func(BoolListOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListOptionOptionList) FlatMapFloat64(f func(BoolListOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListOptionOptionList) FlatMapComplex64(f func(BoolListOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListOptionOptionList) FlatMapComplex128(f func(BoolListOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListOptionOptionList) FlatMapAny(f func(BoolListOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListOptionOptionList) FlatMapBool(f func(StringListOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListOptionOptionList) FlatMapString(f func(StringListOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListOptionOptionList) FlatMapInt(f func(StringListOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListOptionOptionList) FlatMapInt8(f func(StringListOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListOptionOptionList) FlatMapInt16(f func(StringListOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListOptionOptionList) FlatMapInt32(f func(StringListOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListOptionOptionList) FlatMapInt64(f func(StringListOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListOptionOptionList) FlatMapUint(f func(StringListOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListOptionOptionList) FlatMapUint8(f func(StringListOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListOptionOptionList) FlatMapUint16(f func(StringListOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListOptionOptionList) FlatMapUint32(f func(StringListOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListOptionOptionList) FlatMapUint64(f func(StringListOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListOptionOptionList) FlatMapUintptr(f func(StringListOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListOptionOptionList) FlatMapByte(f func(StringListOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListOptionOptionList) FlatMapRune(f func(StringListOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListOptionOptionList) FlatMapFloat32(f func(StringListOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListOptionOptionList) FlatMapFloat64(f func(StringListOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListOptionOptionList) FlatMapComplex64(f func(StringListOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListOptionOptionList) FlatMapComplex128(f func(StringListOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListOptionOptionList) FlatMapAny(f func(StringListOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListOptionOptionList) FlatMapBool(f func(IntListOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListOptionOptionList) FlatMapString(f func(IntListOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListOptionOptionList) FlatMapInt(f func(IntListOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListOptionOptionList) FlatMapInt8(f func(IntListOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListOptionOptionList) FlatMapInt16(f func(IntListOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListOptionOptionList) FlatMapInt32(f func(IntListOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListOptionOptionList) FlatMapInt64(f func(IntListOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListOptionOptionList) FlatMapUint(f func(IntListOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListOptionOptionList) FlatMapUint8(f func(IntListOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListOptionOptionList) FlatMapUint16(f func(IntListOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListOptionOptionList) FlatMapUint32(f func(IntListOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListOptionOptionList) FlatMapUint64(f func(IntListOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListOptionOptionList) FlatMapUintptr(f func(IntListOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListOptionOptionList) FlatMapByte(f func(IntListOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListOptionOptionList) FlatMapRune(f func(IntListOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListOptionOptionList) FlatMapFloat32(f func(IntListOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListOptionOptionList) FlatMapFloat64(f func(IntListOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListOptionOptionList) FlatMapComplex64(f func(IntListOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListOptionOptionList) FlatMapComplex128(f func(IntListOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListOptionOptionList) FlatMapAny(f func(IntListOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ListOptionOptionList) FlatMapBool(f func(Int8ListOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ListOptionOptionList) FlatMapString(f func(Int8ListOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ListOptionOptionList) FlatMapInt(f func(Int8ListOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ListOptionOptionList) FlatMapInt8(f func(Int8ListOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ListOptionOptionList) FlatMapInt16(f func(Int8ListOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ListOptionOptionList) FlatMapInt32(f func(Int8ListOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ListOptionOptionList) FlatMapInt64(f func(Int8ListOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ListOptionOptionList) FlatMapUint(f func(Int8ListOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ListOptionOptionList) FlatMapUint8(f func(Int8ListOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ListOptionOptionList) FlatMapUint16(f func(Int8ListOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ListOptionOptionList) FlatMapUint32(f func(Int8ListOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ListOptionOptionList) FlatMapUint64(f func(Int8ListOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ListOptionOptionList) FlatMapUintptr(f func(Int8ListOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ListOptionOptionList) FlatMapByte(f func(Int8ListOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ListOptionOptionList) FlatMapRune(f func(Int8ListOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ListOptionOptionList) FlatMapFloat32(f func(Int8ListOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ListOptionOptionList) FlatMapFloat64(f func(Int8ListOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ListOptionOptionList) FlatMapComplex64(f func(Int8ListOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ListOptionOptionList) FlatMapComplex128(f func(Int8ListOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ListOptionOptionList) FlatMapAny(f func(Int8ListOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ListOptionOptionList) FlatMapBool(f func(Int16ListOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ListOptionOptionList) FlatMapString(f func(Int16ListOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ListOptionOptionList) FlatMapInt(f func(Int16ListOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ListOptionOptionList) FlatMapInt8(f func(Int16ListOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ListOptionOptionList) FlatMapInt16(f func(Int16ListOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ListOptionOptionList) FlatMapInt32(f func(Int16ListOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ListOptionOptionList) FlatMapInt64(f func(Int16ListOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ListOptionOptionList) FlatMapUint(f func(Int16ListOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ListOptionOptionList) FlatMapUint8(f func(Int16ListOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ListOptionOptionList) FlatMapUint16(f func(Int16ListOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ListOptionOptionList) FlatMapUint32(f func(Int16ListOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ListOptionOptionList) FlatMapUint64(f func(Int16ListOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ListOptionOptionList) FlatMapUintptr(f func(Int16ListOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ListOptionOptionList) FlatMapByte(f func(Int16ListOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ListOptionOptionList) FlatMapRune(f func(Int16ListOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ListOptionOptionList) FlatMapFloat32(f func(Int16ListOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ListOptionOptionList) FlatMapFloat64(f func(Int16ListOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ListOptionOptionList) FlatMapComplex64(f func(Int16ListOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ListOptionOptionList) FlatMapComplex128(f func(Int16ListOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ListOptionOptionList) FlatMapAny(f func(Int16ListOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListOptionOptionList) FlatMapBool(f func(Int32ListOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListOptionOptionList) FlatMapString(f func(Int32ListOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListOptionOptionList) FlatMapInt(f func(Int32ListOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListOptionOptionList) FlatMapInt8(f func(Int32ListOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListOptionOptionList) FlatMapInt16(f func(Int32ListOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListOptionOptionList) FlatMapInt32(f func(Int32ListOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListOptionOptionList) FlatMapInt64(f func(Int32ListOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListOptionOptionList) FlatMapUint(f func(Int32ListOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListOptionOptionList) FlatMapUint8(f func(Int32ListOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListOptionOptionList) FlatMapUint16(f func(Int32ListOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListOptionOptionList) FlatMapUint32(f func(Int32ListOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListOptionOptionList) FlatMapUint64(f func(Int32ListOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListOptionOptionList) FlatMapUintptr(f func(Int32ListOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListOptionOptionList) FlatMapByte(f func(Int32ListOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListOptionOptionList) FlatMapRune(f func(Int32ListOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListOptionOptionList) FlatMapFloat32(f func(Int32ListOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListOptionOptionList) FlatMapFloat64(f func(Int32ListOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListOptionOptionList) FlatMapComplex64(f func(Int32ListOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListOptionOptionList) FlatMapComplex128(f func(Int32ListOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListOptionOptionList) FlatMapAny(f func(Int32ListOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListOptionOptionList) FlatMapBool(f func(Int64ListOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListOptionOptionList) FlatMapString(f func(Int64ListOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListOptionOptionList) FlatMapInt(f func(Int64ListOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListOptionOptionList) FlatMapInt8(f func(Int64ListOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListOptionOptionList) FlatMapInt16(f func(Int64ListOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListOptionOptionList) FlatMapInt32(f func(Int64ListOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListOptionOptionList) FlatMapInt64(f func(Int64ListOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListOptionOptionList) FlatMapUint(f func(Int64ListOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListOptionOptionList) FlatMapUint8(f func(Int64ListOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListOptionOptionList) FlatMapUint16(f func(Int64ListOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListOptionOptionList) FlatMapUint32(f func(Int64ListOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListOptionOptionList) FlatMapUint64(f func(Int64ListOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListOptionOptionList) FlatMapUintptr(f func(Int64ListOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListOptionOptionList) FlatMapByte(f func(Int64ListOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListOptionOptionList) FlatMapRune(f func(Int64ListOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListOptionOptionList) FlatMapFloat32(f func(Int64ListOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListOptionOptionList) FlatMapFloat64(f func(Int64ListOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListOptionOptionList) FlatMapComplex64(f func(Int64ListOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListOptionOptionList) FlatMapComplex128(f func(Int64ListOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListOptionOptionList) FlatMapAny(f func(Int64ListOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListOptionOptionList) FlatMapBool(f func(UintListOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListOptionOptionList) FlatMapString(f func(UintListOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListOptionOptionList) FlatMapInt(f func(UintListOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListOptionOptionList) FlatMapInt8(f func(UintListOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListOptionOptionList) FlatMapInt16(f func(UintListOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListOptionOptionList) FlatMapInt32(f func(UintListOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListOptionOptionList) FlatMapInt64(f func(UintListOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListOptionOptionList) FlatMapUint(f func(UintListOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListOptionOptionList) FlatMapUint8(f func(UintListOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListOptionOptionList) FlatMapUint16(f func(UintListOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListOptionOptionList) FlatMapUint32(f func(UintListOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListOptionOptionList) FlatMapUint64(f func(UintListOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListOptionOptionList) FlatMapUintptr(f func(UintListOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListOptionOptionList) FlatMapByte(f func(UintListOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListOptionOptionList) FlatMapRune(f func(UintListOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListOptionOptionList) FlatMapFloat32(f func(UintListOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListOptionOptionList) FlatMapFloat64(f func(UintListOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListOptionOptionList) FlatMapComplex64(f func(UintListOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListOptionOptionList) FlatMapComplex128(f func(UintListOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListOptionOptionList) FlatMapAny(f func(UintListOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ListOptionOptionList) FlatMapBool(f func(Uint8ListOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ListOptionOptionList) FlatMapString(f func(Uint8ListOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ListOptionOptionList) FlatMapInt(f func(Uint8ListOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ListOptionOptionList) FlatMapInt8(f func(Uint8ListOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ListOptionOptionList) FlatMapInt16(f func(Uint8ListOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ListOptionOptionList) FlatMapInt32(f func(Uint8ListOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ListOptionOptionList) FlatMapInt64(f func(Uint8ListOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ListOptionOptionList) FlatMapUint(f func(Uint8ListOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ListOptionOptionList) FlatMapUint8(f func(Uint8ListOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ListOptionOptionList) FlatMapUint16(f func(Uint8ListOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ListOptionOptionList) FlatMapUint32(f func(Uint8ListOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ListOptionOptionList) FlatMapUint64(f func(Uint8ListOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ListOptionOptionList) FlatMapUintptr(f func(Uint8ListOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ListOptionOptionList) FlatMapByte(f func(Uint8ListOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ListOptionOptionList) FlatMapRune(f func(Uint8ListOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ListOptionOptionList) FlatMapFloat32(f func(Uint8ListOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ListOptionOptionList) FlatMapFloat64(f func(Uint8ListOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ListOptionOptionList) FlatMapComplex64(f func(Uint8ListOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ListOptionOptionList) FlatMapComplex128(f func(Uint8ListOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ListOptionOptionList) FlatMapAny(f func(Uint8ListOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ListOptionOptionList) FlatMapBool(f func(Uint16ListOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ListOptionOptionList) FlatMapString(f func(Uint16ListOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ListOptionOptionList) FlatMapInt(f func(Uint16ListOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ListOptionOptionList) FlatMapInt8(f func(Uint16ListOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ListOptionOptionList) FlatMapInt16(f func(Uint16ListOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ListOptionOptionList) FlatMapInt32(f func(Uint16ListOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ListOptionOptionList) FlatMapInt64(f func(Uint16ListOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ListOptionOptionList) FlatMapUint(f func(Uint16ListOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ListOptionOptionList) FlatMapUint8(f func(Uint16ListOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ListOptionOptionList) FlatMapUint16(f func(Uint16ListOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ListOptionOptionList) FlatMapUint32(f func(Uint16ListOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ListOptionOptionList) FlatMapUint64(f func(Uint16ListOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ListOptionOptionList) FlatMapUintptr(f func(Uint16ListOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ListOptionOptionList) FlatMapByte(f func(Uint16ListOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ListOptionOptionList) FlatMapRune(f func(Uint16ListOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ListOptionOptionList) FlatMapFloat32(f func(Uint16ListOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ListOptionOptionList) FlatMapFloat64(f func(Uint16ListOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ListOptionOptionList) FlatMapComplex64(f func(Uint16ListOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ListOptionOptionList) FlatMapComplex128(f func(Uint16ListOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ListOptionOptionList) FlatMapAny(f func(Uint16ListOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ListOptionOptionList) FlatMapBool(f func(Uint32ListOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ListOptionOptionList) FlatMapString(f func(Uint32ListOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ListOptionOptionList) FlatMapInt(f func(Uint32ListOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ListOptionOptionList) FlatMapInt8(f func(Uint32ListOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ListOptionOptionList) FlatMapInt16(f func(Uint32ListOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ListOptionOptionList) FlatMapInt32(f func(Uint32ListOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ListOptionOptionList) FlatMapInt64(f func(Uint32ListOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ListOptionOptionList) FlatMapUint(f func(Uint32ListOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ListOptionOptionList) FlatMapUint8(f func(Uint32ListOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ListOptionOptionList) FlatMapUint16(f func(Uint32ListOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ListOptionOptionList) FlatMapUint32(f func(Uint32ListOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ListOptionOptionList) FlatMapUint64(f func(Uint32ListOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ListOptionOptionList) FlatMapUintptr(f func(Uint32ListOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ListOptionOptionList) FlatMapByte(f func(Uint32ListOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ListOptionOptionList) FlatMapRune(f func(Uint32ListOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ListOptionOptionList) FlatMapFloat32(f func(Uint32ListOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ListOptionOptionList) FlatMapFloat64(f func(Uint32ListOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ListOptionOptionList) FlatMapComplex64(f func(Uint32ListOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ListOptionOptionList) FlatMapComplex128(f func(Uint32ListOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ListOptionOptionList) FlatMapAny(f func(Uint32ListOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListOptionOptionList) FlatMapBool(f func(Uint64ListOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListOptionOptionList) FlatMapString(f func(Uint64ListOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListOptionOptionList) FlatMapInt(f func(Uint64ListOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListOptionOptionList) FlatMapInt8(f func(Uint64ListOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListOptionOptionList) FlatMapInt16(f func(Uint64ListOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListOptionOptionList) FlatMapInt32(f func(Uint64ListOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListOptionOptionList) FlatMapInt64(f func(Uint64ListOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListOptionOptionList) FlatMapUint(f func(Uint64ListOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListOptionOptionList) FlatMapUint8(f func(Uint64ListOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListOptionOptionList) FlatMapUint16(f func(Uint64ListOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListOptionOptionList) FlatMapUint32(f func(Uint64ListOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListOptionOptionList) FlatMapUint64(f func(Uint64ListOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListOptionOptionList) FlatMapUintptr(f func(Uint64ListOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListOptionOptionList) FlatMapByte(f func(Uint64ListOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListOptionOptionList) FlatMapRune(f func(Uint64ListOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListOptionOptionList) FlatMapFloat32(f func(Uint64ListOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListOptionOptionList) FlatMapFloat64(f func(Uint64ListOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListOptionOptionList) FlatMapComplex64(f func(Uint64ListOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListOptionOptionList) FlatMapComplex128(f func(Uint64ListOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListOptionOptionList) FlatMapAny(f func(Uint64ListOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListOptionOptionList) FlatMapBool(f func(UintptrListOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListOptionOptionList) FlatMapString(f func(UintptrListOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListOptionOptionList) FlatMapInt(f func(UintptrListOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListOptionOptionList) FlatMapInt8(f func(UintptrListOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListOptionOptionList) FlatMapInt16(f func(UintptrListOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListOptionOptionList) FlatMapInt32(f func(UintptrListOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListOptionOptionList) FlatMapInt64(f func(UintptrListOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListOptionOptionList) FlatMapUint(f func(UintptrListOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListOptionOptionList) FlatMapUint8(f func(UintptrListOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListOptionOptionList) FlatMapUint16(f func(UintptrListOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListOptionOptionList) FlatMapUint32(f func(UintptrListOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListOptionOptionList) FlatMapUint64(f func(UintptrListOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListOptionOptionList) FlatMapUintptr(f func(UintptrListOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListOptionOptionList) FlatMapByte(f func(UintptrListOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListOptionOptionList) FlatMapRune(f func(UintptrListOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListOptionOptionList) FlatMapFloat32(f func(UintptrListOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListOptionOptionList) FlatMapFloat64(f func(UintptrListOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListOptionOptionList) FlatMapComplex64(f func(UintptrListOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListOptionOptionList) FlatMapComplex128(f func(UintptrListOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListOptionOptionList) FlatMapAny(f func(UintptrListOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListOptionOptionList) FlatMapBool(f func(ByteListOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListOptionOptionList) FlatMapString(f func(ByteListOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListOptionOptionList) FlatMapInt(f func(ByteListOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListOptionOptionList) FlatMapInt8(f func(ByteListOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListOptionOptionList) FlatMapInt16(f func(ByteListOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListOptionOptionList) FlatMapInt32(f func(ByteListOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListOptionOptionList) FlatMapInt64(f func(ByteListOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListOptionOptionList) FlatMapUint(f func(ByteListOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListOptionOptionList) FlatMapUint8(f func(ByteListOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListOptionOptionList) FlatMapUint16(f func(ByteListOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListOptionOptionList) FlatMapUint32(f func(ByteListOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListOptionOptionList) FlatMapUint64(f func(ByteListOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListOptionOptionList) FlatMapUintptr(f func(ByteListOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListOptionOptionList) FlatMapByte(f func(ByteListOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListOptionOptionList) FlatMapRune(f func(ByteListOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListOptionOptionList) FlatMapFloat32(f func(ByteListOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListOptionOptionList) FlatMapFloat64(f func(ByteListOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListOptionOptionList) FlatMapComplex64(f func(ByteListOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListOptionOptionList) FlatMapComplex128(f func(ByteListOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListOptionOptionList) FlatMapAny(f func(ByteListOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListOptionOptionList) FlatMapBool(f func(RuneListOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListOptionOptionList) FlatMapString(f func(RuneListOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListOptionOptionList) FlatMapInt(f func(RuneListOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListOptionOptionList) FlatMapInt8(f func(RuneListOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListOptionOptionList) FlatMapInt16(f func(RuneListOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListOptionOptionList) FlatMapInt32(f func(RuneListOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListOptionOptionList) FlatMapInt64(f func(RuneListOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListOptionOptionList) FlatMapUint(f func(RuneListOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListOptionOptionList) FlatMapUint8(f func(RuneListOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListOptionOptionList) FlatMapUint16(f func(RuneListOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListOptionOptionList) FlatMapUint32(f func(RuneListOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListOptionOptionList) FlatMapUint64(f func(RuneListOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListOptionOptionList) FlatMapUintptr(f func(RuneListOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListOptionOptionList) FlatMapByte(f func(RuneListOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListOptionOptionList) FlatMapRune(f func(RuneListOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListOptionOptionList) FlatMapFloat32(f func(RuneListOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListOptionOptionList) FlatMapFloat64(f func(RuneListOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListOptionOptionList) FlatMapComplex64(f func(RuneListOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListOptionOptionList) FlatMapComplex128(f func(RuneListOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListOptionOptionList) FlatMapAny(f func(RuneListOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListOptionOptionList) FlatMapBool(f func(Float32ListOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListOptionOptionList) FlatMapString(f func(Float32ListOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListOptionOptionList) FlatMapInt(f func(Float32ListOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListOptionOptionList) FlatMapInt8(f func(Float32ListOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListOptionOptionList) FlatMapInt16(f func(Float32ListOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListOptionOptionList) FlatMapInt32(f func(Float32ListOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListOptionOptionList) FlatMapInt64(f func(Float32ListOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListOptionOptionList) FlatMapUint(f func(Float32ListOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListOptionOptionList) FlatMapUint8(f func(Float32ListOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListOptionOptionList) FlatMapUint16(f func(Float32ListOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListOptionOptionList) FlatMapUint32(f func(Float32ListOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListOptionOptionList) FlatMapUint64(f func(Float32ListOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListOptionOptionList) FlatMapUintptr(f func(Float32ListOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListOptionOptionList) FlatMapByte(f func(Float32ListOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListOptionOptionList) FlatMapRune(f func(Float32ListOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListOptionOptionList) FlatMapFloat32(f func(Float32ListOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListOptionOptionList) FlatMapFloat64(f func(Float32ListOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListOptionOptionList) FlatMapComplex64(f func(Float32ListOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListOptionOptionList) FlatMapComplex128(f func(Float32ListOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListOptionOptionList) FlatMapAny(f func(Float32ListOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListOptionOptionList) FlatMapBool(f func(Float64ListOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListOptionOptionList) FlatMapString(f func(Float64ListOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListOptionOptionList) FlatMapInt(f func(Float64ListOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListOptionOptionList) FlatMapInt8(f func(Float64ListOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListOptionOptionList) FlatMapInt16(f func(Float64ListOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListOptionOptionList) FlatMapInt32(f func(Float64ListOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListOptionOptionList) FlatMapInt64(f func(Float64ListOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListOptionOptionList) FlatMapUint(f func(Float64ListOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListOptionOptionList) FlatMapUint8(f func(Float64ListOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListOptionOptionList) FlatMapUint16(f func(Float64ListOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListOptionOptionList) FlatMapUint32(f func(Float64ListOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListOptionOptionList) FlatMapUint64(f func(Float64ListOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListOptionOptionList) FlatMapUintptr(f func(Float64ListOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListOptionOptionList) FlatMapByte(f func(Float64ListOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListOptionOptionList) FlatMapRune(f func(Float64ListOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListOptionOptionList) FlatMapFloat32(f func(Float64ListOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListOptionOptionList) FlatMapFloat64(f func(Float64ListOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListOptionOptionList) FlatMapComplex64(f func(Float64ListOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListOptionOptionList) FlatMapComplex128(f func(Float64ListOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListOptionOptionList) FlatMapAny(f func(Float64ListOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ListOptionOptionList) FlatMapBool(f func(Complex64ListOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ListOptionOptionList) FlatMapString(f func(Complex64ListOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ListOptionOptionList) FlatMapInt(f func(Complex64ListOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ListOptionOptionList) FlatMapInt8(f func(Complex64ListOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ListOptionOptionList) FlatMapInt16(f func(Complex64ListOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ListOptionOptionList) FlatMapInt32(f func(Complex64ListOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ListOptionOptionList) FlatMapInt64(f func(Complex64ListOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ListOptionOptionList) FlatMapUint(f func(Complex64ListOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ListOptionOptionList) FlatMapUint8(f func(Complex64ListOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ListOptionOptionList) FlatMapUint16(f func(Complex64ListOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ListOptionOptionList) FlatMapUint32(f func(Complex64ListOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ListOptionOptionList) FlatMapUint64(f func(Complex64ListOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ListOptionOptionList) FlatMapUintptr(f func(Complex64ListOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ListOptionOptionList) FlatMapByte(f func(Complex64ListOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ListOptionOptionList) FlatMapRune(f func(Complex64ListOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ListOptionOptionList) FlatMapFloat32(f func(Complex64ListOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ListOptionOptionList) FlatMapFloat64(f func(Complex64ListOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ListOptionOptionList) FlatMapComplex64(f func(Complex64ListOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ListOptionOptionList) FlatMapComplex128(f func(Complex64ListOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ListOptionOptionList) FlatMapAny(f func(Complex64ListOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ListOptionOptionList) FlatMapBool(f func(Complex128ListOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ListOptionOptionList) FlatMapString(f func(Complex128ListOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ListOptionOptionList) FlatMapInt(f func(Complex128ListOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ListOptionOptionList) FlatMapInt8(f func(Complex128ListOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ListOptionOptionList) FlatMapInt16(f func(Complex128ListOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ListOptionOptionList) FlatMapInt32(f func(Complex128ListOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ListOptionOptionList) FlatMapInt64(f func(Complex128ListOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ListOptionOptionList) FlatMapUint(f func(Complex128ListOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ListOptionOptionList) FlatMapUint8(f func(Complex128ListOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ListOptionOptionList) FlatMapUint16(f func(Complex128ListOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ListOptionOptionList) FlatMapUint32(f func(Complex128ListOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ListOptionOptionList) FlatMapUint64(f func(Complex128ListOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ListOptionOptionList) FlatMapUintptr(f func(Complex128ListOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ListOptionOptionList) FlatMapByte(f func(Complex128ListOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ListOptionOptionList) FlatMapRune(f func(Complex128ListOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ListOptionOptionList) FlatMapFloat32(f func(Complex128ListOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ListOptionOptionList) FlatMapFloat64(f func(Complex128ListOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ListOptionOptionList) FlatMapComplex64(f func(Complex128ListOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ListOptionOptionList) FlatMapComplex128(f func(Complex128ListOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ListOptionOptionList) FlatMapAny(f func(Complex128ListOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListOptionOptionList) FlatMapBool(f func(AnyListOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListOptionOptionList) FlatMapString(f func(AnyListOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListOptionOptionList) FlatMapInt(f func(AnyListOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListOptionOptionList) FlatMapInt8(f func(AnyListOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListOptionOptionList) FlatMapInt16(f func(AnyListOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListOptionOptionList) FlatMapInt32(f func(AnyListOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListOptionOptionList) FlatMapInt64(f func(AnyListOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListOptionOptionList) FlatMapUint(f func(AnyListOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListOptionOptionList) FlatMapUint8(f func(AnyListOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListOptionOptionList) FlatMapUint16(f func(AnyListOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListOptionOptionList) FlatMapUint32(f func(AnyListOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListOptionOptionList) FlatMapUint64(f func(AnyListOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListOptionOptionList) FlatMapUintptr(f func(AnyListOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListOptionOptionList) FlatMapByte(f func(AnyListOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListOptionOptionList) FlatMapRune(f func(AnyListOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListOptionOptionList) FlatMapFloat32(f func(AnyListOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListOptionOptionList) FlatMapFloat64(f func(AnyListOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListOptionOptionList) FlatMapComplex64(f func(AnyListOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListOptionOptionList) FlatMapComplex128(f func(AnyListOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListOptionOptionList) FlatMapAny(f func(AnyListOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionOptionOptionList) FlatMapBool(f func(BoolOptionOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionOptionOptionList) FlatMapString(f func(BoolOptionOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionOptionOptionList) FlatMapInt(f func(BoolOptionOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionOptionOptionList) FlatMapInt8(f func(BoolOptionOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionOptionOptionList) FlatMapInt16(f func(BoolOptionOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionOptionOptionList) FlatMapInt32(f func(BoolOptionOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionOptionOptionList) FlatMapInt64(f func(BoolOptionOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionOptionOptionList) FlatMapUint(f func(BoolOptionOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionOptionOptionList) FlatMapUint8(f func(BoolOptionOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionOptionOptionList) FlatMapUint16(f func(BoolOptionOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionOptionOptionList) FlatMapUint32(f func(BoolOptionOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionOptionOptionList) FlatMapUint64(f func(BoolOptionOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionOptionOptionList) FlatMapUintptr(f func(BoolOptionOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionOptionOptionList) FlatMapByte(f func(BoolOptionOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionOptionOptionList) FlatMapRune(f func(BoolOptionOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionOptionOptionList) FlatMapFloat32(f func(BoolOptionOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionOptionOptionList) FlatMapFloat64(f func(BoolOptionOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionOptionOptionList) FlatMapComplex64(f func(BoolOptionOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionOptionOptionList) FlatMapComplex128(f func(BoolOptionOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionOptionOptionList) FlatMapAny(f func(BoolOptionOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionOptionOptionList) FlatMapBool(f func(StringOptionOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionOptionOptionList) FlatMapString(f func(StringOptionOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionOptionOptionList) FlatMapInt(f func(StringOptionOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionOptionOptionList) FlatMapInt8(f func(StringOptionOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionOptionOptionList) FlatMapInt16(f func(StringOptionOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionOptionOptionList) FlatMapInt32(f func(StringOptionOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionOptionOptionList) FlatMapInt64(f func(StringOptionOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionOptionOptionList) FlatMapUint(f func(StringOptionOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionOptionOptionList) FlatMapUint8(f func(StringOptionOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionOptionOptionList) FlatMapUint16(f func(StringOptionOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionOptionOptionList) FlatMapUint32(f func(StringOptionOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionOptionOptionList) FlatMapUint64(f func(StringOptionOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionOptionOptionList) FlatMapUintptr(f func(StringOptionOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionOptionOptionList) FlatMapByte(f func(StringOptionOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionOptionOptionList) FlatMapRune(f func(StringOptionOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionOptionOptionList) FlatMapFloat32(f func(StringOptionOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionOptionOptionList) FlatMapFloat64(f func(StringOptionOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionOptionOptionList) FlatMapComplex64(f func(StringOptionOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionOptionOptionList) FlatMapComplex128(f func(StringOptionOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionOptionOptionList) FlatMapAny(f func(StringOptionOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionOptionOptionList) FlatMapBool(f func(IntOptionOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionOptionOptionList) FlatMapString(f func(IntOptionOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionOptionOptionList) FlatMapInt(f func(IntOptionOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionOptionOptionList) FlatMapInt8(f func(IntOptionOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionOptionOptionList) FlatMapInt16(f func(IntOptionOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionOptionOptionList) FlatMapInt32(f func(IntOptionOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionOptionOptionList) FlatMapInt64(f func(IntOptionOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionOptionOptionList) FlatMapUint(f func(IntOptionOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionOptionOptionList) FlatMapUint8(f func(IntOptionOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionOptionOptionList) FlatMapUint16(f func(IntOptionOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionOptionOptionList) FlatMapUint32(f func(IntOptionOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionOptionOptionList) FlatMapUint64(f func(IntOptionOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionOptionOptionList) FlatMapUintptr(f func(IntOptionOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionOptionOptionList) FlatMapByte(f func(IntOptionOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionOptionOptionList) FlatMapRune(f func(IntOptionOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionOptionOptionList) FlatMapFloat32(f func(IntOptionOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionOptionOptionList) FlatMapFloat64(f func(IntOptionOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionOptionOptionList) FlatMapComplex64(f func(IntOptionOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionOptionOptionList) FlatMapComplex128(f func(IntOptionOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionOptionOptionList) FlatMapAny(f func(IntOptionOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionOptionOptionList) FlatMapBool(f func(Int8OptionOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionOptionOptionList) FlatMapString(f func(Int8OptionOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionOptionOptionList) FlatMapInt(f func(Int8OptionOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionOptionOptionList) FlatMapInt8(f func(Int8OptionOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionOptionOptionList) FlatMapInt16(f func(Int8OptionOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionOptionOptionList) FlatMapInt32(f func(Int8OptionOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionOptionOptionList) FlatMapInt64(f func(Int8OptionOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionOptionOptionList) FlatMapUint(f func(Int8OptionOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionOptionOptionList) FlatMapUint8(f func(Int8OptionOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionOptionOptionList) FlatMapUint16(f func(Int8OptionOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionOptionOptionList) FlatMapUint32(f func(Int8OptionOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionOptionOptionList) FlatMapUint64(f func(Int8OptionOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionOptionOptionList) FlatMapUintptr(f func(Int8OptionOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionOptionOptionList) FlatMapByte(f func(Int8OptionOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionOptionOptionList) FlatMapRune(f func(Int8OptionOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionOptionOptionList) FlatMapFloat32(f func(Int8OptionOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionOptionOptionList) FlatMapFloat64(f func(Int8OptionOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionOptionOptionList) FlatMapComplex64(f func(Int8OptionOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionOptionOptionList) FlatMapComplex128(f func(Int8OptionOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionOptionOptionList) FlatMapAny(f func(Int8OptionOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionOptionOptionList) FlatMapBool(f func(Int16OptionOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionOptionOptionList) FlatMapString(f func(Int16OptionOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionOptionOptionList) FlatMapInt(f func(Int16OptionOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionOptionOptionList) FlatMapInt8(f func(Int16OptionOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionOptionOptionList) FlatMapInt16(f func(Int16OptionOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionOptionOptionList) FlatMapInt32(f func(Int16OptionOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionOptionOptionList) FlatMapInt64(f func(Int16OptionOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionOptionOptionList) FlatMapUint(f func(Int16OptionOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionOptionOptionList) FlatMapUint8(f func(Int16OptionOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionOptionOptionList) FlatMapUint16(f func(Int16OptionOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionOptionOptionList) FlatMapUint32(f func(Int16OptionOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionOptionOptionList) FlatMapUint64(f func(Int16OptionOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionOptionOptionList) FlatMapUintptr(f func(Int16OptionOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionOptionOptionList) FlatMapByte(f func(Int16OptionOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionOptionOptionList) FlatMapRune(f func(Int16OptionOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionOptionOptionList) FlatMapFloat32(f func(Int16OptionOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionOptionOptionList) FlatMapFloat64(f func(Int16OptionOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionOptionOptionList) FlatMapComplex64(f func(Int16OptionOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionOptionOptionList) FlatMapComplex128(f func(Int16OptionOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionOptionOptionList) FlatMapAny(f func(Int16OptionOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionOptionOptionList) FlatMapBool(f func(Int32OptionOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionOptionOptionList) FlatMapString(f func(Int32OptionOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionOptionOptionList) FlatMapInt(f func(Int32OptionOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionOptionOptionList) FlatMapInt8(f func(Int32OptionOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionOptionOptionList) FlatMapInt16(f func(Int32OptionOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionOptionOptionList) FlatMapInt32(f func(Int32OptionOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionOptionOptionList) FlatMapInt64(f func(Int32OptionOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionOptionOptionList) FlatMapUint(f func(Int32OptionOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionOptionOptionList) FlatMapUint8(f func(Int32OptionOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionOptionOptionList) FlatMapUint16(f func(Int32OptionOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionOptionOptionList) FlatMapUint32(f func(Int32OptionOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionOptionOptionList) FlatMapUint64(f func(Int32OptionOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionOptionOptionList) FlatMapUintptr(f func(Int32OptionOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionOptionOptionList) FlatMapByte(f func(Int32OptionOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionOptionOptionList) FlatMapRune(f func(Int32OptionOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionOptionOptionList) FlatMapFloat32(f func(Int32OptionOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionOptionOptionList) FlatMapFloat64(f func(Int32OptionOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionOptionOptionList) FlatMapComplex64(f func(Int32OptionOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionOptionOptionList) FlatMapComplex128(f func(Int32OptionOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionOptionOptionList) FlatMapAny(f func(Int32OptionOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionOptionOptionList) FlatMapBool(f func(Int64OptionOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionOptionOptionList) FlatMapString(f func(Int64OptionOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionOptionOptionList) FlatMapInt(f func(Int64OptionOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionOptionOptionList) FlatMapInt8(f func(Int64OptionOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionOptionOptionList) FlatMapInt16(f func(Int64OptionOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionOptionOptionList) FlatMapInt32(f func(Int64OptionOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionOptionOptionList) FlatMapInt64(f func(Int64OptionOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionOptionOptionList) FlatMapUint(f func(Int64OptionOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionOptionOptionList) FlatMapUint8(f func(Int64OptionOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionOptionOptionList) FlatMapUint16(f func(Int64OptionOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionOptionOptionList) FlatMapUint32(f func(Int64OptionOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionOptionOptionList) FlatMapUint64(f func(Int64OptionOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionOptionOptionList) FlatMapUintptr(f func(Int64OptionOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionOptionOptionList) FlatMapByte(f func(Int64OptionOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionOptionOptionList) FlatMapRune(f func(Int64OptionOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionOptionOptionList) FlatMapFloat32(f func(Int64OptionOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionOptionOptionList) FlatMapFloat64(f func(Int64OptionOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionOptionOptionList) FlatMapComplex64(f func(Int64OptionOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionOptionOptionList) FlatMapComplex128(f func(Int64OptionOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionOptionOptionList) FlatMapAny(f func(Int64OptionOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionOptionOptionList) FlatMapBool(f func(UintOptionOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionOptionOptionList) FlatMapString(f func(UintOptionOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionOptionOptionList) FlatMapInt(f func(UintOptionOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionOptionOptionList) FlatMapInt8(f func(UintOptionOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionOptionOptionList) FlatMapInt16(f func(UintOptionOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionOptionOptionList) FlatMapInt32(f func(UintOptionOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionOptionOptionList) FlatMapInt64(f func(UintOptionOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionOptionOptionList) FlatMapUint(f func(UintOptionOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionOptionOptionList) FlatMapUint8(f func(UintOptionOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionOptionOptionList) FlatMapUint16(f func(UintOptionOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionOptionOptionList) FlatMapUint32(f func(UintOptionOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionOptionOptionList) FlatMapUint64(f func(UintOptionOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionOptionOptionList) FlatMapUintptr(f func(UintOptionOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionOptionOptionList) FlatMapByte(f func(UintOptionOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionOptionOptionList) FlatMapRune(f func(UintOptionOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionOptionOptionList) FlatMapFloat32(f func(UintOptionOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionOptionOptionList) FlatMapFloat64(f func(UintOptionOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionOptionOptionList) FlatMapComplex64(f func(UintOptionOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionOptionOptionList) FlatMapComplex128(f func(UintOptionOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionOptionOptionList) FlatMapAny(f func(UintOptionOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionOptionOptionList) FlatMapBool(f func(Uint8OptionOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionOptionOptionList) FlatMapString(f func(Uint8OptionOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionOptionOptionList) FlatMapInt(f func(Uint8OptionOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionOptionOptionList) FlatMapInt8(f func(Uint8OptionOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionOptionOptionList) FlatMapInt16(f func(Uint8OptionOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionOptionOptionList) FlatMapInt32(f func(Uint8OptionOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionOptionOptionList) FlatMapInt64(f func(Uint8OptionOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionOptionOptionList) FlatMapUint(f func(Uint8OptionOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionOptionOptionList) FlatMapUint8(f func(Uint8OptionOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionOptionOptionList) FlatMapUint16(f func(Uint8OptionOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionOptionOptionList) FlatMapUint32(f func(Uint8OptionOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionOptionOptionList) FlatMapUint64(f func(Uint8OptionOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionOptionOptionList) FlatMapUintptr(f func(Uint8OptionOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionOptionOptionList) FlatMapByte(f func(Uint8OptionOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionOptionOptionList) FlatMapRune(f func(Uint8OptionOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionOptionOptionList) FlatMapFloat32(f func(Uint8OptionOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionOptionOptionList) FlatMapFloat64(f func(Uint8OptionOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionOptionOptionList) FlatMapComplex64(f func(Uint8OptionOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionOptionOptionList) FlatMapComplex128(f func(Uint8OptionOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionOptionOptionList) FlatMapAny(f func(Uint8OptionOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionOptionOptionList) FlatMapBool(f func(Uint16OptionOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionOptionOptionList) FlatMapString(f func(Uint16OptionOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionOptionOptionList) FlatMapInt(f func(Uint16OptionOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionOptionOptionList) FlatMapInt8(f func(Uint16OptionOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionOptionOptionList) FlatMapInt16(f func(Uint16OptionOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionOptionOptionList) FlatMapInt32(f func(Uint16OptionOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionOptionOptionList) FlatMapInt64(f func(Uint16OptionOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionOptionOptionList) FlatMapUint(f func(Uint16OptionOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionOptionOptionList) FlatMapUint8(f func(Uint16OptionOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionOptionOptionList) FlatMapUint16(f func(Uint16OptionOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionOptionOptionList) FlatMapUint32(f func(Uint16OptionOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionOptionOptionList) FlatMapUint64(f func(Uint16OptionOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionOptionOptionList) FlatMapUintptr(f func(Uint16OptionOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionOptionOptionList) FlatMapByte(f func(Uint16OptionOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionOptionOptionList) FlatMapRune(f func(Uint16OptionOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionOptionOptionList) FlatMapFloat32(f func(Uint16OptionOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionOptionOptionList) FlatMapFloat64(f func(Uint16OptionOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionOptionOptionList) FlatMapComplex64(f func(Uint16OptionOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionOptionOptionList) FlatMapComplex128(f func(Uint16OptionOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionOptionOptionList) FlatMapAny(f func(Uint16OptionOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionOptionOptionList) FlatMapBool(f func(Uint32OptionOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionOptionOptionList) FlatMapString(f func(Uint32OptionOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionOptionOptionList) FlatMapInt(f func(Uint32OptionOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionOptionOptionList) FlatMapInt8(f func(Uint32OptionOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionOptionOptionList) FlatMapInt16(f func(Uint32OptionOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionOptionOptionList) FlatMapInt32(f func(Uint32OptionOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionOptionOptionList) FlatMapInt64(f func(Uint32OptionOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionOptionOptionList) FlatMapUint(f func(Uint32OptionOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionOptionOptionList) FlatMapUint8(f func(Uint32OptionOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionOptionOptionList) FlatMapUint16(f func(Uint32OptionOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionOptionOptionList) FlatMapUint32(f func(Uint32OptionOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionOptionOptionList) FlatMapUint64(f func(Uint32OptionOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionOptionOptionList) FlatMapUintptr(f func(Uint32OptionOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionOptionOptionList) FlatMapByte(f func(Uint32OptionOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionOptionOptionList) FlatMapRune(f func(Uint32OptionOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionOptionOptionList) FlatMapFloat32(f func(Uint32OptionOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionOptionOptionList) FlatMapFloat64(f func(Uint32OptionOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionOptionOptionList) FlatMapComplex64(f func(Uint32OptionOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionOptionOptionList) FlatMapComplex128(f func(Uint32OptionOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionOptionOptionList) FlatMapAny(f func(Uint32OptionOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionOptionOptionList) FlatMapBool(f func(Uint64OptionOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionOptionOptionList) FlatMapString(f func(Uint64OptionOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionOptionOptionList) FlatMapInt(f func(Uint64OptionOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionOptionOptionList) FlatMapInt8(f func(Uint64OptionOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionOptionOptionList) FlatMapInt16(f func(Uint64OptionOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionOptionOptionList) FlatMapInt32(f func(Uint64OptionOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionOptionOptionList) FlatMapInt64(f func(Uint64OptionOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionOptionOptionList) FlatMapUint(f func(Uint64OptionOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionOptionOptionList) FlatMapUint8(f func(Uint64OptionOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionOptionOptionList) FlatMapUint16(f func(Uint64OptionOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionOptionOptionList) FlatMapUint32(f func(Uint64OptionOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionOptionOptionList) FlatMapUint64(f func(Uint64OptionOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionOptionOptionList) FlatMapUintptr(f func(Uint64OptionOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionOptionOptionList) FlatMapByte(f func(Uint64OptionOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionOptionOptionList) FlatMapRune(f func(Uint64OptionOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionOptionOptionList) FlatMapFloat32(f func(Uint64OptionOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionOptionOptionList) FlatMapFloat64(f func(Uint64OptionOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionOptionOptionList) FlatMapComplex64(f func(Uint64OptionOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionOptionOptionList) FlatMapComplex128(f func(Uint64OptionOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionOptionOptionList) FlatMapAny(f func(Uint64OptionOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionOptionOptionList) FlatMapBool(f func(UintptrOptionOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionOptionOptionList) FlatMapString(f func(UintptrOptionOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionOptionOptionList) FlatMapInt(f func(UintptrOptionOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionOptionOptionList) FlatMapInt8(f func(UintptrOptionOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionOptionOptionList) FlatMapInt16(f func(UintptrOptionOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionOptionOptionList) FlatMapInt32(f func(UintptrOptionOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionOptionOptionList) FlatMapInt64(f func(UintptrOptionOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionOptionOptionList) FlatMapUint(f func(UintptrOptionOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionOptionOptionList) FlatMapUint8(f func(UintptrOptionOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionOptionOptionList) FlatMapUint16(f func(UintptrOptionOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionOptionOptionList) FlatMapUint32(f func(UintptrOptionOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionOptionOptionList) FlatMapUint64(f func(UintptrOptionOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionOptionOptionList) FlatMapUintptr(f func(UintptrOptionOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionOptionOptionList) FlatMapByte(f func(UintptrOptionOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionOptionOptionList) FlatMapRune(f func(UintptrOptionOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionOptionOptionList) FlatMapFloat32(f func(UintptrOptionOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionOptionOptionList) FlatMapFloat64(f func(UintptrOptionOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionOptionOptionList) FlatMapComplex64(f func(UintptrOptionOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionOptionOptionList) FlatMapComplex128(f func(UintptrOptionOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionOptionOptionList) FlatMapAny(f func(UintptrOptionOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionOptionOptionList) FlatMapBool(f func(ByteOptionOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionOptionOptionList) FlatMapString(f func(ByteOptionOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionOptionOptionList) FlatMapInt(f func(ByteOptionOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionOptionOptionList) FlatMapInt8(f func(ByteOptionOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionOptionOptionList) FlatMapInt16(f func(ByteOptionOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionOptionOptionList) FlatMapInt32(f func(ByteOptionOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionOptionOptionList) FlatMapInt64(f func(ByteOptionOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionOptionOptionList) FlatMapUint(f func(ByteOptionOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionOptionOptionList) FlatMapUint8(f func(ByteOptionOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionOptionOptionList) FlatMapUint16(f func(ByteOptionOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionOptionOptionList) FlatMapUint32(f func(ByteOptionOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionOptionOptionList) FlatMapUint64(f func(ByteOptionOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionOptionOptionList) FlatMapUintptr(f func(ByteOptionOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionOptionOptionList) FlatMapByte(f func(ByteOptionOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionOptionOptionList) FlatMapRune(f func(ByteOptionOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionOptionOptionList) FlatMapFloat32(f func(ByteOptionOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionOptionOptionList) FlatMapFloat64(f func(ByteOptionOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionOptionOptionList) FlatMapComplex64(f func(ByteOptionOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionOptionOptionList) FlatMapComplex128(f func(ByteOptionOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionOptionOptionList) FlatMapAny(f func(ByteOptionOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionOptionOptionList) FlatMapBool(f func(RuneOptionOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionOptionOptionList) FlatMapString(f func(RuneOptionOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionOptionOptionList) FlatMapInt(f func(RuneOptionOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionOptionOptionList) FlatMapInt8(f func(RuneOptionOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionOptionOptionList) FlatMapInt16(f func(RuneOptionOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionOptionOptionList) FlatMapInt32(f func(RuneOptionOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionOptionOptionList) FlatMapInt64(f func(RuneOptionOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionOptionOptionList) FlatMapUint(f func(RuneOptionOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionOptionOptionList) FlatMapUint8(f func(RuneOptionOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionOptionOptionList) FlatMapUint16(f func(RuneOptionOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionOptionOptionList) FlatMapUint32(f func(RuneOptionOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionOptionOptionList) FlatMapUint64(f func(RuneOptionOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionOptionOptionList) FlatMapUintptr(f func(RuneOptionOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionOptionOptionList) FlatMapByte(f func(RuneOptionOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionOptionOptionList) FlatMapRune(f func(RuneOptionOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionOptionOptionList) FlatMapFloat32(f func(RuneOptionOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionOptionOptionList) FlatMapFloat64(f func(RuneOptionOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionOptionOptionList) FlatMapComplex64(f func(RuneOptionOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionOptionOptionList) FlatMapComplex128(f func(RuneOptionOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionOptionOptionList) FlatMapAny(f func(RuneOptionOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionOptionOptionList) FlatMapBool(f func(Float32OptionOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionOptionOptionList) FlatMapString(f func(Float32OptionOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionOptionOptionList) FlatMapInt(f func(Float32OptionOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionOptionOptionList) FlatMapInt8(f func(Float32OptionOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionOptionOptionList) FlatMapInt16(f func(Float32OptionOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionOptionOptionList) FlatMapInt32(f func(Float32OptionOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionOptionOptionList) FlatMapInt64(f func(Float32OptionOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionOptionOptionList) FlatMapUint(f func(Float32OptionOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionOptionOptionList) FlatMapUint8(f func(Float32OptionOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionOptionOptionList) FlatMapUint16(f func(Float32OptionOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionOptionOptionList) FlatMapUint32(f func(Float32OptionOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionOptionOptionList) FlatMapUint64(f func(Float32OptionOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionOptionOptionList) FlatMapUintptr(f func(Float32OptionOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionOptionOptionList) FlatMapByte(f func(Float32OptionOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionOptionOptionList) FlatMapRune(f func(Float32OptionOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionOptionOptionList) FlatMapFloat32(f func(Float32OptionOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionOptionOptionList) FlatMapFloat64(f func(Float32OptionOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionOptionOptionList) FlatMapComplex64(f func(Float32OptionOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionOptionOptionList) FlatMapComplex128(f func(Float32OptionOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionOptionOptionList) FlatMapAny(f func(Float32OptionOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionOptionOptionList) FlatMapBool(f func(Float64OptionOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionOptionOptionList) FlatMapString(f func(Float64OptionOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionOptionOptionList) FlatMapInt(f func(Float64OptionOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionOptionOptionList) FlatMapInt8(f func(Float64OptionOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionOptionOptionList) FlatMapInt16(f func(Float64OptionOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionOptionOptionList) FlatMapInt32(f func(Float64OptionOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionOptionOptionList) FlatMapInt64(f func(Float64OptionOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionOptionOptionList) FlatMapUint(f func(Float64OptionOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionOptionOptionList) FlatMapUint8(f func(Float64OptionOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionOptionOptionList) FlatMapUint16(f func(Float64OptionOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionOptionOptionList) FlatMapUint32(f func(Float64OptionOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionOptionOptionList) FlatMapUint64(f func(Float64OptionOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionOptionOptionList) FlatMapUintptr(f func(Float64OptionOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionOptionOptionList) FlatMapByte(f func(Float64OptionOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionOptionOptionList) FlatMapRune(f func(Float64OptionOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionOptionOptionList) FlatMapFloat32(f func(Float64OptionOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionOptionOptionList) FlatMapFloat64(f func(Float64OptionOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionOptionOptionList) FlatMapComplex64(f func(Float64OptionOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionOptionOptionList) FlatMapComplex128(f func(Float64OptionOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionOptionOptionList) FlatMapAny(f func(Float64OptionOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionOptionOptionList) FlatMapBool(f func(Complex64OptionOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionOptionOptionList) FlatMapString(f func(Complex64OptionOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionOptionOptionList) FlatMapInt(f func(Complex64OptionOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionOptionOptionList) FlatMapInt8(f func(Complex64OptionOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionOptionOptionList) FlatMapInt16(f func(Complex64OptionOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionOptionOptionList) FlatMapInt32(f func(Complex64OptionOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionOptionOptionList) FlatMapInt64(f func(Complex64OptionOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionOptionOptionList) FlatMapUint(f func(Complex64OptionOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionOptionOptionList) FlatMapUint8(f func(Complex64OptionOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionOptionOptionList) FlatMapUint16(f func(Complex64OptionOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionOptionOptionList) FlatMapUint32(f func(Complex64OptionOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionOptionOptionList) FlatMapUint64(f func(Complex64OptionOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionOptionOptionList) FlatMapUintptr(f func(Complex64OptionOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionOptionOptionList) FlatMapByte(f func(Complex64OptionOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionOptionOptionList) FlatMapRune(f func(Complex64OptionOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionOptionOptionList) FlatMapFloat32(f func(Complex64OptionOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionOptionOptionList) FlatMapFloat64(f func(Complex64OptionOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionOptionOptionList) FlatMapComplex64(f func(Complex64OptionOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionOptionOptionList) FlatMapComplex128(f func(Complex64OptionOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionOptionOptionList) FlatMapAny(f func(Complex64OptionOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionOptionOptionList) FlatMapBool(f func(Complex128OptionOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionOptionOptionList) FlatMapString(f func(Complex128OptionOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionOptionOptionList) FlatMapInt(f func(Complex128OptionOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionOptionOptionList) FlatMapInt8(f func(Complex128OptionOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionOptionOptionList) FlatMapInt16(f func(Complex128OptionOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionOptionOptionList) FlatMapInt32(f func(Complex128OptionOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionOptionOptionList) FlatMapInt64(f func(Complex128OptionOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionOptionOptionList) FlatMapUint(f func(Complex128OptionOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionOptionOptionList) FlatMapUint8(f func(Complex128OptionOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionOptionOptionList) FlatMapUint16(f func(Complex128OptionOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionOptionOptionList) FlatMapUint32(f func(Complex128OptionOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionOptionOptionList) FlatMapUint64(f func(Complex128OptionOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionOptionOptionList) FlatMapUintptr(f func(Complex128OptionOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionOptionOptionList) FlatMapByte(f func(Complex128OptionOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionOptionOptionList) FlatMapRune(f func(Complex128OptionOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionOptionOptionList) FlatMapFloat32(f func(Complex128OptionOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionOptionOptionList) FlatMapFloat64(f func(Complex128OptionOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionOptionOptionList) FlatMapComplex64(f func(Complex128OptionOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionOptionOptionList) FlatMapComplex128(f func(Complex128OptionOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionOptionOptionList) FlatMapAny(f func(Complex128OptionOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionOptionOptionList) FlatMapBool(f func(AnyOptionOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionOptionOptionList) FlatMapString(f func(AnyOptionOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionOptionOptionList) FlatMapInt(f func(AnyOptionOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionOptionOptionList) FlatMapInt8(f func(AnyOptionOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionOptionOptionList) FlatMapInt16(f func(AnyOptionOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionOptionOptionList) FlatMapInt32(f func(AnyOptionOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionOptionOptionList) FlatMapInt64(f func(AnyOptionOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionOptionOptionList) FlatMapUint(f func(AnyOptionOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionOptionOptionList) FlatMapUint8(f func(AnyOptionOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionOptionOptionList) FlatMapUint16(f func(AnyOptionOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionOptionOptionList) FlatMapUint32(f func(AnyOptionOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionOptionOptionList) FlatMapUint64(f func(AnyOptionOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionOptionOptionList) FlatMapUintptr(f func(AnyOptionOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionOptionOptionList) FlatMapByte(f func(AnyOptionOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionOptionOptionList) FlatMapRune(f func(AnyOptionOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionOptionOptionList) FlatMapFloat32(f func(AnyOptionOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionOptionOptionList) FlatMapFloat64(f func(AnyOptionOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionOptionOptionList) FlatMapComplex64(f func(AnyOptionOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionOptionOptionList) FlatMapComplex128(f func(AnyOptionOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionOptionOptionList) FlatMapAny(f func(AnyOptionOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayOptionOptionOptionList) FlatMapBool(f func(BoolArrayOptionOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayOptionOptionOptionList) FlatMapString(f func(BoolArrayOptionOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayOptionOptionOptionList) FlatMapInt(f func(BoolArrayOptionOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayOptionOptionOptionList) FlatMapInt8(f func(BoolArrayOptionOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayOptionOptionOptionList) FlatMapInt16(f func(BoolArrayOptionOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayOptionOptionOptionList) FlatMapInt32(f func(BoolArrayOptionOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayOptionOptionOptionList) FlatMapInt64(f func(BoolArrayOptionOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayOptionOptionOptionList) FlatMapUint(f func(BoolArrayOptionOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayOptionOptionOptionList) FlatMapUint8(f func(BoolArrayOptionOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayOptionOptionOptionList) FlatMapUint16(f func(BoolArrayOptionOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayOptionOptionOptionList) FlatMapUint32(f func(BoolArrayOptionOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayOptionOptionOptionList) FlatMapUint64(f func(BoolArrayOptionOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayOptionOptionOptionList) FlatMapUintptr(f func(BoolArrayOptionOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayOptionOptionOptionList) FlatMapByte(f func(BoolArrayOptionOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayOptionOptionOptionList) FlatMapRune(f func(BoolArrayOptionOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayOptionOptionOptionList) FlatMapFloat32(f func(BoolArrayOptionOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayOptionOptionOptionList) FlatMapFloat64(f func(BoolArrayOptionOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayOptionOptionOptionList) FlatMapComplex64(f func(BoolArrayOptionOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayOptionOptionOptionList) FlatMapComplex128(f func(BoolArrayOptionOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayOptionOptionOptionList) FlatMapAny(f func(BoolArrayOptionOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayOptionOptionOptionList) FlatMapBool(f func(StringArrayOptionOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayOptionOptionOptionList) FlatMapString(f func(StringArrayOptionOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayOptionOptionOptionList) FlatMapInt(f func(StringArrayOptionOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayOptionOptionOptionList) FlatMapInt8(f func(StringArrayOptionOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayOptionOptionOptionList) FlatMapInt16(f func(StringArrayOptionOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayOptionOptionOptionList) FlatMapInt32(f func(StringArrayOptionOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayOptionOptionOptionList) FlatMapInt64(f func(StringArrayOptionOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayOptionOptionOptionList) FlatMapUint(f func(StringArrayOptionOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayOptionOptionOptionList) FlatMapUint8(f func(StringArrayOptionOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayOptionOptionOptionList) FlatMapUint16(f func(StringArrayOptionOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayOptionOptionOptionList) FlatMapUint32(f func(StringArrayOptionOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayOptionOptionOptionList) FlatMapUint64(f func(StringArrayOptionOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayOptionOptionOptionList) FlatMapUintptr(f func(StringArrayOptionOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayOptionOptionOptionList) FlatMapByte(f func(StringArrayOptionOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayOptionOptionOptionList) FlatMapRune(f func(StringArrayOptionOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayOptionOptionOptionList) FlatMapFloat32(f func(StringArrayOptionOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayOptionOptionOptionList) FlatMapFloat64(f func(StringArrayOptionOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayOptionOptionOptionList) FlatMapComplex64(f func(StringArrayOptionOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayOptionOptionOptionList) FlatMapComplex128(f func(StringArrayOptionOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayOptionOptionOptionList) FlatMapAny(f func(StringArrayOptionOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayOptionOptionOptionList) FlatMapBool(f func(IntArrayOptionOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayOptionOptionOptionList) FlatMapString(f func(IntArrayOptionOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayOptionOptionOptionList) FlatMapInt(f func(IntArrayOptionOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayOptionOptionOptionList) FlatMapInt8(f func(IntArrayOptionOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayOptionOptionOptionList) FlatMapInt16(f func(IntArrayOptionOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayOptionOptionOptionList) FlatMapInt32(f func(IntArrayOptionOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayOptionOptionOptionList) FlatMapInt64(f func(IntArrayOptionOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayOptionOptionOptionList) FlatMapUint(f func(IntArrayOptionOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayOptionOptionOptionList) FlatMapUint8(f func(IntArrayOptionOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayOptionOptionOptionList) FlatMapUint16(f func(IntArrayOptionOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayOptionOptionOptionList) FlatMapUint32(f func(IntArrayOptionOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayOptionOptionOptionList) FlatMapUint64(f func(IntArrayOptionOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayOptionOptionOptionList) FlatMapUintptr(f func(IntArrayOptionOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayOptionOptionOptionList) FlatMapByte(f func(IntArrayOptionOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayOptionOptionOptionList) FlatMapRune(f func(IntArrayOptionOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayOptionOptionOptionList) FlatMapFloat32(f func(IntArrayOptionOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayOptionOptionOptionList) FlatMapFloat64(f func(IntArrayOptionOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayOptionOptionOptionList) FlatMapComplex64(f func(IntArrayOptionOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayOptionOptionOptionList) FlatMapComplex128(f func(IntArrayOptionOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayOptionOptionOptionList) FlatMapAny(f func(IntArrayOptionOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayOptionOptionOptionList) FlatMapBool(f func(Int8ArrayOptionOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayOptionOptionOptionList) FlatMapString(f func(Int8ArrayOptionOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayOptionOptionOptionList) FlatMapInt(f func(Int8ArrayOptionOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayOptionOptionOptionList) FlatMapInt8(f func(Int8ArrayOptionOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayOptionOptionOptionList) FlatMapInt16(f func(Int8ArrayOptionOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayOptionOptionOptionList) FlatMapInt32(f func(Int8ArrayOptionOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayOptionOptionOptionList) FlatMapInt64(f func(Int8ArrayOptionOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayOptionOptionOptionList) FlatMapUint(f func(Int8ArrayOptionOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayOptionOptionOptionList) FlatMapUint8(f func(Int8ArrayOptionOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayOptionOptionOptionList) FlatMapUint16(f func(Int8ArrayOptionOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayOptionOptionOptionList) FlatMapUint32(f func(Int8ArrayOptionOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayOptionOptionOptionList) FlatMapUint64(f func(Int8ArrayOptionOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayOptionOptionOptionList) FlatMapUintptr(f func(Int8ArrayOptionOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayOptionOptionOptionList) FlatMapByte(f func(Int8ArrayOptionOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayOptionOptionOptionList) FlatMapRune(f func(Int8ArrayOptionOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayOptionOptionOptionList) FlatMapFloat32(f func(Int8ArrayOptionOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayOptionOptionOptionList) FlatMapFloat64(f func(Int8ArrayOptionOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayOptionOptionOptionList) FlatMapComplex64(f func(Int8ArrayOptionOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayOptionOptionOptionList) FlatMapComplex128(f func(Int8ArrayOptionOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayOptionOptionOptionList) FlatMapAny(f func(Int8ArrayOptionOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayOptionOptionOptionList) FlatMapBool(f func(Int16ArrayOptionOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayOptionOptionOptionList) FlatMapString(f func(Int16ArrayOptionOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayOptionOptionOptionList) FlatMapInt(f func(Int16ArrayOptionOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayOptionOptionOptionList) FlatMapInt8(f func(Int16ArrayOptionOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayOptionOptionOptionList) FlatMapInt16(f func(Int16ArrayOptionOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayOptionOptionOptionList) FlatMapInt32(f func(Int16ArrayOptionOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayOptionOptionOptionList) FlatMapInt64(f func(Int16ArrayOptionOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayOptionOptionOptionList) FlatMapUint(f func(Int16ArrayOptionOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayOptionOptionOptionList) FlatMapUint8(f func(Int16ArrayOptionOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayOptionOptionOptionList) FlatMapUint16(f func(Int16ArrayOptionOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayOptionOptionOptionList) FlatMapUint32(f func(Int16ArrayOptionOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayOptionOptionOptionList) FlatMapUint64(f func(Int16ArrayOptionOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayOptionOptionOptionList) FlatMapUintptr(f func(Int16ArrayOptionOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayOptionOptionOptionList) FlatMapByte(f func(Int16ArrayOptionOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayOptionOptionOptionList) FlatMapRune(f func(Int16ArrayOptionOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayOptionOptionOptionList) FlatMapFloat32(f func(Int16ArrayOptionOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayOptionOptionOptionList) FlatMapFloat64(f func(Int16ArrayOptionOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayOptionOptionOptionList) FlatMapComplex64(f func(Int16ArrayOptionOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayOptionOptionOptionList) FlatMapComplex128(f func(Int16ArrayOptionOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayOptionOptionOptionList) FlatMapAny(f func(Int16ArrayOptionOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayOptionOptionOptionList) FlatMapBool(f func(Int32ArrayOptionOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayOptionOptionOptionList) FlatMapString(f func(Int32ArrayOptionOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayOptionOptionOptionList) FlatMapInt(f func(Int32ArrayOptionOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayOptionOptionOptionList) FlatMapInt8(f func(Int32ArrayOptionOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayOptionOptionOptionList) FlatMapInt16(f func(Int32ArrayOptionOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayOptionOptionOptionList) FlatMapInt32(f func(Int32ArrayOptionOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayOptionOptionOptionList) FlatMapInt64(f func(Int32ArrayOptionOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayOptionOptionOptionList) FlatMapUint(f func(Int32ArrayOptionOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayOptionOptionOptionList) FlatMapUint8(f func(Int32ArrayOptionOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayOptionOptionOptionList) FlatMapUint16(f func(Int32ArrayOptionOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayOptionOptionOptionList) FlatMapUint32(f func(Int32ArrayOptionOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayOptionOptionOptionList) FlatMapUint64(f func(Int32ArrayOptionOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayOptionOptionOptionList) FlatMapUintptr(f func(Int32ArrayOptionOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayOptionOptionOptionList) FlatMapByte(f func(Int32ArrayOptionOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayOptionOptionOptionList) FlatMapRune(f func(Int32ArrayOptionOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayOptionOptionOptionList) FlatMapFloat32(f func(Int32ArrayOptionOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayOptionOptionOptionList) FlatMapFloat64(f func(Int32ArrayOptionOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayOptionOptionOptionList) FlatMapComplex64(f func(Int32ArrayOptionOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayOptionOptionOptionList) FlatMapComplex128(f func(Int32ArrayOptionOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayOptionOptionOptionList) FlatMapAny(f func(Int32ArrayOptionOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayOptionOptionOptionList) FlatMapBool(f func(Int64ArrayOptionOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayOptionOptionOptionList) FlatMapString(f func(Int64ArrayOptionOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayOptionOptionOptionList) FlatMapInt(f func(Int64ArrayOptionOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayOptionOptionOptionList) FlatMapInt8(f func(Int64ArrayOptionOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayOptionOptionOptionList) FlatMapInt16(f func(Int64ArrayOptionOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayOptionOptionOptionList) FlatMapInt32(f func(Int64ArrayOptionOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayOptionOptionOptionList) FlatMapInt64(f func(Int64ArrayOptionOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayOptionOptionOptionList) FlatMapUint(f func(Int64ArrayOptionOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayOptionOptionOptionList) FlatMapUint8(f func(Int64ArrayOptionOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayOptionOptionOptionList) FlatMapUint16(f func(Int64ArrayOptionOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayOptionOptionOptionList) FlatMapUint32(f func(Int64ArrayOptionOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayOptionOptionOptionList) FlatMapUint64(f func(Int64ArrayOptionOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayOptionOptionOptionList) FlatMapUintptr(f func(Int64ArrayOptionOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayOptionOptionOptionList) FlatMapByte(f func(Int64ArrayOptionOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayOptionOptionOptionList) FlatMapRune(f func(Int64ArrayOptionOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayOptionOptionOptionList) FlatMapFloat32(f func(Int64ArrayOptionOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayOptionOptionOptionList) FlatMapFloat64(f func(Int64ArrayOptionOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayOptionOptionOptionList) FlatMapComplex64(f func(Int64ArrayOptionOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayOptionOptionOptionList) FlatMapComplex128(f func(Int64ArrayOptionOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayOptionOptionOptionList) FlatMapAny(f func(Int64ArrayOptionOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayOptionOptionOptionList) FlatMapBool(f func(UintArrayOptionOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayOptionOptionOptionList) FlatMapString(f func(UintArrayOptionOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayOptionOptionOptionList) FlatMapInt(f func(UintArrayOptionOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayOptionOptionOptionList) FlatMapInt8(f func(UintArrayOptionOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayOptionOptionOptionList) FlatMapInt16(f func(UintArrayOptionOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayOptionOptionOptionList) FlatMapInt32(f func(UintArrayOptionOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayOptionOptionOptionList) FlatMapInt64(f func(UintArrayOptionOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayOptionOptionOptionList) FlatMapUint(f func(UintArrayOptionOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayOptionOptionOptionList) FlatMapUint8(f func(UintArrayOptionOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayOptionOptionOptionList) FlatMapUint16(f func(UintArrayOptionOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayOptionOptionOptionList) FlatMapUint32(f func(UintArrayOptionOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayOptionOptionOptionList) FlatMapUint64(f func(UintArrayOptionOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayOptionOptionOptionList) FlatMapUintptr(f func(UintArrayOptionOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayOptionOptionOptionList) FlatMapByte(f func(UintArrayOptionOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayOptionOptionOptionList) FlatMapRune(f func(UintArrayOptionOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayOptionOptionOptionList) FlatMapFloat32(f func(UintArrayOptionOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayOptionOptionOptionList) FlatMapFloat64(f func(UintArrayOptionOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayOptionOptionOptionList) FlatMapComplex64(f func(UintArrayOptionOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayOptionOptionOptionList) FlatMapComplex128(f func(UintArrayOptionOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayOptionOptionOptionList) FlatMapAny(f func(UintArrayOptionOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayOptionOptionOptionList) FlatMapBool(f func(Uint8ArrayOptionOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayOptionOptionOptionList) FlatMapString(f func(Uint8ArrayOptionOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayOptionOptionOptionList) FlatMapInt(f func(Uint8ArrayOptionOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayOptionOptionOptionList) FlatMapInt8(f func(Uint8ArrayOptionOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayOptionOptionOptionList) FlatMapInt16(f func(Uint8ArrayOptionOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayOptionOptionOptionList) FlatMapInt32(f func(Uint8ArrayOptionOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayOptionOptionOptionList) FlatMapInt64(f func(Uint8ArrayOptionOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayOptionOptionOptionList) FlatMapUint(f func(Uint8ArrayOptionOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayOptionOptionOptionList) FlatMapUint8(f func(Uint8ArrayOptionOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayOptionOptionOptionList) FlatMapUint16(f func(Uint8ArrayOptionOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayOptionOptionOptionList) FlatMapUint32(f func(Uint8ArrayOptionOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayOptionOptionOptionList) FlatMapUint64(f func(Uint8ArrayOptionOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayOptionOptionOptionList) FlatMapUintptr(f func(Uint8ArrayOptionOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayOptionOptionOptionList) FlatMapByte(f func(Uint8ArrayOptionOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayOptionOptionOptionList) FlatMapRune(f func(Uint8ArrayOptionOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayOptionOptionOptionList) FlatMapFloat32(f func(Uint8ArrayOptionOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayOptionOptionOptionList) FlatMapFloat64(f func(Uint8ArrayOptionOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayOptionOptionOptionList) FlatMapComplex64(f func(Uint8ArrayOptionOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayOptionOptionOptionList) FlatMapComplex128(f func(Uint8ArrayOptionOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayOptionOptionOptionList) FlatMapAny(f func(Uint8ArrayOptionOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayOptionOptionOptionList) FlatMapBool(f func(Uint16ArrayOptionOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayOptionOptionOptionList) FlatMapString(f func(Uint16ArrayOptionOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayOptionOptionOptionList) FlatMapInt(f func(Uint16ArrayOptionOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayOptionOptionOptionList) FlatMapInt8(f func(Uint16ArrayOptionOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayOptionOptionOptionList) FlatMapInt16(f func(Uint16ArrayOptionOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayOptionOptionOptionList) FlatMapInt32(f func(Uint16ArrayOptionOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayOptionOptionOptionList) FlatMapInt64(f func(Uint16ArrayOptionOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayOptionOptionOptionList) FlatMapUint(f func(Uint16ArrayOptionOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayOptionOptionOptionList) FlatMapUint8(f func(Uint16ArrayOptionOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayOptionOptionOptionList) FlatMapUint16(f func(Uint16ArrayOptionOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayOptionOptionOptionList) FlatMapUint32(f func(Uint16ArrayOptionOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayOptionOptionOptionList) FlatMapUint64(f func(Uint16ArrayOptionOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayOptionOptionOptionList) FlatMapUintptr(f func(Uint16ArrayOptionOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayOptionOptionOptionList) FlatMapByte(f func(Uint16ArrayOptionOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayOptionOptionOptionList) FlatMapRune(f func(Uint16ArrayOptionOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayOptionOptionOptionList) FlatMapFloat32(f func(Uint16ArrayOptionOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayOptionOptionOptionList) FlatMapFloat64(f func(Uint16ArrayOptionOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayOptionOptionOptionList) FlatMapComplex64(f func(Uint16ArrayOptionOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayOptionOptionOptionList) FlatMapComplex128(f func(Uint16ArrayOptionOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayOptionOptionOptionList) FlatMapAny(f func(Uint16ArrayOptionOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayOptionOptionOptionList) FlatMapBool(f func(Uint32ArrayOptionOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayOptionOptionOptionList) FlatMapString(f func(Uint32ArrayOptionOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayOptionOptionOptionList) FlatMapInt(f func(Uint32ArrayOptionOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayOptionOptionOptionList) FlatMapInt8(f func(Uint32ArrayOptionOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayOptionOptionOptionList) FlatMapInt16(f func(Uint32ArrayOptionOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayOptionOptionOptionList) FlatMapInt32(f func(Uint32ArrayOptionOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayOptionOptionOptionList) FlatMapInt64(f func(Uint32ArrayOptionOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayOptionOptionOptionList) FlatMapUint(f func(Uint32ArrayOptionOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayOptionOptionOptionList) FlatMapUint8(f func(Uint32ArrayOptionOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayOptionOptionOptionList) FlatMapUint16(f func(Uint32ArrayOptionOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayOptionOptionOptionList) FlatMapUint32(f func(Uint32ArrayOptionOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayOptionOptionOptionList) FlatMapUint64(f func(Uint32ArrayOptionOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayOptionOptionOptionList) FlatMapUintptr(f func(Uint32ArrayOptionOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayOptionOptionOptionList) FlatMapByte(f func(Uint32ArrayOptionOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayOptionOptionOptionList) FlatMapRune(f func(Uint32ArrayOptionOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayOptionOptionOptionList) FlatMapFloat32(f func(Uint32ArrayOptionOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayOptionOptionOptionList) FlatMapFloat64(f func(Uint32ArrayOptionOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayOptionOptionOptionList) FlatMapComplex64(f func(Uint32ArrayOptionOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayOptionOptionOptionList) FlatMapComplex128(f func(Uint32ArrayOptionOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayOptionOptionOptionList) FlatMapAny(f func(Uint32ArrayOptionOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayOptionOptionOptionList) FlatMapBool(f func(Uint64ArrayOptionOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayOptionOptionOptionList) FlatMapString(f func(Uint64ArrayOptionOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayOptionOptionOptionList) FlatMapInt(f func(Uint64ArrayOptionOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayOptionOptionOptionList) FlatMapInt8(f func(Uint64ArrayOptionOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayOptionOptionOptionList) FlatMapInt16(f func(Uint64ArrayOptionOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayOptionOptionOptionList) FlatMapInt32(f func(Uint64ArrayOptionOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayOptionOptionOptionList) FlatMapInt64(f func(Uint64ArrayOptionOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayOptionOptionOptionList) FlatMapUint(f func(Uint64ArrayOptionOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayOptionOptionOptionList) FlatMapUint8(f func(Uint64ArrayOptionOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayOptionOptionOptionList) FlatMapUint16(f func(Uint64ArrayOptionOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayOptionOptionOptionList) FlatMapUint32(f func(Uint64ArrayOptionOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayOptionOptionOptionList) FlatMapUint64(f func(Uint64ArrayOptionOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayOptionOptionOptionList) FlatMapUintptr(f func(Uint64ArrayOptionOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayOptionOptionOptionList) FlatMapByte(f func(Uint64ArrayOptionOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayOptionOptionOptionList) FlatMapRune(f func(Uint64ArrayOptionOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayOptionOptionOptionList) FlatMapFloat32(f func(Uint64ArrayOptionOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayOptionOptionOptionList) FlatMapFloat64(f func(Uint64ArrayOptionOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayOptionOptionOptionList) FlatMapComplex64(f func(Uint64ArrayOptionOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayOptionOptionOptionList) FlatMapComplex128(f func(Uint64ArrayOptionOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayOptionOptionOptionList) FlatMapAny(f func(Uint64ArrayOptionOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayOptionOptionOptionList) FlatMapBool(f func(UintptrArrayOptionOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayOptionOptionOptionList) FlatMapString(f func(UintptrArrayOptionOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayOptionOptionOptionList) FlatMapInt(f func(UintptrArrayOptionOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayOptionOptionOptionList) FlatMapInt8(f func(UintptrArrayOptionOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayOptionOptionOptionList) FlatMapInt16(f func(UintptrArrayOptionOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayOptionOptionOptionList) FlatMapInt32(f func(UintptrArrayOptionOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayOptionOptionOptionList) FlatMapInt64(f func(UintptrArrayOptionOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayOptionOptionOptionList) FlatMapUint(f func(UintptrArrayOptionOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayOptionOptionOptionList) FlatMapUint8(f func(UintptrArrayOptionOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayOptionOptionOptionList) FlatMapUint16(f func(UintptrArrayOptionOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayOptionOptionOptionList) FlatMapUint32(f func(UintptrArrayOptionOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayOptionOptionOptionList) FlatMapUint64(f func(UintptrArrayOptionOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayOptionOptionOptionList) FlatMapUintptr(f func(UintptrArrayOptionOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayOptionOptionOptionList) FlatMapByte(f func(UintptrArrayOptionOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayOptionOptionOptionList) FlatMapRune(f func(UintptrArrayOptionOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayOptionOptionOptionList) FlatMapFloat32(f func(UintptrArrayOptionOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayOptionOptionOptionList) FlatMapFloat64(f func(UintptrArrayOptionOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayOptionOptionOptionList) FlatMapComplex64(f func(UintptrArrayOptionOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayOptionOptionOptionList) FlatMapComplex128(f func(UintptrArrayOptionOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayOptionOptionOptionList) FlatMapAny(f func(UintptrArrayOptionOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayOptionOptionOptionList) FlatMapBool(f func(ByteArrayOptionOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayOptionOptionOptionList) FlatMapString(f func(ByteArrayOptionOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayOptionOptionOptionList) FlatMapInt(f func(ByteArrayOptionOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayOptionOptionOptionList) FlatMapInt8(f func(ByteArrayOptionOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayOptionOptionOptionList) FlatMapInt16(f func(ByteArrayOptionOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayOptionOptionOptionList) FlatMapInt32(f func(ByteArrayOptionOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayOptionOptionOptionList) FlatMapInt64(f func(ByteArrayOptionOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayOptionOptionOptionList) FlatMapUint(f func(ByteArrayOptionOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayOptionOptionOptionList) FlatMapUint8(f func(ByteArrayOptionOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayOptionOptionOptionList) FlatMapUint16(f func(ByteArrayOptionOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayOptionOptionOptionList) FlatMapUint32(f func(ByteArrayOptionOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayOptionOptionOptionList) FlatMapUint64(f func(ByteArrayOptionOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayOptionOptionOptionList) FlatMapUintptr(f func(ByteArrayOptionOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayOptionOptionOptionList) FlatMapByte(f func(ByteArrayOptionOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayOptionOptionOptionList) FlatMapRune(f func(ByteArrayOptionOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayOptionOptionOptionList) FlatMapFloat32(f func(ByteArrayOptionOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayOptionOptionOptionList) FlatMapFloat64(f func(ByteArrayOptionOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayOptionOptionOptionList) FlatMapComplex64(f func(ByteArrayOptionOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayOptionOptionOptionList) FlatMapComplex128(f func(ByteArrayOptionOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayOptionOptionOptionList) FlatMapAny(f func(ByteArrayOptionOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayOptionOptionOptionList) FlatMapBool(f func(RuneArrayOptionOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayOptionOptionOptionList) FlatMapString(f func(RuneArrayOptionOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayOptionOptionOptionList) FlatMapInt(f func(RuneArrayOptionOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayOptionOptionOptionList) FlatMapInt8(f func(RuneArrayOptionOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayOptionOptionOptionList) FlatMapInt16(f func(RuneArrayOptionOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayOptionOptionOptionList) FlatMapInt32(f func(RuneArrayOptionOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayOptionOptionOptionList) FlatMapInt64(f func(RuneArrayOptionOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayOptionOptionOptionList) FlatMapUint(f func(RuneArrayOptionOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayOptionOptionOptionList) FlatMapUint8(f func(RuneArrayOptionOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayOptionOptionOptionList) FlatMapUint16(f func(RuneArrayOptionOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayOptionOptionOptionList) FlatMapUint32(f func(RuneArrayOptionOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayOptionOptionOptionList) FlatMapUint64(f func(RuneArrayOptionOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayOptionOptionOptionList) FlatMapUintptr(f func(RuneArrayOptionOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayOptionOptionOptionList) FlatMapByte(f func(RuneArrayOptionOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayOptionOptionOptionList) FlatMapRune(f func(RuneArrayOptionOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayOptionOptionOptionList) FlatMapFloat32(f func(RuneArrayOptionOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayOptionOptionOptionList) FlatMapFloat64(f func(RuneArrayOptionOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayOptionOptionOptionList) FlatMapComplex64(f func(RuneArrayOptionOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayOptionOptionOptionList) FlatMapComplex128(f func(RuneArrayOptionOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayOptionOptionOptionList) FlatMapAny(f func(RuneArrayOptionOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayOptionOptionOptionList) FlatMapBool(f func(Float32ArrayOptionOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayOptionOptionOptionList) FlatMapString(f func(Float32ArrayOptionOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayOptionOptionOptionList) FlatMapInt(f func(Float32ArrayOptionOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayOptionOptionOptionList) FlatMapInt8(f func(Float32ArrayOptionOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayOptionOptionOptionList) FlatMapInt16(f func(Float32ArrayOptionOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayOptionOptionOptionList) FlatMapInt32(f func(Float32ArrayOptionOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayOptionOptionOptionList) FlatMapInt64(f func(Float32ArrayOptionOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayOptionOptionOptionList) FlatMapUint(f func(Float32ArrayOptionOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayOptionOptionOptionList) FlatMapUint8(f func(Float32ArrayOptionOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayOptionOptionOptionList) FlatMapUint16(f func(Float32ArrayOptionOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayOptionOptionOptionList) FlatMapUint32(f func(Float32ArrayOptionOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayOptionOptionOptionList) FlatMapUint64(f func(Float32ArrayOptionOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayOptionOptionOptionList) FlatMapUintptr(f func(Float32ArrayOptionOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayOptionOptionOptionList) FlatMapByte(f func(Float32ArrayOptionOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayOptionOptionOptionList) FlatMapRune(f func(Float32ArrayOptionOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayOptionOptionOptionList) FlatMapFloat32(f func(Float32ArrayOptionOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayOptionOptionOptionList) FlatMapFloat64(f func(Float32ArrayOptionOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayOptionOptionOptionList) FlatMapComplex64(f func(Float32ArrayOptionOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayOptionOptionOptionList) FlatMapComplex128(f func(Float32ArrayOptionOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayOptionOptionOptionList) FlatMapAny(f func(Float32ArrayOptionOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayOptionOptionOptionList) FlatMapBool(f func(Float64ArrayOptionOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayOptionOptionOptionList) FlatMapString(f func(Float64ArrayOptionOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayOptionOptionOptionList) FlatMapInt(f func(Float64ArrayOptionOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayOptionOptionOptionList) FlatMapInt8(f func(Float64ArrayOptionOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayOptionOptionOptionList) FlatMapInt16(f func(Float64ArrayOptionOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayOptionOptionOptionList) FlatMapInt32(f func(Float64ArrayOptionOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayOptionOptionOptionList) FlatMapInt64(f func(Float64ArrayOptionOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayOptionOptionOptionList) FlatMapUint(f func(Float64ArrayOptionOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayOptionOptionOptionList) FlatMapUint8(f func(Float64ArrayOptionOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayOptionOptionOptionList) FlatMapUint16(f func(Float64ArrayOptionOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayOptionOptionOptionList) FlatMapUint32(f func(Float64ArrayOptionOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayOptionOptionOptionList) FlatMapUint64(f func(Float64ArrayOptionOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayOptionOptionOptionList) FlatMapUintptr(f func(Float64ArrayOptionOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayOptionOptionOptionList) FlatMapByte(f func(Float64ArrayOptionOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayOptionOptionOptionList) FlatMapRune(f func(Float64ArrayOptionOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayOptionOptionOptionList) FlatMapFloat32(f func(Float64ArrayOptionOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayOptionOptionOptionList) FlatMapFloat64(f func(Float64ArrayOptionOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayOptionOptionOptionList) FlatMapComplex64(f func(Float64ArrayOptionOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayOptionOptionOptionList) FlatMapComplex128(f func(Float64ArrayOptionOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayOptionOptionOptionList) FlatMapAny(f func(Float64ArrayOptionOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayOptionOptionOptionList) FlatMapBool(f func(Complex64ArrayOptionOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayOptionOptionOptionList) FlatMapString(f func(Complex64ArrayOptionOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayOptionOptionOptionList) FlatMapInt(f func(Complex64ArrayOptionOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayOptionOptionOptionList) FlatMapInt8(f func(Complex64ArrayOptionOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayOptionOptionOptionList) FlatMapInt16(f func(Complex64ArrayOptionOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayOptionOptionOptionList) FlatMapInt32(f func(Complex64ArrayOptionOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayOptionOptionOptionList) FlatMapInt64(f func(Complex64ArrayOptionOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayOptionOptionOptionList) FlatMapUint(f func(Complex64ArrayOptionOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayOptionOptionOptionList) FlatMapUint8(f func(Complex64ArrayOptionOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayOptionOptionOptionList) FlatMapUint16(f func(Complex64ArrayOptionOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayOptionOptionOptionList) FlatMapUint32(f func(Complex64ArrayOptionOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayOptionOptionOptionList) FlatMapUint64(f func(Complex64ArrayOptionOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayOptionOptionOptionList) FlatMapUintptr(f func(Complex64ArrayOptionOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayOptionOptionOptionList) FlatMapByte(f func(Complex64ArrayOptionOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayOptionOptionOptionList) FlatMapRune(f func(Complex64ArrayOptionOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayOptionOptionOptionList) FlatMapFloat32(f func(Complex64ArrayOptionOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayOptionOptionOptionList) FlatMapFloat64(f func(Complex64ArrayOptionOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayOptionOptionOptionList) FlatMapComplex64(f func(Complex64ArrayOptionOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayOptionOptionOptionList) FlatMapComplex128(f func(Complex64ArrayOptionOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayOptionOptionOptionList) FlatMapAny(f func(Complex64ArrayOptionOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayOptionOptionOptionList) FlatMapBool(f func(Complex128ArrayOptionOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayOptionOptionOptionList) FlatMapString(f func(Complex128ArrayOptionOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayOptionOptionOptionList) FlatMapInt(f func(Complex128ArrayOptionOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayOptionOptionOptionList) FlatMapInt8(f func(Complex128ArrayOptionOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayOptionOptionOptionList) FlatMapInt16(f func(Complex128ArrayOptionOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayOptionOptionOptionList) FlatMapInt32(f func(Complex128ArrayOptionOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayOptionOptionOptionList) FlatMapInt64(f func(Complex128ArrayOptionOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayOptionOptionOptionList) FlatMapUint(f func(Complex128ArrayOptionOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayOptionOptionOptionList) FlatMapUint8(f func(Complex128ArrayOptionOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayOptionOptionOptionList) FlatMapUint16(f func(Complex128ArrayOptionOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayOptionOptionOptionList) FlatMapUint32(f func(Complex128ArrayOptionOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayOptionOptionOptionList) FlatMapUint64(f func(Complex128ArrayOptionOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayOptionOptionOptionList) FlatMapUintptr(f func(Complex128ArrayOptionOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayOptionOptionOptionList) FlatMapByte(f func(Complex128ArrayOptionOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayOptionOptionOptionList) FlatMapRune(f func(Complex128ArrayOptionOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayOptionOptionOptionList) FlatMapFloat32(f func(Complex128ArrayOptionOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayOptionOptionOptionList) FlatMapFloat64(f func(Complex128ArrayOptionOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayOptionOptionOptionList) FlatMapComplex64(f func(Complex128ArrayOptionOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayOptionOptionOptionList) FlatMapComplex128(f func(Complex128ArrayOptionOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayOptionOptionOptionList) FlatMapAny(f func(Complex128ArrayOptionOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayOptionOptionOptionList) FlatMapBool(f func(AnyArrayOptionOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayOptionOptionOptionList) FlatMapString(f func(AnyArrayOptionOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayOptionOptionOptionList) FlatMapInt(f func(AnyArrayOptionOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayOptionOptionOptionList) FlatMapInt8(f func(AnyArrayOptionOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayOptionOptionOptionList) FlatMapInt16(f func(AnyArrayOptionOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayOptionOptionOptionList) FlatMapInt32(f func(AnyArrayOptionOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayOptionOptionOptionList) FlatMapInt64(f func(AnyArrayOptionOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayOptionOptionOptionList) FlatMapUint(f func(AnyArrayOptionOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayOptionOptionOptionList) FlatMapUint8(f func(AnyArrayOptionOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayOptionOptionOptionList) FlatMapUint16(f func(AnyArrayOptionOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayOptionOptionOptionList) FlatMapUint32(f func(AnyArrayOptionOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayOptionOptionOptionList) FlatMapUint64(f func(AnyArrayOptionOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayOptionOptionOptionList) FlatMapUintptr(f func(AnyArrayOptionOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayOptionOptionOptionList) FlatMapByte(f func(AnyArrayOptionOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayOptionOptionOptionList) FlatMapRune(f func(AnyArrayOptionOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayOptionOptionOptionList) FlatMapFloat32(f func(AnyArrayOptionOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayOptionOptionOptionList) FlatMapFloat64(f func(AnyArrayOptionOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayOptionOptionOptionList) FlatMapComplex64(f func(AnyArrayOptionOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayOptionOptionOptionList) FlatMapComplex128(f func(AnyArrayOptionOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayOptionOptionOptionList) FlatMapAny(f func(AnyArrayOptionOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayArrayOptionOptionOptionList) FlatMapBool(f func(BoolArrayArrayOptionOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayArrayOptionOptionOptionList) FlatMapString(f func(BoolArrayArrayOptionOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayArrayOptionOptionOptionList) FlatMapInt(f func(BoolArrayArrayOptionOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayArrayOptionOptionOptionList) FlatMapInt8(f func(BoolArrayArrayOptionOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayArrayOptionOptionOptionList) FlatMapInt16(f func(BoolArrayArrayOptionOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayArrayOptionOptionOptionList) FlatMapInt32(f func(BoolArrayArrayOptionOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayArrayOptionOptionOptionList) FlatMapInt64(f func(BoolArrayArrayOptionOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayArrayOptionOptionOptionList) FlatMapUint(f func(BoolArrayArrayOptionOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayArrayOptionOptionOptionList) FlatMapUint8(f func(BoolArrayArrayOptionOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayArrayOptionOptionOptionList) FlatMapUint16(f func(BoolArrayArrayOptionOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayArrayOptionOptionOptionList) FlatMapUint32(f func(BoolArrayArrayOptionOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayArrayOptionOptionOptionList) FlatMapUint64(f func(BoolArrayArrayOptionOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayArrayOptionOptionOptionList) FlatMapUintptr(f func(BoolArrayArrayOptionOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayArrayOptionOptionOptionList) FlatMapByte(f func(BoolArrayArrayOptionOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayArrayOptionOptionOptionList) FlatMapRune(f func(BoolArrayArrayOptionOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayArrayOptionOptionOptionList) FlatMapFloat32(f func(BoolArrayArrayOptionOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayArrayOptionOptionOptionList) FlatMapFloat64(f func(BoolArrayArrayOptionOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayArrayOptionOptionOptionList) FlatMapComplex64(f func(BoolArrayArrayOptionOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayArrayOptionOptionOptionList) FlatMapComplex128(f func(BoolArrayArrayOptionOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayArrayOptionOptionOptionList) FlatMapAny(f func(BoolArrayArrayOptionOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayArrayOptionOptionOptionList) FlatMapBool(f func(StringArrayArrayOptionOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayArrayOptionOptionOptionList) FlatMapString(f func(StringArrayArrayOptionOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayArrayOptionOptionOptionList) FlatMapInt(f func(StringArrayArrayOptionOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayArrayOptionOptionOptionList) FlatMapInt8(f func(StringArrayArrayOptionOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayArrayOptionOptionOptionList) FlatMapInt16(f func(StringArrayArrayOptionOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayArrayOptionOptionOptionList) FlatMapInt32(f func(StringArrayArrayOptionOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayArrayOptionOptionOptionList) FlatMapInt64(f func(StringArrayArrayOptionOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayArrayOptionOptionOptionList) FlatMapUint(f func(StringArrayArrayOptionOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayArrayOptionOptionOptionList) FlatMapUint8(f func(StringArrayArrayOptionOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayArrayOptionOptionOptionList) FlatMapUint16(f func(StringArrayArrayOptionOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayArrayOptionOptionOptionList) FlatMapUint32(f func(StringArrayArrayOptionOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayArrayOptionOptionOptionList) FlatMapUint64(f func(StringArrayArrayOptionOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayArrayOptionOptionOptionList) FlatMapUintptr(f func(StringArrayArrayOptionOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayArrayOptionOptionOptionList) FlatMapByte(f func(StringArrayArrayOptionOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayArrayOptionOptionOptionList) FlatMapRune(f func(StringArrayArrayOptionOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayArrayOptionOptionOptionList) FlatMapFloat32(f func(StringArrayArrayOptionOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayArrayOptionOptionOptionList) FlatMapFloat64(f func(StringArrayArrayOptionOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayArrayOptionOptionOptionList) FlatMapComplex64(f func(StringArrayArrayOptionOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayArrayOptionOptionOptionList) FlatMapComplex128(f func(StringArrayArrayOptionOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayArrayOptionOptionOptionList) FlatMapAny(f func(StringArrayArrayOptionOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayArrayOptionOptionOptionList) FlatMapBool(f func(IntArrayArrayOptionOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayArrayOptionOptionOptionList) FlatMapString(f func(IntArrayArrayOptionOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayArrayOptionOptionOptionList) FlatMapInt(f func(IntArrayArrayOptionOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayArrayOptionOptionOptionList) FlatMapInt8(f func(IntArrayArrayOptionOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayArrayOptionOptionOptionList) FlatMapInt16(f func(IntArrayArrayOptionOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayArrayOptionOptionOptionList) FlatMapInt32(f func(IntArrayArrayOptionOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayArrayOptionOptionOptionList) FlatMapInt64(f func(IntArrayArrayOptionOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayArrayOptionOptionOptionList) FlatMapUint(f func(IntArrayArrayOptionOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayArrayOptionOptionOptionList) FlatMapUint8(f func(IntArrayArrayOptionOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayArrayOptionOptionOptionList) FlatMapUint16(f func(IntArrayArrayOptionOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayArrayOptionOptionOptionList) FlatMapUint32(f func(IntArrayArrayOptionOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayArrayOptionOptionOptionList) FlatMapUint64(f func(IntArrayArrayOptionOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayArrayOptionOptionOptionList) FlatMapUintptr(f func(IntArrayArrayOptionOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayArrayOptionOptionOptionList) FlatMapByte(f func(IntArrayArrayOptionOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayArrayOptionOptionOptionList) FlatMapRune(f func(IntArrayArrayOptionOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayArrayOptionOptionOptionList) FlatMapFloat32(f func(IntArrayArrayOptionOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayArrayOptionOptionOptionList) FlatMapFloat64(f func(IntArrayArrayOptionOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayArrayOptionOptionOptionList) FlatMapComplex64(f func(IntArrayArrayOptionOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayArrayOptionOptionOptionList) FlatMapComplex128(f func(IntArrayArrayOptionOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayArrayOptionOptionOptionList) FlatMapAny(f func(IntArrayArrayOptionOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayArrayOptionOptionOptionList) FlatMapBool(f func(Int8ArrayArrayOptionOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayArrayOptionOptionOptionList) FlatMapString(f func(Int8ArrayArrayOptionOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayArrayOptionOptionOptionList) FlatMapInt(f func(Int8ArrayArrayOptionOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayArrayOptionOptionOptionList) FlatMapInt8(f func(Int8ArrayArrayOptionOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayArrayOptionOptionOptionList) FlatMapInt16(f func(Int8ArrayArrayOptionOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayArrayOptionOptionOptionList) FlatMapInt32(f func(Int8ArrayArrayOptionOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayArrayOptionOptionOptionList) FlatMapInt64(f func(Int8ArrayArrayOptionOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayArrayOptionOptionOptionList) FlatMapUint(f func(Int8ArrayArrayOptionOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayArrayOptionOptionOptionList) FlatMapUint8(f func(Int8ArrayArrayOptionOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayArrayOptionOptionOptionList) FlatMapUint16(f func(Int8ArrayArrayOptionOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayArrayOptionOptionOptionList) FlatMapUint32(f func(Int8ArrayArrayOptionOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayArrayOptionOptionOptionList) FlatMapUint64(f func(Int8ArrayArrayOptionOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayArrayOptionOptionOptionList) FlatMapUintptr(f func(Int8ArrayArrayOptionOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayArrayOptionOptionOptionList) FlatMapByte(f func(Int8ArrayArrayOptionOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayArrayOptionOptionOptionList) FlatMapRune(f func(Int8ArrayArrayOptionOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayArrayOptionOptionOptionList) FlatMapFloat32(f func(Int8ArrayArrayOptionOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayArrayOptionOptionOptionList) FlatMapFloat64(f func(Int8ArrayArrayOptionOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayArrayOptionOptionOptionList) FlatMapComplex64(f func(Int8ArrayArrayOptionOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayArrayOptionOptionOptionList) FlatMapComplex128(f func(Int8ArrayArrayOptionOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayArrayOptionOptionOptionList) FlatMapAny(f func(Int8ArrayArrayOptionOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayArrayOptionOptionOptionList) FlatMapBool(f func(Int16ArrayArrayOptionOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayArrayOptionOptionOptionList) FlatMapString(f func(Int16ArrayArrayOptionOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayArrayOptionOptionOptionList) FlatMapInt(f func(Int16ArrayArrayOptionOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayArrayOptionOptionOptionList) FlatMapInt8(f func(Int16ArrayArrayOptionOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayArrayOptionOptionOptionList) FlatMapInt16(f func(Int16ArrayArrayOptionOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayArrayOptionOptionOptionList) FlatMapInt32(f func(Int16ArrayArrayOptionOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayArrayOptionOptionOptionList) FlatMapInt64(f func(Int16ArrayArrayOptionOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayArrayOptionOptionOptionList) FlatMapUint(f func(Int16ArrayArrayOptionOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayArrayOptionOptionOptionList) FlatMapUint8(f func(Int16ArrayArrayOptionOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayArrayOptionOptionOptionList) FlatMapUint16(f func(Int16ArrayArrayOptionOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayArrayOptionOptionOptionList) FlatMapUint32(f func(Int16ArrayArrayOptionOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayArrayOptionOptionOptionList) FlatMapUint64(f func(Int16ArrayArrayOptionOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayArrayOptionOptionOptionList) FlatMapUintptr(f func(Int16ArrayArrayOptionOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayArrayOptionOptionOptionList) FlatMapByte(f func(Int16ArrayArrayOptionOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayArrayOptionOptionOptionList) FlatMapRune(f func(Int16ArrayArrayOptionOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayArrayOptionOptionOptionList) FlatMapFloat32(f func(Int16ArrayArrayOptionOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayArrayOptionOptionOptionList) FlatMapFloat64(f func(Int16ArrayArrayOptionOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayArrayOptionOptionOptionList) FlatMapComplex64(f func(Int16ArrayArrayOptionOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayArrayOptionOptionOptionList) FlatMapComplex128(f func(Int16ArrayArrayOptionOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayArrayOptionOptionOptionList) FlatMapAny(f func(Int16ArrayArrayOptionOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayArrayOptionOptionOptionList) FlatMapBool(f func(Int32ArrayArrayOptionOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayArrayOptionOptionOptionList) FlatMapString(f func(Int32ArrayArrayOptionOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayArrayOptionOptionOptionList) FlatMapInt(f func(Int32ArrayArrayOptionOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayArrayOptionOptionOptionList) FlatMapInt8(f func(Int32ArrayArrayOptionOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayArrayOptionOptionOptionList) FlatMapInt16(f func(Int32ArrayArrayOptionOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayArrayOptionOptionOptionList) FlatMapInt32(f func(Int32ArrayArrayOptionOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayArrayOptionOptionOptionList) FlatMapInt64(f func(Int32ArrayArrayOptionOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayArrayOptionOptionOptionList) FlatMapUint(f func(Int32ArrayArrayOptionOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayArrayOptionOptionOptionList) FlatMapUint8(f func(Int32ArrayArrayOptionOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayArrayOptionOptionOptionList) FlatMapUint16(f func(Int32ArrayArrayOptionOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayArrayOptionOptionOptionList) FlatMapUint32(f func(Int32ArrayArrayOptionOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayArrayOptionOptionOptionList) FlatMapUint64(f func(Int32ArrayArrayOptionOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayArrayOptionOptionOptionList) FlatMapUintptr(f func(Int32ArrayArrayOptionOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayArrayOptionOptionOptionList) FlatMapByte(f func(Int32ArrayArrayOptionOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayArrayOptionOptionOptionList) FlatMapRune(f func(Int32ArrayArrayOptionOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayArrayOptionOptionOptionList) FlatMapFloat32(f func(Int32ArrayArrayOptionOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayArrayOptionOptionOptionList) FlatMapFloat64(f func(Int32ArrayArrayOptionOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayArrayOptionOptionOptionList) FlatMapComplex64(f func(Int32ArrayArrayOptionOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayArrayOptionOptionOptionList) FlatMapComplex128(f func(Int32ArrayArrayOptionOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayArrayOptionOptionOptionList) FlatMapAny(f func(Int32ArrayArrayOptionOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayArrayOptionOptionOptionList) FlatMapBool(f func(Int64ArrayArrayOptionOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayArrayOptionOptionOptionList) FlatMapString(f func(Int64ArrayArrayOptionOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayArrayOptionOptionOptionList) FlatMapInt(f func(Int64ArrayArrayOptionOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayArrayOptionOptionOptionList) FlatMapInt8(f func(Int64ArrayArrayOptionOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayArrayOptionOptionOptionList) FlatMapInt16(f func(Int64ArrayArrayOptionOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayArrayOptionOptionOptionList) FlatMapInt32(f func(Int64ArrayArrayOptionOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayArrayOptionOptionOptionList) FlatMapInt64(f func(Int64ArrayArrayOptionOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayArrayOptionOptionOptionList) FlatMapUint(f func(Int64ArrayArrayOptionOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayArrayOptionOptionOptionList) FlatMapUint8(f func(Int64ArrayArrayOptionOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayArrayOptionOptionOptionList) FlatMapUint16(f func(Int64ArrayArrayOptionOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayArrayOptionOptionOptionList) FlatMapUint32(f func(Int64ArrayArrayOptionOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayArrayOptionOptionOptionList) FlatMapUint64(f func(Int64ArrayArrayOptionOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayArrayOptionOptionOptionList) FlatMapUintptr(f func(Int64ArrayArrayOptionOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayArrayOptionOptionOptionList) FlatMapByte(f func(Int64ArrayArrayOptionOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayArrayOptionOptionOptionList) FlatMapRune(f func(Int64ArrayArrayOptionOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayArrayOptionOptionOptionList) FlatMapFloat32(f func(Int64ArrayArrayOptionOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayArrayOptionOptionOptionList) FlatMapFloat64(f func(Int64ArrayArrayOptionOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayArrayOptionOptionOptionList) FlatMapComplex64(f func(Int64ArrayArrayOptionOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayArrayOptionOptionOptionList) FlatMapComplex128(f func(Int64ArrayArrayOptionOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayArrayOptionOptionOptionList) FlatMapAny(f func(Int64ArrayArrayOptionOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayArrayOptionOptionOptionList) FlatMapBool(f func(UintArrayArrayOptionOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayArrayOptionOptionOptionList) FlatMapString(f func(UintArrayArrayOptionOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayArrayOptionOptionOptionList) FlatMapInt(f func(UintArrayArrayOptionOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayArrayOptionOptionOptionList) FlatMapInt8(f func(UintArrayArrayOptionOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayArrayOptionOptionOptionList) FlatMapInt16(f func(UintArrayArrayOptionOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayArrayOptionOptionOptionList) FlatMapInt32(f func(UintArrayArrayOptionOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayArrayOptionOptionOptionList) FlatMapInt64(f func(UintArrayArrayOptionOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayArrayOptionOptionOptionList) FlatMapUint(f func(UintArrayArrayOptionOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayArrayOptionOptionOptionList) FlatMapUint8(f func(UintArrayArrayOptionOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayArrayOptionOptionOptionList) FlatMapUint16(f func(UintArrayArrayOptionOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayArrayOptionOptionOptionList) FlatMapUint32(f func(UintArrayArrayOptionOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayArrayOptionOptionOptionList) FlatMapUint64(f func(UintArrayArrayOptionOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayArrayOptionOptionOptionList) FlatMapUintptr(f func(UintArrayArrayOptionOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayArrayOptionOptionOptionList) FlatMapByte(f func(UintArrayArrayOptionOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayArrayOptionOptionOptionList) FlatMapRune(f func(UintArrayArrayOptionOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayArrayOptionOptionOptionList) FlatMapFloat32(f func(UintArrayArrayOptionOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayArrayOptionOptionOptionList) FlatMapFloat64(f func(UintArrayArrayOptionOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayArrayOptionOptionOptionList) FlatMapComplex64(f func(UintArrayArrayOptionOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayArrayOptionOptionOptionList) FlatMapComplex128(f func(UintArrayArrayOptionOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayArrayOptionOptionOptionList) FlatMapAny(f func(UintArrayArrayOptionOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayArrayOptionOptionOptionList) FlatMapBool(f func(Uint8ArrayArrayOptionOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayArrayOptionOptionOptionList) FlatMapString(f func(Uint8ArrayArrayOptionOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayArrayOptionOptionOptionList) FlatMapInt(f func(Uint8ArrayArrayOptionOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayArrayOptionOptionOptionList) FlatMapInt8(f func(Uint8ArrayArrayOptionOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayArrayOptionOptionOptionList) FlatMapInt16(f func(Uint8ArrayArrayOptionOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayArrayOptionOptionOptionList) FlatMapInt32(f func(Uint8ArrayArrayOptionOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayArrayOptionOptionOptionList) FlatMapInt64(f func(Uint8ArrayArrayOptionOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayArrayOptionOptionOptionList) FlatMapUint(f func(Uint8ArrayArrayOptionOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayArrayOptionOptionOptionList) FlatMapUint8(f func(Uint8ArrayArrayOptionOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayArrayOptionOptionOptionList) FlatMapUint16(f func(Uint8ArrayArrayOptionOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayArrayOptionOptionOptionList) FlatMapUint32(f func(Uint8ArrayArrayOptionOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayArrayOptionOptionOptionList) FlatMapUint64(f func(Uint8ArrayArrayOptionOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayArrayOptionOptionOptionList) FlatMapUintptr(f func(Uint8ArrayArrayOptionOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayArrayOptionOptionOptionList) FlatMapByte(f func(Uint8ArrayArrayOptionOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayArrayOptionOptionOptionList) FlatMapRune(f func(Uint8ArrayArrayOptionOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayArrayOptionOptionOptionList) FlatMapFloat32(f func(Uint8ArrayArrayOptionOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayArrayOptionOptionOptionList) FlatMapFloat64(f func(Uint8ArrayArrayOptionOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayArrayOptionOptionOptionList) FlatMapComplex64(f func(Uint8ArrayArrayOptionOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayArrayOptionOptionOptionList) FlatMapComplex128(f func(Uint8ArrayArrayOptionOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayArrayOptionOptionOptionList) FlatMapAny(f func(Uint8ArrayArrayOptionOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayArrayOptionOptionOptionList) FlatMapBool(f func(Uint16ArrayArrayOptionOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayArrayOptionOptionOptionList) FlatMapString(f func(Uint16ArrayArrayOptionOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayArrayOptionOptionOptionList) FlatMapInt(f func(Uint16ArrayArrayOptionOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayArrayOptionOptionOptionList) FlatMapInt8(f func(Uint16ArrayArrayOptionOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayArrayOptionOptionOptionList) FlatMapInt16(f func(Uint16ArrayArrayOptionOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayArrayOptionOptionOptionList) FlatMapInt32(f func(Uint16ArrayArrayOptionOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayArrayOptionOptionOptionList) FlatMapInt64(f func(Uint16ArrayArrayOptionOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayArrayOptionOptionOptionList) FlatMapUint(f func(Uint16ArrayArrayOptionOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayArrayOptionOptionOptionList) FlatMapUint8(f func(Uint16ArrayArrayOptionOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayArrayOptionOptionOptionList) FlatMapUint16(f func(Uint16ArrayArrayOptionOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayArrayOptionOptionOptionList) FlatMapUint32(f func(Uint16ArrayArrayOptionOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayArrayOptionOptionOptionList) FlatMapUint64(f func(Uint16ArrayArrayOptionOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayArrayOptionOptionOptionList) FlatMapUintptr(f func(Uint16ArrayArrayOptionOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayArrayOptionOptionOptionList) FlatMapByte(f func(Uint16ArrayArrayOptionOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayArrayOptionOptionOptionList) FlatMapRune(f func(Uint16ArrayArrayOptionOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayArrayOptionOptionOptionList) FlatMapFloat32(f func(Uint16ArrayArrayOptionOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayArrayOptionOptionOptionList) FlatMapFloat64(f func(Uint16ArrayArrayOptionOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayArrayOptionOptionOptionList) FlatMapComplex64(f func(Uint16ArrayArrayOptionOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayArrayOptionOptionOptionList) FlatMapComplex128(f func(Uint16ArrayArrayOptionOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayArrayOptionOptionOptionList) FlatMapAny(f func(Uint16ArrayArrayOptionOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayArrayOptionOptionOptionList) FlatMapBool(f func(Uint32ArrayArrayOptionOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayArrayOptionOptionOptionList) FlatMapString(f func(Uint32ArrayArrayOptionOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayArrayOptionOptionOptionList) FlatMapInt(f func(Uint32ArrayArrayOptionOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayArrayOptionOptionOptionList) FlatMapInt8(f func(Uint32ArrayArrayOptionOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayArrayOptionOptionOptionList) FlatMapInt16(f func(Uint32ArrayArrayOptionOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayArrayOptionOptionOptionList) FlatMapInt32(f func(Uint32ArrayArrayOptionOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayArrayOptionOptionOptionList) FlatMapInt64(f func(Uint32ArrayArrayOptionOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayArrayOptionOptionOptionList) FlatMapUint(f func(Uint32ArrayArrayOptionOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayArrayOptionOptionOptionList) FlatMapUint8(f func(Uint32ArrayArrayOptionOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayArrayOptionOptionOptionList) FlatMapUint16(f func(Uint32ArrayArrayOptionOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayArrayOptionOptionOptionList) FlatMapUint32(f func(Uint32ArrayArrayOptionOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayArrayOptionOptionOptionList) FlatMapUint64(f func(Uint32ArrayArrayOptionOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayArrayOptionOptionOptionList) FlatMapUintptr(f func(Uint32ArrayArrayOptionOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayArrayOptionOptionOptionList) FlatMapByte(f func(Uint32ArrayArrayOptionOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayArrayOptionOptionOptionList) FlatMapRune(f func(Uint32ArrayArrayOptionOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayArrayOptionOptionOptionList) FlatMapFloat32(f func(Uint32ArrayArrayOptionOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayArrayOptionOptionOptionList) FlatMapFloat64(f func(Uint32ArrayArrayOptionOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayArrayOptionOptionOptionList) FlatMapComplex64(f func(Uint32ArrayArrayOptionOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayArrayOptionOptionOptionList) FlatMapComplex128(f func(Uint32ArrayArrayOptionOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayArrayOptionOptionOptionList) FlatMapAny(f func(Uint32ArrayArrayOptionOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayArrayOptionOptionOptionList) FlatMapBool(f func(Uint64ArrayArrayOptionOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayArrayOptionOptionOptionList) FlatMapString(f func(Uint64ArrayArrayOptionOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayArrayOptionOptionOptionList) FlatMapInt(f func(Uint64ArrayArrayOptionOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayArrayOptionOptionOptionList) FlatMapInt8(f func(Uint64ArrayArrayOptionOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayArrayOptionOptionOptionList) FlatMapInt16(f func(Uint64ArrayArrayOptionOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayArrayOptionOptionOptionList) FlatMapInt32(f func(Uint64ArrayArrayOptionOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayArrayOptionOptionOptionList) FlatMapInt64(f func(Uint64ArrayArrayOptionOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayArrayOptionOptionOptionList) FlatMapUint(f func(Uint64ArrayArrayOptionOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayArrayOptionOptionOptionList) FlatMapUint8(f func(Uint64ArrayArrayOptionOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayArrayOptionOptionOptionList) FlatMapUint16(f func(Uint64ArrayArrayOptionOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayArrayOptionOptionOptionList) FlatMapUint32(f func(Uint64ArrayArrayOptionOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayArrayOptionOptionOptionList) FlatMapUint64(f func(Uint64ArrayArrayOptionOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayArrayOptionOptionOptionList) FlatMapUintptr(f func(Uint64ArrayArrayOptionOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayArrayOptionOptionOptionList) FlatMapByte(f func(Uint64ArrayArrayOptionOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayArrayOptionOptionOptionList) FlatMapRune(f func(Uint64ArrayArrayOptionOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayArrayOptionOptionOptionList) FlatMapFloat32(f func(Uint64ArrayArrayOptionOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayArrayOptionOptionOptionList) FlatMapFloat64(f func(Uint64ArrayArrayOptionOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayArrayOptionOptionOptionList) FlatMapComplex64(f func(Uint64ArrayArrayOptionOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayArrayOptionOptionOptionList) FlatMapComplex128(f func(Uint64ArrayArrayOptionOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayArrayOptionOptionOptionList) FlatMapAny(f func(Uint64ArrayArrayOptionOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayArrayOptionOptionOptionList) FlatMapBool(f func(UintptrArrayArrayOptionOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayArrayOptionOptionOptionList) FlatMapString(f func(UintptrArrayArrayOptionOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayArrayOptionOptionOptionList) FlatMapInt(f func(UintptrArrayArrayOptionOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayArrayOptionOptionOptionList) FlatMapInt8(f func(UintptrArrayArrayOptionOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayArrayOptionOptionOptionList) FlatMapInt16(f func(UintptrArrayArrayOptionOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayArrayOptionOptionOptionList) FlatMapInt32(f func(UintptrArrayArrayOptionOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayArrayOptionOptionOptionList) FlatMapInt64(f func(UintptrArrayArrayOptionOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayArrayOptionOptionOptionList) FlatMapUint(f func(UintptrArrayArrayOptionOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayArrayOptionOptionOptionList) FlatMapUint8(f func(UintptrArrayArrayOptionOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayArrayOptionOptionOptionList) FlatMapUint16(f func(UintptrArrayArrayOptionOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayArrayOptionOptionOptionList) FlatMapUint32(f func(UintptrArrayArrayOptionOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayArrayOptionOptionOptionList) FlatMapUint64(f func(UintptrArrayArrayOptionOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayArrayOptionOptionOptionList) FlatMapUintptr(f func(UintptrArrayArrayOptionOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayArrayOptionOptionOptionList) FlatMapByte(f func(UintptrArrayArrayOptionOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayArrayOptionOptionOptionList) FlatMapRune(f func(UintptrArrayArrayOptionOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayArrayOptionOptionOptionList) FlatMapFloat32(f func(UintptrArrayArrayOptionOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayArrayOptionOptionOptionList) FlatMapFloat64(f func(UintptrArrayArrayOptionOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayArrayOptionOptionOptionList) FlatMapComplex64(f func(UintptrArrayArrayOptionOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayArrayOptionOptionOptionList) FlatMapComplex128(f func(UintptrArrayArrayOptionOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayArrayOptionOptionOptionList) FlatMapAny(f func(UintptrArrayArrayOptionOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayArrayOptionOptionOptionList) FlatMapBool(f func(ByteArrayArrayOptionOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayArrayOptionOptionOptionList) FlatMapString(f func(ByteArrayArrayOptionOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayArrayOptionOptionOptionList) FlatMapInt(f func(ByteArrayArrayOptionOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayArrayOptionOptionOptionList) FlatMapInt8(f func(ByteArrayArrayOptionOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayArrayOptionOptionOptionList) FlatMapInt16(f func(ByteArrayArrayOptionOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayArrayOptionOptionOptionList) FlatMapInt32(f func(ByteArrayArrayOptionOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayArrayOptionOptionOptionList) FlatMapInt64(f func(ByteArrayArrayOptionOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayArrayOptionOptionOptionList) FlatMapUint(f func(ByteArrayArrayOptionOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayArrayOptionOptionOptionList) FlatMapUint8(f func(ByteArrayArrayOptionOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayArrayOptionOptionOptionList) FlatMapUint16(f func(ByteArrayArrayOptionOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayArrayOptionOptionOptionList) FlatMapUint32(f func(ByteArrayArrayOptionOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayArrayOptionOptionOptionList) FlatMapUint64(f func(ByteArrayArrayOptionOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayArrayOptionOptionOptionList) FlatMapUintptr(f func(ByteArrayArrayOptionOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayArrayOptionOptionOptionList) FlatMapByte(f func(ByteArrayArrayOptionOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayArrayOptionOptionOptionList) FlatMapRune(f func(ByteArrayArrayOptionOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayArrayOptionOptionOptionList) FlatMapFloat32(f func(ByteArrayArrayOptionOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayArrayOptionOptionOptionList) FlatMapFloat64(f func(ByteArrayArrayOptionOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayArrayOptionOptionOptionList) FlatMapComplex64(f func(ByteArrayArrayOptionOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayArrayOptionOptionOptionList) FlatMapComplex128(f func(ByteArrayArrayOptionOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayArrayOptionOptionOptionList) FlatMapAny(f func(ByteArrayArrayOptionOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayArrayOptionOptionOptionList) FlatMapBool(f func(RuneArrayArrayOptionOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayArrayOptionOptionOptionList) FlatMapString(f func(RuneArrayArrayOptionOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayArrayOptionOptionOptionList) FlatMapInt(f func(RuneArrayArrayOptionOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayArrayOptionOptionOptionList) FlatMapInt8(f func(RuneArrayArrayOptionOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayArrayOptionOptionOptionList) FlatMapInt16(f func(RuneArrayArrayOptionOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayArrayOptionOptionOptionList) FlatMapInt32(f func(RuneArrayArrayOptionOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayArrayOptionOptionOptionList) FlatMapInt64(f func(RuneArrayArrayOptionOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayArrayOptionOptionOptionList) FlatMapUint(f func(RuneArrayArrayOptionOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayArrayOptionOptionOptionList) FlatMapUint8(f func(RuneArrayArrayOptionOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayArrayOptionOptionOptionList) FlatMapUint16(f func(RuneArrayArrayOptionOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayArrayOptionOptionOptionList) FlatMapUint32(f func(RuneArrayArrayOptionOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayArrayOptionOptionOptionList) FlatMapUint64(f func(RuneArrayArrayOptionOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayArrayOptionOptionOptionList) FlatMapUintptr(f func(RuneArrayArrayOptionOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayArrayOptionOptionOptionList) FlatMapByte(f func(RuneArrayArrayOptionOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayArrayOptionOptionOptionList) FlatMapRune(f func(RuneArrayArrayOptionOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayArrayOptionOptionOptionList) FlatMapFloat32(f func(RuneArrayArrayOptionOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayArrayOptionOptionOptionList) FlatMapFloat64(f func(RuneArrayArrayOptionOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayArrayOptionOptionOptionList) FlatMapComplex64(f func(RuneArrayArrayOptionOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayArrayOptionOptionOptionList) FlatMapComplex128(f func(RuneArrayArrayOptionOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayArrayOptionOptionOptionList) FlatMapAny(f func(RuneArrayArrayOptionOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayArrayOptionOptionOptionList) FlatMapBool(f func(Float32ArrayArrayOptionOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayArrayOptionOptionOptionList) FlatMapString(f func(Float32ArrayArrayOptionOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayArrayOptionOptionOptionList) FlatMapInt(f func(Float32ArrayArrayOptionOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayArrayOptionOptionOptionList) FlatMapInt8(f func(Float32ArrayArrayOptionOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayArrayOptionOptionOptionList) FlatMapInt16(f func(Float32ArrayArrayOptionOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayArrayOptionOptionOptionList) FlatMapInt32(f func(Float32ArrayArrayOptionOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayArrayOptionOptionOptionList) FlatMapInt64(f func(Float32ArrayArrayOptionOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayArrayOptionOptionOptionList) FlatMapUint(f func(Float32ArrayArrayOptionOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayArrayOptionOptionOptionList) FlatMapUint8(f func(Float32ArrayArrayOptionOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayArrayOptionOptionOptionList) FlatMapUint16(f func(Float32ArrayArrayOptionOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayArrayOptionOptionOptionList) FlatMapUint32(f func(Float32ArrayArrayOptionOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayArrayOptionOptionOptionList) FlatMapUint64(f func(Float32ArrayArrayOptionOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayArrayOptionOptionOptionList) FlatMapUintptr(f func(Float32ArrayArrayOptionOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayArrayOptionOptionOptionList) FlatMapByte(f func(Float32ArrayArrayOptionOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayArrayOptionOptionOptionList) FlatMapRune(f func(Float32ArrayArrayOptionOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayArrayOptionOptionOptionList) FlatMapFloat32(f func(Float32ArrayArrayOptionOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayArrayOptionOptionOptionList) FlatMapFloat64(f func(Float32ArrayArrayOptionOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayArrayOptionOptionOptionList) FlatMapComplex64(f func(Float32ArrayArrayOptionOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayArrayOptionOptionOptionList) FlatMapComplex128(f func(Float32ArrayArrayOptionOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayArrayOptionOptionOptionList) FlatMapAny(f func(Float32ArrayArrayOptionOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayArrayOptionOptionOptionList) FlatMapBool(f func(Float64ArrayArrayOptionOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayArrayOptionOptionOptionList) FlatMapString(f func(Float64ArrayArrayOptionOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayArrayOptionOptionOptionList) FlatMapInt(f func(Float64ArrayArrayOptionOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayArrayOptionOptionOptionList) FlatMapInt8(f func(Float64ArrayArrayOptionOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayArrayOptionOptionOptionList) FlatMapInt16(f func(Float64ArrayArrayOptionOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayArrayOptionOptionOptionList) FlatMapInt32(f func(Float64ArrayArrayOptionOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayArrayOptionOptionOptionList) FlatMapInt64(f func(Float64ArrayArrayOptionOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayArrayOptionOptionOptionList) FlatMapUint(f func(Float64ArrayArrayOptionOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayArrayOptionOptionOptionList) FlatMapUint8(f func(Float64ArrayArrayOptionOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayArrayOptionOptionOptionList) FlatMapUint16(f func(Float64ArrayArrayOptionOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayArrayOptionOptionOptionList) FlatMapUint32(f func(Float64ArrayArrayOptionOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayArrayOptionOptionOptionList) FlatMapUint64(f func(Float64ArrayArrayOptionOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayArrayOptionOptionOptionList) FlatMapUintptr(f func(Float64ArrayArrayOptionOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayArrayOptionOptionOptionList) FlatMapByte(f func(Float64ArrayArrayOptionOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayArrayOptionOptionOptionList) FlatMapRune(f func(Float64ArrayArrayOptionOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayArrayOptionOptionOptionList) FlatMapFloat32(f func(Float64ArrayArrayOptionOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayArrayOptionOptionOptionList) FlatMapFloat64(f func(Float64ArrayArrayOptionOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayArrayOptionOptionOptionList) FlatMapComplex64(f func(Float64ArrayArrayOptionOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayArrayOptionOptionOptionList) FlatMapComplex128(f func(Float64ArrayArrayOptionOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayArrayOptionOptionOptionList) FlatMapAny(f func(Float64ArrayArrayOptionOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayArrayOptionOptionOptionList) FlatMapBool(f func(Complex64ArrayArrayOptionOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayArrayOptionOptionOptionList) FlatMapString(f func(Complex64ArrayArrayOptionOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayArrayOptionOptionOptionList) FlatMapInt(f func(Complex64ArrayArrayOptionOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayArrayOptionOptionOptionList) FlatMapInt8(f func(Complex64ArrayArrayOptionOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayArrayOptionOptionOptionList) FlatMapInt16(f func(Complex64ArrayArrayOptionOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayArrayOptionOptionOptionList) FlatMapInt32(f func(Complex64ArrayArrayOptionOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayArrayOptionOptionOptionList) FlatMapInt64(f func(Complex64ArrayArrayOptionOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayArrayOptionOptionOptionList) FlatMapUint(f func(Complex64ArrayArrayOptionOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayArrayOptionOptionOptionList) FlatMapUint8(f func(Complex64ArrayArrayOptionOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayArrayOptionOptionOptionList) FlatMapUint16(f func(Complex64ArrayArrayOptionOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayArrayOptionOptionOptionList) FlatMapUint32(f func(Complex64ArrayArrayOptionOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayArrayOptionOptionOptionList) FlatMapUint64(f func(Complex64ArrayArrayOptionOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayArrayOptionOptionOptionList) FlatMapUintptr(f func(Complex64ArrayArrayOptionOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayArrayOptionOptionOptionList) FlatMapByte(f func(Complex64ArrayArrayOptionOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayArrayOptionOptionOptionList) FlatMapRune(f func(Complex64ArrayArrayOptionOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayArrayOptionOptionOptionList) FlatMapFloat32(f func(Complex64ArrayArrayOptionOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayArrayOptionOptionOptionList) FlatMapFloat64(f func(Complex64ArrayArrayOptionOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayArrayOptionOptionOptionList) FlatMapComplex64(f func(Complex64ArrayArrayOptionOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayArrayOptionOptionOptionList) FlatMapComplex128(f func(Complex64ArrayArrayOptionOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayArrayOptionOptionOptionList) FlatMapAny(f func(Complex64ArrayArrayOptionOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayArrayOptionOptionOptionList) FlatMapBool(f func(Complex128ArrayArrayOptionOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayArrayOptionOptionOptionList) FlatMapString(f func(Complex128ArrayArrayOptionOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayArrayOptionOptionOptionList) FlatMapInt(f func(Complex128ArrayArrayOptionOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayArrayOptionOptionOptionList) FlatMapInt8(f func(Complex128ArrayArrayOptionOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayArrayOptionOptionOptionList) FlatMapInt16(f func(Complex128ArrayArrayOptionOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayArrayOptionOptionOptionList) FlatMapInt32(f func(Complex128ArrayArrayOptionOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayArrayOptionOptionOptionList) FlatMapInt64(f func(Complex128ArrayArrayOptionOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayArrayOptionOptionOptionList) FlatMapUint(f func(Complex128ArrayArrayOptionOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayArrayOptionOptionOptionList) FlatMapUint8(f func(Complex128ArrayArrayOptionOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayArrayOptionOptionOptionList) FlatMapUint16(f func(Complex128ArrayArrayOptionOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayArrayOptionOptionOptionList) FlatMapUint32(f func(Complex128ArrayArrayOptionOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayArrayOptionOptionOptionList) FlatMapUint64(f func(Complex128ArrayArrayOptionOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayArrayOptionOptionOptionList) FlatMapUintptr(f func(Complex128ArrayArrayOptionOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayArrayOptionOptionOptionList) FlatMapByte(f func(Complex128ArrayArrayOptionOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayArrayOptionOptionOptionList) FlatMapRune(f func(Complex128ArrayArrayOptionOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayArrayOptionOptionOptionList) FlatMapFloat32(f func(Complex128ArrayArrayOptionOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayArrayOptionOptionOptionList) FlatMapFloat64(f func(Complex128ArrayArrayOptionOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayArrayOptionOptionOptionList) FlatMapComplex64(f func(Complex128ArrayArrayOptionOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayArrayOptionOptionOptionList) FlatMapComplex128(f func(Complex128ArrayArrayOptionOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayArrayOptionOptionOptionList) FlatMapAny(f func(Complex128ArrayArrayOptionOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayArrayOptionOptionOptionList) FlatMapBool(f func(AnyArrayArrayOptionOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayArrayOptionOptionOptionList) FlatMapString(f func(AnyArrayArrayOptionOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayArrayOptionOptionOptionList) FlatMapInt(f func(AnyArrayArrayOptionOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayArrayOptionOptionOptionList) FlatMapInt8(f func(AnyArrayArrayOptionOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayArrayOptionOptionOptionList) FlatMapInt16(f func(AnyArrayArrayOptionOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayArrayOptionOptionOptionList) FlatMapInt32(f func(AnyArrayArrayOptionOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayArrayOptionOptionOptionList) FlatMapInt64(f func(AnyArrayArrayOptionOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayArrayOptionOptionOptionList) FlatMapUint(f func(AnyArrayArrayOptionOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayArrayOptionOptionOptionList) FlatMapUint8(f func(AnyArrayArrayOptionOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayArrayOptionOptionOptionList) FlatMapUint16(f func(AnyArrayArrayOptionOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayArrayOptionOptionOptionList) FlatMapUint32(f func(AnyArrayArrayOptionOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayArrayOptionOptionOptionList) FlatMapUint64(f func(AnyArrayArrayOptionOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayArrayOptionOptionOptionList) FlatMapUintptr(f func(AnyArrayArrayOptionOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayArrayOptionOptionOptionList) FlatMapByte(f func(AnyArrayArrayOptionOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayArrayOptionOptionOptionList) FlatMapRune(f func(AnyArrayArrayOptionOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayArrayOptionOptionOptionList) FlatMapFloat32(f func(AnyArrayArrayOptionOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayArrayOptionOptionOptionList) FlatMapFloat64(f func(AnyArrayArrayOptionOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayArrayOptionOptionOptionList) FlatMapComplex64(f func(AnyArrayArrayOptionOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayArrayOptionOptionOptionList) FlatMapComplex128(f func(AnyArrayArrayOptionOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayArrayOptionOptionOptionList) FlatMapAny(f func(AnyArrayArrayOptionOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionArrayOptionOptionOptionList) FlatMapBool(f func(BoolOptionArrayOptionOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionArrayOptionOptionOptionList) FlatMapString(f func(BoolOptionArrayOptionOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionArrayOptionOptionOptionList) FlatMapInt(f func(BoolOptionArrayOptionOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionArrayOptionOptionOptionList) FlatMapInt8(f func(BoolOptionArrayOptionOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionArrayOptionOptionOptionList) FlatMapInt16(f func(BoolOptionArrayOptionOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionArrayOptionOptionOptionList) FlatMapInt32(f func(BoolOptionArrayOptionOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionArrayOptionOptionOptionList) FlatMapInt64(f func(BoolOptionArrayOptionOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionArrayOptionOptionOptionList) FlatMapUint(f func(BoolOptionArrayOptionOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionArrayOptionOptionOptionList) FlatMapUint8(f func(BoolOptionArrayOptionOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionArrayOptionOptionOptionList) FlatMapUint16(f func(BoolOptionArrayOptionOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionArrayOptionOptionOptionList) FlatMapUint32(f func(BoolOptionArrayOptionOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionArrayOptionOptionOptionList) FlatMapUint64(f func(BoolOptionArrayOptionOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionArrayOptionOptionOptionList) FlatMapUintptr(f func(BoolOptionArrayOptionOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionArrayOptionOptionOptionList) FlatMapByte(f func(BoolOptionArrayOptionOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionArrayOptionOptionOptionList) FlatMapRune(f func(BoolOptionArrayOptionOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionArrayOptionOptionOptionList) FlatMapFloat32(f func(BoolOptionArrayOptionOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionArrayOptionOptionOptionList) FlatMapFloat64(f func(BoolOptionArrayOptionOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionArrayOptionOptionOptionList) FlatMapComplex64(f func(BoolOptionArrayOptionOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionArrayOptionOptionOptionList) FlatMapComplex128(f func(BoolOptionArrayOptionOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionArrayOptionOptionOptionList) FlatMapAny(f func(BoolOptionArrayOptionOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionArrayOptionOptionOptionList) FlatMapBool(f func(StringOptionArrayOptionOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionArrayOptionOptionOptionList) FlatMapString(f func(StringOptionArrayOptionOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionArrayOptionOptionOptionList) FlatMapInt(f func(StringOptionArrayOptionOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionArrayOptionOptionOptionList) FlatMapInt8(f func(StringOptionArrayOptionOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionArrayOptionOptionOptionList) FlatMapInt16(f func(StringOptionArrayOptionOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionArrayOptionOptionOptionList) FlatMapInt32(f func(StringOptionArrayOptionOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionArrayOptionOptionOptionList) FlatMapInt64(f func(StringOptionArrayOptionOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionArrayOptionOptionOptionList) FlatMapUint(f func(StringOptionArrayOptionOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionArrayOptionOptionOptionList) FlatMapUint8(f func(StringOptionArrayOptionOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionArrayOptionOptionOptionList) FlatMapUint16(f func(StringOptionArrayOptionOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionArrayOptionOptionOptionList) FlatMapUint32(f func(StringOptionArrayOptionOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionArrayOptionOptionOptionList) FlatMapUint64(f func(StringOptionArrayOptionOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionArrayOptionOptionOptionList) FlatMapUintptr(f func(StringOptionArrayOptionOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionArrayOptionOptionOptionList) FlatMapByte(f func(StringOptionArrayOptionOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionArrayOptionOptionOptionList) FlatMapRune(f func(StringOptionArrayOptionOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionArrayOptionOptionOptionList) FlatMapFloat32(f func(StringOptionArrayOptionOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionArrayOptionOptionOptionList) FlatMapFloat64(f func(StringOptionArrayOptionOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionArrayOptionOptionOptionList) FlatMapComplex64(f func(StringOptionArrayOptionOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionArrayOptionOptionOptionList) FlatMapComplex128(f func(StringOptionArrayOptionOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionArrayOptionOptionOptionList) FlatMapAny(f func(StringOptionArrayOptionOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionArrayOptionOptionOptionList) FlatMapBool(f func(IntOptionArrayOptionOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionArrayOptionOptionOptionList) FlatMapString(f func(IntOptionArrayOptionOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionArrayOptionOptionOptionList) FlatMapInt(f func(IntOptionArrayOptionOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionArrayOptionOptionOptionList) FlatMapInt8(f func(IntOptionArrayOptionOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionArrayOptionOptionOptionList) FlatMapInt16(f func(IntOptionArrayOptionOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionArrayOptionOptionOptionList) FlatMapInt32(f func(IntOptionArrayOptionOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionArrayOptionOptionOptionList) FlatMapInt64(f func(IntOptionArrayOptionOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionArrayOptionOptionOptionList) FlatMapUint(f func(IntOptionArrayOptionOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionArrayOptionOptionOptionList) FlatMapUint8(f func(IntOptionArrayOptionOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionArrayOptionOptionOptionList) FlatMapUint16(f func(IntOptionArrayOptionOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionArrayOptionOptionOptionList) FlatMapUint32(f func(IntOptionArrayOptionOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionArrayOptionOptionOptionList) FlatMapUint64(f func(IntOptionArrayOptionOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionArrayOptionOptionOptionList) FlatMapUintptr(f func(IntOptionArrayOptionOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionArrayOptionOptionOptionList) FlatMapByte(f func(IntOptionArrayOptionOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionArrayOptionOptionOptionList) FlatMapRune(f func(IntOptionArrayOptionOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionArrayOptionOptionOptionList) FlatMapFloat32(f func(IntOptionArrayOptionOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionArrayOptionOptionOptionList) FlatMapFloat64(f func(IntOptionArrayOptionOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionArrayOptionOptionOptionList) FlatMapComplex64(f func(IntOptionArrayOptionOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionArrayOptionOptionOptionList) FlatMapComplex128(f func(IntOptionArrayOptionOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionArrayOptionOptionOptionList) FlatMapAny(f func(IntOptionArrayOptionOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionArrayOptionOptionOptionList) FlatMapBool(f func(Int8OptionArrayOptionOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionArrayOptionOptionOptionList) FlatMapString(f func(Int8OptionArrayOptionOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionArrayOptionOptionOptionList) FlatMapInt(f func(Int8OptionArrayOptionOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionArrayOptionOptionOptionList) FlatMapInt8(f func(Int8OptionArrayOptionOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionArrayOptionOptionOptionList) FlatMapInt16(f func(Int8OptionArrayOptionOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionArrayOptionOptionOptionList) FlatMapInt32(f func(Int8OptionArrayOptionOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionArrayOptionOptionOptionList) FlatMapInt64(f func(Int8OptionArrayOptionOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionArrayOptionOptionOptionList) FlatMapUint(f func(Int8OptionArrayOptionOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionArrayOptionOptionOptionList) FlatMapUint8(f func(Int8OptionArrayOptionOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionArrayOptionOptionOptionList) FlatMapUint16(f func(Int8OptionArrayOptionOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionArrayOptionOptionOptionList) FlatMapUint32(f func(Int8OptionArrayOptionOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionArrayOptionOptionOptionList) FlatMapUint64(f func(Int8OptionArrayOptionOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionArrayOptionOptionOptionList) FlatMapUintptr(f func(Int8OptionArrayOptionOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionArrayOptionOptionOptionList) FlatMapByte(f func(Int8OptionArrayOptionOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionArrayOptionOptionOptionList) FlatMapRune(f func(Int8OptionArrayOptionOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionArrayOptionOptionOptionList) FlatMapFloat32(f func(Int8OptionArrayOptionOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionArrayOptionOptionOptionList) FlatMapFloat64(f func(Int8OptionArrayOptionOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionArrayOptionOptionOptionList) FlatMapComplex64(f func(Int8OptionArrayOptionOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionArrayOptionOptionOptionList) FlatMapComplex128(f func(Int8OptionArrayOptionOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionArrayOptionOptionOptionList) FlatMapAny(f func(Int8OptionArrayOptionOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionArrayOptionOptionOptionList) FlatMapBool(f func(Int16OptionArrayOptionOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionArrayOptionOptionOptionList) FlatMapString(f func(Int16OptionArrayOptionOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionArrayOptionOptionOptionList) FlatMapInt(f func(Int16OptionArrayOptionOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionArrayOptionOptionOptionList) FlatMapInt8(f func(Int16OptionArrayOptionOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionArrayOptionOptionOptionList) FlatMapInt16(f func(Int16OptionArrayOptionOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionArrayOptionOptionOptionList) FlatMapInt32(f func(Int16OptionArrayOptionOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionArrayOptionOptionOptionList) FlatMapInt64(f func(Int16OptionArrayOptionOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionArrayOptionOptionOptionList) FlatMapUint(f func(Int16OptionArrayOptionOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionArrayOptionOptionOptionList) FlatMapUint8(f func(Int16OptionArrayOptionOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionArrayOptionOptionOptionList) FlatMapUint16(f func(Int16OptionArrayOptionOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionArrayOptionOptionOptionList) FlatMapUint32(f func(Int16OptionArrayOptionOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionArrayOptionOptionOptionList) FlatMapUint64(f func(Int16OptionArrayOptionOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionArrayOptionOptionOptionList) FlatMapUintptr(f func(Int16OptionArrayOptionOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionArrayOptionOptionOptionList) FlatMapByte(f func(Int16OptionArrayOptionOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionArrayOptionOptionOptionList) FlatMapRune(f func(Int16OptionArrayOptionOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionArrayOptionOptionOptionList) FlatMapFloat32(f func(Int16OptionArrayOptionOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionArrayOptionOptionOptionList) FlatMapFloat64(f func(Int16OptionArrayOptionOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionArrayOptionOptionOptionList) FlatMapComplex64(f func(Int16OptionArrayOptionOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionArrayOptionOptionOptionList) FlatMapComplex128(f func(Int16OptionArrayOptionOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionArrayOptionOptionOptionList) FlatMapAny(f func(Int16OptionArrayOptionOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionArrayOptionOptionOptionList) FlatMapBool(f func(Int32OptionArrayOptionOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionArrayOptionOptionOptionList) FlatMapString(f func(Int32OptionArrayOptionOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionArrayOptionOptionOptionList) FlatMapInt(f func(Int32OptionArrayOptionOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionArrayOptionOptionOptionList) FlatMapInt8(f func(Int32OptionArrayOptionOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionArrayOptionOptionOptionList) FlatMapInt16(f func(Int32OptionArrayOptionOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionArrayOptionOptionOptionList) FlatMapInt32(f func(Int32OptionArrayOptionOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionArrayOptionOptionOptionList) FlatMapInt64(f func(Int32OptionArrayOptionOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionArrayOptionOptionOptionList) FlatMapUint(f func(Int32OptionArrayOptionOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionArrayOptionOptionOptionList) FlatMapUint8(f func(Int32OptionArrayOptionOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionArrayOptionOptionOptionList) FlatMapUint16(f func(Int32OptionArrayOptionOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionArrayOptionOptionOptionList) FlatMapUint32(f func(Int32OptionArrayOptionOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionArrayOptionOptionOptionList) FlatMapUint64(f func(Int32OptionArrayOptionOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionArrayOptionOptionOptionList) FlatMapUintptr(f func(Int32OptionArrayOptionOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionArrayOptionOptionOptionList) FlatMapByte(f func(Int32OptionArrayOptionOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionArrayOptionOptionOptionList) FlatMapRune(f func(Int32OptionArrayOptionOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionArrayOptionOptionOptionList) FlatMapFloat32(f func(Int32OptionArrayOptionOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionArrayOptionOptionOptionList) FlatMapFloat64(f func(Int32OptionArrayOptionOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionArrayOptionOptionOptionList) FlatMapComplex64(f func(Int32OptionArrayOptionOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionArrayOptionOptionOptionList) FlatMapComplex128(f func(Int32OptionArrayOptionOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionArrayOptionOptionOptionList) FlatMapAny(f func(Int32OptionArrayOptionOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionArrayOptionOptionOptionList) FlatMapBool(f func(Int64OptionArrayOptionOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionArrayOptionOptionOptionList) FlatMapString(f func(Int64OptionArrayOptionOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionArrayOptionOptionOptionList) FlatMapInt(f func(Int64OptionArrayOptionOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionArrayOptionOptionOptionList) FlatMapInt8(f func(Int64OptionArrayOptionOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionArrayOptionOptionOptionList) FlatMapInt16(f func(Int64OptionArrayOptionOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionArrayOptionOptionOptionList) FlatMapInt32(f func(Int64OptionArrayOptionOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionArrayOptionOptionOptionList) FlatMapInt64(f func(Int64OptionArrayOptionOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionArrayOptionOptionOptionList) FlatMapUint(f func(Int64OptionArrayOptionOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionArrayOptionOptionOptionList) FlatMapUint8(f func(Int64OptionArrayOptionOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionArrayOptionOptionOptionList) FlatMapUint16(f func(Int64OptionArrayOptionOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionArrayOptionOptionOptionList) FlatMapUint32(f func(Int64OptionArrayOptionOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionArrayOptionOptionOptionList) FlatMapUint64(f func(Int64OptionArrayOptionOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionArrayOptionOptionOptionList) FlatMapUintptr(f func(Int64OptionArrayOptionOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionArrayOptionOptionOptionList) FlatMapByte(f func(Int64OptionArrayOptionOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionArrayOptionOptionOptionList) FlatMapRune(f func(Int64OptionArrayOptionOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionArrayOptionOptionOptionList) FlatMapFloat32(f func(Int64OptionArrayOptionOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionArrayOptionOptionOptionList) FlatMapFloat64(f func(Int64OptionArrayOptionOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionArrayOptionOptionOptionList) FlatMapComplex64(f func(Int64OptionArrayOptionOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionArrayOptionOptionOptionList) FlatMapComplex128(f func(Int64OptionArrayOptionOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionArrayOptionOptionOptionList) FlatMapAny(f func(Int64OptionArrayOptionOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionArrayOptionOptionOptionList) FlatMapBool(f func(UintOptionArrayOptionOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionArrayOptionOptionOptionList) FlatMapString(f func(UintOptionArrayOptionOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionArrayOptionOptionOptionList) FlatMapInt(f func(UintOptionArrayOptionOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionArrayOptionOptionOptionList) FlatMapInt8(f func(UintOptionArrayOptionOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionArrayOptionOptionOptionList) FlatMapInt16(f func(UintOptionArrayOptionOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionArrayOptionOptionOptionList) FlatMapInt32(f func(UintOptionArrayOptionOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionArrayOptionOptionOptionList) FlatMapInt64(f func(UintOptionArrayOptionOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionArrayOptionOptionOptionList) FlatMapUint(f func(UintOptionArrayOptionOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionArrayOptionOptionOptionList) FlatMapUint8(f func(UintOptionArrayOptionOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionArrayOptionOptionOptionList) FlatMapUint16(f func(UintOptionArrayOptionOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionArrayOptionOptionOptionList) FlatMapUint32(f func(UintOptionArrayOptionOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionArrayOptionOptionOptionList) FlatMapUint64(f func(UintOptionArrayOptionOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionArrayOptionOptionOptionList) FlatMapUintptr(f func(UintOptionArrayOptionOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionArrayOptionOptionOptionList) FlatMapByte(f func(UintOptionArrayOptionOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionArrayOptionOptionOptionList) FlatMapRune(f func(UintOptionArrayOptionOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionArrayOptionOptionOptionList) FlatMapFloat32(f func(UintOptionArrayOptionOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionArrayOptionOptionOptionList) FlatMapFloat64(f func(UintOptionArrayOptionOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionArrayOptionOptionOptionList) FlatMapComplex64(f func(UintOptionArrayOptionOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionArrayOptionOptionOptionList) FlatMapComplex128(f func(UintOptionArrayOptionOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionArrayOptionOptionOptionList) FlatMapAny(f func(UintOptionArrayOptionOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionArrayOptionOptionOptionList) FlatMapBool(f func(Uint8OptionArrayOptionOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionArrayOptionOptionOptionList) FlatMapString(f func(Uint8OptionArrayOptionOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionArrayOptionOptionOptionList) FlatMapInt(f func(Uint8OptionArrayOptionOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionArrayOptionOptionOptionList) FlatMapInt8(f func(Uint8OptionArrayOptionOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionArrayOptionOptionOptionList) FlatMapInt16(f func(Uint8OptionArrayOptionOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionArrayOptionOptionOptionList) FlatMapInt32(f func(Uint8OptionArrayOptionOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionArrayOptionOptionOptionList) FlatMapInt64(f func(Uint8OptionArrayOptionOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionArrayOptionOptionOptionList) FlatMapUint(f func(Uint8OptionArrayOptionOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionArrayOptionOptionOptionList) FlatMapUint8(f func(Uint8OptionArrayOptionOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionArrayOptionOptionOptionList) FlatMapUint16(f func(Uint8OptionArrayOptionOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionArrayOptionOptionOptionList) FlatMapUint32(f func(Uint8OptionArrayOptionOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionArrayOptionOptionOptionList) FlatMapUint64(f func(Uint8OptionArrayOptionOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionArrayOptionOptionOptionList) FlatMapUintptr(f func(Uint8OptionArrayOptionOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionArrayOptionOptionOptionList) FlatMapByte(f func(Uint8OptionArrayOptionOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionArrayOptionOptionOptionList) FlatMapRune(f func(Uint8OptionArrayOptionOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionArrayOptionOptionOptionList) FlatMapFloat32(f func(Uint8OptionArrayOptionOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionArrayOptionOptionOptionList) FlatMapFloat64(f func(Uint8OptionArrayOptionOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionArrayOptionOptionOptionList) FlatMapComplex64(f func(Uint8OptionArrayOptionOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionArrayOptionOptionOptionList) FlatMapComplex128(f func(Uint8OptionArrayOptionOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionArrayOptionOptionOptionList) FlatMapAny(f func(Uint8OptionArrayOptionOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionArrayOptionOptionOptionList) FlatMapBool(f func(Uint16OptionArrayOptionOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionArrayOptionOptionOptionList) FlatMapString(f func(Uint16OptionArrayOptionOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionArrayOptionOptionOptionList) FlatMapInt(f func(Uint16OptionArrayOptionOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionArrayOptionOptionOptionList) FlatMapInt8(f func(Uint16OptionArrayOptionOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionArrayOptionOptionOptionList) FlatMapInt16(f func(Uint16OptionArrayOptionOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionArrayOptionOptionOptionList) FlatMapInt32(f func(Uint16OptionArrayOptionOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionArrayOptionOptionOptionList) FlatMapInt64(f func(Uint16OptionArrayOptionOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionArrayOptionOptionOptionList) FlatMapUint(f func(Uint16OptionArrayOptionOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionArrayOptionOptionOptionList) FlatMapUint8(f func(Uint16OptionArrayOptionOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionArrayOptionOptionOptionList) FlatMapUint16(f func(Uint16OptionArrayOptionOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionArrayOptionOptionOptionList) FlatMapUint32(f func(Uint16OptionArrayOptionOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionArrayOptionOptionOptionList) FlatMapUint64(f func(Uint16OptionArrayOptionOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionArrayOptionOptionOptionList) FlatMapUintptr(f func(Uint16OptionArrayOptionOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionArrayOptionOptionOptionList) FlatMapByte(f func(Uint16OptionArrayOptionOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionArrayOptionOptionOptionList) FlatMapRune(f func(Uint16OptionArrayOptionOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionArrayOptionOptionOptionList) FlatMapFloat32(f func(Uint16OptionArrayOptionOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionArrayOptionOptionOptionList) FlatMapFloat64(f func(Uint16OptionArrayOptionOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionArrayOptionOptionOptionList) FlatMapComplex64(f func(Uint16OptionArrayOptionOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionArrayOptionOptionOptionList) FlatMapComplex128(f func(Uint16OptionArrayOptionOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionArrayOptionOptionOptionList) FlatMapAny(f func(Uint16OptionArrayOptionOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionArrayOptionOptionOptionList) FlatMapBool(f func(Uint32OptionArrayOptionOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionArrayOptionOptionOptionList) FlatMapString(f func(Uint32OptionArrayOptionOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionArrayOptionOptionOptionList) FlatMapInt(f func(Uint32OptionArrayOptionOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionArrayOptionOptionOptionList) FlatMapInt8(f func(Uint32OptionArrayOptionOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionArrayOptionOptionOptionList) FlatMapInt16(f func(Uint32OptionArrayOptionOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionArrayOptionOptionOptionList) FlatMapInt32(f func(Uint32OptionArrayOptionOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionArrayOptionOptionOptionList) FlatMapInt64(f func(Uint32OptionArrayOptionOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionArrayOptionOptionOptionList) FlatMapUint(f func(Uint32OptionArrayOptionOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionArrayOptionOptionOptionList) FlatMapUint8(f func(Uint32OptionArrayOptionOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionArrayOptionOptionOptionList) FlatMapUint16(f func(Uint32OptionArrayOptionOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionArrayOptionOptionOptionList) FlatMapUint32(f func(Uint32OptionArrayOptionOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionArrayOptionOptionOptionList) FlatMapUint64(f func(Uint32OptionArrayOptionOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionArrayOptionOptionOptionList) FlatMapUintptr(f func(Uint32OptionArrayOptionOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionArrayOptionOptionOptionList) FlatMapByte(f func(Uint32OptionArrayOptionOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionArrayOptionOptionOptionList) FlatMapRune(f func(Uint32OptionArrayOptionOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionArrayOptionOptionOptionList) FlatMapFloat32(f func(Uint32OptionArrayOptionOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionArrayOptionOptionOptionList) FlatMapFloat64(f func(Uint32OptionArrayOptionOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionArrayOptionOptionOptionList) FlatMapComplex64(f func(Uint32OptionArrayOptionOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionArrayOptionOptionOptionList) FlatMapComplex128(f func(Uint32OptionArrayOptionOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionArrayOptionOptionOptionList) FlatMapAny(f func(Uint32OptionArrayOptionOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionArrayOptionOptionOptionList) FlatMapBool(f func(Uint64OptionArrayOptionOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionArrayOptionOptionOptionList) FlatMapString(f func(Uint64OptionArrayOptionOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionArrayOptionOptionOptionList) FlatMapInt(f func(Uint64OptionArrayOptionOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionArrayOptionOptionOptionList) FlatMapInt8(f func(Uint64OptionArrayOptionOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionArrayOptionOptionOptionList) FlatMapInt16(f func(Uint64OptionArrayOptionOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionArrayOptionOptionOptionList) FlatMapInt32(f func(Uint64OptionArrayOptionOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionArrayOptionOptionOptionList) FlatMapInt64(f func(Uint64OptionArrayOptionOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionArrayOptionOptionOptionList) FlatMapUint(f func(Uint64OptionArrayOptionOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionArrayOptionOptionOptionList) FlatMapUint8(f func(Uint64OptionArrayOptionOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionArrayOptionOptionOptionList) FlatMapUint16(f func(Uint64OptionArrayOptionOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionArrayOptionOptionOptionList) FlatMapUint32(f func(Uint64OptionArrayOptionOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionArrayOptionOptionOptionList) FlatMapUint64(f func(Uint64OptionArrayOptionOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionArrayOptionOptionOptionList) FlatMapUintptr(f func(Uint64OptionArrayOptionOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionArrayOptionOptionOptionList) FlatMapByte(f func(Uint64OptionArrayOptionOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionArrayOptionOptionOptionList) FlatMapRune(f func(Uint64OptionArrayOptionOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionArrayOptionOptionOptionList) FlatMapFloat32(f func(Uint64OptionArrayOptionOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionArrayOptionOptionOptionList) FlatMapFloat64(f func(Uint64OptionArrayOptionOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionArrayOptionOptionOptionList) FlatMapComplex64(f func(Uint64OptionArrayOptionOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionArrayOptionOptionOptionList) FlatMapComplex128(f func(Uint64OptionArrayOptionOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionArrayOptionOptionOptionList) FlatMapAny(f func(Uint64OptionArrayOptionOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionArrayOptionOptionOptionList) FlatMapBool(f func(UintptrOptionArrayOptionOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionArrayOptionOptionOptionList) FlatMapString(f func(UintptrOptionArrayOptionOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionArrayOptionOptionOptionList) FlatMapInt(f func(UintptrOptionArrayOptionOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionArrayOptionOptionOptionList) FlatMapInt8(f func(UintptrOptionArrayOptionOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionArrayOptionOptionOptionList) FlatMapInt16(f func(UintptrOptionArrayOptionOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionArrayOptionOptionOptionList) FlatMapInt32(f func(UintptrOptionArrayOptionOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionArrayOptionOptionOptionList) FlatMapInt64(f func(UintptrOptionArrayOptionOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionArrayOptionOptionOptionList) FlatMapUint(f func(UintptrOptionArrayOptionOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionArrayOptionOptionOptionList) FlatMapUint8(f func(UintptrOptionArrayOptionOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionArrayOptionOptionOptionList) FlatMapUint16(f func(UintptrOptionArrayOptionOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionArrayOptionOptionOptionList) FlatMapUint32(f func(UintptrOptionArrayOptionOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionArrayOptionOptionOptionList) FlatMapUint64(f func(UintptrOptionArrayOptionOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionArrayOptionOptionOptionList) FlatMapUintptr(f func(UintptrOptionArrayOptionOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionArrayOptionOptionOptionList) FlatMapByte(f func(UintptrOptionArrayOptionOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionArrayOptionOptionOptionList) FlatMapRune(f func(UintptrOptionArrayOptionOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionArrayOptionOptionOptionList) FlatMapFloat32(f func(UintptrOptionArrayOptionOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionArrayOptionOptionOptionList) FlatMapFloat64(f func(UintptrOptionArrayOptionOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionArrayOptionOptionOptionList) FlatMapComplex64(f func(UintptrOptionArrayOptionOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionArrayOptionOptionOptionList) FlatMapComplex128(f func(UintptrOptionArrayOptionOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionArrayOptionOptionOptionList) FlatMapAny(f func(UintptrOptionArrayOptionOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionArrayOptionOptionOptionList) FlatMapBool(f func(ByteOptionArrayOptionOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionArrayOptionOptionOptionList) FlatMapString(f func(ByteOptionArrayOptionOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionArrayOptionOptionOptionList) FlatMapInt(f func(ByteOptionArrayOptionOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionArrayOptionOptionOptionList) FlatMapInt8(f func(ByteOptionArrayOptionOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionArrayOptionOptionOptionList) FlatMapInt16(f func(ByteOptionArrayOptionOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionArrayOptionOptionOptionList) FlatMapInt32(f func(ByteOptionArrayOptionOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionArrayOptionOptionOptionList) FlatMapInt64(f func(ByteOptionArrayOptionOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionArrayOptionOptionOptionList) FlatMapUint(f func(ByteOptionArrayOptionOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionArrayOptionOptionOptionList) FlatMapUint8(f func(ByteOptionArrayOptionOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionArrayOptionOptionOptionList) FlatMapUint16(f func(ByteOptionArrayOptionOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionArrayOptionOptionOptionList) FlatMapUint32(f func(ByteOptionArrayOptionOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionArrayOptionOptionOptionList) FlatMapUint64(f func(ByteOptionArrayOptionOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionArrayOptionOptionOptionList) FlatMapUintptr(f func(ByteOptionArrayOptionOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionArrayOptionOptionOptionList) FlatMapByte(f func(ByteOptionArrayOptionOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionArrayOptionOptionOptionList) FlatMapRune(f func(ByteOptionArrayOptionOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionArrayOptionOptionOptionList) FlatMapFloat32(f func(ByteOptionArrayOptionOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionArrayOptionOptionOptionList) FlatMapFloat64(f func(ByteOptionArrayOptionOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionArrayOptionOptionOptionList) FlatMapComplex64(f func(ByteOptionArrayOptionOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionArrayOptionOptionOptionList) FlatMapComplex128(f func(ByteOptionArrayOptionOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionArrayOptionOptionOptionList) FlatMapAny(f func(ByteOptionArrayOptionOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionArrayOptionOptionOptionList) FlatMapBool(f func(RuneOptionArrayOptionOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionArrayOptionOptionOptionList) FlatMapString(f func(RuneOptionArrayOptionOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionArrayOptionOptionOptionList) FlatMapInt(f func(RuneOptionArrayOptionOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionArrayOptionOptionOptionList) FlatMapInt8(f func(RuneOptionArrayOptionOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionArrayOptionOptionOptionList) FlatMapInt16(f func(RuneOptionArrayOptionOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionArrayOptionOptionOptionList) FlatMapInt32(f func(RuneOptionArrayOptionOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionArrayOptionOptionOptionList) FlatMapInt64(f func(RuneOptionArrayOptionOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionArrayOptionOptionOptionList) FlatMapUint(f func(RuneOptionArrayOptionOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionArrayOptionOptionOptionList) FlatMapUint8(f func(RuneOptionArrayOptionOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionArrayOptionOptionOptionList) FlatMapUint16(f func(RuneOptionArrayOptionOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionArrayOptionOptionOptionList) FlatMapUint32(f func(RuneOptionArrayOptionOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionArrayOptionOptionOptionList) FlatMapUint64(f func(RuneOptionArrayOptionOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionArrayOptionOptionOptionList) FlatMapUintptr(f func(RuneOptionArrayOptionOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionArrayOptionOptionOptionList) FlatMapByte(f func(RuneOptionArrayOptionOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionArrayOptionOptionOptionList) FlatMapRune(f func(RuneOptionArrayOptionOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionArrayOptionOptionOptionList) FlatMapFloat32(f func(RuneOptionArrayOptionOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionArrayOptionOptionOptionList) FlatMapFloat64(f func(RuneOptionArrayOptionOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionArrayOptionOptionOptionList) FlatMapComplex64(f func(RuneOptionArrayOptionOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionArrayOptionOptionOptionList) FlatMapComplex128(f func(RuneOptionArrayOptionOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionArrayOptionOptionOptionList) FlatMapAny(f func(RuneOptionArrayOptionOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionArrayOptionOptionOptionList) FlatMapBool(f func(Float32OptionArrayOptionOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionArrayOptionOptionOptionList) FlatMapString(f func(Float32OptionArrayOptionOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionArrayOptionOptionOptionList) FlatMapInt(f func(Float32OptionArrayOptionOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionArrayOptionOptionOptionList) FlatMapInt8(f func(Float32OptionArrayOptionOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionArrayOptionOptionOptionList) FlatMapInt16(f func(Float32OptionArrayOptionOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionArrayOptionOptionOptionList) FlatMapInt32(f func(Float32OptionArrayOptionOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionArrayOptionOptionOptionList) FlatMapInt64(f func(Float32OptionArrayOptionOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionArrayOptionOptionOptionList) FlatMapUint(f func(Float32OptionArrayOptionOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionArrayOptionOptionOptionList) FlatMapUint8(f func(Float32OptionArrayOptionOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionArrayOptionOptionOptionList) FlatMapUint16(f func(Float32OptionArrayOptionOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionArrayOptionOptionOptionList) FlatMapUint32(f func(Float32OptionArrayOptionOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionArrayOptionOptionOptionList) FlatMapUint64(f func(Float32OptionArrayOptionOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionArrayOptionOptionOptionList) FlatMapUintptr(f func(Float32OptionArrayOptionOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionArrayOptionOptionOptionList) FlatMapByte(f func(Float32OptionArrayOptionOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionArrayOptionOptionOptionList) FlatMapRune(f func(Float32OptionArrayOptionOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionArrayOptionOptionOptionList) FlatMapFloat32(f func(Float32OptionArrayOptionOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionArrayOptionOptionOptionList) FlatMapFloat64(f func(Float32OptionArrayOptionOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionArrayOptionOptionOptionList) FlatMapComplex64(f func(Float32OptionArrayOptionOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionArrayOptionOptionOptionList) FlatMapComplex128(f func(Float32OptionArrayOptionOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionArrayOptionOptionOptionList) FlatMapAny(f func(Float32OptionArrayOptionOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionArrayOptionOptionOptionList) FlatMapBool(f func(Float64OptionArrayOptionOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionArrayOptionOptionOptionList) FlatMapString(f func(Float64OptionArrayOptionOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionArrayOptionOptionOptionList) FlatMapInt(f func(Float64OptionArrayOptionOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionArrayOptionOptionOptionList) FlatMapInt8(f func(Float64OptionArrayOptionOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionArrayOptionOptionOptionList) FlatMapInt16(f func(Float64OptionArrayOptionOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionArrayOptionOptionOptionList) FlatMapInt32(f func(Float64OptionArrayOptionOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionArrayOptionOptionOptionList) FlatMapInt64(f func(Float64OptionArrayOptionOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionArrayOptionOptionOptionList) FlatMapUint(f func(Float64OptionArrayOptionOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionArrayOptionOptionOptionList) FlatMapUint8(f func(Float64OptionArrayOptionOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionArrayOptionOptionOptionList) FlatMapUint16(f func(Float64OptionArrayOptionOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionArrayOptionOptionOptionList) FlatMapUint32(f func(Float64OptionArrayOptionOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionArrayOptionOptionOptionList) FlatMapUint64(f func(Float64OptionArrayOptionOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionArrayOptionOptionOptionList) FlatMapUintptr(f func(Float64OptionArrayOptionOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionArrayOptionOptionOptionList) FlatMapByte(f func(Float64OptionArrayOptionOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionArrayOptionOptionOptionList) FlatMapRune(f func(Float64OptionArrayOptionOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionArrayOptionOptionOptionList) FlatMapFloat32(f func(Float64OptionArrayOptionOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionArrayOptionOptionOptionList) FlatMapFloat64(f func(Float64OptionArrayOptionOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionArrayOptionOptionOptionList) FlatMapComplex64(f func(Float64OptionArrayOptionOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionArrayOptionOptionOptionList) FlatMapComplex128(f func(Float64OptionArrayOptionOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionArrayOptionOptionOptionList) FlatMapAny(f func(Float64OptionArrayOptionOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionArrayOptionOptionOptionList) FlatMapBool(f func(Complex64OptionArrayOptionOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionArrayOptionOptionOptionList) FlatMapString(f func(Complex64OptionArrayOptionOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionArrayOptionOptionOptionList) FlatMapInt(f func(Complex64OptionArrayOptionOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionArrayOptionOptionOptionList) FlatMapInt8(f func(Complex64OptionArrayOptionOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionArrayOptionOptionOptionList) FlatMapInt16(f func(Complex64OptionArrayOptionOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionArrayOptionOptionOptionList) FlatMapInt32(f func(Complex64OptionArrayOptionOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionArrayOptionOptionOptionList) FlatMapInt64(f func(Complex64OptionArrayOptionOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionArrayOptionOptionOptionList) FlatMapUint(f func(Complex64OptionArrayOptionOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionArrayOptionOptionOptionList) FlatMapUint8(f func(Complex64OptionArrayOptionOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionArrayOptionOptionOptionList) FlatMapUint16(f func(Complex64OptionArrayOptionOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionArrayOptionOptionOptionList) FlatMapUint32(f func(Complex64OptionArrayOptionOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionArrayOptionOptionOptionList) FlatMapUint64(f func(Complex64OptionArrayOptionOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionArrayOptionOptionOptionList) FlatMapUintptr(f func(Complex64OptionArrayOptionOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionArrayOptionOptionOptionList) FlatMapByte(f func(Complex64OptionArrayOptionOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionArrayOptionOptionOptionList) FlatMapRune(f func(Complex64OptionArrayOptionOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionArrayOptionOptionOptionList) FlatMapFloat32(f func(Complex64OptionArrayOptionOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionArrayOptionOptionOptionList) FlatMapFloat64(f func(Complex64OptionArrayOptionOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionArrayOptionOptionOptionList) FlatMapComplex64(f func(Complex64OptionArrayOptionOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionArrayOptionOptionOptionList) FlatMapComplex128(f func(Complex64OptionArrayOptionOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionArrayOptionOptionOptionList) FlatMapAny(f func(Complex64OptionArrayOptionOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionArrayOptionOptionOptionList) FlatMapBool(f func(Complex128OptionArrayOptionOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionArrayOptionOptionOptionList) FlatMapString(f func(Complex128OptionArrayOptionOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionArrayOptionOptionOptionList) FlatMapInt(f func(Complex128OptionArrayOptionOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionArrayOptionOptionOptionList) FlatMapInt8(f func(Complex128OptionArrayOptionOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionArrayOptionOptionOptionList) FlatMapInt16(f func(Complex128OptionArrayOptionOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionArrayOptionOptionOptionList) FlatMapInt32(f func(Complex128OptionArrayOptionOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionArrayOptionOptionOptionList) FlatMapInt64(f func(Complex128OptionArrayOptionOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionArrayOptionOptionOptionList) FlatMapUint(f func(Complex128OptionArrayOptionOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionArrayOptionOptionOptionList) FlatMapUint8(f func(Complex128OptionArrayOptionOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionArrayOptionOptionOptionList) FlatMapUint16(f func(Complex128OptionArrayOptionOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionArrayOptionOptionOptionList) FlatMapUint32(f func(Complex128OptionArrayOptionOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionArrayOptionOptionOptionList) FlatMapUint64(f func(Complex128OptionArrayOptionOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionArrayOptionOptionOptionList) FlatMapUintptr(f func(Complex128OptionArrayOptionOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionArrayOptionOptionOptionList) FlatMapByte(f func(Complex128OptionArrayOptionOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionArrayOptionOptionOptionList) FlatMapRune(f func(Complex128OptionArrayOptionOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionArrayOptionOptionOptionList) FlatMapFloat32(f func(Complex128OptionArrayOptionOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionArrayOptionOptionOptionList) FlatMapFloat64(f func(Complex128OptionArrayOptionOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionArrayOptionOptionOptionList) FlatMapComplex64(f func(Complex128OptionArrayOptionOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionArrayOptionOptionOptionList) FlatMapComplex128(f func(Complex128OptionArrayOptionOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionArrayOptionOptionOptionList) FlatMapAny(f func(Complex128OptionArrayOptionOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionArrayOptionOptionOptionList) FlatMapBool(f func(AnyOptionArrayOptionOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionArrayOptionOptionOptionList) FlatMapString(f func(AnyOptionArrayOptionOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionArrayOptionOptionOptionList) FlatMapInt(f func(AnyOptionArrayOptionOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionArrayOptionOptionOptionList) FlatMapInt8(f func(AnyOptionArrayOptionOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionArrayOptionOptionOptionList) FlatMapInt16(f func(AnyOptionArrayOptionOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionArrayOptionOptionOptionList) FlatMapInt32(f func(AnyOptionArrayOptionOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionArrayOptionOptionOptionList) FlatMapInt64(f func(AnyOptionArrayOptionOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionArrayOptionOptionOptionList) FlatMapUint(f func(AnyOptionArrayOptionOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionArrayOptionOptionOptionList) FlatMapUint8(f func(AnyOptionArrayOptionOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionArrayOptionOptionOptionList) FlatMapUint16(f func(AnyOptionArrayOptionOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionArrayOptionOptionOptionList) FlatMapUint32(f func(AnyOptionArrayOptionOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionArrayOptionOptionOptionList) FlatMapUint64(f func(AnyOptionArrayOptionOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionArrayOptionOptionOptionList) FlatMapUintptr(f func(AnyOptionArrayOptionOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionArrayOptionOptionOptionList) FlatMapByte(f func(AnyOptionArrayOptionOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionArrayOptionOptionOptionList) FlatMapRune(f func(AnyOptionArrayOptionOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionArrayOptionOptionOptionList) FlatMapFloat32(f func(AnyOptionArrayOptionOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionArrayOptionOptionOptionList) FlatMapFloat64(f func(AnyOptionArrayOptionOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionArrayOptionOptionOptionList) FlatMapComplex64(f func(AnyOptionArrayOptionOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionArrayOptionOptionOptionList) FlatMapComplex128(f func(AnyOptionArrayOptionOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionArrayOptionOptionOptionList) FlatMapAny(f func(AnyOptionArrayOptionOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListOptionOptionOptionList) FlatMapBool(f func(BoolListOptionOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListOptionOptionOptionList) FlatMapString(f func(BoolListOptionOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListOptionOptionOptionList) FlatMapInt(f func(BoolListOptionOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListOptionOptionOptionList) FlatMapInt8(f func(BoolListOptionOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListOptionOptionOptionList) FlatMapInt16(f func(BoolListOptionOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListOptionOptionOptionList) FlatMapInt32(f func(BoolListOptionOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListOptionOptionOptionList) FlatMapInt64(f func(BoolListOptionOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListOptionOptionOptionList) FlatMapUint(f func(BoolListOptionOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListOptionOptionOptionList) FlatMapUint8(f func(BoolListOptionOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListOptionOptionOptionList) FlatMapUint16(f func(BoolListOptionOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListOptionOptionOptionList) FlatMapUint32(f func(BoolListOptionOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListOptionOptionOptionList) FlatMapUint64(f func(BoolListOptionOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListOptionOptionOptionList) FlatMapUintptr(f func(BoolListOptionOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListOptionOptionOptionList) FlatMapByte(f func(BoolListOptionOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListOptionOptionOptionList) FlatMapRune(f func(BoolListOptionOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListOptionOptionOptionList) FlatMapFloat32(f func(BoolListOptionOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListOptionOptionOptionList) FlatMapFloat64(f func(BoolListOptionOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListOptionOptionOptionList) FlatMapComplex64(f func(BoolListOptionOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListOptionOptionOptionList) FlatMapComplex128(f func(BoolListOptionOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListOptionOptionOptionList) FlatMapAny(f func(BoolListOptionOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListOptionOptionOptionList) FlatMapBool(f func(StringListOptionOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListOptionOptionOptionList) FlatMapString(f func(StringListOptionOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListOptionOptionOptionList) FlatMapInt(f func(StringListOptionOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListOptionOptionOptionList) FlatMapInt8(f func(StringListOptionOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListOptionOptionOptionList) FlatMapInt16(f func(StringListOptionOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListOptionOptionOptionList) FlatMapInt32(f func(StringListOptionOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListOptionOptionOptionList) FlatMapInt64(f func(StringListOptionOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListOptionOptionOptionList) FlatMapUint(f func(StringListOptionOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListOptionOptionOptionList) FlatMapUint8(f func(StringListOptionOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListOptionOptionOptionList) FlatMapUint16(f func(StringListOptionOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListOptionOptionOptionList) FlatMapUint32(f func(StringListOptionOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListOptionOptionOptionList) FlatMapUint64(f func(StringListOptionOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListOptionOptionOptionList) FlatMapUintptr(f func(StringListOptionOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListOptionOptionOptionList) FlatMapByte(f func(StringListOptionOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListOptionOptionOptionList) FlatMapRune(f func(StringListOptionOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListOptionOptionOptionList) FlatMapFloat32(f func(StringListOptionOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListOptionOptionOptionList) FlatMapFloat64(f func(StringListOptionOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListOptionOptionOptionList) FlatMapComplex64(f func(StringListOptionOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListOptionOptionOptionList) FlatMapComplex128(f func(StringListOptionOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListOptionOptionOptionList) FlatMapAny(f func(StringListOptionOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListOptionOptionOptionList) FlatMapBool(f func(IntListOptionOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListOptionOptionOptionList) FlatMapString(f func(IntListOptionOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListOptionOptionOptionList) FlatMapInt(f func(IntListOptionOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListOptionOptionOptionList) FlatMapInt8(f func(IntListOptionOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListOptionOptionOptionList) FlatMapInt16(f func(IntListOptionOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListOptionOptionOptionList) FlatMapInt32(f func(IntListOptionOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListOptionOptionOptionList) FlatMapInt64(f func(IntListOptionOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListOptionOptionOptionList) FlatMapUint(f func(IntListOptionOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListOptionOptionOptionList) FlatMapUint8(f func(IntListOptionOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListOptionOptionOptionList) FlatMapUint16(f func(IntListOptionOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListOptionOptionOptionList) FlatMapUint32(f func(IntListOptionOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListOptionOptionOptionList) FlatMapUint64(f func(IntListOptionOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListOptionOptionOptionList) FlatMapUintptr(f func(IntListOptionOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListOptionOptionOptionList) FlatMapByte(f func(IntListOptionOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListOptionOptionOptionList) FlatMapRune(f func(IntListOptionOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListOptionOptionOptionList) FlatMapFloat32(f func(IntListOptionOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListOptionOptionOptionList) FlatMapFloat64(f func(IntListOptionOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListOptionOptionOptionList) FlatMapComplex64(f func(IntListOptionOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListOptionOptionOptionList) FlatMapComplex128(f func(IntListOptionOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListOptionOptionOptionList) FlatMapAny(f func(IntListOptionOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ListOptionOptionOptionList) FlatMapBool(f func(Int8ListOptionOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ListOptionOptionOptionList) FlatMapString(f func(Int8ListOptionOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ListOptionOptionOptionList) FlatMapInt(f func(Int8ListOptionOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ListOptionOptionOptionList) FlatMapInt8(f func(Int8ListOptionOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ListOptionOptionOptionList) FlatMapInt16(f func(Int8ListOptionOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ListOptionOptionOptionList) FlatMapInt32(f func(Int8ListOptionOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ListOptionOptionOptionList) FlatMapInt64(f func(Int8ListOptionOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ListOptionOptionOptionList) FlatMapUint(f func(Int8ListOptionOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ListOptionOptionOptionList) FlatMapUint8(f func(Int8ListOptionOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ListOptionOptionOptionList) FlatMapUint16(f func(Int8ListOptionOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ListOptionOptionOptionList) FlatMapUint32(f func(Int8ListOptionOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ListOptionOptionOptionList) FlatMapUint64(f func(Int8ListOptionOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ListOptionOptionOptionList) FlatMapUintptr(f func(Int8ListOptionOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ListOptionOptionOptionList) FlatMapByte(f func(Int8ListOptionOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ListOptionOptionOptionList) FlatMapRune(f func(Int8ListOptionOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ListOptionOptionOptionList) FlatMapFloat32(f func(Int8ListOptionOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ListOptionOptionOptionList) FlatMapFloat64(f func(Int8ListOptionOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ListOptionOptionOptionList) FlatMapComplex64(f func(Int8ListOptionOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ListOptionOptionOptionList) FlatMapComplex128(f func(Int8ListOptionOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ListOptionOptionOptionList) FlatMapAny(f func(Int8ListOptionOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ListOptionOptionOptionList) FlatMapBool(f func(Int16ListOptionOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ListOptionOptionOptionList) FlatMapString(f func(Int16ListOptionOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ListOptionOptionOptionList) FlatMapInt(f func(Int16ListOptionOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ListOptionOptionOptionList) FlatMapInt8(f func(Int16ListOptionOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ListOptionOptionOptionList) FlatMapInt16(f func(Int16ListOptionOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ListOptionOptionOptionList) FlatMapInt32(f func(Int16ListOptionOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ListOptionOptionOptionList) FlatMapInt64(f func(Int16ListOptionOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ListOptionOptionOptionList) FlatMapUint(f func(Int16ListOptionOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ListOptionOptionOptionList) FlatMapUint8(f func(Int16ListOptionOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ListOptionOptionOptionList) FlatMapUint16(f func(Int16ListOptionOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ListOptionOptionOptionList) FlatMapUint32(f func(Int16ListOptionOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ListOptionOptionOptionList) FlatMapUint64(f func(Int16ListOptionOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ListOptionOptionOptionList) FlatMapUintptr(f func(Int16ListOptionOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ListOptionOptionOptionList) FlatMapByte(f func(Int16ListOptionOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ListOptionOptionOptionList) FlatMapRune(f func(Int16ListOptionOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ListOptionOptionOptionList) FlatMapFloat32(f func(Int16ListOptionOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ListOptionOptionOptionList) FlatMapFloat64(f func(Int16ListOptionOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ListOptionOptionOptionList) FlatMapComplex64(f func(Int16ListOptionOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ListOptionOptionOptionList) FlatMapComplex128(f func(Int16ListOptionOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ListOptionOptionOptionList) FlatMapAny(f func(Int16ListOptionOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListOptionOptionOptionList) FlatMapBool(f func(Int32ListOptionOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListOptionOptionOptionList) FlatMapString(f func(Int32ListOptionOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListOptionOptionOptionList) FlatMapInt(f func(Int32ListOptionOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListOptionOptionOptionList) FlatMapInt8(f func(Int32ListOptionOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListOptionOptionOptionList) FlatMapInt16(f func(Int32ListOptionOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListOptionOptionOptionList) FlatMapInt32(f func(Int32ListOptionOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListOptionOptionOptionList) FlatMapInt64(f func(Int32ListOptionOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListOptionOptionOptionList) FlatMapUint(f func(Int32ListOptionOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListOptionOptionOptionList) FlatMapUint8(f func(Int32ListOptionOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListOptionOptionOptionList) FlatMapUint16(f func(Int32ListOptionOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListOptionOptionOptionList) FlatMapUint32(f func(Int32ListOptionOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListOptionOptionOptionList) FlatMapUint64(f func(Int32ListOptionOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListOptionOptionOptionList) FlatMapUintptr(f func(Int32ListOptionOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListOptionOptionOptionList) FlatMapByte(f func(Int32ListOptionOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListOptionOptionOptionList) FlatMapRune(f func(Int32ListOptionOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListOptionOptionOptionList) FlatMapFloat32(f func(Int32ListOptionOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListOptionOptionOptionList) FlatMapFloat64(f func(Int32ListOptionOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListOptionOptionOptionList) FlatMapComplex64(f func(Int32ListOptionOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListOptionOptionOptionList) FlatMapComplex128(f func(Int32ListOptionOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListOptionOptionOptionList) FlatMapAny(f func(Int32ListOptionOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListOptionOptionOptionList) FlatMapBool(f func(Int64ListOptionOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListOptionOptionOptionList) FlatMapString(f func(Int64ListOptionOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListOptionOptionOptionList) FlatMapInt(f func(Int64ListOptionOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListOptionOptionOptionList) FlatMapInt8(f func(Int64ListOptionOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListOptionOptionOptionList) FlatMapInt16(f func(Int64ListOptionOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListOptionOptionOptionList) FlatMapInt32(f func(Int64ListOptionOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListOptionOptionOptionList) FlatMapInt64(f func(Int64ListOptionOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListOptionOptionOptionList) FlatMapUint(f func(Int64ListOptionOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListOptionOptionOptionList) FlatMapUint8(f func(Int64ListOptionOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListOptionOptionOptionList) FlatMapUint16(f func(Int64ListOptionOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListOptionOptionOptionList) FlatMapUint32(f func(Int64ListOptionOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListOptionOptionOptionList) FlatMapUint64(f func(Int64ListOptionOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListOptionOptionOptionList) FlatMapUintptr(f func(Int64ListOptionOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListOptionOptionOptionList) FlatMapByte(f func(Int64ListOptionOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListOptionOptionOptionList) FlatMapRune(f func(Int64ListOptionOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListOptionOptionOptionList) FlatMapFloat32(f func(Int64ListOptionOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListOptionOptionOptionList) FlatMapFloat64(f func(Int64ListOptionOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListOptionOptionOptionList) FlatMapComplex64(f func(Int64ListOptionOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListOptionOptionOptionList) FlatMapComplex128(f func(Int64ListOptionOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListOptionOptionOptionList) FlatMapAny(f func(Int64ListOptionOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListOptionOptionOptionList) FlatMapBool(f func(UintListOptionOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListOptionOptionOptionList) FlatMapString(f func(UintListOptionOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListOptionOptionOptionList) FlatMapInt(f func(UintListOptionOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListOptionOptionOptionList) FlatMapInt8(f func(UintListOptionOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListOptionOptionOptionList) FlatMapInt16(f func(UintListOptionOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListOptionOptionOptionList) FlatMapInt32(f func(UintListOptionOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListOptionOptionOptionList) FlatMapInt64(f func(UintListOptionOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListOptionOptionOptionList) FlatMapUint(f func(UintListOptionOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListOptionOptionOptionList) FlatMapUint8(f func(UintListOptionOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListOptionOptionOptionList) FlatMapUint16(f func(UintListOptionOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListOptionOptionOptionList) FlatMapUint32(f func(UintListOptionOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListOptionOptionOptionList) FlatMapUint64(f func(UintListOptionOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListOptionOptionOptionList) FlatMapUintptr(f func(UintListOptionOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListOptionOptionOptionList) FlatMapByte(f func(UintListOptionOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListOptionOptionOptionList) FlatMapRune(f func(UintListOptionOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListOptionOptionOptionList) FlatMapFloat32(f func(UintListOptionOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListOptionOptionOptionList) FlatMapFloat64(f func(UintListOptionOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListOptionOptionOptionList) FlatMapComplex64(f func(UintListOptionOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListOptionOptionOptionList) FlatMapComplex128(f func(UintListOptionOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListOptionOptionOptionList) FlatMapAny(f func(UintListOptionOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ListOptionOptionOptionList) FlatMapBool(f func(Uint8ListOptionOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ListOptionOptionOptionList) FlatMapString(f func(Uint8ListOptionOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ListOptionOptionOptionList) FlatMapInt(f func(Uint8ListOptionOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ListOptionOptionOptionList) FlatMapInt8(f func(Uint8ListOptionOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ListOptionOptionOptionList) FlatMapInt16(f func(Uint8ListOptionOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ListOptionOptionOptionList) FlatMapInt32(f func(Uint8ListOptionOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ListOptionOptionOptionList) FlatMapInt64(f func(Uint8ListOptionOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ListOptionOptionOptionList) FlatMapUint(f func(Uint8ListOptionOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ListOptionOptionOptionList) FlatMapUint8(f func(Uint8ListOptionOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ListOptionOptionOptionList) FlatMapUint16(f func(Uint8ListOptionOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ListOptionOptionOptionList) FlatMapUint32(f func(Uint8ListOptionOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ListOptionOptionOptionList) FlatMapUint64(f func(Uint8ListOptionOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ListOptionOptionOptionList) FlatMapUintptr(f func(Uint8ListOptionOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ListOptionOptionOptionList) FlatMapByte(f func(Uint8ListOptionOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ListOptionOptionOptionList) FlatMapRune(f func(Uint8ListOptionOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ListOptionOptionOptionList) FlatMapFloat32(f func(Uint8ListOptionOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ListOptionOptionOptionList) FlatMapFloat64(f func(Uint8ListOptionOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ListOptionOptionOptionList) FlatMapComplex64(f func(Uint8ListOptionOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ListOptionOptionOptionList) FlatMapComplex128(f func(Uint8ListOptionOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ListOptionOptionOptionList) FlatMapAny(f func(Uint8ListOptionOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ListOptionOptionOptionList) FlatMapBool(f func(Uint16ListOptionOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ListOptionOptionOptionList) FlatMapString(f func(Uint16ListOptionOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ListOptionOptionOptionList) FlatMapInt(f func(Uint16ListOptionOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ListOptionOptionOptionList) FlatMapInt8(f func(Uint16ListOptionOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ListOptionOptionOptionList) FlatMapInt16(f func(Uint16ListOptionOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ListOptionOptionOptionList) FlatMapInt32(f func(Uint16ListOptionOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ListOptionOptionOptionList) FlatMapInt64(f func(Uint16ListOptionOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ListOptionOptionOptionList) FlatMapUint(f func(Uint16ListOptionOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ListOptionOptionOptionList) FlatMapUint8(f func(Uint16ListOptionOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ListOptionOptionOptionList) FlatMapUint16(f func(Uint16ListOptionOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ListOptionOptionOptionList) FlatMapUint32(f func(Uint16ListOptionOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ListOptionOptionOptionList) FlatMapUint64(f func(Uint16ListOptionOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ListOptionOptionOptionList) FlatMapUintptr(f func(Uint16ListOptionOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ListOptionOptionOptionList) FlatMapByte(f func(Uint16ListOptionOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ListOptionOptionOptionList) FlatMapRune(f func(Uint16ListOptionOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ListOptionOptionOptionList) FlatMapFloat32(f func(Uint16ListOptionOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ListOptionOptionOptionList) FlatMapFloat64(f func(Uint16ListOptionOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ListOptionOptionOptionList) FlatMapComplex64(f func(Uint16ListOptionOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ListOptionOptionOptionList) FlatMapComplex128(f func(Uint16ListOptionOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ListOptionOptionOptionList) FlatMapAny(f func(Uint16ListOptionOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ListOptionOptionOptionList) FlatMapBool(f func(Uint32ListOptionOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ListOptionOptionOptionList) FlatMapString(f func(Uint32ListOptionOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ListOptionOptionOptionList) FlatMapInt(f func(Uint32ListOptionOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ListOptionOptionOptionList) FlatMapInt8(f func(Uint32ListOptionOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ListOptionOptionOptionList) FlatMapInt16(f func(Uint32ListOptionOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ListOptionOptionOptionList) FlatMapInt32(f func(Uint32ListOptionOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ListOptionOptionOptionList) FlatMapInt64(f func(Uint32ListOptionOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ListOptionOptionOptionList) FlatMapUint(f func(Uint32ListOptionOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ListOptionOptionOptionList) FlatMapUint8(f func(Uint32ListOptionOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ListOptionOptionOptionList) FlatMapUint16(f func(Uint32ListOptionOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ListOptionOptionOptionList) FlatMapUint32(f func(Uint32ListOptionOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ListOptionOptionOptionList) FlatMapUint64(f func(Uint32ListOptionOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ListOptionOptionOptionList) FlatMapUintptr(f func(Uint32ListOptionOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ListOptionOptionOptionList) FlatMapByte(f func(Uint32ListOptionOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ListOptionOptionOptionList) FlatMapRune(f func(Uint32ListOptionOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ListOptionOptionOptionList) FlatMapFloat32(f func(Uint32ListOptionOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ListOptionOptionOptionList) FlatMapFloat64(f func(Uint32ListOptionOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ListOptionOptionOptionList) FlatMapComplex64(f func(Uint32ListOptionOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ListOptionOptionOptionList) FlatMapComplex128(f func(Uint32ListOptionOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ListOptionOptionOptionList) FlatMapAny(f func(Uint32ListOptionOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListOptionOptionOptionList) FlatMapBool(f func(Uint64ListOptionOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListOptionOptionOptionList) FlatMapString(f func(Uint64ListOptionOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListOptionOptionOptionList) FlatMapInt(f func(Uint64ListOptionOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListOptionOptionOptionList) FlatMapInt8(f func(Uint64ListOptionOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListOptionOptionOptionList) FlatMapInt16(f func(Uint64ListOptionOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListOptionOptionOptionList) FlatMapInt32(f func(Uint64ListOptionOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListOptionOptionOptionList) FlatMapInt64(f func(Uint64ListOptionOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListOptionOptionOptionList) FlatMapUint(f func(Uint64ListOptionOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListOptionOptionOptionList) FlatMapUint8(f func(Uint64ListOptionOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListOptionOptionOptionList) FlatMapUint16(f func(Uint64ListOptionOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListOptionOptionOptionList) FlatMapUint32(f func(Uint64ListOptionOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListOptionOptionOptionList) FlatMapUint64(f func(Uint64ListOptionOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListOptionOptionOptionList) FlatMapUintptr(f func(Uint64ListOptionOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListOptionOptionOptionList) FlatMapByte(f func(Uint64ListOptionOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListOptionOptionOptionList) FlatMapRune(f func(Uint64ListOptionOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListOptionOptionOptionList) FlatMapFloat32(f func(Uint64ListOptionOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListOptionOptionOptionList) FlatMapFloat64(f func(Uint64ListOptionOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListOptionOptionOptionList) FlatMapComplex64(f func(Uint64ListOptionOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListOptionOptionOptionList) FlatMapComplex128(f func(Uint64ListOptionOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListOptionOptionOptionList) FlatMapAny(f func(Uint64ListOptionOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListOptionOptionOptionList) FlatMapBool(f func(UintptrListOptionOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListOptionOptionOptionList) FlatMapString(f func(UintptrListOptionOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListOptionOptionOptionList) FlatMapInt(f func(UintptrListOptionOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListOptionOptionOptionList) FlatMapInt8(f func(UintptrListOptionOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListOptionOptionOptionList) FlatMapInt16(f func(UintptrListOptionOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListOptionOptionOptionList) FlatMapInt32(f func(UintptrListOptionOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListOptionOptionOptionList) FlatMapInt64(f func(UintptrListOptionOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListOptionOptionOptionList) FlatMapUint(f func(UintptrListOptionOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListOptionOptionOptionList) FlatMapUint8(f func(UintptrListOptionOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListOptionOptionOptionList) FlatMapUint16(f func(UintptrListOptionOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListOptionOptionOptionList) FlatMapUint32(f func(UintptrListOptionOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListOptionOptionOptionList) FlatMapUint64(f func(UintptrListOptionOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListOptionOptionOptionList) FlatMapUintptr(f func(UintptrListOptionOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListOptionOptionOptionList) FlatMapByte(f func(UintptrListOptionOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListOptionOptionOptionList) FlatMapRune(f func(UintptrListOptionOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListOptionOptionOptionList) FlatMapFloat32(f func(UintptrListOptionOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListOptionOptionOptionList) FlatMapFloat64(f func(UintptrListOptionOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListOptionOptionOptionList) FlatMapComplex64(f func(UintptrListOptionOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListOptionOptionOptionList) FlatMapComplex128(f func(UintptrListOptionOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListOptionOptionOptionList) FlatMapAny(f func(UintptrListOptionOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListOptionOptionOptionList) FlatMapBool(f func(ByteListOptionOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListOptionOptionOptionList) FlatMapString(f func(ByteListOptionOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListOptionOptionOptionList) FlatMapInt(f func(ByteListOptionOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListOptionOptionOptionList) FlatMapInt8(f func(ByteListOptionOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListOptionOptionOptionList) FlatMapInt16(f func(ByteListOptionOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListOptionOptionOptionList) FlatMapInt32(f func(ByteListOptionOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListOptionOptionOptionList) FlatMapInt64(f func(ByteListOptionOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListOptionOptionOptionList) FlatMapUint(f func(ByteListOptionOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListOptionOptionOptionList) FlatMapUint8(f func(ByteListOptionOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListOptionOptionOptionList) FlatMapUint16(f func(ByteListOptionOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListOptionOptionOptionList) FlatMapUint32(f func(ByteListOptionOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListOptionOptionOptionList) FlatMapUint64(f func(ByteListOptionOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListOptionOptionOptionList) FlatMapUintptr(f func(ByteListOptionOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListOptionOptionOptionList) FlatMapByte(f func(ByteListOptionOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListOptionOptionOptionList) FlatMapRune(f func(ByteListOptionOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListOptionOptionOptionList) FlatMapFloat32(f func(ByteListOptionOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListOptionOptionOptionList) FlatMapFloat64(f func(ByteListOptionOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListOptionOptionOptionList) FlatMapComplex64(f func(ByteListOptionOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListOptionOptionOptionList) FlatMapComplex128(f func(ByteListOptionOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListOptionOptionOptionList) FlatMapAny(f func(ByteListOptionOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListOptionOptionOptionList) FlatMapBool(f func(RuneListOptionOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListOptionOptionOptionList) FlatMapString(f func(RuneListOptionOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListOptionOptionOptionList) FlatMapInt(f func(RuneListOptionOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListOptionOptionOptionList) FlatMapInt8(f func(RuneListOptionOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListOptionOptionOptionList) FlatMapInt16(f func(RuneListOptionOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListOptionOptionOptionList) FlatMapInt32(f func(RuneListOptionOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListOptionOptionOptionList) FlatMapInt64(f func(RuneListOptionOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListOptionOptionOptionList) FlatMapUint(f func(RuneListOptionOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListOptionOptionOptionList) FlatMapUint8(f func(RuneListOptionOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListOptionOptionOptionList) FlatMapUint16(f func(RuneListOptionOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListOptionOptionOptionList) FlatMapUint32(f func(RuneListOptionOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListOptionOptionOptionList) FlatMapUint64(f func(RuneListOptionOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListOptionOptionOptionList) FlatMapUintptr(f func(RuneListOptionOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListOptionOptionOptionList) FlatMapByte(f func(RuneListOptionOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListOptionOptionOptionList) FlatMapRune(f func(RuneListOptionOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListOptionOptionOptionList) FlatMapFloat32(f func(RuneListOptionOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListOptionOptionOptionList) FlatMapFloat64(f func(RuneListOptionOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListOptionOptionOptionList) FlatMapComplex64(f func(RuneListOptionOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListOptionOptionOptionList) FlatMapComplex128(f func(RuneListOptionOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListOptionOptionOptionList) FlatMapAny(f func(RuneListOptionOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListOptionOptionOptionList) FlatMapBool(f func(Float32ListOptionOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListOptionOptionOptionList) FlatMapString(f func(Float32ListOptionOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListOptionOptionOptionList) FlatMapInt(f func(Float32ListOptionOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListOptionOptionOptionList) FlatMapInt8(f func(Float32ListOptionOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListOptionOptionOptionList) FlatMapInt16(f func(Float32ListOptionOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListOptionOptionOptionList) FlatMapInt32(f func(Float32ListOptionOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListOptionOptionOptionList) FlatMapInt64(f func(Float32ListOptionOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListOptionOptionOptionList) FlatMapUint(f func(Float32ListOptionOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListOptionOptionOptionList) FlatMapUint8(f func(Float32ListOptionOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListOptionOptionOptionList) FlatMapUint16(f func(Float32ListOptionOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListOptionOptionOptionList) FlatMapUint32(f func(Float32ListOptionOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListOptionOptionOptionList) FlatMapUint64(f func(Float32ListOptionOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListOptionOptionOptionList) FlatMapUintptr(f func(Float32ListOptionOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListOptionOptionOptionList) FlatMapByte(f func(Float32ListOptionOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListOptionOptionOptionList) FlatMapRune(f func(Float32ListOptionOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListOptionOptionOptionList) FlatMapFloat32(f func(Float32ListOptionOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListOptionOptionOptionList) FlatMapFloat64(f func(Float32ListOptionOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListOptionOptionOptionList) FlatMapComplex64(f func(Float32ListOptionOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListOptionOptionOptionList) FlatMapComplex128(f func(Float32ListOptionOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListOptionOptionOptionList) FlatMapAny(f func(Float32ListOptionOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListOptionOptionOptionList) FlatMapBool(f func(Float64ListOptionOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListOptionOptionOptionList) FlatMapString(f func(Float64ListOptionOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListOptionOptionOptionList) FlatMapInt(f func(Float64ListOptionOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListOptionOptionOptionList) FlatMapInt8(f func(Float64ListOptionOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListOptionOptionOptionList) FlatMapInt16(f func(Float64ListOptionOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListOptionOptionOptionList) FlatMapInt32(f func(Float64ListOptionOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListOptionOptionOptionList) FlatMapInt64(f func(Float64ListOptionOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListOptionOptionOptionList) FlatMapUint(f func(Float64ListOptionOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListOptionOptionOptionList) FlatMapUint8(f func(Float64ListOptionOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListOptionOptionOptionList) FlatMapUint16(f func(Float64ListOptionOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListOptionOptionOptionList) FlatMapUint32(f func(Float64ListOptionOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListOptionOptionOptionList) FlatMapUint64(f func(Float64ListOptionOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListOptionOptionOptionList) FlatMapUintptr(f func(Float64ListOptionOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListOptionOptionOptionList) FlatMapByte(f func(Float64ListOptionOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListOptionOptionOptionList) FlatMapRune(f func(Float64ListOptionOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListOptionOptionOptionList) FlatMapFloat32(f func(Float64ListOptionOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListOptionOptionOptionList) FlatMapFloat64(f func(Float64ListOptionOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListOptionOptionOptionList) FlatMapComplex64(f func(Float64ListOptionOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListOptionOptionOptionList) FlatMapComplex128(f func(Float64ListOptionOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListOptionOptionOptionList) FlatMapAny(f func(Float64ListOptionOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ListOptionOptionOptionList) FlatMapBool(f func(Complex64ListOptionOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ListOptionOptionOptionList) FlatMapString(f func(Complex64ListOptionOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ListOptionOptionOptionList) FlatMapInt(f func(Complex64ListOptionOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ListOptionOptionOptionList) FlatMapInt8(f func(Complex64ListOptionOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ListOptionOptionOptionList) FlatMapInt16(f func(Complex64ListOptionOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ListOptionOptionOptionList) FlatMapInt32(f func(Complex64ListOptionOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ListOptionOptionOptionList) FlatMapInt64(f func(Complex64ListOptionOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ListOptionOptionOptionList) FlatMapUint(f func(Complex64ListOptionOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ListOptionOptionOptionList) FlatMapUint8(f func(Complex64ListOptionOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ListOptionOptionOptionList) FlatMapUint16(f func(Complex64ListOptionOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ListOptionOptionOptionList) FlatMapUint32(f func(Complex64ListOptionOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ListOptionOptionOptionList) FlatMapUint64(f func(Complex64ListOptionOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ListOptionOptionOptionList) FlatMapUintptr(f func(Complex64ListOptionOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ListOptionOptionOptionList) FlatMapByte(f func(Complex64ListOptionOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ListOptionOptionOptionList) FlatMapRune(f func(Complex64ListOptionOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ListOptionOptionOptionList) FlatMapFloat32(f func(Complex64ListOptionOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ListOptionOptionOptionList) FlatMapFloat64(f func(Complex64ListOptionOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ListOptionOptionOptionList) FlatMapComplex64(f func(Complex64ListOptionOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ListOptionOptionOptionList) FlatMapComplex128(f func(Complex64ListOptionOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ListOptionOptionOptionList) FlatMapAny(f func(Complex64ListOptionOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ListOptionOptionOptionList) FlatMapBool(f func(Complex128ListOptionOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ListOptionOptionOptionList) FlatMapString(f func(Complex128ListOptionOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ListOptionOptionOptionList) FlatMapInt(f func(Complex128ListOptionOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ListOptionOptionOptionList) FlatMapInt8(f func(Complex128ListOptionOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ListOptionOptionOptionList) FlatMapInt16(f func(Complex128ListOptionOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ListOptionOptionOptionList) FlatMapInt32(f func(Complex128ListOptionOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ListOptionOptionOptionList) FlatMapInt64(f func(Complex128ListOptionOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ListOptionOptionOptionList) FlatMapUint(f func(Complex128ListOptionOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ListOptionOptionOptionList) FlatMapUint8(f func(Complex128ListOptionOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ListOptionOptionOptionList) FlatMapUint16(f func(Complex128ListOptionOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ListOptionOptionOptionList) FlatMapUint32(f func(Complex128ListOptionOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ListOptionOptionOptionList) FlatMapUint64(f func(Complex128ListOptionOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ListOptionOptionOptionList) FlatMapUintptr(f func(Complex128ListOptionOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ListOptionOptionOptionList) FlatMapByte(f func(Complex128ListOptionOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ListOptionOptionOptionList) FlatMapRune(f func(Complex128ListOptionOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ListOptionOptionOptionList) FlatMapFloat32(f func(Complex128ListOptionOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ListOptionOptionOptionList) FlatMapFloat64(f func(Complex128ListOptionOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ListOptionOptionOptionList) FlatMapComplex64(f func(Complex128ListOptionOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ListOptionOptionOptionList) FlatMapComplex128(f func(Complex128ListOptionOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ListOptionOptionOptionList) FlatMapAny(f func(Complex128ListOptionOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListOptionOptionOptionList) FlatMapBool(f func(AnyListOptionOptionOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListOptionOptionOptionList) FlatMapString(f func(AnyListOptionOptionOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListOptionOptionOptionList) FlatMapInt(f func(AnyListOptionOptionOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListOptionOptionOptionList) FlatMapInt8(f func(AnyListOptionOptionOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListOptionOptionOptionList) FlatMapInt16(f func(AnyListOptionOptionOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListOptionOptionOptionList) FlatMapInt32(f func(AnyListOptionOptionOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListOptionOptionOptionList) FlatMapInt64(f func(AnyListOptionOptionOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListOptionOptionOptionList) FlatMapUint(f func(AnyListOptionOptionOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListOptionOptionOptionList) FlatMapUint8(f func(AnyListOptionOptionOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListOptionOptionOptionList) FlatMapUint16(f func(AnyListOptionOptionOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListOptionOptionOptionList) FlatMapUint32(f func(AnyListOptionOptionOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListOptionOptionOptionList) FlatMapUint64(f func(AnyListOptionOptionOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListOptionOptionOptionList) FlatMapUintptr(f func(AnyListOptionOptionOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListOptionOptionOptionList) FlatMapByte(f func(AnyListOptionOptionOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListOptionOptionOptionList) FlatMapRune(f func(AnyListOptionOptionOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListOptionOptionOptionList) FlatMapFloat32(f func(AnyListOptionOptionOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListOptionOptionOptionList) FlatMapFloat64(f func(AnyListOptionOptionOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListOptionOptionOptionList) FlatMapComplex64(f func(AnyListOptionOptionOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListOptionOptionOptionList) FlatMapComplex128(f func(AnyListOptionOptionOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListOptionOptionOptionList) FlatMapAny(f func(AnyListOptionOptionOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayList) FlatMapBool(f func([]bool) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayList) FlatMapString(f func([]bool) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayList) FlatMapInt(f func([]bool) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayList) FlatMapInt8(f func([]bool) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayList) FlatMapInt16(f func([]bool) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayList) FlatMapInt32(f func([]bool) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayList) FlatMapInt64(f func([]bool) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayList) FlatMapUint(f func([]bool) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayList) FlatMapUint8(f func([]bool) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayList) FlatMapUint16(f func([]bool) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayList) FlatMapUint32(f func([]bool) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayList) FlatMapUint64(f func([]bool) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayList) FlatMapUintptr(f func([]bool) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayList) FlatMapByte(f func([]bool) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayList) FlatMapRune(f func([]bool) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayList) FlatMapFloat32(f func([]bool) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayList) FlatMapFloat64(f func([]bool) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayList) FlatMapComplex64(f func([]bool) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayList) FlatMapComplex128(f func([]bool) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayList) FlatMapAny(f func([]bool) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayList) FlatMapBool(f func([]string) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayList) FlatMapString(f func([]string) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayList) FlatMapInt(f func([]string) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayList) FlatMapInt8(f func([]string) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayList) FlatMapInt16(f func([]string) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayList) FlatMapInt32(f func([]string) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayList) FlatMapInt64(f func([]string) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayList) FlatMapUint(f func([]string) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayList) FlatMapUint8(f func([]string) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayList) FlatMapUint16(f func([]string) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayList) FlatMapUint32(f func([]string) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayList) FlatMapUint64(f func([]string) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayList) FlatMapUintptr(f func([]string) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayList) FlatMapByte(f func([]string) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayList) FlatMapRune(f func([]string) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayList) FlatMapFloat32(f func([]string) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayList) FlatMapFloat64(f func([]string) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayList) FlatMapComplex64(f func([]string) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayList) FlatMapComplex128(f func([]string) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayList) FlatMapAny(f func([]string) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayList) FlatMapBool(f func([]int) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayList) FlatMapString(f func([]int) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayList) FlatMapInt(f func([]int) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayList) FlatMapInt8(f func([]int) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayList) FlatMapInt16(f func([]int) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayList) FlatMapInt32(f func([]int) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayList) FlatMapInt64(f func([]int) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayList) FlatMapUint(f func([]int) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayList) FlatMapUint8(f func([]int) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayList) FlatMapUint16(f func([]int) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayList) FlatMapUint32(f func([]int) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayList) FlatMapUint64(f func([]int) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayList) FlatMapUintptr(f func([]int) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayList) FlatMapByte(f func([]int) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayList) FlatMapRune(f func([]int) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayList) FlatMapFloat32(f func([]int) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayList) FlatMapFloat64(f func([]int) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayList) FlatMapComplex64(f func([]int) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayList) FlatMapComplex128(f func([]int) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayList) FlatMapAny(f func([]int) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayList) FlatMapBool(f func([]int8) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayList) FlatMapString(f func([]int8) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayList) FlatMapInt(f func([]int8) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayList) FlatMapInt8(f func([]int8) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayList) FlatMapInt16(f func([]int8) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayList) FlatMapInt32(f func([]int8) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayList) FlatMapInt64(f func([]int8) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayList) FlatMapUint(f func([]int8) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayList) FlatMapUint8(f func([]int8) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayList) FlatMapUint16(f func([]int8) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayList) FlatMapUint32(f func([]int8) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayList) FlatMapUint64(f func([]int8) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayList) FlatMapUintptr(f func([]int8) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayList) FlatMapByte(f func([]int8) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayList) FlatMapRune(f func([]int8) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayList) FlatMapFloat32(f func([]int8) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayList) FlatMapFloat64(f func([]int8) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayList) FlatMapComplex64(f func([]int8) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayList) FlatMapComplex128(f func([]int8) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayList) FlatMapAny(f func([]int8) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayList) FlatMapBool(f func([]int16) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayList) FlatMapString(f func([]int16) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayList) FlatMapInt(f func([]int16) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayList) FlatMapInt8(f func([]int16) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayList) FlatMapInt16(f func([]int16) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayList) FlatMapInt32(f func([]int16) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayList) FlatMapInt64(f func([]int16) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayList) FlatMapUint(f func([]int16) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayList) FlatMapUint8(f func([]int16) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayList) FlatMapUint16(f func([]int16) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayList) FlatMapUint32(f func([]int16) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayList) FlatMapUint64(f func([]int16) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayList) FlatMapUintptr(f func([]int16) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayList) FlatMapByte(f func([]int16) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayList) FlatMapRune(f func([]int16) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayList) FlatMapFloat32(f func([]int16) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayList) FlatMapFloat64(f func([]int16) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayList) FlatMapComplex64(f func([]int16) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayList) FlatMapComplex128(f func([]int16) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayList) FlatMapAny(f func([]int16) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayList) FlatMapBool(f func([]int32) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayList) FlatMapString(f func([]int32) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayList) FlatMapInt(f func([]int32) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayList) FlatMapInt8(f func([]int32) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayList) FlatMapInt16(f func([]int32) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayList) FlatMapInt32(f func([]int32) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayList) FlatMapInt64(f func([]int32) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayList) FlatMapUint(f func([]int32) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayList) FlatMapUint8(f func([]int32) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayList) FlatMapUint16(f func([]int32) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayList) FlatMapUint32(f func([]int32) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayList) FlatMapUint64(f func([]int32) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayList) FlatMapUintptr(f func([]int32) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayList) FlatMapByte(f func([]int32) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayList) FlatMapRune(f func([]int32) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayList) FlatMapFloat32(f func([]int32) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayList) FlatMapFloat64(f func([]int32) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayList) FlatMapComplex64(f func([]int32) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayList) FlatMapComplex128(f func([]int32) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayList) FlatMapAny(f func([]int32) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayList) FlatMapBool(f func([]int64) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayList) FlatMapString(f func([]int64) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayList) FlatMapInt(f func([]int64) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayList) FlatMapInt8(f func([]int64) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayList) FlatMapInt16(f func([]int64) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayList) FlatMapInt32(f func([]int64) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayList) FlatMapInt64(f func([]int64) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayList) FlatMapUint(f func([]int64) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayList) FlatMapUint8(f func([]int64) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayList) FlatMapUint16(f func([]int64) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayList) FlatMapUint32(f func([]int64) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayList) FlatMapUint64(f func([]int64) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayList) FlatMapUintptr(f func([]int64) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayList) FlatMapByte(f func([]int64) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayList) FlatMapRune(f func([]int64) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayList) FlatMapFloat32(f func([]int64) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayList) FlatMapFloat64(f func([]int64) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayList) FlatMapComplex64(f func([]int64) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayList) FlatMapComplex128(f func([]int64) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayList) FlatMapAny(f func([]int64) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayList) FlatMapBool(f func([]uint) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayList) FlatMapString(f func([]uint) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayList) FlatMapInt(f func([]uint) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayList) FlatMapInt8(f func([]uint) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayList) FlatMapInt16(f func([]uint) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayList) FlatMapInt32(f func([]uint) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayList) FlatMapInt64(f func([]uint) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayList) FlatMapUint(f func([]uint) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayList) FlatMapUint8(f func([]uint) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayList) FlatMapUint16(f func([]uint) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayList) FlatMapUint32(f func([]uint) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayList) FlatMapUint64(f func([]uint) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayList) FlatMapUintptr(f func([]uint) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayList) FlatMapByte(f func([]uint) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayList) FlatMapRune(f func([]uint) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayList) FlatMapFloat32(f func([]uint) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayList) FlatMapFloat64(f func([]uint) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayList) FlatMapComplex64(f func([]uint) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayList) FlatMapComplex128(f func([]uint) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayList) FlatMapAny(f func([]uint) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayList) FlatMapBool(f func([]uint8) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayList) FlatMapString(f func([]uint8) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayList) FlatMapInt(f func([]uint8) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayList) FlatMapInt8(f func([]uint8) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayList) FlatMapInt16(f func([]uint8) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayList) FlatMapInt32(f func([]uint8) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayList) FlatMapInt64(f func([]uint8) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayList) FlatMapUint(f func([]uint8) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayList) FlatMapUint8(f func([]uint8) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayList) FlatMapUint16(f func([]uint8) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayList) FlatMapUint32(f func([]uint8) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayList) FlatMapUint64(f func([]uint8) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayList) FlatMapUintptr(f func([]uint8) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayList) FlatMapByte(f func([]uint8) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayList) FlatMapRune(f func([]uint8) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayList) FlatMapFloat32(f func([]uint8) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayList) FlatMapFloat64(f func([]uint8) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayList) FlatMapComplex64(f func([]uint8) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayList) FlatMapComplex128(f func([]uint8) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayList) FlatMapAny(f func([]uint8) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayList) FlatMapBool(f func([]uint16) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayList) FlatMapString(f func([]uint16) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayList) FlatMapInt(f func([]uint16) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayList) FlatMapInt8(f func([]uint16) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayList) FlatMapInt16(f func([]uint16) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayList) FlatMapInt32(f func([]uint16) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayList) FlatMapInt64(f func([]uint16) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayList) FlatMapUint(f func([]uint16) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayList) FlatMapUint8(f func([]uint16) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayList) FlatMapUint16(f func([]uint16) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayList) FlatMapUint32(f func([]uint16) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayList) FlatMapUint64(f func([]uint16) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayList) FlatMapUintptr(f func([]uint16) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayList) FlatMapByte(f func([]uint16) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayList) FlatMapRune(f func([]uint16) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayList) FlatMapFloat32(f func([]uint16) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayList) FlatMapFloat64(f func([]uint16) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayList) FlatMapComplex64(f func([]uint16) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayList) FlatMapComplex128(f func([]uint16) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayList) FlatMapAny(f func([]uint16) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayList) FlatMapBool(f func([]uint32) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayList) FlatMapString(f func([]uint32) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayList) FlatMapInt(f func([]uint32) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayList) FlatMapInt8(f func([]uint32) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayList) FlatMapInt16(f func([]uint32) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayList) FlatMapInt32(f func([]uint32) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayList) FlatMapInt64(f func([]uint32) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayList) FlatMapUint(f func([]uint32) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayList) FlatMapUint8(f func([]uint32) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayList) FlatMapUint16(f func([]uint32) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayList) FlatMapUint32(f func([]uint32) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayList) FlatMapUint64(f func([]uint32) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayList) FlatMapUintptr(f func([]uint32) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayList) FlatMapByte(f func([]uint32) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayList) FlatMapRune(f func([]uint32) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayList) FlatMapFloat32(f func([]uint32) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayList) FlatMapFloat64(f func([]uint32) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayList) FlatMapComplex64(f func([]uint32) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayList) FlatMapComplex128(f func([]uint32) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayList) FlatMapAny(f func([]uint32) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayList) FlatMapBool(f func([]uint64) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayList) FlatMapString(f func([]uint64) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayList) FlatMapInt(f func([]uint64) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayList) FlatMapInt8(f func([]uint64) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayList) FlatMapInt16(f func([]uint64) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayList) FlatMapInt32(f func([]uint64) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayList) FlatMapInt64(f func([]uint64) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayList) FlatMapUint(f func([]uint64) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayList) FlatMapUint8(f func([]uint64) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayList) FlatMapUint16(f func([]uint64) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayList) FlatMapUint32(f func([]uint64) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayList) FlatMapUint64(f func([]uint64) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayList) FlatMapUintptr(f func([]uint64) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayList) FlatMapByte(f func([]uint64) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayList) FlatMapRune(f func([]uint64) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayList) FlatMapFloat32(f func([]uint64) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayList) FlatMapFloat64(f func([]uint64) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayList) FlatMapComplex64(f func([]uint64) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayList) FlatMapComplex128(f func([]uint64) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayList) FlatMapAny(f func([]uint64) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayList) FlatMapBool(f func([]uintptr) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayList) FlatMapString(f func([]uintptr) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayList) FlatMapInt(f func([]uintptr) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayList) FlatMapInt8(f func([]uintptr) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayList) FlatMapInt16(f func([]uintptr) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayList) FlatMapInt32(f func([]uintptr) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayList) FlatMapInt64(f func([]uintptr) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayList) FlatMapUint(f func([]uintptr) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayList) FlatMapUint8(f func([]uintptr) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayList) FlatMapUint16(f func([]uintptr) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayList) FlatMapUint32(f func([]uintptr) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayList) FlatMapUint64(f func([]uintptr) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayList) FlatMapUintptr(f func([]uintptr) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayList) FlatMapByte(f func([]uintptr) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayList) FlatMapRune(f func([]uintptr) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayList) FlatMapFloat32(f func([]uintptr) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayList) FlatMapFloat64(f func([]uintptr) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayList) FlatMapComplex64(f func([]uintptr) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayList) FlatMapComplex128(f func([]uintptr) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayList) FlatMapAny(f func([]uintptr) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayList) FlatMapBool(f func([]byte) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayList) FlatMapString(f func([]byte) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayList) FlatMapInt(f func([]byte) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayList) FlatMapInt8(f func([]byte) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayList) FlatMapInt16(f func([]byte) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayList) FlatMapInt32(f func([]byte) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayList) FlatMapInt64(f func([]byte) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayList) FlatMapUint(f func([]byte) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayList) FlatMapUint8(f func([]byte) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayList) FlatMapUint16(f func([]byte) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayList) FlatMapUint32(f func([]byte) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayList) FlatMapUint64(f func([]byte) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayList) FlatMapUintptr(f func([]byte) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayList) FlatMapByte(f func([]byte) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayList) FlatMapRune(f func([]byte) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayList) FlatMapFloat32(f func([]byte) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayList) FlatMapFloat64(f func([]byte) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayList) FlatMapComplex64(f func([]byte) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayList) FlatMapComplex128(f func([]byte) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayList) FlatMapAny(f func([]byte) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayList) FlatMapBool(f func([]rune) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayList) FlatMapString(f func([]rune) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayList) FlatMapInt(f func([]rune) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayList) FlatMapInt8(f func([]rune) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayList) FlatMapInt16(f func([]rune) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayList) FlatMapInt32(f func([]rune) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayList) FlatMapInt64(f func([]rune) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayList) FlatMapUint(f func([]rune) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayList) FlatMapUint8(f func([]rune) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayList) FlatMapUint16(f func([]rune) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayList) FlatMapUint32(f func([]rune) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayList) FlatMapUint64(f func([]rune) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayList) FlatMapUintptr(f func([]rune) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayList) FlatMapByte(f func([]rune) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayList) FlatMapRune(f func([]rune) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayList) FlatMapFloat32(f func([]rune) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayList) FlatMapFloat64(f func([]rune) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayList) FlatMapComplex64(f func([]rune) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayList) FlatMapComplex128(f func([]rune) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayList) FlatMapAny(f func([]rune) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayList) FlatMapBool(f func([]float32) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayList) FlatMapString(f func([]float32) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayList) FlatMapInt(f func([]float32) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayList) FlatMapInt8(f func([]float32) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayList) FlatMapInt16(f func([]float32) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayList) FlatMapInt32(f func([]float32) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayList) FlatMapInt64(f func([]float32) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayList) FlatMapUint(f func([]float32) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayList) FlatMapUint8(f func([]float32) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayList) FlatMapUint16(f func([]float32) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayList) FlatMapUint32(f func([]float32) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayList) FlatMapUint64(f func([]float32) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayList) FlatMapUintptr(f func([]float32) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayList) FlatMapByte(f func([]float32) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayList) FlatMapRune(f func([]float32) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayList) FlatMapFloat32(f func([]float32) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayList) FlatMapFloat64(f func([]float32) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayList) FlatMapComplex64(f func([]float32) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayList) FlatMapComplex128(f func([]float32) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayList) FlatMapAny(f func([]float32) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayList) FlatMapBool(f func([]float64) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayList) FlatMapString(f func([]float64) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayList) FlatMapInt(f func([]float64) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayList) FlatMapInt8(f func([]float64) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayList) FlatMapInt16(f func([]float64) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayList) FlatMapInt32(f func([]float64) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayList) FlatMapInt64(f func([]float64) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayList) FlatMapUint(f func([]float64) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayList) FlatMapUint8(f func([]float64) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayList) FlatMapUint16(f func([]float64) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayList) FlatMapUint32(f func([]float64) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayList) FlatMapUint64(f func([]float64) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayList) FlatMapUintptr(f func([]float64) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayList) FlatMapByte(f func([]float64) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayList) FlatMapRune(f func([]float64) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayList) FlatMapFloat32(f func([]float64) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayList) FlatMapFloat64(f func([]float64) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayList) FlatMapComplex64(f func([]float64) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayList) FlatMapComplex128(f func([]float64) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayList) FlatMapAny(f func([]float64) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayList) FlatMapBool(f func([]complex64) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayList) FlatMapString(f func([]complex64) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayList) FlatMapInt(f func([]complex64) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayList) FlatMapInt8(f func([]complex64) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayList) FlatMapInt16(f func([]complex64) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayList) FlatMapInt32(f func([]complex64) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayList) FlatMapInt64(f func([]complex64) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayList) FlatMapUint(f func([]complex64) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayList) FlatMapUint8(f func([]complex64) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayList) FlatMapUint16(f func([]complex64) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayList) FlatMapUint32(f func([]complex64) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayList) FlatMapUint64(f func([]complex64) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayList) FlatMapUintptr(f func([]complex64) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayList) FlatMapByte(f func([]complex64) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayList) FlatMapRune(f func([]complex64) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayList) FlatMapFloat32(f func([]complex64) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayList) FlatMapFloat64(f func([]complex64) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayList) FlatMapComplex64(f func([]complex64) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayList) FlatMapComplex128(f func([]complex64) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayList) FlatMapAny(f func([]complex64) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayList) FlatMapBool(f func([]complex128) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayList) FlatMapString(f func([]complex128) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayList) FlatMapInt(f func([]complex128) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayList) FlatMapInt8(f func([]complex128) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayList) FlatMapInt16(f func([]complex128) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayList) FlatMapInt32(f func([]complex128) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayList) FlatMapInt64(f func([]complex128) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayList) FlatMapUint(f func([]complex128) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayList) FlatMapUint8(f func([]complex128) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayList) FlatMapUint16(f func([]complex128) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayList) FlatMapUint32(f func([]complex128) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayList) FlatMapUint64(f func([]complex128) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayList) FlatMapUintptr(f func([]complex128) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayList) FlatMapByte(f func([]complex128) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayList) FlatMapRune(f func([]complex128) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayList) FlatMapFloat32(f func([]complex128) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayList) FlatMapFloat64(f func([]complex128) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayList) FlatMapComplex64(f func([]complex128) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayList) FlatMapComplex128(f func([]complex128) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayList) FlatMapAny(f func([]complex128) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayList) FlatMapBool(f func([]Any) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayList) FlatMapString(f func([]Any) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayList) FlatMapInt(f func([]Any) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayList) FlatMapInt8(f func([]Any) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayList) FlatMapInt16(f func([]Any) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayList) FlatMapInt32(f func([]Any) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayList) FlatMapInt64(f func([]Any) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayList) FlatMapUint(f func([]Any) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayList) FlatMapUint8(f func([]Any) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayList) FlatMapUint16(f func([]Any) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayList) FlatMapUint32(f func([]Any) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayList) FlatMapUint64(f func([]Any) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayList) FlatMapUintptr(f func([]Any) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayList) FlatMapByte(f func([]Any) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayList) FlatMapRune(f func([]Any) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayList) FlatMapFloat32(f func([]Any) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayList) FlatMapFloat64(f func([]Any) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayList) FlatMapComplex64(f func([]Any) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayList) FlatMapComplex128(f func([]Any) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayList) FlatMapAny(f func([]Any) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayArrayList) FlatMapBool(f func([][]bool) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayArrayList) FlatMapString(f func([][]bool) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayArrayList) FlatMapInt(f func([][]bool) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayArrayList) FlatMapInt8(f func([][]bool) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayArrayList) FlatMapInt16(f func([][]bool) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayArrayList) FlatMapInt32(f func([][]bool) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayArrayList) FlatMapInt64(f func([][]bool) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayArrayList) FlatMapUint(f func([][]bool) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayArrayList) FlatMapUint8(f func([][]bool) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayArrayList) FlatMapUint16(f func([][]bool) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayArrayList) FlatMapUint32(f func([][]bool) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayArrayList) FlatMapUint64(f func([][]bool) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayArrayList) FlatMapUintptr(f func([][]bool) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayArrayList) FlatMapByte(f func([][]bool) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayArrayList) FlatMapRune(f func([][]bool) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayArrayList) FlatMapFloat32(f func([][]bool) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayArrayList) FlatMapFloat64(f func([][]bool) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayArrayList) FlatMapComplex64(f func([][]bool) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayArrayList) FlatMapComplex128(f func([][]bool) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolArrayArrayList) FlatMapAny(f func([][]bool) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayArrayList) FlatMapBool(f func([][]string) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayArrayList) FlatMapString(f func([][]string) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayArrayList) FlatMapInt(f func([][]string) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayArrayList) FlatMapInt8(f func([][]string) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayArrayList) FlatMapInt16(f func([][]string) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayArrayList) FlatMapInt32(f func([][]string) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayArrayList) FlatMapInt64(f func([][]string) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayArrayList) FlatMapUint(f func([][]string) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayArrayList) FlatMapUint8(f func([][]string) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayArrayList) FlatMapUint16(f func([][]string) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayArrayList) FlatMapUint32(f func([][]string) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayArrayList) FlatMapUint64(f func([][]string) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayArrayList) FlatMapUintptr(f func([][]string) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayArrayList) FlatMapByte(f func([][]string) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayArrayList) FlatMapRune(f func([][]string) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayArrayList) FlatMapFloat32(f func([][]string) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayArrayList) FlatMapFloat64(f func([][]string) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayArrayList) FlatMapComplex64(f func([][]string) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayArrayList) FlatMapComplex128(f func([][]string) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringArrayArrayList) FlatMapAny(f func([][]string) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayArrayList) FlatMapBool(f func([][]int) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayArrayList) FlatMapString(f func([][]int) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayArrayList) FlatMapInt(f func([][]int) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayArrayList) FlatMapInt8(f func([][]int) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayArrayList) FlatMapInt16(f func([][]int) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayArrayList) FlatMapInt32(f func([][]int) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayArrayList) FlatMapInt64(f func([][]int) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayArrayList) FlatMapUint(f func([][]int) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayArrayList) FlatMapUint8(f func([][]int) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayArrayList) FlatMapUint16(f func([][]int) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayArrayList) FlatMapUint32(f func([][]int) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayArrayList) FlatMapUint64(f func([][]int) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayArrayList) FlatMapUintptr(f func([][]int) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayArrayList) FlatMapByte(f func([][]int) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayArrayList) FlatMapRune(f func([][]int) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayArrayList) FlatMapFloat32(f func([][]int) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayArrayList) FlatMapFloat64(f func([][]int) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayArrayList) FlatMapComplex64(f func([][]int) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayArrayList) FlatMapComplex128(f func([][]int) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntArrayArrayList) FlatMapAny(f func([][]int) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayArrayList) FlatMapBool(f func([][]int8) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayArrayList) FlatMapString(f func([][]int8) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayArrayList) FlatMapInt(f func([][]int8) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayArrayList) FlatMapInt8(f func([][]int8) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayArrayList) FlatMapInt16(f func([][]int8) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayArrayList) FlatMapInt32(f func([][]int8) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayArrayList) FlatMapInt64(f func([][]int8) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayArrayList) FlatMapUint(f func([][]int8) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayArrayList) FlatMapUint8(f func([][]int8) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayArrayList) FlatMapUint16(f func([][]int8) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayArrayList) FlatMapUint32(f func([][]int8) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayArrayList) FlatMapUint64(f func([][]int8) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayArrayList) FlatMapUintptr(f func([][]int8) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayArrayList) FlatMapByte(f func([][]int8) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayArrayList) FlatMapRune(f func([][]int8) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayArrayList) FlatMapFloat32(f func([][]int8) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayArrayList) FlatMapFloat64(f func([][]int8) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayArrayList) FlatMapComplex64(f func([][]int8) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayArrayList) FlatMapComplex128(f func([][]int8) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ArrayArrayList) FlatMapAny(f func([][]int8) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayArrayList) FlatMapBool(f func([][]int16) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayArrayList) FlatMapString(f func([][]int16) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayArrayList) FlatMapInt(f func([][]int16) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayArrayList) FlatMapInt8(f func([][]int16) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayArrayList) FlatMapInt16(f func([][]int16) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayArrayList) FlatMapInt32(f func([][]int16) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayArrayList) FlatMapInt64(f func([][]int16) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayArrayList) FlatMapUint(f func([][]int16) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayArrayList) FlatMapUint8(f func([][]int16) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayArrayList) FlatMapUint16(f func([][]int16) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayArrayList) FlatMapUint32(f func([][]int16) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayArrayList) FlatMapUint64(f func([][]int16) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayArrayList) FlatMapUintptr(f func([][]int16) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayArrayList) FlatMapByte(f func([][]int16) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayArrayList) FlatMapRune(f func([][]int16) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayArrayList) FlatMapFloat32(f func([][]int16) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayArrayList) FlatMapFloat64(f func([][]int16) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayArrayList) FlatMapComplex64(f func([][]int16) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayArrayList) FlatMapComplex128(f func([][]int16) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ArrayArrayList) FlatMapAny(f func([][]int16) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayArrayList) FlatMapBool(f func([][]int32) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayArrayList) FlatMapString(f func([][]int32) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayArrayList) FlatMapInt(f func([][]int32) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayArrayList) FlatMapInt8(f func([][]int32) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayArrayList) FlatMapInt16(f func([][]int32) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayArrayList) FlatMapInt32(f func([][]int32) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayArrayList) FlatMapInt64(f func([][]int32) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayArrayList) FlatMapUint(f func([][]int32) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayArrayList) FlatMapUint8(f func([][]int32) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayArrayList) FlatMapUint16(f func([][]int32) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayArrayList) FlatMapUint32(f func([][]int32) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayArrayList) FlatMapUint64(f func([][]int32) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayArrayList) FlatMapUintptr(f func([][]int32) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayArrayList) FlatMapByte(f func([][]int32) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayArrayList) FlatMapRune(f func([][]int32) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayArrayList) FlatMapFloat32(f func([][]int32) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayArrayList) FlatMapFloat64(f func([][]int32) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayArrayList) FlatMapComplex64(f func([][]int32) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayArrayList) FlatMapComplex128(f func([][]int32) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ArrayArrayList) FlatMapAny(f func([][]int32) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayArrayList) FlatMapBool(f func([][]int64) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayArrayList) FlatMapString(f func([][]int64) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayArrayList) FlatMapInt(f func([][]int64) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayArrayList) FlatMapInt8(f func([][]int64) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayArrayList) FlatMapInt16(f func([][]int64) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayArrayList) FlatMapInt32(f func([][]int64) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayArrayList) FlatMapInt64(f func([][]int64) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayArrayList) FlatMapUint(f func([][]int64) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayArrayList) FlatMapUint8(f func([][]int64) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayArrayList) FlatMapUint16(f func([][]int64) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayArrayList) FlatMapUint32(f func([][]int64) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayArrayList) FlatMapUint64(f func([][]int64) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayArrayList) FlatMapUintptr(f func([][]int64) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayArrayList) FlatMapByte(f func([][]int64) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayArrayList) FlatMapRune(f func([][]int64) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayArrayList) FlatMapFloat32(f func([][]int64) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayArrayList) FlatMapFloat64(f func([][]int64) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayArrayList) FlatMapComplex64(f func([][]int64) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayArrayList) FlatMapComplex128(f func([][]int64) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ArrayArrayList) FlatMapAny(f func([][]int64) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayArrayList) FlatMapBool(f func([][]uint) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayArrayList) FlatMapString(f func([][]uint) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayArrayList) FlatMapInt(f func([][]uint) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayArrayList) FlatMapInt8(f func([][]uint) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayArrayList) FlatMapInt16(f func([][]uint) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayArrayList) FlatMapInt32(f func([][]uint) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayArrayList) FlatMapInt64(f func([][]uint) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayArrayList) FlatMapUint(f func([][]uint) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayArrayList) FlatMapUint8(f func([][]uint) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayArrayList) FlatMapUint16(f func([][]uint) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayArrayList) FlatMapUint32(f func([][]uint) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayArrayList) FlatMapUint64(f func([][]uint) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayArrayList) FlatMapUintptr(f func([][]uint) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayArrayList) FlatMapByte(f func([][]uint) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayArrayList) FlatMapRune(f func([][]uint) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayArrayList) FlatMapFloat32(f func([][]uint) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayArrayList) FlatMapFloat64(f func([][]uint) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayArrayList) FlatMapComplex64(f func([][]uint) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayArrayList) FlatMapComplex128(f func([][]uint) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintArrayArrayList) FlatMapAny(f func([][]uint) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayArrayList) FlatMapBool(f func([][]uint8) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayArrayList) FlatMapString(f func([][]uint8) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayArrayList) FlatMapInt(f func([][]uint8) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayArrayList) FlatMapInt8(f func([][]uint8) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayArrayList) FlatMapInt16(f func([][]uint8) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayArrayList) FlatMapInt32(f func([][]uint8) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayArrayList) FlatMapInt64(f func([][]uint8) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayArrayList) FlatMapUint(f func([][]uint8) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayArrayList) FlatMapUint8(f func([][]uint8) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayArrayList) FlatMapUint16(f func([][]uint8) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayArrayList) FlatMapUint32(f func([][]uint8) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayArrayList) FlatMapUint64(f func([][]uint8) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayArrayList) FlatMapUintptr(f func([][]uint8) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayArrayList) FlatMapByte(f func([][]uint8) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayArrayList) FlatMapRune(f func([][]uint8) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayArrayList) FlatMapFloat32(f func([][]uint8) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayArrayList) FlatMapFloat64(f func([][]uint8) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayArrayList) FlatMapComplex64(f func([][]uint8) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayArrayList) FlatMapComplex128(f func([][]uint8) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ArrayArrayList) FlatMapAny(f func([][]uint8) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayArrayList) FlatMapBool(f func([][]uint16) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayArrayList) FlatMapString(f func([][]uint16) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayArrayList) FlatMapInt(f func([][]uint16) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayArrayList) FlatMapInt8(f func([][]uint16) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayArrayList) FlatMapInt16(f func([][]uint16) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayArrayList) FlatMapInt32(f func([][]uint16) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayArrayList) FlatMapInt64(f func([][]uint16) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayArrayList) FlatMapUint(f func([][]uint16) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayArrayList) FlatMapUint8(f func([][]uint16) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayArrayList) FlatMapUint16(f func([][]uint16) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayArrayList) FlatMapUint32(f func([][]uint16) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayArrayList) FlatMapUint64(f func([][]uint16) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayArrayList) FlatMapUintptr(f func([][]uint16) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayArrayList) FlatMapByte(f func([][]uint16) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayArrayList) FlatMapRune(f func([][]uint16) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayArrayList) FlatMapFloat32(f func([][]uint16) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayArrayList) FlatMapFloat64(f func([][]uint16) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayArrayList) FlatMapComplex64(f func([][]uint16) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayArrayList) FlatMapComplex128(f func([][]uint16) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ArrayArrayList) FlatMapAny(f func([][]uint16) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayArrayList) FlatMapBool(f func([][]uint32) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayArrayList) FlatMapString(f func([][]uint32) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayArrayList) FlatMapInt(f func([][]uint32) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayArrayList) FlatMapInt8(f func([][]uint32) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayArrayList) FlatMapInt16(f func([][]uint32) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayArrayList) FlatMapInt32(f func([][]uint32) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayArrayList) FlatMapInt64(f func([][]uint32) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayArrayList) FlatMapUint(f func([][]uint32) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayArrayList) FlatMapUint8(f func([][]uint32) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayArrayList) FlatMapUint16(f func([][]uint32) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayArrayList) FlatMapUint32(f func([][]uint32) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayArrayList) FlatMapUint64(f func([][]uint32) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayArrayList) FlatMapUintptr(f func([][]uint32) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayArrayList) FlatMapByte(f func([][]uint32) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayArrayList) FlatMapRune(f func([][]uint32) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayArrayList) FlatMapFloat32(f func([][]uint32) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayArrayList) FlatMapFloat64(f func([][]uint32) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayArrayList) FlatMapComplex64(f func([][]uint32) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayArrayList) FlatMapComplex128(f func([][]uint32) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ArrayArrayList) FlatMapAny(f func([][]uint32) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayArrayList) FlatMapBool(f func([][]uint64) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayArrayList) FlatMapString(f func([][]uint64) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayArrayList) FlatMapInt(f func([][]uint64) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayArrayList) FlatMapInt8(f func([][]uint64) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayArrayList) FlatMapInt16(f func([][]uint64) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayArrayList) FlatMapInt32(f func([][]uint64) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayArrayList) FlatMapInt64(f func([][]uint64) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayArrayList) FlatMapUint(f func([][]uint64) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayArrayList) FlatMapUint8(f func([][]uint64) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayArrayList) FlatMapUint16(f func([][]uint64) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayArrayList) FlatMapUint32(f func([][]uint64) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayArrayList) FlatMapUint64(f func([][]uint64) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayArrayList) FlatMapUintptr(f func([][]uint64) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayArrayList) FlatMapByte(f func([][]uint64) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayArrayList) FlatMapRune(f func([][]uint64) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayArrayList) FlatMapFloat32(f func([][]uint64) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayArrayList) FlatMapFloat64(f func([][]uint64) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayArrayList) FlatMapComplex64(f func([][]uint64) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayArrayList) FlatMapComplex128(f func([][]uint64) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ArrayArrayList) FlatMapAny(f func([][]uint64) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayArrayList) FlatMapBool(f func([][]uintptr) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayArrayList) FlatMapString(f func([][]uintptr) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayArrayList) FlatMapInt(f func([][]uintptr) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayArrayList) FlatMapInt8(f func([][]uintptr) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayArrayList) FlatMapInt16(f func([][]uintptr) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayArrayList) FlatMapInt32(f func([][]uintptr) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayArrayList) FlatMapInt64(f func([][]uintptr) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayArrayList) FlatMapUint(f func([][]uintptr) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayArrayList) FlatMapUint8(f func([][]uintptr) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayArrayList) FlatMapUint16(f func([][]uintptr) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayArrayList) FlatMapUint32(f func([][]uintptr) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayArrayList) FlatMapUint64(f func([][]uintptr) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayArrayList) FlatMapUintptr(f func([][]uintptr) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayArrayList) FlatMapByte(f func([][]uintptr) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayArrayList) FlatMapRune(f func([][]uintptr) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayArrayList) FlatMapFloat32(f func([][]uintptr) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayArrayList) FlatMapFloat64(f func([][]uintptr) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayArrayList) FlatMapComplex64(f func([][]uintptr) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayArrayList) FlatMapComplex128(f func([][]uintptr) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrArrayArrayList) FlatMapAny(f func([][]uintptr) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayArrayList) FlatMapBool(f func([][]byte) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayArrayList) FlatMapString(f func([][]byte) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayArrayList) FlatMapInt(f func([][]byte) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayArrayList) FlatMapInt8(f func([][]byte) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayArrayList) FlatMapInt16(f func([][]byte) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayArrayList) FlatMapInt32(f func([][]byte) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayArrayList) FlatMapInt64(f func([][]byte) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayArrayList) FlatMapUint(f func([][]byte) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayArrayList) FlatMapUint8(f func([][]byte) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayArrayList) FlatMapUint16(f func([][]byte) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayArrayList) FlatMapUint32(f func([][]byte) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayArrayList) FlatMapUint64(f func([][]byte) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayArrayList) FlatMapUintptr(f func([][]byte) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayArrayList) FlatMapByte(f func([][]byte) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayArrayList) FlatMapRune(f func([][]byte) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayArrayList) FlatMapFloat32(f func([][]byte) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayArrayList) FlatMapFloat64(f func([][]byte) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayArrayList) FlatMapComplex64(f func([][]byte) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayArrayList) FlatMapComplex128(f func([][]byte) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteArrayArrayList) FlatMapAny(f func([][]byte) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayArrayList) FlatMapBool(f func([][]rune) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayArrayList) FlatMapString(f func([][]rune) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayArrayList) FlatMapInt(f func([][]rune) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayArrayList) FlatMapInt8(f func([][]rune) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayArrayList) FlatMapInt16(f func([][]rune) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayArrayList) FlatMapInt32(f func([][]rune) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayArrayList) FlatMapInt64(f func([][]rune) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayArrayList) FlatMapUint(f func([][]rune) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayArrayList) FlatMapUint8(f func([][]rune) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayArrayList) FlatMapUint16(f func([][]rune) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayArrayList) FlatMapUint32(f func([][]rune) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayArrayList) FlatMapUint64(f func([][]rune) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayArrayList) FlatMapUintptr(f func([][]rune) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayArrayList) FlatMapByte(f func([][]rune) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayArrayList) FlatMapRune(f func([][]rune) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayArrayList) FlatMapFloat32(f func([][]rune) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayArrayList) FlatMapFloat64(f func([][]rune) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayArrayList) FlatMapComplex64(f func([][]rune) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayArrayList) FlatMapComplex128(f func([][]rune) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneArrayArrayList) FlatMapAny(f func([][]rune) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayArrayList) FlatMapBool(f func([][]float32) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayArrayList) FlatMapString(f func([][]float32) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayArrayList) FlatMapInt(f func([][]float32) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayArrayList) FlatMapInt8(f func([][]float32) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayArrayList) FlatMapInt16(f func([][]float32) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayArrayList) FlatMapInt32(f func([][]float32) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayArrayList) FlatMapInt64(f func([][]float32) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayArrayList) FlatMapUint(f func([][]float32) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayArrayList) FlatMapUint8(f func([][]float32) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayArrayList) FlatMapUint16(f func([][]float32) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayArrayList) FlatMapUint32(f func([][]float32) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayArrayList) FlatMapUint64(f func([][]float32) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayArrayList) FlatMapUintptr(f func([][]float32) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayArrayList) FlatMapByte(f func([][]float32) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayArrayList) FlatMapRune(f func([][]float32) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayArrayList) FlatMapFloat32(f func([][]float32) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayArrayList) FlatMapFloat64(f func([][]float32) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayArrayList) FlatMapComplex64(f func([][]float32) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayArrayList) FlatMapComplex128(f func([][]float32) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ArrayArrayList) FlatMapAny(f func([][]float32) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayArrayList) FlatMapBool(f func([][]float64) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayArrayList) FlatMapString(f func([][]float64) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayArrayList) FlatMapInt(f func([][]float64) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayArrayList) FlatMapInt8(f func([][]float64) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayArrayList) FlatMapInt16(f func([][]float64) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayArrayList) FlatMapInt32(f func([][]float64) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayArrayList) FlatMapInt64(f func([][]float64) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayArrayList) FlatMapUint(f func([][]float64) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayArrayList) FlatMapUint8(f func([][]float64) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayArrayList) FlatMapUint16(f func([][]float64) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayArrayList) FlatMapUint32(f func([][]float64) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayArrayList) FlatMapUint64(f func([][]float64) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayArrayList) FlatMapUintptr(f func([][]float64) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayArrayList) FlatMapByte(f func([][]float64) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayArrayList) FlatMapRune(f func([][]float64) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayArrayList) FlatMapFloat32(f func([][]float64) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayArrayList) FlatMapFloat64(f func([][]float64) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayArrayList) FlatMapComplex64(f func([][]float64) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayArrayList) FlatMapComplex128(f func([][]float64) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ArrayArrayList) FlatMapAny(f func([][]float64) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayArrayList) FlatMapBool(f func([][]complex64) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayArrayList) FlatMapString(f func([][]complex64) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayArrayList) FlatMapInt(f func([][]complex64) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayArrayList) FlatMapInt8(f func([][]complex64) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayArrayList) FlatMapInt16(f func([][]complex64) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayArrayList) FlatMapInt32(f func([][]complex64) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayArrayList) FlatMapInt64(f func([][]complex64) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayArrayList) FlatMapUint(f func([][]complex64) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayArrayList) FlatMapUint8(f func([][]complex64) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayArrayList) FlatMapUint16(f func([][]complex64) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayArrayList) FlatMapUint32(f func([][]complex64) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayArrayList) FlatMapUint64(f func([][]complex64) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayArrayList) FlatMapUintptr(f func([][]complex64) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayArrayList) FlatMapByte(f func([][]complex64) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayArrayList) FlatMapRune(f func([][]complex64) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayArrayList) FlatMapFloat32(f func([][]complex64) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayArrayList) FlatMapFloat64(f func([][]complex64) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayArrayList) FlatMapComplex64(f func([][]complex64) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayArrayList) FlatMapComplex128(f func([][]complex64) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ArrayArrayList) FlatMapAny(f func([][]complex64) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayArrayList) FlatMapBool(f func([][]complex128) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayArrayList) FlatMapString(f func([][]complex128) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayArrayList) FlatMapInt(f func([][]complex128) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayArrayList) FlatMapInt8(f func([][]complex128) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayArrayList) FlatMapInt16(f func([][]complex128) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayArrayList) FlatMapInt32(f func([][]complex128) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayArrayList) FlatMapInt64(f func([][]complex128) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayArrayList) FlatMapUint(f func([][]complex128) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayArrayList) FlatMapUint8(f func([][]complex128) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayArrayList) FlatMapUint16(f func([][]complex128) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayArrayList) FlatMapUint32(f func([][]complex128) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayArrayList) FlatMapUint64(f func([][]complex128) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayArrayList) FlatMapUintptr(f func([][]complex128) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayArrayList) FlatMapByte(f func([][]complex128) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayArrayList) FlatMapRune(f func([][]complex128) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayArrayList) FlatMapFloat32(f func([][]complex128) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayArrayList) FlatMapFloat64(f func([][]complex128) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayArrayList) FlatMapComplex64(f func([][]complex128) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayArrayList) FlatMapComplex128(f func([][]complex128) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ArrayArrayList) FlatMapAny(f func([][]complex128) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayArrayList) FlatMapBool(f func([][]Any) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayArrayList) FlatMapString(f func([][]Any) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayArrayList) FlatMapInt(f func([][]Any) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayArrayList) FlatMapInt8(f func([][]Any) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayArrayList) FlatMapInt16(f func([][]Any) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayArrayList) FlatMapInt32(f func([][]Any) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayArrayList) FlatMapInt64(f func([][]Any) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayArrayList) FlatMapUint(f func([][]Any) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayArrayList) FlatMapUint8(f func([][]Any) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayArrayList) FlatMapUint16(f func([][]Any) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayArrayList) FlatMapUint32(f func([][]Any) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayArrayList) FlatMapUint64(f func([][]Any) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayArrayList) FlatMapUintptr(f func([][]Any) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayArrayList) FlatMapByte(f func([][]Any) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayArrayList) FlatMapRune(f func([][]Any) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayArrayList) FlatMapFloat32(f func([][]Any) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayArrayList) FlatMapFloat64(f func([][]Any) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayArrayList) FlatMapComplex64(f func([][]Any) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayArrayList) FlatMapComplex128(f func([][]Any) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyArrayArrayList) FlatMapAny(f func([][]Any) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionArrayList) FlatMapBool(f func([]BoolOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionArrayList) FlatMapString(f func([]BoolOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionArrayList) FlatMapInt(f func([]BoolOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionArrayList) FlatMapInt8(f func([]BoolOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionArrayList) FlatMapInt16(f func([]BoolOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionArrayList) FlatMapInt32(f func([]BoolOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionArrayList) FlatMapInt64(f func([]BoolOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionArrayList) FlatMapUint(f func([]BoolOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionArrayList) FlatMapUint8(f func([]BoolOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionArrayList) FlatMapUint16(f func([]BoolOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionArrayList) FlatMapUint32(f func([]BoolOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionArrayList) FlatMapUint64(f func([]BoolOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionArrayList) FlatMapUintptr(f func([]BoolOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionArrayList) FlatMapByte(f func([]BoolOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionArrayList) FlatMapRune(f func([]BoolOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionArrayList) FlatMapFloat32(f func([]BoolOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionArrayList) FlatMapFloat64(f func([]BoolOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionArrayList) FlatMapComplex64(f func([]BoolOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionArrayList) FlatMapComplex128(f func([]BoolOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolOptionArrayList) FlatMapAny(f func([]BoolOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionArrayList) FlatMapBool(f func([]StringOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionArrayList) FlatMapString(f func([]StringOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionArrayList) FlatMapInt(f func([]StringOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionArrayList) FlatMapInt8(f func([]StringOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionArrayList) FlatMapInt16(f func([]StringOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionArrayList) FlatMapInt32(f func([]StringOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionArrayList) FlatMapInt64(f func([]StringOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionArrayList) FlatMapUint(f func([]StringOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionArrayList) FlatMapUint8(f func([]StringOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionArrayList) FlatMapUint16(f func([]StringOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionArrayList) FlatMapUint32(f func([]StringOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionArrayList) FlatMapUint64(f func([]StringOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionArrayList) FlatMapUintptr(f func([]StringOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionArrayList) FlatMapByte(f func([]StringOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionArrayList) FlatMapRune(f func([]StringOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionArrayList) FlatMapFloat32(f func([]StringOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionArrayList) FlatMapFloat64(f func([]StringOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionArrayList) FlatMapComplex64(f func([]StringOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionArrayList) FlatMapComplex128(f func([]StringOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringOptionArrayList) FlatMapAny(f func([]StringOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionArrayList) FlatMapBool(f func([]IntOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionArrayList) FlatMapString(f func([]IntOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionArrayList) FlatMapInt(f func([]IntOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionArrayList) FlatMapInt8(f func([]IntOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionArrayList) FlatMapInt16(f func([]IntOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionArrayList) FlatMapInt32(f func([]IntOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionArrayList) FlatMapInt64(f func([]IntOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionArrayList) FlatMapUint(f func([]IntOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionArrayList) FlatMapUint8(f func([]IntOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionArrayList) FlatMapUint16(f func([]IntOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionArrayList) FlatMapUint32(f func([]IntOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionArrayList) FlatMapUint64(f func([]IntOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionArrayList) FlatMapUintptr(f func([]IntOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionArrayList) FlatMapByte(f func([]IntOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionArrayList) FlatMapRune(f func([]IntOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionArrayList) FlatMapFloat32(f func([]IntOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionArrayList) FlatMapFloat64(f func([]IntOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionArrayList) FlatMapComplex64(f func([]IntOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionArrayList) FlatMapComplex128(f func([]IntOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntOptionArrayList) FlatMapAny(f func([]IntOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionArrayList) FlatMapBool(f func([]Int8Option) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionArrayList) FlatMapString(f func([]Int8Option) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionArrayList) FlatMapInt(f func([]Int8Option) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionArrayList) FlatMapInt8(f func([]Int8Option) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionArrayList) FlatMapInt16(f func([]Int8Option) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionArrayList) FlatMapInt32(f func([]Int8Option) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionArrayList) FlatMapInt64(f func([]Int8Option) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionArrayList) FlatMapUint(f func([]Int8Option) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionArrayList) FlatMapUint8(f func([]Int8Option) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionArrayList) FlatMapUint16(f func([]Int8Option) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionArrayList) FlatMapUint32(f func([]Int8Option) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionArrayList) FlatMapUint64(f func([]Int8Option) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionArrayList) FlatMapUintptr(f func([]Int8Option) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionArrayList) FlatMapByte(f func([]Int8Option) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionArrayList) FlatMapRune(f func([]Int8Option) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionArrayList) FlatMapFloat32(f func([]Int8Option) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionArrayList) FlatMapFloat64(f func([]Int8Option) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionArrayList) FlatMapComplex64(f func([]Int8Option) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionArrayList) FlatMapComplex128(f func([]Int8Option) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8OptionArrayList) FlatMapAny(f func([]Int8Option) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionArrayList) FlatMapBool(f func([]Int16Option) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionArrayList) FlatMapString(f func([]Int16Option) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionArrayList) FlatMapInt(f func([]Int16Option) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionArrayList) FlatMapInt8(f func([]Int16Option) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionArrayList) FlatMapInt16(f func([]Int16Option) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionArrayList) FlatMapInt32(f func([]Int16Option) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionArrayList) FlatMapInt64(f func([]Int16Option) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionArrayList) FlatMapUint(f func([]Int16Option) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionArrayList) FlatMapUint8(f func([]Int16Option) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionArrayList) FlatMapUint16(f func([]Int16Option) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionArrayList) FlatMapUint32(f func([]Int16Option) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionArrayList) FlatMapUint64(f func([]Int16Option) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionArrayList) FlatMapUintptr(f func([]Int16Option) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionArrayList) FlatMapByte(f func([]Int16Option) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionArrayList) FlatMapRune(f func([]Int16Option) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionArrayList) FlatMapFloat32(f func([]Int16Option) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionArrayList) FlatMapFloat64(f func([]Int16Option) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionArrayList) FlatMapComplex64(f func([]Int16Option) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionArrayList) FlatMapComplex128(f func([]Int16Option) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16OptionArrayList) FlatMapAny(f func([]Int16Option) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionArrayList) FlatMapBool(f func([]Int32Option) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionArrayList) FlatMapString(f func([]Int32Option) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionArrayList) FlatMapInt(f func([]Int32Option) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionArrayList) FlatMapInt8(f func([]Int32Option) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionArrayList) FlatMapInt16(f func([]Int32Option) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionArrayList) FlatMapInt32(f func([]Int32Option) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionArrayList) FlatMapInt64(f func([]Int32Option) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionArrayList) FlatMapUint(f func([]Int32Option) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionArrayList) FlatMapUint8(f func([]Int32Option) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionArrayList) FlatMapUint16(f func([]Int32Option) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionArrayList) FlatMapUint32(f func([]Int32Option) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionArrayList) FlatMapUint64(f func([]Int32Option) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionArrayList) FlatMapUintptr(f func([]Int32Option) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionArrayList) FlatMapByte(f func([]Int32Option) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionArrayList) FlatMapRune(f func([]Int32Option) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionArrayList) FlatMapFloat32(f func([]Int32Option) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionArrayList) FlatMapFloat64(f func([]Int32Option) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionArrayList) FlatMapComplex64(f func([]Int32Option) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionArrayList) FlatMapComplex128(f func([]Int32Option) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32OptionArrayList) FlatMapAny(f func([]Int32Option) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionArrayList) FlatMapBool(f func([]Int64Option) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionArrayList) FlatMapString(f func([]Int64Option) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionArrayList) FlatMapInt(f func([]Int64Option) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionArrayList) FlatMapInt8(f func([]Int64Option) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionArrayList) FlatMapInt16(f func([]Int64Option) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionArrayList) FlatMapInt32(f func([]Int64Option) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionArrayList) FlatMapInt64(f func([]Int64Option) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionArrayList) FlatMapUint(f func([]Int64Option) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionArrayList) FlatMapUint8(f func([]Int64Option) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionArrayList) FlatMapUint16(f func([]Int64Option) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionArrayList) FlatMapUint32(f func([]Int64Option) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionArrayList) FlatMapUint64(f func([]Int64Option) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionArrayList) FlatMapUintptr(f func([]Int64Option) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionArrayList) FlatMapByte(f func([]Int64Option) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionArrayList) FlatMapRune(f func([]Int64Option) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionArrayList) FlatMapFloat32(f func([]Int64Option) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionArrayList) FlatMapFloat64(f func([]Int64Option) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionArrayList) FlatMapComplex64(f func([]Int64Option) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionArrayList) FlatMapComplex128(f func([]Int64Option) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64OptionArrayList) FlatMapAny(f func([]Int64Option) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionArrayList) FlatMapBool(f func([]UintOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionArrayList) FlatMapString(f func([]UintOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionArrayList) FlatMapInt(f func([]UintOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionArrayList) FlatMapInt8(f func([]UintOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionArrayList) FlatMapInt16(f func([]UintOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionArrayList) FlatMapInt32(f func([]UintOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionArrayList) FlatMapInt64(f func([]UintOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionArrayList) FlatMapUint(f func([]UintOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionArrayList) FlatMapUint8(f func([]UintOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionArrayList) FlatMapUint16(f func([]UintOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionArrayList) FlatMapUint32(f func([]UintOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionArrayList) FlatMapUint64(f func([]UintOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionArrayList) FlatMapUintptr(f func([]UintOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionArrayList) FlatMapByte(f func([]UintOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionArrayList) FlatMapRune(f func([]UintOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionArrayList) FlatMapFloat32(f func([]UintOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionArrayList) FlatMapFloat64(f func([]UintOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionArrayList) FlatMapComplex64(f func([]UintOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionArrayList) FlatMapComplex128(f func([]UintOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintOptionArrayList) FlatMapAny(f func([]UintOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionArrayList) FlatMapBool(f func([]Uint8Option) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionArrayList) FlatMapString(f func([]Uint8Option) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionArrayList) FlatMapInt(f func([]Uint8Option) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionArrayList) FlatMapInt8(f func([]Uint8Option) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionArrayList) FlatMapInt16(f func([]Uint8Option) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionArrayList) FlatMapInt32(f func([]Uint8Option) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionArrayList) FlatMapInt64(f func([]Uint8Option) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionArrayList) FlatMapUint(f func([]Uint8Option) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionArrayList) FlatMapUint8(f func([]Uint8Option) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionArrayList) FlatMapUint16(f func([]Uint8Option) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionArrayList) FlatMapUint32(f func([]Uint8Option) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionArrayList) FlatMapUint64(f func([]Uint8Option) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionArrayList) FlatMapUintptr(f func([]Uint8Option) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionArrayList) FlatMapByte(f func([]Uint8Option) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionArrayList) FlatMapRune(f func([]Uint8Option) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionArrayList) FlatMapFloat32(f func([]Uint8Option) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionArrayList) FlatMapFloat64(f func([]Uint8Option) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionArrayList) FlatMapComplex64(f func([]Uint8Option) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionArrayList) FlatMapComplex128(f func([]Uint8Option) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8OptionArrayList) FlatMapAny(f func([]Uint8Option) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionArrayList) FlatMapBool(f func([]Uint16Option) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionArrayList) FlatMapString(f func([]Uint16Option) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionArrayList) FlatMapInt(f func([]Uint16Option) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionArrayList) FlatMapInt8(f func([]Uint16Option) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionArrayList) FlatMapInt16(f func([]Uint16Option) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionArrayList) FlatMapInt32(f func([]Uint16Option) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionArrayList) FlatMapInt64(f func([]Uint16Option) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionArrayList) FlatMapUint(f func([]Uint16Option) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionArrayList) FlatMapUint8(f func([]Uint16Option) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionArrayList) FlatMapUint16(f func([]Uint16Option) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionArrayList) FlatMapUint32(f func([]Uint16Option) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionArrayList) FlatMapUint64(f func([]Uint16Option) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionArrayList) FlatMapUintptr(f func([]Uint16Option) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionArrayList) FlatMapByte(f func([]Uint16Option) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionArrayList) FlatMapRune(f func([]Uint16Option) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionArrayList) FlatMapFloat32(f func([]Uint16Option) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionArrayList) FlatMapFloat64(f func([]Uint16Option) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionArrayList) FlatMapComplex64(f func([]Uint16Option) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionArrayList) FlatMapComplex128(f func([]Uint16Option) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16OptionArrayList) FlatMapAny(f func([]Uint16Option) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionArrayList) FlatMapBool(f func([]Uint32Option) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionArrayList) FlatMapString(f func([]Uint32Option) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionArrayList) FlatMapInt(f func([]Uint32Option) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionArrayList) FlatMapInt8(f func([]Uint32Option) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionArrayList) FlatMapInt16(f func([]Uint32Option) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionArrayList) FlatMapInt32(f func([]Uint32Option) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionArrayList) FlatMapInt64(f func([]Uint32Option) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionArrayList) FlatMapUint(f func([]Uint32Option) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionArrayList) FlatMapUint8(f func([]Uint32Option) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionArrayList) FlatMapUint16(f func([]Uint32Option) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionArrayList) FlatMapUint32(f func([]Uint32Option) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionArrayList) FlatMapUint64(f func([]Uint32Option) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionArrayList) FlatMapUintptr(f func([]Uint32Option) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionArrayList) FlatMapByte(f func([]Uint32Option) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionArrayList) FlatMapRune(f func([]Uint32Option) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionArrayList) FlatMapFloat32(f func([]Uint32Option) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionArrayList) FlatMapFloat64(f func([]Uint32Option) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionArrayList) FlatMapComplex64(f func([]Uint32Option) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionArrayList) FlatMapComplex128(f func([]Uint32Option) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32OptionArrayList) FlatMapAny(f func([]Uint32Option) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionArrayList) FlatMapBool(f func([]Uint64Option) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionArrayList) FlatMapString(f func([]Uint64Option) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionArrayList) FlatMapInt(f func([]Uint64Option) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionArrayList) FlatMapInt8(f func([]Uint64Option) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionArrayList) FlatMapInt16(f func([]Uint64Option) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionArrayList) FlatMapInt32(f func([]Uint64Option) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionArrayList) FlatMapInt64(f func([]Uint64Option) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionArrayList) FlatMapUint(f func([]Uint64Option) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionArrayList) FlatMapUint8(f func([]Uint64Option) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionArrayList) FlatMapUint16(f func([]Uint64Option) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionArrayList) FlatMapUint32(f func([]Uint64Option) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionArrayList) FlatMapUint64(f func([]Uint64Option) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionArrayList) FlatMapUintptr(f func([]Uint64Option) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionArrayList) FlatMapByte(f func([]Uint64Option) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionArrayList) FlatMapRune(f func([]Uint64Option) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionArrayList) FlatMapFloat32(f func([]Uint64Option) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionArrayList) FlatMapFloat64(f func([]Uint64Option) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionArrayList) FlatMapComplex64(f func([]Uint64Option) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionArrayList) FlatMapComplex128(f func([]Uint64Option) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64OptionArrayList) FlatMapAny(f func([]Uint64Option) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionArrayList) FlatMapBool(f func([]UintptrOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionArrayList) FlatMapString(f func([]UintptrOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionArrayList) FlatMapInt(f func([]UintptrOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionArrayList) FlatMapInt8(f func([]UintptrOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionArrayList) FlatMapInt16(f func([]UintptrOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionArrayList) FlatMapInt32(f func([]UintptrOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionArrayList) FlatMapInt64(f func([]UintptrOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionArrayList) FlatMapUint(f func([]UintptrOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionArrayList) FlatMapUint8(f func([]UintptrOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionArrayList) FlatMapUint16(f func([]UintptrOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionArrayList) FlatMapUint32(f func([]UintptrOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionArrayList) FlatMapUint64(f func([]UintptrOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionArrayList) FlatMapUintptr(f func([]UintptrOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionArrayList) FlatMapByte(f func([]UintptrOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionArrayList) FlatMapRune(f func([]UintptrOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionArrayList) FlatMapFloat32(f func([]UintptrOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionArrayList) FlatMapFloat64(f func([]UintptrOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionArrayList) FlatMapComplex64(f func([]UintptrOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionArrayList) FlatMapComplex128(f func([]UintptrOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrOptionArrayList) FlatMapAny(f func([]UintptrOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionArrayList) FlatMapBool(f func([]ByteOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionArrayList) FlatMapString(f func([]ByteOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionArrayList) FlatMapInt(f func([]ByteOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionArrayList) FlatMapInt8(f func([]ByteOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionArrayList) FlatMapInt16(f func([]ByteOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionArrayList) FlatMapInt32(f func([]ByteOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionArrayList) FlatMapInt64(f func([]ByteOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionArrayList) FlatMapUint(f func([]ByteOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionArrayList) FlatMapUint8(f func([]ByteOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionArrayList) FlatMapUint16(f func([]ByteOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionArrayList) FlatMapUint32(f func([]ByteOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionArrayList) FlatMapUint64(f func([]ByteOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionArrayList) FlatMapUintptr(f func([]ByteOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionArrayList) FlatMapByte(f func([]ByteOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionArrayList) FlatMapRune(f func([]ByteOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionArrayList) FlatMapFloat32(f func([]ByteOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionArrayList) FlatMapFloat64(f func([]ByteOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionArrayList) FlatMapComplex64(f func([]ByteOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionArrayList) FlatMapComplex128(f func([]ByteOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteOptionArrayList) FlatMapAny(f func([]ByteOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionArrayList) FlatMapBool(f func([]RuneOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionArrayList) FlatMapString(f func([]RuneOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionArrayList) FlatMapInt(f func([]RuneOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionArrayList) FlatMapInt8(f func([]RuneOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionArrayList) FlatMapInt16(f func([]RuneOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionArrayList) FlatMapInt32(f func([]RuneOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionArrayList) FlatMapInt64(f func([]RuneOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionArrayList) FlatMapUint(f func([]RuneOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionArrayList) FlatMapUint8(f func([]RuneOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionArrayList) FlatMapUint16(f func([]RuneOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionArrayList) FlatMapUint32(f func([]RuneOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionArrayList) FlatMapUint64(f func([]RuneOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionArrayList) FlatMapUintptr(f func([]RuneOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionArrayList) FlatMapByte(f func([]RuneOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionArrayList) FlatMapRune(f func([]RuneOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionArrayList) FlatMapFloat32(f func([]RuneOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionArrayList) FlatMapFloat64(f func([]RuneOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionArrayList) FlatMapComplex64(f func([]RuneOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionArrayList) FlatMapComplex128(f func([]RuneOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneOptionArrayList) FlatMapAny(f func([]RuneOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionArrayList) FlatMapBool(f func([]Float32Option) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionArrayList) FlatMapString(f func([]Float32Option) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionArrayList) FlatMapInt(f func([]Float32Option) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionArrayList) FlatMapInt8(f func([]Float32Option) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionArrayList) FlatMapInt16(f func([]Float32Option) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionArrayList) FlatMapInt32(f func([]Float32Option) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionArrayList) FlatMapInt64(f func([]Float32Option) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionArrayList) FlatMapUint(f func([]Float32Option) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionArrayList) FlatMapUint8(f func([]Float32Option) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionArrayList) FlatMapUint16(f func([]Float32Option) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionArrayList) FlatMapUint32(f func([]Float32Option) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionArrayList) FlatMapUint64(f func([]Float32Option) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionArrayList) FlatMapUintptr(f func([]Float32Option) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionArrayList) FlatMapByte(f func([]Float32Option) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionArrayList) FlatMapRune(f func([]Float32Option) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionArrayList) FlatMapFloat32(f func([]Float32Option) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionArrayList) FlatMapFloat64(f func([]Float32Option) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionArrayList) FlatMapComplex64(f func([]Float32Option) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionArrayList) FlatMapComplex128(f func([]Float32Option) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32OptionArrayList) FlatMapAny(f func([]Float32Option) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionArrayList) FlatMapBool(f func([]Float64Option) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionArrayList) FlatMapString(f func([]Float64Option) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionArrayList) FlatMapInt(f func([]Float64Option) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionArrayList) FlatMapInt8(f func([]Float64Option) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionArrayList) FlatMapInt16(f func([]Float64Option) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionArrayList) FlatMapInt32(f func([]Float64Option) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionArrayList) FlatMapInt64(f func([]Float64Option) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionArrayList) FlatMapUint(f func([]Float64Option) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionArrayList) FlatMapUint8(f func([]Float64Option) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionArrayList) FlatMapUint16(f func([]Float64Option) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionArrayList) FlatMapUint32(f func([]Float64Option) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionArrayList) FlatMapUint64(f func([]Float64Option) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionArrayList) FlatMapUintptr(f func([]Float64Option) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionArrayList) FlatMapByte(f func([]Float64Option) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionArrayList) FlatMapRune(f func([]Float64Option) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionArrayList) FlatMapFloat32(f func([]Float64Option) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionArrayList) FlatMapFloat64(f func([]Float64Option) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionArrayList) FlatMapComplex64(f func([]Float64Option) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionArrayList) FlatMapComplex128(f func([]Float64Option) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64OptionArrayList) FlatMapAny(f func([]Float64Option) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionArrayList) FlatMapBool(f func([]Complex64Option) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionArrayList) FlatMapString(f func([]Complex64Option) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionArrayList) FlatMapInt(f func([]Complex64Option) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionArrayList) FlatMapInt8(f func([]Complex64Option) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionArrayList) FlatMapInt16(f func([]Complex64Option) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionArrayList) FlatMapInt32(f func([]Complex64Option) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionArrayList) FlatMapInt64(f func([]Complex64Option) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionArrayList) FlatMapUint(f func([]Complex64Option) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionArrayList) FlatMapUint8(f func([]Complex64Option) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionArrayList) FlatMapUint16(f func([]Complex64Option) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionArrayList) FlatMapUint32(f func([]Complex64Option) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionArrayList) FlatMapUint64(f func([]Complex64Option) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionArrayList) FlatMapUintptr(f func([]Complex64Option) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionArrayList) FlatMapByte(f func([]Complex64Option) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionArrayList) FlatMapRune(f func([]Complex64Option) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionArrayList) FlatMapFloat32(f func([]Complex64Option) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionArrayList) FlatMapFloat64(f func([]Complex64Option) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionArrayList) FlatMapComplex64(f func([]Complex64Option) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionArrayList) FlatMapComplex128(f func([]Complex64Option) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64OptionArrayList) FlatMapAny(f func([]Complex64Option) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionArrayList) FlatMapBool(f func([]Complex128Option) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionArrayList) FlatMapString(f func([]Complex128Option) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionArrayList) FlatMapInt(f func([]Complex128Option) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionArrayList) FlatMapInt8(f func([]Complex128Option) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionArrayList) FlatMapInt16(f func([]Complex128Option) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionArrayList) FlatMapInt32(f func([]Complex128Option) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionArrayList) FlatMapInt64(f func([]Complex128Option) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionArrayList) FlatMapUint(f func([]Complex128Option) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionArrayList) FlatMapUint8(f func([]Complex128Option) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionArrayList) FlatMapUint16(f func([]Complex128Option) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionArrayList) FlatMapUint32(f func([]Complex128Option) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionArrayList) FlatMapUint64(f func([]Complex128Option) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionArrayList) FlatMapUintptr(f func([]Complex128Option) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionArrayList) FlatMapByte(f func([]Complex128Option) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionArrayList) FlatMapRune(f func([]Complex128Option) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionArrayList) FlatMapFloat32(f func([]Complex128Option) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionArrayList) FlatMapFloat64(f func([]Complex128Option) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionArrayList) FlatMapComplex64(f func([]Complex128Option) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionArrayList) FlatMapComplex128(f func([]Complex128Option) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128OptionArrayList) FlatMapAny(f func([]Complex128Option) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionArrayList) FlatMapBool(f func([]AnyOption) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionArrayList) FlatMapString(f func([]AnyOption) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionArrayList) FlatMapInt(f func([]AnyOption) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionArrayList) FlatMapInt8(f func([]AnyOption) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionArrayList) FlatMapInt16(f func([]AnyOption) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionArrayList) FlatMapInt32(f func([]AnyOption) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionArrayList) FlatMapInt64(f func([]AnyOption) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionArrayList) FlatMapUint(f func([]AnyOption) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionArrayList) FlatMapUint8(f func([]AnyOption) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionArrayList) FlatMapUint16(f func([]AnyOption) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionArrayList) FlatMapUint32(f func([]AnyOption) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionArrayList) FlatMapUint64(f func([]AnyOption) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionArrayList) FlatMapUintptr(f func([]AnyOption) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionArrayList) FlatMapByte(f func([]AnyOption) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionArrayList) FlatMapRune(f func([]AnyOption) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionArrayList) FlatMapFloat32(f func([]AnyOption) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionArrayList) FlatMapFloat64(f func([]AnyOption) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionArrayList) FlatMapComplex64(f func([]AnyOption) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionArrayList) FlatMapComplex128(f func([]AnyOption) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyOptionArrayList) FlatMapAny(f func([]AnyOption) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListList) FlatMapBool(f func(BoolList) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListList) FlatMapString(f func(BoolList) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListList) FlatMapInt(f func(BoolList) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListList) FlatMapInt8(f func(BoolList) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListList) FlatMapInt16(f func(BoolList) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListList) FlatMapInt32(f func(BoolList) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListList) FlatMapInt64(f func(BoolList) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListList) FlatMapUint(f func(BoolList) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListList) FlatMapUint8(f func(BoolList) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListList) FlatMapUint16(f func(BoolList) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListList) FlatMapUint32(f func(BoolList) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListList) FlatMapUint64(f func(BoolList) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListList) FlatMapUintptr(f func(BoolList) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListList) FlatMapByte(f func(BoolList) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListList) FlatMapRune(f func(BoolList) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListList) FlatMapFloat32(f func(BoolList) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListList) FlatMapFloat64(f func(BoolList) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListList) FlatMapComplex64(f func(BoolList) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListList) FlatMapComplex128(f func(BoolList) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m BoolListList) FlatMapAny(f func(BoolList) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListList) FlatMapBool(f func(StringList) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListList) FlatMapString(f func(StringList) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListList) FlatMapInt(f func(StringList) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListList) FlatMapInt8(f func(StringList) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListList) FlatMapInt16(f func(StringList) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListList) FlatMapInt32(f func(StringList) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListList) FlatMapInt64(f func(StringList) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListList) FlatMapUint(f func(StringList) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListList) FlatMapUint8(f func(StringList) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListList) FlatMapUint16(f func(StringList) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListList) FlatMapUint32(f func(StringList) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListList) FlatMapUint64(f func(StringList) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListList) FlatMapUintptr(f func(StringList) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListList) FlatMapByte(f func(StringList) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListList) FlatMapRune(f func(StringList) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListList) FlatMapFloat32(f func(StringList) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListList) FlatMapFloat64(f func(StringList) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListList) FlatMapComplex64(f func(StringList) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListList) FlatMapComplex128(f func(StringList) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m StringListList) FlatMapAny(f func(StringList) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListList) FlatMapBool(f func(IntList) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListList) FlatMapString(f func(IntList) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListList) FlatMapInt(f func(IntList) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListList) FlatMapInt8(f func(IntList) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListList) FlatMapInt16(f func(IntList) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListList) FlatMapInt32(f func(IntList) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListList) FlatMapInt64(f func(IntList) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListList) FlatMapUint(f func(IntList) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListList) FlatMapUint8(f func(IntList) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListList) FlatMapUint16(f func(IntList) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListList) FlatMapUint32(f func(IntList) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListList) FlatMapUint64(f func(IntList) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListList) FlatMapUintptr(f func(IntList) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListList) FlatMapByte(f func(IntList) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListList) FlatMapRune(f func(IntList) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListList) FlatMapFloat32(f func(IntList) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListList) FlatMapFloat64(f func(IntList) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListList) FlatMapComplex64(f func(IntList) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListList) FlatMapComplex128(f func(IntList) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m IntListList) FlatMapAny(f func(IntList) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ListList) FlatMapBool(f func(Int8List) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ListList) FlatMapString(f func(Int8List) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ListList) FlatMapInt(f func(Int8List) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ListList) FlatMapInt8(f func(Int8List) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ListList) FlatMapInt16(f func(Int8List) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ListList) FlatMapInt32(f func(Int8List) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ListList) FlatMapInt64(f func(Int8List) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ListList) FlatMapUint(f func(Int8List) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ListList) FlatMapUint8(f func(Int8List) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ListList) FlatMapUint16(f func(Int8List) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ListList) FlatMapUint32(f func(Int8List) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ListList) FlatMapUint64(f func(Int8List) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ListList) FlatMapUintptr(f func(Int8List) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ListList) FlatMapByte(f func(Int8List) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ListList) FlatMapRune(f func(Int8List) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ListList) FlatMapFloat32(f func(Int8List) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ListList) FlatMapFloat64(f func(Int8List) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ListList) FlatMapComplex64(f func(Int8List) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ListList) FlatMapComplex128(f func(Int8List) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int8ListList) FlatMapAny(f func(Int8List) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ListList) FlatMapBool(f func(Int16List) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ListList) FlatMapString(f func(Int16List) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ListList) FlatMapInt(f func(Int16List) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ListList) FlatMapInt8(f func(Int16List) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ListList) FlatMapInt16(f func(Int16List) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ListList) FlatMapInt32(f func(Int16List) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ListList) FlatMapInt64(f func(Int16List) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ListList) FlatMapUint(f func(Int16List) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ListList) FlatMapUint8(f func(Int16List) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ListList) FlatMapUint16(f func(Int16List) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ListList) FlatMapUint32(f func(Int16List) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ListList) FlatMapUint64(f func(Int16List) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ListList) FlatMapUintptr(f func(Int16List) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ListList) FlatMapByte(f func(Int16List) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ListList) FlatMapRune(f func(Int16List) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ListList) FlatMapFloat32(f func(Int16List) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ListList) FlatMapFloat64(f func(Int16List) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ListList) FlatMapComplex64(f func(Int16List) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ListList) FlatMapComplex128(f func(Int16List) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int16ListList) FlatMapAny(f func(Int16List) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListList) FlatMapBool(f func(Int32List) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListList) FlatMapString(f func(Int32List) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListList) FlatMapInt(f func(Int32List) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListList) FlatMapInt8(f func(Int32List) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListList) FlatMapInt16(f func(Int32List) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListList) FlatMapInt32(f func(Int32List) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListList) FlatMapInt64(f func(Int32List) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListList) FlatMapUint(f func(Int32List) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListList) FlatMapUint8(f func(Int32List) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListList) FlatMapUint16(f func(Int32List) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListList) FlatMapUint32(f func(Int32List) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListList) FlatMapUint64(f func(Int32List) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListList) FlatMapUintptr(f func(Int32List) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListList) FlatMapByte(f func(Int32List) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListList) FlatMapRune(f func(Int32List) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListList) FlatMapFloat32(f func(Int32List) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListList) FlatMapFloat64(f func(Int32List) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListList) FlatMapComplex64(f func(Int32List) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListList) FlatMapComplex128(f func(Int32List) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int32ListList) FlatMapAny(f func(Int32List) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListList) FlatMapBool(f func(Int64List) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListList) FlatMapString(f func(Int64List) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListList) FlatMapInt(f func(Int64List) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListList) FlatMapInt8(f func(Int64List) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListList) FlatMapInt16(f func(Int64List) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListList) FlatMapInt32(f func(Int64List) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListList) FlatMapInt64(f func(Int64List) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListList) FlatMapUint(f func(Int64List) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListList) FlatMapUint8(f func(Int64List) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListList) FlatMapUint16(f func(Int64List) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListList) FlatMapUint32(f func(Int64List) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListList) FlatMapUint64(f func(Int64List) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListList) FlatMapUintptr(f func(Int64List) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListList) FlatMapByte(f func(Int64List) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListList) FlatMapRune(f func(Int64List) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListList) FlatMapFloat32(f func(Int64List) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListList) FlatMapFloat64(f func(Int64List) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListList) FlatMapComplex64(f func(Int64List) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListList) FlatMapComplex128(f func(Int64List) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Int64ListList) FlatMapAny(f func(Int64List) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListList) FlatMapBool(f func(UintList) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListList) FlatMapString(f func(UintList) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListList) FlatMapInt(f func(UintList) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListList) FlatMapInt8(f func(UintList) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListList) FlatMapInt16(f func(UintList) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListList) FlatMapInt32(f func(UintList) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListList) FlatMapInt64(f func(UintList) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListList) FlatMapUint(f func(UintList) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListList) FlatMapUint8(f func(UintList) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListList) FlatMapUint16(f func(UintList) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListList) FlatMapUint32(f func(UintList) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListList) FlatMapUint64(f func(UintList) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListList) FlatMapUintptr(f func(UintList) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListList) FlatMapByte(f func(UintList) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListList) FlatMapRune(f func(UintList) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListList) FlatMapFloat32(f func(UintList) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListList) FlatMapFloat64(f func(UintList) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListList) FlatMapComplex64(f func(UintList) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListList) FlatMapComplex128(f func(UintList) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintListList) FlatMapAny(f func(UintList) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ListList) FlatMapBool(f func(Uint8List) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ListList) FlatMapString(f func(Uint8List) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ListList) FlatMapInt(f func(Uint8List) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ListList) FlatMapInt8(f func(Uint8List) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ListList) FlatMapInt16(f func(Uint8List) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ListList) FlatMapInt32(f func(Uint8List) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ListList) FlatMapInt64(f func(Uint8List) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ListList) FlatMapUint(f func(Uint8List) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ListList) FlatMapUint8(f func(Uint8List) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ListList) FlatMapUint16(f func(Uint8List) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ListList) FlatMapUint32(f func(Uint8List) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ListList) FlatMapUint64(f func(Uint8List) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ListList) FlatMapUintptr(f func(Uint8List) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ListList) FlatMapByte(f func(Uint8List) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ListList) FlatMapRune(f func(Uint8List) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ListList) FlatMapFloat32(f func(Uint8List) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ListList) FlatMapFloat64(f func(Uint8List) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ListList) FlatMapComplex64(f func(Uint8List) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ListList) FlatMapComplex128(f func(Uint8List) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint8ListList) FlatMapAny(f func(Uint8List) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ListList) FlatMapBool(f func(Uint16List) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ListList) FlatMapString(f func(Uint16List) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ListList) FlatMapInt(f func(Uint16List) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ListList) FlatMapInt8(f func(Uint16List) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ListList) FlatMapInt16(f func(Uint16List) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ListList) FlatMapInt32(f func(Uint16List) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ListList) FlatMapInt64(f func(Uint16List) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ListList) FlatMapUint(f func(Uint16List) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ListList) FlatMapUint8(f func(Uint16List) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ListList) FlatMapUint16(f func(Uint16List) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ListList) FlatMapUint32(f func(Uint16List) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ListList) FlatMapUint64(f func(Uint16List) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ListList) FlatMapUintptr(f func(Uint16List) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ListList) FlatMapByte(f func(Uint16List) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ListList) FlatMapRune(f func(Uint16List) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ListList) FlatMapFloat32(f func(Uint16List) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ListList) FlatMapFloat64(f func(Uint16List) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ListList) FlatMapComplex64(f func(Uint16List) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ListList) FlatMapComplex128(f func(Uint16List) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint16ListList) FlatMapAny(f func(Uint16List) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ListList) FlatMapBool(f func(Uint32List) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ListList) FlatMapString(f func(Uint32List) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ListList) FlatMapInt(f func(Uint32List) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ListList) FlatMapInt8(f func(Uint32List) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ListList) FlatMapInt16(f func(Uint32List) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ListList) FlatMapInt32(f func(Uint32List) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ListList) FlatMapInt64(f func(Uint32List) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ListList) FlatMapUint(f func(Uint32List) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ListList) FlatMapUint8(f func(Uint32List) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ListList) FlatMapUint16(f func(Uint32List) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ListList) FlatMapUint32(f func(Uint32List) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ListList) FlatMapUint64(f func(Uint32List) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ListList) FlatMapUintptr(f func(Uint32List) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ListList) FlatMapByte(f func(Uint32List) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ListList) FlatMapRune(f func(Uint32List) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ListList) FlatMapFloat32(f func(Uint32List) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ListList) FlatMapFloat64(f func(Uint32List) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ListList) FlatMapComplex64(f func(Uint32List) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ListList) FlatMapComplex128(f func(Uint32List) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint32ListList) FlatMapAny(f func(Uint32List) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListList) FlatMapBool(f func(Uint64List) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListList) FlatMapString(f func(Uint64List) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListList) FlatMapInt(f func(Uint64List) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListList) FlatMapInt8(f func(Uint64List) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListList) FlatMapInt16(f func(Uint64List) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListList) FlatMapInt32(f func(Uint64List) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListList) FlatMapInt64(f func(Uint64List) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListList) FlatMapUint(f func(Uint64List) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListList) FlatMapUint8(f func(Uint64List) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListList) FlatMapUint16(f func(Uint64List) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListList) FlatMapUint32(f func(Uint64List) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListList) FlatMapUint64(f func(Uint64List) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListList) FlatMapUintptr(f func(Uint64List) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListList) FlatMapByte(f func(Uint64List) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListList) FlatMapRune(f func(Uint64List) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListList) FlatMapFloat32(f func(Uint64List) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListList) FlatMapFloat64(f func(Uint64List) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListList) FlatMapComplex64(f func(Uint64List) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListList) FlatMapComplex128(f func(Uint64List) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Uint64ListList) FlatMapAny(f func(Uint64List) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListList) FlatMapBool(f func(UintptrList) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListList) FlatMapString(f func(UintptrList) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListList) FlatMapInt(f func(UintptrList) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListList) FlatMapInt8(f func(UintptrList) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListList) FlatMapInt16(f func(UintptrList) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListList) FlatMapInt32(f func(UintptrList) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListList) FlatMapInt64(f func(UintptrList) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListList) FlatMapUint(f func(UintptrList) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListList) FlatMapUint8(f func(UintptrList) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListList) FlatMapUint16(f func(UintptrList) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListList) FlatMapUint32(f func(UintptrList) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListList) FlatMapUint64(f func(UintptrList) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListList) FlatMapUintptr(f func(UintptrList) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListList) FlatMapByte(f func(UintptrList) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListList) FlatMapRune(f func(UintptrList) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListList) FlatMapFloat32(f func(UintptrList) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListList) FlatMapFloat64(f func(UintptrList) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListList) FlatMapComplex64(f func(UintptrList) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListList) FlatMapComplex128(f func(UintptrList) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m UintptrListList) FlatMapAny(f func(UintptrList) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListList) FlatMapBool(f func(ByteList) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListList) FlatMapString(f func(ByteList) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListList) FlatMapInt(f func(ByteList) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListList) FlatMapInt8(f func(ByteList) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListList) FlatMapInt16(f func(ByteList) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListList) FlatMapInt32(f func(ByteList) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListList) FlatMapInt64(f func(ByteList) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListList) FlatMapUint(f func(ByteList) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListList) FlatMapUint8(f func(ByteList) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListList) FlatMapUint16(f func(ByteList) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListList) FlatMapUint32(f func(ByteList) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListList) FlatMapUint64(f func(ByteList) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListList) FlatMapUintptr(f func(ByteList) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListList) FlatMapByte(f func(ByteList) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListList) FlatMapRune(f func(ByteList) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListList) FlatMapFloat32(f func(ByteList) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListList) FlatMapFloat64(f func(ByteList) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListList) FlatMapComplex64(f func(ByteList) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListList) FlatMapComplex128(f func(ByteList) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m ByteListList) FlatMapAny(f func(ByteList) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListList) FlatMapBool(f func(RuneList) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListList) FlatMapString(f func(RuneList) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListList) FlatMapInt(f func(RuneList) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListList) FlatMapInt8(f func(RuneList) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListList) FlatMapInt16(f func(RuneList) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListList) FlatMapInt32(f func(RuneList) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListList) FlatMapInt64(f func(RuneList) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListList) FlatMapUint(f func(RuneList) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListList) FlatMapUint8(f func(RuneList) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListList) FlatMapUint16(f func(RuneList) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListList) FlatMapUint32(f func(RuneList) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListList) FlatMapUint64(f func(RuneList) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListList) FlatMapUintptr(f func(RuneList) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListList) FlatMapByte(f func(RuneList) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListList) FlatMapRune(f func(RuneList) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListList) FlatMapFloat32(f func(RuneList) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListList) FlatMapFloat64(f func(RuneList) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListList) FlatMapComplex64(f func(RuneList) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListList) FlatMapComplex128(f func(RuneList) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m RuneListList) FlatMapAny(f func(RuneList) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListList) FlatMapBool(f func(Float32List) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListList) FlatMapString(f func(Float32List) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListList) FlatMapInt(f func(Float32List) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListList) FlatMapInt8(f func(Float32List) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListList) FlatMapInt16(f func(Float32List) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListList) FlatMapInt32(f func(Float32List) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListList) FlatMapInt64(f func(Float32List) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListList) FlatMapUint(f func(Float32List) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListList) FlatMapUint8(f func(Float32List) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListList) FlatMapUint16(f func(Float32List) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListList) FlatMapUint32(f func(Float32List) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListList) FlatMapUint64(f func(Float32List) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListList) FlatMapUintptr(f func(Float32List) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListList) FlatMapByte(f func(Float32List) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListList) FlatMapRune(f func(Float32List) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListList) FlatMapFloat32(f func(Float32List) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListList) FlatMapFloat64(f func(Float32List) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListList) FlatMapComplex64(f func(Float32List) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListList) FlatMapComplex128(f func(Float32List) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float32ListList) FlatMapAny(f func(Float32List) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListList) FlatMapBool(f func(Float64List) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListList) FlatMapString(f func(Float64List) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListList) FlatMapInt(f func(Float64List) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListList) FlatMapInt8(f func(Float64List) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListList) FlatMapInt16(f func(Float64List) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListList) FlatMapInt32(f func(Float64List) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListList) FlatMapInt64(f func(Float64List) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListList) FlatMapUint(f func(Float64List) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListList) FlatMapUint8(f func(Float64List) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListList) FlatMapUint16(f func(Float64List) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListList) FlatMapUint32(f func(Float64List) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListList) FlatMapUint64(f func(Float64List) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListList) FlatMapUintptr(f func(Float64List) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListList) FlatMapByte(f func(Float64List) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListList) FlatMapRune(f func(Float64List) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListList) FlatMapFloat32(f func(Float64List) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListList) FlatMapFloat64(f func(Float64List) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListList) FlatMapComplex64(f func(Float64List) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListList) FlatMapComplex128(f func(Float64List) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Float64ListList) FlatMapAny(f func(Float64List) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ListList) FlatMapBool(f func(Complex64List) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ListList) FlatMapString(f func(Complex64List) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ListList) FlatMapInt(f func(Complex64List) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ListList) FlatMapInt8(f func(Complex64List) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ListList) FlatMapInt16(f func(Complex64List) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ListList) FlatMapInt32(f func(Complex64List) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ListList) FlatMapInt64(f func(Complex64List) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ListList) FlatMapUint(f func(Complex64List) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ListList) FlatMapUint8(f func(Complex64List) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ListList) FlatMapUint16(f func(Complex64List) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ListList) FlatMapUint32(f func(Complex64List) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ListList) FlatMapUint64(f func(Complex64List) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ListList) FlatMapUintptr(f func(Complex64List) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ListList) FlatMapByte(f func(Complex64List) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ListList) FlatMapRune(f func(Complex64List) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ListList) FlatMapFloat32(f func(Complex64List) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ListList) FlatMapFloat64(f func(Complex64List) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ListList) FlatMapComplex64(f func(Complex64List) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ListList) FlatMapComplex128(f func(Complex64List) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex64ListList) FlatMapAny(f func(Complex64List) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ListList) FlatMapBool(f func(Complex128List) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ListList) FlatMapString(f func(Complex128List) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ListList) FlatMapInt(f func(Complex128List) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ListList) FlatMapInt8(f func(Complex128List) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ListList) FlatMapInt16(f func(Complex128List) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ListList) FlatMapInt32(f func(Complex128List) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ListList) FlatMapInt64(f func(Complex128List) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ListList) FlatMapUint(f func(Complex128List) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ListList) FlatMapUint8(f func(Complex128List) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ListList) FlatMapUint16(f func(Complex128List) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ListList) FlatMapUint32(f func(Complex128List) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ListList) FlatMapUint64(f func(Complex128List) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ListList) FlatMapUintptr(f func(Complex128List) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ListList) FlatMapByte(f func(Complex128List) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ListList) FlatMapRune(f func(Complex128List) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ListList) FlatMapFloat32(f func(Complex128List) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ListList) FlatMapFloat64(f func(Complex128List) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ListList) FlatMapComplex64(f func(Complex128List) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ListList) FlatMapComplex128(f func(Complex128List) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m Complex128ListList) FlatMapAny(f func(Complex128List) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListList) FlatMapBool(f func(AnyList) BoolList) BoolList {
	if m.IsEmpty() {
		return NilBool
	} else {
		acc := NilBool
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListList) FlatMapString(f func(AnyList) StringList) StringList {
	if m.IsEmpty() {
		return NilString
	} else {
		acc := NilString
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListList) FlatMapInt(f func(AnyList) IntList) IntList {
	if m.IsEmpty() {
		return NilInt
	} else {
		acc := NilInt
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListList) FlatMapInt8(f func(AnyList) Int8List) Int8List {
	if m.IsEmpty() {
		return NilInt8
	} else {
		acc := NilInt8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListList) FlatMapInt16(f func(AnyList) Int16List) Int16List {
	if m.IsEmpty() {
		return NilInt16
	} else {
		acc := NilInt16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListList) FlatMapInt32(f func(AnyList) Int32List) Int32List {
	if m.IsEmpty() {
		return NilInt32
	} else {
		acc := NilInt32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListList) FlatMapInt64(f func(AnyList) Int64List) Int64List {
	if m.IsEmpty() {
		return NilInt64
	} else {
		acc := NilInt64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListList) FlatMapUint(f func(AnyList) UintList) UintList {
	if m.IsEmpty() {
		return NilUint
	} else {
		acc := NilUint
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListList) FlatMapUint8(f func(AnyList) Uint8List) Uint8List {
	if m.IsEmpty() {
		return NilUint8
	} else {
		acc := NilUint8
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListList) FlatMapUint16(f func(AnyList) Uint16List) Uint16List {
	if m.IsEmpty() {
		return NilUint16
	} else {
		acc := NilUint16
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListList) FlatMapUint32(f func(AnyList) Uint32List) Uint32List {
	if m.IsEmpty() {
		return NilUint32
	} else {
		acc := NilUint32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListList) FlatMapUint64(f func(AnyList) Uint64List) Uint64List {
	if m.IsEmpty() {
		return NilUint64
	} else {
		acc := NilUint64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListList) FlatMapUintptr(f func(AnyList) UintptrList) UintptrList {
	if m.IsEmpty() {
		return NilUintptr
	} else {
		acc := NilUintptr
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListList) FlatMapByte(f func(AnyList) ByteList) ByteList {
	if m.IsEmpty() {
		return NilByte
	} else {
		acc := NilByte
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListList) FlatMapRune(f func(AnyList) RuneList) RuneList {
	if m.IsEmpty() {
		return NilRune
	} else {
		acc := NilRune
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListList) FlatMapFloat32(f func(AnyList) Float32List) Float32List {
	if m.IsEmpty() {
		return NilFloat32
	} else {
		acc := NilFloat32
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListList) FlatMapFloat64(f func(AnyList) Float64List) Float64List {
	if m.IsEmpty() {
		return NilFloat64
	} else {
		acc := NilFloat64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListList) FlatMapComplex64(f func(AnyList) Complex64List) Complex64List {
	if m.IsEmpty() {
		return NilComplex64
	} else {
		acc := NilComplex64
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListList) FlatMapComplex128(f func(AnyList) Complex128List) Complex128List {
	if m.IsEmpty() {
		return NilComplex128
	} else {
		acc := NilComplex128
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
func (m AnyListList) FlatMapAny(f func(AnyList) AnyList) AnyList {
	if m.IsEmpty() {
		return NilAny
	} else {
		acc := NilAny
		xs := m
		for xs.NonEmpty() {
			exs := f(*xs.head)
			for exs.NonEmpty() {
				acc = acc.Cons(*exs.head)
				exs = *exs.tail
			}
			xs = *xs.tail
		}
		return acc.Reverse()
	}
}
