// bootstrap_list_foldleft.go
// DO NOT EDIT THIS FILE WAS GENERATED AUTOMATICALLY BY https://github.com/zx80live/gofp-bootstrap

package fp


func (l BoolList) FoldLeftBool(z bool, f func(bool, bool) bool) bool {
  acc := z
  l.Foreach(func (e bool) { acc = f(acc, e) })
  return acc}
func (l BoolList) FoldLeftString(z string, f func(string, bool) string) string {
  acc := z
  l.Foreach(func (e bool) { acc = f(acc, e) })
  return acc}
func (l BoolList) FoldLeftInt(z int, f func(int, bool) int) int {
  acc := z
  l.Foreach(func (e bool) { acc = f(acc, e) })
  return acc}
func (l BoolList) FoldLeftInt64(z int64, f func(int64, bool) int64) int64 {
  acc := z
  l.Foreach(func (e bool) { acc = f(acc, e) })
  return acc}
func (l BoolList) FoldLeftByte(z byte, f func(byte, bool) byte) byte {
  acc := z
  l.Foreach(func (e bool) { acc = f(acc, e) })
  return acc}
func (l BoolList) FoldLeftRune(z rune, f func(rune, bool) rune) rune {
  acc := z
  l.Foreach(func (e bool) { acc = f(acc, e) })
  return acc}
func (l BoolList) FoldLeftFloat32(z float32, f func(float32, bool) float32) float32 {
  acc := z
  l.Foreach(func (e bool) { acc = f(acc, e) })
  return acc}
func (l BoolList) FoldLeftFloat64(z float64, f func(float64, bool) float64) float64 {
  acc := z
  l.Foreach(func (e bool) { acc = f(acc, e) })
  return acc}
func (l BoolList) FoldLeftAny(z Any, f func(Any, bool) Any) Any {
  acc := z
  l.Foreach(func (e bool) { acc = f(acc, e) })
  return acc}
func (l BoolList) FoldLeftTuple2(z Tuple2, f func(Tuple2, bool) Tuple2) Tuple2 {
  acc := z
  l.Foreach(func (e bool) { acc = f(acc, e) })
  return acc}
func (l BoolList) FoldLeftBoolList(z BoolList, f func(BoolList, bool) BoolList) BoolList {
  acc := z
  l.Foreach(func (e bool) { acc = f(acc, e) })
  return acc}
func (l BoolList) FoldLeftStringList(z StringList, f func(StringList, bool) StringList) StringList {
  acc := z
  l.Foreach(func (e bool) { acc = f(acc, e) })
  return acc}
func (l BoolList) FoldLeftIntList(z IntList, f func(IntList, bool) IntList) IntList {
  acc := z
  l.Foreach(func (e bool) { acc = f(acc, e) })
  return acc}
func (l BoolList) FoldLeftInt64List(z Int64List, f func(Int64List, bool) Int64List) Int64List {
  acc := z
  l.Foreach(func (e bool) { acc = f(acc, e) })
  return acc}
func (l BoolList) FoldLeftByteList(z ByteList, f func(ByteList, bool) ByteList) ByteList {
  acc := z
  l.Foreach(func (e bool) { acc = f(acc, e) })
  return acc}
func (l BoolList) FoldLeftRuneList(z RuneList, f func(RuneList, bool) RuneList) RuneList {
  acc := z
  l.Foreach(func (e bool) { acc = f(acc, e) })
  return acc}
func (l BoolList) FoldLeftFloat32List(z Float32List, f func(Float32List, bool) Float32List) Float32List {
  acc := z
  l.Foreach(func (e bool) { acc = f(acc, e) })
  return acc}
func (l BoolList) FoldLeftFloat64List(z Float64List, f func(Float64List, bool) Float64List) Float64List {
  acc := z
  l.Foreach(func (e bool) { acc = f(acc, e) })
  return acc}
func (l BoolList) FoldLeftAnyList(z AnyList, f func(AnyList, bool) AnyList) AnyList {
  acc := z
  l.Foreach(func (e bool) { acc = f(acc, e) })
  return acc}
func (l BoolList) FoldLeftTuple2List(z Tuple2List, f func(Tuple2List, bool) Tuple2List) Tuple2List {
  acc := z
  l.Foreach(func (e bool) { acc = f(acc, e) })
  return acc}
func (l StringList) FoldLeftBool(z bool, f func(bool, string) bool) bool {
  acc := z
  l.Foreach(func (e string) { acc = f(acc, e) })
  return acc}
func (l StringList) FoldLeftString(z string, f func(string, string) string) string {
  acc := z
  l.Foreach(func (e string) { acc = f(acc, e) })
  return acc}
func (l StringList) FoldLeftInt(z int, f func(int, string) int) int {
  acc := z
  l.Foreach(func (e string) { acc = f(acc, e) })
  return acc}
func (l StringList) FoldLeftInt64(z int64, f func(int64, string) int64) int64 {
  acc := z
  l.Foreach(func (e string) { acc = f(acc, e) })
  return acc}
func (l StringList) FoldLeftByte(z byte, f func(byte, string) byte) byte {
  acc := z
  l.Foreach(func (e string) { acc = f(acc, e) })
  return acc}
func (l StringList) FoldLeftRune(z rune, f func(rune, string) rune) rune {
  acc := z
  l.Foreach(func (e string) { acc = f(acc, e) })
  return acc}
func (l StringList) FoldLeftFloat32(z float32, f func(float32, string) float32) float32 {
  acc := z
  l.Foreach(func (e string) { acc = f(acc, e) })
  return acc}
func (l StringList) FoldLeftFloat64(z float64, f func(float64, string) float64) float64 {
  acc := z
  l.Foreach(func (e string) { acc = f(acc, e) })
  return acc}
func (l StringList) FoldLeftAny(z Any, f func(Any, string) Any) Any {
  acc := z
  l.Foreach(func (e string) { acc = f(acc, e) })
  return acc}
func (l StringList) FoldLeftTuple2(z Tuple2, f func(Tuple2, string) Tuple2) Tuple2 {
  acc := z
  l.Foreach(func (e string) { acc = f(acc, e) })
  return acc}
func (l StringList) FoldLeftBoolList(z BoolList, f func(BoolList, string) BoolList) BoolList {
  acc := z
  l.Foreach(func (e string) { acc = f(acc, e) })
  return acc}
func (l StringList) FoldLeftStringList(z StringList, f func(StringList, string) StringList) StringList {
  acc := z
  l.Foreach(func (e string) { acc = f(acc, e) })
  return acc}
func (l StringList) FoldLeftIntList(z IntList, f func(IntList, string) IntList) IntList {
  acc := z
  l.Foreach(func (e string) { acc = f(acc, e) })
  return acc}
func (l StringList) FoldLeftInt64List(z Int64List, f func(Int64List, string) Int64List) Int64List {
  acc := z
  l.Foreach(func (e string) { acc = f(acc, e) })
  return acc}
func (l StringList) FoldLeftByteList(z ByteList, f func(ByteList, string) ByteList) ByteList {
  acc := z
  l.Foreach(func (e string) { acc = f(acc, e) })
  return acc}
func (l StringList) FoldLeftRuneList(z RuneList, f func(RuneList, string) RuneList) RuneList {
  acc := z
  l.Foreach(func (e string) { acc = f(acc, e) })
  return acc}
func (l StringList) FoldLeftFloat32List(z Float32List, f func(Float32List, string) Float32List) Float32List {
  acc := z
  l.Foreach(func (e string) { acc = f(acc, e) })
  return acc}
func (l StringList) FoldLeftFloat64List(z Float64List, f func(Float64List, string) Float64List) Float64List {
  acc := z
  l.Foreach(func (e string) { acc = f(acc, e) })
  return acc}
func (l StringList) FoldLeftAnyList(z AnyList, f func(AnyList, string) AnyList) AnyList {
  acc := z
  l.Foreach(func (e string) { acc = f(acc, e) })
  return acc}
func (l StringList) FoldLeftTuple2List(z Tuple2List, f func(Tuple2List, string) Tuple2List) Tuple2List {
  acc := z
  l.Foreach(func (e string) { acc = f(acc, e) })
  return acc}
func (l IntList) FoldLeftBool(z bool, f func(bool, int) bool) bool {
  acc := z
  l.Foreach(func (e int) { acc = f(acc, e) })
  return acc}
func (l IntList) FoldLeftString(z string, f func(string, int) string) string {
  acc := z
  l.Foreach(func (e int) { acc = f(acc, e) })
  return acc}
func (l IntList) FoldLeftInt(z int, f func(int, int) int) int {
  acc := z
  l.Foreach(func (e int) { acc = f(acc, e) })
  return acc}
func (l IntList) FoldLeftInt64(z int64, f func(int64, int) int64) int64 {
  acc := z
  l.Foreach(func (e int) { acc = f(acc, e) })
  return acc}
func (l IntList) FoldLeftByte(z byte, f func(byte, int) byte) byte {
  acc := z
  l.Foreach(func (e int) { acc = f(acc, e) })
  return acc}
func (l IntList) FoldLeftRune(z rune, f func(rune, int) rune) rune {
  acc := z
  l.Foreach(func (e int) { acc = f(acc, e) })
  return acc}
func (l IntList) FoldLeftFloat32(z float32, f func(float32, int) float32) float32 {
  acc := z
  l.Foreach(func (e int) { acc = f(acc, e) })
  return acc}
func (l IntList) FoldLeftFloat64(z float64, f func(float64, int) float64) float64 {
  acc := z
  l.Foreach(func (e int) { acc = f(acc, e) })
  return acc}
func (l IntList) FoldLeftAny(z Any, f func(Any, int) Any) Any {
  acc := z
  l.Foreach(func (e int) { acc = f(acc, e) })
  return acc}
func (l IntList) FoldLeftTuple2(z Tuple2, f func(Tuple2, int) Tuple2) Tuple2 {
  acc := z
  l.Foreach(func (e int) { acc = f(acc, e) })
  return acc}
func (l IntList) FoldLeftBoolList(z BoolList, f func(BoolList, int) BoolList) BoolList {
  acc := z
  l.Foreach(func (e int) { acc = f(acc, e) })
  return acc}
func (l IntList) FoldLeftStringList(z StringList, f func(StringList, int) StringList) StringList {
  acc := z
  l.Foreach(func (e int) { acc = f(acc, e) })
  return acc}
func (l IntList) FoldLeftIntList(z IntList, f func(IntList, int) IntList) IntList {
  acc := z
  l.Foreach(func (e int) { acc = f(acc, e) })
  return acc}
func (l IntList) FoldLeftInt64List(z Int64List, f func(Int64List, int) Int64List) Int64List {
  acc := z
  l.Foreach(func (e int) { acc = f(acc, e) })
  return acc}
func (l IntList) FoldLeftByteList(z ByteList, f func(ByteList, int) ByteList) ByteList {
  acc := z
  l.Foreach(func (e int) { acc = f(acc, e) })
  return acc}
func (l IntList) FoldLeftRuneList(z RuneList, f func(RuneList, int) RuneList) RuneList {
  acc := z
  l.Foreach(func (e int) { acc = f(acc, e) })
  return acc}
func (l IntList) FoldLeftFloat32List(z Float32List, f func(Float32List, int) Float32List) Float32List {
  acc := z
  l.Foreach(func (e int) { acc = f(acc, e) })
  return acc}
func (l IntList) FoldLeftFloat64List(z Float64List, f func(Float64List, int) Float64List) Float64List {
  acc := z
  l.Foreach(func (e int) { acc = f(acc, e) })
  return acc}
func (l IntList) FoldLeftAnyList(z AnyList, f func(AnyList, int) AnyList) AnyList {
  acc := z
  l.Foreach(func (e int) { acc = f(acc, e) })
  return acc}
func (l IntList) FoldLeftTuple2List(z Tuple2List, f func(Tuple2List, int) Tuple2List) Tuple2List {
  acc := z
  l.Foreach(func (e int) { acc = f(acc, e) })
  return acc}
func (l Int64List) FoldLeftBool(z bool, f func(bool, int64) bool) bool {
  acc := z
  l.Foreach(func (e int64) { acc = f(acc, e) })
  return acc}
func (l Int64List) FoldLeftString(z string, f func(string, int64) string) string {
  acc := z
  l.Foreach(func (e int64) { acc = f(acc, e) })
  return acc}
func (l Int64List) FoldLeftInt(z int, f func(int, int64) int) int {
  acc := z
  l.Foreach(func (e int64) { acc = f(acc, e) })
  return acc}
func (l Int64List) FoldLeftInt64(z int64, f func(int64, int64) int64) int64 {
  acc := z
  l.Foreach(func (e int64) { acc = f(acc, e) })
  return acc}
func (l Int64List) FoldLeftByte(z byte, f func(byte, int64) byte) byte {
  acc := z
  l.Foreach(func (e int64) { acc = f(acc, e) })
  return acc}
func (l Int64List) FoldLeftRune(z rune, f func(rune, int64) rune) rune {
  acc := z
  l.Foreach(func (e int64) { acc = f(acc, e) })
  return acc}
func (l Int64List) FoldLeftFloat32(z float32, f func(float32, int64) float32) float32 {
  acc := z
  l.Foreach(func (e int64) { acc = f(acc, e) })
  return acc}
func (l Int64List) FoldLeftFloat64(z float64, f func(float64, int64) float64) float64 {
  acc := z
  l.Foreach(func (e int64) { acc = f(acc, e) })
  return acc}
func (l Int64List) FoldLeftAny(z Any, f func(Any, int64) Any) Any {
  acc := z
  l.Foreach(func (e int64) { acc = f(acc, e) })
  return acc}
func (l Int64List) FoldLeftTuple2(z Tuple2, f func(Tuple2, int64) Tuple2) Tuple2 {
  acc := z
  l.Foreach(func (e int64) { acc = f(acc, e) })
  return acc}
func (l Int64List) FoldLeftBoolList(z BoolList, f func(BoolList, int64) BoolList) BoolList {
  acc := z
  l.Foreach(func (e int64) { acc = f(acc, e) })
  return acc}
func (l Int64List) FoldLeftStringList(z StringList, f func(StringList, int64) StringList) StringList {
  acc := z
  l.Foreach(func (e int64) { acc = f(acc, e) })
  return acc}
func (l Int64List) FoldLeftIntList(z IntList, f func(IntList, int64) IntList) IntList {
  acc := z
  l.Foreach(func (e int64) { acc = f(acc, e) })
  return acc}
func (l Int64List) FoldLeftInt64List(z Int64List, f func(Int64List, int64) Int64List) Int64List {
  acc := z
  l.Foreach(func (e int64) { acc = f(acc, e) })
  return acc}
func (l Int64List) FoldLeftByteList(z ByteList, f func(ByteList, int64) ByteList) ByteList {
  acc := z
  l.Foreach(func (e int64) { acc = f(acc, e) })
  return acc}
func (l Int64List) FoldLeftRuneList(z RuneList, f func(RuneList, int64) RuneList) RuneList {
  acc := z
  l.Foreach(func (e int64) { acc = f(acc, e) })
  return acc}
func (l Int64List) FoldLeftFloat32List(z Float32List, f func(Float32List, int64) Float32List) Float32List {
  acc := z
  l.Foreach(func (e int64) { acc = f(acc, e) })
  return acc}
func (l Int64List) FoldLeftFloat64List(z Float64List, f func(Float64List, int64) Float64List) Float64List {
  acc := z
  l.Foreach(func (e int64) { acc = f(acc, e) })
  return acc}
func (l Int64List) FoldLeftAnyList(z AnyList, f func(AnyList, int64) AnyList) AnyList {
  acc := z
  l.Foreach(func (e int64) { acc = f(acc, e) })
  return acc}
func (l Int64List) FoldLeftTuple2List(z Tuple2List, f func(Tuple2List, int64) Tuple2List) Tuple2List {
  acc := z
  l.Foreach(func (e int64) { acc = f(acc, e) })
  return acc}
func (l ByteList) FoldLeftBool(z bool, f func(bool, byte) bool) bool {
  acc := z
  l.Foreach(func (e byte) { acc = f(acc, e) })
  return acc}
func (l ByteList) FoldLeftString(z string, f func(string, byte) string) string {
  acc := z
  l.Foreach(func (e byte) { acc = f(acc, e) })
  return acc}
func (l ByteList) FoldLeftInt(z int, f func(int, byte) int) int {
  acc := z
  l.Foreach(func (e byte) { acc = f(acc, e) })
  return acc}
func (l ByteList) FoldLeftInt64(z int64, f func(int64, byte) int64) int64 {
  acc := z
  l.Foreach(func (e byte) { acc = f(acc, e) })
  return acc}
func (l ByteList) FoldLeftByte(z byte, f func(byte, byte) byte) byte {
  acc := z
  l.Foreach(func (e byte) { acc = f(acc, e) })
  return acc}
func (l ByteList) FoldLeftRune(z rune, f func(rune, byte) rune) rune {
  acc := z
  l.Foreach(func (e byte) { acc = f(acc, e) })
  return acc}
func (l ByteList) FoldLeftFloat32(z float32, f func(float32, byte) float32) float32 {
  acc := z
  l.Foreach(func (e byte) { acc = f(acc, e) })
  return acc}
func (l ByteList) FoldLeftFloat64(z float64, f func(float64, byte) float64) float64 {
  acc := z
  l.Foreach(func (e byte) { acc = f(acc, e) })
  return acc}
func (l ByteList) FoldLeftAny(z Any, f func(Any, byte) Any) Any {
  acc := z
  l.Foreach(func (e byte) { acc = f(acc, e) })
  return acc}
func (l ByteList) FoldLeftTuple2(z Tuple2, f func(Tuple2, byte) Tuple2) Tuple2 {
  acc := z
  l.Foreach(func (e byte) { acc = f(acc, e) })
  return acc}
func (l ByteList) FoldLeftBoolList(z BoolList, f func(BoolList, byte) BoolList) BoolList {
  acc := z
  l.Foreach(func (e byte) { acc = f(acc, e) })
  return acc}
func (l ByteList) FoldLeftStringList(z StringList, f func(StringList, byte) StringList) StringList {
  acc := z
  l.Foreach(func (e byte) { acc = f(acc, e) })
  return acc}
func (l ByteList) FoldLeftIntList(z IntList, f func(IntList, byte) IntList) IntList {
  acc := z
  l.Foreach(func (e byte) { acc = f(acc, e) })
  return acc}
func (l ByteList) FoldLeftInt64List(z Int64List, f func(Int64List, byte) Int64List) Int64List {
  acc := z
  l.Foreach(func (e byte) { acc = f(acc, e) })
  return acc}
func (l ByteList) FoldLeftByteList(z ByteList, f func(ByteList, byte) ByteList) ByteList {
  acc := z
  l.Foreach(func (e byte) { acc = f(acc, e) })
  return acc}
func (l ByteList) FoldLeftRuneList(z RuneList, f func(RuneList, byte) RuneList) RuneList {
  acc := z
  l.Foreach(func (e byte) { acc = f(acc, e) })
  return acc}
func (l ByteList) FoldLeftFloat32List(z Float32List, f func(Float32List, byte) Float32List) Float32List {
  acc := z
  l.Foreach(func (e byte) { acc = f(acc, e) })
  return acc}
func (l ByteList) FoldLeftFloat64List(z Float64List, f func(Float64List, byte) Float64List) Float64List {
  acc := z
  l.Foreach(func (e byte) { acc = f(acc, e) })
  return acc}
func (l ByteList) FoldLeftAnyList(z AnyList, f func(AnyList, byte) AnyList) AnyList {
  acc := z
  l.Foreach(func (e byte) { acc = f(acc, e) })
  return acc}
func (l ByteList) FoldLeftTuple2List(z Tuple2List, f func(Tuple2List, byte) Tuple2List) Tuple2List {
  acc := z
  l.Foreach(func (e byte) { acc = f(acc, e) })
  return acc}
func (l RuneList) FoldLeftBool(z bool, f func(bool, rune) bool) bool {
  acc := z
  l.Foreach(func (e rune) { acc = f(acc, e) })
  return acc}
func (l RuneList) FoldLeftString(z string, f func(string, rune) string) string {
  acc := z
  l.Foreach(func (e rune) { acc = f(acc, e) })
  return acc}
func (l RuneList) FoldLeftInt(z int, f func(int, rune) int) int {
  acc := z
  l.Foreach(func (e rune) { acc = f(acc, e) })
  return acc}
func (l RuneList) FoldLeftInt64(z int64, f func(int64, rune) int64) int64 {
  acc := z
  l.Foreach(func (e rune) { acc = f(acc, e) })
  return acc}
func (l RuneList) FoldLeftByte(z byte, f func(byte, rune) byte) byte {
  acc := z
  l.Foreach(func (e rune) { acc = f(acc, e) })
  return acc}
func (l RuneList) FoldLeftRune(z rune, f func(rune, rune) rune) rune {
  acc := z
  l.Foreach(func (e rune) { acc = f(acc, e) })
  return acc}
func (l RuneList) FoldLeftFloat32(z float32, f func(float32, rune) float32) float32 {
  acc := z
  l.Foreach(func (e rune) { acc = f(acc, e) })
  return acc}
func (l RuneList) FoldLeftFloat64(z float64, f func(float64, rune) float64) float64 {
  acc := z
  l.Foreach(func (e rune) { acc = f(acc, e) })
  return acc}
func (l RuneList) FoldLeftAny(z Any, f func(Any, rune) Any) Any {
  acc := z
  l.Foreach(func (e rune) { acc = f(acc, e) })
  return acc}
func (l RuneList) FoldLeftTuple2(z Tuple2, f func(Tuple2, rune) Tuple2) Tuple2 {
  acc := z
  l.Foreach(func (e rune) { acc = f(acc, e) })
  return acc}
func (l RuneList) FoldLeftBoolList(z BoolList, f func(BoolList, rune) BoolList) BoolList {
  acc := z
  l.Foreach(func (e rune) { acc = f(acc, e) })
  return acc}
func (l RuneList) FoldLeftStringList(z StringList, f func(StringList, rune) StringList) StringList {
  acc := z
  l.Foreach(func (e rune) { acc = f(acc, e) })
  return acc}
func (l RuneList) FoldLeftIntList(z IntList, f func(IntList, rune) IntList) IntList {
  acc := z
  l.Foreach(func (e rune) { acc = f(acc, e) })
  return acc}
func (l RuneList) FoldLeftInt64List(z Int64List, f func(Int64List, rune) Int64List) Int64List {
  acc := z
  l.Foreach(func (e rune) { acc = f(acc, e) })
  return acc}
func (l RuneList) FoldLeftByteList(z ByteList, f func(ByteList, rune) ByteList) ByteList {
  acc := z
  l.Foreach(func (e rune) { acc = f(acc, e) })
  return acc}
func (l RuneList) FoldLeftRuneList(z RuneList, f func(RuneList, rune) RuneList) RuneList {
  acc := z
  l.Foreach(func (e rune) { acc = f(acc, e) })
  return acc}
func (l RuneList) FoldLeftFloat32List(z Float32List, f func(Float32List, rune) Float32List) Float32List {
  acc := z
  l.Foreach(func (e rune) { acc = f(acc, e) })
  return acc}
func (l RuneList) FoldLeftFloat64List(z Float64List, f func(Float64List, rune) Float64List) Float64List {
  acc := z
  l.Foreach(func (e rune) { acc = f(acc, e) })
  return acc}
func (l RuneList) FoldLeftAnyList(z AnyList, f func(AnyList, rune) AnyList) AnyList {
  acc := z
  l.Foreach(func (e rune) { acc = f(acc, e) })
  return acc}
func (l RuneList) FoldLeftTuple2List(z Tuple2List, f func(Tuple2List, rune) Tuple2List) Tuple2List {
  acc := z
  l.Foreach(func (e rune) { acc = f(acc, e) })
  return acc}
func (l Float32List) FoldLeftBool(z bool, f func(bool, float32) bool) bool {
  acc := z
  l.Foreach(func (e float32) { acc = f(acc, e) })
  return acc}
func (l Float32List) FoldLeftString(z string, f func(string, float32) string) string {
  acc := z
  l.Foreach(func (e float32) { acc = f(acc, e) })
  return acc}
func (l Float32List) FoldLeftInt(z int, f func(int, float32) int) int {
  acc := z
  l.Foreach(func (e float32) { acc = f(acc, e) })
  return acc}
func (l Float32List) FoldLeftInt64(z int64, f func(int64, float32) int64) int64 {
  acc := z
  l.Foreach(func (e float32) { acc = f(acc, e) })
  return acc}
func (l Float32List) FoldLeftByte(z byte, f func(byte, float32) byte) byte {
  acc := z
  l.Foreach(func (e float32) { acc = f(acc, e) })
  return acc}
func (l Float32List) FoldLeftRune(z rune, f func(rune, float32) rune) rune {
  acc := z
  l.Foreach(func (e float32) { acc = f(acc, e) })
  return acc}
func (l Float32List) FoldLeftFloat32(z float32, f func(float32, float32) float32) float32 {
  acc := z
  l.Foreach(func (e float32) { acc = f(acc, e) })
  return acc}
func (l Float32List) FoldLeftFloat64(z float64, f func(float64, float32) float64) float64 {
  acc := z
  l.Foreach(func (e float32) { acc = f(acc, e) })
  return acc}
func (l Float32List) FoldLeftAny(z Any, f func(Any, float32) Any) Any {
  acc := z
  l.Foreach(func (e float32) { acc = f(acc, e) })
  return acc}
func (l Float32List) FoldLeftTuple2(z Tuple2, f func(Tuple2, float32) Tuple2) Tuple2 {
  acc := z
  l.Foreach(func (e float32) { acc = f(acc, e) })
  return acc}
func (l Float32List) FoldLeftBoolList(z BoolList, f func(BoolList, float32) BoolList) BoolList {
  acc := z
  l.Foreach(func (e float32) { acc = f(acc, e) })
  return acc}
func (l Float32List) FoldLeftStringList(z StringList, f func(StringList, float32) StringList) StringList {
  acc := z
  l.Foreach(func (e float32) { acc = f(acc, e) })
  return acc}
func (l Float32List) FoldLeftIntList(z IntList, f func(IntList, float32) IntList) IntList {
  acc := z
  l.Foreach(func (e float32) { acc = f(acc, e) })
  return acc}
func (l Float32List) FoldLeftInt64List(z Int64List, f func(Int64List, float32) Int64List) Int64List {
  acc := z
  l.Foreach(func (e float32) { acc = f(acc, e) })
  return acc}
func (l Float32List) FoldLeftByteList(z ByteList, f func(ByteList, float32) ByteList) ByteList {
  acc := z
  l.Foreach(func (e float32) { acc = f(acc, e) })
  return acc}
func (l Float32List) FoldLeftRuneList(z RuneList, f func(RuneList, float32) RuneList) RuneList {
  acc := z
  l.Foreach(func (e float32) { acc = f(acc, e) })
  return acc}
func (l Float32List) FoldLeftFloat32List(z Float32List, f func(Float32List, float32) Float32List) Float32List {
  acc := z
  l.Foreach(func (e float32) { acc = f(acc, e) })
  return acc}
func (l Float32List) FoldLeftFloat64List(z Float64List, f func(Float64List, float32) Float64List) Float64List {
  acc := z
  l.Foreach(func (e float32) { acc = f(acc, e) })
  return acc}
func (l Float32List) FoldLeftAnyList(z AnyList, f func(AnyList, float32) AnyList) AnyList {
  acc := z
  l.Foreach(func (e float32) { acc = f(acc, e) })
  return acc}
func (l Float32List) FoldLeftTuple2List(z Tuple2List, f func(Tuple2List, float32) Tuple2List) Tuple2List {
  acc := z
  l.Foreach(func (e float32) { acc = f(acc, e) })
  return acc}
func (l Float64List) FoldLeftBool(z bool, f func(bool, float64) bool) bool {
  acc := z
  l.Foreach(func (e float64) { acc = f(acc, e) })
  return acc}
func (l Float64List) FoldLeftString(z string, f func(string, float64) string) string {
  acc := z
  l.Foreach(func (e float64) { acc = f(acc, e) })
  return acc}
func (l Float64List) FoldLeftInt(z int, f func(int, float64) int) int {
  acc := z
  l.Foreach(func (e float64) { acc = f(acc, e) })
  return acc}
func (l Float64List) FoldLeftInt64(z int64, f func(int64, float64) int64) int64 {
  acc := z
  l.Foreach(func (e float64) { acc = f(acc, e) })
  return acc}
func (l Float64List) FoldLeftByte(z byte, f func(byte, float64) byte) byte {
  acc := z
  l.Foreach(func (e float64) { acc = f(acc, e) })
  return acc}
func (l Float64List) FoldLeftRune(z rune, f func(rune, float64) rune) rune {
  acc := z
  l.Foreach(func (e float64) { acc = f(acc, e) })
  return acc}
func (l Float64List) FoldLeftFloat32(z float32, f func(float32, float64) float32) float32 {
  acc := z
  l.Foreach(func (e float64) { acc = f(acc, e) })
  return acc}
func (l Float64List) FoldLeftFloat64(z float64, f func(float64, float64) float64) float64 {
  acc := z
  l.Foreach(func (e float64) { acc = f(acc, e) })
  return acc}
func (l Float64List) FoldLeftAny(z Any, f func(Any, float64) Any) Any {
  acc := z
  l.Foreach(func (e float64) { acc = f(acc, e) })
  return acc}
func (l Float64List) FoldLeftTuple2(z Tuple2, f func(Tuple2, float64) Tuple2) Tuple2 {
  acc := z
  l.Foreach(func (e float64) { acc = f(acc, e) })
  return acc}
func (l Float64List) FoldLeftBoolList(z BoolList, f func(BoolList, float64) BoolList) BoolList {
  acc := z
  l.Foreach(func (e float64) { acc = f(acc, e) })
  return acc}
func (l Float64List) FoldLeftStringList(z StringList, f func(StringList, float64) StringList) StringList {
  acc := z
  l.Foreach(func (e float64) { acc = f(acc, e) })
  return acc}
func (l Float64List) FoldLeftIntList(z IntList, f func(IntList, float64) IntList) IntList {
  acc := z
  l.Foreach(func (e float64) { acc = f(acc, e) })
  return acc}
func (l Float64List) FoldLeftInt64List(z Int64List, f func(Int64List, float64) Int64List) Int64List {
  acc := z
  l.Foreach(func (e float64) { acc = f(acc, e) })
  return acc}
func (l Float64List) FoldLeftByteList(z ByteList, f func(ByteList, float64) ByteList) ByteList {
  acc := z
  l.Foreach(func (e float64) { acc = f(acc, e) })
  return acc}
func (l Float64List) FoldLeftRuneList(z RuneList, f func(RuneList, float64) RuneList) RuneList {
  acc := z
  l.Foreach(func (e float64) { acc = f(acc, e) })
  return acc}
func (l Float64List) FoldLeftFloat32List(z Float32List, f func(Float32List, float64) Float32List) Float32List {
  acc := z
  l.Foreach(func (e float64) { acc = f(acc, e) })
  return acc}
func (l Float64List) FoldLeftFloat64List(z Float64List, f func(Float64List, float64) Float64List) Float64List {
  acc := z
  l.Foreach(func (e float64) { acc = f(acc, e) })
  return acc}
func (l Float64List) FoldLeftAnyList(z AnyList, f func(AnyList, float64) AnyList) AnyList {
  acc := z
  l.Foreach(func (e float64) { acc = f(acc, e) })
  return acc}
func (l Float64List) FoldLeftTuple2List(z Tuple2List, f func(Tuple2List, float64) Tuple2List) Tuple2List {
  acc := z
  l.Foreach(func (e float64) { acc = f(acc, e) })
  return acc}
func (l AnyList) FoldLeftBool(z bool, f func(bool, Any) bool) bool {
  acc := z
  l.Foreach(func (e Any) { acc = f(acc, e) })
  return acc}
func (l AnyList) FoldLeftString(z string, f func(string, Any) string) string {
  acc := z
  l.Foreach(func (e Any) { acc = f(acc, e) })
  return acc}
func (l AnyList) FoldLeftInt(z int, f func(int, Any) int) int {
  acc := z
  l.Foreach(func (e Any) { acc = f(acc, e) })
  return acc}
func (l AnyList) FoldLeftInt64(z int64, f func(int64, Any) int64) int64 {
  acc := z
  l.Foreach(func (e Any) { acc = f(acc, e) })
  return acc}
func (l AnyList) FoldLeftByte(z byte, f func(byte, Any) byte) byte {
  acc := z
  l.Foreach(func (e Any) { acc = f(acc, e) })
  return acc}
func (l AnyList) FoldLeftRune(z rune, f func(rune, Any) rune) rune {
  acc := z
  l.Foreach(func (e Any) { acc = f(acc, e) })
  return acc}
func (l AnyList) FoldLeftFloat32(z float32, f func(float32, Any) float32) float32 {
  acc := z
  l.Foreach(func (e Any) { acc = f(acc, e) })
  return acc}
func (l AnyList) FoldLeftFloat64(z float64, f func(float64, Any) float64) float64 {
  acc := z
  l.Foreach(func (e Any) { acc = f(acc, e) })
  return acc}
func (l AnyList) FoldLeftAny(z Any, f func(Any, Any) Any) Any {
  acc := z
  l.Foreach(func (e Any) { acc = f(acc, e) })
  return acc}
func (l AnyList) FoldLeftTuple2(z Tuple2, f func(Tuple2, Any) Tuple2) Tuple2 {
  acc := z
  l.Foreach(func (e Any) { acc = f(acc, e) })
  return acc}
func (l AnyList) FoldLeftBoolList(z BoolList, f func(BoolList, Any) BoolList) BoolList {
  acc := z
  l.Foreach(func (e Any) { acc = f(acc, e) })
  return acc}
func (l AnyList) FoldLeftStringList(z StringList, f func(StringList, Any) StringList) StringList {
  acc := z
  l.Foreach(func (e Any) { acc = f(acc, e) })
  return acc}
func (l AnyList) FoldLeftIntList(z IntList, f func(IntList, Any) IntList) IntList {
  acc := z
  l.Foreach(func (e Any) { acc = f(acc, e) })
  return acc}
func (l AnyList) FoldLeftInt64List(z Int64List, f func(Int64List, Any) Int64List) Int64List {
  acc := z
  l.Foreach(func (e Any) { acc = f(acc, e) })
  return acc}
func (l AnyList) FoldLeftByteList(z ByteList, f func(ByteList, Any) ByteList) ByteList {
  acc := z
  l.Foreach(func (e Any) { acc = f(acc, e) })
  return acc}
func (l AnyList) FoldLeftRuneList(z RuneList, f func(RuneList, Any) RuneList) RuneList {
  acc := z
  l.Foreach(func (e Any) { acc = f(acc, e) })
  return acc}
func (l AnyList) FoldLeftFloat32List(z Float32List, f func(Float32List, Any) Float32List) Float32List {
  acc := z
  l.Foreach(func (e Any) { acc = f(acc, e) })
  return acc}
func (l AnyList) FoldLeftFloat64List(z Float64List, f func(Float64List, Any) Float64List) Float64List {
  acc := z
  l.Foreach(func (e Any) { acc = f(acc, e) })
  return acc}
func (l AnyList) FoldLeftAnyList(z AnyList, f func(AnyList, Any) AnyList) AnyList {
  acc := z
  l.Foreach(func (e Any) { acc = f(acc, e) })
  return acc}
func (l AnyList) FoldLeftTuple2List(z Tuple2List, f func(Tuple2List, Any) Tuple2List) Tuple2List {
  acc := z
  l.Foreach(func (e Any) { acc = f(acc, e) })
  return acc}
func (l Tuple2List) FoldLeftBool(z bool, f func(bool, Tuple2) bool) bool {
  acc := z
  l.Foreach(func (e Tuple2) { acc = f(acc, e) })
  return acc}
func (l Tuple2List) FoldLeftString(z string, f func(string, Tuple2) string) string {
  acc := z
  l.Foreach(func (e Tuple2) { acc = f(acc, e) })
  return acc}
func (l Tuple2List) FoldLeftInt(z int, f func(int, Tuple2) int) int {
  acc := z
  l.Foreach(func (e Tuple2) { acc = f(acc, e) })
  return acc}
func (l Tuple2List) FoldLeftInt64(z int64, f func(int64, Tuple2) int64) int64 {
  acc := z
  l.Foreach(func (e Tuple2) { acc = f(acc, e) })
  return acc}
func (l Tuple2List) FoldLeftByte(z byte, f func(byte, Tuple2) byte) byte {
  acc := z
  l.Foreach(func (e Tuple2) { acc = f(acc, e) })
  return acc}
func (l Tuple2List) FoldLeftRune(z rune, f func(rune, Tuple2) rune) rune {
  acc := z
  l.Foreach(func (e Tuple2) { acc = f(acc, e) })
  return acc}
func (l Tuple2List) FoldLeftFloat32(z float32, f func(float32, Tuple2) float32) float32 {
  acc := z
  l.Foreach(func (e Tuple2) { acc = f(acc, e) })
  return acc}
func (l Tuple2List) FoldLeftFloat64(z float64, f func(float64, Tuple2) float64) float64 {
  acc := z
  l.Foreach(func (e Tuple2) { acc = f(acc, e) })
  return acc}
func (l Tuple2List) FoldLeftAny(z Any, f func(Any, Tuple2) Any) Any {
  acc := z
  l.Foreach(func (e Tuple2) { acc = f(acc, e) })
  return acc}
func (l Tuple2List) FoldLeftTuple2(z Tuple2, f func(Tuple2, Tuple2) Tuple2) Tuple2 {
  acc := z
  l.Foreach(func (e Tuple2) { acc = f(acc, e) })
  return acc}
func (l Tuple2List) FoldLeftBoolList(z BoolList, f func(BoolList, Tuple2) BoolList) BoolList {
  acc := z
  l.Foreach(func (e Tuple2) { acc = f(acc, e) })
  return acc}
func (l Tuple2List) FoldLeftStringList(z StringList, f func(StringList, Tuple2) StringList) StringList {
  acc := z
  l.Foreach(func (e Tuple2) { acc = f(acc, e) })
  return acc}
func (l Tuple2List) FoldLeftIntList(z IntList, f func(IntList, Tuple2) IntList) IntList {
  acc := z
  l.Foreach(func (e Tuple2) { acc = f(acc, e) })
  return acc}
func (l Tuple2List) FoldLeftInt64List(z Int64List, f func(Int64List, Tuple2) Int64List) Int64List {
  acc := z
  l.Foreach(func (e Tuple2) { acc = f(acc, e) })
  return acc}
func (l Tuple2List) FoldLeftByteList(z ByteList, f func(ByteList, Tuple2) ByteList) ByteList {
  acc := z
  l.Foreach(func (e Tuple2) { acc = f(acc, e) })
  return acc}
func (l Tuple2List) FoldLeftRuneList(z RuneList, f func(RuneList, Tuple2) RuneList) RuneList {
  acc := z
  l.Foreach(func (e Tuple2) { acc = f(acc, e) })
  return acc}
func (l Tuple2List) FoldLeftFloat32List(z Float32List, f func(Float32List, Tuple2) Float32List) Float32List {
  acc := z
  l.Foreach(func (e Tuple2) { acc = f(acc, e) })
  return acc}
func (l Tuple2List) FoldLeftFloat64List(z Float64List, f func(Float64List, Tuple2) Float64List) Float64List {
  acc := z
  l.Foreach(func (e Tuple2) { acc = f(acc, e) })
  return acc}
func (l Tuple2List) FoldLeftAnyList(z AnyList, f func(AnyList, Tuple2) AnyList) AnyList {
  acc := z
  l.Foreach(func (e Tuple2) { acc = f(acc, e) })
  return acc}
func (l Tuple2List) FoldLeftTuple2List(z Tuple2List, f func(Tuple2List, Tuple2) Tuple2List) Tuple2List {
  acc := z
  l.Foreach(func (e Tuple2) { acc = f(acc, e) })
  return acc}
func (l BoolOptionList) FoldLeftBool(z bool, f func(bool, BoolOption) bool) bool {
  acc := z
  l.Foreach(func (e BoolOption) { acc = f(acc, e) })
  return acc}
func (l BoolOptionList) FoldLeftString(z string, f func(string, BoolOption) string) string {
  acc := z
  l.Foreach(func (e BoolOption) { acc = f(acc, e) })
  return acc}
func (l BoolOptionList) FoldLeftInt(z int, f func(int, BoolOption) int) int {
  acc := z
  l.Foreach(func (e BoolOption) { acc = f(acc, e) })
  return acc}
func (l BoolOptionList) FoldLeftInt64(z int64, f func(int64, BoolOption) int64) int64 {
  acc := z
  l.Foreach(func (e BoolOption) { acc = f(acc, e) })
  return acc}
func (l BoolOptionList) FoldLeftByte(z byte, f func(byte, BoolOption) byte) byte {
  acc := z
  l.Foreach(func (e BoolOption) { acc = f(acc, e) })
  return acc}
func (l BoolOptionList) FoldLeftRune(z rune, f func(rune, BoolOption) rune) rune {
  acc := z
  l.Foreach(func (e BoolOption) { acc = f(acc, e) })
  return acc}
func (l BoolOptionList) FoldLeftFloat32(z float32, f func(float32, BoolOption) float32) float32 {
  acc := z
  l.Foreach(func (e BoolOption) { acc = f(acc, e) })
  return acc}
func (l BoolOptionList) FoldLeftFloat64(z float64, f func(float64, BoolOption) float64) float64 {
  acc := z
  l.Foreach(func (e BoolOption) { acc = f(acc, e) })
  return acc}
func (l BoolOptionList) FoldLeftAny(z Any, f func(Any, BoolOption) Any) Any {
  acc := z
  l.Foreach(func (e BoolOption) { acc = f(acc, e) })
  return acc}
func (l BoolOptionList) FoldLeftTuple2(z Tuple2, f func(Tuple2, BoolOption) Tuple2) Tuple2 {
  acc := z
  l.Foreach(func (e BoolOption) { acc = f(acc, e) })
  return acc}
func (l BoolOptionList) FoldLeftBoolList(z BoolList, f func(BoolList, BoolOption) BoolList) BoolList {
  acc := z
  l.Foreach(func (e BoolOption) { acc = f(acc, e) })
  return acc}
func (l BoolOptionList) FoldLeftStringList(z StringList, f func(StringList, BoolOption) StringList) StringList {
  acc := z
  l.Foreach(func (e BoolOption) { acc = f(acc, e) })
  return acc}
func (l BoolOptionList) FoldLeftIntList(z IntList, f func(IntList, BoolOption) IntList) IntList {
  acc := z
  l.Foreach(func (e BoolOption) { acc = f(acc, e) })
  return acc}
func (l BoolOptionList) FoldLeftInt64List(z Int64List, f func(Int64List, BoolOption) Int64List) Int64List {
  acc := z
  l.Foreach(func (e BoolOption) { acc = f(acc, e) })
  return acc}
func (l BoolOptionList) FoldLeftByteList(z ByteList, f func(ByteList, BoolOption) ByteList) ByteList {
  acc := z
  l.Foreach(func (e BoolOption) { acc = f(acc, e) })
  return acc}
func (l BoolOptionList) FoldLeftRuneList(z RuneList, f func(RuneList, BoolOption) RuneList) RuneList {
  acc := z
  l.Foreach(func (e BoolOption) { acc = f(acc, e) })
  return acc}
func (l BoolOptionList) FoldLeftFloat32List(z Float32List, f func(Float32List, BoolOption) Float32List) Float32List {
  acc := z
  l.Foreach(func (e BoolOption) { acc = f(acc, e) })
  return acc}
func (l BoolOptionList) FoldLeftFloat64List(z Float64List, f func(Float64List, BoolOption) Float64List) Float64List {
  acc := z
  l.Foreach(func (e BoolOption) { acc = f(acc, e) })
  return acc}
func (l BoolOptionList) FoldLeftAnyList(z AnyList, f func(AnyList, BoolOption) AnyList) AnyList {
  acc := z
  l.Foreach(func (e BoolOption) { acc = f(acc, e) })
  return acc}
func (l BoolOptionList) FoldLeftTuple2List(z Tuple2List, f func(Tuple2List, BoolOption) Tuple2List) Tuple2List {
  acc := z
  l.Foreach(func (e BoolOption) { acc = f(acc, e) })
  return acc}
func (l StringOptionList) FoldLeftBool(z bool, f func(bool, StringOption) bool) bool {
  acc := z
  l.Foreach(func (e StringOption) { acc = f(acc, e) })
  return acc}
func (l StringOptionList) FoldLeftString(z string, f func(string, StringOption) string) string {
  acc := z
  l.Foreach(func (e StringOption) { acc = f(acc, e) })
  return acc}
func (l StringOptionList) FoldLeftInt(z int, f func(int, StringOption) int) int {
  acc := z
  l.Foreach(func (e StringOption) { acc = f(acc, e) })
  return acc}
func (l StringOptionList) FoldLeftInt64(z int64, f func(int64, StringOption) int64) int64 {
  acc := z
  l.Foreach(func (e StringOption) { acc = f(acc, e) })
  return acc}
func (l StringOptionList) FoldLeftByte(z byte, f func(byte, StringOption) byte) byte {
  acc := z
  l.Foreach(func (e StringOption) { acc = f(acc, e) })
  return acc}
func (l StringOptionList) FoldLeftRune(z rune, f func(rune, StringOption) rune) rune {
  acc := z
  l.Foreach(func (e StringOption) { acc = f(acc, e) })
  return acc}
func (l StringOptionList) FoldLeftFloat32(z float32, f func(float32, StringOption) float32) float32 {
  acc := z
  l.Foreach(func (e StringOption) { acc = f(acc, e) })
  return acc}
func (l StringOptionList) FoldLeftFloat64(z float64, f func(float64, StringOption) float64) float64 {
  acc := z
  l.Foreach(func (e StringOption) { acc = f(acc, e) })
  return acc}
func (l StringOptionList) FoldLeftAny(z Any, f func(Any, StringOption) Any) Any {
  acc := z
  l.Foreach(func (e StringOption) { acc = f(acc, e) })
  return acc}
func (l StringOptionList) FoldLeftTuple2(z Tuple2, f func(Tuple2, StringOption) Tuple2) Tuple2 {
  acc := z
  l.Foreach(func (e StringOption) { acc = f(acc, e) })
  return acc}
func (l StringOptionList) FoldLeftBoolList(z BoolList, f func(BoolList, StringOption) BoolList) BoolList {
  acc := z
  l.Foreach(func (e StringOption) { acc = f(acc, e) })
  return acc}
func (l StringOptionList) FoldLeftStringList(z StringList, f func(StringList, StringOption) StringList) StringList {
  acc := z
  l.Foreach(func (e StringOption) { acc = f(acc, e) })
  return acc}
func (l StringOptionList) FoldLeftIntList(z IntList, f func(IntList, StringOption) IntList) IntList {
  acc := z
  l.Foreach(func (e StringOption) { acc = f(acc, e) })
  return acc}
func (l StringOptionList) FoldLeftInt64List(z Int64List, f func(Int64List, StringOption) Int64List) Int64List {
  acc := z
  l.Foreach(func (e StringOption) { acc = f(acc, e) })
  return acc}
func (l StringOptionList) FoldLeftByteList(z ByteList, f func(ByteList, StringOption) ByteList) ByteList {
  acc := z
  l.Foreach(func (e StringOption) { acc = f(acc, e) })
  return acc}
func (l StringOptionList) FoldLeftRuneList(z RuneList, f func(RuneList, StringOption) RuneList) RuneList {
  acc := z
  l.Foreach(func (e StringOption) { acc = f(acc, e) })
  return acc}
func (l StringOptionList) FoldLeftFloat32List(z Float32List, f func(Float32List, StringOption) Float32List) Float32List {
  acc := z
  l.Foreach(func (e StringOption) { acc = f(acc, e) })
  return acc}
func (l StringOptionList) FoldLeftFloat64List(z Float64List, f func(Float64List, StringOption) Float64List) Float64List {
  acc := z
  l.Foreach(func (e StringOption) { acc = f(acc, e) })
  return acc}
func (l StringOptionList) FoldLeftAnyList(z AnyList, f func(AnyList, StringOption) AnyList) AnyList {
  acc := z
  l.Foreach(func (e StringOption) { acc = f(acc, e) })
  return acc}
func (l StringOptionList) FoldLeftTuple2List(z Tuple2List, f func(Tuple2List, StringOption) Tuple2List) Tuple2List {
  acc := z
  l.Foreach(func (e StringOption) { acc = f(acc, e) })
  return acc}
func (l IntOptionList) FoldLeftBool(z bool, f func(bool, IntOption) bool) bool {
  acc := z
  l.Foreach(func (e IntOption) { acc = f(acc, e) })
  return acc}
func (l IntOptionList) FoldLeftString(z string, f func(string, IntOption) string) string {
  acc := z
  l.Foreach(func (e IntOption) { acc = f(acc, e) })
  return acc}
func (l IntOptionList) FoldLeftInt(z int, f func(int, IntOption) int) int {
  acc := z
  l.Foreach(func (e IntOption) { acc = f(acc, e) })
  return acc}
func (l IntOptionList) FoldLeftInt64(z int64, f func(int64, IntOption) int64) int64 {
  acc := z
  l.Foreach(func (e IntOption) { acc = f(acc, e) })
  return acc}
func (l IntOptionList) FoldLeftByte(z byte, f func(byte, IntOption) byte) byte {
  acc := z
  l.Foreach(func (e IntOption) { acc = f(acc, e) })
  return acc}
func (l IntOptionList) FoldLeftRune(z rune, f func(rune, IntOption) rune) rune {
  acc := z
  l.Foreach(func (e IntOption) { acc = f(acc, e) })
  return acc}
func (l IntOptionList) FoldLeftFloat32(z float32, f func(float32, IntOption) float32) float32 {
  acc := z
  l.Foreach(func (e IntOption) { acc = f(acc, e) })
  return acc}
func (l IntOptionList) FoldLeftFloat64(z float64, f func(float64, IntOption) float64) float64 {
  acc := z
  l.Foreach(func (e IntOption) { acc = f(acc, e) })
  return acc}
func (l IntOptionList) FoldLeftAny(z Any, f func(Any, IntOption) Any) Any {
  acc := z
  l.Foreach(func (e IntOption) { acc = f(acc, e) })
  return acc}
func (l IntOptionList) FoldLeftTuple2(z Tuple2, f func(Tuple2, IntOption) Tuple2) Tuple2 {
  acc := z
  l.Foreach(func (e IntOption) { acc = f(acc, e) })
  return acc}
func (l IntOptionList) FoldLeftBoolList(z BoolList, f func(BoolList, IntOption) BoolList) BoolList {
  acc := z
  l.Foreach(func (e IntOption) { acc = f(acc, e) })
  return acc}
func (l IntOptionList) FoldLeftStringList(z StringList, f func(StringList, IntOption) StringList) StringList {
  acc := z
  l.Foreach(func (e IntOption) { acc = f(acc, e) })
  return acc}
func (l IntOptionList) FoldLeftIntList(z IntList, f func(IntList, IntOption) IntList) IntList {
  acc := z
  l.Foreach(func (e IntOption) { acc = f(acc, e) })
  return acc}
func (l IntOptionList) FoldLeftInt64List(z Int64List, f func(Int64List, IntOption) Int64List) Int64List {
  acc := z
  l.Foreach(func (e IntOption) { acc = f(acc, e) })
  return acc}
func (l IntOptionList) FoldLeftByteList(z ByteList, f func(ByteList, IntOption) ByteList) ByteList {
  acc := z
  l.Foreach(func (e IntOption) { acc = f(acc, e) })
  return acc}
func (l IntOptionList) FoldLeftRuneList(z RuneList, f func(RuneList, IntOption) RuneList) RuneList {
  acc := z
  l.Foreach(func (e IntOption) { acc = f(acc, e) })
  return acc}
func (l IntOptionList) FoldLeftFloat32List(z Float32List, f func(Float32List, IntOption) Float32List) Float32List {
  acc := z
  l.Foreach(func (e IntOption) { acc = f(acc, e) })
  return acc}
func (l IntOptionList) FoldLeftFloat64List(z Float64List, f func(Float64List, IntOption) Float64List) Float64List {
  acc := z
  l.Foreach(func (e IntOption) { acc = f(acc, e) })
  return acc}
func (l IntOptionList) FoldLeftAnyList(z AnyList, f func(AnyList, IntOption) AnyList) AnyList {
  acc := z
  l.Foreach(func (e IntOption) { acc = f(acc, e) })
  return acc}
func (l IntOptionList) FoldLeftTuple2List(z Tuple2List, f func(Tuple2List, IntOption) Tuple2List) Tuple2List {
  acc := z
  l.Foreach(func (e IntOption) { acc = f(acc, e) })
  return acc}
func (l Int64OptionList) FoldLeftBool(z bool, f func(bool, Int64Option) bool) bool {
  acc := z
  l.Foreach(func (e Int64Option) { acc = f(acc, e) })
  return acc}
func (l Int64OptionList) FoldLeftString(z string, f func(string, Int64Option) string) string {
  acc := z
  l.Foreach(func (e Int64Option) { acc = f(acc, e) })
  return acc}
func (l Int64OptionList) FoldLeftInt(z int, f func(int, Int64Option) int) int {
  acc := z
  l.Foreach(func (e Int64Option) { acc = f(acc, e) })
  return acc}
func (l Int64OptionList) FoldLeftInt64(z int64, f func(int64, Int64Option) int64) int64 {
  acc := z
  l.Foreach(func (e Int64Option) { acc = f(acc, e) })
  return acc}
func (l Int64OptionList) FoldLeftByte(z byte, f func(byte, Int64Option) byte) byte {
  acc := z
  l.Foreach(func (e Int64Option) { acc = f(acc, e) })
  return acc}
func (l Int64OptionList) FoldLeftRune(z rune, f func(rune, Int64Option) rune) rune {
  acc := z
  l.Foreach(func (e Int64Option) { acc = f(acc, e) })
  return acc}
func (l Int64OptionList) FoldLeftFloat32(z float32, f func(float32, Int64Option) float32) float32 {
  acc := z
  l.Foreach(func (e Int64Option) { acc = f(acc, e) })
  return acc}
func (l Int64OptionList) FoldLeftFloat64(z float64, f func(float64, Int64Option) float64) float64 {
  acc := z
  l.Foreach(func (e Int64Option) { acc = f(acc, e) })
  return acc}
func (l Int64OptionList) FoldLeftAny(z Any, f func(Any, Int64Option) Any) Any {
  acc := z
  l.Foreach(func (e Int64Option) { acc = f(acc, e) })
  return acc}
func (l Int64OptionList) FoldLeftTuple2(z Tuple2, f func(Tuple2, Int64Option) Tuple2) Tuple2 {
  acc := z
  l.Foreach(func (e Int64Option) { acc = f(acc, e) })
  return acc}
func (l Int64OptionList) FoldLeftBoolList(z BoolList, f func(BoolList, Int64Option) BoolList) BoolList {
  acc := z
  l.Foreach(func (e Int64Option) { acc = f(acc, e) })
  return acc}
func (l Int64OptionList) FoldLeftStringList(z StringList, f func(StringList, Int64Option) StringList) StringList {
  acc := z
  l.Foreach(func (e Int64Option) { acc = f(acc, e) })
  return acc}
func (l Int64OptionList) FoldLeftIntList(z IntList, f func(IntList, Int64Option) IntList) IntList {
  acc := z
  l.Foreach(func (e Int64Option) { acc = f(acc, e) })
  return acc}
func (l Int64OptionList) FoldLeftInt64List(z Int64List, f func(Int64List, Int64Option) Int64List) Int64List {
  acc := z
  l.Foreach(func (e Int64Option) { acc = f(acc, e) })
  return acc}
func (l Int64OptionList) FoldLeftByteList(z ByteList, f func(ByteList, Int64Option) ByteList) ByteList {
  acc := z
  l.Foreach(func (e Int64Option) { acc = f(acc, e) })
  return acc}
func (l Int64OptionList) FoldLeftRuneList(z RuneList, f func(RuneList, Int64Option) RuneList) RuneList {
  acc := z
  l.Foreach(func (e Int64Option) { acc = f(acc, e) })
  return acc}
func (l Int64OptionList) FoldLeftFloat32List(z Float32List, f func(Float32List, Int64Option) Float32List) Float32List {
  acc := z
  l.Foreach(func (e Int64Option) { acc = f(acc, e) })
  return acc}
func (l Int64OptionList) FoldLeftFloat64List(z Float64List, f func(Float64List, Int64Option) Float64List) Float64List {
  acc := z
  l.Foreach(func (e Int64Option) { acc = f(acc, e) })
  return acc}
func (l Int64OptionList) FoldLeftAnyList(z AnyList, f func(AnyList, Int64Option) AnyList) AnyList {
  acc := z
  l.Foreach(func (e Int64Option) { acc = f(acc, e) })
  return acc}
func (l Int64OptionList) FoldLeftTuple2List(z Tuple2List, f func(Tuple2List, Int64Option) Tuple2List) Tuple2List {
  acc := z
  l.Foreach(func (e Int64Option) { acc = f(acc, e) })
  return acc}
func (l ByteOptionList) FoldLeftBool(z bool, f func(bool, ByteOption) bool) bool {
  acc := z
  l.Foreach(func (e ByteOption) { acc = f(acc, e) })
  return acc}
func (l ByteOptionList) FoldLeftString(z string, f func(string, ByteOption) string) string {
  acc := z
  l.Foreach(func (e ByteOption) { acc = f(acc, e) })
  return acc}
func (l ByteOptionList) FoldLeftInt(z int, f func(int, ByteOption) int) int {
  acc := z
  l.Foreach(func (e ByteOption) { acc = f(acc, e) })
  return acc}
func (l ByteOptionList) FoldLeftInt64(z int64, f func(int64, ByteOption) int64) int64 {
  acc := z
  l.Foreach(func (e ByteOption) { acc = f(acc, e) })
  return acc}
func (l ByteOptionList) FoldLeftByte(z byte, f func(byte, ByteOption) byte) byte {
  acc := z
  l.Foreach(func (e ByteOption) { acc = f(acc, e) })
  return acc}
func (l ByteOptionList) FoldLeftRune(z rune, f func(rune, ByteOption) rune) rune {
  acc := z
  l.Foreach(func (e ByteOption) { acc = f(acc, e) })
  return acc}
func (l ByteOptionList) FoldLeftFloat32(z float32, f func(float32, ByteOption) float32) float32 {
  acc := z
  l.Foreach(func (e ByteOption) { acc = f(acc, e) })
  return acc}
func (l ByteOptionList) FoldLeftFloat64(z float64, f func(float64, ByteOption) float64) float64 {
  acc := z
  l.Foreach(func (e ByteOption) { acc = f(acc, e) })
  return acc}
func (l ByteOptionList) FoldLeftAny(z Any, f func(Any, ByteOption) Any) Any {
  acc := z
  l.Foreach(func (e ByteOption) { acc = f(acc, e) })
  return acc}
func (l ByteOptionList) FoldLeftTuple2(z Tuple2, f func(Tuple2, ByteOption) Tuple2) Tuple2 {
  acc := z
  l.Foreach(func (e ByteOption) { acc = f(acc, e) })
  return acc}
func (l ByteOptionList) FoldLeftBoolList(z BoolList, f func(BoolList, ByteOption) BoolList) BoolList {
  acc := z
  l.Foreach(func (e ByteOption) { acc = f(acc, e) })
  return acc}
func (l ByteOptionList) FoldLeftStringList(z StringList, f func(StringList, ByteOption) StringList) StringList {
  acc := z
  l.Foreach(func (e ByteOption) { acc = f(acc, e) })
  return acc}
func (l ByteOptionList) FoldLeftIntList(z IntList, f func(IntList, ByteOption) IntList) IntList {
  acc := z
  l.Foreach(func (e ByteOption) { acc = f(acc, e) })
  return acc}
func (l ByteOptionList) FoldLeftInt64List(z Int64List, f func(Int64List, ByteOption) Int64List) Int64List {
  acc := z
  l.Foreach(func (e ByteOption) { acc = f(acc, e) })
  return acc}
func (l ByteOptionList) FoldLeftByteList(z ByteList, f func(ByteList, ByteOption) ByteList) ByteList {
  acc := z
  l.Foreach(func (e ByteOption) { acc = f(acc, e) })
  return acc}
func (l ByteOptionList) FoldLeftRuneList(z RuneList, f func(RuneList, ByteOption) RuneList) RuneList {
  acc := z
  l.Foreach(func (e ByteOption) { acc = f(acc, e) })
  return acc}
func (l ByteOptionList) FoldLeftFloat32List(z Float32List, f func(Float32List, ByteOption) Float32List) Float32List {
  acc := z
  l.Foreach(func (e ByteOption) { acc = f(acc, e) })
  return acc}
func (l ByteOptionList) FoldLeftFloat64List(z Float64List, f func(Float64List, ByteOption) Float64List) Float64List {
  acc := z
  l.Foreach(func (e ByteOption) { acc = f(acc, e) })
  return acc}
func (l ByteOptionList) FoldLeftAnyList(z AnyList, f func(AnyList, ByteOption) AnyList) AnyList {
  acc := z
  l.Foreach(func (e ByteOption) { acc = f(acc, e) })
  return acc}
func (l ByteOptionList) FoldLeftTuple2List(z Tuple2List, f func(Tuple2List, ByteOption) Tuple2List) Tuple2List {
  acc := z
  l.Foreach(func (e ByteOption) { acc = f(acc, e) })
  return acc}
func (l RuneOptionList) FoldLeftBool(z bool, f func(bool, RuneOption) bool) bool {
  acc := z
  l.Foreach(func (e RuneOption) { acc = f(acc, e) })
  return acc}
func (l RuneOptionList) FoldLeftString(z string, f func(string, RuneOption) string) string {
  acc := z
  l.Foreach(func (e RuneOption) { acc = f(acc, e) })
  return acc}
func (l RuneOptionList) FoldLeftInt(z int, f func(int, RuneOption) int) int {
  acc := z
  l.Foreach(func (e RuneOption) { acc = f(acc, e) })
  return acc}
func (l RuneOptionList) FoldLeftInt64(z int64, f func(int64, RuneOption) int64) int64 {
  acc := z
  l.Foreach(func (e RuneOption) { acc = f(acc, e) })
  return acc}
func (l RuneOptionList) FoldLeftByte(z byte, f func(byte, RuneOption) byte) byte {
  acc := z
  l.Foreach(func (e RuneOption) { acc = f(acc, e) })
  return acc}
func (l RuneOptionList) FoldLeftRune(z rune, f func(rune, RuneOption) rune) rune {
  acc := z
  l.Foreach(func (e RuneOption) { acc = f(acc, e) })
  return acc}
func (l RuneOptionList) FoldLeftFloat32(z float32, f func(float32, RuneOption) float32) float32 {
  acc := z
  l.Foreach(func (e RuneOption) { acc = f(acc, e) })
  return acc}
func (l RuneOptionList) FoldLeftFloat64(z float64, f func(float64, RuneOption) float64) float64 {
  acc := z
  l.Foreach(func (e RuneOption) { acc = f(acc, e) })
  return acc}
func (l RuneOptionList) FoldLeftAny(z Any, f func(Any, RuneOption) Any) Any {
  acc := z
  l.Foreach(func (e RuneOption) { acc = f(acc, e) })
  return acc}
func (l RuneOptionList) FoldLeftTuple2(z Tuple2, f func(Tuple2, RuneOption) Tuple2) Tuple2 {
  acc := z
  l.Foreach(func (e RuneOption) { acc = f(acc, e) })
  return acc}
func (l RuneOptionList) FoldLeftBoolList(z BoolList, f func(BoolList, RuneOption) BoolList) BoolList {
  acc := z
  l.Foreach(func (e RuneOption) { acc = f(acc, e) })
  return acc}
func (l RuneOptionList) FoldLeftStringList(z StringList, f func(StringList, RuneOption) StringList) StringList {
  acc := z
  l.Foreach(func (e RuneOption) { acc = f(acc, e) })
  return acc}
func (l RuneOptionList) FoldLeftIntList(z IntList, f func(IntList, RuneOption) IntList) IntList {
  acc := z
  l.Foreach(func (e RuneOption) { acc = f(acc, e) })
  return acc}
func (l RuneOptionList) FoldLeftInt64List(z Int64List, f func(Int64List, RuneOption) Int64List) Int64List {
  acc := z
  l.Foreach(func (e RuneOption) { acc = f(acc, e) })
  return acc}
func (l RuneOptionList) FoldLeftByteList(z ByteList, f func(ByteList, RuneOption) ByteList) ByteList {
  acc := z
  l.Foreach(func (e RuneOption) { acc = f(acc, e) })
  return acc}
func (l RuneOptionList) FoldLeftRuneList(z RuneList, f func(RuneList, RuneOption) RuneList) RuneList {
  acc := z
  l.Foreach(func (e RuneOption) { acc = f(acc, e) })
  return acc}
func (l RuneOptionList) FoldLeftFloat32List(z Float32List, f func(Float32List, RuneOption) Float32List) Float32List {
  acc := z
  l.Foreach(func (e RuneOption) { acc = f(acc, e) })
  return acc}
func (l RuneOptionList) FoldLeftFloat64List(z Float64List, f func(Float64List, RuneOption) Float64List) Float64List {
  acc := z
  l.Foreach(func (e RuneOption) { acc = f(acc, e) })
  return acc}
func (l RuneOptionList) FoldLeftAnyList(z AnyList, f func(AnyList, RuneOption) AnyList) AnyList {
  acc := z
  l.Foreach(func (e RuneOption) { acc = f(acc, e) })
  return acc}
func (l RuneOptionList) FoldLeftTuple2List(z Tuple2List, f func(Tuple2List, RuneOption) Tuple2List) Tuple2List {
  acc := z
  l.Foreach(func (e RuneOption) { acc = f(acc, e) })
  return acc}
func (l Float32OptionList) FoldLeftBool(z bool, f func(bool, Float32Option) bool) bool {
  acc := z
  l.Foreach(func (e Float32Option) { acc = f(acc, e) })
  return acc}
func (l Float32OptionList) FoldLeftString(z string, f func(string, Float32Option) string) string {
  acc := z
  l.Foreach(func (e Float32Option) { acc = f(acc, e) })
  return acc}
func (l Float32OptionList) FoldLeftInt(z int, f func(int, Float32Option) int) int {
  acc := z
  l.Foreach(func (e Float32Option) { acc = f(acc, e) })
  return acc}
func (l Float32OptionList) FoldLeftInt64(z int64, f func(int64, Float32Option) int64) int64 {
  acc := z
  l.Foreach(func (e Float32Option) { acc = f(acc, e) })
  return acc}
func (l Float32OptionList) FoldLeftByte(z byte, f func(byte, Float32Option) byte) byte {
  acc := z
  l.Foreach(func (e Float32Option) { acc = f(acc, e) })
  return acc}
func (l Float32OptionList) FoldLeftRune(z rune, f func(rune, Float32Option) rune) rune {
  acc := z
  l.Foreach(func (e Float32Option) { acc = f(acc, e) })
  return acc}
func (l Float32OptionList) FoldLeftFloat32(z float32, f func(float32, Float32Option) float32) float32 {
  acc := z
  l.Foreach(func (e Float32Option) { acc = f(acc, e) })
  return acc}
func (l Float32OptionList) FoldLeftFloat64(z float64, f func(float64, Float32Option) float64) float64 {
  acc := z
  l.Foreach(func (e Float32Option) { acc = f(acc, e) })
  return acc}
func (l Float32OptionList) FoldLeftAny(z Any, f func(Any, Float32Option) Any) Any {
  acc := z
  l.Foreach(func (e Float32Option) { acc = f(acc, e) })
  return acc}
func (l Float32OptionList) FoldLeftTuple2(z Tuple2, f func(Tuple2, Float32Option) Tuple2) Tuple2 {
  acc := z
  l.Foreach(func (e Float32Option) { acc = f(acc, e) })
  return acc}
func (l Float32OptionList) FoldLeftBoolList(z BoolList, f func(BoolList, Float32Option) BoolList) BoolList {
  acc := z
  l.Foreach(func (e Float32Option) { acc = f(acc, e) })
  return acc}
func (l Float32OptionList) FoldLeftStringList(z StringList, f func(StringList, Float32Option) StringList) StringList {
  acc := z
  l.Foreach(func (e Float32Option) { acc = f(acc, e) })
  return acc}
func (l Float32OptionList) FoldLeftIntList(z IntList, f func(IntList, Float32Option) IntList) IntList {
  acc := z
  l.Foreach(func (e Float32Option) { acc = f(acc, e) })
  return acc}
func (l Float32OptionList) FoldLeftInt64List(z Int64List, f func(Int64List, Float32Option) Int64List) Int64List {
  acc := z
  l.Foreach(func (e Float32Option) { acc = f(acc, e) })
  return acc}
func (l Float32OptionList) FoldLeftByteList(z ByteList, f func(ByteList, Float32Option) ByteList) ByteList {
  acc := z
  l.Foreach(func (e Float32Option) { acc = f(acc, e) })
  return acc}
func (l Float32OptionList) FoldLeftRuneList(z RuneList, f func(RuneList, Float32Option) RuneList) RuneList {
  acc := z
  l.Foreach(func (e Float32Option) { acc = f(acc, e) })
  return acc}
func (l Float32OptionList) FoldLeftFloat32List(z Float32List, f func(Float32List, Float32Option) Float32List) Float32List {
  acc := z
  l.Foreach(func (e Float32Option) { acc = f(acc, e) })
  return acc}
func (l Float32OptionList) FoldLeftFloat64List(z Float64List, f func(Float64List, Float32Option) Float64List) Float64List {
  acc := z
  l.Foreach(func (e Float32Option) { acc = f(acc, e) })
  return acc}
func (l Float32OptionList) FoldLeftAnyList(z AnyList, f func(AnyList, Float32Option) AnyList) AnyList {
  acc := z
  l.Foreach(func (e Float32Option) { acc = f(acc, e) })
  return acc}
func (l Float32OptionList) FoldLeftTuple2List(z Tuple2List, f func(Tuple2List, Float32Option) Tuple2List) Tuple2List {
  acc := z
  l.Foreach(func (e Float32Option) { acc = f(acc, e) })
  return acc}
func (l Float64OptionList) FoldLeftBool(z bool, f func(bool, Float64Option) bool) bool {
  acc := z
  l.Foreach(func (e Float64Option) { acc = f(acc, e) })
  return acc}
func (l Float64OptionList) FoldLeftString(z string, f func(string, Float64Option) string) string {
  acc := z
  l.Foreach(func (e Float64Option) { acc = f(acc, e) })
  return acc}
func (l Float64OptionList) FoldLeftInt(z int, f func(int, Float64Option) int) int {
  acc := z
  l.Foreach(func (e Float64Option) { acc = f(acc, e) })
  return acc}
func (l Float64OptionList) FoldLeftInt64(z int64, f func(int64, Float64Option) int64) int64 {
  acc := z
  l.Foreach(func (e Float64Option) { acc = f(acc, e) })
  return acc}
func (l Float64OptionList) FoldLeftByte(z byte, f func(byte, Float64Option) byte) byte {
  acc := z
  l.Foreach(func (e Float64Option) { acc = f(acc, e) })
  return acc}
func (l Float64OptionList) FoldLeftRune(z rune, f func(rune, Float64Option) rune) rune {
  acc := z
  l.Foreach(func (e Float64Option) { acc = f(acc, e) })
  return acc}
func (l Float64OptionList) FoldLeftFloat32(z float32, f func(float32, Float64Option) float32) float32 {
  acc := z
  l.Foreach(func (e Float64Option) { acc = f(acc, e) })
  return acc}
func (l Float64OptionList) FoldLeftFloat64(z float64, f func(float64, Float64Option) float64) float64 {
  acc := z
  l.Foreach(func (e Float64Option) { acc = f(acc, e) })
  return acc}
func (l Float64OptionList) FoldLeftAny(z Any, f func(Any, Float64Option) Any) Any {
  acc := z
  l.Foreach(func (e Float64Option) { acc = f(acc, e) })
  return acc}
func (l Float64OptionList) FoldLeftTuple2(z Tuple2, f func(Tuple2, Float64Option) Tuple2) Tuple2 {
  acc := z
  l.Foreach(func (e Float64Option) { acc = f(acc, e) })
  return acc}
func (l Float64OptionList) FoldLeftBoolList(z BoolList, f func(BoolList, Float64Option) BoolList) BoolList {
  acc := z
  l.Foreach(func (e Float64Option) { acc = f(acc, e) })
  return acc}
func (l Float64OptionList) FoldLeftStringList(z StringList, f func(StringList, Float64Option) StringList) StringList {
  acc := z
  l.Foreach(func (e Float64Option) { acc = f(acc, e) })
  return acc}
func (l Float64OptionList) FoldLeftIntList(z IntList, f func(IntList, Float64Option) IntList) IntList {
  acc := z
  l.Foreach(func (e Float64Option) { acc = f(acc, e) })
  return acc}
func (l Float64OptionList) FoldLeftInt64List(z Int64List, f func(Int64List, Float64Option) Int64List) Int64List {
  acc := z
  l.Foreach(func (e Float64Option) { acc = f(acc, e) })
  return acc}
func (l Float64OptionList) FoldLeftByteList(z ByteList, f func(ByteList, Float64Option) ByteList) ByteList {
  acc := z
  l.Foreach(func (e Float64Option) { acc = f(acc, e) })
  return acc}
func (l Float64OptionList) FoldLeftRuneList(z RuneList, f func(RuneList, Float64Option) RuneList) RuneList {
  acc := z
  l.Foreach(func (e Float64Option) { acc = f(acc, e) })
  return acc}
func (l Float64OptionList) FoldLeftFloat32List(z Float32List, f func(Float32List, Float64Option) Float32List) Float32List {
  acc := z
  l.Foreach(func (e Float64Option) { acc = f(acc, e) })
  return acc}
func (l Float64OptionList) FoldLeftFloat64List(z Float64List, f func(Float64List, Float64Option) Float64List) Float64List {
  acc := z
  l.Foreach(func (e Float64Option) { acc = f(acc, e) })
  return acc}
func (l Float64OptionList) FoldLeftAnyList(z AnyList, f func(AnyList, Float64Option) AnyList) AnyList {
  acc := z
  l.Foreach(func (e Float64Option) { acc = f(acc, e) })
  return acc}
func (l Float64OptionList) FoldLeftTuple2List(z Tuple2List, f func(Tuple2List, Float64Option) Tuple2List) Tuple2List {
  acc := z
  l.Foreach(func (e Float64Option) { acc = f(acc, e) })
  return acc}
func (l AnyOptionList) FoldLeftBool(z bool, f func(bool, AnyOption) bool) bool {
  acc := z
  l.Foreach(func (e AnyOption) { acc = f(acc, e) })
  return acc}
func (l AnyOptionList) FoldLeftString(z string, f func(string, AnyOption) string) string {
  acc := z
  l.Foreach(func (e AnyOption) { acc = f(acc, e) })
  return acc}
func (l AnyOptionList) FoldLeftInt(z int, f func(int, AnyOption) int) int {
  acc := z
  l.Foreach(func (e AnyOption) { acc = f(acc, e) })
  return acc}
func (l AnyOptionList) FoldLeftInt64(z int64, f func(int64, AnyOption) int64) int64 {
  acc := z
  l.Foreach(func (e AnyOption) { acc = f(acc, e) })
  return acc}
func (l AnyOptionList) FoldLeftByte(z byte, f func(byte, AnyOption) byte) byte {
  acc := z
  l.Foreach(func (e AnyOption) { acc = f(acc, e) })
  return acc}
func (l AnyOptionList) FoldLeftRune(z rune, f func(rune, AnyOption) rune) rune {
  acc := z
  l.Foreach(func (e AnyOption) { acc = f(acc, e) })
  return acc}
func (l AnyOptionList) FoldLeftFloat32(z float32, f func(float32, AnyOption) float32) float32 {
  acc := z
  l.Foreach(func (e AnyOption) { acc = f(acc, e) })
  return acc}
func (l AnyOptionList) FoldLeftFloat64(z float64, f func(float64, AnyOption) float64) float64 {
  acc := z
  l.Foreach(func (e AnyOption) { acc = f(acc, e) })
  return acc}
func (l AnyOptionList) FoldLeftAny(z Any, f func(Any, AnyOption) Any) Any {
  acc := z
  l.Foreach(func (e AnyOption) { acc = f(acc, e) })
  return acc}
func (l AnyOptionList) FoldLeftTuple2(z Tuple2, f func(Tuple2, AnyOption) Tuple2) Tuple2 {
  acc := z
  l.Foreach(func (e AnyOption) { acc = f(acc, e) })
  return acc}
func (l AnyOptionList) FoldLeftBoolList(z BoolList, f func(BoolList, AnyOption) BoolList) BoolList {
  acc := z
  l.Foreach(func (e AnyOption) { acc = f(acc, e) })
  return acc}
func (l AnyOptionList) FoldLeftStringList(z StringList, f func(StringList, AnyOption) StringList) StringList {
  acc := z
  l.Foreach(func (e AnyOption) { acc = f(acc, e) })
  return acc}
func (l AnyOptionList) FoldLeftIntList(z IntList, f func(IntList, AnyOption) IntList) IntList {
  acc := z
  l.Foreach(func (e AnyOption) { acc = f(acc, e) })
  return acc}
func (l AnyOptionList) FoldLeftInt64List(z Int64List, f func(Int64List, AnyOption) Int64List) Int64List {
  acc := z
  l.Foreach(func (e AnyOption) { acc = f(acc, e) })
  return acc}
func (l AnyOptionList) FoldLeftByteList(z ByteList, f func(ByteList, AnyOption) ByteList) ByteList {
  acc := z
  l.Foreach(func (e AnyOption) { acc = f(acc, e) })
  return acc}
func (l AnyOptionList) FoldLeftRuneList(z RuneList, f func(RuneList, AnyOption) RuneList) RuneList {
  acc := z
  l.Foreach(func (e AnyOption) { acc = f(acc, e) })
  return acc}
func (l AnyOptionList) FoldLeftFloat32List(z Float32List, f func(Float32List, AnyOption) Float32List) Float32List {
  acc := z
  l.Foreach(func (e AnyOption) { acc = f(acc, e) })
  return acc}
func (l AnyOptionList) FoldLeftFloat64List(z Float64List, f func(Float64List, AnyOption) Float64List) Float64List {
  acc := z
  l.Foreach(func (e AnyOption) { acc = f(acc, e) })
  return acc}
func (l AnyOptionList) FoldLeftAnyList(z AnyList, f func(AnyList, AnyOption) AnyList) AnyList {
  acc := z
  l.Foreach(func (e AnyOption) { acc = f(acc, e) })
  return acc}
func (l AnyOptionList) FoldLeftTuple2List(z Tuple2List, f func(Tuple2List, AnyOption) Tuple2List) Tuple2List {
  acc := z
  l.Foreach(func (e AnyOption) { acc = f(acc, e) })
  return acc}
func (l Tuple2OptionList) FoldLeftBool(z bool, f func(bool, Tuple2Option) bool) bool {
  acc := z
  l.Foreach(func (e Tuple2Option) { acc = f(acc, e) })
  return acc}
func (l Tuple2OptionList) FoldLeftString(z string, f func(string, Tuple2Option) string) string {
  acc := z
  l.Foreach(func (e Tuple2Option) { acc = f(acc, e) })
  return acc}
func (l Tuple2OptionList) FoldLeftInt(z int, f func(int, Tuple2Option) int) int {
  acc := z
  l.Foreach(func (e Tuple2Option) { acc = f(acc, e) })
  return acc}
func (l Tuple2OptionList) FoldLeftInt64(z int64, f func(int64, Tuple2Option) int64) int64 {
  acc := z
  l.Foreach(func (e Tuple2Option) { acc = f(acc, e) })
  return acc}
func (l Tuple2OptionList) FoldLeftByte(z byte, f func(byte, Tuple2Option) byte) byte {
  acc := z
  l.Foreach(func (e Tuple2Option) { acc = f(acc, e) })
  return acc}
func (l Tuple2OptionList) FoldLeftRune(z rune, f func(rune, Tuple2Option) rune) rune {
  acc := z
  l.Foreach(func (e Tuple2Option) { acc = f(acc, e) })
  return acc}
func (l Tuple2OptionList) FoldLeftFloat32(z float32, f func(float32, Tuple2Option) float32) float32 {
  acc := z
  l.Foreach(func (e Tuple2Option) { acc = f(acc, e) })
  return acc}
func (l Tuple2OptionList) FoldLeftFloat64(z float64, f func(float64, Tuple2Option) float64) float64 {
  acc := z
  l.Foreach(func (e Tuple2Option) { acc = f(acc, e) })
  return acc}
func (l Tuple2OptionList) FoldLeftAny(z Any, f func(Any, Tuple2Option) Any) Any {
  acc := z
  l.Foreach(func (e Tuple2Option) { acc = f(acc, e) })
  return acc}
func (l Tuple2OptionList) FoldLeftTuple2(z Tuple2, f func(Tuple2, Tuple2Option) Tuple2) Tuple2 {
  acc := z
  l.Foreach(func (e Tuple2Option) { acc = f(acc, e) })
  return acc}
func (l Tuple2OptionList) FoldLeftBoolList(z BoolList, f func(BoolList, Tuple2Option) BoolList) BoolList {
  acc := z
  l.Foreach(func (e Tuple2Option) { acc = f(acc, e) })
  return acc}
func (l Tuple2OptionList) FoldLeftStringList(z StringList, f func(StringList, Tuple2Option) StringList) StringList {
  acc := z
  l.Foreach(func (e Tuple2Option) { acc = f(acc, e) })
  return acc}
func (l Tuple2OptionList) FoldLeftIntList(z IntList, f func(IntList, Tuple2Option) IntList) IntList {
  acc := z
  l.Foreach(func (e Tuple2Option) { acc = f(acc, e) })
  return acc}
func (l Tuple2OptionList) FoldLeftInt64List(z Int64List, f func(Int64List, Tuple2Option) Int64List) Int64List {
  acc := z
  l.Foreach(func (e Tuple2Option) { acc = f(acc, e) })
  return acc}
func (l Tuple2OptionList) FoldLeftByteList(z ByteList, f func(ByteList, Tuple2Option) ByteList) ByteList {
  acc := z
  l.Foreach(func (e Tuple2Option) { acc = f(acc, e) })
  return acc}
func (l Tuple2OptionList) FoldLeftRuneList(z RuneList, f func(RuneList, Tuple2Option) RuneList) RuneList {
  acc := z
  l.Foreach(func (e Tuple2Option) { acc = f(acc, e) })
  return acc}
func (l Tuple2OptionList) FoldLeftFloat32List(z Float32List, f func(Float32List, Tuple2Option) Float32List) Float32List {
  acc := z
  l.Foreach(func (e Tuple2Option) { acc = f(acc, e) })
  return acc}
func (l Tuple2OptionList) FoldLeftFloat64List(z Float64List, f func(Float64List, Tuple2Option) Float64List) Float64List {
  acc := z
  l.Foreach(func (e Tuple2Option) { acc = f(acc, e) })
  return acc}
func (l Tuple2OptionList) FoldLeftAnyList(z AnyList, f func(AnyList, Tuple2Option) AnyList) AnyList {
  acc := z
  l.Foreach(func (e Tuple2Option) { acc = f(acc, e) })
  return acc}
func (l Tuple2OptionList) FoldLeftTuple2List(z Tuple2List, f func(Tuple2List, Tuple2Option) Tuple2List) Tuple2List {
  acc := z
  l.Foreach(func (e Tuple2Option) { acc = f(acc, e) })
  return acc}