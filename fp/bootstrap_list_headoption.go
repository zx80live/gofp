// bootstrap_list_headoption.go
// DO NOT EDIT THIS FILE WAS GENERATED AUTOMATICALLY BY https://github.com/zx80live/gofp-bootstrap

package fp

func (l BoolList) HeadOption() BoolOption {
	if l.NonEmpty() {
		return Bool(*l.head)
	} else {
		return NoneBoolOption
	}
}
func (l StringList) HeadOption() StringOption {
	if l.NonEmpty() {
		return String(*l.head)
	} else {
		return NoneStringOption
	}
}
func (l IntList) HeadOption() IntOption {
	if l.NonEmpty() {
		return Int(*l.head)
	} else {
		return NoneIntOption
	}
}
func (l Int8List) HeadOption() Int8Option {
	if l.NonEmpty() {
		return Int8(*l.head)
	} else {
		return NoneInt8Option
	}
}
func (l Int16List) HeadOption() Int16Option {
	if l.NonEmpty() {
		return Int16(*l.head)
	} else {
		return NoneInt16Option
	}
}
func (l Int32List) HeadOption() Int32Option {
	if l.NonEmpty() {
		return Int32(*l.head)
	} else {
		return NoneInt32Option
	}
}
func (l Int64List) HeadOption() Int64Option {
	if l.NonEmpty() {
		return Int64(*l.head)
	} else {
		return NoneInt64Option
	}
}
func (l UintList) HeadOption() UintOption {
	if l.NonEmpty() {
		return Uint(*l.head)
	} else {
		return NoneUintOption
	}
}
func (l Uint8List) HeadOption() Uint8Option {
	if l.NonEmpty() {
		return Uint8(*l.head)
	} else {
		return NoneUint8Option
	}
}
func (l Uint16List) HeadOption() Uint16Option {
	if l.NonEmpty() {
		return Uint16(*l.head)
	} else {
		return NoneUint16Option
	}
}
func (l Uint32List) HeadOption() Uint32Option {
	if l.NonEmpty() {
		return Uint32(*l.head)
	} else {
		return NoneUint32Option
	}
}
func (l Uint64List) HeadOption() Uint64Option {
	if l.NonEmpty() {
		return Uint64(*l.head)
	} else {
		return NoneUint64Option
	}
}
func (l UintptrList) HeadOption() UintptrOption {
	if l.NonEmpty() {
		return Uintptr(*l.head)
	} else {
		return NoneUintptrOption
	}
}
func (l ByteList) HeadOption() ByteOption {
	if l.NonEmpty() {
		return Byte(*l.head)
	} else {
		return NoneByteOption
	}
}
func (l RuneList) HeadOption() RuneOption {
	if l.NonEmpty() {
		return Rune(*l.head)
	} else {
		return NoneRuneOption
	}
}
func (l Float32List) HeadOption() Float32Option {
	if l.NonEmpty() {
		return Float32(*l.head)
	} else {
		return NoneFloat32Option
	}
}
func (l Float64List) HeadOption() Float64Option {
	if l.NonEmpty() {
		return Float64(*l.head)
	} else {
		return NoneFloat64Option
	}
}
func (l Complex64List) HeadOption() Complex64Option {
	if l.NonEmpty() {
		return Complex64(*l.head)
	} else {
		return NoneComplex64Option
	}
}
func (l Complex128List) HeadOption() Complex128Option {
	if l.NonEmpty() {
		return Complex128(*l.head)
	} else {
		return NoneComplex128Option
	}
}
func (l AnyList) HeadOption() AnyOption {
	if l.NonEmpty() {
		return AnyOpt(*l.head)
	} else {
		return NoneAnyOption
	}
}
func (l BoolOptionList) HeadOption() BoolOptionOption {
	if l.NonEmpty() {
		return BoolBool(*l.head)
	} else {
		return NoneBoolOptionOption
	}
}
func (l StringOptionList) HeadOption() StringOptionOption {
	if l.NonEmpty() {
		return StringString(*l.head)
	} else {
		return NoneStringOptionOption
	}
}
func (l IntOptionList) HeadOption() IntOptionOption {
	if l.NonEmpty() {
		return IntInt(*l.head)
	} else {
		return NoneIntOptionOption
	}
}
func (l Int8OptionList) HeadOption() Int8OptionOption {
	if l.NonEmpty() {
		return Int8Int8(*l.head)
	} else {
		return NoneInt8OptionOption
	}
}
func (l Int16OptionList) HeadOption() Int16OptionOption {
	if l.NonEmpty() {
		return Int16Int16(*l.head)
	} else {
		return NoneInt16OptionOption
	}
}
func (l Int32OptionList) HeadOption() Int32OptionOption {
	if l.NonEmpty() {
		return Int32Int32(*l.head)
	} else {
		return NoneInt32OptionOption
	}
}
func (l Int64OptionList) HeadOption() Int64OptionOption {
	if l.NonEmpty() {
		return Int64Int64(*l.head)
	} else {
		return NoneInt64OptionOption
	}
}
func (l UintOptionList) HeadOption() UintOptionOption {
	if l.NonEmpty() {
		return UintUint(*l.head)
	} else {
		return NoneUintOptionOption
	}
}
func (l Uint8OptionList) HeadOption() Uint8OptionOption {
	if l.NonEmpty() {
		return Uint8Uint8(*l.head)
	} else {
		return NoneUint8OptionOption
	}
}
func (l Uint16OptionList) HeadOption() Uint16OptionOption {
	if l.NonEmpty() {
		return Uint16Uint16(*l.head)
	} else {
		return NoneUint16OptionOption
	}
}
func (l Uint32OptionList) HeadOption() Uint32OptionOption {
	if l.NonEmpty() {
		return Uint32Uint32(*l.head)
	} else {
		return NoneUint32OptionOption
	}
}
func (l Uint64OptionList) HeadOption() Uint64OptionOption {
	if l.NonEmpty() {
		return Uint64Uint64(*l.head)
	} else {
		return NoneUint64OptionOption
	}
}
func (l UintptrOptionList) HeadOption() UintptrOptionOption {
	if l.NonEmpty() {
		return UintptrUintptr(*l.head)
	} else {
		return NoneUintptrOptionOption
	}
}
func (l ByteOptionList) HeadOption() ByteOptionOption {
	if l.NonEmpty() {
		return ByteByte(*l.head)
	} else {
		return NoneByteOptionOption
	}
}
func (l RuneOptionList) HeadOption() RuneOptionOption {
	if l.NonEmpty() {
		return RuneRune(*l.head)
	} else {
		return NoneRuneOptionOption
	}
}
func (l Float32OptionList) HeadOption() Float32OptionOption {
	if l.NonEmpty() {
		return Float32Float32(*l.head)
	} else {
		return NoneFloat32OptionOption
	}
}
func (l Float64OptionList) HeadOption() Float64OptionOption {
	if l.NonEmpty() {
		return Float64Float64(*l.head)
	} else {
		return NoneFloat64OptionOption
	}
}
func (l Complex64OptionList) HeadOption() Complex64OptionOption {
	if l.NonEmpty() {
		return Complex64Complex64(*l.head)
	} else {
		return NoneComplex64OptionOption
	}
}
func (l Complex128OptionList) HeadOption() Complex128OptionOption {
	if l.NonEmpty() {
		return Complex128Complex128(*l.head)
	} else {
		return NoneComplex128OptionOption
	}
}
func (l AnyOptionList) HeadOption() AnyOptionOption {
	if l.NonEmpty() {
		return AnyOptAny(*l.head)
	} else {
		return NoneAnyOptionOption
	}
}
func (l BoolArrOptionList) HeadOption() BoolArrOptionOption {
	if l.NonEmpty() {
		return BoolArrOptBool(*l.head)
	} else {
		return NoneBoolArrOptionOption
	}
}
func (l StringArrOptionList) HeadOption() StringArrOptionOption {
	if l.NonEmpty() {
		return StringArrOptString(*l.head)
	} else {
		return NoneStringArrOptionOption
	}
}
func (l IntArrOptionList) HeadOption() IntArrOptionOption {
	if l.NonEmpty() {
		return IntArrOptInt(*l.head)
	} else {
		return NoneIntArrOptionOption
	}
}
func (l Int8ArrOptionList) HeadOption() Int8ArrOptionOption {
	if l.NonEmpty() {
		return Int8ArrOptInt8(*l.head)
	} else {
		return NoneInt8ArrOptionOption
	}
}
func (l Int16ArrOptionList) HeadOption() Int16ArrOptionOption {
	if l.NonEmpty() {
		return Int16ArrOptInt16(*l.head)
	} else {
		return NoneInt16ArrOptionOption
	}
}
func (l Int32ArrOptionList) HeadOption() Int32ArrOptionOption {
	if l.NonEmpty() {
		return Int32ArrOptInt32(*l.head)
	} else {
		return NoneInt32ArrOptionOption
	}
}
func (l Int64ArrOptionList) HeadOption() Int64ArrOptionOption {
	if l.NonEmpty() {
		return Int64ArrOptInt64(*l.head)
	} else {
		return NoneInt64ArrOptionOption
	}
}
func (l UintArrOptionList) HeadOption() UintArrOptionOption {
	if l.NonEmpty() {
		return UintArrOptUint(*l.head)
	} else {
		return NoneUintArrOptionOption
	}
}
func (l Uint8ArrOptionList) HeadOption() Uint8ArrOptionOption {
	if l.NonEmpty() {
		return Uint8ArrOptUint8(*l.head)
	} else {
		return NoneUint8ArrOptionOption
	}
}
func (l Uint16ArrOptionList) HeadOption() Uint16ArrOptionOption {
	if l.NonEmpty() {
		return Uint16ArrOptUint16(*l.head)
	} else {
		return NoneUint16ArrOptionOption
	}
}
func (l Uint32ArrOptionList) HeadOption() Uint32ArrOptionOption {
	if l.NonEmpty() {
		return Uint32ArrOptUint32(*l.head)
	} else {
		return NoneUint32ArrOptionOption
	}
}
func (l Uint64ArrOptionList) HeadOption() Uint64ArrOptionOption {
	if l.NonEmpty() {
		return Uint64ArrOptUint64(*l.head)
	} else {
		return NoneUint64ArrOptionOption
	}
}
func (l UintptrArrOptionList) HeadOption() UintptrArrOptionOption {
	if l.NonEmpty() {
		return UintptrArrOptUintptr(*l.head)
	} else {
		return NoneUintptrArrOptionOption
	}
}
func (l ByteArrOptionList) HeadOption() ByteArrOptionOption {
	if l.NonEmpty() {
		return ByteArrOptByte(*l.head)
	} else {
		return NoneByteArrOptionOption
	}
}
func (l RuneArrOptionList) HeadOption() RuneArrOptionOption {
	if l.NonEmpty() {
		return RuneArrOptRune(*l.head)
	} else {
		return NoneRuneArrOptionOption
	}
}
func (l Float32ArrOptionList) HeadOption() Float32ArrOptionOption {
	if l.NonEmpty() {
		return Float32ArrOptFloat32(*l.head)
	} else {
		return NoneFloat32ArrOptionOption
	}
}
func (l Float64ArrOptionList) HeadOption() Float64ArrOptionOption {
	if l.NonEmpty() {
		return Float64ArrOptFloat64(*l.head)
	} else {
		return NoneFloat64ArrOptionOption
	}
}
func (l Complex64ArrOptionList) HeadOption() Complex64ArrOptionOption {
	if l.NonEmpty() {
		return Complex64ArrOptComplex64(*l.head)
	} else {
		return NoneComplex64ArrOptionOption
	}
}
func (l Complex128ArrOptionList) HeadOption() Complex128ArrOptionOption {
	if l.NonEmpty() {
		return Complex128ArrOptComplex128(*l.head)
	} else {
		return NoneComplex128ArrOptionOption
	}
}
func (l AnyArrOptionList) HeadOption() AnyArrOptionOption {
	if l.NonEmpty() {
		return AnyArrOptAny(*l.head)
	} else {
		return NoneAnyArrOptionOption
	}
}
func (l BoolListOptionList) HeadOption() BoolListOptionOption {
	if l.NonEmpty() {
		return BoolListOptBool(*l.head)
	} else {
		return NoneBoolListOptionOption
	}
}
func (l StringListOptionList) HeadOption() StringListOptionOption {
	if l.NonEmpty() {
		return StringListOptString(*l.head)
	} else {
		return NoneStringListOptionOption
	}
}
func (l IntListOptionList) HeadOption() IntListOptionOption {
	if l.NonEmpty() {
		return IntListOptInt(*l.head)
	} else {
		return NoneIntListOptionOption
	}
}
func (l Int8ListOptionList) HeadOption() Int8ListOptionOption {
	if l.NonEmpty() {
		return Int8ListOptInt8(*l.head)
	} else {
		return NoneInt8ListOptionOption
	}
}
func (l Int16ListOptionList) HeadOption() Int16ListOptionOption {
	if l.NonEmpty() {
		return Int16ListOptInt16(*l.head)
	} else {
		return NoneInt16ListOptionOption
	}
}
func (l Int32ListOptionList) HeadOption() Int32ListOptionOption {
	if l.NonEmpty() {
		return Int32ListOptInt32(*l.head)
	} else {
		return NoneInt32ListOptionOption
	}
}
func (l Int64ListOptionList) HeadOption() Int64ListOptionOption {
	if l.NonEmpty() {
		return Int64ListOptInt64(*l.head)
	} else {
		return NoneInt64ListOptionOption
	}
}
func (l UintListOptionList) HeadOption() UintListOptionOption {
	if l.NonEmpty() {
		return UintListOptUint(*l.head)
	} else {
		return NoneUintListOptionOption
	}
}
func (l Uint8ListOptionList) HeadOption() Uint8ListOptionOption {
	if l.NonEmpty() {
		return Uint8ListOptUint8(*l.head)
	} else {
		return NoneUint8ListOptionOption
	}
}
func (l Uint16ListOptionList) HeadOption() Uint16ListOptionOption {
	if l.NonEmpty() {
		return Uint16ListOptUint16(*l.head)
	} else {
		return NoneUint16ListOptionOption
	}
}
func (l Uint32ListOptionList) HeadOption() Uint32ListOptionOption {
	if l.NonEmpty() {
		return Uint32ListOptUint32(*l.head)
	} else {
		return NoneUint32ListOptionOption
	}
}
func (l Uint64ListOptionList) HeadOption() Uint64ListOptionOption {
	if l.NonEmpty() {
		return Uint64ListOptUint64(*l.head)
	} else {
		return NoneUint64ListOptionOption
	}
}
func (l UintptrListOptionList) HeadOption() UintptrListOptionOption {
	if l.NonEmpty() {
		return UintptrListOptUintptr(*l.head)
	} else {
		return NoneUintptrListOptionOption
	}
}
func (l ByteListOptionList) HeadOption() ByteListOptionOption {
	if l.NonEmpty() {
		return ByteListOptByte(*l.head)
	} else {
		return NoneByteListOptionOption
	}
}
func (l RuneListOptionList) HeadOption() RuneListOptionOption {
	if l.NonEmpty() {
		return RuneListOptRune(*l.head)
	} else {
		return NoneRuneListOptionOption
	}
}
func (l Float32ListOptionList) HeadOption() Float32ListOptionOption {
	if l.NonEmpty() {
		return Float32ListOptFloat32(*l.head)
	} else {
		return NoneFloat32ListOptionOption
	}
}
func (l Float64ListOptionList) HeadOption() Float64ListOptionOption {
	if l.NonEmpty() {
		return Float64ListOptFloat64(*l.head)
	} else {
		return NoneFloat64ListOptionOption
	}
}
func (l Complex64ListOptionList) HeadOption() Complex64ListOptionOption {
	if l.NonEmpty() {
		return Complex64ListOptComplex64(*l.head)
	} else {
		return NoneComplex64ListOptionOption
	}
}
func (l Complex128ListOptionList) HeadOption() Complex128ListOptionOption {
	if l.NonEmpty() {
		return Complex128ListOptComplex128(*l.head)
	} else {
		return NoneComplex128ListOptionOption
	}
}
func (l AnyListOptionList) HeadOption() AnyListOptionOption {
	if l.NonEmpty() {
		return AnyListOptAny(*l.head)
	} else {
		return NoneAnyListOptionOption
	}
}
func (l BoolOptionOptionList) HeadOption() BoolOptionOptionOption {
	if l.NonEmpty() {
		return BoolBoolBool(*l.head)
	} else {
		return NoneBoolOptionOptionOption
	}
}
func (l StringOptionOptionList) HeadOption() StringOptionOptionOption {
	if l.NonEmpty() {
		return StringStringString(*l.head)
	} else {
		return NoneStringOptionOptionOption
	}
}
func (l IntOptionOptionList) HeadOption() IntOptionOptionOption {
	if l.NonEmpty() {
		return IntIntInt(*l.head)
	} else {
		return NoneIntOptionOptionOption
	}
}
func (l Int8OptionOptionList) HeadOption() Int8OptionOptionOption {
	if l.NonEmpty() {
		return Int8Int8Int8(*l.head)
	} else {
		return NoneInt8OptionOptionOption
	}
}
func (l Int16OptionOptionList) HeadOption() Int16OptionOptionOption {
	if l.NonEmpty() {
		return Int16Int16Int16(*l.head)
	} else {
		return NoneInt16OptionOptionOption
	}
}
func (l Int32OptionOptionList) HeadOption() Int32OptionOptionOption {
	if l.NonEmpty() {
		return Int32Int32Int32(*l.head)
	} else {
		return NoneInt32OptionOptionOption
	}
}
func (l Int64OptionOptionList) HeadOption() Int64OptionOptionOption {
	if l.NonEmpty() {
		return Int64Int64Int64(*l.head)
	} else {
		return NoneInt64OptionOptionOption
	}
}
func (l UintOptionOptionList) HeadOption() UintOptionOptionOption {
	if l.NonEmpty() {
		return UintUintUint(*l.head)
	} else {
		return NoneUintOptionOptionOption
	}
}
func (l Uint8OptionOptionList) HeadOption() Uint8OptionOptionOption {
	if l.NonEmpty() {
		return Uint8Uint8Uint8(*l.head)
	} else {
		return NoneUint8OptionOptionOption
	}
}
func (l Uint16OptionOptionList) HeadOption() Uint16OptionOptionOption {
	if l.NonEmpty() {
		return Uint16Uint16Uint16(*l.head)
	} else {
		return NoneUint16OptionOptionOption
	}
}
func (l Uint32OptionOptionList) HeadOption() Uint32OptionOptionOption {
	if l.NonEmpty() {
		return Uint32Uint32Uint32(*l.head)
	} else {
		return NoneUint32OptionOptionOption
	}
}
func (l Uint64OptionOptionList) HeadOption() Uint64OptionOptionOption {
	if l.NonEmpty() {
		return Uint64Uint64Uint64(*l.head)
	} else {
		return NoneUint64OptionOptionOption
	}
}
func (l UintptrOptionOptionList) HeadOption() UintptrOptionOptionOption {
	if l.NonEmpty() {
		return UintptrUintptrUintptr(*l.head)
	} else {
		return NoneUintptrOptionOptionOption
	}
}
func (l ByteOptionOptionList) HeadOption() ByteOptionOptionOption {
	if l.NonEmpty() {
		return ByteByteByte(*l.head)
	} else {
		return NoneByteOptionOptionOption
	}
}
func (l RuneOptionOptionList) HeadOption() RuneOptionOptionOption {
	if l.NonEmpty() {
		return RuneRuneRune(*l.head)
	} else {
		return NoneRuneOptionOptionOption
	}
}
func (l Float32OptionOptionList) HeadOption() Float32OptionOptionOption {
	if l.NonEmpty() {
		return Float32Float32Float32(*l.head)
	} else {
		return NoneFloat32OptionOptionOption
	}
}
func (l Float64OptionOptionList) HeadOption() Float64OptionOptionOption {
	if l.NonEmpty() {
		return Float64Float64Float64(*l.head)
	} else {
		return NoneFloat64OptionOptionOption
	}
}
func (l Complex64OptionOptionList) HeadOption() Complex64OptionOptionOption {
	if l.NonEmpty() {
		return Complex64Complex64Complex64(*l.head)
	} else {
		return NoneComplex64OptionOptionOption
	}
}
func (l Complex128OptionOptionList) HeadOption() Complex128OptionOptionOption {
	if l.NonEmpty() {
		return Complex128Complex128Complex128(*l.head)
	} else {
		return NoneComplex128OptionOptionOption
	}
}
func (l AnyOptionOptionList) HeadOption() AnyOptionOptionOption {
	if l.NonEmpty() {
		return AnyOptAnyAny(*l.head)
	} else {
		return NoneAnyOptionOptionOption
	}
}
func (l BoolArrList) HeadOption() BoolArrOption {
	if l.NonEmpty() {
		return BoolArrOpt(*l.head)
	} else {
		return NoneBoolArrOption
	}
}
func (l StringArrList) HeadOption() StringArrOption {
	if l.NonEmpty() {
		return StringArrOpt(*l.head)
	} else {
		return NoneStringArrOption
	}
}
func (l IntArrList) HeadOption() IntArrOption {
	if l.NonEmpty() {
		return IntArrOpt(*l.head)
	} else {
		return NoneIntArrOption
	}
}
func (l Int8ArrList) HeadOption() Int8ArrOption {
	if l.NonEmpty() {
		return Int8ArrOpt(*l.head)
	} else {
		return NoneInt8ArrOption
	}
}
func (l Int16ArrList) HeadOption() Int16ArrOption {
	if l.NonEmpty() {
		return Int16ArrOpt(*l.head)
	} else {
		return NoneInt16ArrOption
	}
}
func (l Int32ArrList) HeadOption() Int32ArrOption {
	if l.NonEmpty() {
		return Int32ArrOpt(*l.head)
	} else {
		return NoneInt32ArrOption
	}
}
func (l Int64ArrList) HeadOption() Int64ArrOption {
	if l.NonEmpty() {
		return Int64ArrOpt(*l.head)
	} else {
		return NoneInt64ArrOption
	}
}
func (l UintArrList) HeadOption() UintArrOption {
	if l.NonEmpty() {
		return UintArrOpt(*l.head)
	} else {
		return NoneUintArrOption
	}
}
func (l Uint8ArrList) HeadOption() Uint8ArrOption {
	if l.NonEmpty() {
		return Uint8ArrOpt(*l.head)
	} else {
		return NoneUint8ArrOption
	}
}
func (l Uint16ArrList) HeadOption() Uint16ArrOption {
	if l.NonEmpty() {
		return Uint16ArrOpt(*l.head)
	} else {
		return NoneUint16ArrOption
	}
}
func (l Uint32ArrList) HeadOption() Uint32ArrOption {
	if l.NonEmpty() {
		return Uint32ArrOpt(*l.head)
	} else {
		return NoneUint32ArrOption
	}
}
func (l Uint64ArrList) HeadOption() Uint64ArrOption {
	if l.NonEmpty() {
		return Uint64ArrOpt(*l.head)
	} else {
		return NoneUint64ArrOption
	}
}
func (l UintptrArrList) HeadOption() UintptrArrOption {
	if l.NonEmpty() {
		return UintptrArrOpt(*l.head)
	} else {
		return NoneUintptrArrOption
	}
}
func (l ByteArrList) HeadOption() ByteArrOption {
	if l.NonEmpty() {
		return ByteArrOpt(*l.head)
	} else {
		return NoneByteArrOption
	}
}
func (l RuneArrList) HeadOption() RuneArrOption {
	if l.NonEmpty() {
		return RuneArrOpt(*l.head)
	} else {
		return NoneRuneArrOption
	}
}
func (l Float32ArrList) HeadOption() Float32ArrOption {
	if l.NonEmpty() {
		return Float32ArrOpt(*l.head)
	} else {
		return NoneFloat32ArrOption
	}
}
func (l Float64ArrList) HeadOption() Float64ArrOption {
	if l.NonEmpty() {
		return Float64ArrOpt(*l.head)
	} else {
		return NoneFloat64ArrOption
	}
}
func (l Complex64ArrList) HeadOption() Complex64ArrOption {
	if l.NonEmpty() {
		return Complex64ArrOpt(*l.head)
	} else {
		return NoneComplex64ArrOption
	}
}
func (l Complex128ArrList) HeadOption() Complex128ArrOption {
	if l.NonEmpty() {
		return Complex128ArrOpt(*l.head)
	} else {
		return NoneComplex128ArrOption
	}
}
func (l AnyArrList) HeadOption() AnyArrOption {
	if l.NonEmpty() {
		return AnyArrOpt(*l.head)
	} else {
		return NoneAnyArrOption
	}
}
func (l BoolArrArrList) HeadOption() BoolArrArrOption {
	if l.NonEmpty() {
		return BoolArrArrOpt(*l.head)
	} else {
		return NoneBoolArrArrOption
	}
}
func (l StringArrArrList) HeadOption() StringArrArrOption {
	if l.NonEmpty() {
		return StringArrArrOpt(*l.head)
	} else {
		return NoneStringArrArrOption
	}
}
func (l IntArrArrList) HeadOption() IntArrArrOption {
	if l.NonEmpty() {
		return IntArrArrOpt(*l.head)
	} else {
		return NoneIntArrArrOption
	}
}
func (l Int8ArrArrList) HeadOption() Int8ArrArrOption {
	if l.NonEmpty() {
		return Int8ArrArrOpt(*l.head)
	} else {
		return NoneInt8ArrArrOption
	}
}
func (l Int16ArrArrList) HeadOption() Int16ArrArrOption {
	if l.NonEmpty() {
		return Int16ArrArrOpt(*l.head)
	} else {
		return NoneInt16ArrArrOption
	}
}
func (l Int32ArrArrList) HeadOption() Int32ArrArrOption {
	if l.NonEmpty() {
		return Int32ArrArrOpt(*l.head)
	} else {
		return NoneInt32ArrArrOption
	}
}
func (l Int64ArrArrList) HeadOption() Int64ArrArrOption {
	if l.NonEmpty() {
		return Int64ArrArrOpt(*l.head)
	} else {
		return NoneInt64ArrArrOption
	}
}
func (l UintArrArrList) HeadOption() UintArrArrOption {
	if l.NonEmpty() {
		return UintArrArrOpt(*l.head)
	} else {
		return NoneUintArrArrOption
	}
}
func (l Uint8ArrArrList) HeadOption() Uint8ArrArrOption {
	if l.NonEmpty() {
		return Uint8ArrArrOpt(*l.head)
	} else {
		return NoneUint8ArrArrOption
	}
}
func (l Uint16ArrArrList) HeadOption() Uint16ArrArrOption {
	if l.NonEmpty() {
		return Uint16ArrArrOpt(*l.head)
	} else {
		return NoneUint16ArrArrOption
	}
}
func (l Uint32ArrArrList) HeadOption() Uint32ArrArrOption {
	if l.NonEmpty() {
		return Uint32ArrArrOpt(*l.head)
	} else {
		return NoneUint32ArrArrOption
	}
}
func (l Uint64ArrArrList) HeadOption() Uint64ArrArrOption {
	if l.NonEmpty() {
		return Uint64ArrArrOpt(*l.head)
	} else {
		return NoneUint64ArrArrOption
	}
}
func (l UintptrArrArrList) HeadOption() UintptrArrArrOption {
	if l.NonEmpty() {
		return UintptrArrArrOpt(*l.head)
	} else {
		return NoneUintptrArrArrOption
	}
}
func (l ByteArrArrList) HeadOption() ByteArrArrOption {
	if l.NonEmpty() {
		return ByteArrArrOpt(*l.head)
	} else {
		return NoneByteArrArrOption
	}
}
func (l RuneArrArrList) HeadOption() RuneArrArrOption {
	if l.NonEmpty() {
		return RuneArrArrOpt(*l.head)
	} else {
		return NoneRuneArrArrOption
	}
}
func (l Float32ArrArrList) HeadOption() Float32ArrArrOption {
	if l.NonEmpty() {
		return Float32ArrArrOpt(*l.head)
	} else {
		return NoneFloat32ArrArrOption
	}
}
func (l Float64ArrArrList) HeadOption() Float64ArrArrOption {
	if l.NonEmpty() {
		return Float64ArrArrOpt(*l.head)
	} else {
		return NoneFloat64ArrArrOption
	}
}
func (l Complex64ArrArrList) HeadOption() Complex64ArrArrOption {
	if l.NonEmpty() {
		return Complex64ArrArrOpt(*l.head)
	} else {
		return NoneComplex64ArrArrOption
	}
}
func (l Complex128ArrArrList) HeadOption() Complex128ArrArrOption {
	if l.NonEmpty() {
		return Complex128ArrArrOpt(*l.head)
	} else {
		return NoneComplex128ArrArrOption
	}
}
func (l AnyArrArrList) HeadOption() AnyArrArrOption {
	if l.NonEmpty() {
		return AnyArrArrOpt(*l.head)
	} else {
		return NoneAnyArrArrOption
	}
}
func (l BoolOptionArrList) HeadOption() BoolOptionArrOption {
	if l.NonEmpty() {
		return BoolOptionArrOpt(*l.head)
	} else {
		return NoneBoolOptionArrOption
	}
}
func (l StringOptionArrList) HeadOption() StringOptionArrOption {
	if l.NonEmpty() {
		return StringOptionArrOpt(*l.head)
	} else {
		return NoneStringOptionArrOption
	}
}
func (l IntOptionArrList) HeadOption() IntOptionArrOption {
	if l.NonEmpty() {
		return IntOptionArrOpt(*l.head)
	} else {
		return NoneIntOptionArrOption
	}
}
func (l Int8OptionArrList) HeadOption() Int8OptionArrOption {
	if l.NonEmpty() {
		return Int8OptionArrOpt(*l.head)
	} else {
		return NoneInt8OptionArrOption
	}
}
func (l Int16OptionArrList) HeadOption() Int16OptionArrOption {
	if l.NonEmpty() {
		return Int16OptionArrOpt(*l.head)
	} else {
		return NoneInt16OptionArrOption
	}
}
func (l Int32OptionArrList) HeadOption() Int32OptionArrOption {
	if l.NonEmpty() {
		return Int32OptionArrOpt(*l.head)
	} else {
		return NoneInt32OptionArrOption
	}
}
func (l Int64OptionArrList) HeadOption() Int64OptionArrOption {
	if l.NonEmpty() {
		return Int64OptionArrOpt(*l.head)
	} else {
		return NoneInt64OptionArrOption
	}
}
func (l UintOptionArrList) HeadOption() UintOptionArrOption {
	if l.NonEmpty() {
		return UintOptionArrOpt(*l.head)
	} else {
		return NoneUintOptionArrOption
	}
}
func (l Uint8OptionArrList) HeadOption() Uint8OptionArrOption {
	if l.NonEmpty() {
		return Uint8OptionArrOpt(*l.head)
	} else {
		return NoneUint8OptionArrOption
	}
}
func (l Uint16OptionArrList) HeadOption() Uint16OptionArrOption {
	if l.NonEmpty() {
		return Uint16OptionArrOpt(*l.head)
	} else {
		return NoneUint16OptionArrOption
	}
}
func (l Uint32OptionArrList) HeadOption() Uint32OptionArrOption {
	if l.NonEmpty() {
		return Uint32OptionArrOpt(*l.head)
	} else {
		return NoneUint32OptionArrOption
	}
}
func (l Uint64OptionArrList) HeadOption() Uint64OptionArrOption {
	if l.NonEmpty() {
		return Uint64OptionArrOpt(*l.head)
	} else {
		return NoneUint64OptionArrOption
	}
}
func (l UintptrOptionArrList) HeadOption() UintptrOptionArrOption {
	if l.NonEmpty() {
		return UintptrOptionArrOpt(*l.head)
	} else {
		return NoneUintptrOptionArrOption
	}
}
func (l ByteOptionArrList) HeadOption() ByteOptionArrOption {
	if l.NonEmpty() {
		return ByteOptionArrOpt(*l.head)
	} else {
		return NoneByteOptionArrOption
	}
}
func (l RuneOptionArrList) HeadOption() RuneOptionArrOption {
	if l.NonEmpty() {
		return RuneOptionArrOpt(*l.head)
	} else {
		return NoneRuneOptionArrOption
	}
}
func (l Float32OptionArrList) HeadOption() Float32OptionArrOption {
	if l.NonEmpty() {
		return Float32OptionArrOpt(*l.head)
	} else {
		return NoneFloat32OptionArrOption
	}
}
func (l Float64OptionArrList) HeadOption() Float64OptionArrOption {
	if l.NonEmpty() {
		return Float64OptionArrOpt(*l.head)
	} else {
		return NoneFloat64OptionArrOption
	}
}
func (l Complex64OptionArrList) HeadOption() Complex64OptionArrOption {
	if l.NonEmpty() {
		return Complex64OptionArrOpt(*l.head)
	} else {
		return NoneComplex64OptionArrOption
	}
}
func (l Complex128OptionArrList) HeadOption() Complex128OptionArrOption {
	if l.NonEmpty() {
		return Complex128OptionArrOpt(*l.head)
	} else {
		return NoneComplex128OptionArrOption
	}
}
func (l AnyOptionArrList) HeadOption() AnyOptionArrOption {
	if l.NonEmpty() {
		return AnyOptionArrOpt(*l.head)
	} else {
		return NoneAnyOptionArrOption
	}
}
func (l BoolListList) HeadOption() BoolListOption {
	if l.NonEmpty() {
		return BoolListOpt(*l.head)
	} else {
		return NoneBoolListOption
	}
}
func (l StringListList) HeadOption() StringListOption {
	if l.NonEmpty() {
		return StringListOpt(*l.head)
	} else {
		return NoneStringListOption
	}
}
func (l IntListList) HeadOption() IntListOption {
	if l.NonEmpty() {
		return IntListOpt(*l.head)
	} else {
		return NoneIntListOption
	}
}
func (l Int8ListList) HeadOption() Int8ListOption {
	if l.NonEmpty() {
		return Int8ListOpt(*l.head)
	} else {
		return NoneInt8ListOption
	}
}
func (l Int16ListList) HeadOption() Int16ListOption {
	if l.NonEmpty() {
		return Int16ListOpt(*l.head)
	} else {
		return NoneInt16ListOption
	}
}
func (l Int32ListList) HeadOption() Int32ListOption {
	if l.NonEmpty() {
		return Int32ListOpt(*l.head)
	} else {
		return NoneInt32ListOption
	}
}
func (l Int64ListList) HeadOption() Int64ListOption {
	if l.NonEmpty() {
		return Int64ListOpt(*l.head)
	} else {
		return NoneInt64ListOption
	}
}
func (l UintListList) HeadOption() UintListOption {
	if l.NonEmpty() {
		return UintListOpt(*l.head)
	} else {
		return NoneUintListOption
	}
}
func (l Uint8ListList) HeadOption() Uint8ListOption {
	if l.NonEmpty() {
		return Uint8ListOpt(*l.head)
	} else {
		return NoneUint8ListOption
	}
}
func (l Uint16ListList) HeadOption() Uint16ListOption {
	if l.NonEmpty() {
		return Uint16ListOpt(*l.head)
	} else {
		return NoneUint16ListOption
	}
}
func (l Uint32ListList) HeadOption() Uint32ListOption {
	if l.NonEmpty() {
		return Uint32ListOpt(*l.head)
	} else {
		return NoneUint32ListOption
	}
}
func (l Uint64ListList) HeadOption() Uint64ListOption {
	if l.NonEmpty() {
		return Uint64ListOpt(*l.head)
	} else {
		return NoneUint64ListOption
	}
}
func (l UintptrListList) HeadOption() UintptrListOption {
	if l.NonEmpty() {
		return UintptrListOpt(*l.head)
	} else {
		return NoneUintptrListOption
	}
}
func (l ByteListList) HeadOption() ByteListOption {
	if l.NonEmpty() {
		return ByteListOpt(*l.head)
	} else {
		return NoneByteListOption
	}
}
func (l RuneListList) HeadOption() RuneListOption {
	if l.NonEmpty() {
		return RuneListOpt(*l.head)
	} else {
		return NoneRuneListOption
	}
}
func (l Float32ListList) HeadOption() Float32ListOption {
	if l.NonEmpty() {
		return Float32ListOpt(*l.head)
	} else {
		return NoneFloat32ListOption
	}
}
func (l Float64ListList) HeadOption() Float64ListOption {
	if l.NonEmpty() {
		return Float64ListOpt(*l.head)
	} else {
		return NoneFloat64ListOption
	}
}
func (l Complex64ListList) HeadOption() Complex64ListOption {
	if l.NonEmpty() {
		return Complex64ListOpt(*l.head)
	} else {
		return NoneComplex64ListOption
	}
}
func (l Complex128ListList) HeadOption() Complex128ListOption {
	if l.NonEmpty() {
		return Complex128ListOpt(*l.head)
	} else {
		return NoneComplex128ListOption
	}
}
func (l AnyListList) HeadOption() AnyListOption {
	if l.NonEmpty() {
		return AnyListOpt(*l.head)
	} else {
		return NoneAnyListOption
	}
}
